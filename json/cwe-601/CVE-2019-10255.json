{"index": 3380, "cve_id": "CVE-2019-10255", "cwe_id": ["CWE-601"], "cve_language": "Python", "cve_description": "An Open Redirect vulnerability for all browsers in Jupyter Notebook before 5.7.7 and some browsers (Chrome, Firefox) in JupyterHub before 0.9.5 allows crafted links to the login page, which will redirect to a malicious site after successful login. Servers running on a base_url prefix are not affected.", "cvss": "6.1", "publish_date": "March 28, 2019", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "70fe9f0ddb3023162ece21fbb77d5564306b913b", "commit_message": "parse urls when validating redirect targets\n\nsimplifies check for redirects to external hosts", "commit_date": "2019-03-28T08:49:17Z", "project": "jupyter/notebook", "url": "https://api.github.com/repos/jupyter/notebook/commits/70fe9f0ddb3023162ece21fbb77d5564306b913b", "html_url": "https://github.com/jupyter/notebook/commit/70fe9f0ddb3023162ece21fbb77d5564306b913b", "windows_before": [{"commit_id": "08c4c898182edbe97aadef1815cce50448f975cb", "commit_date": "Wed Mar 27 21:43:40 2019 +0100", "commit_message": "protect against chrome mishandling backslash as slash in URLs", "files_name": ["notebook/auth/login.py"]}, {"commit_id": "d65328d4841892b412aef9015165db1eb029a8ed", "commit_date": "Wed Mar 27 16:19:10 2019 +0100", "commit_message": "changelog for redirect check", "files_name": ["docs/source/changelog.rst"]}, {"commit_id": "b9d9e659e9b2edd70767129c06ac76761e046791", "commit_date": "Wed Mar 27 15:41:49 2019 +0100", "commit_message": "parse urls when validating redirect targets", "files_name": ["notebook/auth/login.py", "notebook/auth/tests/test_login.py"]}, {"commit_id": "35ac42bee8a46c2b414653d8685c9772fa87f304", "commit_date": "Wed Mar 27 16:11:31 2019 +0100", "commit_message": "Merge pull request #4513 from minrk/websocket-closed-forward", "files_name": ["850eda5657f2afd63ad56d4f1dec3355bdb4a072 - Wed Mar 27 14:43:25 2019 +0100 : add .js mimetype fix to changelog", "docs/source/changelog.rst"]}, {"commit_id": "a53733474465ec4a0ade8bf0a7780a913af09ed7", "commit_date": "Tue Mar 26 15:51:04 2019 +0100", "commit_message": "Changelog for 5.7.7", "files_name": ["docs/source/changelog.rst"]}, {"commit_id": "e908edf1714dff43a1646467190060cc5163a4db", "commit_date": "Tue Mar 26 15:01:06 2019 +0100", "commit_message": "Fix return value for async restart_kernel", "files_name": ["notebook/services/kernels/kernelmanager.py"]}, {"commit_id": "ca7b8dd163120aa75503039db7bedea78edee82a", "commit_date": "Tue Mar 26 13:04:58 2019 +0100", "commit_message": "catch errors when writing on closed sockets", "files_name": ["notebook/base/zmqhandlers.py"]}, {"commit_id": "eba43aa6c94772c0b096054ed1b8020ea799a569", "commit_date": "Wed Mar 27 14:40:29 2019 +0100", "commit_message": "Merge pull request #4520 from minrk/selenium-fix", "files_name": ["7a13d5c096b6090881b5b36d19839158360a33a2 - Wed Mar 27 14:09:13 2019 +0100 : Merge pull request #4468 from ciaranlangton/master", "5ad7a41c4c285b03f8b6f2a363eb9f33acb6b2b6 - Wed Mar 27 14:00:42 2019 +0100 : wait for kernel to be ready in selenium tests", "notebook/tests/selenium/utils.py"]}, {"commit_id": "1e8c90f5c9b91d090ff882e5cdc0339d8d77905f", "commit_date": "Wed Mar 27 14:01:18 2019 +0100", "commit_message": "Merge pull request #4519 from minrk/linkcheck", "files_name": ["7657c0ca5f5869b8a7803c84161fddeb1bb5eb72 - Wed Mar 27 13:43:15 2019 +0100 : [doc] fix some linkcheck errors and warnings", "docs/source/changelog.rst", "docs/source/examples/Notebook/Distributing Jupyter Extensions as Python Packages.ipynb", "docs/source/examples/Notebook/What is the Jupyter Notebook.ipynb", "docs/source/examples/Notebook/Working With Markdown Cells.ipynb", "docs/source/examples/Notebook/examples_index.rst", "docs/source/extending/handlers.rst", "docs/source/troubleshooting.rst"]}, {"commit_id": "35a19e930860e6cecd12a4dfecac357769edc47d", "commit_date": "Sun Mar 24 21:20:18 2019 -0700", "commit_message": "Fixed dualmode insert test and convert dualmode arrows test to selenium", "files_name": ["notebook/tests/notebook/dualmode_arrows.js", "notebook/tests/selenium/test_dualmode_arrows.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "b26221ad44037f16610db0234ef109d7879ab437", "commit_date": "Sun Mar 17 16:35:04 2019 +0000", "commit_message": "Merge pull request #4445 from emiliotl/convert_shutdown_js_to_py_selenium", "files_name": ["e3c9a6729457cb802bba11644d27e1813ed8d4cd - Thu Mar 14 00:48:51 2019 -0700 : Changed to .utils module for CI tests acceptance", "notebook/tests/selenium/test_shutdown.py"]}, {"commit_id": "0c003e9de1bf3207b16b5b3cca7c0c476de9603b", "commit_date": "Thu Mar 14 00:34:38 2019 -0700", "commit_message": "Handled possible race conditions and modified returned object on get_cell_output", "files_name": ["notebook/tests/selenium/test_shutdown.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "d8730ced00132b1cdd4434f5e642a91acba6372a", "commit_date": "Sun Mar 10 22:13:22 2019 +0000", "commit_message": "Fix comment", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "19c6cbb618fe4d0cd8f830772640b60b423377a5", "commit_date": "Sun Mar 10 21:51:29 2019 +0000", "commit_message": "Fix incorrect MIME type for JavaScript", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "9560e0cf4c3a3612f7e0f869035e7e3eeb5853a0", "commit_date": "Fri Mar 8 13:26:01 2019 +0100", "commit_message": "changelog for 5.7.6", "files_name": ["docs/source/changelog.rst"]}, {"commit_id": "7f7bfeefc08568aacd626438e22a6361aa57223a", "commit_date": "Thu Jan 31 15:54:50 2019 +0100", "commit_message": "Block cross-origin GET,HEAD requests with mismatched Referer", "files_name": ["notebook/base/handlers.py"]}, {"commit_id": "d7becafd593c2958d8a241928412ddf4ba801a42", "commit_date": "Fri Jan 18 12:32:40 2019 +0100", "commit_message": "add xsrf checks on files endpoints", "files_name": ["notebook/base/handlers.py", "notebook/files/handlers.py", "notebook/services/nbconvert/handlers.py"]}, {"commit_id": "98773c1a8a2eb2e12fbcf1a08fc97e6802f45210", "commit_date": "Fri Jan 18 10:45:50 2019 +0100", "commit_message": "Set X-Content-Options: nosniff on all handlers", "files_name": ["notebook/base/handlers.py"]}, {"commit_id": "d17caf92c0817e8bc771209a1e867f0c73e34724", "commit_date": "Thu Mar 7 13:31:12 2019 -0800", "commit_message": "Merge pull request #4453 from minrk/maybe-future", "files_name": ["43622e756ea83ce8589e9136ba68301b84d3e832 - Thu Mar 7 13:26:56 2019 -0800 : Merge pull request #4443 from minrk/notify-ws-close", "23adb8e919261f9f3b6aa7929c24b0cbd1d81a4f - Wed Mar 6 23:56:34 2019 -0700 : Replacing time.sleep for a conditional waiting method", "notebook/tests/selenium/test_shutdown.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "e80c77004d108a9be4a62556d25a25e57acd7572", "commit_date": "Wed Mar 6 13:10:01 2019 +0100", "commit_message": "Merge pull request #4423 from minrk/fix-custom", "files_name": ["3d94b517e80a7823e7d0be9a05421744cc28b5ac - Wed Mar 6 13:09:21 2019 +0100 : require Python 3.5", ".travis.yml", "setup.py"]}, {"commit_id": "07cdcafe2a2fceb707a634ce9ead56793b7fe191", "commit_date": "Wed Mar 6 11:02:21 2019 +0100", "commit_message": "Merge pull request #4250 from vilhelmen/headercontent_super", "files_name": ["729183b14830fb32063b145348c875ebfef278c7 - Tue Mar 5 15:08:29 2019 +0100 : use our own maybe_future", "notebook/base/zmqhandlers.py", "notebook/bundler/handlers.py", "notebook/files/handlers.py", "notebook/services/api/handlers.py", "notebook/services/contents/handlers.py", "notebook/services/kernels/handlers.py", "notebook/services/kernels/kernelmanager.py", "notebook/services/kernelspecs/handlers.py", "notebook/services/sessions/handlers.py", "notebook/services/sessions/sessionmanager.py", "notebook/tests/test_gateway.py", "notebook/utils.py", "setup.py"]}, {"commit_id": "88aae11172490ba5b4b34f273e62dc6143936bbe", "commit_date": "Wed Mar 6 10:48:52 2019 +0100", "commit_message": "Merge pull request #4431 from kevin-bates/apply-nb2kg-updates", "files_name": ["859ae0ac60456c0e38b44f06852b8a24f8a1cfb0 - Wed Mar 6 10:47:14 2019 +0100 : Merge pull request #4306 from 00Kai0/00kai0", "e2ac757821bc898ddfd0db5ba2b9da4f02ace931 - Wed Mar 6 10:46:00 2019 +0100 : Merge pull request #4449 from minrk/unpin-tornado", "0b73ab600affb12cb210a7f7e08ac423cdb4e452 - Tue Mar 5 14:54:02 2019 +0100 : changelog for 5.7.5 [ci skip]", "docs/source/changelog.rst"]}, {"commit_id": "ff238cc7628794b8dadd4c78b461caadfa5594b4", "commit_date": "Wed Mar 6 10:28:50 2019 +0100", "commit_message": "Merge pull request #4147 from jakelevirne/master", "files_name": ["73a7630517846e94e9d08a9d0677bcc82163aed0 - Wed Mar 6 10:28:41 2019 +0100 : there are four lights [ci skip]", "docs/source/examples/Notebook/What is the Jupyter Notebook.ipynb"]}, {"commit_id": "d4e60d975d450ccc682ea09913c16226b2d690fb", "commit_date": "Tue Mar 5 14:36:30 2019 +0100", "commit_message": "oops, no Python 2 on master", "files_name": [".travis.yml"]}, {"commit_id": "be35a370cebbe2b7dc3912ea90e4f91b3ad37406", "commit_date": "Tue Mar 5 14:28:55 2019 +0100", "commit_message": "gateway: compatibility with tornado 4", "files_name": ["notebook/gateway/managers.py"]}, {"commit_id": "71e185316b6005f773223e4fe584af00171e0c56", "commit_date": "Tue Mar 5 14:16:12 2019 +0100", "commit_message": "add test entries for tornado 4", "files_name": [".travis.yml"]}, {"commit_id": "aa4ffe3f4b2f6d9d82e0445fbf0551b35149ffe2", "commit_date": "Tue Mar 5 14:16:02 2019 +0100", "commit_message": "test with stable Python 3.7", "files_name": [".travis.yml"]}, {"commit_id": "dcee710154e102e50fe89df1bdd2701726d3f1d2", "commit_date": "Tue Mar 5 14:03:34 2019 +0100", "commit_message": "patch gen.maybe_future for compatibility with tornado 6", "files_name": ["notebook/utils.py"]}, {"commit_id": "5828300401f9f34bd9db70a7734ca798e41c1a9b", "commit_date": "Tue Mar 5 14:01:08 2019 +0100", "commit_message": "fix check for closed connection", "files_name": ["notebook/base/zmqhandlers.py"]}, {"commit_id": "51eb86f6a04e639af0e6005ff7bb9fee1100b645", "commit_date": "Tue Mar 5 13:35:45 2019 +0100", "commit_message": "Merge pull request #4426 from fchapoton/patch-1", "files_name": ["b1bd4e598356d1563aa62a78aeb2042731e30c26 - Tue Mar 5 12:27:53 2019 +0100 : pip freeze on tornado", ".travis.yml"]}, {"commit_id": "57122409b2619a656dc7c41428b5456738261ff5", "commit_date": "Tue Mar 5 12:18:45 2019 +0100", "commit_message": "unpin tornado", "files_name": ["setup.py"]}, {"commit_id": "b892d7c8c6fd9f702ba39537b5f9d90b1ce50ff6", "commit_date": "Mon Mar 4 00:23:02 2019 -0700", "commit_message": "Converted shutdown.js test to selenium python test", "files_name": ["notebook/tests/notebook/shutdown.js", "notebook/tests/selenium/test_shutdown.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "490b8fd3ef72ac9e053ed6afc1776b2a28308c74", "commit_date": "Sat Mar 2 12:19:03 2019 +0100", "commit_message": "trigger _ws_closed on any close event", "files_name": ["notebook/static/services/kernels/kernel.js"]}, {"commit_id": "46bcf78d6390ec3c3b1642903da0fdffb8c175e8", "commit_date": "Tue Feb 26 14:10:38 2019 -0800", "commit_message": "Update gateway support with recent changes", "files_name": ["notebook/gateway/handlers.py", "notebook/gateway/managers.py", "notebook/services/kernelspecs/handlers.py"]}, {"commit_id": "9f59b7feb35421f3cf4a82cb85d730867a9b9820", "commit_date": "Mon Feb 25 21:18:52 2019 +0100", "commit_message": "remove unused import of os", "files_name": ["notebook/services/sessions/sessionmanager.py"]}, {"commit_id": "d145301b5583366fc0c5e938ded80f07a0bc1bbf", "commit_date": "Mon Feb 25 10:46:20 2019 +0100", "commit_message": "Merge pull request #4112 from dmikushin/master", "files_name": ["6a96754208aa054a91781eabff06cf89e1b1e37c - Mon Feb 25 10:45:20 2019 +0100 : Merge pull request #4355 from EvgeniDubov/fix_notebook_file_extension_case", "497837317422c426b6aa607acfbc53191128d0e4 - Mon Feb 25 10:44:17 2019 +0100 : Merge pull request #4130 from SpencerPark/markdown-table-alignment", "f4183bb6121d88f139fd92e1a0255b9f9e19ba22 - Mon Feb 25 10:42:52 2019 +0100 : Merge pull request #4275 from steaward/issue-4270", "eea02c2c5f5e7ea344de7d8600eb041230ffba04 - Mon Feb 25 10:42:12 2019 +0100 : Merge pull request #4213 from aayusharyan/patch-1", "b4328ea7ee89e9dcac521d415323c49593830d03 - Mon Feb 25 10:40:06 2019 +0100 : move rtl fixes to page.less from custom.css", "notebook/static/base/less/page.less", "notebook/static/custom/custom.css"]}, {"commit_id": "6d15e9cdabad5e33a82c6727079bbc99e565564a", "commit_date": "Mon Feb 25 10:30:57 2019 +0100", "commit_message": "Merge pull request #4328 from maxmouchet/list_hidden_files", "files_name": ["0e28875a1c110660f902d932ffd004d9848f7fb8 - Mon Feb 25 10:30:18 2019 +0100 : Merge pull request #4392 from takluyver/tornado-6-ws-coroutine", "bba82ca3bdb90ff6382dccef5fb3a805facf623a - Mon Feb 25 10:29:50 2019 +0100 : Merge pull request #4412 from kevin-bates/async-startup", "46ee18b23f6add225459530be64ceded08e1e279 - Mon Feb 25 10:29:04 2019 +0100 : Merge pull request #4376 from mpacer/update_json_configd", "906406aeb0fd11494f0738cbad93e29abb5b5118 - Mon Feb 25 10:15:56 2019 +0100 : Merge pull request #4161 from kevin-bates/embed-nb2kg", "2c526fb60b529ca84be7c4d12bcb5f344274a542 - Mon Feb 18 16:02:08 2019 -0800 : Enable restart_kernel for async usage", "notebook/services/kernels/kernelmanager.py"]}, {"commit_id": "132f27306522b32fa667a6b208034cb7a04025c9", "commit_date": "Thu Feb 14 12:11:00 2019 +0000", "commit_message": "Merge pull request #4377 from takluyver/selenium-test-save", "files_name": ["acba19033b720902287eaed11f9ed656fd8f456d - Thu Dec 6 14:18:28 2018 -0800 : Minimize handlers and manager methods", "docs/source/public_server.rst", "notebook/gateway/handlers.py", "notebook/gateway/managers.py", "notebook/notebookapp.py", "notebook/services/kernels/handlers.py", "notebook/services/kernelspecs/handlers.py", "notebook/services/sessions/sessionmanager.py", "notebook/services/sessions/tests/test_sessionmanager.py", "notebook/tests/test_gateway.py"]}, {"commit_id": "f74ef2f69121acfe07f2200a88d4f2119b871551", "commit_date": "Tue Dec 4 14:19:56 2018 -0800", "commit_message": "Move environment variables to SingletonConfigurable", "files_name": ["docs/source/public_server.rst", "notebook/gateway/handlers.py", "notebook/gateway/managers.py", "notebook/notebookapp.py", "notebook/tests/launchnotebook.py", "notebook/tests/test_gateway.py"]}, {"commit_id": "060a2b9aea45e11404bce57fbd80017a2a34561c", "commit_date": "Fri Oct 19 16:08:46 2018 -0700", "commit_message": "Embed NB2KG into Notebook server", "files_name": ["docs/source/public_server.rst", "notebook/gateway/__init__.py", "notebook/gateway/handlers.py", "notebook/gateway/managers.py", "notebook/notebookapp.py", "notebook/tests/test_gateway.py"]}, {"commit_id": "7c8db2d06355333cdc351478ed98db33f72d306b", "commit_date": "Fri Feb 8 17:56:22 2019 +0000", "commit_message": "Call tornado WebSocketHandler.get() as a coroutine", "files_name": ["notebook/base/zmqhandlers.py"]}, {"commit_id": "8a4cbd0ad91371392b90672afea58560d37c847e", "commit_date": "Thu Jan 31 14:06:33 2019 +0000", "commit_message": "Merge pull request #4318 from RomanKornev/upd-document-title", "files_name": ["bc3a8cbe797dd1181c51cd54aab4315ddc30c1be - Thu Jan 31 11:49:06 2019 +0000 : Convert test for saving with complex name to Selenium", "notebook/tests/notebook/save.js"]}], "windows_after": [{"commit_id": "b981c5b055041c036e05e735694c60863075247d", "commit_date": "Thu Mar 28 12:04:03 2019 +0100", "commit_message": "Merge branch 'check-redirect-target'", "files_name": ["2fabe50c60d3bafb2f91acfc6c5d9ab5628bef7f - Thu Mar 28 14:56:13 2019 +0100 : explicitly ignore windows registry for mimetypes", "notebook/notebookapp.py"]}, {"commit_id": "17230069ad110c59ac4802dc7347920b08c0ca7b", "commit_date": "Fri Mar 29 13:13:58 2019 +0300", "commit_message": "Update link and http -> https", "files_name": ["README.md"]}, {"commit_id": "d8120e5845690de2ecf1a02962c8496431b65fd9", "commit_date": "Fri Mar 29 20:24:30 2019 -0700", "commit_message": "Rename ctrl method to cmdtrl which covers the mains OS", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "0460caab9a15b2691adf1fa121820c7ef2c4560f", "commit_date": "Sun Mar 31 11:32:49 2019 +0200", "commit_message": "Switch to Sphinx logging API", "files_name": ["docs/sphinxext/github.py"]}, {"commit_id": "b1e4ac2520f50ba5e0abe864df6da7a5eaf21a99", "commit_date": "Mon Apr 1 13:14:40 2019 +0200", "commit_message": "Merge pull request #4534 from hroncok/sphinx2", "files_name": ["d77a1e7ae8cf2c1779d16815856f9ab3c5124568 - Mon Apr 1 14:24:14 2019 +0100 : Use separately packaged sphinxcontrib_github_alt", "docs/doc-requirements.txt", "docs/environment.yml", "docs/source/conf.py", "docs/sphinxext/github.py"]}, {"commit_id": "1ffd35f524f6bcc054cf7465962bcf45bef04785", "commit_date": "Mon Apr 1 14:55:49 2019 +0100", "commit_message": "Merge pull request #4529 from ivigamberdiev/patch-1", "files_name": ["f21650ed0cc5c8b71bc898323a642310826efbab - Mon Apr 1 14:57:22 2019 +0100 : Merge pull request #4512 from emiliotl/convert_dmode_arrows_and_fix_dmode_insert_tests", "c5264b6cea06063d385d028e5906846c460204f1 - Fri Mar 29 20:05:59 2019 -0400 : Changed the default protocol", "notebook/notebookapp.py"]}, {"commit_id": "61c50b1b8c052d5e0c236c51ad57e9881f4f384f", "commit_date": "Wed Apr 3 10:36:37 2019 -0400", "commit_message": "Improve code, add docstring", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "55177807bc52b9479b5c472cc4fee7fe0647f17c", "commit_date": "Wed Apr 3 12:41:10 2019 -0400", "commit_message": "Fixed small issue and added more information about PROTOCOL_TLS", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "1a6fc8e5b63ce0a78dc777ae2a2cdc0589bcfcf3", "commit_date": "Thu Apr 4 08:07:21 2019 +0100", "commit_message": "Merge pull request #4531 from Quansight/change-default-ssl", "files_name": ["55e7a6635b7e1bb59321f523e5b1f8ca5df88a05 - Thu Apr 4 08:14:32 2019 +0100 : Merge pull request #4536 from takluyver/sphinxext-github-out", "8c8ce334b5de84b9cac5d9d673d95b9a07407d24 - Fri Apr 5 13:42:10 2019 +0100 : Merge pull request #4528 from minrk/override-mime-types", "eea37a6b2110e0b8a5491f17e241fa3c8aecb5f7 - Mon Apr 1 12:21:51 2019 +0200 : changelog for 5.7.8", "docs/source/changelog.rst"]}, {"commit_id": "31fce8270a91efb1cf10b560c7f425ea7fac7d47", "commit_date": "Fri Apr 12 14:38:14 2019 -0700", "commit_message": "Converted clipboard js to selenium and rename undeleted to conventional name", "files_name": ["notebook/tests/notebook/clipboard_multiselect.js", "notebook/tests/selenium/test_clipboard_multiselect.py", "notebook/tests/selenium/test_undelete.py"]}, {"commit_id": "cc5157d69575185540ccce64427f43a4b404c6dc", "commit_date": "Wed Apr 24 21:22:14 2019 -0700", "commit_message": "fix duplicates in download as meny", "files_name": ["notebook/notebook/handlers.py", "notebook/templates/notebook.html"]}, {"commit_id": "0ca8639f60342b08d082e62d7372a15dbae53b16", "commit_date": "Thu Apr 25 17:12:29 2019 +0200", "commit_message": "Update Working With Markdown Cells.ipynb", "files_name": ["docs/source/examples/Notebook/Working With Markdown Cells.ipynb"]}, {"commit_id": "b2653ddb97f3628a312e30f306316520fd705e0c", "commit_date": "Thu May 2 09:56:28 2019 -0700", "commit_message": "Add some code style improvements by not using list comprehension when not required", "files_name": ["notebook/tests/selenium/test_clipboard_multiselect.py"]}, {"commit_id": "01b084381c367bdca1d58b176428b728a67628ca", "commit_date": "Sat May 4 11:38:25 2019 +0100", "commit_message": "Merge pull request #4563 from emiliotl/convert_clipboard_js_to_selenium", "files_name": ["89e678c74c7cb788a349c38ea169f5d8f8e1bc80 - Mon May 6 11:43:03 2019 -0700 : Convert dualmode_cellmode to selenium", "notebook/tests/notebook/dualmode_cellmode.js", "notebook/tests/selenium/test_dualmode_cellmode.py"]}, {"commit_id": "3cdc4187997f55cf19504bf4ad166d9cd628a336", "commit_date": "Wed May 8 11:07:11 2019 -0700", "commit_message": "Add alt command, gets, and validate_notebook_state", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "5b162cfdf9aa9e7e0261e5ad1f740426956d81df", "commit_date": "Wed May 8 11:08:09 2019 -0700", "commit_message": "Convert dualmode_clipboard to selenium", "files_name": ["notebook/tests/notebook/dualmode_clipboard.js", "notebook/tests/selenium/test_dualmode_clipboard.py"]}, {"commit_id": "9158a79ec4443dfe0f3ed84068b3d079e88cead5", "commit_date": "Wed May 8 11:08:31 2019 -0700", "commit_message": "Convert dualmode_execute to selenium", "files_name": ["notebook/tests/notebook/dualmode_execute.js", "notebook/tests/selenium/test_dualmode_execute.py"]}, {"commit_id": "ecc27953e35e01f9f69a9243ed274648bea0a309", "commit_date": "Wed May 8 11:19:10 2019 -0700", "commit_message": "Remove unused import & refactor", "files_name": ["notebook/tests/selenium/test_dualmode_cellmode.py"]}, {"commit_id": "849b7def18659374ef8b3112067cf14792664403", "commit_date": "Wed May 8 12:30:11 2019 -0700", "commit_message": "Convert dualmode_markdown to selenium", "files_name": ["notebook/tests/notebook/dualmode_markdown.js", "notebook/tests/selenium/test_dualmode_markdown.py"]}, {"commit_id": "c674a579557a4f31382264795389314a177ec237", "commit_date": "Thu May 9 11:58:49 2019 -0700", "commit_message": "Convert multiselect_toggle  to selenium", "files_name": ["notebook/tests/selenium/test_multiselect_toggle.py"]}, {"commit_id": "3f2fff21b0b5851a429ea8fe39838ade274360e8", "commit_date": "Thu May 9 11:59:38 2019 -0700", "commit_message": " Remove multiselect_toggle js", "files_name": ["notebook/tests/notebook/multiselect_toggle.js"]}, {"commit_id": "cf1a76441c60e89db090293f847a91c4d0331d39", "commit_date": "Sat May 11 19:18:50 2019 -0400", "commit_message": "Make tooltip buttons have consistent appearance", "files_name": ["notebook/static/notebook/js/tooltip.js"]}, {"commit_id": "93099010ffbafa479c6e5a3ff6c4deac05bd7321", "commit_date": "Wed May 15 11:06:28 2019 +0100", "commit_message": "Merge pull request #4608 from LuisARodr/dualmode_tests", "files_name": ["69b7a1d204c4dcc2b43387eadb33981f7f1fba7b - Wed May 15 12:53:02 2019 +0100 : Merge pull request #4623 from mtd91429/patch-1", "fccc7d7420bc5ffe97cfc3c2da0cebc59828c3d4 - Wed May 15 08:32:06 2019 -0700 : Resolve notebook len duplicate method", "notebook/tests/selenium/test_dualmode_execute.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "3a0cb7b11350747b0413bab3d08492450fbdf031", "commit_date": "Wed May 15 13:36:44 2019 -0700", "commit_message": "Refactor validate_dualmode_mode Previously know as validate_notebook_mode changed name to validate_dualmode_mode to represent better the method. Added a docstring. Removed the handling of index being None.", "files_name": ["notebook/tests/selenium/test_dualmode_clipboard.py", "notebook/tests/selenium/test_dualmode_execute.py", "notebook/tests/selenium/test_dualmode_markdown.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "8749a5db99873eee53596a92a19dc45aa7c1b3a6", "commit_date": "Wed May 15 15:01:40 2019 -0700", "commit_message": "Modified 'scrolling enabled' test assert", "files_name": ["notebook/tests/selenium/test_multiselect_toggle.py"]}, {"commit_id": "8ae0c047a91ad8396debe0a35e3d15a505813c08", "commit_date": "Thu May 16 09:36:59 2019 +0100", "commit_message": "Merge pull request #4617 from TeresaPartidaS/convert_multiselect_toggle_js_to_selenium", "files_name": ["c276d819145cab3aa3e151e50d4011c2609c85c3 - Thu May 16 09:00:49 2019 -0700 : Update docstring Added more information about what the checks are", "notebook/tests/selenium/utils.py"]}, {"commit_id": "b294bf57f86fde6c9b57d3be1c8cb8030d1c08c7", "commit_date": "Thu May 16 09:04:58 2019 -0700", "commit_message": "Refactor of ifs Removed parentheses Changed '==' for 'is' on None", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "83b3c19de33e38fd508cb95b554c4714b8a14964", "commit_date": "Thu May 16 09:12:10 2019 -0700", "commit_message": "Solve insonsistensy on is_focused_on Changed asserts for returns Changed how the function is called on edit mode check", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "6b7d179697e889d6bc806b7b6fe9d57096e77300", "commit_date": "Thu May 16 09:28:00 2019 -0700", "commit_message": "Change assert for Exception", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "6679891464d5d9d0c9ef8d99da86fa44148f1713", "commit_date": "Thu May 16 09:31:22 2019 -0700", "commit_message": "Give space to inline comments", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "6876f74c6dfb700b6620bceb1fd4fbafc66d18e6", "commit_date": "Thu May 16 16:27:26 2019 -0700", "commit_message": "moved hard coded exporters", "files_name": ["notebook/notebook/handlers.py"]}, {"commit_id": "799b8be841a773d311d50d0edb77e6a5f22edd65", "commit_date": "Fri May 17 09:03:15 2019 -0700", "commit_message": "Move repeated assert mode Moved 'assert mode == keyboard_mode' ouside the branches. This means that if a unknown mode comes its gonna get catched by the assert and never gona get to the else statement. For this, the else stament moved to before the assert, caching the mode error before the assert.", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "cd2ea150a0bd1ff5e208e4931a0d460bad35e91d", "commit_date": "Fri May 17 09:11:11 2019 -0700", "commit_message": "Refactor for Changed 'for mode in cells_mode' for 'for i, mode in enumerate(cells_mode)' Removed the manual 'i' increment and declaration.", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "1ae78382275528bf7c08b4ed2bec280c9ed9715d", "commit_date": "Fri May 17 12:20:41 2019 -0700", "commit_message": "exporter naming scheme", "files_name": ["notebook/notebook/handlers.py"]}, {"commit_id": "9237c3732e7fd6fc37d40799a6390cfafaa3f024", "commit_date": "Sun May 19 11:29:38 2019 +0200", "commit_message": "Merge pull request #4615 from LuisARodr/dualmode_execute", "files_name": ["9425250005d46c9fb0057b0c322e16d07125b003 - Sun May 19 11:39:08 2019 +0200 : Merge pull request #4588 from t-makaro/downloadas", "a33f4c60b1bf4e4ff19e6e8c871a6e382816fbb8 - Fri May 24 15:23:32 2019 +0200 : Merge pull request #4591 from dalanicolai/patch-1", "077322dcd974d17db82e52e8538ef92a16cc09c4 - Fri May 24 17:43:46 2019 +0200 : Use JavaScript to redirect users", "notebook/templates/browser-open.html"]}, {"commit_id": "a403d59cb0ff475ba63f6708a8e8a37a7046c68b", "commit_date": "Tue May 28 07:46:02 2019 +0200", "commit_message": "Merge pull request #4642 from betatim/js-redirect", "files_name": ["bc920e98791f58dc49bb82ee34e9ec13e807085d - Fri Jun 7 15:46:09 2019 +0530 : .travis.yml: The 'sudo' tag is now deprecated in Travis CI (#4654)", ".travis.yml"]}, {"commit_id": "922e97922c80e0cef7edd25a3455190cb9ae5ea8", "commit_date": "Fri Jun 7 20:17:18 2019 +1000", "commit_message": "Fix French typo (#4651)", "files_name": ["notebook/i18n/fr_FR/LC_MESSAGES/nbjs.po"]}, {"commit_id": "6174498ab0c4047aaed81a1bb5aa71b1fd8c842b", "commit_date": "Fri Jun 7 12:20:33 2019 +0200", "commit_message": "Add id for command palette button group (#4661)", "files_name": ["notebook/static/notebook/js/maintoolbar.js"]}, {"commit_id": "61ae2d6778a19de7fee4890a403f7ae035fe7e0a", "commit_date": "Wed Jun 12 16:51:42 2019 +0200", "commit_message": "Added control channel to ZMQChannelsHandler", "files_name": ["notebook/services/kernels/handlers.py"]}, {"commit_id": "dd0f5d2608b3e0501e1e2f94d5b1f42a467ae8fc", "commit_date": "Thu Jun 13 15:36:45 2019 -0700", "commit_message": "bfix: shutdown_server returns True when pid exists", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "37d795e5917e3a7ab8e97e2619826d9c0ad99302", "commit_date": "Wed Jun 5 17:05:02 2019 +0100", "commit_message": "Solved Issue 4015", "files_name": ["notebook/static/base/js/dialog.js", "notebook/templates/tree.html"]}, {"commit_id": "42ba2b0a409df95af6cd7ee2721326cc425abc43", "commit_date": "Tue Jun 18 18:30:32 2019 +0100", "commit_message": "Removed extra lines", "files_name": ["notebook/templates/tree.html"]}, {"commit_id": "ed23e65def4fd12a5599c8ec9cda1968c662a3ad", "commit_date": "Thu Jun 6 17:30:34 2019 +0100", "commit_message": "fix issue #3999, #4001, #4003, #3988, #3987", "files_name": ["notebook/static/acc_overwrite.less", "notebook/static/auth/css/override.css", "notebook/static/style/style.less"]}, {"commit_id": "f660f037e426314eddd33f58c64fa5deb970fec7", "commit_date": "Tue Jun 18 22:29:05 2019 +0100", "commit_message": "Fixed bug in bower setup", "files_name": ["bower.json"]}, {"commit_id": "9b1fa3d66b85dc6d3757ec4f9e8cc691b42c0710", "commit_date": "Fri Jun 7 14:18:21 2019 +0100", "commit_message": "#3938: solved this issue, but more checking needs to be done to see whether this is sufficient", "files_name": ["notebook/static/notebook/js/maintoolbar.js"]}, {"commit_id": "24d2c6026f5f175365f20dd9b70adbcdcc8de199", "commit_date": "Fri Jun 7 14:53:22 2019 +0100", "commit_message": "#3941: narrator now reads labels of textareas in popups", "files_name": ["notebook/static/tree/js/notebooklist.js"]}, {"commit_id": "f8727352ecebaaa6adc24d8afc4222c57ddf4387", "commit_date": "Fri Jun 7 14:57:16 2019 +0100", "commit_message": "fix #issue3961", "files_name": ["notebook/static/tree/js/notebooklist.js"]}, {"commit_id": "6953e4d704bfbbc221b2107fc2ab35fad36cc80a", "commit_date": "Tue Jun 4 14:12:48 2019 +0100", "commit_message": "fixed issue 3970 giving upload button an aria-label", "files_name": ["notebook/templates/tree.html"]}, {"commit_id": "3b239afcdab5c4e4e56380e3f6b5bec3312a3118", "commit_date": "Tue Jun 11 14:48:12 2019 +0100", "commit_message": "Fixes issue #3998, #3971 and  #3968", "files_name": ["notebook/templates/notebook.html", "notebook/templates/tree.html", "package.json"]}, {"commit_id": "80158d81c9f232185816b65d54cf24350de9cb56", "commit_date": "Wed Jun 19 11:42:18 2019 +0100", "commit_message": "Removed unnecessary edit", "files_name": ["package.json"]}, {"commit_id": "a76a3e6cce5aca6d13eefe9b4e329ac4ffea9284", "commit_date": "Tue Jun 4 14:36:23 2019 +0100", "commit_message": "added new span to new button to cause narrator to mention it is a dropdown", "files_name": ["notebook/templates/tree.html"]}, {"commit_id": "b5b494d2ad5db7dc8900d60882d077b5521cb883", "commit_date": "Thu Jun 6 13:50:34 2019 +0100", "commit_message": "#3996 Added role attribute with value button to the element", "files_name": ["notebook/static/notebook/js/notificationarea.js"]}, {"commit_id": "d8df52b267426ef5637527eba80c232151965fd1", "commit_date": "Mon Jun 10 11:00:51 2019 +0100", "commit_message": "Solved Issue #3997", "files_name": ["bower.json", "notebook/templates/notebook.html"]}, {"commit_id": "7fc284eda0dc5cffc4d93cd32a236de60ef8b960", "commit_date": "Thu Jun 6 15:16:33 2019 +0100", "commit_message": "Solved Issues #3963 and #3960", "files_name": ["notebook/static/tree/js/newnotebook.js", "notebook/templates/notebook.html", "notebook/templates/tree.html"]}, {"commit_id": "8cfb5a3435ba6c40d577ac2bb318e6c91e0f7545", "commit_date": "Tue Jun 11 15:11:38 2019 +0100", "commit_message": "#3984 Keyboard focus is clearly visible on the Controls(File,Edit,View,Insert,Cell...etc)present on the menubar.", "files_name": []}], "parents": [{"commit_id_before": "9e5c6ef360eb41d728c6b67de14607805cc8d283", "url_before": "https://api.github.com/repos/jupyter/notebook/commits/9e5c6ef360eb41d728c6b67de14607805cc8d283", "html_url_before": "https://github.com/jupyter/notebook/commit/9e5c6ef360eb41d728c6b67de14607805cc8d283"}], "details": [{"raw_url": "https://github.com/jupyter/notebook/raw/70fe9f0ddb3023162ece21fbb77d5564306b913b/notebook%2Fauth%2Flogin.py", "code": "\"\"\"Tornado handlers for logging into the notebook.\"\"\"\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport re\nimport os\n\ntry:\n    from urllib.parse import urlparse # Py 3\nexcept ImportError:\n    from urlparse import urlparse # Py 2\nimport uuid\n\nfrom tornado.escape import url_escape\n\nfrom .security import passwd_check, set_password\n\nfrom ..base.handlers import IPythonHandler\n\n\nclass LoginHandler(IPythonHandler):\n    \"\"\"The basic tornado login handler\n\n    authenticates with a hashed password from the configuration.\n    \"\"\"\n    def _render(self, message=None):\n        self.write(self.render_template('login.html',\n                next=url_escape(self.get_argument('next', default=self.base_url)),\n                message=message,\n        ))\n\n    def _redirect_safe(self, url, default=None):\n        \"\"\"Redirect if url is on our PATH\n\n        Full-domain redirects are allowed if they pass our CORS origin checks.\n\n        Otherwise use default (self.base_url if unspecified).\n        \"\"\"\n        if default is None:\n            default = self.base_url\n        parsed = urlparse(url)\n        if parsed.netloc or not (parsed.path + '/').startswith(self.base_url):\n            # require that next_url be absolute path within our path\n            allow = False\n            # OR pass our cross-origin check\n            if parsed.netloc:\n                # if full URL, run our cross-origin check:\n                origin = '%s://%s' % (parsed.scheme, parsed.netloc)\n                origin = origin.lower()\n                if self.allow_origin:\n                    allow = self.allow_origin == origin\n                elif self.allow_origin_pat:\n                    allow = bool(self.allow_origin_pat.match(origin))\n            if not allow:\n                # not allowed, use default\n                self.log.warning(\"Not allowing login redirect to %r\" % url)\n                url = default\n        self.redirect(url)\n\n    def get(self):\n        if self.current_user:\n            next_url = self.get_argument('next', default=self.base_url)\n            self._redirect_safe(next_url)\n        else:\n            self._render()\n\n    @property\n    def hashed_password(self):\n        return self.password_from_settings(self.settings)\n\n    def passwd_check(self, a, b):\n        return passwd_check(a, b)\n    \n    def post(self):\n        typed_password = self.get_argument('password', default=u'')\n        new_password = self.get_argument('new_password', default=u'')\n\n\n        \n        if self.get_login_available(self.settings):\n            if self.passwd_check(self.hashed_password, typed_password) and not new_password:\n                self.set_login_cookie(self, uuid.uuid4().hex)\n            elif self.token and self.token == typed_password:\n                self.set_login_cookie(self, uuid.uuid4().hex)\n                if new_password and self.settings.get('allow_password_change'):\n                    config_dir = self.settings.get('config_dir')\n                    config_file = os.path.join(config_dir, 'jupyter_notebook_config.json')\n                    set_password(new_password, config_file=config_file)\n                    self.log.info(\"Wrote hashed password to %s\" % config_file)\n            else:\n                self.set_status(401)\n                self._render(message={'error': 'Invalid credentials'})\n                return\n\n\n        next_url = self.get_argument('next', default=self.base_url)\n        self._redirect_safe(next_url)\n\n    @classmethod\n    def set_login_cookie(cls, handler, user_id=None):\n        \"\"\"Call this on handlers to set the login cookie for success\"\"\"\n        cookie_options = handler.settings.get('cookie_options', {})\n        cookie_options.setdefault('httponly', True)\n        # tornado <4.2 has a bug that considers secure==True as soon as\n        # 'secure' kwarg is passed to set_secure_cookie\n        if handler.settings.get('secure_cookie', handler.request.protocol == 'https'):\n            cookie_options.setdefault('secure', True)\n        cookie_options.setdefault('path', handler.base_url)\n        handler.set_secure_cookie(handler.cookie_name, user_id, **cookie_options)\n        return user_id\n\n    auth_header_pat = re.compile('token\\s+(.+)', re.IGNORECASE)\n\n    @classmethod\n    def get_token(cls, handler):\n        \"\"\"Get the user token from a request\n\n        Default:\n\n        - in URL parameters: ?token=<token>\n        - in header: Authorization: token <token>\n        \"\"\"\n\n        user_token = handler.get_argument('token', '')\n        if not user_token:\n            # get it from Authorization header\n            m = cls.auth_header_pat.match(handler.request.headers.get('Authorization', ''))\n            if m:\n                user_token = m.group(1)\n        return user_token\n\n    @classmethod\n    def should_check_origin(cls, handler):\n        \"\"\"Should the Handler check for CORS origin validation?\n\n        Origin check should be skipped for token-authenticated requests.\n\n        Returns:\n        - True, if Handler must check for valid CORS origin.\n        - False, if Handler should skip origin check since requests are token-authenticated.\n        \"\"\"\n        return not cls.is_token_authenticated(handler)\n\n    @classmethod\n    def is_token_authenticated(cls, handler):\n        \"\"\"Returns True if handler has been token authenticated. Otherwise, False.\n\n        Login with a token is used to signal certain things, such as:\n\n        - permit access to REST API\n        - xsrf protection\n        - skip origin-checks for scripts\n        \"\"\"\n        if getattr(handler, '_user_id', None) is None:\n            # ensure get_user has been called, so we know if we're token-authenticated\n            handler.get_current_user()\n        return getattr(handler, '_token_authenticated', False)\n\n    @classmethod\n    def get_user(cls, handler):\n        \"\"\"Called by handlers.get_current_user for identifying the current user.\n\n        See tornado.web.RequestHandler.get_current_user for details.\n        \"\"\"\n        # Can't call this get_current_user because it will collide when\n        # called on LoginHandler itself.\n        if getattr(handler, '_user_id', None):\n            return handler._user_id\n        user_id = cls.get_user_token(handler)\n        if user_id is None:\n            get_secure_cookie_kwargs  = handler.settings.get('get_secure_cookie_kwargs', {})\n            user_id = handler.get_secure_cookie(handler.cookie_name, **get_secure_cookie_kwargs )\n        else:\n            cls.set_login_cookie(handler, user_id)\n            # Record that the current request has been authenticated with a token.\n            # Used in is_token_authenticated above.\n            handler._token_authenticated = True\n        if user_id is None:\n            # If an invalid cookie was sent, clear it to prevent unnecessary\n            # extra warnings. But don't do this on a request with *no* cookie,\n            # because that can erroneously log you out (see gh-3365)\n            if handler.get_cookie(handler.cookie_name) is not None:\n                handler.log.warning(\"Clearing invalid/expired login cookie %s\", handler.cookie_name)\n                handler.clear_login_cookie()\n            if not handler.login_available:\n                # Completely insecure! No authentication at all.\n                # No need to warn here, though; validate_security will have already done that.\n                user_id = 'anonymous'\n\n        # cache value for future retrievals on the same request\n        handler._user_id = user_id\n        return user_id\n\n    @classmethod\n    def get_user_token(cls, handler):\n        \"\"\"Identify the user based on a token in the URL or Authorization header\n        \n        Returns:\n        - uuid if authenticated\n        - None if not\n        \"\"\"\n        token = handler.token\n        if not token:\n            return\n        # check login token from URL argument or Authorization header\n        user_token = cls.get_token(handler)\n        authenticated = False\n        if user_token == token:\n            # token-authenticated, set the login cookie\n            handler.log.debug(\"Accepting token-authenticated connection from %s\", handler.request.remote_ip)\n            authenticated = True\n\n        if authenticated:\n            return uuid.uuid4().hex\n        else:\n            return None\n\n\n    @classmethod\n    def validate_security(cls, app, ssl_options=None):\n        \"\"\"Check the notebook application's security.\n\n        Show messages, or abort if necessary, based on the security configuration.\n        \"\"\"\n        if not app.ip:\n            warning = \"WARNING: The notebook server is listening on all IP addresses\"\n            if ssl_options is None:\n                app.log.warning(warning + \" and not using encryption. This \"\n                    \"is not recommended.\")\n            if not app.password and not app.token:\n                app.log.warning(warning + \" and not using authentication. \"\n                    \"This is highly insecure and not recommended.\")\n        else:\n            if not app.password and not app.token:\n                app.log.warning(\n                    \"All authentication is disabled.\"\n                    \"  Anyone who can connect to this server will be able to run code.\")\n\n    @classmethod\n    def password_from_settings(cls, settings):\n        \"\"\"Return the hashed password from the tornado settings.\n\n        If there is no configured password, an empty string will be returned.\n        \"\"\"\n        return settings.get('password', u'')\n\n    @classmethod\n    def get_login_available(cls, settings):\n        \"\"\"Whether this LoginHandler is needed - and therefore whether the login page should be displayed.\"\"\"\n        return bool(cls.password_from_settings(settings) or settings.get('token'))\n", "code_before": "\"\"\"Tornado handlers for logging into the notebook.\"\"\"\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport re\nimport os\n\ntry:\n    from urllib.parse import urlparse # Py 3\nexcept ImportError:\n    from urlparse import urlparse # Py 2\nimport uuid\n\nfrom tornado.escape import url_escape\n\nfrom .security import passwd_check, set_password\n\nfrom ..base.handlers import IPythonHandler\n\n\nclass LoginHandler(IPythonHandler):\n    \"\"\"The basic tornado login handler\n\n    authenticates with a hashed password from the configuration.\n    \"\"\"\n    def _render(self, message=None):\n        self.write(self.render_template('login.html',\n                next=url_escape(self.get_argument('next', default=self.base_url)),\n                message=message,\n        ))\n\n    def _redirect_safe(self, url, default=None):\n        \"\"\"Redirect if url is on our PATH\n\n        Full-domain redirects are allowed if they pass our CORS origin checks.\n\n        Otherwise use default (self.base_url if unspecified).\n        \"\"\"\n        if default is None:\n            default = self.base_url\n        if not url.startswith(self.base_url):\n            # require that next_url be absolute path within our path\n            allow = False\n            # OR pass our cross-origin check\n            if '://' in url:\n                # if full URL, run our cross-origin check:\n                parsed = urlparse(url.lower())\n                origin = '%s://%s' % (parsed.scheme, parsed.netloc)\n                if self.allow_origin:\n                    allow = self.allow_origin == origin\n                elif self.allow_origin_pat:\n                    allow = bool(self.allow_origin_pat.match(origin))\n            if not allow:\n                # not allowed, use default\n                self.log.warning(\"Not allowing login redirect to %r\" % url)\n                url = default\n        self.redirect(url)\n\n    def get(self):\n        if self.current_user:\n            next_url = self.get_argument('next', default=self.base_url)\n            self._redirect_safe(next_url)\n        else:\n            self._render()\n\n    @property\n    def hashed_password(self):\n        return self.password_from_settings(self.settings)\n\n    def passwd_check(self, a, b):\n        return passwd_check(a, b)\n    \n    def post(self):\n        typed_password = self.get_argument('password', default=u'')\n        new_password = self.get_argument('new_password', default=u'')\n\n\n        \n        if self.get_login_available(self.settings):\n            if self.passwd_check(self.hashed_password, typed_password) and not new_password:\n                self.set_login_cookie(self, uuid.uuid4().hex)\n            elif self.token and self.token == typed_password:\n                self.set_login_cookie(self, uuid.uuid4().hex)\n                if new_password and self.settings.get('allow_password_change'):\n                    config_dir = self.settings.get('config_dir')\n                    config_file = os.path.join(config_dir, 'jupyter_notebook_config.json')\n                    set_password(new_password, config_file=config_file)\n                    self.log.info(\"Wrote hashed password to %s\" % config_file)\n            else:\n                self.set_status(401)\n                self._render(message={'error': 'Invalid credentials'})\n                return\n\n\n        next_url = self.get_argument('next', default=self.base_url)\n        self._redirect_safe(next_url)\n\n    @classmethod\n    def set_login_cookie(cls, handler, user_id=None):\n        \"\"\"Call this on handlers to set the login cookie for success\"\"\"\n        cookie_options = handler.settings.get('cookie_options', {})\n        cookie_options.setdefault('httponly', True)\n        # tornado <4.2 has a bug that considers secure==True as soon as\n        # 'secure' kwarg is passed to set_secure_cookie\n        if handler.settings.get('secure_cookie', handler.request.protocol == 'https'):\n            cookie_options.setdefault('secure', True)\n        cookie_options.setdefault('path', handler.base_url)\n        handler.set_secure_cookie(handler.cookie_name, user_id, **cookie_options)\n        return user_id\n\n    auth_header_pat = re.compile('token\\s+(.+)', re.IGNORECASE)\n\n    @classmethod\n    def get_token(cls, handler):\n        \"\"\"Get the user token from a request\n\n        Default:\n\n        - in URL parameters: ?token=<token>\n        - in header: Authorization: token <token>\n        \"\"\"\n\n        user_token = handler.get_argument('token', '')\n        if not user_token:\n            # get it from Authorization header\n            m = cls.auth_header_pat.match(handler.request.headers.get('Authorization', ''))\n            if m:\n                user_token = m.group(1)\n        return user_token\n\n    @classmethod\n    def should_check_origin(cls, handler):\n        \"\"\"Should the Handler check for CORS origin validation?\n\n        Origin check should be skipped for token-authenticated requests.\n\n        Returns:\n        - True, if Handler must check for valid CORS origin.\n        - False, if Handler should skip origin check since requests are token-authenticated.\n        \"\"\"\n        return not cls.is_token_authenticated(handler)\n\n    @classmethod\n    def is_token_authenticated(cls, handler):\n        \"\"\"Returns True if handler has been token authenticated. Otherwise, False.\n\n        Login with a token is used to signal certain things, such as:\n\n        - permit access to REST API\n        - xsrf protection\n        - skip origin-checks for scripts\n        \"\"\"\n        if getattr(handler, '_user_id', None) is None:\n            # ensure get_user has been called, so we know if we're token-authenticated\n            handler.get_current_user()\n        return getattr(handler, '_token_authenticated', False)\n\n    @classmethod\n    def get_user(cls, handler):\n        \"\"\"Called by handlers.get_current_user for identifying the current user.\n\n        See tornado.web.RequestHandler.get_current_user for details.\n        \"\"\"\n        # Can't call this get_current_user because it will collide when\n        # called on LoginHandler itself.\n        if getattr(handler, '_user_id', None):\n            return handler._user_id\n        user_id = cls.get_user_token(handler)\n        if user_id is None:\n            get_secure_cookie_kwargs  = handler.settings.get('get_secure_cookie_kwargs', {})\n            user_id = handler.get_secure_cookie(handler.cookie_name, **get_secure_cookie_kwargs )\n        else:\n            cls.set_login_cookie(handler, user_id)\n            # Record that the current request has been authenticated with a token.\n            # Used in is_token_authenticated above.\n            handler._token_authenticated = True\n        if user_id is None:\n            # If an invalid cookie was sent, clear it to prevent unnecessary\n            # extra warnings. But don't do this on a request with *no* cookie,\n            # because that can erroneously log you out (see gh-3365)\n            if handler.get_cookie(handler.cookie_name) is not None:\n                handler.log.warning(\"Clearing invalid/expired login cookie %s\", handler.cookie_name)\n                handler.clear_login_cookie()\n            if not handler.login_available:\n                # Completely insecure! No authentication at all.\n                # No need to warn here, though; validate_security will have already done that.\n                user_id = 'anonymous'\n\n        # cache value for future retrievals on the same request\n        handler._user_id = user_id\n        return user_id\n\n    @classmethod\n    def get_user_token(cls, handler):\n        \"\"\"Identify the user based on a token in the URL or Authorization header\n        \n        Returns:\n        - uuid if authenticated\n        - None if not\n        \"\"\"\n        token = handler.token\n        if not token:\n            return\n        # check login token from URL argument or Authorization header\n        user_token = cls.get_token(handler)\n        authenticated = False\n        if user_token == token:\n            # token-authenticated, set the login cookie\n            handler.log.debug(\"Accepting token-authenticated connection from %s\", handler.request.remote_ip)\n            authenticated = True\n\n        if authenticated:\n            return uuid.uuid4().hex\n        else:\n            return None\n\n\n    @classmethod\n    def validate_security(cls, app, ssl_options=None):\n        \"\"\"Check the notebook application's security.\n\n        Show messages, or abort if necessary, based on the security configuration.\n        \"\"\"\n        if not app.ip:\n            warning = \"WARNING: The notebook server is listening on all IP addresses\"\n            if ssl_options is None:\n                app.log.warning(warning + \" and not using encryption. This \"\n                    \"is not recommended.\")\n            if not app.password and not app.token:\n                app.log.warning(warning + \" and not using authentication. \"\n                    \"This is highly insecure and not recommended.\")\n        else:\n            if not app.password and not app.token:\n                app.log.warning(\n                    \"All authentication is disabled.\"\n                    \"  Anyone who can connect to this server will be able to run code.\")\n\n    @classmethod\n    def password_from_settings(cls, settings):\n        \"\"\"Return the hashed password from the tornado settings.\n\n        If there is no configured password, an empty string will be returned.\n        \"\"\"\n        return settings.get('password', u'')\n\n    @classmethod\n    def get_login_available(cls, settings):\n        \"\"\"Whether this LoginHandler is needed - and therefore whether the login page should be displayed.\"\"\"\n        return bool(cls.password_from_settings(settings) or settings.get('token'))\n", "patch": "@@ -39,14 +39,15 @@ def _redirect_safe(self, url, default=None):\n         \"\"\"\n         if default is None:\n             default = self.base_url\n-        if not url.startswith(self.base_url):\n+        parsed = urlparse(url)\n+        if parsed.netloc or not (parsed.path + '/').startswith(self.base_url):\n             # require that next_url be absolute path within our path\n             allow = False\n             # OR pass our cross-origin check\n-            if '://' in url:\n+            if parsed.netloc:\n                 # if full URL, run our cross-origin check:\n-                parsed = urlparse(url.lower())\n                 origin = '%s://%s' % (parsed.scheme, parsed.netloc)\n+                origin = origin.lower()\n                 if self.allow_origin:\n                     allow = self.allow_origin == origin\n                 elif self.allow_origin_pat:", "file_path": "files/2019_3\\18", "file_language": "py", "file_name": "notebook/auth/login.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/jupyter/notebook/raw/70fe9f0ddb3023162ece21fbb77d5564306b913b/notebook%2Fauth%2Ftests%2Ftest_login.py", "code": "\"\"\"Tests for login redirects\"\"\"\n\nimport requests\nfrom tornado.httputil import url_concat\n\nfrom notebook.tests.launchnotebook import NotebookTestBase\n\n\nclass LoginTest(NotebookTestBase):\n    def login(self, next):\n        first = requests.get(self.base_url() + \"login\")\n        first.raise_for_status()\n        resp = requests.post(\n            url_concat(\n                self.base_url() + \"login\",\n                {'next': next},\n            ),\n            allow_redirects=False,\n            data={\n                \"password\": self.token,\n                \"_xsrf\": first.cookies.get(\"_xsrf\", \"\"),\n            },\n            cookies=first.cookies,\n        )\n        resp.raise_for_status()\n        return resp.headers['Location']\n\n    def test_next_bad(self):\n        for bad_next in (\n            \"//some-host\",\n            \"//host\" + self.url_prefix + \"tree\",\n            \"https://google.com\",\n            \"/absolute/not/base_url\",\n        ):\n            url = self.login(next=bad_next)\n            self.assertEqual(url, self.url_prefix)\n        assert url\n\n    def test_next_ok(self):\n        for next_path in (\n            \"tree/\",\n            \"//\" + self.url_prefix + \"tree\",\n            \"notebooks/notebook.ipynb\",\n            \"tree//something\",\n        ):\n            expected = self.url_prefix + next_path\n            actual = self.login(next=expected)\n            self.assertEqual(actual, expected)\n", "code_before": "", "patch": "@@ -0,0 +1,48 @@\n+\"\"\"Tests for login redirects\"\"\"\n+\n+import requests\n+from tornado.httputil import url_concat\n+\n+from notebook.tests.launchnotebook import NotebookTestBase\n+\n+\n+class LoginTest(NotebookTestBase):\n+    def login(self, next):\n+        first = requests.get(self.base_url() + \"login\")\n+        first.raise_for_status()\n+        resp = requests.post(\n+            url_concat(\n+                self.base_url() + \"login\",\n+                {'next': next},\n+            ),\n+            allow_redirects=False,\n+            data={\n+                \"password\": self.token,\n+                \"_xsrf\": first.cookies.get(\"_xsrf\", \"\"),\n+            },\n+            cookies=first.cookies,\n+        )\n+        resp.raise_for_status()\n+        return resp.headers['Location']\n+\n+    def test_next_bad(self):\n+        for bad_next in (\n+            \"//some-host\",\n+            \"//host\" + self.url_prefix + \"tree\",\n+            \"https://google.com\",\n+            \"/absolute/not/base_url\",\n+        ):\n+            url = self.login(next=bad_next)\n+            self.assertEqual(url, self.url_prefix)\n+        assert url\n+\n+    def test_next_ok(self):\n+        for next_path in (\n+            \"tree/\",\n+            \"//\" + self.url_prefix + \"tree\",\n+            \"notebooks/notebook.ipynb\",\n+            \"tree//something\",\n+        ):\n+            expected = self.url_prefix + next_path\n+            actual = self.login(next=expected)\n+            self.assertEqual(actual, expected)", "file_path": "files/2019_3\\19", "file_language": "py", "file_name": "notebook/auth/tests/test_login.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
