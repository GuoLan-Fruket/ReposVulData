{"index": 6523, "cve_id": "CVE-2021-32805", "cwe_id": ["CWE-601"], "cve_language": "Python", "cve_description": "Flask-AppBuilder is an application development framework, built on top of Flask. In affected versions if using Flask-AppBuilder OAuth, an attacker can share a carefully crafted URL with a trusted domain for an application built with Flask-AppBuilder, this URL can redirect a user to a malicious site. This is an open redirect vulnerability. To resolve this issue upgrade to Flask-AppBuilder 3.2.2 or above. If upgrading is infeasible users may filter HTTP traffic containing `?next={next-site}` where the `next-site` domain is different from the application you are protecting as a workaround.", "cvss": "6.1", "publish_date": "September 8, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "6af28521589599b1dbafd6313256229ee9a4fa74", "commit_message": "fix: improve next URL on OAuth (#1668)\n\n* fix: improve next URL on OAuth\r\n\r\n* add tests and extra dependency for OAuth\r\n\r\n* lint\r\n\r\n* fix test\r\n\r\n* add test for unknown provider\r\n\r\n* lint\r\n\r\n* Update flask_appbuilder/security/views.py\r\n\r\nCo-authored-by: Ash Berlin-Taylor <ash_github@firemirror.com>\r\n\r\nCo-authored-by: Ash Berlin-Taylor <ash_github@firemirror.com>", "commit_date": "2021-07-13T09:35:34Z", "project": "dpgaspar/flask-appbuilder", "url": "https://api.github.com/repos/dpgaspar/Flask-AppBuilder/commits/6af28521589599b1dbafd6313256229ee9a4fa74", "html_url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/6af28521589599b1dbafd6313256229ee9a4fa74", "windows_before": [{"commit_id": "0bc5f1ef9b90a395b435127239b56557d676eb8b", "commit_date": "Fri Jul 9 08:14:01 2021 -0700", "commit_message": "chore: Bump click to 8.0.1 (#1665)", "files_name": ["requirements.txt", "setup.py"]}, {"commit_id": "1fb6d985910d306a821a8da072cd3c93e41311ac", "commit_date": "Wed Jul 7 11:03:19 2021 +0100", "commit_message": "feat(cli): Add import/export of roles with permissions (#1662)", "files_name": ["docker-compose.yml", "docs/cli.rst", "flask_appbuilder/cli.py", "flask_appbuilder/security/manager.py", "flask_appbuilder/security/mongoengine/manager.py", "flask_appbuilder/security/sqla/manager.py", "flask_appbuilder/security/sqla/models.py", "flask_appbuilder/tests/data/roles.json", "flask_appbuilder/tests/test_fab_cli.py", "flask_appbuilder/tests/test_mongoengine.py", "flask_appbuilder/tests/test_mvc.py", "tox.ini"]}, {"commit_id": "b9b3259a9d47a14430144c8362215c2143f06aa4", "commit_date": "Fri Jun 18 14:46:26 2021 +0100", "commit_message": "release: 3.3.1 (#1655)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "8c3989c632b7181f5078cd61bc7e119bfcf98277", "commit_date": "Mon Jun 14 07:09:54 2021 -0400", "commit_message": "fix: Handle integrity fails if groups map to same roles (#1605)", "files_name": ["flask_appbuilder/security/manager.py", "flask_appbuilder/tests/_test_auth_ldap.py"]}, {"commit_id": "46b70505a406b08be6efe1351fbea3ae8f62550c", "commit_date": "Fri Jun 11 19:55:33 2021 +0900", "commit_message": "refactor: OAuth - redirect direct to provider if just one provider exists (#1618)", "files_name": ["flask_appbuilder/security/views.py"]}, {"commit_id": "8fe78725735dc2399cbf63a0a2a7b728b332dfde", "commit_date": "Wed Jun 9 19:15:48 2021 +0200", "commit_message": "feat: Allow using custom Swagger template for SwaggerView. (#1639)", "files_name": ["docs/config.rst", "flask_appbuilder/api/manager.py"]}, {"commit_id": "1ff22830819884c3dcd2ecc860abddcc94578425", "commit_date": "Wed Jun 9 13:13:54 2021 -0400", "commit_message": "chore: Remove polyfill shims for browsers no longer supported (#1606)", "files_name": ["flask_appbuilder/static/appbuilder/js/html5shiv.js", "flask_appbuilder/static/appbuilder/js/respond.min.js", "flask_appbuilder/templates/appbuilder/init.html"]}, {"commit_id": "b69fc9d59d9d0f8c8dc860a902273265ef1e037f", "commit_date": "Wed Jun 9 15:59:02 2021 +0200", "commit_message": "docs: Missing `self` reference for my_custom (#1651)", "files_name": ["docs/advanced.rst", "flask_appbuilder/models/decorators.py"]}, {"commit_id": "dae4dd47d51e1e2eb5894bce55221c1d26864c3b", "commit_date": "Mon May 24 09:35:15 2021 +0100", "commit_message": "fix: add warning text to roles when AUTH_ROLES_SYNC_AT_LOGIN (#1642)", "files_name": ["flask_appbuilder/security/views.py", "flask_appbuilder/utils/base.py"]}, {"commit_id": "95947e84e04a999a474dfe8620fb0f36d71f0467", "commit_date": "Mon May 10 18:55:34 2021 +0100", "commit_message": "release: 3.3.0 (#1637)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "78ab7221691d3110cbe8e92be610e6cdd0aca4c2", "commit_date": "Mon May 10 10:51:14 2021 +0100", "commit_message": "docs: responsible disclosure (#1636)", "files_name": [".github/ISSUE_TEMPLATE.md", "CONTRIBUTING.rst"]}, {"commit_id": "780bd0e8fbf2d36ada52edb769477e0a4edae580", "commit_date": "Mon May 10 09:37:55 2021 +0100", "commit_message": "fix: auth balance (#1634)", "files_name": ["flask_appbuilder/security/manager.py"]}, {"commit_id": "b60dea9cedf98b56c926ba41020c73f287d5826e", "commit_date": "Fri May 7 14:19:29 2021 -0700", "commit_message": "Merge pull request #1631 from benjreinhart/menus", "files_name": ["1c3a49c968c4405dc834d8877109c52c0c851c25 - Fri May 7 14:10:57 2021 -0700 : Merge branch 'master' into menus", "3dd1eb28cb7646de2739491ca5e3e2c703ab7201 - Fri May 7 14:10:45 2021 -0700 : Merge pull request #1629 from benjreinhart/hooks", "daff8f5bb3c8ba67ae17358333addb8563785f53 - Fri May 7 13:56:43 2021 -0700 : Merge branch 'master' into hooks", "d0ff69f80997aa6260758cbf54d86b6e168aa77f - Fri May 7 13:44:45 2021 -0700 : Fix tests", "flask_appbuilder/tests/test_mvc.py"]}, {"commit_id": "2ebf6cd0fe13e820527eafcc415b9d28da8ad494", "commit_date": "Fri May 7 10:33:05 2021 -0700", "commit_message": "Update docs", "files_name": ["flask_appbuilder/base.py"]}, {"commit_id": "370e67fdd23bb88c264beb7f6710e6d51bb6d30e", "commit_date": "Fri May 7 10:29:08 2021 -0700", "commit_message": "Fix tests", "files_name": ["flask_appbuilder/tests/test_mvc.py"]}, {"commit_id": "9f6a5a890b6e6a3c34fee9258598674c847aa81b", "commit_date": "Fri May 7 15:01:49 2021 +0300", "commit_message": "docs: fix number of languages in i18n.rst (#1630)", "files_name": ["docs/i18n.rst"]}, {"commit_id": "cd690f1e806f96f775d4174100396dcead9f22de", "commit_date": "Fri May 7 12:53:33 2021 +0100", "commit_message": "Merge branch 'master' into menus", "files_name": ["175302c5cf1de567f392eba01ffe6032a15081b6 - Thu May 6 16:26:01 2021 -0700 : feat: Support for conditional menu item rendering", "flask_appbuilder/base.py", "flask_appbuilder/menu.py", "flask_appbuilder/tests/test_menu.py"]}, {"commit_id": "f47b0ad0393e361e485531539498cdf333116e40", "commit_date": "Thu May 6 13:01:58 2021 -0700", "commit_message": "Better API tests", "files_name": ["flask_appbuilder/tests/test_api.py", "flask_appbuilder/tests/test_mvc.py"]}, {"commit_id": "a2ca12b9d9491604d6eca92594902410d509f955", "commit_date": "Thu May 6 12:43:30 2021 -0700", "commit_message": "Test modelviews", "files_name": ["flask_appbuilder/tests/test_mvc.py"]}, {"commit_id": "87c7e681457be397d17fec306e6bd6dd3cd5c747", "commit_date": "Thu May 6 11:28:05 2021 -0700", "commit_message": "Add type hints and rework docs", "files_name": ["flask_appbuilder/hooks.py"]}, {"commit_id": "4df2c955062f33a5dfa6adc8cf3725e364c55c61", "commit_date": "Thu May 6 13:47:25 2021 +0100", "commit_message": "Merge branch 'master' into hooks", "files_name": ["9744ea17fef7cffa7af4fd3ddd4edf9d366d0b22 - Thu May 6 14:13:30 2021 +0200 : docs: Typos and small changes in docs/templates.rst (#1625)", "docs/templates.rst"]}, {"commit_id": "eeb338caa9473a6b5b13d1fb952de228a63ffa6b", "commit_date": "Wed May 5 17:30:03 2021 -0700", "commit_message": "Add some docs", "files_name": ["docs/api.rst", "flask_appbuilder/hooks.py"]}, {"commit_id": "11e5da2b91ad66ec7a652d3838a5d2342a2c6324", "commit_date": "Wed May 5 12:05:04 2021 -0700", "commit_message": "Add support for before_request hooks", "files_name": ["flask_appbuilder/api/__init__.py", "flask_appbuilder/baseviews.py", "flask_appbuilder/hooks.py", "flask_appbuilder/tests/test_api.py"]}, {"commit_id": "0525e549ef7170f5623af4244f61991ad19bc215", "commit_date": "Mon Apr 26 14:28:33 2021 +0100", "commit_message": "release: 3.2.3 (#1623)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "5a7661890607d03e88d112ae12a559d7fff02ab8", "commit_date": "Mon Apr 26 14:10:25 2021 +0100", "commit_message": "fix: improve performance for get role permissions (#1624)", "files_name": ["flask_appbuilder/security/sqla/manager.py"]}, {"commit_id": "159de3594fc102ee9456b1f1bc4158cecf813f45", "commit_date": "Fri Apr 23 18:59:52 2021 +0100", "commit_message": "feat(security): get user permissions API (#1620)", "files_name": ["flask_appbuilder/security/manager.py", "flask_appbuilder/security/sqla/manager.py", "flask_appbuilder/tests/base.py", "flask_appbuilder/tests/config_security.py", "flask_appbuilder/tests/test_security_permissions.py"]}, {"commit_id": "efc6944488306519a48d624f0559be17c8f18aae", "commit_date": "Wed Apr 21 05:49:57 2021 -0400", "commit_message": "fix: Ignore LDAP search referrals (#1602)", "files_name": ["flask_appbuilder/security/manager.py", "flask_appbuilder/tests/_test_auth_ldap.py"]}, {"commit_id": "27b15e59316e85e0fe62b8aa9978391ed4c729c9", "commit_date": "Fri Apr 16 22:58:23 2021 +0900", "commit_message": "fix: relax AzureAD mandatory fields (#1608)", "files_name": ["flask_appbuilder/security/manager.py"]}, {"commit_id": "0f265345b1af18b5968f543deb450d2c2bd09c5a", "commit_date": "Tue Apr 6 11:23:19 2021 +0100", "commit_message": "release: 3.2.2 (#1599)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "399f9222c1296cf191cf9a8d68b48ba39b3430d1", "commit_date": "Mon Mar 29 16:38:55 2021 +0200", "commit_message": "docs: fix, errors in BaseModelView docstring (#1591)", "files_name": ["flask_appbuilder/baseviews.py"]}, {"commit_id": "d04ec3c3399883aa84ed7493c0e2e49160a9f6ec", "commit_date": "Sat Mar 27 08:12:56 2021 -0700", "commit_message": "fix: load user info for okta (#1589)", "files_name": ["flask_appbuilder/security/manager.py"]}, {"commit_id": "302e4abe32d9d2403f2ce52e4abb31beb59bb252", "commit_date": "Tue Mar 16 10:12:44 2021 +0000", "commit_message": "release: 3.2.1 (#1588)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "006f64fb47e23415a771302543248990eb95115f", "commit_date": "Mon Mar 15 20:35:31 2021 +0000", "commit_message": "fix: sqlalchemy 1.4.0 breaking changes (#1586)", "files_name": ["setup.py"]}, {"commit_id": "55b0976e1450295d5a26a06d28c5b992fb0b561e", "commit_date": "Wed Mar 3 08:49:12 2021 +0000", "commit_message": "docs: improve contributing run single test (#1579)", "files_name": ["CONTRIBUTING.rst", "flask_appbuilder/tests/test_api.py", "flask_appbuilder/tests/test_mvc.py", "requirements-dev.txt"]}, {"commit_id": "3a515d0c8134909cda93270106caf9ceae1904df", "commit_date": "Fri Feb 19 16:21:16 2021 +0000", "commit_message": "release: 3.2.0 (#1571)", "files_name": [".github/prlint.json", ".github/workflows/ptlint.yml", "CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "9065a9ffe32bb9c63c58dd454131ef2853f70321", "commit_date": "Wed Feb 17 21:03:15 2021 +0700", "commit_message": "fix: issue 1469 error in filters (#1541)", "files_name": ["examples/extendsecurity/__init__.py", "flask_appbuilder/models/filters.py", "flask_appbuilder/models/sqla/filters.py", "flask_appbuilder/tests/test_mvc.py"]}, {"commit_id": "633cdc4ed468e4c22a1a900d03c99013446e9148", "commit_date": "Tue Feb 16 14:45:48 2021 +0100", "commit_message": "fix: showing excluded routes in server log (#1565)", "files_name": ["flask_appbuilder/baseviews.py"]}, {"commit_id": "dbe1eded6369c199b777836eb08d829ba37634d7", "commit_date": "Wed Jan 27 20:11:54 2021 +1100", "commit_message": "refactor: AUTH_LDAP/AUTH_OAUTH + implement role mapping (#1374)", "files_name": ["CONTRIBUTING.rst", "docs/config.rst", "docs/security.rst", "examples/oauth/config.py", "flask_appbuilder/const.py", "flask_appbuilder/security/manager.py", "flask_appbuilder/security/mongoengine/manager.py", "flask_appbuilder/security/sqla/manager.py", "flask_appbuilder/tests/_test_auth_ldap.py", "flask_appbuilder/tests/_test_auth_oauth.py", "flask_appbuilder/tests/_test_ldapsearch.py", "flask_appbuilder/tests/_test_oauth_registration_role.py", "requirements-extra.txt", "tox.ini"]}, {"commit_id": "d9c80f71ecbfaca65eb235fdf47bbc54f110e8dd", "commit_date": "Tue Jan 12 09:19:20 2021 +0000", "commit_message": "fix(api): OpenAPI spec of nested components without auto generated names (#1547)", "files_name": ["flask_appbuilder/api/__init__.py", "flask_appbuilder/api/convert.py", "flask_appbuilder/api/manager.py", "flask_appbuilder/tests/config_api.py"]}, {"commit_id": "fab73d34f40b35ca4c5d14936498af92d71ed962", "commit_date": "Mon Jan 4 17:31:23 2021 +0000", "commit_message": "fix(mvc): action confirmation on single show view (#1539)", "files_name": ["flask_appbuilder/templates/appbuilder/general/lib.html"]}, {"commit_id": "e21059fd0b8cf10c2eb98549e85e26103ef1de62", "commit_date": "Fri Nov 27 11:07:29 2020 +0000", "commit_message": "docs: improve docs around LDAP auth (#1526)", "files_name": ["docs/security.rst"]}, {"commit_id": "c4e6bc862db4416a0bd44c4d8e034c88fa4c76af", "commit_date": "Fri Nov 27 09:44:57 2020 +0000", "commit_message": "ci: tests for python 3.8 and 3.9 (#1525)", "files_name": [".github/workflows/ci.yml", ".github/workflows/odbcinst.ini"]}], "windows_after": [{"commit_id": "f0608fb8e420a236199b5bd439cf122769236816", "commit_date": "Tue Jul 27 11:49:02 2021 +0100", "commit_message": "release: 3.3.2 (#1673)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "4d7dad00f820c34dab7aad77c5c2e60a36866d1e", "commit_date": "Mon Sep 6 17:46:37 2021 +0900", "commit_message": "fix: check if there is an email field in userinfo (#1663)", "files_name": ["flask_appbuilder/security/views.py"]}, {"commit_id": "c46cac37a7f55b1963984ddc18255888bbc39ab5", "commit_date": "Tue Sep 7 23:50:45 2021 +0100", "commit_message": "feat: password complexity option on DB Auth (#1687)", "files_name": [".flake8", ".github/workflows/ci.yml", "docs/config.rst", "docs/security.rst", "examples/quickhowto/config.py", "flask_appbuilder/exceptions.py", "flask_appbuilder/models/base.py", "flask_appbuilder/security/forms.py", "flask_appbuilder/security/views.py", "flask_appbuilder/tests/A_fixture/__init__.py", "flask_appbuilder/tests/A_fixture/test_0_fixture.py", "flask_appbuilder/tests/base.py", "flask_appbuilder/tests/security/__init__.py", "flask_appbuilder/tests/security/test_auth_ldap.py", "flask_appbuilder/tests/security/test_auth_oauth.py", "flask_appbuilder/tests/security/test_mvc_security.py", "flask_appbuilder/tests/security/test_password_complexity.py", "flask_appbuilder/tests/test_mvc.py", "flask_appbuilder/validators.py", "requirements-dev.txt", "setup.cfg"]}, {"commit_id": "bfe4ecab3abc89aee614e755ecc5ee707d9a8577", "commit_date": "Wed Sep 8 02:08:15 2021 -0700", "commit_message": "chore: bump prison version (#1689)", "files_name": ["requirements.txt", "setup.py"]}, {"commit_id": "5e2170003271671af2ec9321c4912c79782063f3", "commit_date": "Wed Sep 8 10:16:36 2021 +0100", "commit_message": "chore: bump JQuery to 3.6.0 (#1688)", "files_name": ["flask_appbuilder/static/appbuilder/js/jquery-latest.js"]}, {"commit_id": "1bfedc2e2c5e30aede6ccbd2d161f6ffbae5d4ff", "commit_date": "Thu Sep 9 11:20:46 2021 +0100", "commit_message": "chore: Bump flask-openid to 1.3.0 (#1693)", "files_name": ["requirements.txt"]}, {"commit_id": "586433800fc1e9b68aa080217f1b8ca0268010b0", "commit_date": "Mon Sep 13 12:21:10 2021 +0100", "commit_message": "fix: related filters with bogus data (#1695)", "files_name": ["flask_appbuilder/exceptions.py", "flask_appbuilder/models/sqla/filters.py", "flask_appbuilder/static/appbuilder/js/ab_filters.js", "flask_appbuilder/tests/test_mvc.py", "flask_appbuilder/views.py"]}, {"commit_id": "3d351c913d7e1e686e3ea939278c9afd5ac2d6b9", "commit_date": "Tue Sep 14 14:09:36 2021 +0100", "commit_message": "release: 3.3.3 (#1699)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "4b00aa4188fa5cbb3787785011418482383b1cc6", "commit_date": "Fri Sep 17 15:58:00 2021 +0200", "commit_message": "docs: fix issue 1700 (#1701)", "files_name": ["docs/rest_api.rst"]}, {"commit_id": "fdf57841cbb5fe52d8fbc5b7c60c03b073ce2930", "commit_date": "Fri Sep 17 15:27:16 2021 +0100", "commit_message": "docs: fix requirements (#1702)", "files_name": ["rtd_requirements.txt"]}, {"commit_id": "211284bc5792d2a24a486f5c2b0f4fc86de89fbe", "commit_date": "Wed Sep 29 10:31:56 2021 +0100", "commit_message": "chore: bump dependencies (#1697)", "files_name": ["requirements-dev.txt", "requirements.txt", "setup.py"]}, {"commit_id": "eba517aab121afa3f3f2edb011ec6bc4efd61fbc", "commit_date": "Tue Oct 12 15:31:20 2021 +0100", "commit_message": "chore: improve schema validation (#1712)", "files_name": ["docs/config.rst", "flask_appbuilder/security/api.py", "flask_appbuilder/security/manager.py", "flask_appbuilder/security/schemas.py"]}, {"commit_id": "565d3c35188685f65435f78f50b941c31c38d3b3", "commit_date": "Tue Oct 12 16:09:35 2021 +0100", "commit_message": "docs: fix requirements funcparserlib (#1703)", "files_name": ["rtd_requirements.txt"]}, {"commit_id": "6c77e52a26113c071aa1d6abf63fe8e1a8442622", "commit_date": "Wed Oct 13 09:10:10 2021 +0100", "commit_message": "chore: improve tests more coverage (#1713)", "files_name": ["flask_appbuilder/security/api.py", "flask_appbuilder/security/schemas.py", "flask_appbuilder/tests/base.py", "flask_appbuilder/tests/test_api.py"]}, {"commit_id": "4f7ca85bd1800e6eb5b5879aa16b18872d6b8e96", "commit_date": "Wed Oct 13 18:13:51 2021 +0100", "commit_message": "release: 3.3.4 (#1715)", "files_name": ["CHANGELOG.rst", "RELEASE.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "a1a4f80afad791404ebe00cb58a9bf62fdd0203f", "commit_date": "Mon Oct 25 10:03:20 2021 +0100", "commit_message": "fix: OAuth login flow (#1707)", "files_name": ["docs/images/oauth_login.png", "docs/images/oauth_login_one_provider.png", "docs/security.rst", "flask_appbuilder/security/views.py", "flask_appbuilder/templates/appbuilder/general/security/login_oauth.html"]}, {"commit_id": "dd07c10c2d75a6cf7022847a90611c8f661c1f38", "commit_date": "Thu Oct 28 13:57:32 2021 +0100", "commit_message": "fix: add .env for docker-compose (#1728)", "files_name": [".env"]}, {"commit_id": "28f60b91ae8b06fb2f5e7a791f57ee503be3f720", "commit_date": "Mon Nov 8 16:16:41 2021 -0500", "commit_message": "fix: ModuleNotFoundError from wtforms 3.0.0 (#1733)", "files_name": ["flask_appbuilder/fields.py"]}, {"commit_id": "c36d89cf0574389cd0af8bfd1ef2c812cb4899f7", "commit_date": "Tue Nov 9 16:14:56 2021 +0000", "commit_message": "chore: pin down WTForms (#1735)", "files_name": ["requirements.txt", "setup.py"]}, {"commit_id": "0747f7d5112d473a5fc1f190987fecb6d2d43425", "commit_date": "Wed Nov 10 12:01:02 2021 +0000", "commit_message": "release: 3.4.0 (#1739)", "files_name": [".github/workflows/ci.yml", "CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "071e66bec903f0dc280ae67886862a79e57bac90", "commit_date": "Mon Nov 15 12:23:07 2021 +0100", "commit_message": "chore: [Deprecation] Use Markup instead of HTMLString (#1729)", "files_name": ["flask_appbuilder/fieldwidgets.py", "flask_appbuilder/upload.py", "requirements-extra.txt"]}, {"commit_id": "1efbbcca7088422a3e90ba518c2ea644dee7c322", "commit_date": "Thu Nov 18 10:38:09 2021 -0600", "commit_message": "fix: Added sr-only class to icon only links (#1727)", "files_name": ["flask_appbuilder/templates/appbuilder/general/lib.html"]}, {"commit_id": "f726f8aa3854563592f76d1cf9cbe77f2d6f38af", "commit_date": "Wed Dec 1 03:16:01 2021 +1100", "commit_message": "docs: add aws cognito setup code examples (#1746)", "files_name": ["docs/security.rst"]}, {"commit_id": "e09e629f1f3c2836cc0a1b25f004a9728e700825", "commit_date": "Thu Dec 2 12:43:30 2021 +0200", "commit_message": "chore: Redirect to prev url on login (#1747)", "files_name": ["flask_appbuilder/security/views.py"]}, {"commit_id": "0706abecfc5ae3caa13b5d93cd15fcfde56f22cf", "commit_date": "Thu Dec 2 11:10:06 2021 +0000", "commit_message": "fix: optionally return HTTP 403 instead of 401 when unauthorized (#1748)", "files_name": ["docs/config.rst", "flask_appbuilder/security/decorators.py", "flask_appbuilder/tests/config_api.py", "flask_appbuilder/tests/test_api.py"]}, {"commit_id": "751e57c39d61932163c30129779ed2178ba01860", "commit_date": "Fri Dec 3 11:45:28 2021 -0600", "commit_message": "docs: Fix indentation of function content (#1752)", "files_name": ["docs/security.rst"]}, {"commit_id": "319b6befe4ad18c13257174f01020b602159a522", "commit_date": "Fri Dec 3 18:01:00 2021 +0000", "commit_message": "fix: optional unauthorized status codes (#1753)", "files_name": ["flask_appbuilder/security/decorators.py", "flask_appbuilder/tests/base.py", "flask_appbuilder/tests/test_mvc.py"]}, {"commit_id": "afdbf69ffaad089b8e85092bffc074c97e1a5f5c", "commit_date": "Thu Dec 9 03:35:33 2021 -1000", "commit_message": "fix: 1154 Add LOGOUT_REDIRECT_URL setting (#1749)", "files_name": ["docs/config.rst", "flask_appbuilder/security/views.py", "flask_appbuilder/tests/test_menu.py"]}, {"commit_id": "626153720ec4eccbdb5918923f7de419009f7310", "commit_date": "Fri Dec 10 10:28:38 2021 +0100", "commit_message": "docs: Fix small documentation issues (#1755)", "files_name": ["docs/addons.rst", "docs/security.rst", "docs/user_registration.rst", "examples/oauth/app/views.py"]}, {"commit_id": "baddd7c73e68c347abe74973c4a122003393fd71", "commit_date": "Fri Dec 10 04:29:20 2021 -0500", "commit_message": "feat: Adding role_keys into Azure OAuth (#1744)", "files_name": ["docs/security.rst", "flask_appbuilder/security/manager.py"]}, {"commit_id": "d348ed8e4f0ad72f6a64b6da824ccbc759ff9c5e", "commit_date": "Mon Dec 13 09:12:13 2021 +0000", "commit_message": "release: 3.4.1 (#1759)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "afc8e2c9209a928fa6a791919ceae3ce3cdc48a7", "commit_date": "Fri Dec 17 10:17:59 2021 +0000", "commit_message": "chore: improve code quality and balance (#1761)", "files_name": ["flask_appbuilder/security/manager.py", "flask_appbuilder/security/mongoengine/manager.py", "flask_appbuilder/security/sqla/manager.py"]}, {"commit_id": "201eaba61224f9b92452f0517b7cb6f8d355ed4a", "commit_date": "Tue Jan 4 22:28:21 2022 +0530", "commit_message": "chore: Use assertEqual instead of assertEquals for Python 3.11 compatibility (#1763)", "files_name": ["flask_appbuilder/tests/security/test_auth_ldap.py", "flask_appbuilder/tests/security/test_auth_oauth.py", "flask_appbuilder/tests/test_api.py"]}, {"commit_id": "fc93179095208c26d545911a52641cfefc2ff126", "commit_date": "Wed Jan 5 15:57:50 2022 +0000", "commit_message": "release: 3.4.2 (#1767)", "files_name": ["CHANGELOG.rst", "flask_appbuilder/__init__.py"]}, {"commit_id": "a54df11c82d53c86239befac01484d9f679fb5d2", "commit_date": "Thu Jan 6 13:14:09 2022 +0000", "commit_message": "fix: openapi on and off config flag (#1770)", "files_name": ["examples/crud_rest_api/app/api.py", "flask_appbuilder/api/__init__.py", "flask_appbuilder/api/manager.py", "flask_appbuilder/tests/test_api.py"]}, {"commit_id": "f12d3a6706f00a9864716427bdb5679b45e7b8e5", "commit_date": "Thu Jan 6 14:50:51 2022 +0100", "commit_message": "fix: Handle authorize_access_token exception (#1766)", "files_name": ["flask_appbuilder/security/views.py"]}, {"commit_id": "c59b4136d6036d53ff1af33e14385b5a86121b7a", "commit_date": "Thu Jan 6 08:51:32 2022 -0500", "commit_message": "fix: data not defined in azure oauth (#1769)", "files_name": ["flask_appbuilder/security/manager.py"]}, {"commit_id": "4489c3842864086886682eb0776a80921e162b40", "commit_date": "Thu Jan 6 19:24:28 2022 +0530", "commit_message": "fix: Set role and confirm password while adding user mandatory (#1758)", "files_name": ["flask_appbuilder/security/views.py", "flask_appbuilder/tests/security/test_mvc_security.py"]}, {"commit_id": "985b1b7c1d77d38e667199573455a4a3b6f40ac9", "commit_date": "Thu Jan 6 14:36:58 2022 +0000", "commit_message": "fix: required roles on user form not showing error msg (#1772)", "files_name": ["flask_appbuilder/fieldwidgets.py", "flask_appbuilder/security/forms.py", "flask_appbuilder/security/views.py"]}, {"commit_id": "3000c40d5b7f4d0c2cd3529299ae62e35e481d2c", "commit_date": "Thu Jan 6 17:29:58 2022 +0000", "commit_message": "fix: make servers be actual servers on swagger, full endpoint paths (#1773)", "files_name": ["flask_appbuilder/api/__init__.py", "flask_appbuilder/api/manager.py", "flask_appbuilder/templates/appbuilder/swagger/swagger.html"]}, {"commit_id": "743fae6c7f9070ba2243960f4a58df1495a147bc", "commit_date": "Fri Jan 7 10:59:43 2022 +0000", "commit_message": "docs: adds missing config key FAB_OPENAPI_SERVERS (#1776)", "files_name": ["docs/config.rst"]}], "parents": [{"commit_id_before": "0bc5f1ef9b90a395b435127239b56557d676eb8b", "url_before": "https://api.github.com/repos/dpgaspar/Flask-AppBuilder/commits/0bc5f1ef9b90a395b435127239b56557d676eb8b", "html_url_before": "https://github.com/dpgaspar/Flask-AppBuilder/commit/0bc5f1ef9b90a395b435127239b56557d676eb8b"}], "details": [{"raw_url": "https://github.com/dpgaspar/Flask-AppBuilder/raw/6af28521589599b1dbafd6313256229ee9a4fa74/flask_appbuilder%2Fsecurity%2Fviews.py", "code": "import datetime\nimport logging\nimport re\nfrom typing import Optional\nfrom urllib.parse import urlparse\n\nfrom flask import (\n    abort,\n    current_app,\n    flash,\n    g,\n    redirect,\n    request,\n    Response,\n    session,\n    url_for,\n)\nfrom flask_babel import lazy_gettext\nfrom flask_login import login_user, logout_user\nimport jwt\nfrom werkzeug.security import generate_password_hash\nfrom wtforms import PasswordField, validators\nfrom wtforms.validators import EqualTo\n\nfrom .decorators import has_access\nfrom .forms import LoginForm_db, LoginForm_oid, ResetPasswordForm, UserInfoEdit\nfrom .._compat import as_unicode\nfrom ..actions import action\nfrom ..baseviews import BaseView\nfrom ..charts.views import DirectByChartView\nfrom ..fieldwidgets import BS3PasswordFieldWidget\nfrom ..utils.base import lazy_formatter_gettext\nfrom ..views import expose, ModelView, SimpleFormView\nfrom ..widgets import ListWidget, ShowWidget\n\n\nlog = logging.getLogger(__name__)\n\n\nclass PermissionModelView(ModelView):\n    route_base = \"/permissions\"\n    base_permissions = [\"can_list\"]\n\n    list_title = lazy_gettext(\"List Base Permissions\")\n    show_title = lazy_gettext(\"Show Base Permission\")\n    add_title = lazy_gettext(\"Add Base Permission\")\n    edit_title = lazy_gettext(\"Edit Base Permission\")\n\n    label_columns = {\"name\": lazy_gettext(\"Name\")}\n\n\nclass ViewMenuModelView(ModelView):\n    route_base = \"/viewmenus\"\n    base_permissions = [\"can_list\"]\n\n    list_title = lazy_gettext(\"List View Menus\")\n    show_title = lazy_gettext(\"Show View Menu\")\n    add_title = lazy_gettext(\"Add View Menu\")\n    edit_title = lazy_gettext(\"Edit View Menu\")\n\n    label_columns = {\"name\": lazy_gettext(\"Name\")}\n\n\nclass PermissionViewModelView(ModelView):\n    route_base = \"/permissionviews\"\n    base_permissions = [\"can_list\"]\n\n    list_title = lazy_gettext(\"List Permissions on Views/Menus\")\n    show_title = lazy_gettext(\"Show Permission on Views/Menus\")\n    add_title = lazy_gettext(\"Add Permission on Views/Menus\")\n    edit_title = lazy_gettext(\"Edit Permission on Views/Menus\")\n\n    label_columns = {\n        \"permission\": lazy_gettext(\"Permission\"),\n        \"view_menu\": lazy_gettext(\"View/Menu\"),\n    }\n    list_columns = [\"permission\", \"view_menu\"]\n\n\nclass ResetMyPasswordView(SimpleFormView):\n    \"\"\"\n    View for resetting own user password\n    \"\"\"\n\n    route_base = \"/resetmypassword\"\n    form = ResetPasswordForm\n    form_title = lazy_gettext(\"Reset Password Form\")\n    redirect_url = \"/\"\n    message = lazy_gettext(\"Password Changed\")\n\n    def form_post(self, form):\n        self.appbuilder.sm.reset_password(g.user.id, form.password.data)\n        flash(as_unicode(self.message), \"info\")\n\n\nclass ResetPasswordView(SimpleFormView):\n    \"\"\"\n    View for reseting all users password\n    \"\"\"\n\n    route_base = \"/resetpassword\"\n    form = ResetPasswordForm\n    form_title = lazy_gettext(\"Reset Password Form\")\n    redirect_url = \"/\"\n    message = lazy_gettext(\"Password Changed\")\n\n    def form_post(self, form):\n        pk = request.args.get(\"pk\")\n        self.appbuilder.sm.reset_password(pk, form.password.data)\n        flash(as_unicode(self.message), \"info\")\n\n\nclass UserInfoEditView(SimpleFormView):\n    form = UserInfoEdit\n    form_title = lazy_gettext(\"Edit User Information\")\n    redirect_url = \"/\"\n    message = lazy_gettext(\"User information changed\")\n\n    def form_get(self, form):\n        item = self.appbuilder.sm.get_user_by_id(g.user.id)\n        # fills the form generic solution\n        for key, value in form.data.items():\n            if key == \"csrf_token\":\n                continue\n            form_field = getattr(form, key)\n            form_field.data = getattr(item, key)\n\n    def form_post(self, form):\n        form = self.form.refresh(request.form)\n        item = self.appbuilder.sm.get_user_by_id(g.user.id)\n        form.populate_obj(item)\n        self.appbuilder.sm.update_user(item)\n        flash(as_unicode(self.message), \"info\")\n\n\ndef _roles_custom_formatter(string: str) -> str:\n    if current_app.config.get(\"AUTH_ROLES_SYNC_AT_LOGIN\", False):\n        string += (\n            \". <div class='alert alert-warning' role='alert'>\"\n            \"AUTH_ROLES_SYNC_AT_LOGIN is enabled, changes to this field will \"\n            \"not persist between user logins.\"\n            \"</div>\"\n        )\n    return string\n\n\nclass UserModelView(ModelView):\n    route_base = \"/users\"\n\n    list_title = lazy_gettext(\"List Users\")\n    show_title = lazy_gettext(\"Show User\")\n    add_title = lazy_gettext(\"Add User\")\n    edit_title = lazy_gettext(\"Edit User\")\n\n    label_columns = {\n        \"get_full_name\": lazy_gettext(\"Full Name\"),\n        \"first_name\": lazy_gettext(\"First Name\"),\n        \"last_name\": lazy_gettext(\"Last Name\"),\n        \"username\": lazy_gettext(\"User Name\"),\n        \"password\": lazy_gettext(\"Password\"),\n        \"active\": lazy_gettext(\"Is Active?\"),\n        \"email\": lazy_gettext(\"Email\"),\n        \"roles\": lazy_gettext(\"Role\"),\n        \"last_login\": lazy_gettext(\"Last login\"),\n        \"login_count\": lazy_gettext(\"Login count\"),\n        \"fail_login_count\": lazy_gettext(\"Failed login count\"),\n        \"created_on\": lazy_gettext(\"Created on\"),\n        \"created_by\": lazy_gettext(\"Created by\"),\n        \"changed_on\": lazy_gettext(\"Changed on\"),\n        \"changed_by\": lazy_gettext(\"Changed by\"),\n    }\n\n    description_columns = {\n        \"first_name\": lazy_gettext(\"Write the user first name or names\"),\n        \"last_name\": lazy_gettext(\"Write the user last name\"),\n        \"username\": lazy_gettext(\n            \"Username valid for authentication on DB or LDAP, unused for OID auth\"\n        ),\n        \"password\": lazy_gettext(\n            \"Please use a good password policy,\"\n            \" this application does not check this for you\"\n        ),\n        \"active\": lazy_gettext(\n            \"It's not a good policy to remove a user, just make it inactive\"\n        ),\n        \"email\": lazy_gettext(\"The user's email, this will also be used for OID auth\"),\n        \"roles\": lazy_formatter_gettext(\n            \"The user role on the application,\"\n            \" this will associate with a list of permissions\",\n            _roles_custom_formatter,\n        ),\n        \"conf_password\": lazy_gettext(\"Please rewrite the user's password to confirm\"),\n    }\n\n    list_columns = [\"first_name\", \"last_name\", \"username\", \"email\", \"active\", \"roles\"]\n\n    show_fieldsets = [\n        (\n            lazy_gettext(\"User info\"),\n            {\"fields\": [\"username\", \"active\", \"roles\", \"login_count\"]},\n        ),\n        (\n            lazy_gettext(\"Personal Info\"),\n            {\"fields\": [\"first_name\", \"last_name\", \"email\"], \"expanded\": True},\n        ),\n        (\n            lazy_gettext(\"Audit Info\"),\n            {\n                \"fields\": [\n                    \"last_login\",\n                    \"fail_login_count\",\n                    \"created_on\",\n                    \"created_by\",\n                    \"changed_on\",\n                    \"changed_by\",\n                ],\n                \"expanded\": False,\n            },\n        ),\n    ]\n\n    user_show_fieldsets = [\n        (\n            lazy_gettext(\"User info\"),\n            {\"fields\": [\"username\", \"active\", \"roles\", \"login_count\"]},\n        ),\n        (\n            lazy_gettext(\"Personal Info\"),\n            {\"fields\": [\"first_name\", \"last_name\", \"email\"], \"expanded\": True},\n        ),\n    ]\n\n    search_exclude_columns = [\"password\"]\n\n    add_columns = [\"first_name\", \"last_name\", \"username\", \"active\", \"email\", \"roles\"]\n    edit_columns = [\"first_name\", \"last_name\", \"username\", \"active\", \"email\", \"roles\"]\n    user_info_title = lazy_gettext(\"Your user information\")\n\n    @expose(\"/userinfo/\")\n    @has_access\n    def userinfo(self):\n        item = self.datamodel.get(g.user.id, self._base_filters)\n        widgets = self._get_show_widget(\n            g.user.id, item, show_fieldsets=self.user_show_fieldsets\n        )\n        self.update_redirect()\n        return self.render_template(\n            self.show_template,\n            title=self.user_info_title,\n            widgets=widgets,\n            appbuilder=self.appbuilder,\n        )\n\n    @action(\"userinfoedit\", lazy_gettext(\"Edit User\"), \"\", \"fa-edit\", multiple=False)\n    def userinfoedit(self, item):\n        return redirect(\n            url_for(self.appbuilder.sm.userinfoeditview.__name__ + \".this_form_get\")\n        )\n\n\nclass UserOIDModelView(UserModelView):\n    \"\"\"\n    View that add OID specifics to User view.\n    Override to implement your own custom view.\n    Then override useroidmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserLDAPModelView(UserModelView):\n    \"\"\"\n    View that add LDAP specifics to User view.\n    Override to implement your own custom view.\n    Then override userldapmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserOAuthModelView(UserModelView):\n    \"\"\"\n    View that add OAUTH specifics to User view.\n    Override to implement your own custom view.\n    Then override userldapmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserRemoteUserModelView(UserModelView):\n    \"\"\"\n    View that add REMOTE_USER specifics to User view.\n    Override to implement your own custom view.\n    Then override userldapmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserDBModelView(UserModelView):\n    \"\"\"\n    View that add DB specifics to User view.\n    Override to implement your own custom view.\n    Then override userdbmodelview property on SecurityManager\n    \"\"\"\n\n    add_form_extra_fields = {\n        \"password\": PasswordField(\n            lazy_gettext(\"Password\"),\n            description=lazy_gettext(\n                \"Please use a good password policy,\"\n                \" this application does not check this for you\"\n            ),\n            validators=[validators.DataRequired()],\n            widget=BS3PasswordFieldWidget(),\n        ),\n        \"conf_password\": PasswordField(\n            lazy_gettext(\"Confirm Password\"),\n            description=lazy_gettext(\"Please rewrite the user's password to confirm\"),\n            validators=[\n                EqualTo(\"password\", message=lazy_gettext(\"Passwords must match\"))\n            ],\n            widget=BS3PasswordFieldWidget(),\n        ),\n    }\n\n    add_columns = [\n        \"first_name\",\n        \"last_name\",\n        \"username\",\n        \"active\",\n        \"email\",\n        \"roles\",\n        \"password\",\n        \"conf_password\",\n    ]\n\n    @expose(\"/show/<pk>\", methods=[\"GET\"])\n    @has_access\n    def show(self, pk):\n        actions = dict()\n        actions[\"resetpasswords\"] = self.actions.get(\"resetpasswords\")\n        item = self.datamodel.get(pk, self._base_filters)\n        if not item:\n            abort(404)\n        widgets = self._get_show_widget(pk, item, actions=actions)\n        self.update_redirect()\n        return self.render_template(\n            self.show_template,\n            pk=pk,\n            title=self.show_title,\n            widgets=widgets,\n            appbuilder=self.appbuilder,\n            related_views=self._related_views,\n        )\n\n    @expose(\"/userinfo/\")\n    @has_access\n    def userinfo(self):\n        actions = dict()\n        actions[\"resetmypassword\"] = self.actions.get(\"resetmypassword\")\n        actions[\"userinfoedit\"] = self.actions.get(\"userinfoedit\")\n\n        item = self.datamodel.get(g.user.id, self._base_filters)\n        widgets = self._get_show_widget(\n            g.user.id, item, actions=actions, show_fieldsets=self.user_show_fieldsets\n        )\n        self.update_redirect()\n        return self.render_template(\n            self.show_template,\n            title=self.user_info_title,\n            widgets=widgets,\n            appbuilder=self.appbuilder,\n        )\n\n    @action(\n        \"resetmypassword\",\n        lazy_gettext(\"Reset my password\"),\n        \"\",\n        \"fa-lock\",\n        multiple=False,\n    )\n    def resetmypassword(self, item):\n        return redirect(\n            url_for(self.appbuilder.sm.resetmypasswordview.__name__ + \".this_form_get\")\n        )\n\n    @action(\n        \"resetpasswords\", lazy_gettext(\"Reset Password\"), \"\", \"fa-lock\", multiple=False\n    )\n    def resetpasswords(self, item):\n        return redirect(\n            url_for(\n                self.appbuilder.sm.resetpasswordview.__name__ + \".this_form_get\",\n                pk=item.id,\n            )\n        )\n\n    def pre_update(self, item):\n        item.changed_on = datetime.datetime.now()\n        item.changed_by_fk = g.user.id\n\n    def pre_add(self, item):\n        item.password = generate_password_hash(item.password)\n\n\nclass UserStatsChartView(DirectByChartView):\n    chart_title = lazy_gettext(\"User Statistics\")\n    label_columns = {\n        \"username\": lazy_gettext(\"User Name\"),\n        \"login_count\": lazy_gettext(\"Login count\"),\n        \"fail_login_count\": lazy_gettext(\"Failed login count\"),\n    }\n\n    search_columns = UserModelView.search_columns\n\n    definitions = [\n        {\"label\": \"Login Count\", \"group\": \"username\", \"series\": [\"login_count\"]},\n        {\n            \"label\": \"Failed Login Count\",\n            \"group\": \"username\",\n            \"series\": [\"fail_login_count\"],\n        },\n    ]\n\n\nclass RoleListWidget(ListWidget):\n    template = \"appbuilder/general/widgets/roles/list.html\"\n\n    def __init__(self, **kwargs):\n        kwargs[\"appbuilder\"] = current_app.appbuilder\n        super().__init__(**kwargs)\n\n\nclass RoleShowWidget(ShowWidget):\n    template = \"appbuilder/general/widgets/roles/show.html\"\n\n    def __init__(self, **kwargs):\n        kwargs[\"appbuilder\"] = current_app.appbuilder\n        super().__init__(**kwargs)\n\n\nclass RoleModelView(ModelView):\n    route_base = \"/roles\"\n\n    list_title = lazy_gettext(\"List Roles\")\n    show_title = lazy_gettext(\"Show Role\")\n    add_title = lazy_gettext(\"Add Role\")\n    edit_title = lazy_gettext(\"Edit Role\")\n\n    list_widget = RoleListWidget\n    show_widget = RoleShowWidget\n\n    label_columns = {\n        \"name\": lazy_gettext(\"Name\"),\n        \"permissions\": lazy_gettext(\"Permissions\"),\n    }\n    list_columns = [\"name\", \"permissions\"]\n    show_columns = [\"name\", \"permissions\"]\n    edit_columns = [\"name\", \"permissions\"]\n    add_columns = edit_columns\n    order_columns = [\"name\"]\n\n    @action(\n        \"copyrole\",\n        lazy_gettext(\"Copy Role\"),\n        lazy_gettext(\"Copy the selected roles?\"),\n        icon=\"fa-copy\",\n        single=False,\n    )\n    def copy_role(self, items):\n        self.update_redirect()\n        for item in items:\n            new_role = item.__class__()\n            new_role.name = item.name\n            new_role.permissions = item.permissions\n            new_role.name = new_role.name + \" copy\"\n            self.datamodel.add(new_role)\n        return redirect(self.get_redirect())\n\n\nclass RegisterUserModelView(ModelView):\n    route_base = \"/registeruser\"\n    base_permissions = [\"can_list\", \"can_show\", \"can_delete\"]\n    list_title = lazy_gettext(\"List of Registration Requests\")\n    show_title = lazy_gettext(\"Show Registration\")\n    list_columns = [\"username\", \"registration_date\", \"email\"]\n    show_exclude_columns = [\"password\"]\n    search_exclude_columns = [\"password\"]\n\n\nclass AuthView(BaseView):\n    route_base = \"\"\n    login_template = \"\"\n    invalid_login_message = lazy_gettext(\"Invalid login. Please try again.\")\n    title = lazy_gettext(\"Sign In\")\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self):\n        pass\n\n    @expose(\"/logout/\")\n    def logout(self):\n        logout_user()\n        return redirect(self.appbuilder.get_url_for_index)\n\n\nclass AuthDBView(AuthView):\n    login_template = \"appbuilder/general/security/login_db.html\"\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self):\n        if g.user is not None and g.user.is_authenticated:\n            return redirect(self.appbuilder.get_url_for_index)\n        form = LoginForm_db()\n        if form.validate_on_submit():\n            user = self.appbuilder.sm.auth_user_db(\n                form.username.data, form.password.data\n            )\n            if not user:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            login_user(user, remember=False)\n            return redirect(self.appbuilder.get_url_for_index)\n        return self.render_template(\n            self.login_template, title=self.title, form=form, appbuilder=self.appbuilder\n        )\n\n\nclass AuthLDAPView(AuthView):\n    login_template = \"appbuilder/general/security/login_ldap.html\"\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self):\n        if g.user is not None and g.user.is_authenticated:\n            return redirect(self.appbuilder.get_url_for_index)\n        form = LoginForm_db()\n        if form.validate_on_submit():\n            user = self.appbuilder.sm.auth_user_ldap(\n                form.username.data, form.password.data\n            )\n            if not user:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            login_user(user, remember=False)\n            return redirect(self.appbuilder.get_url_for_index)\n        return self.render_template(\n            self.login_template, title=self.title, form=form, appbuilder=self.appbuilder\n        )\n\n\nclass AuthOIDView(AuthView):\n    login_template = \"appbuilder/general/security/login_oid.html\"\n    oid_ask_for = [\"email\"]\n    oid_ask_for_optional = []\n\n    def __init__(self):\n        super(AuthOIDView, self).__init__()\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self, flag=True):\n        @self.appbuilder.sm.oid.loginhandler\n        def login_handler(self):\n            if g.user is not None and g.user.is_authenticated:\n                return redirect(self.appbuilder.get_url_for_index)\n            form = LoginForm_oid()\n            if form.validate_on_submit():\n                session[\"remember_me\"] = form.remember_me.data\n                return self.appbuilder.sm.oid.try_login(\n                    form.openid.data,\n                    ask_for=self.oid_ask_for,\n                    ask_for_optional=self.oid_ask_for_optional,\n                )\n            return self.render_template(\n                self.login_template,\n                title=self.title,\n                form=form,\n                providers=self.appbuilder.sm.openid_providers,\n                appbuilder=self.appbuilder,\n            )\n\n        @self.appbuilder.sm.oid.after_login\n        def after_login(resp):\n            if resp.email is None or resp.email == \"\":\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            user = self.appbuilder.sm.auth_user_oid(resp.email)\n            if user is None:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            remember_me = False\n            if \"remember_me\" in session:\n                remember_me = session[\"remember_me\"]\n                session.pop(\"remember_me\", None)\n\n            login_user(user, remember=remember_me)\n            return redirect(self.appbuilder.get_url_for_index)\n\n        return login_handler(self)\n\n\nclass AuthOAuthView(AuthView):\n    login_template = \"appbuilder/general/security/login_oauth.html\"\n\n    @expose(\"/login/\")\n    @expose(\"/login/<provider>\")\n    @expose(\"/login/<provider>/<register>\")\n    def login(\n        self, provider: Optional[str] = None, register: Optional[str] = None\n    ) -> Response:\n        log.debug(\"Provider: {0}\".format(provider))\n        if g.user is not None and g.user.is_authenticated:\n            log.debug(\"Already authenticated {0}\".format(g.user))\n            return redirect(self.appbuilder.get_url_for_index)\n\n        if provider is None:\n            if len(self.appbuilder.sm.oauth_providers) > 1:\n                return self.render_template(\n                    self.login_template,\n                    providers=self.appbuilder.sm.oauth_providers,\n                    title=self.title,\n                    appbuilder=self.appbuilder,\n                )\n            else:\n                provider = self.appbuilder.sm.oauth_providers[0][\"name\"]\n\n        log.debug(\"Going to call authorize for: {0}\".format(provider))\n        state = jwt.encode(\n            request.args.to_dict(flat=False),\n            self.appbuilder.app.config[\"SECRET_KEY\"],\n            algorithm=\"HS256\",\n        )\n        try:\n            if register:\n                log.debug(\"Login to Register\")\n                session[\"register\"] = True\n            if provider == \"twitter\":\n                return self.appbuilder.sm.oauth_remotes[provider].authorize_redirect(\n                    redirect_uri=url_for(\n                        \".oauth_authorized\",\n                        provider=provider,\n                        _external=True,\n                        state=state,\n                    )\n                )\n            else:\n                return self.appbuilder.sm.oauth_remotes[provider].authorize_redirect(\n                    redirect_uri=url_for(\n                        \".oauth_authorized\", provider=provider, _external=True\n                    ),\n                    state=state.decode(\"ascii\") if isinstance(state, bytes) else state,\n                )\n        except Exception as e:\n            log.error(\"Error on OAuth authorize: {0}\".format(e))\n            flash(as_unicode(self.invalid_login_message), \"warning\")\n            return redirect(self.appbuilder.get_url_for_index)\n\n    @expose(\"/oauth-authorized/<provider>\")\n    def oauth_authorized(self, provider: str) -> Response:\n        log.debug(\"Authorized init\")\n        if provider not in self.appbuilder.sm.oauth_remotes:\n            flash(u\"Provider not supported.\", \"warning\")\n            log.warning(\"OAuth authorized got an unknown provider %s\", provider)\n            return redirect(self.appbuilder.get_url_for_login)\n        resp = self.appbuilder.sm.oauth_remotes[provider].authorize_access_token()\n        if resp is None:\n            flash(u\"You denied the request to sign in.\", \"warning\")\n            return redirect(self.appbuilder.get_url_for_login)\n        log.debug(\"OAUTH Authorized resp: {0}\".format(resp))\n        # Retrieves specific user info from the provider\n        try:\n            self.appbuilder.sm.set_oauth_session(provider, resp)\n            userinfo = self.appbuilder.sm.oauth_user_info(provider, resp)\n        except Exception as e:\n            log.error(\"Error returning OAuth user info: {0}\".format(e))\n            user = None\n        else:\n            log.debug(\"User info retrieved from {0}: {1}\".format(provider, userinfo))\n            # User email is not whitelisted\n            if provider in self.appbuilder.sm.oauth_whitelists:\n                whitelist = self.appbuilder.sm.oauth_whitelists[provider]\n                allow = False\n                for e in whitelist:\n                    if re.search(e, userinfo[\"email\"]):\n                        allow = True\n                        break\n                if not allow:\n                    flash(u\"You are not authorized.\", \"warning\")\n                    return redirect(self.appbuilder.get_url_for_login)\n            else:\n                log.debug(\"No whitelist for OAuth provider\")\n            user = self.appbuilder.sm.auth_user_oauth(userinfo)\n\n        if user is None:\n            flash(as_unicode(self.invalid_login_message), \"warning\")\n            return redirect(self.appbuilder.get_url_for_login)\n        else:\n            login_user(user)\n            try:\n                state = jwt.decode(\n                    request.args[\"state\"],\n                    self.appbuilder.app.config[\"SECRET_KEY\"],\n                    algorithms=[\"HS256\"],\n                )\n            except jwt.InvalidTokenError:\n                raise Exception(\"State signature is not valid!\")\n\n            next_url = self.appbuilder.get_url_for_index\n            # Check if there is a next url on state\n            if \"next\" in state and len(state[\"next\"]) > 0:\n                parsed_uri = urlparse(state[\"next\"][0])\n                if parsed_uri.netloc != request.host:\n                    log.warning(\"Got an invalid next URL: %s\", parsed_uri.netloc)\n                else:\n                    next_url = state[\"next\"][0]\n            return redirect(next_url)\n\n\nclass AuthRemoteUserView(AuthView):\n    login_template = \"\"\n\n    @expose(\"/login/\")\n    def login(self):\n        username = request.environ.get(\"REMOTE_USER\")\n        if g.user is not None and g.user.is_authenticated:\n            return redirect(self.appbuilder.get_url_for_index)\n        if username:\n            user = self.appbuilder.sm.auth_user_remote_user(username)\n            if user is None:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n            else:\n                login_user(user)\n        else:\n            flash(as_unicode(self.invalid_login_message), \"warning\")\n        return redirect(self.appbuilder.get_url_for_index)\n", "code_before": "import datetime\nimport logging\nimport re\n\nfrom flask import abort, current_app, flash, g, redirect, request, session, url_for\nfrom flask_babel import lazy_gettext\nfrom flask_login import login_user, logout_user\nimport jwt\nfrom werkzeug.security import generate_password_hash\nfrom wtforms import PasswordField, validators\nfrom wtforms.validators import EqualTo\n\nfrom .decorators import has_access\nfrom .forms import LoginForm_db, LoginForm_oid, ResetPasswordForm, UserInfoEdit\nfrom .._compat import as_unicode\nfrom ..actions import action\nfrom ..baseviews import BaseView\nfrom ..charts.views import DirectByChartView\nfrom ..fieldwidgets import BS3PasswordFieldWidget\nfrom ..utils.base import lazy_formatter_gettext\nfrom ..views import expose, ModelView, SimpleFormView\nfrom ..widgets import ListWidget, ShowWidget\n\n\nlog = logging.getLogger(__name__)\n\n\nclass PermissionModelView(ModelView):\n    route_base = \"/permissions\"\n    base_permissions = [\"can_list\"]\n\n    list_title = lazy_gettext(\"List Base Permissions\")\n    show_title = lazy_gettext(\"Show Base Permission\")\n    add_title = lazy_gettext(\"Add Base Permission\")\n    edit_title = lazy_gettext(\"Edit Base Permission\")\n\n    label_columns = {\"name\": lazy_gettext(\"Name\")}\n\n\nclass ViewMenuModelView(ModelView):\n    route_base = \"/viewmenus\"\n    base_permissions = [\"can_list\"]\n\n    list_title = lazy_gettext(\"List View Menus\")\n    show_title = lazy_gettext(\"Show View Menu\")\n    add_title = lazy_gettext(\"Add View Menu\")\n    edit_title = lazy_gettext(\"Edit View Menu\")\n\n    label_columns = {\"name\": lazy_gettext(\"Name\")}\n\n\nclass PermissionViewModelView(ModelView):\n    route_base = \"/permissionviews\"\n    base_permissions = [\"can_list\"]\n\n    list_title = lazy_gettext(\"List Permissions on Views/Menus\")\n    show_title = lazy_gettext(\"Show Permission on Views/Menus\")\n    add_title = lazy_gettext(\"Add Permission on Views/Menus\")\n    edit_title = lazy_gettext(\"Edit Permission on Views/Menus\")\n\n    label_columns = {\n        \"permission\": lazy_gettext(\"Permission\"),\n        \"view_menu\": lazy_gettext(\"View/Menu\"),\n    }\n    list_columns = [\"permission\", \"view_menu\"]\n\n\nclass ResetMyPasswordView(SimpleFormView):\n    \"\"\"\n    View for resetting own user password\n    \"\"\"\n\n    route_base = \"/resetmypassword\"\n    form = ResetPasswordForm\n    form_title = lazy_gettext(\"Reset Password Form\")\n    redirect_url = \"/\"\n    message = lazy_gettext(\"Password Changed\")\n\n    def form_post(self, form):\n        self.appbuilder.sm.reset_password(g.user.id, form.password.data)\n        flash(as_unicode(self.message), \"info\")\n\n\nclass ResetPasswordView(SimpleFormView):\n    \"\"\"\n    View for reseting all users password\n    \"\"\"\n\n    route_base = \"/resetpassword\"\n    form = ResetPasswordForm\n    form_title = lazy_gettext(\"Reset Password Form\")\n    redirect_url = \"/\"\n    message = lazy_gettext(\"Password Changed\")\n\n    def form_post(self, form):\n        pk = request.args.get(\"pk\")\n        self.appbuilder.sm.reset_password(pk, form.password.data)\n        flash(as_unicode(self.message), \"info\")\n\n\nclass UserInfoEditView(SimpleFormView):\n    form = UserInfoEdit\n    form_title = lazy_gettext(\"Edit User Information\")\n    redirect_url = \"/\"\n    message = lazy_gettext(\"User information changed\")\n\n    def form_get(self, form):\n        item = self.appbuilder.sm.get_user_by_id(g.user.id)\n        # fills the form generic solution\n        for key, value in form.data.items():\n            if key == \"csrf_token\":\n                continue\n            form_field = getattr(form, key)\n            form_field.data = getattr(item, key)\n\n    def form_post(self, form):\n        form = self.form.refresh(request.form)\n        item = self.appbuilder.sm.get_user_by_id(g.user.id)\n        form.populate_obj(item)\n        self.appbuilder.sm.update_user(item)\n        flash(as_unicode(self.message), \"info\")\n\n\ndef _roles_custom_formatter(string: str) -> str:\n    if current_app.config.get(\"AUTH_ROLES_SYNC_AT_LOGIN\", False):\n        string += (\n            \". <div class='alert alert-warning' role='alert'>\"\n            \"AUTH_ROLES_SYNC_AT_LOGIN is enabled, changes to this field will \"\n            \"not persist between user logins.\"\n            \"</div>\"\n        )\n    return string\n\n\nclass UserModelView(ModelView):\n    route_base = \"/users\"\n\n    list_title = lazy_gettext(\"List Users\")\n    show_title = lazy_gettext(\"Show User\")\n    add_title = lazy_gettext(\"Add User\")\n    edit_title = lazy_gettext(\"Edit User\")\n\n    label_columns = {\n        \"get_full_name\": lazy_gettext(\"Full Name\"),\n        \"first_name\": lazy_gettext(\"First Name\"),\n        \"last_name\": lazy_gettext(\"Last Name\"),\n        \"username\": lazy_gettext(\"User Name\"),\n        \"password\": lazy_gettext(\"Password\"),\n        \"active\": lazy_gettext(\"Is Active?\"),\n        \"email\": lazy_gettext(\"Email\"),\n        \"roles\": lazy_gettext(\"Role\"),\n        \"last_login\": lazy_gettext(\"Last login\"),\n        \"login_count\": lazy_gettext(\"Login count\"),\n        \"fail_login_count\": lazy_gettext(\"Failed login count\"),\n        \"created_on\": lazy_gettext(\"Created on\"),\n        \"created_by\": lazy_gettext(\"Created by\"),\n        \"changed_on\": lazy_gettext(\"Changed on\"),\n        \"changed_by\": lazy_gettext(\"Changed by\"),\n    }\n\n    description_columns = {\n        \"first_name\": lazy_gettext(\"Write the user first name or names\"),\n        \"last_name\": lazy_gettext(\"Write the user last name\"),\n        \"username\": lazy_gettext(\n            \"Username valid for authentication on DB or LDAP, unused for OID auth\"\n        ),\n        \"password\": lazy_gettext(\n            \"Please use a good password policy,\"\n            \" this application does not check this for you\"\n        ),\n        \"active\": lazy_gettext(\n            \"It's not a good policy to remove a user, just make it inactive\"\n        ),\n        \"email\": lazy_gettext(\"The user's email, this will also be used for OID auth\"),\n        \"roles\": lazy_formatter_gettext(\n            \"The user role on the application,\"\n            \" this will associate with a list of permissions\",\n            _roles_custom_formatter,\n        ),\n        \"conf_password\": lazy_gettext(\"Please rewrite the user's password to confirm\"),\n    }\n\n    list_columns = [\"first_name\", \"last_name\", \"username\", \"email\", \"active\", \"roles\"]\n\n    show_fieldsets = [\n        (\n            lazy_gettext(\"User info\"),\n            {\"fields\": [\"username\", \"active\", \"roles\", \"login_count\"]},\n        ),\n        (\n            lazy_gettext(\"Personal Info\"),\n            {\"fields\": [\"first_name\", \"last_name\", \"email\"], \"expanded\": True},\n        ),\n        (\n            lazy_gettext(\"Audit Info\"),\n            {\n                \"fields\": [\n                    \"last_login\",\n                    \"fail_login_count\",\n                    \"created_on\",\n                    \"created_by\",\n                    \"changed_on\",\n                    \"changed_by\",\n                ],\n                \"expanded\": False,\n            },\n        ),\n    ]\n\n    user_show_fieldsets = [\n        (\n            lazy_gettext(\"User info\"),\n            {\"fields\": [\"username\", \"active\", \"roles\", \"login_count\"]},\n        ),\n        (\n            lazy_gettext(\"Personal Info\"),\n            {\"fields\": [\"first_name\", \"last_name\", \"email\"], \"expanded\": True},\n        ),\n    ]\n\n    search_exclude_columns = [\"password\"]\n\n    add_columns = [\"first_name\", \"last_name\", \"username\", \"active\", \"email\", \"roles\"]\n    edit_columns = [\"first_name\", \"last_name\", \"username\", \"active\", \"email\", \"roles\"]\n    user_info_title = lazy_gettext(\"Your user information\")\n\n    @expose(\"/userinfo/\")\n    @has_access\n    def userinfo(self):\n        item = self.datamodel.get(g.user.id, self._base_filters)\n        widgets = self._get_show_widget(\n            g.user.id, item, show_fieldsets=self.user_show_fieldsets\n        )\n        self.update_redirect()\n        return self.render_template(\n            self.show_template,\n            title=self.user_info_title,\n            widgets=widgets,\n            appbuilder=self.appbuilder,\n        )\n\n    @action(\"userinfoedit\", lazy_gettext(\"Edit User\"), \"\", \"fa-edit\", multiple=False)\n    def userinfoedit(self, item):\n        return redirect(\n            url_for(self.appbuilder.sm.userinfoeditview.__name__ + \".this_form_get\")\n        )\n\n\nclass UserOIDModelView(UserModelView):\n    \"\"\"\n    View that add OID specifics to User view.\n    Override to implement your own custom view.\n    Then override useroidmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserLDAPModelView(UserModelView):\n    \"\"\"\n    View that add LDAP specifics to User view.\n    Override to implement your own custom view.\n    Then override userldapmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserOAuthModelView(UserModelView):\n    \"\"\"\n    View that add OAUTH specifics to User view.\n    Override to implement your own custom view.\n    Then override userldapmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserRemoteUserModelView(UserModelView):\n    \"\"\"\n    View that add REMOTE_USER specifics to User view.\n    Override to implement your own custom view.\n    Then override userldapmodelview property on SecurityManager\n    \"\"\"\n\n    pass\n\n\nclass UserDBModelView(UserModelView):\n    \"\"\"\n    View that add DB specifics to User view.\n    Override to implement your own custom view.\n    Then override userdbmodelview property on SecurityManager\n    \"\"\"\n\n    add_form_extra_fields = {\n        \"password\": PasswordField(\n            lazy_gettext(\"Password\"),\n            description=lazy_gettext(\n                \"Please use a good password policy,\"\n                \" this application does not check this for you\"\n            ),\n            validators=[validators.DataRequired()],\n            widget=BS3PasswordFieldWidget(),\n        ),\n        \"conf_password\": PasswordField(\n            lazy_gettext(\"Confirm Password\"),\n            description=lazy_gettext(\"Please rewrite the user's password to confirm\"),\n            validators=[\n                EqualTo(\"password\", message=lazy_gettext(\"Passwords must match\"))\n            ],\n            widget=BS3PasswordFieldWidget(),\n        ),\n    }\n\n    add_columns = [\n        \"first_name\",\n        \"last_name\",\n        \"username\",\n        \"active\",\n        \"email\",\n        \"roles\",\n        \"password\",\n        \"conf_password\",\n    ]\n\n    @expose(\"/show/<pk>\", methods=[\"GET\"])\n    @has_access\n    def show(self, pk):\n        actions = dict()\n        actions[\"resetpasswords\"] = self.actions.get(\"resetpasswords\")\n        item = self.datamodel.get(pk, self._base_filters)\n        if not item:\n            abort(404)\n        widgets = self._get_show_widget(pk, item, actions=actions)\n        self.update_redirect()\n        return self.render_template(\n            self.show_template,\n            pk=pk,\n            title=self.show_title,\n            widgets=widgets,\n            appbuilder=self.appbuilder,\n            related_views=self._related_views,\n        )\n\n    @expose(\"/userinfo/\")\n    @has_access\n    def userinfo(self):\n        actions = dict()\n        actions[\"resetmypassword\"] = self.actions.get(\"resetmypassword\")\n        actions[\"userinfoedit\"] = self.actions.get(\"userinfoedit\")\n\n        item = self.datamodel.get(g.user.id, self._base_filters)\n        widgets = self._get_show_widget(\n            g.user.id, item, actions=actions, show_fieldsets=self.user_show_fieldsets\n        )\n        self.update_redirect()\n        return self.render_template(\n            self.show_template,\n            title=self.user_info_title,\n            widgets=widgets,\n            appbuilder=self.appbuilder,\n        )\n\n    @action(\n        \"resetmypassword\",\n        lazy_gettext(\"Reset my password\"),\n        \"\",\n        \"fa-lock\",\n        multiple=False,\n    )\n    def resetmypassword(self, item):\n        return redirect(\n            url_for(self.appbuilder.sm.resetmypasswordview.__name__ + \".this_form_get\")\n        )\n\n    @action(\n        \"resetpasswords\", lazy_gettext(\"Reset Password\"), \"\", \"fa-lock\", multiple=False\n    )\n    def resetpasswords(self, item):\n        return redirect(\n            url_for(\n                self.appbuilder.sm.resetpasswordview.__name__ + \".this_form_get\",\n                pk=item.id,\n            )\n        )\n\n    def pre_update(self, item):\n        item.changed_on = datetime.datetime.now()\n        item.changed_by_fk = g.user.id\n\n    def pre_add(self, item):\n        item.password = generate_password_hash(item.password)\n\n\nclass UserStatsChartView(DirectByChartView):\n    chart_title = lazy_gettext(\"User Statistics\")\n    label_columns = {\n        \"username\": lazy_gettext(\"User Name\"),\n        \"login_count\": lazy_gettext(\"Login count\"),\n        \"fail_login_count\": lazy_gettext(\"Failed login count\"),\n    }\n\n    search_columns = UserModelView.search_columns\n\n    definitions = [\n        {\"label\": \"Login Count\", \"group\": \"username\", \"series\": [\"login_count\"]},\n        {\n            \"label\": \"Failed Login Count\",\n            \"group\": \"username\",\n            \"series\": [\"fail_login_count\"],\n        },\n    ]\n\n\nclass RoleListWidget(ListWidget):\n    template = \"appbuilder/general/widgets/roles/list.html\"\n\n    def __init__(self, **kwargs):\n        kwargs[\"appbuilder\"] = current_app.appbuilder\n        super().__init__(**kwargs)\n\n\nclass RoleShowWidget(ShowWidget):\n    template = \"appbuilder/general/widgets/roles/show.html\"\n\n    def __init__(self, **kwargs):\n        kwargs[\"appbuilder\"] = current_app.appbuilder\n        super().__init__(**kwargs)\n\n\nclass RoleModelView(ModelView):\n    route_base = \"/roles\"\n\n    list_title = lazy_gettext(\"List Roles\")\n    show_title = lazy_gettext(\"Show Role\")\n    add_title = lazy_gettext(\"Add Role\")\n    edit_title = lazy_gettext(\"Edit Role\")\n\n    list_widget = RoleListWidget\n    show_widget = RoleShowWidget\n\n    label_columns = {\n        \"name\": lazy_gettext(\"Name\"),\n        \"permissions\": lazy_gettext(\"Permissions\"),\n    }\n    list_columns = [\"name\", \"permissions\"]\n    show_columns = [\"name\", \"permissions\"]\n    edit_columns = [\"name\", \"permissions\"]\n    add_columns = edit_columns\n    order_columns = [\"name\"]\n\n    @action(\n        \"copyrole\",\n        lazy_gettext(\"Copy Role\"),\n        lazy_gettext(\"Copy the selected roles?\"),\n        icon=\"fa-copy\",\n        single=False,\n    )\n    def copy_role(self, items):\n        self.update_redirect()\n        for item in items:\n            new_role = item.__class__()\n            new_role.name = item.name\n            new_role.permissions = item.permissions\n            new_role.name = new_role.name + \" copy\"\n            self.datamodel.add(new_role)\n        return redirect(self.get_redirect())\n\n\nclass RegisterUserModelView(ModelView):\n    route_base = \"/registeruser\"\n    base_permissions = [\"can_list\", \"can_show\", \"can_delete\"]\n    list_title = lazy_gettext(\"List of Registration Requests\")\n    show_title = lazy_gettext(\"Show Registration\")\n    list_columns = [\"username\", \"registration_date\", \"email\"]\n    show_exclude_columns = [\"password\"]\n    search_exclude_columns = [\"password\"]\n\n\nclass AuthView(BaseView):\n    route_base = \"\"\n    login_template = \"\"\n    invalid_login_message = lazy_gettext(\"Invalid login. Please try again.\")\n    title = lazy_gettext(\"Sign In\")\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self):\n        pass\n\n    @expose(\"/logout/\")\n    def logout(self):\n        logout_user()\n        return redirect(self.appbuilder.get_url_for_index)\n\n\nclass AuthDBView(AuthView):\n    login_template = \"appbuilder/general/security/login_db.html\"\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self):\n        if g.user is not None and g.user.is_authenticated:\n            return redirect(self.appbuilder.get_url_for_index)\n        form = LoginForm_db()\n        if form.validate_on_submit():\n            user = self.appbuilder.sm.auth_user_db(\n                form.username.data, form.password.data\n            )\n            if not user:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            login_user(user, remember=False)\n            return redirect(self.appbuilder.get_url_for_index)\n        return self.render_template(\n            self.login_template, title=self.title, form=form, appbuilder=self.appbuilder\n        )\n\n\nclass AuthLDAPView(AuthView):\n    login_template = \"appbuilder/general/security/login_ldap.html\"\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self):\n        if g.user is not None and g.user.is_authenticated:\n            return redirect(self.appbuilder.get_url_for_index)\n        form = LoginForm_db()\n        if form.validate_on_submit():\n            user = self.appbuilder.sm.auth_user_ldap(\n                form.username.data, form.password.data\n            )\n            if not user:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            login_user(user, remember=False)\n            return redirect(self.appbuilder.get_url_for_index)\n        return self.render_template(\n            self.login_template, title=self.title, form=form, appbuilder=self.appbuilder\n        )\n\n    \"\"\"\n        For Future Use, API Auth, must check howto keep REST stateless\n    \"\"\"\n\n    \"\"\"\n    @expose_api(name='auth',url='/api/auth')\n    def auth(self):\n        if g.user is not None and g.user.is_authenticated:\n            http_return_code = 401\n            response = make_response(\n                jsonify(\n                    {\n                        'message': 'Login Failed already authenticated',\n                        'severity': 'critical'\n                    }\n                ),\n                http_return_code\n            )\n        username = str(request.args.get('username'))\n        password = str(request.args.get('password'))\n        user = self.appbuilder.sm.auth_user_ldap(username, password)\n        if not user:\n            http_return_code = 401\n            response = make_response(\n                jsonify(\n                    {\n                        'message': 'Login Failed',\n                        'severity': 'critical'\n                    }\n                ),\n                http_return_code\n            )\n        else:\n            login_user(user, remember=False)\n            http_return_code = 201\n            response = make_response(\n                jsonify(\n                    {\n                        'message': 'Login Success',\n                         'severity': 'info'\n                    }\n                ),\n                http_return_code\n            )\n        return response\n    \"\"\"\n\n\nclass AuthOIDView(AuthView):\n    login_template = \"appbuilder/general/security/login_oid.html\"\n    oid_ask_for = [\"email\"]\n    oid_ask_for_optional = []\n\n    def __init__(self):\n        super(AuthOIDView, self).__init__()\n\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self, flag=True):\n        @self.appbuilder.sm.oid.loginhandler\n        def login_handler(self):\n            if g.user is not None and g.user.is_authenticated:\n                return redirect(self.appbuilder.get_url_for_index)\n            form = LoginForm_oid()\n            if form.validate_on_submit():\n                session[\"remember_me\"] = form.remember_me.data\n                return self.appbuilder.sm.oid.try_login(\n                    form.openid.data,\n                    ask_for=self.oid_ask_for,\n                    ask_for_optional=self.oid_ask_for_optional,\n                )\n            return self.render_template(\n                self.login_template,\n                title=self.title,\n                form=form,\n                providers=self.appbuilder.sm.openid_providers,\n                appbuilder=self.appbuilder,\n            )\n\n        @self.appbuilder.sm.oid.after_login\n        def after_login(resp):\n            if resp.email is None or resp.email == \"\":\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            user = self.appbuilder.sm.auth_user_oid(resp.email)\n            if user is None:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n            remember_me = False\n            if \"remember_me\" in session:\n                remember_me = session[\"remember_me\"]\n                session.pop(\"remember_me\", None)\n\n            login_user(user, remember=remember_me)\n            return redirect(self.appbuilder.get_url_for_index)\n\n        return login_handler(self)\n\n\nclass AuthOAuthView(AuthView):\n    login_template = \"appbuilder/general/security/login_oauth.html\"\n\n    @expose(\"/login/\")\n    @expose(\"/login/<provider>\")\n    @expose(\"/login/<provider>/<register>\")\n    def login(self, provider=None, register=None):\n        log.debug(\"Provider: {0}\".format(provider))\n        if g.user is not None and g.user.is_authenticated:\n            log.debug(\"Already authenticated {0}\".format(g.user))\n            return redirect(self.appbuilder.get_url_for_index)\n\n        if provider is None:\n            if len(self.appbuilder.sm.oauth_providers) > 1:\n                return self.render_template(\n                    self.login_template,\n                    providers=self.appbuilder.sm.oauth_providers,\n                    title=self.title,\n                    appbuilder=self.appbuilder,\n                )\n            else:\n                provider = self.appbuilder.sm.oauth_providers[0][\"name\"]\n\n        log.debug(\"Going to call authorize for: {0}\".format(provider))\n        state = jwt.encode(\n            request.args.to_dict(flat=False),\n            self.appbuilder.app.config[\"SECRET_KEY\"],\n            algorithm=\"HS256\",\n        )\n        try:\n            if register:\n                log.debug(\"Login to Register\")\n                session[\"register\"] = True\n            if provider == \"twitter\":\n                return self.appbuilder.sm.oauth_remotes[provider].authorize_redirect(\n                    redirect_uri=url_for(\n                        \".oauth_authorized\",\n                        provider=provider,\n                        _external=True,\n                        state=state,\n                    )\n                )\n            else:\n                return self.appbuilder.sm.oauth_remotes[provider].authorize_redirect(\n                    redirect_uri=url_for(\n                        \".oauth_authorized\", provider=provider, _external=True\n                    ),\n                    state=state.decode(\"ascii\") if isinstance(state, bytes) else state,\n                )\n        except Exception as e:\n            log.error(\"Error on OAuth authorize: {0}\".format(e))\n            flash(as_unicode(self.invalid_login_message), \"warning\")\n            return redirect(self.appbuilder.get_url_for_index)\n\n    @expose(\"/oauth-authorized/<provider>\")\n    def oauth_authorized(self, provider):\n        log.debug(\"Authorized init\")\n        resp = self.appbuilder.sm.oauth_remotes[provider].authorize_access_token()\n        if resp is None:\n            flash(u\"You denied the request to sign in.\", \"warning\")\n            return redirect(self.appbuilder.get_url_for_login)\n        log.debug(\"OAUTH Authorized resp: {0}\".format(resp))\n        # Retrieves specific user info from the provider\n        try:\n            self.appbuilder.sm.set_oauth_session(provider, resp)\n            userinfo = self.appbuilder.sm.oauth_user_info(provider, resp)\n        except Exception as e:\n            log.error(\"Error returning OAuth user info: {0}\".format(e))\n            user = None\n        else:\n            log.debug(\"User info retrieved from {0}: {1}\".format(provider, userinfo))\n            # User email is not whitelisted\n            if provider in self.appbuilder.sm.oauth_whitelists:\n                whitelist = self.appbuilder.sm.oauth_whitelists[provider]\n                allow = False\n                for e in whitelist:\n                    if re.search(e, userinfo[\"email\"]):\n                        allow = True\n                        break\n                if not allow:\n                    flash(u\"You are not authorized.\", \"warning\")\n                    return redirect(self.appbuilder.get_url_for_login)\n            else:\n                log.debug(\"No whitelist for OAuth provider\")\n            user = self.appbuilder.sm.auth_user_oauth(userinfo)\n\n        if user is None:\n            flash(as_unicode(self.invalid_login_message), \"warning\")\n            return redirect(self.appbuilder.get_url_for_login)\n        else:\n            login_user(user)\n            try:\n                state = jwt.decode(\n                    request.args[\"state\"],\n                    self.appbuilder.app.config[\"SECRET_KEY\"],\n                    algorithms=[\"HS256\"],\n                )\n            except jwt.InvalidTokenError:\n                raise Exception(\"State signature is not valid!\")\n\n            try:\n                next_url = state[\"next\"][0] or self.appbuilder.get_url_for_index\n            except (KeyError, IndexError):\n                next_url = self.appbuilder.get_url_for_index\n\n            return redirect(next_url)\n\n\nclass AuthRemoteUserView(AuthView):\n    login_template = \"\"\n\n    @expose(\"/login/\")\n    def login(self):\n        username = request.environ.get(\"REMOTE_USER\")\n        if g.user is not None and g.user.is_authenticated:\n            return redirect(self.appbuilder.get_url_for_index)\n        if username:\n            user = self.appbuilder.sm.auth_user_remote_user(username)\n            if user is None:\n                flash(as_unicode(self.invalid_login_message), \"warning\")\n            else:\n                login_user(user)\n        else:\n            flash(as_unicode(self.invalid_login_message), \"warning\")\n        return redirect(self.appbuilder.get_url_for_index)\n", "patch": "@@ -1,8 +1,20 @@\n import datetime\n import logging\n import re\n-\n-from flask import abort, current_app, flash, g, redirect, request, session, url_for\n+from typing import Optional\n+from urllib.parse import urlparse\n+\n+from flask import (\n+    abort,\n+    current_app,\n+    flash,\n+    g,\n+    redirect,\n+    request,\n+    Response,\n+    session,\n+    url_for,\n+)\n from flask_babel import lazy_gettext\n from flask_login import login_user, logout_user\n import jwt\n@@ -537,53 +549,6 @@ def login(self):\n             self.login_template, title=self.title, form=form, appbuilder=self.appbuilder\n         )\n \n-    \"\"\"\n-        For Future Use, API Auth, must check howto keep REST stateless\n-    \"\"\"\n-\n-    \"\"\"\n-    @expose_api(name='auth',url='/api/auth')\n-    def auth(self):\n-        if g.user is not None and g.user.is_authenticated:\n-            http_return_code = 401\n-            response = make_response(\n-                jsonify(\n-                    {\n-                        'message': 'Login Failed already authenticated',\n-                        'severity': 'critical'\n-                    }\n-                ),\n-                http_return_code\n-            )\n-        username = str(request.args.get('username'))\n-        password = str(request.args.get('password'))\n-        user = self.appbuilder.sm.auth_user_ldap(username, password)\n-        if not user:\n-            http_return_code = 401\n-            response = make_response(\n-                jsonify(\n-                    {\n-                        'message': 'Login Failed',\n-                        'severity': 'critical'\n-                    }\n-                ),\n-                http_return_code\n-            )\n-        else:\n-            login_user(user, remember=False)\n-            http_return_code = 201\n-            response = make_response(\n-                jsonify(\n-                    {\n-                        'message': 'Login Success',\n-                         'severity': 'info'\n-                    }\n-                ),\n-                http_return_code\n-            )\n-        return response\n-    \"\"\"\n-\n \n class AuthOIDView(AuthView):\n     login_template = \"appbuilder/general/security/login_oid.html\"\n@@ -641,7 +606,9 @@ class AuthOAuthView(AuthView):\n     @expose(\"/login/\")\n     @expose(\"/login/<provider>\")\n     @expose(\"/login/<provider>/<register>\")\n-    def login(self, provider=None, register=None):\n+    def login(\n+        self, provider: Optional[str] = None, register: Optional[str] = None\n+    ) -> Response:\n         log.debug(\"Provider: {0}\".format(provider))\n         if g.user is not None and g.user.is_authenticated:\n             log.debug(\"Already authenticated {0}\".format(g.user))\n@@ -690,8 +657,12 @@ def login(self, provider=None, register=None):\n             return redirect(self.appbuilder.get_url_for_index)\n \n     @expose(\"/oauth-authorized/<provider>\")\n-    def oauth_authorized(self, provider):\n+    def oauth_authorized(self, provider: str) -> Response:\n         log.debug(\"Authorized init\")\n+        if provider not in self.appbuilder.sm.oauth_remotes:\n+            flash(u\"Provider not supported.\", \"warning\")\n+            log.warning(\"OAuth authorized got an unknown provider %s\", provider)\n+            return redirect(self.appbuilder.get_url_for_login)\n         resp = self.appbuilder.sm.oauth_remotes[provider].authorize_access_token()\n         if resp is None:\n             flash(u\"You denied the request to sign in.\", \"warning\")\n@@ -735,11 +706,14 @@ def oauth_authorized(self, provider):\n             except jwt.InvalidTokenError:\n                 raise Exception(\"State signature is not valid!\")\n \n-            try:\n-                next_url = state[\"next\"][0] or self.appbuilder.get_url_for_index\n-            except (KeyError, IndexError):\n-                next_url = self.appbuilder.get_url_for_index\n-\n+            next_url = self.appbuilder.get_url_for_index\n+            # Check if there is a next url on state\n+            if \"next\" in state and len(state[\"next\"]) > 0:\n+                parsed_uri = urlparse(state[\"next\"][0])\n+                if parsed_uri.netloc != request.host:\n+                    log.warning(\"Got an invalid next URL: %s\", parsed_uri.netloc)\n+                else:\n+                    next_url = state[\"next\"][0]\n             return redirect(next_url)\n \n ", "file_path": "files/2021_9/1024", "file_language": "py", "file_name": "flask_appbuilder/security/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/dpgaspar/Flask-AppBuilder/raw/6af28521589599b1dbafd6313256229ee9a4fa74/flask_appbuilder%2Ftests%2Fconfig_oauth.py", "code": "import os\n\nfrom flask_appbuilder.security.manager import AUTH_OAUTH\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nSQLALCHEMY_DATABASE_URI = os.environ.get(\n    \"SQLALCHEMY_DATABASE_URI\"\n) or \"sqlite:///\" + os.path.join(basedir, \"app.db\")\n\nSECRET_KEY = \"thisismyscretkey\"\n\nAUTH_TYPE = AUTH_OAUTH\n\nOAUTH_PROVIDERS = [\n    {\n        \"name\": \"google\",\n        \"icon\": \"fa-google\",\n        \"token_key\": \"access_token\",\n        \"remote_app\": {\n            \"client_id\": \"CLIENT_ID\",\n            \"client_secret\": \"CLIENT_SECRET\",\n            \"api_base_url\": \"https://www.googleapis.com/oauth2/v2/\",\n            \"client_kwargs\": {\"scope\": \"email profile\"},\n            \"request_token_url\": None,\n            \"access_token_url\": \"https://accounts.google.com/o/oauth2/token\",\n            \"authorize_url\": \"https://accounts.google.com/o/oauth2/auth\",\n        },\n    }\n]\n\n# Will allow user self registration\nAUTH_USER_REGISTRATION = True\n\n# The default user self registration role for all users\nAUTH_USER_REGISTRATION_ROLE = \"Admin\"\n", "code_before": "", "patch": "@@ -0,0 +1,36 @@\n+import os\n+\n+from flask_appbuilder.security.manager import AUTH_OAUTH\n+\n+basedir = os.path.abspath(os.path.dirname(__file__))\n+\n+SQLALCHEMY_DATABASE_URI = os.environ.get(\n+    \"SQLALCHEMY_DATABASE_URI\"\n+) or \"sqlite:///\" + os.path.join(basedir, \"app.db\")\n+\n+SECRET_KEY = \"thisismyscretkey\"\n+\n+AUTH_TYPE = AUTH_OAUTH\n+\n+OAUTH_PROVIDERS = [\n+    {\n+        \"name\": \"google\",\n+        \"icon\": \"fa-google\",\n+        \"token_key\": \"access_token\",\n+        \"remote_app\": {\n+            \"client_id\": \"CLIENT_ID\",\n+            \"client_secret\": \"CLIENT_SECRET\",\n+            \"api_base_url\": \"https://www.googleapis.com/oauth2/v2/\",\n+            \"client_kwargs\": {\"scope\": \"email profile\"},\n+            \"request_token_url\": None,\n+            \"access_token_url\": \"https://accounts.google.com/o/oauth2/token\",\n+            \"authorize_url\": \"https://accounts.google.com/o/oauth2/auth\",\n+        },\n+    }\n+]\n+\n+# Will allow user self registration\n+AUTH_USER_REGISTRATION = True\n+\n+# The default user self registration role for all users\n+AUTH_USER_REGISTRATION_ROLE = \"Admin\"", "file_path": "files/2021_9/1025", "file_language": "py", "file_name": "flask_appbuilder/tests/config_oauth.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/dpgaspar/Flask-AppBuilder/raw/6af28521589599b1dbafd6313256229ee9a4fa74/flask_appbuilder%2Ftests%2Ftest_mvc_oauth.py", "code": "from flask_appbuilder import SQLA\nfrom flask_appbuilder.tests.base import FABTestCase\nimport jwt\n\n\nclass UserInfoReponseMock:\n    def json(self):\n        return {\n            \"id\": \"1\",\n            \"given_name\": \"first-name\",\n            \"family_name\": \"last-name\",\n            \"email\": \"user1@fab.org\",\n        }\n\n\nclass OAuthRemoteMock:\n    def authorize_access_token(self):\n        return {\"access_token\": \"some-key\"}\n\n    def get(self, item):\n        if item == \"userinfo\":\n            return UserInfoReponseMock()\n\n\nclass APICSRFTestCase(FABTestCase):\n    def setUp(self):\n        from flask import Flask\n        from flask_wtf import CSRFProtect\n        from flask_appbuilder import AppBuilder\n\n        self.app = Flask(__name__)\n        self.app.config.from_object(\"flask_appbuilder.tests.config_oauth\")\n        self.app.config[\"WTF_CSRF_ENABLED\"] = True\n\n        self.csrf = CSRFProtect(self.app)\n        self.db = SQLA(self.app)\n        self.appbuilder = AppBuilder(self.app, self.db.session)\n\n    def test_oauth_login(self):\n        \"\"\"\n        OAuth: Test login\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n        self.assertEqual(response.location, \"http://localhost/\")\n\n    def test_oauth_login_unknown_provider(self):\n        \"\"\"\n        OAuth: Test login with unknown provider\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(\n            f\"/oauth-authorized/unknown_provider?state={state.decode('utf-8')}\"\n        )\n        self.assertEqual(response.location, \"http://localhost/login/\")\n\n    def test_oauth_login_next(self):\n        \"\"\"\n        OAuth: Test login next\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {\"next\": [\"http://localhost/users/list/\"]}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n        self.assertEqual(response.location, \"http://localhost/users/list/\")\n\n    def test_oauth_login_next_check(self):\n        \"\"\"\n        OAuth: Test login next check\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {\"next\": [\"http://www.google.com\"]}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n        self.assertEqual(response.location, \"http://localhost/\")\n", "code_before": "", "patch": "@@ -0,0 +1,95 @@\n+from flask_appbuilder import SQLA\n+from flask_appbuilder.tests.base import FABTestCase\n+import jwt\n+\n+\n+class UserInfoReponseMock:\n+    def json(self):\n+        return {\n+            \"id\": \"1\",\n+            \"given_name\": \"first-name\",\n+            \"family_name\": \"last-name\",\n+            \"email\": \"user1@fab.org\",\n+        }\n+\n+\n+class OAuthRemoteMock:\n+    def authorize_access_token(self):\n+        return {\"access_token\": \"some-key\"}\n+\n+    def get(self, item):\n+        if item == \"userinfo\":\n+            return UserInfoReponseMock()\n+\n+\n+class APICSRFTestCase(FABTestCase):\n+    def setUp(self):\n+        from flask import Flask\n+        from flask_wtf import CSRFProtect\n+        from flask_appbuilder import AppBuilder\n+\n+        self.app = Flask(__name__)\n+        self.app.config.from_object(\"flask_appbuilder.tests.config_oauth\")\n+        self.app.config[\"WTF_CSRF_ENABLED\"] = True\n+\n+        self.csrf = CSRFProtect(self.app)\n+        self.db = SQLA(self.app)\n+        self.appbuilder = AppBuilder(self.app, self.db.session)\n+\n+    def test_oauth_login(self):\n+        \"\"\"\n+        OAuth: Test login\n+        \"\"\"\n+        client = self.app.test_client()\n+\n+        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n+\n+        raw_state = {}\n+        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n+\n+        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n+        self.assertEqual(response.location, \"http://localhost/\")\n+\n+    def test_oauth_login_unknown_provider(self):\n+        \"\"\"\n+        OAuth: Test login with unknown provider\n+        \"\"\"\n+        client = self.app.test_client()\n+\n+        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n+\n+        raw_state = {}\n+        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n+\n+        response = client.get(\n+            f\"/oauth-authorized/unknown_provider?state={state.decode('utf-8')}\"\n+        )\n+        self.assertEqual(response.location, \"http://localhost/login/\")\n+\n+    def test_oauth_login_next(self):\n+        \"\"\"\n+        OAuth: Test login next\n+        \"\"\"\n+        client = self.app.test_client()\n+\n+        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n+\n+        raw_state = {\"next\": [\"http://localhost/users/list/\"]}\n+        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n+\n+        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n+        self.assertEqual(response.location, \"http://localhost/users/list/\")\n+\n+    def test_oauth_login_next_check(self):\n+        \"\"\"\n+        OAuth: Test login next check\n+        \"\"\"\n+        client = self.app.test_client()\n+\n+        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n+\n+        raw_state = {\"next\": [\"http://www.google.com\"]}\n+        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n+\n+        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n+        self.assertEqual(response.location, \"http://localhost/\")", "file_path": "files/2021_9/1026", "file_language": "py", "file_name": "flask_appbuilder/tests/test_mvc_oauth.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [], "function_after": [{"function": "class UserInfoReponseMock:\n    def json(self):\n        return {\n            \"id\": \"1\",\n            \"given_name\": \"first-name\",\n            \"family_name\": \"last-name\",\n            \"email\": \"user1@fab.org\",\n        }", "target": 0}, {"function": "class OAuthRemoteMock:\n    def authorize_access_token(self):\n        return {\"access_token\": \"some-key\"}\n\n    def get(self, item):\n        if item == \"userinfo\":\n            return UserInfoReponseMock()", "target": 0}, {"function": "class APICSRFTestCase(FABTestCase):\n    def setUp(self):\n        from flask import Flask\n        from flask_wtf import CSRFProtect\n        from flask_appbuilder import AppBuilder\n\n        self.app = Flask(__name__)\n        self.app.config.from_object(\"flask_appbuilder.tests.config_oauth\")\n        self.app.config[\"WTF_CSRF_ENABLED\"] = True\n\n        self.csrf = CSRFProtect(self.app)\n        self.db = SQLA(self.app)\n        self.appbuilder = AppBuilder(self.app, self.db.session)\n\n    def test_oauth_login(self):\n        \"\"\"\n        OAuth: Test login\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n        self.assertEqual(response.location, \"http://localhost/\")\n\n    def test_oauth_login_unknown_provider(self):\n        \"\"\"\n        OAuth: Test login with unknown provider\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(\n            f\"/oauth-authorized/unknown_provider?state={state.decode('utf-8')}\"\n        )\n        self.assertEqual(response.location, \"http://localhost/login/\")\n\n    def test_oauth_login_next(self):\n        \"\"\"\n        OAuth: Test login next\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {\"next\": [\"http://localhost/users/list/\"]}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n        self.assertEqual(response.location, \"http://localhost/users/list/\")\n\n    def test_oauth_login_next_check(self):\n        \"\"\"\n        OAuth: Test login next check\n        \"\"\"\n        client = self.app.test_client()\n\n        self.appbuilder.sm.oauth_remotes = {\"google\": OAuthRemoteMock()}\n\n        raw_state = {\"next\": [\"http://www.google.com\"]}\n        state = jwt.encode(raw_state, self.app.config[\"SECRET_KEY\"], algorithm=\"HS256\")\n\n        response = client.get(f\"/oauth-authorized/google?state={state.decode('utf-8')}\")\n        self.assertEqual(response.location, \"http://localhost/\")", "target": 0}]}, {"raw_url": "https://github.com/dpgaspar/Flask-AppBuilder/raw/6af28521589599b1dbafd6313256229ee9a4fa74/requirements-extra.txt", "code": "mongoengine>=0.7.10, <0.7.99\nflask-mongoengine==0.7.1\npymongo>=2.8.1, <2.8.99\nPillow>=7.0.0, <8.0.0\ncython==0.29.17\nmysqlclient==2.0.1\npsycopg2-binary==2.8.6\npyodbc==4.0.30\nrequests==2.25.0\nAuthlib==0.15.4\npython-ldap==3.3.1\n", "code_before": "mongoengine>=0.7.10, <0.7.99\nflask-mongoengine==0.7.1\npymongo>=2.8.1, <2.8.99\nPillow>=7.0.0, <8.0.0\ncython==0.29.17\nmysqlclient==2.0.1\npsycopg2-binary==2.8.6\npyodbc==4.0.30\nrequests==2.25.0\nAuthlib==0.15.2\npython-ldap==3.3.1\n", "patch": "@@ -7,5 +7,5 @@ mysqlclient==2.0.1\n psycopg2-binary==2.8.6\n pyodbc==4.0.30\n requests==2.25.0\n-Authlib==0.15.2\n+Authlib==0.15.4\n python-ldap==3.3.1", "file_path": "files/2021_9/1027", "file_language": "txt", "file_name": "requirements-extra.txt", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/dpgaspar/Flask-AppBuilder/raw/6af28521589599b1dbafd6313256229ee9a4fa74/setup.py", "code": "import io\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n\nwith io.open(\"flask_appbuilder/__init__.py\", \"rt\", encoding=\"utf8\") as f:\n    version = re.search(r\"__version__ = \\\"(.*?)\\\"\", f.read()).group(1)\n\n\ndef fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)\n\n\ndef read(fname):\n    return open(fpath(fname)).read()\n\n\ndef desc():\n    return read(\"README.rst\")\n\n\nsetup(\n    name=\"Flask-AppBuilder\",\n    version=version,\n    url=\"https://github.com/dpgaspar/flask-appbuilder/\",\n    license=\"BSD\",\n    author=\"Daniel Vaz Gaspar\",\n    author_email=\"danielvazgaspar@gmail.com\",\n    description=(\n        \"Simple and rapid application development framework, built on top of Flask.\"\n        \" includes detailed security, auto CRUD generation for your models,\"\n        \" google charts and much more.\"\n    ),\n    long_description=desc(),\n    long_description_content_type=\"text/x-rst\",\n    packages=find_packages(),\n    package_data={\"\": [\"LICENSE\"]},\n    entry_points={\n        \"flask.commands\": [\"fab=flask_appbuilder.cli:fab\"],\n        \"console_scripts\": [\"fabmanager = flask_appbuilder.console:cli\"],\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n    install_requires=[\n        \"apispec[yaml]>=3.3, <4\",\n        \"colorama>=0.3.9, <1\",\n        \"click>=6.7, <9\",\n        \"email_validator>=1.0.5, <2\",\n        \"Flask>=0.12, <2\",\n        \"Flask-Babel>=1, <2\",\n        \"Flask-Login>=0.3, <0.5\",\n        \"Flask-OpenID>=1.2.5, <2\",\n        # SQLAlchemy 1.4.0 breaks flask-sqlalchemy and sqlalchemy-utils\n        \"SQLAlchemy<1.4.0\",\n        \"Flask-SQLAlchemy>=2.4, <3\",\n        \"Flask-WTF>=0.14.2, <0.15.0\",\n        \"Flask-JWT-Extended>=3.18, <4\",\n        \"jsonschema>=3.0.1, <4\",\n        \"marshmallow>=3, <4\",\n        \"marshmallow-enum>=1.5.1, <2\",\n        \"marshmallow-sqlalchemy>=0.22.0, <0.24.0\",\n        \"python-dateutil>=2.3, <3\",\n        \"prison>=0.1.3, <1.0.0\",\n        \"PyJWT>=1.7.1, <2.0.0\",\n        \"sqlalchemy-utils>=0.32.21, <1\",\n    ],\n    extras_require={\n        \"jmespath\": [\"jmespath>=0.9.5\"],\n        \"oauth\": [\"Authlib>=0.14, <1.0.0\"],\n    },\n    tests_require=[\"nose>=1.0\", \"mockldap>=0.3.0\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    python_requires=\"~=3.6\",\n    test_suite=\"nose.collector\",\n)\n", "code_before": "import io\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n\nwith io.open(\"flask_appbuilder/__init__.py\", \"rt\", encoding=\"utf8\") as f:\n    version = re.search(r\"__version__ = \\\"(.*?)\\\"\", f.read()).group(1)\n\n\ndef fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)\n\n\ndef read(fname):\n    return open(fpath(fname)).read()\n\n\ndef desc():\n    return read(\"README.rst\")\n\n\nsetup(\n    name=\"Flask-AppBuilder\",\n    version=version,\n    url=\"https://github.com/dpgaspar/flask-appbuilder/\",\n    license=\"BSD\",\n    author=\"Daniel Vaz Gaspar\",\n    author_email=\"danielvazgaspar@gmail.com\",\n    description=(\n        \"Simple and rapid application development framework, built on top of Flask.\"\n        \" includes detailed security, auto CRUD generation for your models,\"\n        \" google charts and much more.\"\n    ),\n    long_description=desc(),\n    long_description_content_type=\"text/x-rst\",\n    packages=find_packages(),\n    package_data={\"\": [\"LICENSE\"]},\n    entry_points={\n        \"flask.commands\": [\"fab=flask_appbuilder.cli:fab\"],\n        \"console_scripts\": [\"fabmanager = flask_appbuilder.console:cli\"],\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n    install_requires=[\n        \"apispec[yaml]>=3.3, <4\",\n        \"colorama>=0.3.9, <1\",\n        \"click>=6.7, <9\",\n        \"email_validator>=1.0.5, <2\",\n        \"Flask>=0.12, <2\",\n        \"Flask-Babel>=1, <2\",\n        \"Flask-Login>=0.3, <0.5\",\n        \"Flask-OpenID>=1.2.5, <2\",\n        # SQLAlchemy 1.4.0 breaks flask-sqlalchemy and sqlalchemy-utils\n        \"SQLAlchemy<1.4.0\",\n        \"Flask-SQLAlchemy>=2.4, <3\",\n        \"Flask-WTF>=0.14.2, <0.15.0\",\n        \"Flask-JWT-Extended>=3.18, <4\",\n        \"jsonschema>=3.0.1, <4\",\n        \"marshmallow>=3, <4\",\n        \"marshmallow-enum>=1.5.1, <2\",\n        \"marshmallow-sqlalchemy>=0.22.0, <0.24.0\",\n        \"python-dateutil>=2.3, <3\",\n        \"prison>=0.1.3, <1.0.0\",\n        \"PyJWT>=1.7.1, <2.0.0\",\n        \"sqlalchemy-utils>=0.32.21, <1\",\n    ],\n    extras_require={\"jmespath\": [\"jmespath>=0.9.5\"]},\n    tests_require=[\"nose>=1.0\", \"mockldap>=0.3.0\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    python_requires=\"~=3.6\",\n    test_suite=\"nose.collector\",\n)\n", "patch": "@@ -67,7 +67,10 @@ def desc():\n         \"PyJWT>=1.7.1, <2.0.0\",\n         \"sqlalchemy-utils>=0.32.21, <1\",\n     ],\n-    extras_require={\"jmespath\": [\"jmespath>=0.9.5\"]},\n+    extras_require={\n+        \"jmespath\": [\"jmespath>=0.9.5\"],\n+        \"oauth\": [\"Authlib>=0.14, <1.0.0\"],\n+    },\n     tests_require=[\"nose>=1.0\", \"mockldap>=0.3.0\"],\n     classifiers=[\n         \"Development Status :: 5 - Production/Stable\",", "file_path": "files/2021_9/1028", "file_language": "py", "file_name": "setup.py", "outdated_file_modify": 1, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)", "target": 0}, {"function": "def read(fname):\n    return open(fpath(fname)).read()", "target": 0}, {"function": "def desc():\n    return read(\"README.rst\")", "target": 0}], "function_after": [{"function": "def fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)", "target": 0}, {"function": "def read(fname):\n    return open(fpath(fname)).read()", "target": 0}, {"function": "def desc():\n    return read(\"README.rst\")", "target": 0}]}], "outdated": 1, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
