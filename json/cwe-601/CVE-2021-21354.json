{"index": 5640, "cve_id": "CVE-2021-21354", "cwe_id": ["CWE-601"], "cve_language": "Python", "cve_description": "Pollbot is open source software which \"frees its human masters from the toilsome task of polling for the state of things during the Firefox release process.\" In Pollbot before version 1.4.4 there is an open redirection vulnerability in the path of \"https://pollbot.services.mozilla.com/\";. An attacker can redirect anyone to malicious sites. To Reproduce type in this URL: \"https://pollbot.services.mozilla.com//evil.com/\";. Affected versions will redirect to that website when you inject a payload like \"//evil.com/\". This is fixed in version 1.4.4.", "cvss": "6.1", "publish_date": "March 8, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "6db74a4fcbff258c7cdf51a6ff0724fc10c485e5", "commit_message": "Remove leading slashes in 404 redirections\n\nWhen reaching http://server//page/ the server should not redirect to ``/page`` instead of ``//page``.", "commit_date": "2021-02-26T10:26:15Z", "project": "mozilla/pollbot", "url": "https://api.github.com/repos/mozilla/PollBot/commits/6db74a4fcbff258c7cdf51a6ff0724fc10c485e5", "html_url": "https://github.com/mozilla/PollBot/commit/6db74a4fcbff258c7cdf51a6ff0724fc10c485e5", "windows_before": [{"commit_id": "78539afa363b200ef004f40531665826f234eab3", "commit_date": "Tue Sep 8 15:59:48 2020 -0400", "commit_message": "Merge pull request #311 from mozbhearsum/remove-constraints", "files_name": ["b240146ce30f2b9a2e6f1b0ce2f571d49688bd53 - Tue Sep 8 15:53:44 2020 -0400 : Remove now-unused constraints file", "Dockerfile", "constraints.txt", "scripts/run-tests.sh"]}, {"commit_id": "7ce59a5ff0b3d2aa5fb06cd940d1477d1520436d", "commit_date": "Tue Sep 8 15:48:50 2020 -0400", "commit_message": "Version bump", "files_name": ["setup.py"]}, {"commit_id": "9a4859ae54631c393c1d352eb9b7008420bd05a3", "commit_date": "Tue Sep 8 15:40:14 2020 -0400", "commit_message": "Merge pull request #308 from mozbhearsum/deps", "files_name": ["bc252d23f129e0e7f67fb4cb390acffc17869ed0 - Tue Sep 8 15:14:54 2020 -0400 : Fix deps", "requirements.txt"]}, {"commit_id": "d3502ef9ff90211f30f00d1a08e89e3773e25c47", "commit_date": "Tue Sep 8 14:44:43 2020 -0400", "commit_message": "Merge latest from master", "files_name": ["8347ae3dbdd09ddceb9d01fe28525e28aab305ee - Tue Sep 8 14:41:58 2020 -0400 : Fix async with in tests", "tests/test_tasks.py"]}, {"commit_id": "6e65c9776378b4153cbaa41f7d98f5a981088cdd", "commit_date": "Tue Sep 8 14:41:48 2020 -0400", "commit_message": "Bump dependencies", "files_name": ["requirements.txt"]}, {"commit_id": "532e71fda7fc2d0c5891cc4f42c7d62e283abfe9", "commit_date": "Tue Sep 8 11:11:02 2020 -0400", "commit_message": "Add requirements.in", "files_name": ["requirements.in"]}, {"commit_id": "951b66662679518b4bc132209e38d0093de6a89a", "commit_date": "Tue Sep 8 11:01:46 2020 -0400", "commit_message": "Merge pull request #278 from mozilla/dependabot/pip/markupsafe-1.1.1", "files_name": ["ccc27cec00e4f22a118bc1be06ab93346d1231b5 - Tue Sep 8 11:00:15 2020 -0400 : Merge pull request #253 from jfx2006/thunderbird-support", "80fa7d7e6778f217c6b38dd76a1552910396900c - Wed Sep 2 19:45:18 2020 +0000 : Bump markupsafe from 1.0 to 1.1.1", "requirements.txt"]}, {"commit_id": "958f86f551391dcf19e9d92a34ad638a1d3362b5", "commit_date": "Wed Sep 2 15:43:37 2020 -0400", "commit_message": "Add dependabot config", "files_name": [".github/dependabot.yml"]}, {"commit_id": "89d99a598e6c7c615c60c06bc35f4e4bcc654377", "commit_date": "Sun Mar 8 07:58:27 2020 -0400", "commit_message": "Fix line length and whitespace test errors.", "files_name": ["tests/test_tasks.py", "tests/test_views.py"]}, {"commit_id": "a07e80b7d63a51ac60c1fffa1f4237b911644dab", "commit_date": "Sun Mar 8 07:41:51 2020 -0400", "commit_message": "Add some new tests for Thunderbird specific cases.", "files_name": ["tests/test_tasks.py"]}, {"commit_id": "1b2cb87182858bcd6a0cc105744382de279d1c87", "commit_date": "Sun Mar 8 07:41:25 2020 -0400", "commit_message": "Fixes for existing tests", "files_name": ["pollbot/tasks/archives.py", "pollbot/tasks/balrog.py", "pollbot/tasks/bedrock.py", "pollbot/tasks/bouncer.py"]}, {"commit_id": "6ae55a01ba4dbd0e6bf77804d74e3695c6ed9c0c", "commit_date": "Sun Mar 8 07:39:26 2020 -0400", "commit_message": "Make existing tests aware of thunderbird product.", "files_name": ["tests/test_tasks.py", "tests/test_views.py"]}, {"commit_id": "6d1d982118cab11685a1b50cf66ffeb136847cf9", "commit_date": "Sun Mar 1 03:56:59 2020 -0500", "commit_message": "Support download links for Thunderbird release and beta.", "files_name": ["pollbot/tasks/bedrock.py", "pollbot/views/release.py"]}, {"commit_id": "bee7fdf01df71e0b77dd8d9d345353c24de87aae", "commit_date": "Sun Mar 1 03:54:22 2020 -0500", "commit_message": "Add heartbeat for www.thunderbird.net", "files_name": ["pollbot/tasks/bedrock.py", "pollbot/views/utilities.py"]}, {"commit_id": "0975d6ffce21d15c5b451dbdb918f2811a05e835", "commit_date": "Sun Mar 1 03:49:41 2020 -0500", "commit_message": "Combine archives rules for RELASE and BETA/AURORA channels.", "files_name": ["pollbot/tasks/archives.py"]}, {"commit_id": "7b79d42ea6babeededcfb2d2554040e63aa7a878", "commit_date": "Sat Feb 22 22:02:54 2020 -0500", "commit_message": "Enable 'thunderbird' product.", "files_name": ["pollbot/__init__.py"]}, {"commit_id": "9bb4fbe1401b9984bc6959e8a6a2397dc6a3f177", "commit_date": "Sat Feb 22 22:02:26 2020 -0500", "commit_message": "Disable checks that do not apply to Thunderbird releases.", "files_name": ["pollbot/views/release.py"]}, {"commit_id": "f6b627b91f773d91d71f543129353888185ee445", "commit_date": "Sat Feb 22 22:00:32 2020 -0500", "commit_message": "Support Thunderbird in product_details task.", "files_name": ["pollbot/tasks/product_details.py"]}, {"commit_id": "9784fe43419faf5d4a578c5f25ea5ddcc9b5b0a4", "commit_date": "Sat Feb 22 21:58:53 2020 -0500", "commit_message": "Support Thunderbird in bedrock task.", "files_name": ["pollbot/tasks/bedrock.py"]}, {"commit_id": "f8b03f5106178b824978f06521b7aae6a349daf4", "commit_date": "Sat Feb 22 21:52:47 2020 -0500", "commit_message": "Support Thunderbird in balrog task.", "files_name": ["pollbot/tasks/balrog.py"]}, {"commit_id": "a169824369a2128a6218438df913ec373f2faa43", "commit_date": "Sat Feb 22 21:51:59 2020 -0500", "commit_message": "Support Thunderbird in archive task.", "files_name": ["pollbot/tasks/archives.py"]}, {"commit_id": "f978e3d7e5729f5886a0828442152649282824a9", "commit_date": "Sat Feb 22 21:47:36 2020 -0500", "commit_message": "Support Thunderbird in bouncer task.", "files_name": ["pollbot/tasks/bouncer.py"]}, {"commit_id": "9a4196a48e622e94f43ff14ebbf7b816950aa867", "commit_date": "Sat Feb 22 21:45:56 2020 -0500", "commit_message": "Support Thunderbird in buildhub task.", "files_name": ["pollbot/tasks/buildhub.py"]}, {"commit_id": "4ba9b9d144fa7adc1541c4720b6b8d4face511ac", "commit_date": "Tue Nov 5 09:28:22 2019 -0500", "commit_message": "Bump 1.4.2", "files_name": ["CHANGELOG.rst", "setup.py"]}, {"commit_id": "c3658afa3f95b9a4afc47370b46b24158cb92724", "commit_date": "Tue Nov 5 09:16:03 2019 -0500", "commit_message": "Merge pull request #252 from jcristau/bouncer-247", "files_name": ["2dfa1b4ead9164e60be5ebb5c921680d29e750f3 - Thu Oct 24 16:33:57 2019 +0200 : Stop scraping www.mozilla.org for bouncer download links", "pollbot/tasks/bouncer.py", "tests/test_tasks.py"]}, {"commit_id": "159c24f839d1e0b8b5c1253aebe326bfc1110939", "commit_date": "Mon Jul 1 13:44:48 2019 -0400", "commit_message": "Update CHANGELOG", "files_name": ["CHANGELOG.rst"]}, {"commit_id": "6eadbe0b940f31879c25385d310de88c7fce9a4d", "commit_date": "Mon Jul 1 13:39:50 2019 -0400", "commit_message": "Merge pull request #250 from willkg/buildhub2", "files_name": ["7691080fe6280c50118d23f802fb0cd6f6387dbc - Mon Jul 1 09:46:09 2019 -0400 : Update to use Buildhub2", "pollbot/tasks/buildhub.py", "tests/test_tasks.py", "tests/test_views.py"]}, {"commit_id": "73bdd4831c70c7a527e2063b3a7eeee8e2adf75a", "commit_date": "Mon Jul 1 12:35:30 2019 -0400", "commit_message": "Merge pull request #251 from willkg/fix-make-run", "files_name": ["8f613c585df10f0dcaf5ab5de1368b8454011f20 - Mon Jul 1 12:16:08 2019 -0400 : Fix \"make run\"", "Makefile"]}, {"commit_id": "80b433239cec3727dd57009a420d1b08bd3cc531", "commit_date": "Mon Jul 1 09:59:36 2019 -0400", "commit_message": "Merge pull request #249 from willkg/deps-updates", "files_name": ["649cbd8208cf6af98efc39b97bb958938533e708 - Mon Jul 1 09:48:27 2019 -0400 : Update Jinja2", "requirements.txt"]}, {"commit_id": "e5b2be6a2cb24824765c036defb6a7b73aaedc12", "commit_date": "Fri Jun 28 17:08:06 2019 -0400", "commit_message": "Merge pull request #248 from willkg/reqs-pinning", "files_name": ["6bb26140a58fe33a72741d4486fe2ea11dbaa027 - Fri Jun 28 17:00:46 2019 -0400 : Fix imports in test_views.py", "tests/test_views.py"]}, {"commit_id": "4c8a46cb8283ca6c18cea11b73164d15635d851e", "commit_date": "Fri Jun 28 16:56:37 2019 -0400", "commit_message": "Add xfail around failing test", "files_name": ["tests/test_views.py"]}, {"commit_id": "13eeaa82098590543237e4046c791baa07dfc4f6", "commit_date": "Fri Jun 28 16:54:18 2019 -0400", "commit_message": "Re-add flake8 max-line-length configuration", "files_name": ["setup.cfg"]}, {"commit_id": "1c0929aea797b5c0802aacd5b967bd04e38a7fc5", "commit_date": "Fri Jun 28 16:41:40 2019 -0400", "commit_message": "Add constraints.txt to run-tests.sh script", "files_name": ["scripts/run-tests.sh"]}, {"commit_id": "bfedb869cfcc265bfc51aeaeda9af34d34ebde82", "commit_date": "Fri Jun 28 16:36:55 2019 -0400", "commit_message": "Pin requirements, nix tox", "files_name": ["Dockerfile", "MANIFEST.in", "constraints.txt", "requirements.txt", "tox.ini"]}, {"commit_id": "6d279981987a29443be2dcf34345ad0a9d33d271", "commit_date": "Fri Jun 28 16:09:51 2019 -0400", "commit_message": "Merge pull request #245 from willkg/project-fixes", "files_name": ["1af2fcf229eb2231ad3bbb8496133344afd77698 - Fri Jun 28 14:51:36 2019 -0400 : Fix run-tests.sh script", "scripts/run-tests.sh"]}, {"commit_id": "17f5a697cd1753c96037a7d8a0929b3609744c2b", "commit_date": "Fri Jun 28 14:41:45 2019 -0400", "commit_message": "Implement local dev environment", "files_name": [".gitignore", "Dockerfile", "Makefile", "README.rst", "docker-compose.yml", "env-dist", "pollbot/tasks/archives.py", "pollbot/tasks/balrog.py", "requirements.txt", "setup.py"]}, {"commit_id": "107081129811fbf196e08a8a753cb8ee7adf0c25", "commit_date": "Fri Jun 28 13:36:24 2019 -0400", "commit_message": "Fix CODE_OF_CONDUCT to correct text", "files_name": ["CODE_OF_CONDUCT.md"]}, {"commit_id": "0e46c1b98f3cb470f4c6e2b24e0905ec56ce2a2d", "commit_date": "Fri Jun 28 13:36:12 2019 -0400", "commit_message": "Project files updates", "files_name": ["API_CHANGELOG.rst", "CHANGELOG.rst", "README.rst"]}, {"commit_id": "beb5ac74c6f2120e1afe51502d99e7ed81513bdf", "commit_date": "Tue Jan 8 08:22:09 2019 -0500", "commit_message": "latest pyyaml (#241)", "files_name": ["CHANGELOG.rst", "requirements.txt", "setup.py"]}, {"commit_id": "3b07b9a931b1bd231e4cd8a70dea701b8c66528b", "commit_date": "Wed Oct 31 09:21:48 2018 -0400", "commit_message": "bug 1503546 - no more pollbot.dev.mozaws.net (#238)", "files_name": ["README.rst"]}, {"commit_id": "bd8686b2ca99a1710a3e87d779a665c97fa2821d", "commit_date": "Tue Oct 30 16:29:50 2018 -0400", "commit_message": "better print of the newly created release", "files_name": ["bin/make-release.py"]}, {"commit_id": "1d63a24d7741c4937342e525c88788657b41038a", "commit_date": "Tue Oct 30 16:29:07 2018 -0400", "commit_message": "Bump 1.4.0", "files_name": ["CHANGELOG.rst", "setup.py"]}, {"commit_id": "8cdffa4f1167ab03d44de558f6bfd57b1a537e82", "commit_date": "Tue Oct 30 16:27:32 2018 -0400", "commit_message": "Nightly buildIDs depends on the *local* time (#237)", "files_name": ["pollbot/utils.py", "tests/test_utils.py"]}, {"commit_id": "d3563f58ab2a53e9b114d9c1e61d9136975bc0f9", "commit_date": "Mon Oct 29 14:42:10 2018 -0400", "commit_message": "new make-release script", "files_name": ["bin/make-release.py"]}, {"commit_id": "b27e48bf95dbc29498affb0ef920a125adf5df9d", "commit_date": "Mon Oct 29 14:39:56 2018 -0400", "commit_message": "version 1.3.0", "files_name": ["setup.py"]}, {"commit_id": "dac4b21472c3d39bde0cbf958aeb947506ad48a2", "commit_date": "Mon Oct 29 14:39:05 2018 -0400", "commit_message": "update changelog regarding https://github.com/mozilla/PollBot/issues/231", "files_name": ["CHANGELOG.rst"]}, {"commit_id": "767c0b479c1435a933e7e79a294c08f8bd05b75d", "commit_date": "Mon Oct 29 14:37:59 2018 -0400", "commit_message": "prepare for 1.3.0 release", "files_name": ["CHANGELOG.rst"]}, {"commit_id": "110727470327a10065abf028ddd928894f1bcac3", "commit_date": "Mon Oct 29 14:22:11 2018 -0400", "commit_message": "retrofix for setup.py version and changelog for 1.2.1", "files_name": ["CHANGELOG.rst", "setup.py"]}, {"commit_id": "11dc6fe9040b0d5e42344bd954e45aeb48d3da1f", "commit_date": "Mon Oct 29 13:09:08 2018 -0400", "commit_message": "devedition tags aren't firefox tags (#232)", "files_name": ["pollbot/tasks/bedrock.py"]}, {"commit_id": "271b39967dcf1b60519929211da7debb769743ba", "commit_date": "Mon Oct 29 12:42:13 2018 -0400", "commit_message": "main summary uptake returns an error (#235)", "files_name": ["CHANGELOG.rst", "Makefile", "README.rst", "pollbot/app.py"]}], "windows_after": [{"commit_id": "e946cf6e96ca648481d337d114255f8daf332c20", "commit_date": "Fri Feb 26 11:14:44 2021 -0500", "commit_message": "Add missing MarkupSafe hash", "files_name": ["requirements.txt"]}, {"commit_id": "bc69c4ee10daeb40973e3b854d48474c825f5029", "commit_date": "Sat Feb 27 18:43:24 2021 +0100", "commit_message": "Fix invalid request in view test", "files_name": ["tests/test_views.py"]}, {"commit_id": "90a9e9a80eb402a65f560eb0e2412b3efdebf87d", "commit_date": "Mon Mar 1 10:24:24 2021 -0500", "commit_message": "Merge pull request #333 from bhearsum/advisory-fix-1", "files_name": ["4e9557ef4cc0c36fb2f190e7cfec39d9f81fb636 - Mon Mar 1 10:27:17 2021 -0500 : Bump 1.4.4", "CHANGELOG.rst", "setup.py"]}, {"commit_id": "3a5636f5cbb9196d6f7f21cf611e8aa127434402", "commit_date": "Wed Aug 4 13:47:56 2021 -0400", "commit_message": "Update Thunderbird Nightly download link query selector", "files_name": ["pollbot/tasks/bedrock.py"]}, {"commit_id": "eff2372ded4906d44fb636574f60274354892348", "commit_date": "Wed Aug 4 13:54:04 2021 -0400", "commit_message": "Update test for Thunderbird Daily download link.", "files_name": ["tests/test_tasks.py"]}, {"commit_id": "ceb66c43bf8770d44a90712524624a9ddc4451d8", "commit_date": "Wed Aug 4 14:03:32 2021 -0400", "commit_message": "Merge pull request #346 from jfx2006/thunderbird-support", "files_name": ["0983238c7974c0cc7ddebb8e4f684394d0413908 - Thu Oct 7 17:19:45 2021 -0600 : update requirements.txt with modern pip-compile, python 3.6", "requirements.txt"]}, {"commit_id": "125180a36e89b5dff645267cfff1a9a8a901e0a1", "commit_date": "Fri Oct 8 09:22:57 2021 -0600", "commit_message": "add .python-version file, for dependabot", "files_name": [".python-version"]}, {"commit_id": "0b9c9defa7c921e703a8f2abd36afae7243d0f3b", "commit_date": "Tue Oct 12 08:20:52 2021 -0600", "commit_message": "Merge pull request #348 from gbrownmozilla/reformat-requirements-txt", "files_name": ["ba3c711efcfd06845eb0086f6956eba8bffbe05e - Tue Oct 12 08:27:41 2021 -0600 : Merge pull request #349 from gbrownmozilla/python-version", "0ebd79bb79778bf34226aa3be27a0aad7db83959 - Tue Oct 12 19:06:11 2021 -0600 : relax docker file permissions to allow run-tests.sh to run pip install successfully", "Dockerfile"]}, {"commit_id": "4884dcd7347843d49c784830d3604abf143e4b52", "commit_date": "Wed Oct 13 09:31:40 2021 -0600", "commit_message": "use chown instead", "files_name": ["Dockerfile"]}, {"commit_id": "0d8622e9234a61a38ecdad85ee34a68cc6bb3e44", "commit_date": "Wed Oct 13 09:56:53 2021 -0600", "commit_message": "Merge pull request #351 from gbrownmozilla/permissions-fix", "files_name": ["932831a2d683d356cb21a728b12d859306d1a238 - Wed Oct 13 11:01:23 2021 -0600 : upgrade all requirements via pip-compile --upgrade in python 3.6", "requirements.txt"]}, {"commit_id": "6872b315946475a085fa67d27ffe2d2fef18e28e", "commit_date": "Wed Oct 13 12:26:55 2021 -0600", "commit_message": "Merge pull request #352 from gbrownmozilla/upgrade-requirments-txt", "files_name": ["42fa89e4d6386a54f3c97aa5ffb34428a9e26e65 - Thu Oct 14 14:52:43 2021 -0600 : Bump 1.4.5", "CHANGELOG.rst", "setup.py"]}, {"commit_id": "81de6c0fbb9177ba8a8e17428deff79b71d91ac1", "commit_date": "Mon Oct 25 19:07:12 2021 +0000", "commit_message": "Bump aiohttp-swagger from 1.0.15 to 1.0.16", "files_name": ["requirements.txt"]}, {"commit_id": "2c0172045f2ed4c17c5375ec62c20cdffb8f30ff", "commit_date": "Mon Nov 8 19:07:55 2021 +0000", "commit_message": "Bump swagger-spec-validator from 2.7.3 to 2.7.4", "files_name": ["requirements.txt"]}, {"commit_id": "7f0c0a7d3d7ca2126d3628e2e87e9a038ff4d11e", "commit_date": "Tue Nov 9 14:13:08 2021 -0700", "commit_message": "Merge pull request #353 from mozilla/dependabot/pip/aiohttp-swagger-1.0.16", "files_name": ["7575f24ae836254659baf3e1831e21d55f22dc9c - Tue Nov 9 21:27:39 2021 +0000 : Bump aiohttp from 3.7.4.post0 to 3.8.0", "requirements.txt"]}, {"commit_id": "5d0957127988cb8afe3c970235ebc4199be40d7d", "commit_date": "Tue Nov 9 15:52:12 2021 -0700", "commit_message": "Merge pull request #354 from mozilla/dependabot/pip/aiohttp-3.8.0", "files_name": ["196b4275644a50b1a7ae387e805adaac20b13119 - Wed Nov 10 09:30:22 2021 -0700 : Merge pull request #355 from mozilla/dependabot/pip/swagger-spec-validator-2.7.4", "ce9110a6e99d6bd5dac02501ab1ad161b50c6204 - Mon Nov 15 19:59:25 2021 +0000 : Bump aiohttp from 3.8.0 to 3.8.1", "requirements.txt"]}, {"commit_id": "800aeb575642b8c057b0034ad9e5cfe4a630a3c7", "commit_date": "Tue Nov 16 09:35:53 2021 -0700", "commit_message": "Merge pull request #356 from mozilla/dependabot/pip/aiohttp-3.8.1", "files_name": ["870e7196b1eb8375cf883387b58666d95917a869 - Mon Dec 13 19:49:30 2021 +0000 : Bump lxml from 4.6.3 to 4.6.5", "requirements.txt"]}, {"commit_id": "89a84431c8ae523dcfe31f71e42060ed45762174", "commit_date": "Mon Jan 17 19:08:15 2022 +0000", "commit_message": "Bump aioresponses from 0.7.2 to 0.7.3", "files_name": ["requirements.txt"]}, {"commit_id": "08856c45d592e06512602ec73d8254e51c1e7d40", "commit_date": "Mon Feb 7 19:08:11 2022 +0000", "commit_message": "Bump pytest from 6.2.5 to 7.0.0", "files_name": ["requirements.txt"]}, {"commit_id": "a9ce82c00a756d415130dbc1c85b78c584cba3b2", "commit_date": "Mon Feb 7 14:12:55 2022 -0700", "commit_message": "Harden trailing slashes redirect", "files_name": ["pollbot/middlewares.py"]}, {"commit_id": "c4f96130003284122b1774220e3cce29a02ff6b3", "commit_date": "Mon Feb 7 14:34:42 2022 -0700", "commit_message": "Use string.whitespace", "files_name": ["pollbot/middlewares.py"]}, {"commit_id": "70d21dce46efd8ad70f01cafdbcd8ad1737079df", "commit_date": "Mon Feb 7 15:17:28 2022 -0700", "commit_message": "Merge pull request #357 from mozilla/dependabot/pip/lxml-4.6.5", "files_name": ["70e127c446d3a8fffb13433d25688bd0e08ca027 - Mon Feb 7 15:19:22 2022 -0700 : Merge pull request #359 from mozilla/dependabot/pip/pytest-7.0.0", "5c05a7362c4c9f9f87161ce93edbb2354de2406f - Mon Feb 7 15:19:56 2022 -0700 : Merge pull request #358 from mozilla/dependabot/pip/aioresponses-0.7.3", "7749e7de856064a7a652431cb8b016e14aec9982 - Mon Feb 7 15:33:56 2022 -0700 : Expand unit tests", "tests/test_views.py"]}, {"commit_id": "0d6651666534d313d143604ac914ec8157570963", "commit_date": "Mon Feb 7 15:43:58 2022 -0700", "commit_message": "Fix lint error", "files_name": ["tests/test_views.py"]}, {"commit_id": "e39d8bec2df582ba525bb2e2f33c3ebc584d7ff8", "commit_date": "Mon Feb 7 15:50:01 2022 -0700", "commit_message": "Merge pull request #360 from gbrownmozilla/redirects", "files_name": ["08478fb5269c218753653576e5007dcad1350968 - Mon Feb 7 16:24:18 2022 -0700 : Add CODEOWNERS, remove some broken links", ".github/CODEOWNERS", "pollbot/contribute.yaml"]}, {"commit_id": "37018db534abb68262fcb589a8d2fa7ba1f65319", "commit_date": "Tue Feb 8 11:39:20 2022 -0700", "commit_message": "Merge pull request #361 from gbrownmozilla/cleanup", "files_name": ["c5fdaca995e329186ab47c03dbf90d6d761147d8 - Tue Feb 8 11:47:25 2022 -0700 : Bump 1.4.6", "CHANGELOG.rst", "setup.py"]}, {"commit_id": "7d4cef0f4c79d4d94e1413687e78588f9467c67f", "commit_date": "Wed Feb 16 15:20:22 2022 -0700", "commit_message": "update circleci image", "files_name": [".circleci/config.yml"]}, {"commit_id": "4f74fd1889820ba836be3ab09b5d6ad133656358", "commit_date": "Wed Feb 16 15:41:20 2022 -0700", "commit_message": "Merge pull request #363 from gbrownmozilla/circleci-image", "files_name": ["a5e6a8079fa82c4fe21f4f429e29de8de11180e6 - Sat Feb 26 19:05:37 2022 -0500 : Fix Thunderbird security advisories for patch level releases. #364", "pollbot/tasks/bedrock.py"]}, {"commit_id": "45c46280a6455ae96ebadae046d9b266f7500276", "commit_date": "Sat Feb 26 19:17:33 2022 -0500", "commit_message": "line too long fix", "files_name": ["pollbot/tasks/bedrock.py"]}, {"commit_id": "3f6b1311c882c75338aa70f7afb029f8f471fa68", "commit_date": "Tue Mar 1 09:05:33 2022 -0700", "commit_message": "Merge pull request #365 from jfx2006/tb_security_bugfix", "files_name": ["672cbe75273ea39ee9472b33332f25bdbbe469e1 - Tue Mar 1 11:21:59 2022 -0700 : Bump 1.4.7", "CHANGELOG.rst", "setup.py"]}, {"commit_id": "8b07c2ac06dbc30a8942bd900ea27c983feeeeb4", "commit_date": "Mon Apr 25 19:09:33 2022 +0000", "commit_message": "Bump pytest from 7.0.0 to 7.0.1", "files_name": ["requirements.txt"]}, {"commit_id": "b0888cb3758b501c5009c2458d2ae1df39dd36d8", "commit_date": "Tue Apr 26 09:14:45 2022 -0600", "commit_message": "Merge pull request #366 from mozilla/dependabot/pip/pytest-7.0.1", "files_name": ["9ae2bb7e13f549cc68a3a4e0553496dc30dcd05b - Wed Jul 6 21:27:13 2022 +0000 : Bump lxml from 4.6.5 to 4.9.1", "requirements.txt"]}, {"commit_id": "b403ceaf643fe1dfef1e72d11ea4559865503ea9", "commit_date": "Wed Jul 6 17:22:26 2022 -0600", "commit_message": "Merge pull request #367 from mozilla/dependabot/pip/lxml-4.9.1", "files_name": ["a6110cf82f9e0303369243541024c18911b08a6a - Mon Aug 22 19:07:06 2022 +0000 : Bump flake8 from 4.0.1 to 5.0.4", "requirements.txt"]}, {"commit_id": "93af94726e659956ae3b2cd893651f749646d969", "commit_date": "Mon Aug 22 16:55:43 2022 -0600", "commit_message": "Merge pull request #368 from mozilla/dependabot/pip/flake8-5.0.4", "files_name": ["07d41f7444e4f1d1393e7b14b3a3eb06b513c3bb - Tue Aug 23 15:57:10 2022 -0600 : Use python 3.8, re-pin requirements", ".python-version", "Dockerfile", "requirements.in", "requirements.txt", "setup.cfg", "setup.py"]}, {"commit_id": "f93c39c0d35464eda18ffff84565794fb48cc0ab", "commit_date": "Tue Aug 23 15:59:45 2022 -0600", "commit_message": "Merge pull request #369 from gbrownmozilla/upgrade-python", "files_name": ["1271a6025034bbf2c56da55ef70dd38d1c1447e1 - Tue Aug 23 16:59:17 2022 -0600 : Upgrade pytest-aiohttp to 1.0.4", "pollbot/app.py", "requirements.in", "requirements.txt", "tests/test_cors.py", "tests/test_views.py"]}, {"commit_id": "b3d97da93dec968aa239888326f8a71b22b055ba", "commit_date": "Tue Aug 23 17:01:45 2022 -0600", "commit_message": "Merge pull request #370 from gbrownmozilla/upgrade-pytest", "files_name": ["f0874a5d17d8f3459e3792382f741e234fd5fa06 - Tue Sep 6 12:12:45 2022 -0600 : remove unused import to fix lint error", "tests/test_cors.py"]}, {"commit_id": "9ddcbb97869259a02c3291f15b71431be4d6bc69", "commit_date": "Tue Sep 6 12:24:59 2022 -0600", "commit_message": "Merge pull request #373 from gbrownmozilla/fix-lint", "files_name": ["1698d3d07df1d53d0daf5833e86a943926a8978b - Tue Sep 6 18:40:15 2022 +0000 : Bump pytest from 7.1.2 to 7.1.3", "requirements.txt"]}, {"commit_id": "2e2d3f429b5ae304edae09287cc51ef0f470daef", "commit_date": "Tue Sep 6 12:43:52 2022 -0600", "commit_message": "Merge pull request #372 from mozilla/dependabot/pip/pytest-7.1.3", "files_name": ["19d05bd2aaa7629df0a922fa646614f62c0b45e8 - Tue Sep 6 18:48:45 2022 +0000 : Bump swagger-spec-validator from 2.7.4 to 2.7.6", "requirements.txt"]}, {"commit_id": "415d4e58bce6b620997b26ec801cb891d0e2f51b", "commit_date": "Tue Sep 6 12:51:49 2022 -0600", "commit_message": "Merge pull request #371 from mozilla/dependabot/pip/swagger-spec-validator-2.7.6", "files_name": ["105be4c96ab7eb67edbe78ba2b7473ee0bb7f607 - Mon Sep 12 19:06:34 2022 +0000 : Bump zest-releaser from 6.22.2 to 7.0.0", "requirements.txt"]}, {"commit_id": "ceab0839b1de99f04183e5346bae5231fe48c5a5", "commit_date": "Mon Sep 12 16:34:58 2022 -0600", "commit_message": "Merge pull request #374 from mozilla/dependabot/pip/zest-releaser-7.0.0", "files_name": ["ceb5f6038b552a366387896329831aa022996500 - Mon Sep 26 19:05:48 2022 +0000 : Bump aiohttp from 3.8.1 to 3.8.3", "requirements.txt"]}, {"commit_id": "ce04d42a4d203eba2fe82fcfcaf224e583544182", "commit_date": "Thu Sep 29 20:56:20 2022 -1000", "commit_message": "Merge pull request #375 from mozilla/dependabot/pip/aiohttp-3.8.3", "files_name": ["1c0d2a175ba930abbddb6f9d9ceb46ab800d077b - Mon Oct 24 19:06:17 2022 +0000 : Bump swagger-spec-validator from 2.7.6 to 3.0.2", "requirements.txt"]}, {"commit_id": "8bc0b735bc02f0a931234497be36025d11f32e2d", "commit_date": "Mon Oct 24 14:11:50 2022 -0600", "commit_message": "Merge pull request #376 from mozilla/dependabot/pip/swagger-spec-validator-3.0.2", "files_name": ["528efbcc721846f5ec7594d0cc7013316fa08c7e - Mon Oct 31 19:05:44 2022 +0000 : Bump pytest from 7.1.3 to 7.2.0", "requirements.txt"]}, {"commit_id": "8244cbf48927bc4c6d2c9ff9fb06033892dd478c", "commit_date": "Mon Oct 31 13:13:09 2022 -0600", "commit_message": "Merge pull request #377 from mozilla/dependabot/pip/pytest-7.2.0", "files_name": ["38381809ff34a30db1b334ad4d621240118f0a69 - Mon Nov 7 19:07:22 2022 +0000 : Bump swagger-spec-validator from 3.0.2 to 3.0.3", "requirements.txt"]}, {"commit_id": "4fe4cfd43b11fb78ff71199d68a40d1e11f31915", "commit_date": "Wed Nov 9 10:14:18 2022 -0700", "commit_message": "Merge pull request #378 from mozilla/dependabot/pip/swagger-spec-validator-3.0.3", "files_name": ["52682ab7cf526ca9a84805eb63177d47ec256218 - Mon Dec 12 19:01:57 2022 +0000 : Bump zest-releaser from 7.0.0 to 7.2.0", "requirements.txt"]}, {"commit_id": "1bb0367bd4858a717a8785774032f57fa3eb2238", "commit_date": "Tue Dec 13 15:48:34 2022 -0700", "commit_message": "Merge pull request #382 from mozilla/dependabot/pip/zest-releaser-7.2.0", "files_name": ["baa7d5d7d73d3c25277df79c6a21d58c5e815c0a - Tue Dec 13 22:49:59 2022 +0000 : Bump cryptography from 37.0.4 to 38.0.3", "requirements.txt"]}, {"commit_id": "c942947f07d5f420a31d5f9f218ba260f8a0b326", "commit_date": "Tue Dec 13 22:51:30 2022 +0000", "commit_message": "Bump certifi from 2022.6.15 to 2022.12.7", "files_name": ["requirements.txt"]}, {"commit_id": "3c1119b8e6c8a27b403e7b7d20b10009586e7281", "commit_date": "Tue Dec 13 15:55:17 2022 -0700", "commit_message": "Merge pull request #380 from mozilla/dependabot/pip/certifi-2022.12.7", "files_name": ["4d125f65206308d9ec5bff6889f58c78370a4f58 - Wed Dec 14 09:35:16 2022 -0700 : Merge pull request #383 from mozilla/dependabot/pip/cryptography-38.0.3", "d03b19f2b23fa97fdfc85fd874f91f971b35203a - Thu Dec 15 14:07:35 2022 -0700 : Bump 1.4.8", "CHANGELOG.rst", "setup.py"]}, {"commit_id": "57d4f4d19c05034ac3cdbe07a30ff2d58c20b8b1", "commit_date": "Mon Dec 19 19:01:54 2022 +0000", "commit_message": "Bump aioresponses from 0.7.3 to 0.7.4", "files_name": ["requirements.txt"]}, {"commit_id": "92be52c56ab59aedc826ac9a8c5f749e1ac3482f", "commit_date": "Mon Dec 19 14:50:59 2022 -0700", "commit_message": "Merge pull request #384 from mozilla/dependabot/pip/aioresponses-0.7.4", "files_name": ["9c0605af0829f382a959b77c87ccb12d66c47c32 - Tue Dec 27 17:12:39 2022 +0000 : Bump setuptools from 65.2.0 to 65.5.1", "requirements.txt"]}, {"commit_id": "920df2ddf36b1c14de60994c539a7f1b95e9a714", "commit_date": "Thu Dec 29 09:08:56 2022 -0700", "commit_message": "Merge pull request #385 from mozilla/dependabot/pip/setuptools-65.5.1", "files_name": ["40d0ba57b0e19d31f142ba3411e22498008045c9 - Mon Jan 2 19:01:37 2023 +0000 : Bump mock from 4.0.3 to 5.0.0", "requirements.txt"]}, {"commit_id": "acc6a31d33f712e8d1208bfd37aad5e962808778", "commit_date": "Mon Jan 2 19:56:04 2023 -0700", "commit_message": "Merge pull request #386 from mozilla/dependabot/pip/mock-5.0.0", "files_name": ["50535721b6c9765464a6ef01058ae30276dbb325 - Fri Feb 10 14:07:46 2023 -0700 : re-pin requirements"]}], "parents": [{"commit_id_before": "78539afa363b200ef004f40531665826f234eab3", "url_before": "https://api.github.com/repos/mozilla/PollBot/commits/78539afa363b200ef004f40531665826f234eab3", "html_url_before": "https://github.com/mozilla/PollBot/commit/78539afa363b200ef004f40531665826f234eab3"}], "details": [{"raw_url": "https://github.com/mozilla/PollBot/raw/6db74a4fcbff258c7cdf51a6ff0724fc10c485e5/pollbot%2Fmiddlewares.py", "code": "import logging\nfrom aiohttp import web\nimport os\n\nlogger = logging.getLogger(__package__)\n\n\ndef setup_middlewares(app):\n    error_middleware = error_pages({404: handle_404,\n                                    500: handle_500})\n    app.middlewares.append(error_middleware)\n    app.middlewares.append(cache_control_middleware)\n\n\n# Cache-Control middleware\nCACHE_MAX_AGE = int(os.getenv(\"CACHE_MAX_AGE\", \"30\"))\nNO_CACHE_ENDPOINTS = ['/v1/', '/v1/__version__', '/v1/__heartbeat__', '/v1/__lbheartbeat__']\n\n\nasync def cache_control_middleware(app, handler):\n    async def middleware_handler(request):\n        response = await handler(request)\n        cache_control_value = \"public; max-age={}\".format(CACHE_MAX_AGE)\n        if request.path in NO_CACHE_ENDPOINTS or CACHE_MAX_AGE <= 0:\n            cache_control_value = \"no-cache\"\n        response.headers.setdefault(\"Cache-Control\", cache_control_value)\n        return response\n    return middleware_handler\n\n\n# Error page middlewares\ndef error_pages(overrides):\n    async def middleware(app, handler):\n        async def middleware_handler(request):\n            try:\n                response = await handler(request)\n                override = overrides.get(response.status)\n                if override is None:\n                    return response\n                else:\n                    return await override(request, response)\n            except web.HTTPException as ex:\n                override = overrides.get(ex.status)\n                if override is None:\n                    return await handle_any(request, ex)\n                else:\n                    return await override(request, ex)\n            except Exception as ex:\n                return await handle_500(request, error=ex)\n        return middleware_handler\n    return middleware\n\n\nasync def handle_any(request, response):\n    return web.json_response({\n        \"status\": response.status,\n        \"message\": response.reason\n    }, status=response.status)\n\n\nasync def handle_404(request, response):\n    if 'json' not in response.headers['Content-Type']:\n        if request.path.endswith('/'):\n            return web.HTTPFound('/' + request.path.strip('/'))\n        return web.json_response({\n            \"status\": 404,\n            \"message\": \"Page '{}' not found\".format(request.path)\n        }, status=404)\n    return response\n\n\nasync def handle_500(request, response=None, error=None):\n    logger.exception(error)\n    return web.json_response({\n            \"status\": 503,\n            \"message\": \"Service currently unavailable\"\n        }, status=503)\n", "code_before": "import logging\nfrom aiohttp import web\nimport os\n\nlogger = logging.getLogger(__package__)\n\n\ndef setup_middlewares(app):\n    error_middleware = error_pages({404: handle_404,\n                                    500: handle_500})\n    app.middlewares.append(error_middleware)\n    app.middlewares.append(cache_control_middleware)\n\n\n# Cache-Control middleware\nCACHE_MAX_AGE = int(os.getenv(\"CACHE_MAX_AGE\", \"30\"))\nNO_CACHE_ENDPOINTS = ['/v1/', '/v1/__version__', '/v1/__heartbeat__', '/v1/__lbheartbeat__']\n\n\nasync def cache_control_middleware(app, handler):\n    async def middleware_handler(request):\n        response = await handler(request)\n        cache_control_value = \"public; max-age={}\".format(CACHE_MAX_AGE)\n        if request.path in NO_CACHE_ENDPOINTS or CACHE_MAX_AGE <= 0:\n            cache_control_value = \"no-cache\"\n        response.headers.setdefault(\"Cache-Control\", cache_control_value)\n        return response\n    return middleware_handler\n\n\n# Error page middlewares\ndef error_pages(overrides):\n    async def middleware(app, handler):\n        async def middleware_handler(request):\n            try:\n                response = await handler(request)\n                override = overrides.get(response.status)\n                if override is None:\n                    return response\n                else:\n                    return await override(request, response)\n            except web.HTTPException as ex:\n                override = overrides.get(ex.status)\n                if override is None:\n                    return await handle_any(request, ex)\n                else:\n                    return await override(request, ex)\n            except Exception as ex:\n                return await handle_500(request, error=ex)\n        return middleware_handler\n    return middleware\n\n\nasync def handle_any(request, response):\n    return web.json_response({\n        \"status\": response.status,\n        \"message\": response.reason\n    }, status=response.status)\n\n\nasync def handle_404(request, response):\n    if 'json' not in response.headers['Content-Type']:\n        if request.path.endswith('/'):\n            return web.HTTPFound(request.path.rstrip('/'))\n        return web.json_response({\n            \"status\": 404,\n            \"message\": \"Page '{}' not found\".format(request.path)\n        }, status=404)\n    return response\n\n\nasync def handle_500(request, response=None, error=None):\n    logger.exception(error)\n    return web.json_response({\n            \"status\": 503,\n            \"message\": \"Service currently unavailable\"\n        }, status=503)\n", "patch": "@@ -61,7 +61,7 @@ async def handle_any(request, response):\n async def handle_404(request, response):\n     if 'json' not in response.headers['Content-Type']:\n         if request.path.endswith('/'):\n-            return web.HTTPFound(request.path.rstrip('/'))\n+            return web.HTTPFound('/' + request.path.strip('/'))\n         return web.json_response({\n             \"status\": 404,\n             \"message\": \"Page '{}' not found\".format(request.path)", "file_path": "files/2021_3/715", "file_language": "py", "file_name": "pollbot/middlewares.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def setup_middlewares(app):\n    error_middleware = error_pages({404: handle_404,\n                                    500: handle_500})\n    app.middlewares.append(error_middleware)\n    app.middlewares.append(cache_control_middleware)", "target": 0}, {"function": "async def cache_control_middleware(app, handler):\n    async def middleware_handler(request):\n        response = await handler(request)\n        cache_control_value = \"public; max-age={}\".format(CACHE_MAX_AGE)\n        if request.path in NO_CACHE_ENDPOINTS or CACHE_MAX_AGE <= 0:\n            cache_control_value = \"no-cache\"\n        response.headers.setdefault(\"Cache-Control\", cache_control_value)\n        return response\n    return middleware_handler", "target": 0}, {"function": "def error_pages(overrides):\n    async def middleware(app, handler):\n        async def middleware_handler(request):\n            try:\n                response = await handler(request)\n                override = overrides.get(response.status)\n                if override is None:\n                    return response\n                else:\n                    return await override(request, response)\n            except web.HTTPException as ex:\n                override = overrides.get(ex.status)\n                if override is None:\n                    return await handle_any(request, ex)\n                else:\n                    return await override(request, ex)\n            except Exception as ex:\n                return await handle_500(request, error=ex)\n        return middleware_handler\n    return middleware", "target": 0}, {"function": "async def handle_any(request, response):\n    return web.json_response({\n        \"status\": response.status,\n        \"message\": response.reason\n    }, status=response.status)", "target": 0}, {"function": "async def handle_404(request, response):\n    if 'json' not in response.headers['Content-Type']:\n        if request.path.endswith('/'):\n            return web.HTTPFound(request.path.rstrip('/'))\n        return web.json_response({\n            \"status\": 404,\n            \"message\": \"Page '{}' not found\".format(request.path)\n        }, status=404)\n    return response", "target": 0}, {"function": "async def handle_500(request, response=None, error=None):\n    logger.exception(error)\n    return web.json_response({\n            \"status\": 503,\n            \"message\": \"Service currently unavailable\"\n        }, status=503)", "target": 0}], "function_after": [{"function": "def setup_middlewares(app):\n    error_middleware = error_pages({404: handle_404,\n                                    500: handle_500})\n    app.middlewares.append(error_middleware)\n    app.middlewares.append(cache_control_middleware)", "target": 0}, {"function": "async def cache_control_middleware(app, handler):\n    async def middleware_handler(request):\n        response = await handler(request)\n        cache_control_value = \"public; max-age={}\".format(CACHE_MAX_AGE)\n        if request.path in NO_CACHE_ENDPOINTS or CACHE_MAX_AGE <= 0:\n            cache_control_value = \"no-cache\"\n        response.headers.setdefault(\"Cache-Control\", cache_control_value)\n        return response\n    return middleware_handler", "target": 0}, {"function": "def error_pages(overrides):\n    async def middleware(app, handler):\n        async def middleware_handler(request):\n            try:\n                response = await handler(request)\n                override = overrides.get(response.status)\n                if override is None:\n                    return response\n                else:\n                    return await override(request, response)\n            except web.HTTPException as ex:\n                override = overrides.get(ex.status)\n                if override is None:\n                    return await handle_any(request, ex)\n                else:\n                    return await override(request, ex)\n            except Exception as ex:\n                return await handle_500(request, error=ex)\n        return middleware_handler\n    return middleware", "target": 0}, {"function": "async def handle_any(request, response):\n    return web.json_response({\n        \"status\": response.status,\n        \"message\": response.reason\n    }, status=response.status)", "target": 0}, {"function": "async def handle_404(request, response):\n    if 'json' not in response.headers['Content-Type']:\n        if request.path.endswith('/'):\n            return web.HTTPFound('/' + request.path.strip('/'))\n        return web.json_response({\n            \"status\": 404,\n            \"message\": \"Page '{}' not found\".format(request.path)\n        }, status=404)\n    return response", "target": 0}, {"function": "async def handle_500(request, response=None, error=None):\n    logger.exception(error)\n    return web.json_response({\n            \"status\": 503,\n            \"message\": \"Service currently unavailable\"\n        }, status=503)", "target": 0}]}, {"raw_url": "https://github.com/mozilla/PollBot/raw/6db74a4fcbff258c7cdf51a6ff0724fc10c485e5/tests%2Ftest_views.py", "code": "import json\nimport os.path\n\nfrom aiohttp import web, ClientError\nimport mock\nimport pytest\nimport ruamel.yaml as yaml\n\nfrom pollbot import __version__ as pollbot_version, HTTP_API_VERSION, PRODUCTS\nfrom pollbot.app import get_app\nfrom pollbot.middlewares import NO_CACHE_ENDPOINTS\nfrom pollbot.exceptions import TaskError\nfrom pollbot.tasks.buildhub import get_build_ids_for_version\nfrom pollbot.views.release import status_response\nfrom pollbot.utils import Status\n\nHERE = os.path.dirname(__file__)\n\n\n@pytest.fixture\ndef cli(loop, test_client):\n    async def error403(request):\n        raise web.HTTPForbidden()\n\n    async def error404(request):\n        return web.HTTPNotFound()\n\n    async def error(request):\n        raise ValueError()\n\n    app = get_app(loop=loop)\n    app.router.add_get('/error', error)\n    app.router.add_get('/error-403', error403)\n    app.router.add_get('/error-404', error404)\n    return loop.run_until_complete(test_client(app))\n\n\nasync def check_response(cli, url, *, status=200, body=None, method=\"get\", **kwargs):\n    resp = await getattr(cli, method)(url, **kwargs)\n    assert resp.status == status\n    text = json.dumps(body)\n    text = text.replace('http://localhost/', '{}://{}:{}/'.format(\n        resp.url.scheme, resp.url.host, resp.url.port))\n    if body is not None:\n        assert await resp.json() == json.loads(text)\n    return resp\n\n\nasync def test_home_redirects_to_v1(cli):\n    resp = await check_response(cli, \"/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_v1_redirects_to_v1_slash(cli):\n    resp = await check_response(cli, \"/v1\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_redirects_trailing_slashes(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/firefox/54.0\"\n\n\nasync def test_redirects_strip_leading_slashes(cli):\n    resp = await check_response(cli, \"//page/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/page\"\n\n\nasync def check_yaml_resource(cli, url, filename, **kwargs):\n    with open(os.path.join(HERE, \"..\", \"pollbot\", filename)) as stream:\n        content = yaml.safe_load(stream)\n    resp = await cli.get(url, headers={\"Host\": \"127.0.0.1\"})\n    content.update(**kwargs)\n    assert await resp.json() == content\n\n\nasync def test_oas_spec(cli):\n    await check_yaml_resource(cli, \"/v1/__api__\", \"api.yaml\", host=\"127.0.0.1\")\n\n\nasync def test_contribute_redirect(cli):\n    resp = await check_response(cli, \"/contribute.json\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/contribute.json\"\n\n\nasync def test_contribute_json(cli):\n    await check_yaml_resource(cli, \"/v1/contribute.json\", \"contribute.yaml\")\n\n\nasync def test_home_body(cli):\n    await check_response(cli, \"/v1/\", body={\n        \"project_name\": \"pollbot\",\n        \"project_version\": pollbot_version,\n        \"url\": \"https://github.com/mozilla/PollBot\",\n        \"http_api_version\": HTTP_API_VERSION,\n        \"docs\": \"http://127.0.0.1/v1/api/doc/\",\n        \"products\": PRODUCTS\n    }, headers={\"Host\": \"127.0.0.1\"})\n\n\nasync def test_status_response_handle_task_errors(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_handle_task_errors_with_links(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message', url='http://www.perdu.com/')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n        \"link\": \"http://www.perdu.com/\"\n    }\n\n\nasync def test_status_response_handle_client_errors(cli):\n    async def error_task(product, version):\n        raise ClientError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_validates_product_name(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"invalid-product\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\",\n    }\n\n\nasync def test_status_response_validates_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"invalid-version\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\",\n    }\n\n\nasync def test_status_response_validates_devedition_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"devedition\", \"version\": \"58.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number for devedition: 58.0\",\n    }\n\n\nasync def test_get_releases_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_get_releases_response_validates_version(cli):\n    await check_response(cli, \"/v1/firefox/invalid-version\", body={\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\"\n    }, status=404)\n\n\nasync def test_403_errors_are_json_responses(cli):\n    await check_response(cli, \"/error-403\", body={\n        \"status\": 403,\n        \"message\": \"Forbidden\"\n    }, status=403)\n\n\nasync def test_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/not-found\", body={\n        \"status\": 404,\n        \"message\": \"Page '/not-found' not found\"\n    }, status=404)\n\n\nasync def test_handle_views_that_return_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/error-404\", body={\n        \"status\": 404,\n        \"message\": \"Page '/error-404' not found\"\n    }, status=404)\n\n\nasync def test_500_pages_are_json_responses(cli):\n    await check_response(cli, \"/error\", body={\n        \"status\": 503,\n        \"message\": \"Service currently unavailable\"\n    }, status=503)\n\n\nasync def test_get_checks_for_nightly(cli):\n    await check_response(cli, \"/v1/firefox/57.0a1\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0a1\",\n        \"channel\": \"nightly\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_beta(cli):\n    await check_response(cli, \"/v1/firefox/56.0b6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"beta\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n\n        ]\n    })\n\n\nasync def test_get_checks_for_devedition(cli):\n    await check_response(cli, \"/v1/devedition/56.0b6\", body={\n        \"product\": \"devedition\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"aurora\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/archive\",\n             \"title\": \"Archive Release\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_candidates(cli):\n    await check_response(cli, \"/v1/firefox/57.0rc6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0rc6\",\n        \"channel\": \"candidate\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {'title': 'Partner repacks', \"actionable\": True,\n             'url': 'http://localhost/v1/firefox/57.0rc6/archive/partner-repacks'},\n        ]\n    })\n\n\nasync def test_get_checks_for_release(cli):\n    await check_response(cli, \"/v1/firefox/54.0\", body={\n        \"product\": \"firefox\",\n        \"version\": \"54.0\",\n        \"channel\": \"release\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {'title': 'Telemetry Main Summary Uptake (24h latency)', \"actionable\": False,\n             'url': 'http://localhost/v1/firefox/54.0/telemetry/main-summary-uptake'},\n        ]\n    })\n\n\nasync def test_get_checks_for_esr(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr\", body={\n        \"product\": \"firefox\",\n        \"version\": \"52.3.0esr\",\n        \"channel\": \"esr\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/56.0\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\n# These are currently functional tests.\n\nasync def test_nightly_archive(cli):\n    resp = await check_response(cli, \"/v1/firefox/58.0a1/archive\")\n    body = await resp.json()\n    assert 'firefox/nightly/latest-mozilla-central-l10n' in body['message']\n    assert body['link'] == (\"https://archive.mozilla.org/pub/firefox/nightly/\"\n                            \"latest-mozilla-central-l10n/\")\n    assert body['status'] in (Status.EXISTS.value, Status.INCOMPLETE.value, Status.MISSING.value)\n\n\nasync def test_release_archive(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/54.0/ \"\n        \"and all 94 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/54.0/\"\n    })\n\n\nasync def test_candidate_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_archive_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/56.0b10\"\n        \"/ and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/56.0b10/\"\n    })\n\n\nasync def test_devedition_archive(cli):\n    await check_response(cli, \"/v1/devedition/59.0b5/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/devedition/releases\"\n        \"/59.0b5/ and all 97 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/devedition/releases/59.0b5/\"\n    })\n\n\nasync def test_esr_archive(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/\"\n        \"52.3.0esr/ and all 92 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/52.3.0esr/\"\n    })\n\n\nasync def test_release_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/54.0-candidates/build3/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/54.0-candidates/build3/\"\n    })\n\n\nasync def test_candidate_partner_repacks_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0b10-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0b10-candidates/build1/\"\n    })\n\n\nasync def test_release_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-release\"\n\n\nasync def test_release_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20170608175746, 20170608105825\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=54.0&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1rc2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub_build(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1build2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_devedition_buildhub(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20180108140638\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=58.0b15&products[0]=devedition&channel[0]=aurora\")\n\n\nasync def test_release_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/57.0.2/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 57.0.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/57.0.2/releasenotes/\"\n    })\n\n\nasync def test_devedition_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 58.0beta.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/58.0beta/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_esr_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/52.5.2esr/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 52.5.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/52.5.2/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_security_advisories(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/security-advisories\")\n    body = await resp.json()\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Security advisories for release were updated up to version\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/security/known-vulnerabilities/firefox/\"\n\n\nasync def test_release_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/firefox/all/\"\n\n\nasync def test_devedition_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\n# FIXME(willkg): This fails because mozilla.org redid their /firefox/all/ page.\n# See https://github.com/mozilla/PollBot/issues/247\n@pytest.mark.xfail\nasync def test_release_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for RELEASE redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/firefox/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_devedition_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for DEVEDITION redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_release_product_details(cli):\n    await check_response(cli, \"/v1/firefox/54.0/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 54.0\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_devedition_product_details(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 58.0b15\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_beta_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/firefox/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_devedition_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/devedition/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_release_product_details_devedition_and_beta_versions_matches(cli):\n    url = \"/v1/firefox/54.0/product-details/devedition-beta-versions-matches\"\n    await check_response(cli, url, body={\n        \"status\": Status.MISSING.value,\n        \"message\": \"No devedition and beta check for 'release' releases\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox_versions.json\"\n    })\n\n\nasync def test_esr_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/52.3.0esr/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/esr52\"\n\n\nasync def test_beta_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-beta\"\n\n\nasync def test_devedition_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/devedition/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated for Devedition\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/devedition\"\n\n\nasync def test_nightly_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/57.0a1/balrog-rules\")\n    body = await resp.json()\n    assert \"Balrog rule is configured\" in body[\"message\"]\n    assert body[\"status\"] in (Status.EXISTS.value, Status.MISSING.value, Status.INCOMPLETE.value)\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-nightly\"\n\n\nasync def test_firefox_releases_list(cli):\n    resp = await check_response(cli, \"/v1/firefox\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n\n\nasync def test_devedition_releases_list(cli):\n    resp = await check_response(cli, \"/v1/devedition\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n    assert all(['rc' not in version for version in body[\"releases\"]])\n\n\n# Utilities\nasync def test_lbheartbeat(cli):\n    await check_response(cli, \"/v1/__lbheartbeat__\",\n                         body={\n                             \"status\": \"running\"\n                         })\n\n\nasync def test_heartbeat(cli):\n    await check_response(cli, \"/v1/__heartbeat__\",\n                         status=503,\n                         body={\n                             \"archive\": True,\n                             \"balrog\": True,\n                             \"bedrock\": True,\n                             \"bouncer\": True,\n                             \"buildhub\": True,\n                             \"product-details\": True,\n                             \"telemetry\": False,\n                             \"thunderbird_net\": True,\n                         })\n\n\nasync def test_version_view_return_404_if_missing_file(cli):\n    with mock.patch(\"builtins.open\", side_effect=IOError):\n        await check_response(cli, \"/v1/__version__\",\n                             status=404,\n                             body={\n                                 \"status\": 404,\n                                 \"message\": \"Page '/v1/__version__' not found\"\n                             })\n\n\nasync def test_version_view_return_200(cli):\n    with open(\"version.json\") as fd:\n        await check_response(cli, \"/v1/__version__\",\n                             body=json.load(fd))\n\n\nasync def test_ongoing_versions_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/ongoing-versions\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_ongoing_versions_view_firefox(cli):\n    resp = await check_response(cli, \"/v1/firefox/ongoing-versions\")\n    body = await resp.json()\n    assert \"esr\" in body\n    assert \"release\" in body\n    assert \"beta\" in body\n    assert \"nightly\" in body\n    assert \"devedition\" not in body\n\n\nasync def test_ongoing_versions_view_devedition(cli):\n    resp = await check_response(cli, \"/v1/devedition/ongoing-versions\")\n    body = await resp.json()\n    assert \"devedition\" in body\n\n\n@pytest.mark.parametrize(\"endpoint\", NO_CACHE_ENDPOINTS)\nasync def test_endpoint_have_got_cache_control_headers(cli, endpoint):\n    resp = await cli.get(endpoint)\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"no-cache\"\n\n\nasync def test_product_endpoint_have_got_cache_control_headers(cli):\n    resp = await cli.get(\"/v1/firefox/54.0\")\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"public; max-age=30\"\n\n\nasync def test_cache_control_header_max_age_can_be_parametrized(cli):\n    with mock.patch(\"pollbot.middlewares.CACHE_MAX_AGE\", 10):\n        resp = await cli.get(\"/v1/firefox/54.0\")\n        assert \"Cache-Control\" in resp.headers\n        assert resp.headers[\"Cache-Control\"] == \"public; max-age=10\"\n\n\nasync def test_get_buildid_for_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0b5\")\n    assert build_ids == ['20171002181526']\n\n\nasync def test_get_buildid_for_nightly_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0a1\", size=100)\n    assert build_ids == [\n        '20170921100141', '20170920220431', '20170920100426', '20170919220202', '20170919100405',\n        '20170918220054', '20170918100059', '20170917220255', '20170917100334', '20170916220246',\n        '20170916100147', '20170915220136', '20170915100121', '20170914220209', '20170914100122',\n        '20170913220121', '20170913100125', '20170912220343', '20170912100139', '20170912013600',\n        '20170911100210', '20170910220126', '20170910100150', '20170909220406', '20170909100226',\n        '20170908220146', '20170908100218', '20170907220212', '20170907100318', '20170906220306',\n        '20170906100107', '20170905220108', '20170905100117', '20170904220027', '20170904100131',\n        '20170903220032', '20170903100443', '20170902220453', '20170902100317', '20170901220209',\n        '20170901151028', '20170901100309', '20170831220208', '20170831100258', '20170830220349',\n        '20170830100230', '20170829100404', '20170828100127', '20170827100428', '20170826213134',\n        '20170826100418', '20170825100126', '20170824100243', '20170823100553', '20170822142709',\n        '20170822100529', '20170821100350', '20170820100343', '20170819100442', '20170818100226',\n        '20170817100132', '20170816100153', '20170815213904', '20170815183542', '20170815100349',\n        '20170814100258', '20170813183258', '20170813100233', '20170812100345', '20170811100330',\n        '20170810100255', '20170809100326', '20170808114032', '20170808100224', '20170807113452',\n        '20170807100344', '20170806100257', '20170805100334', '20170804193726', '20170804180022',\n        '20170804100354', '20170803134456', '20170803100352', '20170802100302']\n", "code_before": "import json\nimport os.path\n\nfrom aiohttp import web, ClientError\nimport mock\nimport pytest\nimport ruamel.yaml as yaml\n\nfrom pollbot import __version__ as pollbot_version, HTTP_API_VERSION, PRODUCTS\nfrom pollbot.app import get_app\nfrom pollbot.middlewares import NO_CACHE_ENDPOINTS\nfrom pollbot.exceptions import TaskError\nfrom pollbot.tasks.buildhub import get_build_ids_for_version\nfrom pollbot.views.release import status_response\nfrom pollbot.utils import Status\n\nHERE = os.path.dirname(__file__)\n\n\n@pytest.fixture\ndef cli(loop, test_client):\n    async def error403(request):\n        raise web.HTTPForbidden()\n\n    async def error404(request):\n        return web.HTTPNotFound()\n\n    async def error(request):\n        raise ValueError()\n\n    app = get_app(loop=loop)\n    app.router.add_get('/error', error)\n    app.router.add_get('/error-403', error403)\n    app.router.add_get('/error-404', error404)\n    return loop.run_until_complete(test_client(app))\n\n\nasync def check_response(cli, url, *, status=200, body=None, method=\"get\", **kwargs):\n    resp = await getattr(cli, method)(url, **kwargs)\n    assert resp.status == status\n    text = json.dumps(body)\n    text = text.replace('http://localhost/', '{}://{}:{}/'.format(\n        resp.url.scheme, resp.url.host, resp.url.port))\n    if body is not None:\n        assert await resp.json() == json.loads(text)\n    return resp\n\n\nasync def test_home_redirects_to_v1(cli):\n    resp = await check_response(cli, \"/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_v1_redirects_to_v1_slash(cli):\n    resp = await check_response(cli, \"/v1\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_redirects_trailing_slashes(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/firefox/54.0\"\n\n\nasync def check_yaml_resource(cli, url, filename, **kwargs):\n    with open(os.path.join(HERE, \"..\", \"pollbot\", filename)) as stream:\n        content = yaml.safe_load(stream)\n    resp = await cli.get(url, headers={\"Host\": \"127.0.0.1\"})\n    content.update(**kwargs)\n    assert await resp.json() == content\n\n\nasync def test_oas_spec(cli):\n    await check_yaml_resource(cli, \"/v1/__api__\", \"api.yaml\", host=\"127.0.0.1\")\n\n\nasync def test_contribute_redirect(cli):\n    resp = await check_response(cli, \"/contribute.json\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/contribute.json\"\n\n\nasync def test_contribute_json(cli):\n    await check_yaml_resource(cli, \"/v1/contribute.json\", \"contribute.yaml\")\n\n\nasync def test_home_body(cli):\n    await check_response(cli, \"/v1/\", body={\n        \"project_name\": \"pollbot\",\n        \"project_version\": pollbot_version,\n        \"url\": \"https://github.com/mozilla/PollBot\",\n        \"http_api_version\": HTTP_API_VERSION,\n        \"docs\": \"http://127.0.0.1/v1/api/doc/\",\n        \"products\": PRODUCTS\n    }, headers={\"Host\": \"127.0.0.1\"})\n\n\nasync def test_status_response_handle_task_errors(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_handle_task_errors_with_links(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message', url='http://www.perdu.com/')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n        \"link\": \"http://www.perdu.com/\"\n    }\n\n\nasync def test_status_response_handle_client_errors(cli):\n    async def error_task(product, version):\n        raise ClientError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_validates_product_name(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"invalid-product\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\",\n    }\n\n\nasync def test_status_response_validates_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"invalid-version\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\",\n    }\n\n\nasync def test_status_response_validates_devedition_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"devedition\", \"version\": \"58.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number for devedition: 58.0\",\n    }\n\n\nasync def test_get_releases_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_get_releases_response_validates_version(cli):\n    await check_response(cli, \"/v1/firefox/invalid-version\", body={\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\"\n    }, status=404)\n\n\nasync def test_403_errors_are_json_responses(cli):\n    await check_response(cli, \"/error-403\", body={\n        \"status\": 403,\n        \"message\": \"Forbidden\"\n    }, status=403)\n\n\nasync def test_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/not-found\", body={\n        \"status\": 404,\n        \"message\": \"Page '/not-found' not found\"\n    }, status=404)\n\n\nasync def test_handle_views_that_return_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/error-404\", body={\n        \"status\": 404,\n        \"message\": \"Page '/error-404' not found\"\n    }, status=404)\n\n\nasync def test_500_pages_are_json_responses(cli):\n    await check_response(cli, \"/error\", body={\n        \"status\": 503,\n        \"message\": \"Service currently unavailable\"\n    }, status=503)\n\n\nasync def test_get_checks_for_nightly(cli):\n    await check_response(cli, \"/v1/firefox/57.0a1\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0a1\",\n        \"channel\": \"nightly\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_beta(cli):\n    await check_response(cli, \"/v1/firefox/56.0b6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"beta\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n\n        ]\n    })\n\n\nasync def test_get_checks_for_devedition(cli):\n    await check_response(cli, \"/v1/devedition/56.0b6\", body={\n        \"product\": \"devedition\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"aurora\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/archive\",\n             \"title\": \"Archive Release\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_candidates(cli):\n    await check_response(cli, \"/v1/firefox/57.0rc6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0rc6\",\n        \"channel\": \"candidate\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {'title': 'Partner repacks', \"actionable\": True,\n             'url': 'http://localhost/v1/firefox/57.0rc6/archive/partner-repacks'},\n        ]\n    })\n\n\nasync def test_get_checks_for_release(cli):\n    await check_response(cli, \"/v1/firefox/54.0\", body={\n        \"product\": \"firefox\",\n        \"version\": \"54.0\",\n        \"channel\": \"release\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {'title': 'Telemetry Main Summary Uptake (24h latency)', \"actionable\": False,\n             'url': 'http://localhost/v1/firefox/54.0/telemetry/main-summary-uptake'},\n        ]\n    })\n\n\nasync def test_get_checks_for_esr(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr\", body={\n        \"product\": \"firefox\",\n        \"version\": \"52.3.0esr\",\n        \"channel\": \"esr\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/56.0\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\n# These are currently functional tests.\n\nasync def test_nightly_archive(cli):\n    resp = await check_response(cli, \"/v1/firefox/58.0a1/archive\")\n    body = await resp.json()\n    assert 'firefox/nightly/latest-mozilla-central-l10n' in body['message']\n    assert body['link'] == (\"https://archive.mozilla.org/pub/firefox/nightly/\"\n                            \"latest-mozilla-central-l10n/\")\n    assert body['status'] in (Status.EXISTS.value, Status.INCOMPLETE.value, Status.MISSING.value)\n\n\nasync def test_release_archive(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/54.0/ \"\n        \"and all 94 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/54.0/\"\n    })\n\n\nasync def test_candidate_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_archive_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/56.0b10\"\n        \"/ and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/56.0b10/\"\n    })\n\n\nasync def test_devedition_archive(cli):\n    await check_response(cli, \"/v1/devedition/59.0b5/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/devedition/releases\"\n        \"/59.0b5/ and all 97 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/devedition/releases/59.0b5/\"\n    })\n\n\nasync def test_esr_archive(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/\"\n        \"52.3.0esr/ and all 92 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/52.3.0esr/\"\n    })\n\n\nasync def test_release_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/54.0-candidates/build3/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/54.0-candidates/build3/\"\n    })\n\n\nasync def test_candidate_partner_repacks_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0b10-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0b10-candidates/build1/\"\n    })\n\n\nasync def test_release_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-release\"\n\n\nasync def test_release_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20170608175746, 20170608105825\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=54.0&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1rc2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub_build(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1build2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_devedition_buildhub(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20180108140638\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=58.0b15&products[0]=devedition&channel[0]=aurora\")\n\n\nasync def test_release_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/57.0.2/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 57.0.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/57.0.2/releasenotes/\"\n    })\n\n\nasync def test_devedition_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 58.0beta.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/58.0beta/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_esr_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/52.5.2esr/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 52.5.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/52.5.2/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_security_advisories(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/security-advisories\")\n    body = await resp.json()\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Security advisories for release were updated up to version\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/security/known-vulnerabilities/firefox/\"\n\n\nasync def test_release_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/firefox/all/\"\n\n\nasync def test_devedition_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\n# FIXME(willkg): This fails because mozilla.org redid their /firefox/all/ page.\n# See https://github.com/mozilla/PollBot/issues/247\n@pytest.mark.xfail\nasync def test_release_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for RELEASE redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/firefox/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_devedition_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for DEVEDITION redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_release_product_details(cli):\n    await check_response(cli, \"/v1/firefox/54.0/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 54.0\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_devedition_product_details(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 58.0b15\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_beta_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/firefox/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_devedition_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/devedition/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_release_product_details_devedition_and_beta_versions_matches(cli):\n    url = \"/v1/firefox/54.0/product-details/devedition-beta-versions-matches\"\n    await check_response(cli, url, body={\n        \"status\": Status.MISSING.value,\n        \"message\": \"No devedition and beta check for 'release' releases\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox_versions.json\"\n    })\n\n\nasync def test_esr_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/52.3.0esr/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/esr52\"\n\n\nasync def test_beta_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-beta\"\n\n\nasync def test_devedition_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/devedition/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated for Devedition\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/devedition\"\n\n\nasync def test_nightly_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/57.0a1/balrog-rules\")\n    body = await resp.json()\n    assert \"Balrog rule is configured\" in body[\"message\"]\n    assert body[\"status\"] in (Status.EXISTS.value, Status.MISSING.value, Status.INCOMPLETE.value)\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-nightly\"\n\n\nasync def test_firefox_releases_list(cli):\n    resp = await check_response(cli, \"/v1/firefox\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n\n\nasync def test_devedition_releases_list(cli):\n    resp = await check_response(cli, \"/v1/devedition\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n    assert all(['rc' not in version for version in body[\"releases\"]])\n\n\n# Utilities\nasync def test_lbheartbeat(cli):\n    await check_response(cli, \"/v1/__lbheartbeat__\",\n                         body={\n                             \"status\": \"running\"\n                         })\n\n\nasync def test_heartbeat(cli):\n    await check_response(cli, \"/v1/__heartbeat__\",\n                         status=503,\n                         body={\n                             \"archive\": True,\n                             \"balrog\": True,\n                             \"bedrock\": True,\n                             \"bouncer\": True,\n                             \"buildhub\": True,\n                             \"product-details\": True,\n                             \"telemetry\": False,\n                             \"thunderbird_net\": True,\n                         })\n\n\nasync def test_version_view_return_404_if_missing_file(cli):\n    with mock.patch(\"builtins.open\", side_effect=IOError):\n        await check_response(cli, \"/v1/__version__\",\n                             status=404,\n                             body={\n                                 \"status\": 404,\n                                 \"message\": \"Page '/v1/__version__' not found\"\n                             })\n\n\nasync def test_version_view_return_200(cli):\n    with open(\"version.json\") as fd:\n        await check_response(cli, \"/v1/__version__\",\n                             body=json.load(fd))\n\n\nasync def test_ongoing_versions_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/ongoing-versions\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_ongoing_versions_view_firefox(cli):\n    resp = await check_response(cli, \"/v1/firefox/ongoing-versions\")\n    body = await resp.json()\n    assert \"esr\" in body\n    assert \"release\" in body\n    assert \"beta\" in body\n    assert \"nightly\" in body\n    assert \"devedition\" not in body\n\n\nasync def test_ongoing_versions_view_devedition(cli):\n    resp = await check_response(cli, \"/v1/devedition/ongoing-versions\")\n    body = await resp.json()\n    assert \"devedition\" in body\n\n\n@pytest.mark.parametrize(\"endpoint\", NO_CACHE_ENDPOINTS)\nasync def test_endpoint_have_got_cache_control_headers(cli, endpoint):\n    resp = await cli.get(endpoint)\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"no-cache\"\n\n\nasync def test_product_endpoint_have_got_cache_control_headers(cli):\n    resp = await cli.get(\"/v1/firefox/54.0\")\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"public; max-age=30\"\n\n\nasync def test_cache_control_header_max_age_can_be_parametrized(cli):\n    with mock.patch(\"pollbot.middlewares.CACHE_MAX_AGE\", 10):\n        resp = await cli.get(\"/v1/firefox/54.0\")\n        assert \"Cache-Control\" in resp.headers\n        assert resp.headers[\"Cache-Control\"] == \"public; max-age=10\"\n\n\nasync def test_get_buildid_for_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0b5\")\n    assert build_ids == ['20171002181526']\n\n\nasync def test_get_buildid_for_nightly_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0a1\", size=100)\n    assert build_ids == [\n        '20170921100141', '20170920220431', '20170920100426', '20170919220202', '20170919100405',\n        '20170918220054', '20170918100059', '20170917220255', '20170917100334', '20170916220246',\n        '20170916100147', '20170915220136', '20170915100121', '20170914220209', '20170914100122',\n        '20170913220121', '20170913100125', '20170912220343', '20170912100139', '20170912013600',\n        '20170911100210', '20170910220126', '20170910100150', '20170909220406', '20170909100226',\n        '20170908220146', '20170908100218', '20170907220212', '20170907100318', '20170906220306',\n        '20170906100107', '20170905220108', '20170905100117', '20170904220027', '20170904100131',\n        '20170903220032', '20170903100443', '20170902220453', '20170902100317', '20170901220209',\n        '20170901151028', '20170901100309', '20170831220208', '20170831100258', '20170830220349',\n        '20170830100230', '20170829100404', '20170828100127', '20170827100428', '20170826213134',\n        '20170826100418', '20170825100126', '20170824100243', '20170823100553', '20170822142709',\n        '20170822100529', '20170821100350', '20170820100343', '20170819100442', '20170818100226',\n        '20170817100132', '20170816100153', '20170815213904', '20170815183542', '20170815100349',\n        '20170814100258', '20170813183258', '20170813100233', '20170812100345', '20170811100330',\n        '20170810100255', '20170809100326', '20170808114032', '20170808100224', '20170807113452',\n        '20170807100344', '20170806100257', '20170805100334', '20170804193726', '20170804180022',\n        '20170804100354', '20170803134456', '20170803100352', '20170802100302']\n", "patch": "@@ -61,6 +61,11 @@ async def test_redirects_trailing_slashes(cli):\n     assert resp.headers['Location'] == \"/v1/firefox/54.0\"\n \n \n+async def test_redirects_strip_leading_slashes(cli):\n+    resp = await check_response(cli, \"//page/\", status=302, allow_redirects=False)\n+    assert resp.headers['Location'] == \"/page\"\n+\n+\n async def check_yaml_resource(cli, url, filename, **kwargs):\n     with open(os.path.join(HERE, \"..\", \"pollbot\", filename)) as stream:\n         content = yaml.safe_load(stream)", "file_path": "files/2021_3/716", "file_language": "py", "file_name": "tests/test_views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "async def check_response(cli, url, *, status=200, body=None, method=\"get\", **kwargs):\n    resp = await getattr(cli, method)(url, **kwargs)\n    assert resp.status == status\n    text = json.dumps(body)\n    text = text.replace('http://localhost/', '{}://{}:{}/'.format(\n        resp.url.scheme, resp.url.host, resp.url.port))\n    if body is not None:\n        assert await resp.json() == json.loads(text)\n    return resp", "target": 0}, {"function": "async def test_home_redirects_to_v1(cli):\n    resp = await check_response(cli, \"/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"", "target": 0}, {"function": "async def test_v1_redirects_to_v1_slash(cli):\n    resp = await check_response(cli, \"/v1\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"", "target": 0}, {"function": "async def test_redirects_trailing_slashes(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/firefox/54.0\"", "target": 0}, {"function": "async def check_yaml_resource(cli, url, filename, **kwargs):\n    with open(os.path.join(HERE, \"..\", \"pollbot\", filename)) as stream:\n        content = yaml.safe_load(stream)\n    resp = await cli.get(url, headers={\"Host\": \"127.0.0.1\"})\n    content.update(**kwargs)\n    assert await resp.json() == content", "target": 0}, {"function": "async def test_oas_spec(cli):\n    await check_yaml_resource(cli, \"/v1/__api__\", \"api.yaml\", host=\"127.0.0.1\")", "target": 0}, {"function": "async def test_contribute_redirect(cli):\n    resp = await check_response(cli, \"/contribute.json\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/contribute.json\"", "target": 0}, {"function": "async def test_contribute_json(cli):\n    await check_yaml_resource(cli, \"/v1/contribute.json\", \"contribute.yaml\")", "target": 0}, {"function": "async def test_home_body(cli):\n    await check_response(cli, \"/v1/\", body={\n        \"project_name\": \"pollbot\",\n        \"project_version\": pollbot_version,\n        \"url\": \"https://github.com/mozilla/PollBot\",\n        \"http_api_version\": HTTP_API_VERSION,\n        \"docs\": \"http://127.0.0.1/v1/api/doc/\",\n        \"products\": PRODUCTS\n    }, headers={\"Host\": \"127.0.0.1\"})", "target": 0}, {"function": "async def test_status_response_handle_task_errors(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }", "target": 0}, {"function": "async def test_status_response_handle_task_errors_with_links(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message', url='http://www.perdu.com/')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n        \"link\": \"http://www.perdu.com/\"\n    }", "target": 0}, {"function": "async def test_status_response_handle_client_errors(cli):\n    async def error_task(product, version):\n        raise ClientError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }", "target": 0}, {"function": "async def test_status_response_validates_product_name(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"invalid-product\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\",\n    }", "target": 0}, {"function": "async def test_status_response_validates_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"invalid-version\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\",\n    }", "target": 0}, {"function": "async def test_status_response_validates_devedition_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"devedition\", \"version\": \"58.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number for devedition: 58.0\",\n    }", "target": 0}, {"function": "async def test_get_releases_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)", "target": 0}, {"function": "async def test_get_releases_response_validates_version(cli):\n    await check_response(cli, \"/v1/firefox/invalid-version\", body={\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\"\n    }, status=404)", "target": 0}, {"function": "async def test_403_errors_are_json_responses(cli):\n    await check_response(cli, \"/error-403\", body={\n        \"status\": 403,\n        \"message\": \"Forbidden\"\n    }, status=403)", "target": 0}, {"function": "async def test_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/not-found\", body={\n        \"status\": 404,\n        \"message\": \"Page '/not-found' not found\"\n    }, status=404)", "target": 0}, {"function": "async def test_handle_views_that_return_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/error-404\", body={\n        \"status\": 404,\n        \"message\": \"Page '/error-404' not found\"\n    }, status=404)", "target": 0}, {"function": "async def test_500_pages_are_json_responses(cli):\n    await check_response(cli, \"/error\", body={\n        \"status\": 503,\n        \"message\": \"Service currently unavailable\"\n    }, status=503)", "target": 0}, {"function": "async def test_get_checks_for_nightly(cli):\n    await check_response(cli, \"/v1/firefox/57.0a1\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0a1\",\n        \"channel\": \"nightly\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_beta(cli):\n    await check_response(cli, \"/v1/firefox/56.0b6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"beta\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_devedition(cli):\n    await check_response(cli, \"/v1/devedition/56.0b6\", body={\n        \"product\": \"devedition\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"aurora\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/archive\",\n             \"title\": \"Archive Release\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_candidates(cli):\n    await check_response(cli, \"/v1/firefox/57.0rc6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0rc6\",\n        \"channel\": \"candidate\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {'title': 'Partner repacks', \"actionable\": True,\n             'url': 'http://localhost/v1/firefox/57.0rc6/archive/partner-repacks'},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_release(cli):\n    await check_response(cli, \"/v1/firefox/54.0\", body={\n        \"product\": \"firefox\",\n        \"version\": \"54.0\",\n        \"channel\": \"release\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {'title': 'Telemetry Main Summary Uptake (24h latency)', \"actionable\": False,\n             'url': 'http://localhost/v1/firefox/54.0/telemetry/main-summary-uptake'},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_esr(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr\", body={\n        \"product\": \"firefox\",\n        \"version\": \"52.3.0esr\",\n        \"channel\": \"esr\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/56.0\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)", "target": 0}, {"function": "async def test_nightly_archive(cli):\n    resp = await check_response(cli, \"/v1/firefox/58.0a1/archive\")\n    body = await resp.json()\n    assert 'firefox/nightly/latest-mozilla-central-l10n' in body['message']\n    assert body['link'] == (\"https://archive.mozilla.org/pub/firefox/nightly/\"\n                            \"latest-mozilla-central-l10n/\")\n    assert body['status'] in (Status.EXISTS.value, Status.INCOMPLETE.value, Status.MISSING.value)", "target": 0}, {"function": "async def test_release_archive(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/54.0/ \"\n        \"and all 94 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/54.0/\"\n    })", "target": 0}, {"function": "async def test_candidate_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_candidate_archive_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_beta_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/56.0b10\"\n        \"/ and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/56.0b10/\"\n    })", "target": 0}, {"function": "async def test_devedition_archive(cli):\n    await check_response(cli, \"/v1/devedition/59.0b5/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/devedition/releases\"\n        \"/59.0b5/ and all 97 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/devedition/releases/59.0b5/\"\n    })", "target": 0}, {"function": "async def test_esr_archive(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/\"\n        \"52.3.0esr/ and all 92 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/52.3.0esr/\"\n    })", "target": 0}, {"function": "async def test_release_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/54.0-candidates/build3/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/54.0-candidates/build3/\"\n    })", "target": 0}, {"function": "async def test_candidate_partner_repacks_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_candidate_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_beta_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0b10-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0b10-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_release_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-release\"", "target": 0}, {"function": "async def test_release_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20170608175746, 20170608105825\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=54.0&products[0]=firefox&channel[0]=release\")", "target": 0}, {"function": "async def test_candidates_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1rc2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")", "target": 0}, {"function": "async def test_candidates_buildhub_build(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1build2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")", "target": 0}, {"function": "async def test_devedition_buildhub(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20180108140638\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=58.0b15&products[0]=devedition&channel[0]=aurora\")", "target": 0}, {"function": "async def test_release_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/57.0.2/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 57.0.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/57.0.2/releasenotes/\"\n    })", "target": 0}, {"function": "async def test_devedition_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 58.0beta.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/58.0beta/releasenotes/\"\n    })", "target": 0}, {"function": "async def test_release_bedrock_esr_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/52.5.2esr/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 52.5.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/52.5.2/releasenotes/\"\n    })", "target": 0}, {"function": "async def test_release_bedrock_security_advisories(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/security-advisories\")\n    body = await resp.json()\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Security advisories for release were updated up to version\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/security/known-vulnerabilities/firefox/\"", "target": 0}, {"function": "async def test_release_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/firefox/all/\"", "target": 0}, {"function": "async def test_devedition_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)", "target": 0}, {"function": "async def test_devedition_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for DEVEDITION redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)", "target": 0}, {"function": "async def test_release_product_details(cli):\n    await check_response(cli, \"/v1/firefox/54.0/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 54.0\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })", "target": 0}, {"function": "async def test_devedition_product_details(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 58.0b15\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })", "target": 0}, {"function": "async def test_beta_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/firefox/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)", "target": 0}, {"function": "async def test_devedition_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/devedition/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)", "target": 0}, {"function": "async def test_release_product_details_devedition_and_beta_versions_matches(cli):\n    url = \"/v1/firefox/54.0/product-details/devedition-beta-versions-matches\"\n    await check_response(cli, url, body={\n        \"status\": Status.MISSING.value,\n        \"message\": \"No devedition and beta check for 'release' releases\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox_versions.json\"\n    })", "target": 0}, {"function": "async def test_esr_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/52.3.0esr/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/esr52\"", "target": 0}, {"function": "async def test_beta_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-beta\"", "target": 0}, {"function": "async def test_devedition_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/devedition/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated for Devedition\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/devedition\"", "target": 0}, {"function": "async def test_nightly_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/57.0a1/balrog-rules\")\n    body = await resp.json()\n    assert \"Balrog rule is configured\" in body[\"message\"]\n    assert body[\"status\"] in (Status.EXISTS.value, Status.MISSING.value, Status.INCOMPLETE.value)\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-nightly\"", "target": 0}, {"function": "async def test_firefox_releases_list(cli):\n    resp = await check_response(cli, \"/v1/firefox\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])", "target": 0}, {"function": "async def test_devedition_releases_list(cli):\n    resp = await check_response(cli, \"/v1/devedition\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n    assert all(['rc' not in version for version in body[\"releases\"]])", "target": 0}, {"function": "async def test_lbheartbeat(cli):\n    await check_response(cli, \"/v1/__lbheartbeat__\",\n                         body={\n                             \"status\": \"running\"\n                         })", "target": 0}, {"function": "async def test_heartbeat(cli):\n    await check_response(cli, \"/v1/__heartbeat__\",\n                         status=503,\n                         body={\n                             \"archive\": True,\n                             \"balrog\": True,\n                             \"bedrock\": True,\n                             \"bouncer\": True,\n                             \"buildhub\": True,\n                             \"product-details\": True,\n                             \"telemetry\": False,\n                             \"thunderbird_net\": True,\n                         })", "target": 0}, {"function": "async def test_version_view_return_404_if_missing_file(cli):\n    with mock.patch(\"builtins.open\", side_effect=IOError):\n        await check_response(cli, \"/v1/__version__\",\n                             status=404,\n                             body={\n                                 \"status\": 404,\n                                 \"message\": \"Page '/v1/__version__' not found\"\n                             })", "target": 0}, {"function": "async def test_version_view_return_200(cli):\n    with open(\"version.json\") as fd:\n        await check_response(cli, \"/v1/__version__\",\n                             body=json.load(fd))", "target": 0}, {"function": "async def test_ongoing_versions_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/ongoing-versions\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)", "target": 0}, {"function": "async def test_ongoing_versions_view_firefox(cli):\n    resp = await check_response(cli, \"/v1/firefox/ongoing-versions\")\n    body = await resp.json()\n    assert \"esr\" in body\n    assert \"release\" in body\n    assert \"beta\" in body\n    assert \"nightly\" in body\n    assert \"devedition\" not in body", "target": 0}, {"function": "async def test_ongoing_versions_view_devedition(cli):\n    resp = await check_response(cli, \"/v1/devedition/ongoing-versions\")\n    body = await resp.json()\n    assert \"devedition\" in body", "target": 0}, {"function": "async def test_product_endpoint_have_got_cache_control_headers(cli):\n    resp = await cli.get(\"/v1/firefox/54.0\")\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"public; max-age=30\"", "target": 0}, {"function": "async def test_cache_control_header_max_age_can_be_parametrized(cli):\n    with mock.patch(\"pollbot.middlewares.CACHE_MAX_AGE\", 10):\n        resp = await cli.get(\"/v1/firefox/54.0\")\n        assert \"Cache-Control\" in resp.headers\n        assert resp.headers[\"Cache-Control\"] == \"public; max-age=10\"", "target": 0}, {"function": "async def test_get_buildid_for_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0b5\")\n    assert build_ids == ['20171002181526']", "target": 0}, {"function": "async def test_get_buildid_for_nightly_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0a1\", size=100)\n    assert build_ids == [\n        '20170921100141', '20170920220431', '20170920100426', '20170919220202', '20170919100405',\n        '20170918220054', '20170918100059', '20170917220255', '20170917100334', '20170916220246',\n        '20170916100147', '20170915220136', '20170915100121', '20170914220209', '20170914100122',\n        '20170913220121', '20170913100125', '20170912220343', '20170912100139', '20170912013600',\n        '20170911100210', '20170910220126', '20170910100150', '20170909220406', '20170909100226',\n        '20170908220146', '20170908100218', '20170907220212', '20170907100318', '20170906220306',\n        '20170906100107', '20170905220108', '20170905100117', '20170904220027', '20170904100131',\n        '20170903220032', '20170903100443', '20170902220453', '20170902100317', '20170901220209',\n        '20170901151028', '20170901100309', '20170831220208', '20170831100258', '20170830220349',\n        '20170830100230', '20170829100404', '20170828100127', '20170827100428', '20170826213134',\n        '20170826100418', '20170825100126', '20170824100243', '20170823100553', '20170822142709',\n        '20170822100529', '20170821100350', '20170820100343', '20170819100442', '20170818100226',\n        '20170817100132', '20170816100153', '20170815213904', '20170815183542', '20170815100349',\n        '20170814100258', '20170813183258', '20170813100233', '20170812100345', '20170811100330',\n        '20170810100255', '20170809100326', '20170808114032', '20170808100224', '20170807113452',\n        '20170807100344', '20170806100257', '20170805100334', '20170804193726', '20170804180022',\n        '20170804100354', '20170803134456', '20170803100352', '20170802100302']", "target": 0}], "function_after": [{"function": "async def check_response(cli, url, *, status=200, body=None, method=\"get\", **kwargs):\n    resp = await getattr(cli, method)(url, **kwargs)\n    assert resp.status == status\n    text = json.dumps(body)\n    text = text.replace('http://localhost/', '{}://{}:{}/'.format(\n        resp.url.scheme, resp.url.host, resp.url.port))\n    if body is not None:\n        assert await resp.json() == json.loads(text)\n    return resp", "target": 0}, {"function": "async def test_home_redirects_to_v1(cli):\n    resp = await check_response(cli, \"/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"", "target": 0}, {"function": "async def test_v1_redirects_to_v1_slash(cli):\n    resp = await check_response(cli, \"/v1\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"", "target": 0}, {"function": "async def test_redirects_trailing_slashes(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/firefox/54.0\"", "target": 0}, {"function": "async def test_redirects_strip_leading_slashes(cli):\n    resp = await check_response(cli, \"//page/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/page\"", "target": 0}, {"function": "async def check_yaml_resource(cli, url, filename, **kwargs):\n    with open(os.path.join(HERE, \"..\", \"pollbot\", filename)) as stream:\n        content = yaml.safe_load(stream)\n    resp = await cli.get(url, headers={\"Host\": \"127.0.0.1\"})\n    content.update(**kwargs)\n    assert await resp.json() == content", "target": 0}, {"function": "async def test_oas_spec(cli):\n    await check_yaml_resource(cli, \"/v1/__api__\", \"api.yaml\", host=\"127.0.0.1\")", "target": 0}, {"function": "async def test_contribute_redirect(cli):\n    resp = await check_response(cli, \"/contribute.json\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/contribute.json\"", "target": 0}, {"function": "async def test_contribute_json(cli):\n    await check_yaml_resource(cli, \"/v1/contribute.json\", \"contribute.yaml\")", "target": 0}, {"function": "async def test_home_body(cli):\n    await check_response(cli, \"/v1/\", body={\n        \"project_name\": \"pollbot\",\n        \"project_version\": pollbot_version,\n        \"url\": \"https://github.com/mozilla/PollBot\",\n        \"http_api_version\": HTTP_API_VERSION,\n        \"docs\": \"http://127.0.0.1/v1/api/doc/\",\n        \"products\": PRODUCTS\n    }, headers={\"Host\": \"127.0.0.1\"})", "target": 0}, {"function": "async def test_status_response_handle_task_errors(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }", "target": 0}, {"function": "async def test_status_response_handle_task_errors_with_links(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message', url='http://www.perdu.com/')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n        \"link\": \"http://www.perdu.com/\"\n    }", "target": 0}, {"function": "async def test_status_response_handle_client_errors(cli):\n    async def error_task(product, version):\n        raise ClientError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }", "target": 0}, {"function": "async def test_status_response_validates_product_name(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"invalid-product\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\",\n    }", "target": 0}, {"function": "async def test_status_response_validates_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"invalid-version\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\",\n    }", "target": 0}, {"function": "async def test_status_response_validates_devedition_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"devedition\", \"version\": \"58.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number for devedition: 58.0\",\n    }", "target": 0}, {"function": "async def test_get_releases_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)", "target": 0}, {"function": "async def test_get_releases_response_validates_version(cli):\n    await check_response(cli, \"/v1/firefox/invalid-version\", body={\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\"\n    }, status=404)", "target": 0}, {"function": "async def test_403_errors_are_json_responses(cli):\n    await check_response(cli, \"/error-403\", body={\n        \"status\": 403,\n        \"message\": \"Forbidden\"\n    }, status=403)", "target": 0}, {"function": "async def test_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/not-found\", body={\n        \"status\": 404,\n        \"message\": \"Page '/not-found' not found\"\n    }, status=404)", "target": 0}, {"function": "async def test_handle_views_that_return_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/error-404\", body={\n        \"status\": 404,\n        \"message\": \"Page '/error-404' not found\"\n    }, status=404)", "target": 0}, {"function": "async def test_500_pages_are_json_responses(cli):\n    await check_response(cli, \"/error\", body={\n        \"status\": 503,\n        \"message\": \"Service currently unavailable\"\n    }, status=503)", "target": 0}, {"function": "async def test_get_checks_for_nightly(cli):\n    await check_response(cli, \"/v1/firefox/57.0a1\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0a1\",\n        \"channel\": \"nightly\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_beta(cli):\n    await check_response(cli, \"/v1/firefox/56.0b6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"beta\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_devedition(cli):\n    await check_response(cli, \"/v1/devedition/56.0b6\", body={\n        \"product\": \"devedition\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"aurora\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/archive\",\n             \"title\": \"Archive Release\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_candidates(cli):\n    await check_response(cli, \"/v1/firefox/57.0rc6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0rc6\",\n        \"channel\": \"candidate\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {'title': 'Partner repacks', \"actionable\": True,\n             'url': 'http://localhost/v1/firefox/57.0rc6/archive/partner-repacks'},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_release(cli):\n    await check_response(cli, \"/v1/firefox/54.0\", body={\n        \"product\": \"firefox\",\n        \"version\": \"54.0\",\n        \"channel\": \"release\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {'title': 'Telemetry Main Summary Uptake (24h latency)', \"actionable\": False,\n             'url': 'http://localhost/v1/firefox/54.0/telemetry/main-summary-uptake'},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_for_esr(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr\", body={\n        \"product\": \"firefox\",\n        \"version\": \"52.3.0esr\",\n        \"channel\": \"esr\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })", "target": 0}, {"function": "async def test_get_checks_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/56.0\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)", "target": 0}, {"function": "async def test_nightly_archive(cli):\n    resp = await check_response(cli, \"/v1/firefox/58.0a1/archive\")\n    body = await resp.json()\n    assert 'firefox/nightly/latest-mozilla-central-l10n' in body['message']\n    assert body['link'] == (\"https://archive.mozilla.org/pub/firefox/nightly/\"\n                            \"latest-mozilla-central-l10n/\")\n    assert body['status'] in (Status.EXISTS.value, Status.INCOMPLETE.value, Status.MISSING.value)", "target": 0}, {"function": "async def test_release_archive(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/54.0/ \"\n        \"and all 94 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/54.0/\"\n    })", "target": 0}, {"function": "async def test_candidate_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_candidate_archive_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_beta_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/56.0b10\"\n        \"/ and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/56.0b10/\"\n    })", "target": 0}, {"function": "async def test_devedition_archive(cli):\n    await check_response(cli, \"/v1/devedition/59.0b5/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/devedition/releases\"\n        \"/59.0b5/ and all 97 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/devedition/releases/59.0b5/\"\n    })", "target": 0}, {"function": "async def test_esr_archive(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/\"\n        \"52.3.0esr/ and all 92 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/52.3.0esr/\"\n    })", "target": 0}, {"function": "async def test_release_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/54.0-candidates/build3/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/54.0-candidates/build3/\"\n    })", "target": 0}, {"function": "async def test_candidate_partner_repacks_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_candidate_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_beta_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0b10-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0b10-candidates/build1/\"\n    })", "target": 0}, {"function": "async def test_release_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-release\"", "target": 0}, {"function": "async def test_release_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20170608175746, 20170608105825\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=54.0&products[0]=firefox&channel[0]=release\")", "target": 0}, {"function": "async def test_candidates_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1rc2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")", "target": 0}, {"function": "async def test_candidates_buildhub_build(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1build2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")", "target": 0}, {"function": "async def test_devedition_buildhub(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20180108140638\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=58.0b15&products[0]=devedition&channel[0]=aurora\")", "target": 0}, {"function": "async def test_release_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/57.0.2/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 57.0.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/57.0.2/releasenotes/\"\n    })", "target": 0}, {"function": "async def test_devedition_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 58.0beta.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/58.0beta/releasenotes/\"\n    })", "target": 0}, {"function": "async def test_release_bedrock_esr_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/52.5.2esr/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 52.5.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/52.5.2/releasenotes/\"\n    })", "target": 0}, {"function": "async def test_release_bedrock_security_advisories(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/security-advisories\")\n    body = await resp.json()\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Security advisories for release were updated up to version\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/security/known-vulnerabilities/firefox/\"", "target": 0}, {"function": "async def test_release_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/firefox/all/\"", "target": 0}, {"function": "async def test_devedition_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)", "target": 0}, {"function": "async def test_devedition_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for DEVEDITION redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)", "target": 0}, {"function": "async def test_release_product_details(cli):\n    await check_response(cli, \"/v1/firefox/54.0/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 54.0\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })", "target": 0}, {"function": "async def test_devedition_product_details(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 58.0b15\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })", "target": 0}, {"function": "async def test_beta_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/firefox/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)", "target": 0}, {"function": "async def test_devedition_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/devedition/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)", "target": 0}, {"function": "async def test_release_product_details_devedition_and_beta_versions_matches(cli):\n    url = \"/v1/firefox/54.0/product-details/devedition-beta-versions-matches\"\n    await check_response(cli, url, body={\n        \"status\": Status.MISSING.value,\n        \"message\": \"No devedition and beta check for 'release' releases\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox_versions.json\"\n    })", "target": 0}, {"function": "async def test_esr_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/52.3.0esr/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/esr52\"", "target": 0}, {"function": "async def test_beta_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-beta\"", "target": 0}, {"function": "async def test_devedition_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/devedition/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated for Devedition\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/devedition\"", "target": 0}, {"function": "async def test_nightly_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/57.0a1/balrog-rules\")\n    body = await resp.json()\n    assert \"Balrog rule is configured\" in body[\"message\"]\n    assert body[\"status\"] in (Status.EXISTS.value, Status.MISSING.value, Status.INCOMPLETE.value)\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-nightly\"", "target": 0}, {"function": "async def test_firefox_releases_list(cli):\n    resp = await check_response(cli, \"/v1/firefox\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])", "target": 0}, {"function": "async def test_devedition_releases_list(cli):\n    resp = await check_response(cli, \"/v1/devedition\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n    assert all(['rc' not in version for version in body[\"releases\"]])", "target": 0}, {"function": "async def test_lbheartbeat(cli):\n    await check_response(cli, \"/v1/__lbheartbeat__\",\n                         body={\n                             \"status\": \"running\"\n                         })", "target": 0}, {"function": "async def test_heartbeat(cli):\n    await check_response(cli, \"/v1/__heartbeat__\",\n                         status=503,\n                         body={\n                             \"archive\": True,\n                             \"balrog\": True,\n                             \"bedrock\": True,\n                             \"bouncer\": True,\n                             \"buildhub\": True,\n                             \"product-details\": True,\n                             \"telemetry\": False,\n                             \"thunderbird_net\": True,\n                         })", "target": 0}, {"function": "async def test_version_view_return_404_if_missing_file(cli):\n    with mock.patch(\"builtins.open\", side_effect=IOError):\n        await check_response(cli, \"/v1/__version__\",\n                             status=404,\n                             body={\n                                 \"status\": 404,\n                                 \"message\": \"Page '/v1/__version__' not found\"\n                             })", "target": 0}, {"function": "async def test_version_view_return_200(cli):\n    with open(\"version.json\") as fd:\n        await check_response(cli, \"/v1/__version__\",\n                             body=json.load(fd))", "target": 0}, {"function": "async def test_ongoing_versions_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/ongoing-versions\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)", "target": 0}, {"function": "async def test_ongoing_versions_view_firefox(cli):\n    resp = await check_response(cli, \"/v1/firefox/ongoing-versions\")\n    body = await resp.json()\n    assert \"esr\" in body\n    assert \"release\" in body\n    assert \"beta\" in body\n    assert \"nightly\" in body\n    assert \"devedition\" not in body", "target": 0}, {"function": "async def test_ongoing_versions_view_devedition(cli):\n    resp = await check_response(cli, \"/v1/devedition/ongoing-versions\")\n    body = await resp.json()\n    assert \"devedition\" in body", "target": 0}, {"function": "async def test_product_endpoint_have_got_cache_control_headers(cli):\n    resp = await cli.get(\"/v1/firefox/54.0\")\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"public; max-age=30\"", "target": 0}, {"function": "async def test_cache_control_header_max_age_can_be_parametrized(cli):\n    with mock.patch(\"pollbot.middlewares.CACHE_MAX_AGE\", 10):\n        resp = await cli.get(\"/v1/firefox/54.0\")\n        assert \"Cache-Control\" in resp.headers\n        assert resp.headers[\"Cache-Control\"] == \"public; max-age=10\"", "target": 0}, {"function": "async def test_get_buildid_for_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0b5\")\n    assert build_ids == ['20171002181526']", "target": 0}, {"function": "async def test_get_buildid_for_nightly_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0a1\", size=100)\n    assert build_ids == [\n        '20170921100141', '20170920220431', '20170920100426', '20170919220202', '20170919100405',\n        '20170918220054', '20170918100059', '20170917220255', '20170917100334', '20170916220246',\n        '20170916100147', '20170915220136', '20170915100121', '20170914220209', '20170914100122',\n        '20170913220121', '20170913100125', '20170912220343', '20170912100139', '20170912013600',\n        '20170911100210', '20170910220126', '20170910100150', '20170909220406', '20170909100226',\n        '20170908220146', '20170908100218', '20170907220212', '20170907100318', '20170906220306',\n        '20170906100107', '20170905220108', '20170905100117', '20170904220027', '20170904100131',\n        '20170903220032', '20170903100443', '20170902220453', '20170902100317', '20170901220209',\n        '20170901151028', '20170901100309', '20170831220208', '20170831100258', '20170830220349',\n        '20170830100230', '20170829100404', '20170828100127', '20170827100428', '20170826213134',\n        '20170826100418', '20170825100126', '20170824100243', '20170823100553', '20170822142709',\n        '20170822100529', '20170821100350', '20170820100343', '20170819100442', '20170818100226',\n        '20170817100132', '20170816100153', '20170815213904', '20170815183542', '20170815100349',\n        '20170814100258', '20170813183258', '20170813100233', '20170812100345', '20170811100330',\n        '20170810100255', '20170809100326', '20170808114032', '20170808100224', '20170807113452',\n        '20170807100344', '20170806100257', '20170805100334', '20170804193726', '20170804180022',\n        '20170804100354', '20170803134456', '20170803100352', '20170802100302']", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
