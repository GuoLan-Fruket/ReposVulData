{"index": 5417, "cve_id": "CVE-2021-21330", "cwe_id": ["CWE-601"], "cve_language": "Python", "cve_description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In aiohttp before version 3.7.4 there is an open redirect vulnerability. A maliciously crafted link to an aiohttp-based web-server could redirect the browser to a different website. It is caused by a bug in the `aiohttp.web_middlewares.normalize_path_middleware` middleware. This security problem has been fixed in 3.7.4. Upgrade your dependency using pip as follows \"pip install aiohttp >= 3.7.4\". If upgrading is not an option for you, a workaround can be to avoid using `aiohttp.web_middlewares.normalize_path_middleware` in your applications.", "cvss": "6.1", "publish_date": "February 25, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "2545222a3853e31ace15d87ae0e2effb7da0c96b", "commit_message": "Merge branch 'ghsa-v6wp-4m6f-gcjg' into master\n\nThis patch fixes an open redirect vulnerability bug in\n`aiohttp.web_middlewares.normalize_path_middleware` by\nmaking sure that there's at most one slash at the\nbeginning of the `Location` header value.\n\nRefs:\n* https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n* https://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg", "commit_date": "2021-02-25T17:58:51Z", "project": "aio-libs/aiohttp", "url": "https://api.github.com/repos/aio-libs/aiohttp/commits/2545222a3853e31ace15d87ae0e2effb7da0c96b", "html_url": "https://github.com/aio-libs/aiohttp/commit/2545222a3853e31ace15d87ae0e2effb7da0c96b", "windows_before": [{"commit_id": "021c416c18392a111225bc7326063dc4a99a5138", "commit_date": "Thu Feb 25 12:06:01 2021 +0100", "commit_message": "Merge branch 'ghsa-v6wp-4m6f-gcjg' into master", "files_name": ["CHANGES/5497.bugfix", "aiohttp/web_middlewares.py", "tests/test_web_middleware.py"]}, {"commit_id": "4ed7c25b537f71c6245bb74d6b20e5867db243ab", "commit_date": "Fri Dec 11 10:24:17 2020 +0200", "commit_message": "Bump chardet from 3.0.4 to 4.0.0 (#5333)", "files_name": ["requirements/base.txt"]}, {"commit_id": "b61f0fdffc887df24244ba7bdfe8567c580240ff", "commit_date": "Thu Feb 25 18:02:07 2021 +0100", "commit_message": "Fix how pure-Python HTTP parser interprets `//`", "files_name": ["CHANGES/5498.bugfix", "aiohttp/http_parser.py", "tests/test_http_parser.py"]}, {"commit_id": "2fa88b3039775347ec4281c51f49053f84e2de82", "commit_date": "Thu Feb 25 18:02:07 2021 +0100", "commit_message": "Fix how pure-Python HTTP parser interprets `//`", "files_name": ["CHANGES/5498.bugfix", "aiohttp/http_parser.py", "tests/test_http_parser.py"]}, {"commit_id": "f2afa2f054ba9e6c5d142e00233f0073925e7893", "commit_date": "Thu Feb 25 18:02:07 2021 +0100", "commit_message": "Fix how pure-Python HTTP parser interprets `//`", "files_name": ["CHANGES/5498.bugfix", "aiohttp/http_parser.py", "tests/test_http_parser.py"]}, {"commit_id": "d2f9a839bf50cbafafe953acf1f9d8c399261486", "commit_date": "Thu Feb 25 11:56:36 2021 +0100", "commit_message": "Point the change note to the issue #5497", "files_name": ["CHANGES/5497.bugfix"]}, {"commit_id": "3d4c06a323babc628b11534de9d3da77a1334387", "commit_date": "Thu Feb 25 02:58:45 2021 +0100", "commit_message": "Update credits in the change fragment", "files_name": ["CHANGES/openredirects.bugfix"]}, {"commit_id": "7aa94e99ddf0c061ed616df8754a30523dd9e79f", "commit_date": "Thu Feb 25 01:06:31 2021 +0000", "commit_message": "Fix annotations (#5466)", "files_name": ["CHANGES/5466.bugfix", "aiohttp/http_parser.py", "aiohttp/web_request.py"]}, {"commit_id": "e44f21d0364251d2ea60620438a9ba1a7232ac0c", "commit_date": "Thu Feb 25 01:29:45 2021 +0100", "commit_message": "Hotfix the PR#5494 change note syntax", "files_name": ["CHANGES/5494.bugfix"]}, {"commit_id": "8c82ba11b9e38851d75476d261a1442402cc7592", "commit_date": "Wed Feb 24 12:25:25 2021 +0100", "commit_message": "Merge branch 'bugfixes/release-resources-pytest'", "files_name": ["3c5aa754a3c3e6a79de191e756351716409070a8 - Wed Feb 24 11:41:51 2021 +0100 : Add change fragments for PR #5494", "CHANGES/5494.bugfix", "CHANGES/5494.misc"]}, {"commit_id": "942c1b801f0ce4b5cd0103be58eb0359edf698a2", "commit_date": "Wed Feb 24 01:35:04 2021 +0100", "commit_message": "Make pytest ignore resource warnings", "files_name": ["setup.cfg"]}, {"commit_id": "02b1e1bf1c5850c808f4315ec6bb5861ebb5fc5f", "commit_date": "Wed Feb 24 01:34:08 2021 +0100", "commit_message": "Release tmp file handles in multipart requests", "files_name": ["aiohttp/web_request.py"]}, {"commit_id": "405766156a79c9b441049a0bcbc4b0e1ecdc164d", "commit_date": "Wed Feb 24 01:32:59 2021 +0100", "commit_message": "Release all forgotten resources in tests", "files_name": ["tests/test_client_request.py", "tests/test_client_response.py", "tests/test_client_session.py", "tests/test_connector.py", "tests/test_proxy.py", "tests/test_run_app.py", "tests/test_web_functional.py", "tests/test_web_request.py", "tests/test_web_urldispatcher.py"]}, {"commit_id": "d1234c716b4a34275c53ee3c09c982d2ff0cc524", "commit_date": "Sun Feb 21 21:52:29 2021 +0100", "commit_message": "Add a security note to the fix", "files_name": ["aiohttp/web_middlewares.py"]}, {"commit_id": "ca4b1a74c77e431fcaae4d3cb6b28a80e80991a5", "commit_date": "Sun Feb 21 21:48:22 2021 +0100", "commit_message": "Use unshielded getitem in the test", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "db675b26aa7a6991e849479407f8f1bd2f709472", "commit_date": "Sun Feb 21 21:35:08 2021 +0100", "commit_message": "Autoformat tests", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "6d22d023da86dc8a480750a1cdd953892c005e7a", "commit_date": "Sun Feb 21 21:34:32 2021 +0100", "commit_message": "Use list for parametrize params", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "522f00984058876a13bf43fda8b3b71a475a2cf1", "commit_date": "Sun Feb 21 21:34:08 2021 +0100", "commit_message": "Add a test case with append_slash and remove_slash both disabled", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "348a67001fc7040c117a905306b3a2ff82fb3c85", "commit_date": "Sun Feb 21 18:12:09 2021 +0000", "commit_message": "Credit 'Beast Glatisant' for finding the original issue on https://janitor.kali.org/.", "files_name": ["CHANGES/openredirects.bugfix"]}, {"commit_id": "e4e4a1439713da6773a9a09747fc6cfcbc8ebe3e", "commit_date": "Thu Feb 18 01:45:50 2021 +0000", "commit_message": "Add existing URL, but check for redirect Location.", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "e2e8fa01eaf19629d7f00e50a98864067adb478a", "commit_date": "Thu Feb 18 01:39:05 2021 +0000", "commit_message": "Use parametrize to test append_slash and remove_slash.", "files_name": ["aiohttp/web_middlewares.py", "tests/test_web_middleware.py"]}, {"commit_id": "10872a09c6f809c125321257522ccbcb38016c4c", "commit_date": "Thu Feb 18 01:17:37 2021 +0000", "commit_message": "Update tests/test_web_middleware.py", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "1ec360f2fa241815ac695b50e1075d795026e94a", "commit_date": "Tue Feb 16 15:48:22 2021 +0100", "commit_message": "Bump sphinx from 3.5.0 to 3.5.1 (#5484)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "d26a3cc3be9d36a709ea348fac469c48a5555884", "commit_date": "Tue Feb 16 15:47:19 2021 +0100", "commit_message": "Bump sphinx from 3.5.0 to 3.5.1 (#5485)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "d36228f000bada5447ba6e0e869f4d940b585e25", "commit_date": "Tue Feb 16 15:45:31 2021 +0100", "commit_message": "Bump sphinx from 3.4.3 to 3.5.0 (#5483)", "files_name": ["e5bcc7074870069f5600b56748700c125ccf2f94 - Tue Feb 16 15:44:51 2021 +0100 : Bump pygments from 2.7.4 to 2.8.0 (#5482)", "requirements/dev.txt"]}, {"commit_id": "11e2aea96fb724d873481762f6598e7db583762a", "commit_date": "Tue Feb 16 15:44:09 2021 +0100", "commit_message": "Bump sphinx from 3.4.3 to 3.5.0 (#5481)", "files_name": ["77d0366b276fc8f7e22d10d157e47fa96a1e2de8 - Tue Feb 16 15:43:19 2021 +0100 : Bump pygments from 2.7.4 to 2.8.0 (#5480)", "requirements/dev.txt"]}, {"commit_id": "0fdb7749d68d9b5d22999be5ab50cb0db281b631", "commit_date": "Mon Feb 15 19:02:26 2021 +0000", "commit_message": "Bump sphinx from 3.4.3 to 3.5.0 (#5474)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "e73f49ffcc7f3471bd76c060d9cf6a668b28ad15", "commit_date": "Mon Feb 15 19:54:45 2021 +0100", "commit_message": "Bump sphinx from 3.4.3 to 3.5.0 (#5476)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "00e60813f3e64281104f2e9309081dee3c9cc824", "commit_date": "Mon Feb 15 18:53:49 2021 +0000", "commit_message": "Bump pygments from 2.7.4 to 2.8.0 (#5475)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "36d3e31e0a45b09fe0a6ddc4d9a210461f369a8c", "commit_date": "Mon Feb 15 19:52:25 2021 +0100", "commit_message": "Bump pygments from 2.7.4 to 2.8.0 (#5477)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "63ee2d9832c16869f2016bc028380a20e8295175", "commit_date": "Mon Feb 15 10:47:44 2021 -0800", "commit_message": "changed: fix deepaas link in the docs (#5473)", "files_name": ["docs/built_with.rst"]}, {"commit_id": "ced553f2aa6c8470ff35c2acc987ef4a03012f6a", "commit_date": "Mon Feb 15 00:20:52 2021 +0200", "commit_message": "Implement ETag support", "files_name": ["CHANGES/4594.feature", "aiohttp/__init__.py", "aiohttp/helpers.py", "aiohttp/web_fileresponse.py", "aiohttp/web_request.py", "aiohttp/web_response.py", "docs/client_reference.rst", "docs/spelling_wordlist.txt", "docs/web_reference.rst", "tests/test_web_request.py", "tests/test_web_response.py", "tests/test_web_sendfile.py", "tests/test_web_sendfile_functional.py"]}, {"commit_id": "c4c18c5ca3c7b32bbe0de5b044d012d685f421bc", "commit_date": "Sun Feb 14 11:14:47 2021 -0800", "commit_message": "Update built_with.rst (#5472)", "files_name": ["docs/built_with.rst"]}, {"commit_id": "ba8c33622482a766a2dccb40b2603260c8cb0c6e", "commit_date": "Thu Feb 11 10:38:04 2021 +0100", "commit_message": "Bump trustme from 0.6.0 to 0.7.0 (#5469)", "files_name": ["requirements/test.txt"]}, {"commit_id": "10c8ce9567d008d4f92a99ffe45f8d0878e99275", "commit_date": "Thu Feb 11 09:36:53 2021 +0000", "commit_message": "Bump trustme from 0.6.0 to 0.7.0 (#5468)", "files_name": ["requirements/test.txt"]}, {"commit_id": "3dd15cb20fad3a617f85fc84d274a6dff2fb5388", "commit_date": "Wed Feb 10 14:17:06 2021 +0000", "commit_message": "Explicitly check for Location in headers.", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "5bf0aee4b2a5be2b9a58d61a3438ab3e96c192cc", "commit_date": "Wed Feb 10 14:16:33 2021 +0000", "commit_message": "Bump peter-evans/create-pull-request from v3.8.0 to v3.8.2 (#5465)", "files_name": [".github/workflows/update-pre-commit.yml"]}, {"commit_id": "d548c6c47bd7c3ea18baada687c40b42c7fd0364", "commit_date": "Wed Feb 10 14:16:25 2021 +0000", "commit_message": "Update CHANGES/openredirects.bugfix", "files_name": ["CHANGES/openredirects.bugfix"]}, {"commit_id": "5d19ea5e28ae9a55ef1f33ea820f813bf26a7e57", "commit_date": "Wed Feb 10 04:33:11 2021 +0000", "commit_message": "Prevent open redirects from normalize_path_middleware.", "files_name": ["CHANGES/openredirects.bugfix", "aiohttp/web_middlewares.py", "tests/test_web_middleware.py"]}, {"commit_id": "0d0166dc24490574fa6cb7d27da1d52be6136bcf", "commit_date": "Wed Feb 10 04:12:46 2021 +0000", "commit_message": "Add test reproducing open redirects with normalize_path_middleware().", "files_name": ["tests/test_web_middleware.py"]}, {"commit_id": "d6e51d9020f3833e3ca9dec6e76e001a9624ffc6", "commit_date": "Mon Feb 8 00:50:33 2021 +0000", "commit_message": "Mypy coverage (#5457)", "files_name": [".mypy.ini", "CHANGES/5457.misc", "Makefile", "aiohttp/resolver.py", "aiohttp/worker.py", "examples/background_tasks.py", "examples/client_json.py", "examples/fake_server.py", "examples/web_cookies.py"]}, {"commit_id": "9a09d1b2fefd47d18af02989cfa0b88871a0081c", "commit_date": "Mon Feb 1 16:42:00 2021 +0100", "commit_message": "[3.8] Eliminate side-effects from the `ClientResponse.ok` property (#5407)", "files_name": ["CHANGES/5403.bugfix", "CONTRIBUTORS.txt", "aiohttp/client_reqrep.py", "tests/test_client_response.py"]}, {"commit_id": "1a989409773e875b7cfe3f59f74306f25104e061", "commit_date": "Mon Feb 1 10:52:40 2021 +0000", "commit_message": "Bump peter-evans/create-pull-request from v3.7.0 to v3.8.0 (#5455)", "files_name": [".github/workflows/update-pre-commit.yml"]}, {"commit_id": "9eda4de44b37b3f09b3d5a42a87f275ca272b48d", "commit_date": "Tue Jan 26 17:42:31 2021 +0000", "commit_message": "Bump coverage from 5.3.1 to 5.4 (#5437)", "files_name": ["requirements/test.txt"]}, {"commit_id": "dbcf70473af2a55700782c65badc388354c78e1f", "commit_date": "Tue Jan 26 17:11:14 2021 +0000", "commit_message": "Bump pytest from 6.1.2 to 6.2.2 (#5433)", "files_name": ["requirements/lint.txt", "requirements/test.txt"]}, {"commit_id": "0d4defc93c18aaa35066b16fee01f9418e14c9fa", "commit_date": "Tue Jan 26 09:21:15 2021 +0000", "commit_message": "Bump peter-evans/create-pull-request from v3.5.2 to v3.7.0 (#5434)", "files_name": [".github/workflows/update-pre-commit.yml"]}, {"commit_id": "89e3db722f0cdcf7951a1db0439f20b223550788", "commit_date": "Mon Jan 25 13:03:06 2021 +0100", "commit_message": "Enable \"showlocals\" in pytest config", "files_name": ["setup.cfg"]}, {"commit_id": "1f644210a87e0576a2db007c09994cfe25db2311", "commit_date": "Mon Jan 25 13:02:37 2021 +0100", "commit_message": "Annotate \"addopts\" in the pytest config", "files_name": ["setup.cfg"]}], "windows_after": [{"commit_id": "8931d9299975f3cd105456fe9249565c0c451391", "commit_date": "Thu Feb 25 19:34:34 2021 +0100", "commit_message": "Merge branch '3.7' into 3.8", "files_name": ["848c3b0537f3cafa8514f75a1d49824ec603c01b - Thu Feb 25 19:34:34 2021 +0100 : Update the change log for v3.7.4", "CHANGES.rst", "CHANGES/5497.bugfix", "CHANGES/5498.bugfix"]}, {"commit_id": "8c25b44770e56ee5636d16d65687a732e1545c5a", "commit_date": "Thu Feb 25 19:49:31 2021 +0100", "commit_message": "Fix v3.7.4 changelog title", "files_name": ["CHANGES.rst"]}, {"commit_id": "01fdc252c5ea3e7cba8fbac3e162df66938603f9", "commit_date": "Thu Feb 25 19:49:31 2021 +0100", "commit_message": "Fix v3.7.4 changelog title", "files_name": ["CHANGES.rst"]}, {"commit_id": "e0f493600669cbd6d755f5b56b95b913745a4696", "commit_date": "Thu Feb 25 19:49:31 2021 +0100", "commit_message": "Fix v3.7.4 changelog title", "files_name": ["CHANGES.rst"]}, {"commit_id": "23ef73e9988cb7c365d9173d31770270f5ca197d", "commit_date": "Mon Mar 1 00:12:13 2021 +0200", "commit_message": "Complete pip-tools setup (#5486)", "files_name": [".pre-commit-config.yaml", "CHANGES/5470.bugfix", "Makefile", "requirements/cython.in", "requirements/cython.txt", "requirements/dev.txt", "requirements/doc-spelling.in", "requirements/doc-spelling.txt", "requirements/lint.in", "requirements/lint.txt"]}, {"commit_id": "f6de9c688148a45e035c0b2d956113458ec0f05f", "commit_date": "Sun Feb 28 22:21:21 2021 +0000", "commit_message": "Bump cython from 0.29.21 to 0.29.22 (#5488)", "files_name": ["requirements/cython.in", "requirements/cython.txt"]}, {"commit_id": "eafad70ae37bcfa1410c6b0964671ed4d0913edb", "commit_date": "Sun Feb 28 22:22:06 2021 +0000", "commit_message": "Bump coverage from 5.4 to 5.5 (#5506)", "files_name": ["requirements/test.txt"]}, {"commit_id": "ae8e1b04a0b2e01428d38d15ef161d4ad54dd820", "commit_date": "Sun Feb 28 22:22:43 2021 +0000", "commit_message": "Bump pre-commit from 2.9.3 to 2.10.1 (#5458)", "files_name": ["requirements/dev.txt", "requirements/lint.in", "requirements/lint.txt"]}, {"commit_id": "a970c50780730305db5fef264a59ecdb3b2c519c", "commit_date": "Mon Mar 1 10:32:38 2021 +0000", "commit_message": "Bump coverage from 5.4 to 5.5 (#5509)", "files_name": ["requirements/dev.txt"]}, {"commit_id": "25dfe50e5203dd77778a668fd005250dceaccf05", "commit_date": "Thu Mar 4 23:39:29 2021 +0000", "commit_message": "Remove @unittest_run_loop (#5516)", "files_name": ["CHANGES/5516.misc", "aiohttp/test_utils.py", "docs/testing.rst", "tests/test_loop.py", "tests/test_test_utils.py"]}, {"commit_id": "3e588ed74ca6b0bb2b821b315b9f61fc50447487", "commit_date": "Fri Mar 5 14:15:39 2021 +0000", "commit_message": "Deprecate @unittest_run_loop (#5515)", "files_name": ["CHANGES/5515.misc", "aiohttp/test_utils.py", "docs/testing.rst", "tests/test_loop.py", "tests/test_test_utils.py"]}, {"commit_id": "7c2b50d1f1c8067d9a2fc230b3ef401cfb2cf6d2", "commit_date": "Sat Mar 6 20:22:31 2021 +0100", "commit_message": "Prepare Sphinx setup for stricter nitpicky mode", "files_name": ["Makefile", "docs/conf.py"]}, {"commit_id": "27c8b5c954b571ba059fbe6e939c7ee4104aaffa", "commit_date": "Sat Mar 6 20:22:31 2021 +0100", "commit_message": "Prepare Sphinx setup for stricter nitpicky mode", "files_name": ["Makefile", "docs/conf.py"]}, {"commit_id": "13fd83ee73aa584174ebe3b8c4e19e4c5fcddfd7", "commit_date": "Sat Mar 6 20:44:31 2021 +0100", "commit_message": "Fix the link to `MultiDict` in `client_quickstart.rst` (#5517)", "files_name": ["docs/client_quickstart.rst"]}, {"commit_id": "abf0316ee3c7d409e714ced9b5aaf04ef4ea83fe", "commit_date": "Sat Mar 6 20:44:31 2021 +0100", "commit_message": "Fix the link to `MultiDict` in `client_quickstart.rst` (#5517)", "files_name": ["docs/client_quickstart.rst"]}, {"commit_id": "6e0455675e59c714d3841cb4c8b726ef1b08bea1", "commit_date": "Sat Mar 6 20:22:31 2021 +0100", "commit_message": "Prepare Sphinx setup for stricter nitpicky mode", "files_name": ["Makefile", "docs/conf.py"]}, {"commit_id": "081086146d4d4fe08ce2731a562838489e34aba7", "commit_date": "Sat Mar 6 20:44:31 2021 +0100", "commit_message": "Fix the link to `MultiDict` in `client_quickstart.rst` (#5517)", "files_name": ["docs/client_quickstart.rst"]}, {"commit_id": "934e5cbcc3ba8a952ff854c12b290ecdbb0856cb", "commit_date": "Fri Dec 11 10:24:17 2020 +0200", "commit_message": "Bump chardet cap 5.0.0 (backport of #5333)", "files_name": ["setup.py"]}, {"commit_id": "184274d9b28bbfa06ac60e48bf286a761c6a6cb0", "commit_date": "Sat Mar 6 21:46:05 2021 +0100", "commit_message": "Bump aiohttp to v3.7.4.post0 for a dep bump", "files_name": ["CHANGES.rst", "aiohttp/__init__.py"]}, {"commit_id": "2d3cc10aeba4f8d30a160eb05e46bd053b07ce86", "commit_date": "Sat Mar 6 22:39:38 2021 +0100", "commit_message": "Merge branch '3.7' into 3.8", "files_name": ["12f0df11fb1eb5ed28a3418d40d67ffa41bd71ba - Sat Mar 6 22:39:38 2021 +0100 : Merge branch '3.7' into 3.8", "CHANGES.rst"]}, {"commit_id": "0b2e8a27e52bcaf8ea879fb67501b63c640118de", "commit_date": "Sat Mar 6 22:43:02 2021 +0100", "commit_message": "Fixup the changelog title for v3.7.4.post0", "files_name": ["CHANGES.rst"]}, {"commit_id": "71f574f1218856afe58aeab77ffc0e3fa2900e7b", "commit_date": "Sat Mar 6 22:43:02 2021 +0100", "commit_message": "Fixup the changelog title for v3.7.4.post0", "files_name": ["CHANGES.rst"]}, {"commit_id": "fbce0ac513f689cb396ae16b80b374e13e5c07ea", "commit_date": "Thu Mar 11 20:00:43 2021 +0200", "commit_message": "Fix 5486.misc (#5507)", "files_name": ["CHANGES/5486.misc"]}, {"commit_id": "6cc8c39c4e72bb918091fa460198adc2740d2d4f", "commit_date": "Fri Mar 12 23:20:45 2021 +0000", "commit_message": "Fix sock_connect timeout being applied when 0. (#5529)", "files_name": ["CHANGES/5527.bugfix", "aiohttp/helpers.py", "tests/test_client_session.py"]}, {"commit_id": "3f94bb8adbe5943caf55d168d3554a63ac9bcca7", "commit_date": "Fri Mar 12 23:21:39 2021 +0000", "commit_message": "Add test for 0 timeout (#5533)", "files_name": ["CHANGES/5533.misc", "aiohttp/helpers.py", "tests/test_client_session.py"]}, {"commit_id": "30f90c523f72c3bbbaf2af5a93b2453993404b61", "commit_date": "Sun Mar 14 19:12:29 2021 +0200", "commit_message": "Complete pip-tools setup (backport #5486) (#5508)", "files_name": [".pre-commit-config.yaml", "CHANGES/5486.misc", "Makefile", "requirements/base.txt", "requirements/cython.in", "requirements/cython.txt", "requirements/dev.txt", "requirements/doc-spelling.in", "requirements/doc-spelling.txt", "requirements/lint.in", "requirements/lint.txt"]}, {"commit_id": "caccf3ed843c0aded5d6b5a33f5ed782968c451e", "commit_date": "Sun Mar 14 18:17:00 2021 +0100", "commit_message": "Bump pre-commit from 2.10.1 to 2.11.1 (#5531)", "files_name": ["requirements/dev.txt", "requirements/lint.in", "requirements/lint.txt"]}, {"commit_id": "c5dd54c41c06d8951c9346cc8d0e2c1a3363a41d", "commit_date": "Sun Mar 14 18:18:22 2021 +0100", "commit_message": "Bump actions/cache from v2 to v2.1.4 (#5459)", "files_name": [".github/workflows/ci.yml"]}, {"commit_id": "e64b48113447cbb728a662ce7ca4fc2073a926ed", "commit_date": "Sun Mar 14 17:28:42 2021 +0000", "commit_message": "Bump freezegun from 1.0.0 to 1.1.0 (#5423)", "files_name": ["requirements/test.txt"]}, {"commit_id": "72db459fb363c108bba93902b6e4c1406778637a", "commit_date": "Sun Mar 14 17:33:54 2021 +0000", "commit_message": "Bump cython from 0.29.21 to 0.29.22 (#5490)", "files_name": ["requirements/cython.in", "requirements/cython.txt"]}, {"commit_id": "4784b5657501564f58b0ada78fb9a2be79f69561", "commit_date": "Sun Mar 14 17:36:04 2021 +0000", "commit_message": "Bump sphinx from 3.5.0 to 3.5.2 (#5524)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "ab7da9f7efdf1b254550e3b6687d025aacaa789a", "commit_date": "Sun Mar 14 17:46:58 2021 +0000", "commit_message": "Bump pre-commit from 2.9.3 to 2.11.1 (#5532)", "files_name": ["requirements/dev.txt", "requirements/lint.in", "requirements/lint.txt"]}, {"commit_id": "10f45bb59d49fee97a52839a2a66f74212707a54", "commit_date": "Sun Mar 14 17:56:00 2021 +0000", "commit_message": "Mypy coverage (#5464)", "files_name": [".mypy.ini", "CHANGES/5457.misc", "Makefile", "aiohttp/connector.py", "aiohttp/resolver.py", "aiohttp/worker.py", "examples/__init__.py", "examples/background_tasks.py", "examples/client_json.py", "examples/client_ws.py", "examples/fake_server.py", "examples/web_classview.py", "examples/web_cookies.py"]}, {"commit_id": "eeb1f3eb4016a8dbf9ef70cbedd10dc8ecf06c50", "commit_date": "Sun Mar 14 17:59:02 2021 +0000", "commit_message": "Bump actions/cache from v2 to v2.1.4 (#5461)", "files_name": [".github/workflows/ci.yml"]}, {"commit_id": "a9a44c92c88ff8ab4fe4dc1ca95791a7755b9b59", "commit_date": "Sun Mar 14 18:14:11 2021 +0000", "commit_message": "Bump pygments from 2.8.0 to 2.8.1 (#5525)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "726f44ee3aa62a1f924579556fd31de8a08a10b1", "commit_date": "Sun Mar 14 18:24:15 2021 +0000", "commit_message": "Bump coverage from 5.3.1 to 5.5 (#5510)", "files_name": ["requirements/test.txt"]}, {"commit_id": "8e6ee71a78ffbe584690f44e748d40d3cce25b09", "commit_date": "Sun Mar 14 20:06:00 2021 +0100", "commit_message": "Bump pytest-cov from 2.10.1 to 2.11.1 (#5424)", "files_name": ["requirements/test.txt"]}, {"commit_id": "2300f54faa32d42d7bd08ba4c90dac304539e086", "commit_date": "Mon Mar 15 00:34:41 2021 +0000", "commit_message": "Fix imports of typing_extensions (#5374)", "files_name": ["CHANGES/5107.bugfix", "aiohttp/client.py", "aiohttp/hdrs.py", "aiohttp/helpers.py", "aiohttp/http_parser.py", "aiohttp/http_websocket.py", "aiohttp/locks.py", "aiohttp/payload.py", "aiohttp/streams.py", "aiohttp/tracing.py", "aiohttp/typedefs.py", "aiohttp/web_fileresponse.py", "aiohttp/web_request.py", "aiohttp/web_urldispatcher.py", "aiohttp/web_ws.py", "setup.py"]}, {"commit_id": "d4522e556760be8d02647103cd78958be6b7b6c1", "commit_date": "Mon Mar 15 01:36:38 2021 +0100", "commit_message": "Bump sphinx from 3.5.1 to 3.5.2 (#5522)", "files_name": ["requirements/doc.txt"]}, {"commit_id": "7913e08f955726c2245d202447ea4b0f9832cc55", "commit_date": "Mon Mar 15 00:56:26 2021 +0000", "commit_message": "Bump pygments from 2.8.0 to 2.8.1 (#5521)", "files_name": ["requirements/doc.txt"]}], "parents": [{"commit_id_before": "f2afa2f054ba9e6c5d142e00233f0073925e7893", "url_before": "https://api.github.com/repos/aio-libs/aiohttp/commits/f2afa2f054ba9e6c5d142e00233f0073925e7893", "html_url_before": "https://github.com/aio-libs/aiohttp/commit/f2afa2f054ba9e6c5d142e00233f0073925e7893"}, {"commit_id_before": "d2f9a839bf50cbafafe953acf1f9d8c399261486", "url_before": "https://api.github.com/repos/aio-libs/aiohttp/commits/d2f9a839bf50cbafafe953acf1f9d8c399261486", "html_url_before": "https://github.com/aio-libs/aiohttp/commit/d2f9a839bf50cbafafe953acf1f9d8c399261486"}], "details": [{"raw_url": "https://github.com/aio-libs/aiohttp/raw/2545222a3853e31ace15d87ae0e2effb7da0c96b/CHANGES%2F5497.bugfix", "code": "**(SECURITY BUG)** Started preventing open redirects in the\n``aiohttp.web.normalize_path_middleware`` middleware. For\nmore details, see\nhttps://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg.\n\nThanks to `Beast Glatisant <https://github.com/g147>`__ for\nfinding the firstinstance of this issue and `Jelmer Vernoo\u0133\n<https://jelmer.uk/>`__ for reporting and tracking it down\nin aiohttp.\n", "code_before": "**(SECURITY BUG)** Started preventing open redirects in the\n``aiohttp.web.normalize_path_middleware`` middleware. For\nmore details, see\nhttps://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg.\n\nThanks to `Beast Glatisant <https://github.com/g147>`__ for\nfinding the firstinstance of this issue and `Jelmer Vernoo\u0133\n<https://jelmer.uk/>`__ for reporting and tracking it down\nin aiohttp.\n", "patch": "@@ -0,0 +1,9 @@\n+**(SECURITY BUG)** Started preventing open redirects in the\n+``aiohttp.web.normalize_path_middleware`` middleware. For\n+more details, see\n+https://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg.\n+\n+Thanks to `Beast Glatisant <https://github.com/g147>`__ for\n+finding the firstinstance of this issue and `Jelmer Vernoo\u0133\n+<https://jelmer.uk/>`__ for reporting and tracking it down\n+in aiohttp.", "file_path": "files/2021_2/60", "file_language": "bugfix", "file_name": "CHANGES/5497.bugfix", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 1}, {"raw_url": "https://github.com/aio-libs/aiohttp/raw/2545222a3853e31ace15d87ae0e2effb7da0c96b/aiohttp%2Fweb_middlewares.py", "code": "import re\nimport warnings\nfrom typing import TYPE_CHECKING, Awaitable, Callable, Tuple, Type, TypeVar\n\nfrom .web_exceptions import HTTPMove, HTTPPermanentRedirect\nfrom .web_request import Request\nfrom .web_response import StreamResponse\nfrom .web_urldispatcher import SystemRoute\n\n__all__ = (\n    \"middleware\",\n    \"normalize_path_middleware\",\n)\n\nif TYPE_CHECKING:  # pragma: no cover\n    from .web_app import Application\n\n_Func = TypeVar(\"_Func\")\n\n\nasync def _check_request_resolves(request: Request, path: str) -> Tuple[bool, Request]:\n    alt_request = request.clone(rel_url=path)\n\n    match_info = await request.app.router.resolve(alt_request)\n    alt_request._match_info = match_info  # type: ignore[assignment]\n\n    if match_info.http_exception is None:\n        return True, alt_request\n\n    return False, request\n\n\ndef middleware(f: _Func) -> _Func:\n    warnings.warn(\n        \"Middleware decorator is deprecated since 4.0 \"\n        \"and its behaviour is default, \"\n        \"you can simply remove this decorator.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return f\n\n\n_Handler = Callable[[Request], Awaitable[StreamResponse]]\n_Middleware = Callable[[Request, _Handler], Awaitable[StreamResponse]]\n\n\ndef normalize_path_middleware(\n    *,\n    append_slash: bool = True,\n    remove_slash: bool = False,\n    merge_slashes: bool = True,\n    redirect_class: Type[HTTPMove] = HTTPPermanentRedirect,\n) -> _Middleware:\n    \"\"\"\n    Middleware factory which produces a middleware that normalizes\n    the path of a request. By normalizing it means:\n\n        - Add or remove a trailing slash to the path.\n        - Double slashes are replaced by one.\n\n    The middleware returns as soon as it finds a path that resolves\n    correctly. The order if both merge and append/remove are enabled is\n        1) merge slashes\n        2) append/remove slash\n        3) both merge slashes and append/remove slash.\n    If the path resolves with at least one of those conditions, it will\n    redirect to the new path.\n\n    Only one of `append_slash` and `remove_slash` can be enabled. If both\n    are `True` the factory will raise an assertion error\n\n    If `append_slash` is `True` the middleware will append a slash when\n    needed. If a resource is defined with trailing slash and the request\n    comes without it, it will append it automatically.\n\n    If `remove_slash` is `True`, `append_slash` must be `False`. When enabled\n    the middleware will remove trailing slashes and redirect if the resource\n    is defined\n\n    If merge_slashes is True, merge multiple consecutive slashes in the\n    path into one.\n    \"\"\"\n\n    correct_configuration = not (append_slash and remove_slash)\n    assert correct_configuration, \"Cannot both remove and append slash\"\n\n    async def impl(request: Request, handler: _Handler) -> StreamResponse:\n        if isinstance(request.match_info.route, SystemRoute):\n            paths_to_check = []\n            if \"?\" in request.raw_path:\n                path, query = request.raw_path.split(\"?\", 1)\n                query = \"?\" + query\n            else:\n                query = \"\"\n                path = request.raw_path\n\n            if merge_slashes:\n                paths_to_check.append(re.sub(\"//+\", \"/\", path))\n            if append_slash and not request.path.endswith(\"/\"):\n                paths_to_check.append(path + \"/\")\n            if remove_slash and request.path.endswith(\"/\"):\n                paths_to_check.append(path[:-1])\n            if merge_slashes and append_slash:\n                paths_to_check.append(re.sub(\"//+\", \"/\", path + \"/\"))\n            if merge_slashes and remove_slash and path.endswith(\"/\"):\n                merged_slashes = re.sub(\"//+\", \"/\", path)\n                paths_to_check.append(merged_slashes[:-1])\n\n            for path in paths_to_check:\n                path = re.sub(\"^//+\", \"/\", path)  # SECURITY: GHSA-v6wp-4m6f-gcjg\n                resolves, request = await _check_request_resolves(request, path)\n                if resolves:\n                    raise redirect_class(request.raw_path + query)\n\n        return await handler(request)\n\n    return impl\n\n\ndef _fix_request_current_app(app: \"Application\") -> _Middleware:\n    async def impl(request: Request, handler: _Handler) -> StreamResponse:\n        with request.match_info.set_current_app(app):\n            return await handler(request)\n\n    return impl\n", "code_before": "import re\nimport warnings\nfrom typing import TYPE_CHECKING, Awaitable, Callable, Tuple, Type, TypeVar\n\nfrom .web_exceptions import HTTPMove, HTTPPermanentRedirect\nfrom .web_request import Request\nfrom .web_response import StreamResponse\nfrom .web_urldispatcher import SystemRoute\n\n__all__ = (\n    \"middleware\",\n    \"normalize_path_middleware\",\n)\n\nif TYPE_CHECKING:  # pragma: no cover\n    from .web_app import Application\n\n_Func = TypeVar(\"_Func\")\n\n\nasync def _check_request_resolves(request: Request, path: str) -> Tuple[bool, Request]:\n    alt_request = request.clone(rel_url=path)\n\n    match_info = await request.app.router.resolve(alt_request)\n    alt_request._match_info = match_info  # type: ignore[assignment]\n\n    if match_info.http_exception is None:\n        return True, alt_request\n\n    return False, request\n\n\ndef middleware(f: _Func) -> _Func:\n    warnings.warn(\n        \"Middleware decorator is deprecated since 4.0 \"\n        \"and its behaviour is default, \"\n        \"you can simply remove this decorator.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return f\n\n\n_Handler = Callable[[Request], Awaitable[StreamResponse]]\n_Middleware = Callable[[Request, _Handler], Awaitable[StreamResponse]]\n\n\ndef normalize_path_middleware(\n    *,\n    append_slash: bool = True,\n    remove_slash: bool = False,\n    merge_slashes: bool = True,\n    redirect_class: Type[HTTPMove] = HTTPPermanentRedirect,\n) -> _Middleware:\n    \"\"\"\n    Middleware factory which produces a middleware that normalizes\n    the path of a request. By normalizing it means:\n\n        - Add or remove a trailing slash to the path.\n        - Double slashes are replaced by one.\n\n    The middleware returns as soon as it finds a path that resolves\n    correctly. The order if both merge and append/remove are enabled is\n        1) merge slashes\n        2) append/remove slash\n        3) both merge slashes and append/remove slash.\n    If the path resolves with at least one of those conditions, it will\n    redirect to the new path.\n\n    Only one of `append_slash` and `remove_slash` can be enabled. If both\n    are `True` the factory will raise an assertion error\n\n    If `append_slash` is `True` the middleware will append a slash when\n    needed. If a resource is defined with trailing slash and the request\n    comes without it, it will append it automatically.\n\n    If `remove_slash` is `True`, `append_slash` must be `False`. When enabled\n    the middleware will remove trailing slashes and redirect if the resource\n    is defined\n\n    If merge_slashes is True, merge multiple consecutive slashes in the\n    path into one.\n    \"\"\"\n\n    correct_configuration = not (append_slash and remove_slash)\n    assert correct_configuration, \"Cannot both remove and append slash\"\n\n    async def impl(request: Request, handler: _Handler) -> StreamResponse:\n        if isinstance(request.match_info.route, SystemRoute):\n            paths_to_check = []\n            if \"?\" in request.raw_path:\n                path, query = request.raw_path.split(\"?\", 1)\n                query = \"?\" + query\n            else:\n                query = \"\"\n                path = request.raw_path\n\n            if merge_slashes:\n                paths_to_check.append(re.sub(\"//+\", \"/\", path))\n            if append_slash and not request.path.endswith(\"/\"):\n                paths_to_check.append(path + \"/\")\n            if remove_slash and request.path.endswith(\"/\"):\n                paths_to_check.append(path[:-1])\n            if merge_slashes and append_slash:\n                paths_to_check.append(re.sub(\"//+\", \"/\", path + \"/\"))\n            if merge_slashes and remove_slash and path.endswith(\"/\"):\n                merged_slashes = re.sub(\"//+\", \"/\", path)\n                paths_to_check.append(merged_slashes[:-1])\n\n            for path in paths_to_check:\n                path = re.sub(\"^//+\", \"/\", path)  # SECURITY: GHSA-v6wp-4m6f-gcjg\n                resolves, request = await _check_request_resolves(request, path)\n                if resolves:\n                    raise redirect_class(request.raw_path + query)\n\n        return await handler(request)\n\n    return impl\n\n\ndef _fix_request_current_app(app: \"Application\") -> _Middleware:\n    async def impl(request: Request, handler: _Handler) -> StreamResponse:\n        with request.match_info.set_current_app(app):\n            return await handler(request)\n\n    return impl\n", "patch": "@@ -108,6 +108,7 @@ async def impl(request: Request, handler: _Handler) -> StreamResponse:\n                 paths_to_check.append(merged_slashes[:-1])\n \n             for path in paths_to_check:\n+                path = re.sub(\"^//+\", \"/\", path)  # SECURITY: GHSA-v6wp-4m6f-gcjg\n                 resolves, request = await _check_request_resolves(request, path)\n                 if resolves:\n                     raise redirect_class(request.raw_path + query)", "file_path": "files/2021_2/61", "file_language": "py", "file_name": "aiohttp/web_middlewares.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/aio-libs/aiohttp/raw/2545222a3853e31ace15d87ae0e2effb7da0c96b/tests%2Ftest_web_middleware.py", "code": "# type: ignore\nfrom typing import Any\n\nimport pytest\nfrom yarl import URL\n\nfrom aiohttp import web\n\n\nasync def test_middleware_modifies_response(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(body=b\"OK\")\n\n    async def middleware(request, handler):\n        resp = await handler(request)\n        assert 200 == resp.status\n        resp.set_status(201)\n        resp.text = resp.text + \"[MIDDLEWARE]\"\n        return resp\n\n    app = web.Application()\n    app.middlewares.append(middleware)\n    app.router.add_route(\"GET\", \"/\", handler)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 201 == resp.status\n    txt = await resp.text()\n    assert \"OK[MIDDLEWARE]\" == txt\n\n\nasync def test_middleware_handles_exception(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        raise RuntimeError(\"Error text\")\n\n    async def middleware(request, handler):\n        with pytest.raises(RuntimeError) as ctx:\n            await handler(request)\n        return web.Response(status=501, text=str(ctx.value) + \"[MIDDLEWARE]\")\n\n    app = web.Application()\n    app.middlewares.append(middleware)\n    app.router.add_route(\"GET\", \"/\", handler)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 501 == resp.status\n    txt = await resp.text()\n    assert \"Error text[MIDDLEWARE]\" == txt\n\n\nasync def test_middleware_chain(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(text=\"OK\")\n\n    handler.annotation = \"annotation_value\"\n\n    async def handler2(request):\n        return web.Response(text=\"OK\")\n\n    middleware_annotation_seen_values = []\n\n    def make_middleware(num):\n        async def middleware(request, handler):\n            middleware_annotation_seen_values.append(\n                getattr(handler, \"annotation\", None)\n            )\n            resp = await handler(request)\n            resp.text = resp.text + f\"[{num}]\"\n            return resp\n\n        return middleware\n\n    app = web.Application()\n    app.middlewares.append(make_middleware(1))\n    app.middlewares.append(make_middleware(2))\n    app.router.add_route(\"GET\", \"/\", handler)\n    app.router.add_route(\"GET\", \"/r2\", handler2)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 200 == resp.status\n    txt = await resp.text()\n    assert \"OK[2][1]\" == txt\n    assert middleware_annotation_seen_values == [\"annotation_value\", \"annotation_value\"]\n\n    # check that attributes from handler are not applied to handler2\n    resp = await client.get(\"/r2\")\n    assert 200 == resp.status\n    assert middleware_annotation_seen_values == [\n        \"annotation_value\",\n        \"annotation_value\",\n        None,\n        None,\n    ]\n\n\nasync def test_middleware_subapp(loop: Any, aiohttp_client: Any) -> None:\n    async def sub_handler(request):\n        return web.Response(text=\"OK\")\n\n    sub_handler.annotation = \"annotation_value\"\n\n    async def handler(request):\n        return web.Response(text=\"OK\")\n\n    middleware_annotation_seen_values = []\n\n    def make_middleware(num):\n        async def middleware(request, handler):\n            annotation = getattr(handler, \"annotation\", None)\n            if annotation is not None:\n                middleware_annotation_seen_values.append(f\"{annotation}/{num}\")\n            return await handler(request)\n\n        return middleware\n\n    app = web.Application()\n    app.middlewares.append(make_middleware(1))\n    app.router.add_route(\"GET\", \"/r2\", handler)\n\n    subapp = web.Application()\n    subapp.middlewares.append(make_middleware(2))\n    subapp.router.add_route(\"GET\", \"/\", sub_handler)\n    app.add_subapp(\"/sub\", subapp)\n\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/sub/\")\n    assert 200 == resp.status\n    await resp.text()\n    assert middleware_annotation_seen_values == [\n        \"annotation_value/1\",\n        \"annotation_value/2\",\n    ]\n\n    # check that attributes from sub_handler are not applied to handler\n    del middleware_annotation_seen_values[:]\n    resp = await client.get(\"/r2\")\n    assert 200 == resp.status\n    assert middleware_annotation_seen_values == []\n\n\n@pytest.fixture\ndef cli(loop: Any, aiohttp_client: Any):\n    async def handler(request):\n        return web.Response(text=\"OK\")\n\n    def wrapper(extra_middlewares):\n        app = web.Application()\n        app.router.add_route(\"GET\", \"/resource1\", handler)\n        app.router.add_route(\"GET\", \"/resource2/\", handler)\n        app.router.add_route(\"GET\", \"/resource1/a/b\", handler)\n        app.router.add_route(\"GET\", \"/resource2/a/b/\", handler)\n        app.router.add_route(\"GET\", \"/resource2/a/b%2Fc/\", handler)\n        app.middlewares.extend(extra_middlewares)\n        return aiohttp_client(app, server_kwargs={\"skip_url_asserts\": True})\n\n    return wrapper\n\n\nclass TestNormalizePathMiddleware:\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1\", 200),\n            (\"/resource1/\", 404),\n            (\"/resource2\", 200),\n            (\"/resource2/\", 200),\n            (\"/resource1?p1=1&p2=2\", 200),\n            (\"/resource1/?p1=1&p2=2\", 404),\n            (\"/resource2?p1=1&p2=2\", 200),\n            (\"/resource2/?p1=1&p2=2\", 200),\n            (\"/resource2/a/b%2Fc\", 200),\n            (\"/resource2/a/b%2Fc/\", 200),\n        ],\n    )\n    async def test_add_trailing_when_necessary(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [web.normalize_path_middleware(merge_slashes=False)]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1\", 200),\n            (\"/resource1/\", 200),\n            (\"/resource2\", 404),\n            (\"/resource2/\", 200),\n            (\"/resource1?p1=1&p2=2\", 200),\n            (\"/resource1/?p1=1&p2=2\", 200),\n            (\"/resource2?p1=1&p2=2\", 404),\n            (\"/resource2/?p1=1&p2=2\", 200),\n            (\"/resource2/a/b%2Fc\", 404),\n            (\"/resource2/a/b%2Fc/\", 200),\n            (\"/resource12\", 404),\n            (\"/resource12345\", 404),\n        ],\n    )\n    async def test_remove_trailing_when_necessary(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [\n            web.normalize_path_middleware(\n                append_slash=False, remove_slash=True, merge_slashes=False\n            )\n        ]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1\", 200),\n            (\"/resource1/\", 404),\n            (\"/resource2\", 404),\n            (\"/resource2/\", 200),\n            (\"/resource1?p1=1&p2=2\", 200),\n            (\"/resource1/?p1=1&p2=2\", 404),\n            (\"/resource2?p1=1&p2=2\", 404),\n            (\"/resource2/?p1=1&p2=2\", 200),\n            (\"/resource2/a/b%2Fc\", 404),\n            (\"/resource2/a/b%2Fc/\", 200),\n        ],\n    )\n    async def test_no_trailing_slash_when_disabled(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [\n            web.normalize_path_middleware(append_slash=False, merge_slashes=False)\n        ]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1/a/b\", 200),\n            (\"//resource1//a//b\", 200),\n            (\"//resource1//a//b/\", 404),\n            (\"///resource1//a//b\", 200),\n            (\"/////resource1/a///b\", 200),\n            (\"/////resource1/a//b/\", 404),\n            (\"/resource1/a/b?p=1\", 200),\n            (\"//resource1//a//b?p=1\", 200),\n            (\"//resource1//a//b/?p=1\", 404),\n            (\"///resource1//a//b?p=1\", 200),\n            (\"/////resource1/a///b?p=1\", 200),\n            (\"/////resource1/a//b/?p=1\", 404),\n        ],\n    )\n    async def test_merge_slash(self, path: Any, status: Any, cli: Any) -> None:\n        extra_middlewares = [web.normalize_path_middleware(append_slash=False)]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1/a/b\", 200),\n            (\"/resource1/a/b/\", 404),\n            (\"//resource2//a//b\", 200),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource1//a//b\", 200),\n            (\"///resource1//a//b/\", 404),\n            (\"/////resource1/a///b\", 200),\n            (\"/////resource1/a///b/\", 404),\n            (\"/resource2/a/b\", 200),\n            (\"//resource2//a//b\", 200),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource2//a//b\", 200),\n            (\"///resource2//a//b/\", 200),\n            (\"/////resource2/a///b\", 200),\n            (\"/////resource2/a///b/\", 200),\n            (\"/resource1/a/b?p=1\", 200),\n            (\"/resource1/a/b/?p=1\", 404),\n            (\"//resource2//a//b?p=1\", 200),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource1//a//b?p=1\", 200),\n            (\"///resource1//a//b/?p=1\", 404),\n            (\"/////resource1/a///b?p=1\", 200),\n            (\"/////resource1/a///b/?p=1\", 404),\n            (\"/resource2/a/b?p=1\", 200),\n            (\"//resource2//a//b?p=1\", 200),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource2//a//b?p=1\", 200),\n            (\"///resource2//a//b/?p=1\", 200),\n            (\"/////resource2/a///b?p=1\", 200),\n            (\"/////resource2/a///b/?p=1\", 200),\n        ],\n    )\n    async def test_append_and_merge_slash(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [web.normalize_path_middleware()]\n\n        client = await cli(extra_middlewares)\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1/a/b\", 200),\n            (\"/resource1/a/b/\", 200),\n            (\"//resource2//a//b\", 404),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource1//a//b\", 200),\n            (\"///resource1//a//b/\", 200),\n            (\"/////resource1/a///b\", 200),\n            (\"/////resource1/a///b/\", 200),\n            (\"/////resource1/a///b///\", 200),\n            (\"/resource2/a/b\", 404),\n            (\"//resource2//a//b\", 404),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource2//a//b\", 404),\n            (\"///resource2//a//b/\", 200),\n            (\"/////resource2/a///b\", 404),\n            (\"/////resource2/a///b/\", 200),\n            (\"/resource1/a/b?p=1\", 200),\n            (\"/resource1/a/b/?p=1\", 200),\n            (\"//resource2//a//b?p=1\", 404),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource1//a//b?p=1\", 200),\n            (\"///resource1//a//b/?p=1\", 200),\n            (\"/////resource1/a///b?p=1\", 200),\n            (\"/////resource1/a///b/?p=1\", 200),\n            (\"/resource2/a/b?p=1\", 404),\n            (\"//resource2//a//b?p=1\", 404),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource2//a//b?p=1\", 404),\n            (\"///resource2//a//b/?p=1\", 200),\n            (\"/////resource2/a///b?p=1\", 404),\n            (\"/////resource2/a///b/?p=1\", 200),\n        ],\n    )\n    async def test_remove_and_merge_slash(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [\n            web.normalize_path_middleware(append_slash=False, remove_slash=True)\n        ]\n\n        client = await cli(extra_middlewares)\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    async def test_cannot_remove_and_add_slash(self) -> None:\n        with pytest.raises(AssertionError):\n            web.normalize_path_middleware(append_slash=True, remove_slash=True)\n\n    @pytest.mark.parametrize(\n        [\"append_slash\", \"remove_slash\"],\n        [\n            (True, False),\n            (False, True),\n            (False, False),\n        ],\n    )\n    async def test_open_redirects(\n        self, append_slash: bool, remove_slash: bool, aiohttp_client: Any\n    ) -> None:\n        async def handle(request: web.Request) -> web.StreamResponse:\n            pytest.fail(\n                msg=\"Security advisory 'GHSA-v6wp-4m6f-gcjg' test handler \"\n                \"matched unexpectedly\",\n                pytrace=False,\n            )\n\n        app = web.Application(\n            middlewares=[\n                web.normalize_path_middleware(\n                    append_slash=append_slash, remove_slash=remove_slash\n                )\n            ]\n        )\n        app.add_routes([web.get(\"/\", handle), web.get(\"/google.com\", handle)])\n        client = await aiohttp_client(app, server_kwargs={\"skip_url_asserts\": True})\n        resp = await client.get(\"//google.com\", allow_redirects=False)\n        assert resp.status == 308\n        assert resp.headers[\"Location\"] == \"/google.com\"\n        assert resp.url.query == URL(\"//google.com\").query\n\n\nasync def test_bug_3669(aiohttp_client: Any):\n    async def paymethod(request):\n        return web.Response(text=\"OK\")\n\n    app = web.Application()\n    app.router.add_route(\"GET\", \"/paymethod\", paymethod)\n    app.middlewares.append(\n        web.normalize_path_middleware(append_slash=False, remove_slash=True)\n    )\n\n    client = await aiohttp_client(app, server_kwargs={\"skip_url_asserts\": True})\n\n    resp = await client.get(\"/paymethods\")\n    assert resp.status == 404\n    assert resp.url.path != \"/paymethod\"\n\n\nasync def test_old_style_middleware(loop: Any, aiohttp_client: Any) -> None:\n    async def view_handler(request):\n        return web.Response(body=b\"OK\")\n\n    with pytest.warns(DeprecationWarning, match=\"Middleware decorator is deprecated\"):\n\n        @web.middleware\n        async def middleware(request, handler):\n            resp = await handler(request)\n            assert 200 == resp.status\n            resp.set_status(201)\n            resp.text = resp.text + \"[old style middleware]\"\n            return resp\n\n    app = web.Application(middlewares=[middleware])\n    app.router.add_route(\"GET\", \"/\", view_handler)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 201 == resp.status\n    txt = await resp.text()\n    assert \"OK[old style middleware]\" == txt\n\n\nasync def test_new_style_middleware_class(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(body=b\"OK\")\n\n    class Middleware:\n        async def __call__(self, request, handler):\n            resp = await handler(request)\n            assert 200 == resp.status\n            resp.set_status(201)\n            resp.text = resp.text + \"[new style middleware]\"\n            return resp\n\n    with pytest.warns(None) as warning_checker:\n        app = web.Application()\n        app.middlewares.append(Middleware())\n        app.router.add_route(\"GET\", \"/\", handler)\n        client = await aiohttp_client(app)\n        resp = await client.get(\"/\")\n        assert 201 == resp.status\n        txt = await resp.text()\n        assert \"OK[new style middleware]\" == txt\n\n    assert len(warning_checker) == 0\n\n\nasync def test_new_style_middleware_method(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(body=b\"OK\")\n\n    class Middleware:\n        async def call(self, request, handler):\n            resp = await handler(request)\n            assert 200 == resp.status\n            resp.set_status(201)\n            resp.text = resp.text + \"[new style middleware]\"\n            return resp\n\n    with pytest.warns(None) as warning_checker:\n        app = web.Application()\n        app.middlewares.append(Middleware().call)\n        app.router.add_route(\"GET\", \"/\", handler)\n        client = await aiohttp_client(app)\n        resp = await client.get(\"/\")\n        assert 201 == resp.status\n        txt = await resp.text()\n        assert \"OK[new style middleware]\" == txt\n\n    assert len(warning_checker) == 0\n", "code_before": "# type: ignore\nfrom typing import Any\n\nimport pytest\nfrom yarl import URL\n\nfrom aiohttp import web\n\n\nasync def test_middleware_modifies_response(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(body=b\"OK\")\n\n    async def middleware(request, handler):\n        resp = await handler(request)\n        assert 200 == resp.status\n        resp.set_status(201)\n        resp.text = resp.text + \"[MIDDLEWARE]\"\n        return resp\n\n    app = web.Application()\n    app.middlewares.append(middleware)\n    app.router.add_route(\"GET\", \"/\", handler)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 201 == resp.status\n    txt = await resp.text()\n    assert \"OK[MIDDLEWARE]\" == txt\n\n\nasync def test_middleware_handles_exception(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        raise RuntimeError(\"Error text\")\n\n    async def middleware(request, handler):\n        with pytest.raises(RuntimeError) as ctx:\n            await handler(request)\n        return web.Response(status=501, text=str(ctx.value) + \"[MIDDLEWARE]\")\n\n    app = web.Application()\n    app.middlewares.append(middleware)\n    app.router.add_route(\"GET\", \"/\", handler)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 501 == resp.status\n    txt = await resp.text()\n    assert \"Error text[MIDDLEWARE]\" == txt\n\n\nasync def test_middleware_chain(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(text=\"OK\")\n\n    handler.annotation = \"annotation_value\"\n\n    async def handler2(request):\n        return web.Response(text=\"OK\")\n\n    middleware_annotation_seen_values = []\n\n    def make_middleware(num):\n        async def middleware(request, handler):\n            middleware_annotation_seen_values.append(\n                getattr(handler, \"annotation\", None)\n            )\n            resp = await handler(request)\n            resp.text = resp.text + f\"[{num}]\"\n            return resp\n\n        return middleware\n\n    app = web.Application()\n    app.middlewares.append(make_middleware(1))\n    app.middlewares.append(make_middleware(2))\n    app.router.add_route(\"GET\", \"/\", handler)\n    app.router.add_route(\"GET\", \"/r2\", handler2)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 200 == resp.status\n    txt = await resp.text()\n    assert \"OK[2][1]\" == txt\n    assert middleware_annotation_seen_values == [\"annotation_value\", \"annotation_value\"]\n\n    # check that attributes from handler are not applied to handler2\n    resp = await client.get(\"/r2\")\n    assert 200 == resp.status\n    assert middleware_annotation_seen_values == [\n        \"annotation_value\",\n        \"annotation_value\",\n        None,\n        None,\n    ]\n\n\nasync def test_middleware_subapp(loop: Any, aiohttp_client: Any) -> None:\n    async def sub_handler(request):\n        return web.Response(text=\"OK\")\n\n    sub_handler.annotation = \"annotation_value\"\n\n    async def handler(request):\n        return web.Response(text=\"OK\")\n\n    middleware_annotation_seen_values = []\n\n    def make_middleware(num):\n        async def middleware(request, handler):\n            annotation = getattr(handler, \"annotation\", None)\n            if annotation is not None:\n                middleware_annotation_seen_values.append(f\"{annotation}/{num}\")\n            return await handler(request)\n\n        return middleware\n\n    app = web.Application()\n    app.middlewares.append(make_middleware(1))\n    app.router.add_route(\"GET\", \"/r2\", handler)\n\n    subapp = web.Application()\n    subapp.middlewares.append(make_middleware(2))\n    subapp.router.add_route(\"GET\", \"/\", sub_handler)\n    app.add_subapp(\"/sub\", subapp)\n\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/sub/\")\n    assert 200 == resp.status\n    await resp.text()\n    assert middleware_annotation_seen_values == [\n        \"annotation_value/1\",\n        \"annotation_value/2\",\n    ]\n\n    # check that attributes from sub_handler are not applied to handler\n    del middleware_annotation_seen_values[:]\n    resp = await client.get(\"/r2\")\n    assert 200 == resp.status\n    assert middleware_annotation_seen_values == []\n\n\n@pytest.fixture\ndef cli(loop: Any, aiohttp_client: Any):\n    async def handler(request):\n        return web.Response(text=\"OK\")\n\n    def wrapper(extra_middlewares):\n        app = web.Application()\n        app.router.add_route(\"GET\", \"/resource1\", handler)\n        app.router.add_route(\"GET\", \"/resource2/\", handler)\n        app.router.add_route(\"GET\", \"/resource1/a/b\", handler)\n        app.router.add_route(\"GET\", \"/resource2/a/b/\", handler)\n        app.router.add_route(\"GET\", \"/resource2/a/b%2Fc/\", handler)\n        app.middlewares.extend(extra_middlewares)\n        return aiohttp_client(app, server_kwargs={\"skip_url_asserts\": True})\n\n    return wrapper\n\n\nclass TestNormalizePathMiddleware:\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1\", 200),\n            (\"/resource1/\", 404),\n            (\"/resource2\", 200),\n            (\"/resource2/\", 200),\n            (\"/resource1?p1=1&p2=2\", 200),\n            (\"/resource1/?p1=1&p2=2\", 404),\n            (\"/resource2?p1=1&p2=2\", 200),\n            (\"/resource2/?p1=1&p2=2\", 200),\n            (\"/resource2/a/b%2Fc\", 200),\n            (\"/resource2/a/b%2Fc/\", 200),\n        ],\n    )\n    async def test_add_trailing_when_necessary(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [web.normalize_path_middleware(merge_slashes=False)]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1\", 200),\n            (\"/resource1/\", 200),\n            (\"/resource2\", 404),\n            (\"/resource2/\", 200),\n            (\"/resource1?p1=1&p2=2\", 200),\n            (\"/resource1/?p1=1&p2=2\", 200),\n            (\"/resource2?p1=1&p2=2\", 404),\n            (\"/resource2/?p1=1&p2=2\", 200),\n            (\"/resource2/a/b%2Fc\", 404),\n            (\"/resource2/a/b%2Fc/\", 200),\n            (\"/resource12\", 404),\n            (\"/resource12345\", 404),\n        ],\n    )\n    async def test_remove_trailing_when_necessary(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [\n            web.normalize_path_middleware(\n                append_slash=False, remove_slash=True, merge_slashes=False\n            )\n        ]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1\", 200),\n            (\"/resource1/\", 404),\n            (\"/resource2\", 404),\n            (\"/resource2/\", 200),\n            (\"/resource1?p1=1&p2=2\", 200),\n            (\"/resource1/?p1=1&p2=2\", 404),\n            (\"/resource2?p1=1&p2=2\", 404),\n            (\"/resource2/?p1=1&p2=2\", 200),\n            (\"/resource2/a/b%2Fc\", 404),\n            (\"/resource2/a/b%2Fc/\", 200),\n        ],\n    )\n    async def test_no_trailing_slash_when_disabled(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [\n            web.normalize_path_middleware(append_slash=False, merge_slashes=False)\n        ]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1/a/b\", 200),\n            (\"//resource1//a//b\", 200),\n            (\"//resource1//a//b/\", 404),\n            (\"///resource1//a//b\", 200),\n            (\"/////resource1/a///b\", 200),\n            (\"/////resource1/a//b/\", 404),\n            (\"/resource1/a/b?p=1\", 200),\n            (\"//resource1//a//b?p=1\", 200),\n            (\"//resource1//a//b/?p=1\", 404),\n            (\"///resource1//a//b?p=1\", 200),\n            (\"/////resource1/a///b?p=1\", 200),\n            (\"/////resource1/a//b/?p=1\", 404),\n        ],\n    )\n    async def test_merge_slash(self, path: Any, status: Any, cli: Any) -> None:\n        extra_middlewares = [web.normalize_path_middleware(append_slash=False)]\n        client = await cli(extra_middlewares)\n\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1/a/b\", 200),\n            (\"/resource1/a/b/\", 404),\n            (\"//resource2//a//b\", 200),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource1//a//b\", 200),\n            (\"///resource1//a//b/\", 404),\n            (\"/////resource1/a///b\", 200),\n            (\"/////resource1/a///b/\", 404),\n            (\"/resource2/a/b\", 200),\n            (\"//resource2//a//b\", 200),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource2//a//b\", 200),\n            (\"///resource2//a//b/\", 200),\n            (\"/////resource2/a///b\", 200),\n            (\"/////resource2/a///b/\", 200),\n            (\"/resource1/a/b?p=1\", 200),\n            (\"/resource1/a/b/?p=1\", 404),\n            (\"//resource2//a//b?p=1\", 200),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource1//a//b?p=1\", 200),\n            (\"///resource1//a//b/?p=1\", 404),\n            (\"/////resource1/a///b?p=1\", 200),\n            (\"/////resource1/a///b/?p=1\", 404),\n            (\"/resource2/a/b?p=1\", 200),\n            (\"//resource2//a//b?p=1\", 200),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource2//a//b?p=1\", 200),\n            (\"///resource2//a//b/?p=1\", 200),\n            (\"/////resource2/a///b?p=1\", 200),\n            (\"/////resource2/a///b/?p=1\", 200),\n        ],\n    )\n    async def test_append_and_merge_slash(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [web.normalize_path_middleware()]\n\n        client = await cli(extra_middlewares)\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    @pytest.mark.parametrize(\n        \"path, status\",\n        [\n            (\"/resource1/a/b\", 200),\n            (\"/resource1/a/b/\", 200),\n            (\"//resource2//a//b\", 404),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource1//a//b\", 200),\n            (\"///resource1//a//b/\", 200),\n            (\"/////resource1/a///b\", 200),\n            (\"/////resource1/a///b/\", 200),\n            (\"/////resource1/a///b///\", 200),\n            (\"/resource2/a/b\", 404),\n            (\"//resource2//a//b\", 404),\n            (\"//resource2//a//b/\", 200),\n            (\"///resource2//a//b\", 404),\n            (\"///resource2//a//b/\", 200),\n            (\"/////resource2/a///b\", 404),\n            (\"/////resource2/a///b/\", 200),\n            (\"/resource1/a/b?p=1\", 200),\n            (\"/resource1/a/b/?p=1\", 200),\n            (\"//resource2//a//b?p=1\", 404),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource1//a//b?p=1\", 200),\n            (\"///resource1//a//b/?p=1\", 200),\n            (\"/////resource1/a///b?p=1\", 200),\n            (\"/////resource1/a///b/?p=1\", 200),\n            (\"/resource2/a/b?p=1\", 404),\n            (\"//resource2//a//b?p=1\", 404),\n            (\"//resource2//a//b/?p=1\", 200),\n            (\"///resource2//a//b?p=1\", 404),\n            (\"///resource2//a//b/?p=1\", 200),\n            (\"/////resource2/a///b?p=1\", 404),\n            (\"/////resource2/a///b/?p=1\", 200),\n        ],\n    )\n    async def test_remove_and_merge_slash(\n        self, path: Any, status: Any, cli: Any\n    ) -> None:\n        extra_middlewares = [\n            web.normalize_path_middleware(append_slash=False, remove_slash=True)\n        ]\n\n        client = await cli(extra_middlewares)\n        resp = await client.get(path)\n        assert resp.status == status\n        assert resp.url.query == URL(path).query\n\n    async def test_cannot_remove_and_add_slash(self) -> None:\n        with pytest.raises(AssertionError):\n            web.normalize_path_middleware(append_slash=True, remove_slash=True)\n\n    @pytest.mark.parametrize(\n        [\"append_slash\", \"remove_slash\"],\n        [\n            (True, False),\n            (False, True),\n            (False, False),\n        ],\n    )\n    async def test_open_redirects(\n        self, append_slash: bool, remove_slash: bool, aiohttp_client: Any\n    ) -> None:\n        async def handle(request: web.Request) -> web.StreamResponse:\n            pytest.fail(\n                msg=\"Security advisory 'GHSA-v6wp-4m6f-gcjg' test handler \"\n                \"matched unexpectedly\",\n                pytrace=False,\n            )\n\n        app = web.Application(\n            middlewares=[\n                web.normalize_path_middleware(\n                    append_slash=append_slash, remove_slash=remove_slash\n                )\n            ]\n        )\n        app.add_routes([web.get(\"/\", handle), web.get(\"/google.com\", handle)])\n        client = await aiohttp_client(app, server_kwargs={\"skip_url_asserts\": True})\n        resp = await client.get(\"//google.com\", allow_redirects=False)\n        assert resp.status == 308\n        assert resp.headers[\"Location\"] == \"/google.com\"\n        assert resp.url.query == URL(\"//google.com\").query\n\n\nasync def test_bug_3669(aiohttp_client: Any):\n    async def paymethod(request):\n        return web.Response(text=\"OK\")\n\n    app = web.Application()\n    app.router.add_route(\"GET\", \"/paymethod\", paymethod)\n    app.middlewares.append(\n        web.normalize_path_middleware(append_slash=False, remove_slash=True)\n    )\n\n    client = await aiohttp_client(app, server_kwargs={\"skip_url_asserts\": True})\n\n    resp = await client.get(\"/paymethods\")\n    assert resp.status == 404\n    assert resp.url.path != \"/paymethod\"\n\n\nasync def test_old_style_middleware(loop: Any, aiohttp_client: Any) -> None:\n    async def view_handler(request):\n        return web.Response(body=b\"OK\")\n\n    with pytest.warns(DeprecationWarning, match=\"Middleware decorator is deprecated\"):\n\n        @web.middleware\n        async def middleware(request, handler):\n            resp = await handler(request)\n            assert 200 == resp.status\n            resp.set_status(201)\n            resp.text = resp.text + \"[old style middleware]\"\n            return resp\n\n    app = web.Application(middlewares=[middleware])\n    app.router.add_route(\"GET\", \"/\", view_handler)\n    client = await aiohttp_client(app)\n    resp = await client.get(\"/\")\n    assert 201 == resp.status\n    txt = await resp.text()\n    assert \"OK[old style middleware]\" == txt\n\n\nasync def test_new_style_middleware_class(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(body=b\"OK\")\n\n    class Middleware:\n        async def __call__(self, request, handler):\n            resp = await handler(request)\n            assert 200 == resp.status\n            resp.set_status(201)\n            resp.text = resp.text + \"[new style middleware]\"\n            return resp\n\n    with pytest.warns(None) as warning_checker:\n        app = web.Application()\n        app.middlewares.append(Middleware())\n        app.router.add_route(\"GET\", \"/\", handler)\n        client = await aiohttp_client(app)\n        resp = await client.get(\"/\")\n        assert 201 == resp.status\n        txt = await resp.text()\n        assert \"OK[new style middleware]\" == txt\n\n    assert len(warning_checker) == 0\n\n\nasync def test_new_style_middleware_method(loop: Any, aiohttp_client: Any) -> None:\n    async def handler(request):\n        return web.Response(body=b\"OK\")\n\n    class Middleware:\n        async def call(self, request, handler):\n            resp = await handler(request)\n            assert 200 == resp.status\n            resp.set_status(201)\n            resp.text = resp.text + \"[new style middleware]\"\n            return resp\n\n    with pytest.warns(None) as warning_checker:\n        app = web.Application()\n        app.middlewares.append(Middleware().call)\n        app.router.add_route(\"GET\", \"/\", handler)\n        client = await aiohttp_client(app)\n        resp = await client.get(\"/\")\n        assert 201 == resp.status\n        txt = await resp.text()\n        assert \"OK[new style middleware]\" == txt\n\n    assert len(warning_checker) == 0\n", "patch": "@@ -361,6 +361,38 @@ async def test_cannot_remove_and_add_slash(self) -> None:\n         with pytest.raises(AssertionError):\n             web.normalize_path_middleware(append_slash=True, remove_slash=True)\n \n+    @pytest.mark.parametrize(\n+        [\"append_slash\", \"remove_slash\"],\n+        [\n+            (True, False),\n+            (False, True),\n+            (False, False),\n+        ],\n+    )\n+    async def test_open_redirects(\n+        self, append_slash: bool, remove_slash: bool, aiohttp_client: Any\n+    ) -> None:\n+        async def handle(request: web.Request) -> web.StreamResponse:\n+            pytest.fail(\n+                msg=\"Security advisory 'GHSA-v6wp-4m6f-gcjg' test handler \"\n+                \"matched unexpectedly\",\n+                pytrace=False,\n+            )\n+\n+        app = web.Application(\n+            middlewares=[\n+                web.normalize_path_middleware(\n+                    append_slash=append_slash, remove_slash=remove_slash\n+                )\n+            ]\n+        )\n+        app.add_routes([web.get(\"/\", handle), web.get(\"/google.com\", handle)])\n+        client = await aiohttp_client(app, server_kwargs={\"skip_url_asserts\": True})\n+        resp = await client.get(\"//google.com\", allow_redirects=False)\n+        assert resp.status == 308\n+        assert resp.headers[\"Location\"] == \"/google.com\"\n+        assert resp.url.query == URL(\"//google.com\").query\n+\n \n async def test_bug_3669(aiohttp_client: Any):\n     async def paymethod(request):", "file_path": "files/2021_2/62", "file_language": "py", "file_name": "tests/test_web_middleware.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
