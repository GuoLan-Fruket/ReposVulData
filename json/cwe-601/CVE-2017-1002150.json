{"index": 2308, "cve_id": "CVE-2017-1002150", "cwe_id": ["CWE-601"], "cve_language": "Python", "cve_description": "python-fedora 0.8.0 and lower is vulnerable to an open redirect resulting in loss of CSRF protection", "cvss": "6.1", "publish_date": "September 14, 2017", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "b27f38a67573f4c989710c9bfb726dd4c1eeb929", "commit_message": "Disable covert redirects and CSRF token leaking\n\nThis disallows the url() function from returning any remote URLs.\nThis prevents covert redirects, and also prevents us from leaking\nCSRF tokens to outside parties.\n\nSigned-off-by: Patrick Uiterwijk <puiterwijk@redhat.com>", "commit_date": "2017-05-05T17:17:07Z", "project": "fedora-infra/python-fedora", "url": "https://api.github.com/repos/fedora-infra/python-fedora/commits/b27f38a67573f4c989710c9bfb726dd4c1eeb929", "html_url": "https://github.com/fedora-infra/python-fedora/commit/b27f38a67573f4c989710c9bfb726dd4c1eeb929", "windows_before": [{"commit_id": "b0e1a437b574a3b4950aeb64e30d3350b4d29c8f", "commit_date": "Fri May 5 19:16:35 2017 +0200", "commit_message": "Bump version to 0.9.0", "files_name": ["NEWS", "fedora/release.py"]}, {"commit_id": "6cf9094e12361a0aa306752e9d9fd8bfaaf51c85", "commit_date": "Fri May 5 15:45:17 2017 +0200", "commit_message": "Make sure permissions on cookie files are set sanely", "files_name": ["fedora/client/__init__.py", "fedora/client/openidbaseclient.py"]}, {"commit_id": "e9b17d3d729dfe0ef6562aeb15eabd96e6ab91a4", "commit_date": "Thu May 4 14:00:02 2017 -0400", "commit_message": "Merge pull request #199 from bowlofeggs/1445294", "files_name": ["af867148ee3ae94adef47480729efc0e22c6541c - Wed May 3 17:50:49 2017 -0400 : Modify Bodhi2Client to retry on AuthError after deleting session.", "fedora/client/bodhi.py"]}, {"commit_id": "ac4b9e714000e1a721dadf96b203de79e2e73b25", "commit_date": "Wed May 3 17:08:55 2017 -0400", "commit_message": "requires_login() now handles 403's correctly.", "files_name": ["fedora/client/openidbaseclient.py"]}, {"commit_id": "011c7cb0453c24070cfc8107eef6ba699c49dd1f", "commit_date": "Wed Mar 29 22:28:15 2017 +0200", "commit_message": "Use split out python-openidc-client", "files_name": ["fedora/client/openidcclient.py", "requirements.txt", "setup.py"]}, {"commit_id": "f3ec796db9f3acc2a78444166cd777ebfbe59188", "commit_date": "Tue Feb 21 13:32:54 2017 -0500", "commit_message": "Deprecate fedora.client.bindings.", "files_name": ["NEWS", "fedora/client/bodhi.py"]}, {"commit_id": "3196f5ebfb8e64678ec255320bd2200402ece855", "commit_date": "Tue Feb 21 10:14:31 2017 -0800", "commit_message": "Fix detection of update ID as query in BodhiClient", "files_name": ["fedora/client/bodhi.py"]}, {"commit_id": "e59bf379aab2635dcfe075736ba640ffdcea2b05", "commit_date": "Thu Feb 16 15:42:51 2017 -0600", "commit_message": "Merge pull request #191 from fedora-infra/fix-oidc", "files_name": ["108e3805ba82a6f947e827def0e6177e328d0ed3 - Thu Feb 16 21:30:35 2017 +0000 : Add some fixes to openidcclient", "fedora/client/openidcclient.py"]}, {"commit_id": "a80421329c3a76ec87ee04eb8233ee762172235b", "commit_date": "Mon Dec 5 12:22:47 2016 +0000", "commit_message": "Add OpenIDCBaseClient", "files_name": ["fedora/client/openidcclient.py"]}, {"commit_id": "225b3db14f9387362ae46a350af06383c8025b94", "commit_date": "Sat Jul 9 11:33:54 2016 +0300", "commit_message": "Fix bodhi client password setter (#185)", "files_name": ["fedora/client/bodhi.py"]}, {"commit_id": "c2b7dad71dd8f2172496f8410dc6246ce4359ff9", "commit_date": "Thu May 5 15:16:28 2016 +0200", "commit_message": "Make password in bodhi client settable", "files_name": ["fedora/client/bodhi.py"]}, {"commit_id": "52f95946aeab0c9e85677d93db9fcbc991d68dac", "commit_date": "Sun Apr 24 09:05:23 2016 +0000", "commit_message": "Also ship README.rst", "files_name": ["MANIFEST.in"]}, {"commit_id": "ee9b025ed9c5b72e7f8f1f289a09257c75553375", "commit_date": "Fri Apr 22 07:23:44 2016 +0000", "commit_message": "Update translations from Zanata", "files_name": ["translations/ca.po", "translations/cs.po", "translations/da.po", "translations/de.po", "translations/es.po", "translations/fr.po", "translations/hu.po", "translations/it.po", "translations/ja.po", "translations/nl.po", "translations/pl.po", "translations/pt.po", "translations/pt_BR.po", "translations/python-fedora.pot", "translations/ru.po", "translations/sv.po", "translations/th.po", "translations/tr.po", "translations/uk.po", "translations/zh_CN.po", "translations/zh_TW.po"]}, {"commit_id": "3559be03158aa905122de563aab241bd1ca4d6ee", "commit_date": "Thu Apr 21 16:44:23 2016 +0000", "commit_message": "Release 0.8.0 release notes and version bump", "files_name": ["NEWS", "README.rst", "fedora/release.py", "zanata.xml"]}, {"commit_id": "88b5cd25d55a064ca4c3320ed068ae4feda08a90", "commit_date": "Thu Apr 21 18:47:03 2016 +0200", "commit_message": "Merge pull request #183 from fedora-infra/drop-flask_fas", "files_name": ["0b0af2047eb2cb1156c593c1951bd6eb5fe95629 - Thu Apr 21 16:45:15 2016 +0000 : Drop flask_fas compatibility layer", "flask_fas.py"]}, {"commit_id": "a24e9f38318375fa3c8598cd0a8eb911bc88056e", "commit_date": "Thu Apr 21 17:39:05 2016 +0200", "commit_message": "Merge pull request #182 from fedora-infra/fix-1317579", "files_name": ["8478de3a0b218ac209a31d57b89cafcee42fc6ce - Thu Apr 21 15:28:49 2016 +0000 : openidbaseclient: clear cookies on login", "fedora/client/openidbaseclient.py"]}, {"commit_id": "c2f5b72561320f4e4bf57e0ed6d2de83e07b0ef0", "commit_date": "Thu Apr 14 11:18:10 2016 +0200", "commit_message": "Merge pull request #181 from fedora-infra/fix-my-bz-account", "files_name": ["7746f8df9be258335f8edf4bc21476e6b6838027 - Thu Apr 14 11:14:45 2016 +0200 : fas2: Drop the override on my email address", "fedora/client/fas2.py"]}, {"commit_id": "0f12744f76c91bd0e0f502a390647ca5c1e72621", "commit_date": "Thu Mar 3 17:00:26 2016 +0100", "commit_message": "Merge pull request #180 from Fale/fix/doc", "files_name": ["a57c463f3e9954d374abb217694a3c94761c85e3 - Sun Feb 7 10:41:07 2016 +0100 : Fields expects an array and not a string", "fedora/client/fas2.py"]}, {"commit_id": "7b196ada993a00e92eb073e7ea50f852c7139133", "commit_date": "Mon Jan 25 09:37:23 2016 -0500", "commit_message": "Merge pull request #175 from scop/oldcruft", "files_name": ["d8801b20563d7ce7f799637b1c145f2358062355 - Mon Jan 25 09:36:29 2016 -0500 : Merge pull request #176 from scop/imports", "9faf5013d5f89fd76d6ba9566d30df7c216b3116 - Mon Jan 25 09:36:13 2016 -0500 : Merge pull request #177 from scop/py3", "73fc635c834c0a6a2bb6508a9f596fe884ce92a7 - Wed Jan 13 15:24:38 2016 +0100 : Merge pull request #179 from fedora-infra/flask-fas-security", "b53f5885465fbcff43afefb653e3a20fa3d98c69 - Wed Jan 13 15:18:46 2016 +0100 : Check provider endpoint", "flask_fas_openid.py"]}, {"commit_id": "b2b805d776a81ca67668e11c6b208f16e6b3d00f", "commit_date": "Mon Jan 11 16:21:59 2016 -0500", "commit_message": "Merge branch 'release/0.7.1' into develop", "files_name": ["71c9624c9b0e1fbe65636ede94b1b6faede1cc02 - Mon Jan 11 16:09:33 2016 -0500 : 0.7.1", "NEWS", "README.rst", "fedora/release.py"]}, {"commit_id": "e06c14e48298582d309dcbeb350ff307d0a689a4", "commit_date": "Mon Jan 11 15:42:56 2016 -0500", "commit_message": "Merge pull request #178 from scop/configparser-regression", "files_name": ["6808827c92e1bcfa74de90374a3a970eff892049 - Mon Jan 11 22:40:07 2016 +0200 : configparser.getboolean,getint do not have the raw kwarg", "fedora/client/bodhi.py"]}, {"commit_id": "0a30202f678125f8d86e178d4af623cee32b817d", "commit_date": "Sun Jan 10 13:36:57 2016 +0200", "commit_message": "Python 3 fixes", "files_name": ["fedora/client/baseclient.py", "fedora/client/fas2.py", "fedora/client/wiki.py", "fedora/tg/widgets.py"]}, {"commit_id": "e8c7cf29c191da69c91d3325dbc8279713c55299", "commit_date": "Sun Jan 10 12:54:24 2016 +0200", "commit_message": "Remove unused imports", "files_name": ["fedora/client/bodhi.py", "fedora/client/openidproxyclient.py", "fedora/django/__init__.py"]}, {"commit_id": "0609c7c19037632ccd33834f767bf90e15b936c6", "commit_date": "Sun Jan 10 12:41:34 2016 +0200", "commit_message": "Remove Python < 2.5 cruft", "files_name": ["fedora/client/fas2.py", "fedora/client/proxyclient.py", "fedora/compat25/__init__.py", "fedora/tg/identity/jsonfasprovider2.py", "fedora/tg2/utils.py", "fedora/wsgi/csrf.py"]}, {"commit_id": "363ec9dca394acaec8b712a0e391a9a77112c87f", "commit_date": "Thu Jan 7 14:56:24 2016 -0500", "commit_message": "Python3 print statements.", "files_name": ["flask_fas.py"]}, {"commit_id": "df5aa5906a76e5f995a854c34a91f5b2f7c43d43", "commit_date": "Thu Jan 7 10:53:31 2016 -0500", "commit_message": "Merge branch 'release/0.7.0' into develop", "files_name": ["4322ee7dd3172c62fc475375249527e640cf4833 - Thu Jan 7 10:09:27 2016 -0500 : 0.7.0", "NEWS", "README.rst", "fedora/release.py"]}, {"commit_id": "1d978d5f4f21e0f24039d348dcc1d9f6f99f155c", "commit_date": "Thu Jan 7 10:06:34 2016 -0500", "commit_message": "Update translations.", "files_name": ["translations/af.po", "translations/am.po", "translations/anp.po", "translations/ar.po", "translations/as.po", "translations/ast.po", "translations/bal.po", "translations/be.po", "translations/bg.po", "translations/bn.po", "translations/bn_IN.po", "translations/bo.po", "translations/br.po", "translations/brx.po", "translations/bs.po", "translations/ca.po", "translations/cs.po", "translations/cy.po", "translations/da.po", "translations/de.po", "translations/de_CH.po", "translations/el.po", "translations/en_GB.po", "translations/eo.po", "translations/es.po", "translations/et.po", "translations/eu.po", "translations/fa.po", "translations/fi.po", "translations/fr.po", "translations/gl.po", "translations/gu.po", "translations/he.po", "translations/hi.po", "translations/hr.po", "translations/hu.po", "translations/ia.po", "translations/id.po", "translations/ilo.po", "translations/is.po", "translations/it.po", "translations/ja.po", "translations/ka.po", "translations/kk.po", "translations/km.po", "translations/kn.po", "translations/ko.po", "translations/kw.po", "translations/kw@kkcor.po", "translations/kw@uccor.po", "translations/kw_GB.po", "translations/ky.po", "translations/lv.po", "translations/mai.po", "translations/mk.po", "translations/ml.po", "translations/mn.po", "translations/mr.po", "translations/ms.po", "translations/nb.po", "translations/nds.po", "translations/ne.po", "translations/nl.po"]}], "windows_after": [{"commit_id": "b0e1a437b574a3b4950aeb64e30d3350b4d29c8f", "commit_date": "Fri May 5 19:16:35 2017 +0200", "commit_message": "Bump version to 0.9.0", "files_name": ["NEWS", "fedora/release.py"]}, {"commit_id": "76e83a7b169916fc7f1c051e3085415c5c1daadb", "commit_date": "Thu Aug 24 17:37:17 2017 -0400", "commit_message": "Sync the hot-fixed fas2.py from the Ansible repo", "files_name": ["fedora/client/fas2.py"]}, {"commit_id": "3924b0979506f7562c1484ff90c112682c1ef92f", "commit_date": "Tue Dec 5 15:02:29 2017 +0100", "commit_message": "Expose the init_app() method in flask_fas_openid", "files_name": ["flask_fas_openid.py"]}, {"commit_id": "bba172a1a601dc4b02f85da073933dcb6b69d047", "commit_date": "Thu Dec 7 10:11:51 2017 +0100", "commit_message": "Merge pull request #203 from fedora-infra/fix_flask", "files_name": ["18d9c8ac36f219fce5ae029f7a512a8f09993d8c - Mon Jan 22 17:37:04 2018 +0100 : Fix Python 3 incompatibility", "fedora/client/openidbaseclient.py"]}, {"commit_id": "adc4d03e4db8eb8556232576dd361e7342bc7144", "commit_date": "Thu Sep 21 17:01:42 2017 +0200", "commit_message": "Prevent people from injecting // urls", "files_name": ["fedora/tg/utils.py"]}, {"commit_id": "4dae731b00bd937ce01844a5a32462a54fcb624b", "commit_date": "Thu Feb 1 12:24:32 2018 +0100", "commit_message": "Bump version to 0.10.0", "files_name": ["NEWS", "fedora/release.py"]}, {"commit_id": "5fbcce3feffb63dbd50623f8d6cb0e354bce7add", "commit_date": "Fri Feb 16 10:35:20 2018 +0100", "commit_message": "Fix the URL in the metadata of the package", "files_name": ["fedora/release.py"]}, {"commit_id": "80be6f8af31b55888a8004ab2879e8e249238cc0", "commit_date": "Wed Jul 25 19:56:08 2018 +0200", "commit_message": "Add a Development environment section to the Readme", "files_name": ["README.rst", "test_requirements.txt"]}, {"commit_id": "4719f10b3af1cf068e969387eab7df7e935003cd", "commit_date": "Mon Jul 16 20:39:36 2018 +0530", "commit_message": "Make flask_fas_openid compatible with flask >= 1.0", "files_name": ["flask_fas_openid.py"]}, {"commit_id": "ad1e87c04aca6860e9273039a3a11bfd483ad56d", "commit_date": "Mon Jul 23 15:20:00 2018 -0400", "commit_message": "Remove fedora.client.bodhi.", "files_name": ["NEWS", "fedora/client/__init__.py", "fedora/client/bodhi.py"]}, {"commit_id": "5262fc996672920f2e9b191fd7b9048549276a3b", "commit_date": "Wed Aug 15 17:20:06 2018 +0530", "commit_message": "correction in doc. changed path for module 'AccountSystem' from 'fedora.accounts.fas2.AccountSystem' to 'fedora.client.fas2.AccountSystem'", "files_name": ["README.rst", "doc/client.rst"]}, {"commit_id": "9ea4f214a586faafd5c447e91840edb6a9ab105b", "commit_date": "Tue Aug 14 12:07:52 2018 -0400", "commit_message": "Add support for PUT and DELETE requests to OpenIdBaseClient 'send_request' method.", "files_name": ["fedora/client/openidbaseclient.py"]}, {"commit_id": "ba67c3487990edc66f1f48d689e32a0992bd2f15", "commit_date": "Tue Jul 31 14:40:28 2018 +0200", "commit_message": "The encoding arg of json.loads() is ignored and deprecated", "files_name": ["fedora/client/openidbaseclient.py"]}, {"commit_id": "6e822e764caf22bfab105b5f0395720137b13c38", "commit_date": "Fri Oct 12 16:57:51 2018 +0200", "commit_message": "Remove self argument in super() call", "files_name": ["fedora/client/openidcclient.py"]}, {"commit_id": "9bfb521069550e4502951f58d599a6852b12c0e1", "commit_date": "Fri Oct 12 16:59:30 2018 +0200", "commit_message": "Allow passing the client_secret.", "files_name": ["fedora/client/openidcclient.py"]}, {"commit_id": "ee25c1106b7274d8b63c2e89f5c4bd1d357da1ce", "commit_date": "Tue Sep 18 14:38:33 2018 +0000", "commit_message": "Remove repetition from FedoraClientError docstring", "files_name": ["fedora/client/__init__.py"]}, {"commit_id": "895ccd77269ea791d96b24be2e2ed4e2be0b1133", "commit_date": "Tue Sep 18 14:43:54 2018 +0000", "commit_message": "Add missing blankline in ProxyClient docstring", "files_name": ["fedora/client/proxyclient.py"]}, {"commit_id": "8638e3e3cb1b90d826f99b00313097d2a4c2f6fa", "commit_date": "Mon Jan 21 21:13:50 2019 +0530", "commit_message": "add .cico.pipeline", "files_name": [".cico.pipeline"]}, {"commit_id": "3dae508d53e6fa8bcb08bcc0fc4aebf9dd512e92", "commit_date": "Thu Feb 1 13:07:08 2018 +0100", "commit_message": "Start nuking old framework support", "files_name": ["NEWS", "doc/CSRF.rst", "doc/django.rst", "doc/flask_fas.rst", "fedora/django/__init__.py", "fedora/django/auth/__init__.py", "fedora/django/auth/backends.py", "fedora/django/auth/management/__init__.py", "fedora/django/auth/middleware.py", "fedora/django/auth/models.py", "fedora/tg/__init__.py", "fedora/tg/client.py", "fedora/tg/controllers.py", "fedora/tg/identity/__init__.py", "fedora/tg/identity/jsonfasprovider1.py", "fedora/tg/identity/jsonfasprovider2.py", "fedora/tg/identity/soprovidercsrf.py", "fedora/tg/json.py", "fedora/tg/templates/__init__.py", "fedora/tg/templates/genshi/__init__.py", "fedora/tg/templates/genshi/jsglobals.html", "fedora/tg/templates/genshi/login.html", "fedora/tg/tg1utils.py", "fedora/tg/tg2utils.py", "fedora/tg/util.py", "fedora/tg/utils.py", "fedora/tg/visit/__init__.py", "fedora/tg/visit/jsonfasvisit1.py", "fedora/tg/visit/jsonfasvisit2.py", "fedora/tg/widgets.py", "fedora/tg2/__init__.py", "fedora/tg2/templates/__init__.py", "fedora/tg2/templates/genshi/__init__.py", "fedora/tg2/templates/genshi/jsglobals.html", "fedora/tg2/templates/genshi/login.html", "fedora/tg2/templates/mako/__init__.py", "fedora/tg2/templates/mako/jsglobals.mak", "fedora/tg2/templates/mako/login.mak", "fedora/tg2/utils.py", "setup.py"]}, {"commit_id": "c8d7a1ef97a2c9c657531d4b0a56bfbaedf411cc", "commit_date": "Thu Jan 30 10:09:22 2020 +0100", "commit_message": "Prepare 1.0.0 release", "files_name": ["NEWS", "fedora/release.py", "setup.py"]}, {"commit_id": "2c92201357387b259dac9d3607fef42bfe129bf6", "commit_date": "Sat May 9 12:53:44 2020 +0200", "commit_message": "The encoding arg of json.loads() is ignored and deprecated (fixup)", "files_name": ["fedora/client/openidbaseclient.py"]}, {"commit_id": "8fe96953277a1c2cde42ee8b6c404646f00f30d0", "commit_date": "Mon Oct 26 09:58:51 2020 +0100", "commit_message": "Support the new AAA system", "files_name": ["NEWS", "flask_fas_openid.py"]}, {"commit_id": "baea8c22208ea26c7ed59d82caed3fa9def4e699", "commit_date": "Tue Oct 27 16:35:23 2020 +0100", "commit_message": "Version 1.1.0", "files_name": ["fedora/release.py"]}, {"commit_id": "1747536af64abea92b96893ebc86c19d8ee47057", "commit_date": "Sat Nov 7 17:18:24 2020 -0500", "commit_message": "Fix typos", "files_name": ["NEWS", "doc/flask_fas_openid.rst"]}, {"commit_id": "37dd3de0ba58cc2ce16ca842240bd8435362b5c5", "commit_date": "Wed Nov 25 16:08:51 2020 +0100", "commit_message": "Always request membership of the signed_fpca group", "files_name": ["NEWS", "flask_fas_openid.py"]}, {"commit_id": "f34dda7210f5d82cea3e8ead72b8b496091859c7", "commit_date": "Wed Nov 25 16:09:39 2020 +0100", "commit_message": "Version 1.1.1", "files_name": ["NEWS", "fedora/release.py"]}, {"commit_id": "54b015371c944f23a4c49f30ef914fd658ff0c94", "commit_date": "Wed Nov 25 16:23:34 2020 +0100", "commit_message": "Accept the requested groups list as a set", "files_name": ["NEWS", "flask_fas_openid.py"]}], "parents": [{"commit_id_before": "6cf9094e12361a0aa306752e9d9fd8bfaaf51c85", "url_before": "https://api.github.com/repos/fedora-infra/python-fedora/commits/6cf9094e12361a0aa306752e9d9fd8bfaaf51c85", "html_url_before": "https://github.com/fedora-infra/python-fedora/commit/6cf9094e12361a0aa306752e9d9fd8bfaaf51c85"}], "details": [{"raw_url": "https://github.com/fedora-infra/python-fedora/raw/b27f38a67573f4c989710c9bfb726dd4c1eeb929/fedora%2Ftg%2Futils.py", "code": "# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2008-2012  Red Hat, Inc.\n# Copyright (C) 2008  Ricky Zhou\n# This file is part of python-fedora\n#\n# python-fedora is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# python-fedora is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with python-fedora; if not, see <http://www.gnu.org/licenses/>\n#\n'''\nMiscellaneous functions of use on a TurboGears Server\n\n.. versionchanged:: 0.3.14\n   Save the original turbogears.url function as :func:`fedora.tg.util.tg_url`\n\n.. versionchanged:: 0.3.17\n   Renamed from fedora.tg.util\n\n.. versionchanged:: 0.3.25\n   Renamed from fedora.tg.tg1utils\n\n.. moduleauthor:: Toshio Kuratomi <tkuratom@redhat.com>\n.. moduleauthor:: Ricky Zhou <ricky@fedoraproject.org>\n'''\nfrom itertools import chain\nimport cgi\nimport os\n\nimport cherrypy\nfrom cherrypy import request\nfrom decorator import decorator\nimport pkg_resources\nimport turbogears\nfrom turbogears import flash, redirect, config, identity\nimport turbogears.util as tg_util\nfrom turbogears.controllers import check_app_root\nfrom turbogears.identity.exceptions import RequestRequiredException\nimport six\nfrom six.moves.urllib.parse import urlencode, urlparse, urlunparse\n\n\n# Save this for people who need the original url() function\ntg_url = turbogears.url\n\n\ndef add_custom_stdvars(new_vars):\n    return new_vars.update({'fedora_template': fedora_template})\n\n\ndef url(tgpath, tgparams=None, **kwargs):\n    '''Computes URLs.\n\n    This is a replacement for :func:`turbogears.controllers.url` (aka\n    :func:`tg.url` in the template).  In addition to the functionality that\n    :func:`tg.url` provides, it adds a token to prevent :term:`CSRF` attacks.\n\n    :arg tgpath:  a list or a string. If the path is absolute (starts\n        with a \"/\"), the :attr:`server.webpath`, :envvar:`SCRIPT_NAME` and\n        the approot of the application are prepended to the path. In order for\n        the approot to be detected properly, the root object should extend\n        :class:`turbogears.controllers.RootController`.\n    :kwarg tgparams: See param: ``kwargs``\n    :kwarg kwargs: Query parameters for the URL can be passed in as a\n        dictionary in the second argument *or* as keyword parameters.\n        Values which are a list or a tuple are used to create multiple\n        key-value pairs.\n    :returns: The changed path\n\n    .. versionadded:: 0.3.10\n       Modified from turbogears.controllers.url for :ref:`CSRF-Protection`\n    '''\n    if not isinstance(tgpath, six.string_types):\n        tgpath = '/'.join(list(tgpath))\n    if not tgpath.startswith('/'):\n        # Do not allow the url() function to be used for external urls.\n        # This function is primarily used in redirect() calls, so this prevents\n        # covert redirects and thus CSRF leaking.\n        tgpath = '/'\n    if tgpath.startswith('/'):\n        webpath = (config.get('server.webpath') or '').rstrip('/')\n        if tg_util.request_available():\n            check_app_root()\n            tgpath = request.app_root + tgpath\n            try:\n                webpath += request.wsgi_environ['SCRIPT_NAME'].rstrip('/')\n            except (AttributeError, KeyError):  # pylint: disable-msg=W0704\n                # :W0704: Lack of wsgi environ is fine... we still have\n                # server.webpath\n                pass\n        tgpath = webpath + tgpath\n    if tgparams is None:\n        tgparams = kwargs\n    else:\n        try:\n            tgparams = tgparams.copy()\n            tgparams.update(kwargs)\n        except AttributeError:\n            raise TypeError(\n                'url() expects a dictionary for query parameters')\n    args = []\n    # Add the _csrf_token\n    try:\n        if identity.current.csrf_token:\n            tgparams.update({'_csrf_token': identity.current.csrf_token})\n    except RequestRequiredException:  # pylint: disable-msg=W0704\n        # :W0704: If we are outside of a request (called from non-controller\n        # methods/ templates) just don't set the _csrf_token.\n        pass\n\n    # Check for query params in the current url\n    query_params = six.iteritems(tgparams)\n    scheme, netloc, path, params, query_s, fragment = urlparse(tgpath)\n    if query_s:\n        query_params = chain((p for p in cgi.parse_qsl(query_s) if p[0] !=\n                              '_csrf_token'), query_params)\n\n    for key, value in query_params:\n        if value is None:\n            continue\n        if isinstance(value, (list, tuple)):\n            pairs = [(key, v) for v in value]\n        else:\n            pairs = [(key, value)]\n        for key, value in pairs:\n            if value is None:\n                continue\n            if isinstance(value, unicode):\n                value = value.encode('utf8')\n            args.append((key, str(value)))\n    query_string = urlencode(args, True)\n    tgpath = urlunparse((scheme, netloc, path, params, query_string, fragment))\n    return tgpath\n\n\n# this is taken from turbogears 1.1 branch\ndef _get_server_name():\n    \"\"\"Return name of the server this application runs on.\n\n    Respects 'Host' and 'X-Forwarded-Host' header.\n\n    See the docstring of the 'absolute_url' function for more information.\n\n    .. note:: This comes from turbogears 1.1 branch.  It is only needed for\n        _tg_absolute_url().  If we find that turbogears.get_server_name()\n        exists, we replace this function with that one.\n    \"\"\"\n    get = config.get\n    h = request.headers\n    host = get('tg.url_domain') or h.get('X-Forwarded-Host', h.get('Host'))\n    if not host:\n        host = '%s:%s' % (get('server.socket_host', 'localhost'),\n                          get('server.socket_port', 8080))\n    return host\n\n\n# this is taken from turbogears 1.1 branch\ndef tg_absolute_url(tgpath='/', params=None, **kw):\n    \"\"\"Return absolute URL (including schema and host to this server).\n\n    Tries to account for 'Host' header and reverse proxying\n    ('X-Forwarded-Host').\n\n    The host name is determined this way:\n\n    * If the config setting 'tg.url_domain' is set and non-null, use this\n      value.\n    * Else, if the 'base_url_filter.use_x_forwarded_host' config setting is\n      True, use the value from the 'Host' or 'X-Forwarded-Host' request header.\n    * Else, if config setting 'base_url_filter.on' is True and\n      'base_url_filter.base_url' is non-null, use its value for the host AND\n      scheme part of the URL.\n    * As a last fallback, use the value of 'server.socket_host' and\n      'server.socket_port' config settings (defaults to 'localhost:8080').\n\n    The URL scheme ('http' or 'http') used is determined in the following way:\n\n    * If 'base_url_filter.base_url' is used, use the scheme from this URL.\n    * If there is a 'X-Use-SSL' request header, use 'https'.\n    * Else, if the config setting 'tg.url_scheme' is set, use its value.\n    * Else, use the value of 'cherrypy.request.scheme'.\n\n    .. note:: This comes from turbogears 1.1 branch with one change: we\n        call tg_url() rather than turbogears.url() so that it never adds the\n        csrf_token\n\n    .. versionadded:: 0.3.19\n       Modified from turbogears.absolute_url() for :ref:`CSRF-Protection`\n    \"\"\"\n    get = config.get\n    use_xfh = get('base_url_filter.use_x_forwarded_host', False)\n    if request.headers.get('X-Use-SSL'):\n        scheme = 'https'\n    else:\n        scheme = get('tg.url_scheme')\n    if not scheme:\n        scheme = request.scheme\n    base_url = '%s://%s' % (scheme, _get_server_name())\n    if get('base_url_filter.on', False) and not use_xfh:\n        base_url = get('base_url_filter.base_url').rstrip('/')\n    return '%s%s' % (base_url, tg_url(tgpath, params, **kw))\n\n\ndef absolute_url(tgpath='/', params=None, **kw):\n    \"\"\"Return absolute URL (including schema and host to this server).\n\n    Tries to account for 'Host' header and reverse proxying\n    ('X-Forwarded-Host').\n\n    The host name is determined this way:\n\n    * If the config setting 'tg.url_domain' is set and non-null, use this\n      value.\n    * Else, if the 'base_url_filter.use_x_forwarded_host' config setting is\n      True, use the value from the 'Host' or 'X-Forwarded-Host' request header.\n    * Else, if config setting 'base_url_filter.on' is True and\n      'base_url_filter.base_url' is non-null, use its value for the host AND\n      scheme part of the URL.\n    * As a last fallback, use the value of 'server.socket_host' and\n      'server.socket_port' config settings (defaults to 'localhost:8080').\n\n    The URL scheme ('http' or 'http') used is determined in the following way:\n\n    * If 'base_url_filter.base_url' is used, use the scheme from this URL.\n    * If there is a 'X-Use-SSL' request header, use 'https'.\n    * Else, if the config setting 'tg.url_scheme' is set, use its value.\n    * Else, use the value of 'cherrypy.request.scheme'.\n\n    .. versionadded:: 0.3.19\n       Modified from turbogears.absolute_url() for :ref:`CSRF-Protection`\n    \"\"\"\n    return url(tg_absolute_url(tgpath, params, **kw))\n\n\ndef enable_csrf():\n    '''A startup function to setup :ref:`CSRF-Protection`.\n\n    This should be run at application startup.  Code like the following in the\n    start-APP script or the method in :file:`commands.py` that starts it::\n\n        from turbogears import startup\n        from fedora.tg.util import enable_csrf\n        startup.call_on_startup.append(enable_csrf)\n\n    If we can get the :ref:`CSRF-Protection` into upstream :term:`TurboGears`,\n    we might be able to remove this in the future.\n\n    .. versionadded:: 0.3.10\n       Added to enable :ref:`CSRF-Protection`\n    '''\n    # Override the turbogears.url function with our own\n    # Note, this also changes turbogears.absolute_url since that calls\n    # turbogears.url\n    turbogears.url = url\n    turbogears.controllers.url = url\n\n    # Ignore the _csrf_token parameter\n    ignore = config.get('tg.ignore_parameters', [])\n    if '_csrf_token' not in ignore:\n        ignore.append('_csrf_token')\n        config.update({'tg.ignore_parameters': ignore})\n\n    # Add a function to the template tg stdvars that looks up a template.\n    turbogears.view.variable_providers.append(add_custom_stdvars)\n\n\ndef request_format():\n    '''Return the output format that was requested by the user.\n\n    The user is able to specify a specific output format using either the\n    ``Accept:`` HTTP header or the ``tg_format`` query parameter.  This\n    function checks both of those to determine what format the reply should\n    be in.\n\n    :rtype: string\n    :returns: The requested format.  If none was specified, 'default' is\n        returned\n\n    .. versionchanged:: 0.3.17\n        Return symbolic names for json, html, xhtml, and xml instead of\n        letting raw mime types through\n    '''\n    output_format = cherrypy.request.params.get('tg_format', '').lower()\n    if not output_format:\n        ### TODO: Two problems with this:\n        # 1) TG lets this be extended via as_format and accept_format.  We need\n        #    tie into that as well somehow.\n        # 2) Decide whether to standardize on \"json\" or \"application/json\"\n        accept = tg_util.simplify_http_accept_header(\n            request.headers.get('Accept', 'default').lower())\n        if accept in ('text/javascript', 'application/json'):\n            output_format = 'json'\n        elif accept == 'text/html':\n            output_format = 'html'\n        elif accept == 'text/plain':\n            output_format = 'plain'\n        elif accept == 'text/xhtml':\n            output_format = 'xhtml'\n        elif accept == 'text/xml':\n            output_format = 'xml'\n        else:\n            output_format = accept\n    return output_format\n\n\ndef jsonify_validation_errors():\n    '''Return an error for :term:`JSON` if validation failed.\n\n    This function checks for two things:\n\n    1) We're expected to return :term:`JSON` data.\n    2) There were errors in the validation process.\n\n    If both of those are true, this function constructs a response that\n    will return the validation error messages as :term:`JSON` data.\n\n    All controller methods that are error_handlers need to use this::\n\n        @expose(template='templates.numberform')\n        def enter_number(self, number):\n            errors = fedora.tg.util.jsonify_validation_errors()\n            if errors:\n                return errors\n            [...]\n\n        @expose(allow_json=True)\n        @error_handler(enter_number)\n        @validate(form=number_form)\n        def save(self, number):\n            return dict(success=True)\n\n    :rtype: None or dict\n    :Returns: None if there are no validation errors or :term:`JSON` isn't\n        requested, otherwise a dictionary with the error that's suitable for\n        return from the controller.  The error message is set in tg_flash\n        whether :term:`JSON` was requested or not.\n    '''\n    # Check for validation errors\n    errors = getattr(cherrypy.request, 'validation_errors', None)\n    if not errors:\n        return None\n\n    # Set the message for both html and json output\n    message = u'\\n'.join([u'%s: %s' % (param, msg) for param, msg in\n                          errors.items()])\n    format = request_format()\n    if format in ('html', 'xhtml'):\n        message.translate({ord('\\n'): u'<br />\\n'})\n    flash(message)\n\n    # If json, return additional information to make this an exception\n    if format == 'json':\n        # Note: explicit setting of tg_template is needed in TG < 1.0.4.4\n        # A fix has been applied for TG-1.0.4.5\n        return dict(exc='Invalid', tg_template='json')\n    return None\n\n\ndef json_or_redirect(forward_url):\n    '''If :term:`JSON` is requested, return a dict, otherwise redirect.\n\n    This is a decorator to use with a method that returns :term:`JSON` by\n    default.  If :term:`JSON` is requested, then it will return the dict from\n    the method.  If :term:`JSON` is not requested, it will redirect to the\n    given URL.  The method that is decorated should be constructed so that it\n    calls turbogears.flash() with a message that will be displayed on the\n    forward_url page.\n\n    Use it like this::\n\n        import turbogears\n\n        @json_or_redirect('http://localhost/calc/')\n        @expose(allow_json=True)\n        def divide(self, dividend, divisor):\n            try:\n                answer = dividend * 1.0 / divisor\n            except ZeroDivisionError:\n                turbogears.flash('Division by zero not allowed')\n                return dict(exc='ZeroDivisionError')\n            turbogears.flash('The quotient is %s' % answer)\n            return dict(quotient=answer)\n\n    In the example, we return either an exception or an answer, using\n    :func:`turbogears.flash` to tell people of the result in either case.  If\n    :term:`JSON` data is requested, the user will get back a :term:`JSON`\n    string with the proper information.  If html is requested, we will be\n    redirected to 'http://localhost/calc/' where the flashed message will be\n    displayed.\n\n    :arg forward_url: If :term:`JSON` was not requested, redirect to this URL\n        after.\n\n    .. versionadded:: 0.3.7\n       To make writing methods that use validation easier\n    '''\n    def call(func, *args, **kwargs):\n        if request_format() == 'json':\n            return func(*args, **kwargs)\n        else:\n            func(*args, **kwargs)\n            raise redirect(forward_url)\n    return decorator(call)\n\nif hasattr(turbogears, 'get_server_name'):\n    _get_server_name = turbogears.get_server_name\n\n\ndef fedora_template(template, template_type='genshi'):\n    '''Function to return the path to a template.\n\n    :arg template: filename of the template itself.  Ex: login.html\n    :kwarg template_type: template language we need the template written in\n        Defaults to 'genshi'\n    :returns: filesystem path to the template\n    '''\n    # :E1101: pkg_resources does have resource_filename\n    # pylint: disable-msg=E1101\n    return pkg_resources.resource_filename(\n        'fedora', os.path.join('tg',\n                               'templates', template_type, template))\n\n__all__ = (\n    'add_custom_stdvars', 'absolute_url', 'enable_csrf',\n    'fedora_template', 'jsonify_validation_errors', 'json_or_redirect',\n    'request_format', 'tg_absolute_url', 'tg_url', 'url')\n", "code_before": "# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2008-2012  Red Hat, Inc.\n# Copyright (C) 2008  Ricky Zhou\n# This file is part of python-fedora\n#\n# python-fedora is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# python-fedora is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with python-fedora; if not, see <http://www.gnu.org/licenses/>\n#\n'''\nMiscellaneous functions of use on a TurboGears Server\n\n.. versionchanged:: 0.3.14\n   Save the original turbogears.url function as :func:`fedora.tg.util.tg_url`\n\n.. versionchanged:: 0.3.17\n   Renamed from fedora.tg.util\n\n.. versionchanged:: 0.3.25\n   Renamed from fedora.tg.tg1utils\n\n.. moduleauthor:: Toshio Kuratomi <tkuratom@redhat.com>\n.. moduleauthor:: Ricky Zhou <ricky@fedoraproject.org>\n'''\nfrom itertools import chain\nimport cgi\nimport os\n\nimport cherrypy\nfrom cherrypy import request\nfrom decorator import decorator\nimport pkg_resources\nimport turbogears\nfrom turbogears import flash, redirect, config, identity\nimport turbogears.util as tg_util\nfrom turbogears.controllers import check_app_root\nfrom turbogears.identity.exceptions import RequestRequiredException\nimport six\nfrom six.moves.urllib.parse import urlencode, urlparse, urlunparse\n\n\n# Save this for people who need the original url() function\ntg_url = turbogears.url\n\n\ndef add_custom_stdvars(new_vars):\n    return new_vars.update({'fedora_template': fedora_template})\n\n\ndef url(tgpath, tgparams=None, **kwargs):\n    '''Computes URLs.\n\n    This is a replacement for :func:`turbogears.controllers.url` (aka\n    :func:`tg.url` in the template).  In addition to the functionality that\n    :func:`tg.url` provides, it adds a token to prevent :term:`CSRF` attacks.\n\n    :arg tgpath:  a list or a string. If the path is absolute (starts\n        with a \"/\"), the :attr:`server.webpath`, :envvar:`SCRIPT_NAME` and\n        the approot of the application are prepended to the path. In order for\n        the approot to be detected properly, the root object should extend\n        :class:`turbogears.controllers.RootController`.\n    :kwarg tgparams: See param: ``kwargs``\n    :kwarg kwargs: Query parameters for the URL can be passed in as a\n        dictionary in the second argument *or* as keyword parameters.\n        Values which are a list or a tuple are used to create multiple\n        key-value pairs.\n    :returns: The changed path\n\n    .. versionadded:: 0.3.10\n       Modified from turbogears.controllers.url for :ref:`CSRF-Protection`\n    '''\n    if not isinstance(tgpath, six.string_types):\n        tgpath = '/'.join(list(tgpath))\n    if tgpath.startswith('/'):\n        webpath = (config.get('server.webpath') or '').rstrip('/')\n        if tg_util.request_available():\n            check_app_root()\n            tgpath = request.app_root + tgpath\n            try:\n                webpath += request.wsgi_environ['SCRIPT_NAME'].rstrip('/')\n            except (AttributeError, KeyError):  # pylint: disable-msg=W0704\n                # :W0704: Lack of wsgi environ is fine... we still have\n                # server.webpath\n                pass\n        tgpath = webpath + tgpath\n    if tgparams is None:\n        tgparams = kwargs\n    else:\n        try:\n            tgparams = tgparams.copy()\n            tgparams.update(kwargs)\n        except AttributeError:\n            raise TypeError(\n                'url() expects a dictionary for query parameters')\n    args = []\n    # Add the _csrf_token\n    try:\n        if identity.current.csrf_token:\n            tgparams.update({'_csrf_token': identity.current.csrf_token})\n    except RequestRequiredException:  # pylint: disable-msg=W0704\n        # :W0704: If we are outside of a request (called from non-controller\n        # methods/ templates) just don't set the _csrf_token.\n        pass\n\n    # Check for query params in the current url\n    query_params = six.iteritems(tgparams)\n    scheme, netloc, path, params, query_s, fragment = urlparse(tgpath)\n    if query_s:\n        query_params = chain((p for p in cgi.parse_qsl(query_s) if p[0] !=\n                              '_csrf_token'), query_params)\n\n    for key, value in query_params:\n        if value is None:\n            continue\n        if isinstance(value, (list, tuple)):\n            pairs = [(key, v) for v in value]\n        else:\n            pairs = [(key, value)]\n        for key, value in pairs:\n            if value is None:\n                continue\n            if isinstance(value, unicode):\n                value = value.encode('utf8')\n            args.append((key, str(value)))\n    query_string = urlencode(args, True)\n    tgpath = urlunparse((scheme, netloc, path, params, query_string, fragment))\n    return tgpath\n\n\n# this is taken from turbogears 1.1 branch\ndef _get_server_name():\n    \"\"\"Return name of the server this application runs on.\n\n    Respects 'Host' and 'X-Forwarded-Host' header.\n\n    See the docstring of the 'absolute_url' function for more information.\n\n    .. note:: This comes from turbogears 1.1 branch.  It is only needed for\n        _tg_absolute_url().  If we find that turbogears.get_server_name()\n        exists, we replace this function with that one.\n    \"\"\"\n    get = config.get\n    h = request.headers\n    host = get('tg.url_domain') or h.get('X-Forwarded-Host', h.get('Host'))\n    if not host:\n        host = '%s:%s' % (get('server.socket_host', 'localhost'),\n                          get('server.socket_port', 8080))\n    return host\n\n\n# this is taken from turbogears 1.1 branch\ndef tg_absolute_url(tgpath='/', params=None, **kw):\n    \"\"\"Return absolute URL (including schema and host to this server).\n\n    Tries to account for 'Host' header and reverse proxying\n    ('X-Forwarded-Host').\n\n    The host name is determined this way:\n\n    * If the config setting 'tg.url_domain' is set and non-null, use this\n      value.\n    * Else, if the 'base_url_filter.use_x_forwarded_host' config setting is\n      True, use the value from the 'Host' or 'X-Forwarded-Host' request header.\n    * Else, if config setting 'base_url_filter.on' is True and\n      'base_url_filter.base_url' is non-null, use its value for the host AND\n      scheme part of the URL.\n    * As a last fallback, use the value of 'server.socket_host' and\n      'server.socket_port' config settings (defaults to 'localhost:8080').\n\n    The URL scheme ('http' or 'http') used is determined in the following way:\n\n    * If 'base_url_filter.base_url' is used, use the scheme from this URL.\n    * If there is a 'X-Use-SSL' request header, use 'https'.\n    * Else, if the config setting 'tg.url_scheme' is set, use its value.\n    * Else, use the value of 'cherrypy.request.scheme'.\n\n    .. note:: This comes from turbogears 1.1 branch with one change: we\n        call tg_url() rather than turbogears.url() so that it never adds the\n        csrf_token\n\n    .. versionadded:: 0.3.19\n       Modified from turbogears.absolute_url() for :ref:`CSRF-Protection`\n    \"\"\"\n    get = config.get\n    use_xfh = get('base_url_filter.use_x_forwarded_host', False)\n    if request.headers.get('X-Use-SSL'):\n        scheme = 'https'\n    else:\n        scheme = get('tg.url_scheme')\n    if not scheme:\n        scheme = request.scheme\n    base_url = '%s://%s' % (scheme, _get_server_name())\n    if get('base_url_filter.on', False) and not use_xfh:\n        base_url = get('base_url_filter.base_url').rstrip('/')\n    return '%s%s' % (base_url, tg_url(tgpath, params, **kw))\n\n\ndef absolute_url(tgpath='/', params=None, **kw):\n    \"\"\"Return absolute URL (including schema and host to this server).\n\n    Tries to account for 'Host' header and reverse proxying\n    ('X-Forwarded-Host').\n\n    The host name is determined this way:\n\n    * If the config setting 'tg.url_domain' is set and non-null, use this\n      value.\n    * Else, if the 'base_url_filter.use_x_forwarded_host' config setting is\n      True, use the value from the 'Host' or 'X-Forwarded-Host' request header.\n    * Else, if config setting 'base_url_filter.on' is True and\n      'base_url_filter.base_url' is non-null, use its value for the host AND\n      scheme part of the URL.\n    * As a last fallback, use the value of 'server.socket_host' and\n      'server.socket_port' config settings (defaults to 'localhost:8080').\n\n    The URL scheme ('http' or 'http') used is determined in the following way:\n\n    * If 'base_url_filter.base_url' is used, use the scheme from this URL.\n    * If there is a 'X-Use-SSL' request header, use 'https'.\n    * Else, if the config setting 'tg.url_scheme' is set, use its value.\n    * Else, use the value of 'cherrypy.request.scheme'.\n\n    .. versionadded:: 0.3.19\n       Modified from turbogears.absolute_url() for :ref:`CSRF-Protection`\n    \"\"\"\n    return url(tg_absolute_url(tgpath, params, **kw))\n\n\ndef enable_csrf():\n    '''A startup function to setup :ref:`CSRF-Protection`.\n\n    This should be run at application startup.  Code like the following in the\n    start-APP script or the method in :file:`commands.py` that starts it::\n\n        from turbogears import startup\n        from fedora.tg.util import enable_csrf\n        startup.call_on_startup.append(enable_csrf)\n\n    If we can get the :ref:`CSRF-Protection` into upstream :term:`TurboGears`,\n    we might be able to remove this in the future.\n\n    .. versionadded:: 0.3.10\n       Added to enable :ref:`CSRF-Protection`\n    '''\n    # Override the turbogears.url function with our own\n    # Note, this also changes turbogears.absolute_url since that calls\n    # turbogears.url\n    turbogears.url = url\n    turbogears.controllers.url = url\n\n    # Ignore the _csrf_token parameter\n    ignore = config.get('tg.ignore_parameters', [])\n    if '_csrf_token' not in ignore:\n        ignore.append('_csrf_token')\n        config.update({'tg.ignore_parameters': ignore})\n\n    # Add a function to the template tg stdvars that looks up a template.\n    turbogears.view.variable_providers.append(add_custom_stdvars)\n\n\ndef request_format():\n    '''Return the output format that was requested by the user.\n\n    The user is able to specify a specific output format using either the\n    ``Accept:`` HTTP header or the ``tg_format`` query parameter.  This\n    function checks both of those to determine what format the reply should\n    be in.\n\n    :rtype: string\n    :returns: The requested format.  If none was specified, 'default' is\n        returned\n\n    .. versionchanged:: 0.3.17\n        Return symbolic names for json, html, xhtml, and xml instead of\n        letting raw mime types through\n    '''\n    output_format = cherrypy.request.params.get('tg_format', '').lower()\n    if not output_format:\n        ### TODO: Two problems with this:\n        # 1) TG lets this be extended via as_format and accept_format.  We need\n        #    tie into that as well somehow.\n        # 2) Decide whether to standardize on \"json\" or \"application/json\"\n        accept = tg_util.simplify_http_accept_header(\n            request.headers.get('Accept', 'default').lower())\n        if accept in ('text/javascript', 'application/json'):\n            output_format = 'json'\n        elif accept == 'text/html':\n            output_format = 'html'\n        elif accept == 'text/plain':\n            output_format = 'plain'\n        elif accept == 'text/xhtml':\n            output_format = 'xhtml'\n        elif accept == 'text/xml':\n            output_format = 'xml'\n        else:\n            output_format = accept\n    return output_format\n\n\ndef jsonify_validation_errors():\n    '''Return an error for :term:`JSON` if validation failed.\n\n    This function checks for two things:\n\n    1) We're expected to return :term:`JSON` data.\n    2) There were errors in the validation process.\n\n    If both of those are true, this function constructs a response that\n    will return the validation error messages as :term:`JSON` data.\n\n    All controller methods that are error_handlers need to use this::\n\n        @expose(template='templates.numberform')\n        def enter_number(self, number):\n            errors = fedora.tg.util.jsonify_validation_errors()\n            if errors:\n                return errors\n            [...]\n\n        @expose(allow_json=True)\n        @error_handler(enter_number)\n        @validate(form=number_form)\n        def save(self, number):\n            return dict(success=True)\n\n    :rtype: None or dict\n    :Returns: None if there are no validation errors or :term:`JSON` isn't\n        requested, otherwise a dictionary with the error that's suitable for\n        return from the controller.  The error message is set in tg_flash\n        whether :term:`JSON` was requested or not.\n    '''\n    # Check for validation errors\n    errors = getattr(cherrypy.request, 'validation_errors', None)\n    if not errors:\n        return None\n\n    # Set the message for both html and json output\n    message = u'\\n'.join([u'%s: %s' % (param, msg) for param, msg in\n                          errors.items()])\n    format = request_format()\n    if format in ('html', 'xhtml'):\n        message.translate({ord('\\n'): u'<br />\\n'})\n    flash(message)\n\n    # If json, return additional information to make this an exception\n    if format == 'json':\n        # Note: explicit setting of tg_template is needed in TG < 1.0.4.4\n        # A fix has been applied for TG-1.0.4.5\n        return dict(exc='Invalid', tg_template='json')\n    return None\n\n\ndef json_or_redirect(forward_url):\n    '''If :term:`JSON` is requested, return a dict, otherwise redirect.\n\n    This is a decorator to use with a method that returns :term:`JSON` by\n    default.  If :term:`JSON` is requested, then it will return the dict from\n    the method.  If :term:`JSON` is not requested, it will redirect to the\n    given URL.  The method that is decorated should be constructed so that it\n    calls turbogears.flash() with a message that will be displayed on the\n    forward_url page.\n\n    Use it like this::\n\n        import turbogears\n\n        @json_or_redirect('http://localhost/calc/')\n        @expose(allow_json=True)\n        def divide(self, dividend, divisor):\n            try:\n                answer = dividend * 1.0 / divisor\n            except ZeroDivisionError:\n                turbogears.flash('Division by zero not allowed')\n                return dict(exc='ZeroDivisionError')\n            turbogears.flash('The quotient is %s' % answer)\n            return dict(quotient=answer)\n\n    In the example, we return either an exception or an answer, using\n    :func:`turbogears.flash` to tell people of the result in either case.  If\n    :term:`JSON` data is requested, the user will get back a :term:`JSON`\n    string with the proper information.  If html is requested, we will be\n    redirected to 'http://localhost/calc/' where the flashed message will be\n    displayed.\n\n    :arg forward_url: If :term:`JSON` was not requested, redirect to this URL\n        after.\n\n    .. versionadded:: 0.3.7\n       To make writing methods that use validation easier\n    '''\n    def call(func, *args, **kwargs):\n        if request_format() == 'json':\n            return func(*args, **kwargs)\n        else:\n            func(*args, **kwargs)\n            raise redirect(forward_url)\n    return decorator(call)\n\nif hasattr(turbogears, 'get_server_name'):\n    _get_server_name = turbogears.get_server_name\n\n\ndef fedora_template(template, template_type='genshi'):\n    '''Function to return the path to a template.\n\n    :arg template: filename of the template itself.  Ex: login.html\n    :kwarg template_type: template language we need the template written in\n        Defaults to 'genshi'\n    :returns: filesystem path to the template\n    '''\n    # :E1101: pkg_resources does have resource_filename\n    # pylint: disable-msg=E1101\n    return pkg_resources.resource_filename(\n        'fedora', os.path.join('tg',\n                               'templates', template_type, template))\n\n__all__ = (\n    'add_custom_stdvars', 'absolute_url', 'enable_csrf',\n    'fedora_template', 'jsonify_validation_errors', 'json_or_redirect',\n    'request_format', 'tg_absolute_url', 'tg_url', 'url')\n", "patch": "@@ -81,6 +81,11 @@ def url(tgpath, tgparams=None, **kwargs):\n     '''\n     if not isinstance(tgpath, six.string_types):\n         tgpath = '/'.join(list(tgpath))\n+    if not tgpath.startswith('/'):\n+        # Do not allow the url() function to be used for external urls.\n+        # This function is primarily used in redirect() calls, so this prevents\n+        # covert redirects and thus CSRF leaking.\n+        tgpath = '/'\n     if tgpath.startswith('/'):\n         webpath = (config.get('server.webpath') or '').rstrip('/')\n         if tg_util.request_available():", "file_path": "files/2017_9/122", "file_language": "py", "file_name": "fedora/tg/utils.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
