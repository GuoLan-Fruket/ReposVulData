{"index": 8419, "cve_id": "CVE-2022-31040", "cwe_id": ["CWE-601"], "cve_language": "Python", "cve_description": "Open Forms is an application for creating and publishing smart forms. Prior to versions 1.0.9 and 1.1.1, the cookie consent page in Open Forms contains an open redirect by injecting a `referer` querystring parameter and failing to validate the value. A malicious actor is able to redirect users to a website under their control, opening them up for phishing attacks. The redirect is initiated by the open forms backend which is a legimate page, making it less obvious to end users they are being redirected to a malicious website. Versions 1.0.9 and 1.1.1 contain patches for this issue. There are no known workarounds avaialble.", "cvss": "6.1", "publish_date": "June 13, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "3e8c9cce386e548765783354694fbb9d7a6ea7d3", "commit_message": "Merge pull request from GHSA-c97h-m5qf-j8mf\n\nFix open redirect vulnerability in cookie list page", "commit_date": "2022-06-13T08:17:22Z", "project": "open-formulieren/open-forms", "url": "https://api.github.com/repos/open-formulieren/open-forms/commits/3e8c9cce386e548765783354694fbb9d7a6ea7d3", "html_url": "https://github.com/open-formulieren/open-forms/commit/3e8c9cce386e548765783354694fbb9d7a6ea7d3", "windows_before": [{"commit_id": "cf5e4ad3dcdaa0309e39d63bd1f51bf5272c5fd2", "commit_date": "Fri Jun 10 17:11:32 2022 +0200", "commit_message": ":white_check_mark: [#1642] -- test custom render_spacers templatetag", "files_name": ["src/openforms/forms/tests/test_templatetags.py"]}, {"commit_id": "34a571c7009a15faa64d1be47cebc94f796bec34", "commit_date": "Fri Jun 10 16:37:33 2022 +0200", "commit_message": ":white_check_mark: [#1642] -- add tests for the form categories admin", "files_name": ["src/openforms/forms/admin/category.py", "src/openforms/forms/tests/admin/test_category.py", "src/openforms/forms/tests/factories.py"]}, {"commit_id": "c4866108f0a1635b60f889a470cf2e04ce416e40", "commit_date": "Fri Jun 10 16:09:11 2022 +0200", "commit_message": ":children_crossing: [#1642] -- Improve category admin list page", "files_name": ["src/openforms/forms/admin/category.py", "src/openforms/forms/admin/form.py", "src/openforms/scss/admin/_app_overrides.scss"]}, {"commit_id": "22ea81d16f6dd5696e27f71e42cd72f9df757790", "commit_date": "Fri Jun 10 15:21:05 2022 +0200", "commit_message": ":green_heart: [#1642] -- fix tests broken by refactoring", "files_name": ["src/openforms/forms/admin/form.py"]}, {"commit_id": "ab11fdca42ea53ff26551e9db847351af664804c", "commit_date": "Fri Jun 10 15:20:45 2022 +0200", "commit_message": ":recycle: [#1642] -- update tests for async form list loading in admin", "files_name": ["src/openforms/forms/tests/admin/test_form.py", "src/openforms/forms/tests/test_form_admin.py"]}, {"commit_id": "cef10e67f6f4760906cf0c1732c1d1635f639f83", "commit_date": "Fri Jun 10 13:03:07 2022 +0200", "commit_message": ":card_file_box: [#1642] -- Add merge migration", "files_name": ["src/openforms/forms/migrations/0026_merge_20220610_1302.py"]}, {"commit_id": "9df77841b711b693f1c171076c77ce38b01743f4", "commit_date": "Thu Jun 9 17:41:25 2022 +0200", "commit_message": ":sparkles: [#1642] -- incorporate filter params in form counts", "files_name": ["src/openforms/forms/admin/form.py", "src/openforms/forms/templates/admin/forms/form/change_list.html"]}, {"commit_id": "54108ef3a871e7610b21e55072e6e89350077f76", "commit_date": "Thu Jun 9 17:08:47 2022 +0200", "commit_message": ":children_crossing: [#1642] -- Display loader while fetching data", "files_name": ["src/openforms/forms/templates/admin/forms/form/change_list.html", "src/openforms/js/components/admin/form-category.js", "src/openforms/scss/components/admin/_form-category.scss"]}, {"commit_id": "505ebab965199c5a4ff51ab18f48dcd3c9022c59", "commit_date": "Thu Jun 9 17:00:14 2022 +0200", "commit_message": ":sparkles: [#1642] -- implement pagination of forms per category", "files_name": ["src/openforms/forms/admin/form.py", "src/openforms/forms/templates/admin/forms/form/change_list.html", "src/openforms/js/components/admin/form-category.js"]}, {"commit_id": "dc438190a30827329ba6dae6334a99a504f53bde", "commit_date": "Thu Jun 9 16:26:13 2022 +0200", "commit_message": ":sparkles: [#1642] -- Implement collapse/expand of categories", "files_name": ["src/openforms/forms/admin/form.py", "src/openforms/forms/templates/admin/forms/form/change_list.html", "src/openforms/js/components/admin/form-category.js", "src/openforms/scss/components/admin/_form-category.scss"]}, {"commit_id": "813a8a4739f9d0b179cebf823919aeeec31959bd", "commit_date": "Thu Jun 9 15:35:17 2022 +0200", "commit_message": ":sparkles: [#1642] -- ensure the select-all action list works", "files_name": ["src/openforms/js/components/admin/form-category.js"]}, {"commit_id": "59ff8db1cbd6d5e61a2c0c7b50e488b650b007fd", "commit_date": "Thu Jun 2 17:36:29 2022 +0200", "commit_message": ":alembic: [#1642] -- Display categories tree in form list", "files_name": [".editorconfig", "src/openforms/forms/admin/category.py", "src/openforms/forms/admin/form.py", "src/openforms/forms/templates/admin/forms/form/category_form_list.html", "src/openforms/forms/templates/admin/forms/form/change_list.html", "src/openforms/forms/templatetags/forms_admin_list.py", "src/openforms/js/components/admin/form-category.js", "src/openforms/js/components/admin/index.js", "src/openforms/scss/components/admin/_form-category.scss", "src/openforms/scss/components/admin/_index.scss"]}, {"commit_id": "e7140b3cf0dafd7350201dee084c20bcc8b60916", "commit_date": "Thu Jun 2 15:13:21 2022 +0200", "commit_message": ":bento: Run bin/generate_admin_index_fixture.sh", "files_name": ["src/openforms/fixtures/default_admin_index.json"]}, {"commit_id": "f7600515393baac4eac84cecab1f060bb4d5964c", "commit_date": "Tue May 24 12:18:50 2022 +0200", "commit_message": "[#1642] Added django-treebeard and a Category model to Form", "files_name": ["requirements/base.in", "requirements/base.txt", "requirements/ci.txt", "requirements/dev.txt", "src/openapi.yaml", "src/openforms/api/urls.py", "src/openforms/conf/base.py", "src/openforms/fixtures/default_admin_index.json", "src/openforms/forms/admin/__init__.py", "src/openforms/forms/admin/category.py", "src/openforms/forms/admin/form.py", "src/openforms/forms/api/serializers/category.py", "src/openforms/forms/api/serializers/form.py", "src/openforms/forms/api/viewsets.py", "src/openforms/forms/migrations/0025_auto_20220524_1022.py", "src/openforms/forms/models/__init__.py", "src/openforms/forms/models/category.py", "src/openforms/forms/models/form.py", "src/openforms/forms/templates/admin/forms/form/change_list.html", "src/openforms/forms/tests/factories.py", "src/openforms/forms/tests/test_api_categories.py", "src/openforms/js/components/admin/form_design/FormMetaFields.js", "src/openforms/js/components/admin/form_design/constants.js", "src/openforms/js/components/admin/form_design/form-creation-form.js", "src/openforms/utils/checks.py"]}, {"commit_id": "908a36a3401ea4d68c4e2ec43391e65bbc6f863a", "commit_date": "Fri Jun 10 15:34:32 2022 +0200", "commit_message": "Merge pull request #1669 from open-formulieren/feature/1325-check-duplicate-components", "files_name": ["8814b3dff2ece8e4f7056392c3ff107d0ed3397e - Thu Jun 9 16:19:50 2022 +0200 : :fire: Unused imports", "src/openforms/submissions/tests/test_variables/test_num_queries.py"]}, {"commit_id": "f2acee093cd7cf7f9c15e7024c26319b2b1dd33b", "commit_date": "Thu Jun 9 16:19:31 2022 +0200", "commit_message": ":sparkles: [#1325] Management command to check number of forms with duplicate component keys", "files_name": ["src/openforms/forms/management/commands/check_duplicate_component_keys.py"]}, {"commit_id": "74db7a2542aa9dc55588e90f9622d016bffc1e5f", "commit_date": "Fri Jun 10 12:47:34 2022 +0200", "commit_message": "Merge pull request #1644 from open-formulieren/fix/1643-text-max-lenght", "files_name": ["c2982f9650f8c0c7a450342b54425adc87583c64 - Thu Jun 9 16:45:15 2022 +0200 : :bug: [#1670] Update error message for number validation", "src/openforms/js/lang/formio/nl.json"]}, {"commit_id": "e07ddd841ad73d317fbda1d973706f407117e7e7", "commit_date": "Fri Jun 10 12:33:58 2022 +0200", "commit_message": "Merge pull request #1671 from open-formulieren/fix/1670-wrong-error-translation", "files_name": ["11187de4d2bdeafb4c0327cbdf4905984b55f64a - Thu Jun 9 16:45:15 2022 +0200 : :bug: [#1670] Update error message for number validation", "src/openforms/js/lang/formio/nl.json"]}, {"commit_id": "572f53cd59acc524ffae43bab9d9830a92601bd4", "commit_date": "Thu Jun 9 12:03:38 2022 +0200", "commit_message": ":alien: Use --legacy-peer-deps for npm ci", "files_name": [".github/workflows/ci.yml", "Dockerfile"]}, {"commit_id": "b54ec38b1844649d31e6ca312e607f2ff21157b1", "commit_date": "Wed Jun 8 11:56:50 2022 +0200", "commit_message": ":bug: CVE-2022-31040 -- Fixes open redirect in cookie-consent 'close' button", "files_name": ["src/openforms/forms/templatetags/openforms.py", "src/openforms/templates/cookie_consent/cookiegroup_list.html", "src/openforms/utils/redirect.py"]}, {"commit_id": "68ba5a526e79ec1daea4ff905262f9d22890be96", "commit_date": "Wed Jun 8 11:18:49 2022 +0200", "commit_message": ":test_tube: CVE-2022-31040 Regression test for open redirect on cookies list page", "files_name": ["src/openforms/tests/test_cookie_notice.py"]}, {"commit_id": "2a036a4edd1c9f0b8a9234083d3fe4e44845cb9a", "commit_date": "Wed Jun 8 13:21:51 2022 +0200", "commit_message": ":bug: CVE-2022-31041 -- Perform upload content validation against allowed file types", "files_name": ["src/openforms/submissions/attachments.py", "src/openforms/submissions/models/submission_files.py", "src/openforms/submissions/tests/factories.py", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "1c2e3ef272c442178335c2aabe62bd5350b8765a", "commit_date": "Wed Jun 8 13:00:20 2022 +0200", "commit_message": ":heavy_plus_sign: Add python-magic and libmagic dependencies", "files_name": ["Dockerfile", "INSTALL.rst", "requirements/base.in", "requirements/base.txt", "requirements/ci.txt", "requirements/dev.txt", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "7cd70bd2c79d28fb95576cf109afa4195bd97196", "commit_date": "Wed Jun 8 12:50:58 2022 +0200", "commit_message": ":test_tube: CVE-2022-31041 -- Add regression test for required backend file type validation", "files_name": ["src/openforms/submissions/tests/files/README.md", "src/openforms/submissions/tests/files/image-256x256.pdf", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "d20368549f88a02b53d806e579b4c27b4ccd038f", "commit_date": "Wed Jun 8 11:56:50 2022 +0200", "commit_message": ":bug: CVE-2022-31040 -- Fixes open redirect in cookie-consent 'close' button", "files_name": ["src/openforms/forms/templatetags/openforms.py", "src/openforms/templates/cookie_consent/cookiegroup_list.html", "src/openforms/utils/redirect.py"]}, {"commit_id": "8eaad8a3e49032200d644b931855563bf83f0744", "commit_date": "Wed Jun 8 11:18:49 2022 +0200", "commit_message": ":test_tube: CVE-2022-31040 Regression test for open redirect on cookies list page", "files_name": ["src/openforms/tests/test_cookie_notice.py"]}, {"commit_id": "634254e90212e346dec9d84a4a397a2391653dd9", "commit_date": "Wed Jun 8 13:21:51 2022 +0200", "commit_message": ":bug: CVE-2022-31041 -- Perform upload content validation against allowed file types", "files_name": ["src/openforms/submissions/attachments.py", "src/openforms/submissions/models/submission_files.py", "src/openforms/submissions/tests/factories.py", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "02b71030b014428e09782e4d770f728aac9a48c5", "commit_date": "Wed Jun 8 13:00:20 2022 +0200", "commit_message": ":heavy_plus_sign: Add python-magic and libmagic dependencies", "files_name": ["Dockerfile", "INSTALL.rst", "requirements/base.in", "requirements/base.txt", "requirements/ci.txt", "requirements/dev.txt", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "e4af0629d438a1f2d5af26a4316b9ee37a05740f", "commit_date": "Wed Jun 8 12:50:58 2022 +0200", "commit_message": ":test_tube: CVE-2022-31041 -- Add regression test for required backend file type validation", "files_name": ["src/openforms/submissions/tests/files/README.md", "src/openforms/submissions/tests/files/image-256x256.pdf", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "cce92411b7212a6a854f8563ba7537622505300c", "commit_date": "Thu Jun 9 11:09:33 2022 +0200", "commit_message": ":art: Make test for rich text color defaults deterministic", "files_name": ["src/openforms/forms/tests/admin/test_form.py"]}, {"commit_id": "610da95cb79597bd8667f8098aef3b242bd4a089", "commit_date": "Wed Jun 8 17:22:09 2022 +0200", "commit_message": "Merge pull request #1647 from open-formulieren/feature/1325-submission-variable-backend", "files_name": ["404898fbc2756e8df6682dccaa942eeb01b99cf2 - Wed Jun 8 16:06:02 2022 +0200 : :ok_hand: [#1325] 4th pass of PR feedback", "src/openforms/forms/admin/form.py", "src/openforms/forms/migrations/0025_formvariable_valid_prefill_configuration.py", "src/openforms/forms/models/form_variable.py", "src/openforms/submissions/form_logic.py", "src/openforms/submissions/migrations/0054_submissionvaluevariable.py", "src/openforms/submissions/models/submission_step.py", "src/openforms/submissions/models/submission_value_variable.py"]}, {"commit_id": "1ef84326e256c329089f1673c0760a9964e34d62", "commit_date": "Tue Jun 7 11:46:06 2022 +0200", "commit_message": ":ok_hand: [#1325] 3nd pass of PR feedback", "files_name": ["src/openforms/formio/rendering/nodes.py", "src/openforms/forms/admin/form.py", "src/openforms/forms/models/form_variable.py", "src/openforms/js/components/admin/form_design/variables/constants.js", "src/openforms/submissions/form_logic.py", "src/openforms/submissions/models/submission_value_variable.py", "src/openforms/submissions/tests/renderer/test_formio_integration.py", "src/openforms/submissions/tests/test_admin_export.py", "src/openforms/submissions/tests/test_submission_steps_state.py", "src/openforms/submissions/tests/test_submission_suspension.py", "src/openforms/submissions/tests/test_tasks_confirmation_emails.py", "src/openforms/submissions/tests/test_tasks_pdf.py", "src/openforms/submissions/tests/test_variables/test_num_queries.py"]}, {"commit_id": "2a494f368424424b913646120424d3d0cb5ec670", "commit_date": "Tue Jun 7 17:47:05 2022 +0200", "commit_message": ":sparkles: [#1643] Default max length for textarea", "files_name": ["src/openforms/js/components/form/textarea.js"]}, {"commit_id": "487b5638f02e9ebe7008e4cc23b72b323077365b", "commit_date": "Mon May 23 11:59:43 2022 +0200", "commit_message": "[#1643] Set default value for text validate.maxLength in Form Designer", "files_name": ["src/openforms/js/components/form/edit/tabs.js"]}], "windows_after": [{"commit_id": "ff39061d00e5b870c9dc6efce09221ca357d4f64", "commit_date": "Mon Jun 13 10:31:39 2022 +0200", "commit_message": "Merge branch 'stable/1.1.x'", "files_name": ["104f2e7f0546504d236f1c15e21e2f57ce92133b - Mon Jun 13 10:37:58 2022 +0200 : :pencil: Docker image tag - sort by latest semver", "README.NL.rst", "README.rst"]}, {"commit_id": "04408aea649df95789fdc88442440bd8ba12558e", "commit_date": "Mon Jun 13 13:03:11 2022 +0200", "commit_message": ":arrow_up: Bump to microscope-sass 1.1.0", "files_name": ["package-lock.json"]}, {"commit_id": "b0b0daca7d7ca090100879a411592a2f94395928", "commit_date": "Mon Jun 13 17:38:16 2022 +0200", "commit_message": ":arrow_up: Bump zgw-consumers version", "files_name": ["requirements/base.txt", "requirements/ci.txt", "requirements/dev.txt"]}, {"commit_id": "074c718a0bdd7e36f9506da0825d409e90769e29", "commit_date": "Tue Jun 14 18:27:44 2022 +0200", "commit_message": ":loud_sound: Log BAG API exceptions.", "files_name": ["src/openforms/contrib/bag/client.py"]}, {"commit_id": "7e5a87dbfb674f40338fc8a2588ea008cb69c139", "commit_date": "Tue Jun 14 18:29:15 2022 +0200", "commit_message": "Merge pull request #1679 from open-formulieren/issue/1655-certificate-delete-errors", "files_name": ["0e5ae8908764dbb0ddc6dbfcb6cd8ecd4f024f37 - Mon Jun 13 17:38:16 2022 +0200 : :arrow_up: Bump zgw-consumers version", "requirements/base.txt", "requirements/ci.txt", "requirements/dev.txt"]}, {"commit_id": "501126b410d846f4a0993285c82cdd9ba1b61c71", "commit_date": "Tue Jun 14 18:32:11 2022 +0200", "commit_message": "Merge pull request #1675 from open-formulieren/feature/dependencies-bump", "files_name": ["578580688f3d97a99c542a8960174e73bcfcb6af - Wed Jun 15 09:59:11 2022 +0200 : Merge pull request #1684 from open-formulieren/bugfix/log-bag-exceptions", "7bcb995c78cd678002519c160784125a4c24ab0f - Thu Jun 16 13:15:09 2022 +0200 : :ambulance: Fix file attachments binding with explicit wilcard configuration", "src/openforms/formio/service.py", "src/openforms/formio/utils.py", "src/openforms/submissions/attachments.py", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "18596f014228fcd68df297a8f1c9beea536c63e8", "commit_date": "Thu Jun 16 13:15:09 2022 +0200", "commit_message": ":ambulance: Fix file attachments binding with explicit wilcard configuration", "files_name": ["src/openforms/formio/service.py", "src/openforms/formio/utils.py", "src/openforms/submissions/attachments.py", "src/openforms/submissions/tests/test_submission_attachment.py"]}, {"commit_id": "b228e3ee63d9210eebad2eeb3a7446a6992cd267", "commit_date": "Thu Jun 16 15:25:15 2022 +0200", "commit_message": ":hammer: Added management command to recover missing submission attachments", "files_name": ["src/openforms/utils/management/commands/recover_missing_attachments.py"]}, {"commit_id": "0a17795d434ef13c1667c4b80cf1498283866f1e", "commit_date": "Thu Jun 16 16:29:10 2022 +0200", "commit_message": ":pencil: Update changelog for 1.1.2 hotfix", "files_name": ["CHANGELOG.rst"]}, {"commit_id": "d4bd2d6503be9b7109ee6591adf37377415b2a1e", "commit_date": "Thu Jun 16 18:36:18 2022 +0200", "commit_message": ":bookmark: Bump version to 1.1.2", "files_name": [".bumpversion.cfg", "README.NL.rst", "README.rst", "package-lock.json", "package.json", "publiccode.yaml", "src/openforms/__init__.py"]}, {"commit_id": "8a13504299126eadf292151b5f5c6256777ccaf8", "commit_date": "Thu Jun 16 18:40:01 2022 +0200", "commit_message": "Merge branch 'stable/1.1.x'", "files_name": ["bd6953f2a055511ed138a61aef07195ce8e9f45f - Thu Jun 16 22:06:03 2022 +0200 : Merge pull request #1645 from open-formulieren/feature/1642-form-category-folders", "b43af2e688989d6061e8d5d3cc4b34ece309aebb - Tue Jun 14 17:53:25 2022 +0200 : :arrow_up: [#1680] -- bump django-camunda for dmn support", "requirements/base.txt", "requirements/ci.txt", "requirements/dev.txt"]}, {"commit_id": "9f762bf640f078d4253c20d19aa563687e196f90", "commit_date": "Tue Jun 14 18:42:50 2022 +0200", "commit_message": ":sparkles: [#1680] -- set up DMN plugin registry", "files_name": ["src/openforms/dmn/__init__.py", "src/openforms/dmn/base.py", "src/openforms/dmn/registry.py", "src/openforms/dmn/tests/__init__.py", "src/openforms/dmn/tests/test_registry.py"]}, {"commit_id": "d6d6937b30e1a43c62b919e3bb224220a5aca3a4", "commit_date": "Wed Jun 15 10:28:20 2022 +0200", "commit_message": ":sparkles: [#1680] -- implement Camunda DMN plugin", "files_name": ["src/openforms/conf/base.py", "src/openforms/contrib/camunda/__init__.py", "src/openforms/contrib/camunda/tests/__init__.py", "src/openforms/contrib/camunda/tests/utils.py", "src/openforms/dmn/contrib/camunda/__init__.py", "src/openforms/dmn/contrib/camunda/apps.py", "src/openforms/dmn/contrib/camunda/plugin.py"]}, {"commit_id": "4716be4f45a176eac18affbf3cd938015a6a9927", "commit_date": "Wed Jun 15 11:22:40 2022 +0200", "commit_message": ":white_check_mark: [#1680] -- add tests for Camunda DMN plugin implementation", "files_name": ["src/openforms/contrib/camunda/tests/utils.py", "src/openforms/dmn/contrib/__init__.py", "src/openforms/dmn/contrib/camunda/tests/__init__.py", "src/openforms/dmn/contrib/camunda/tests/test_plugin.py"]}, {"commit_id": "c2d38343083d417289597c32f42dc5bf4c9b2b3c", "commit_date": "Wed Jun 15 12:01:06 2022 +0200", "commit_message": ":goal_net: [#1680] -- be robust in handling Camunda 500 errors when evaluating DMN", "files_name": ["src/openforms/dmn/contrib/camunda/plugin.py", "src/openforms/dmn/contrib/camunda/tests/test_plugin.py"]}, {"commit_id": "baba9aac4a051c6be3c090c6c7989228f0f837c8", "commit_date": "Wed Jun 15 12:09:07 2022 +0200", "commit_message": ":construction_worker: [#1680] -- add Camunda services to CI pipeline", "files_name": [".github/workflows/ci.yml"]}, {"commit_id": "53af1ce5d73c5a35a83a3ddce2281b16f0f7f8ca", "commit_date": "Wed Jun 15 12:44:16 2022 +0200", "commit_message": ":pencil: [#1680] -- document the DMN module", "files_name": ["docs/developers/backend/modules/dmn.rst", "docs/developers/backend/modules/index.rst", "src/openforms/dmn/base.py", "src/openforms/dmn/contrib/camunda/__init__.py"]}, {"commit_id": "fa62bf951652c94f77334b645f134e47374ab94f", "commit_date": "Wed Jun 15 12:46:43 2022 +0200", "commit_message": ":recycle: Use django-camunda utility in camunda registration plugin", "files_name": ["src/openforms/registrations/contrib/camunda/plugin.py"]}, {"commit_id": "60f8480981672f072daf916ea03a4ecfdfee1531", "commit_date": "Wed Jun 15 13:05:34 2022 +0200", "commit_message": ":sparkles: [#1680] -- implement public python API for DMN module", "files_name": ["docs/developers/backend/modules/dmn.rst", "src/openforms/dmn/contrib/camunda/tests/test_plugin.py", "src/openforms/dmn/service.py"]}, {"commit_id": "495fe90383323da748669bdd3051055fedcb195b", "commit_date": "Fri Jun 17 11:16:13 2022 +0200", "commit_message": ":art: [#1680] -- use Camunda major version in plugin identifier", "files_name": ["src/openforms/dmn/contrib/camunda/plugin.py", "src/openforms/dmn/contrib/camunda/tests/test_plugin.py"]}, {"commit_id": "2d97f184971bf58185711c4641eb8c6355ad407f", "commit_date": "Fri Jun 17 11:20:31 2022 +0200", "commit_message": ":sparkles: [#1680] -- hook up DMN module to check config view", "files_name": ["src/openforms/config/views.py"]}, {"commit_id": "0b25937fcb716fa95b069108c66e3ca022bb42ae", "commit_date": "Fri Jun 17 11:25:44 2022 +0200", "commit_message": ":sparkles: [#1680] -- implement plugin config check", "files_name": ["src/openforms/dmn/contrib/camunda/checks.py", "src/openforms/dmn/contrib/camunda/plugin.py"]}, {"commit_id": "2d2aedef5461016bea511febb8602d7d54340118", "commit_date": "Fri Jun 17 11:47:13 2022 +0200", "commit_message": ":white_check_mark: [#1680] -- test plugin checks machinery", "files_name": ["src/openforms/dmn/contrib/camunda/checks.py", "src/openforms/dmn/contrib/camunda/tests/test_config_check.py"]}, {"commit_id": "4e3e1198f64aa288968e658370d6c10655e94975", "commit_date": "Fri Jun 17 12:01:03 2022 +0200", "commit_message": "Merge pull request #1683 from open-formulieren/feature/1680-dmn-engine", "files_name": ["11c2d91535f3f10ff529241b40c9fd872fddcce6 - Wed Jun 15 16:42:38 2022 +0200 : :sparkles: [#1860] -- implement management commands for DMN introspection/evaluation", "src/openforms/dmn/management/__init__.py", "src/openforms/dmn/management/commands/__init__.py", "src/openforms/dmn/management/commands/dmn_evaluate.py", "src/openforms/dmn/management/commands/dmn_list_definitions.py"]}, {"commit_id": "347c84feee41f67a1257063bd040011f4233db61", "commit_date": "Wed Jun 15 17:54:52 2022 +0200", "commit_message": ":white_check_mark: [#1680] -- add tests for the DMN management commands", "files_name": ["src/openforms/dmn/management/commands/dmn_evaluate.py", "src/openforms/dmn/management/commands/dmn_list_definitions.py", "src/openforms/dmn/tests/test_management_commands.py"]}, {"commit_id": "70941c50b0d984847d29ca0b13cc6eaa43d69498", "commit_date": "Wed Jun 15 17:58:08 2022 +0200", "commit_message": ":pencil: [#1680] -- document availability of management commands", "files_name": ["docs/developers/backend/modules/dmn.rst"]}, {"commit_id": "3cad90cd58dfd8be35e8885a3ae917b5c0bbcb06", "commit_date": "Fri Jun 17 13:19:17 2022 +0200", "commit_message": "Merge pull request #1686 from open-formulieren/feature/1680-dmn-management-command", "files_name": ["04ef5943d295b98a0cd701fa86af563d17281181 - Wed Jun 15 14:38:53 2022 +0200 : :sparkles: [#1680] -- implement DMN module API endpoints", "src/openforms/api/drf_spectacular/functional.py", "src/openforms/api/mixins.py", "src/openforms/api/urls.py", "src/openforms/dmn/api/__init__.py", "src/openforms/dmn/api/serializers.py", "src/openforms/dmn/api/urls.py", "src/openforms/dmn/api/views.py"]}, {"commit_id": "ad90ea2b9b08d83e0a07a9274c603cde2c0a8b56", "commit_date": "Wed Jun 15 15:03:53 2022 +0200", "commit_message": ":white_check_mark: [#1680] -- added access control tests for DMN endpoints", "files_name": ["src/openforms/dmn/tests/test_api.py"]}, {"commit_id": "86d4378577cfb55adf6359aad71d6f2a6454f2b5", "commit_date": "Wed Jun 15 15:44:52 2022 +0200", "commit_message": ":white_check_mark: [#1680] -- add tests for the DMN API endpoints", "files_name": ["src/openforms/api/mixins.py", "src/openforms/api/tests/utils.py", "src/openforms/dmn/api/views.py", "src/openforms/dmn/tests/test_api.py"]}, {"commit_id": "4b49c28079e38f7ad80d7cbb4a247e2f695a641d", "commit_date": "Wed Jun 15 15:52:24 2022 +0200", "commit_message": ":bento: [#1680] -- update the API schema", "files_name": ["src/openapi.yaml", "src/openforms/dmn/api/views.py"]}, {"commit_id": "484b7dae91f5c05200e28ef0da2823ee1d8e5f41", "commit_date": "Fri Jun 17 14:45:15 2022 +0200", "commit_message": ":ok_hand: [#1680] -- PR feedback, use querystring params instead of path params for XML endpoint", "files_name": ["src/openapi.yaml", "src/openforms/dmn/api/urls.py", "src/openforms/dmn/api/views.py", "src/openforms/dmn/tests/test_api.py"]}, {"commit_id": "910f71d124603aac2dd51ac552f6c0a44d14b3ab", "commit_date": "Fri Jun 17 15:17:03 2022 +0200", "commit_message": "Merge pull request #1685 from open-formulieren/feature/1680-dmn-api-endpoints", "files_name": ["450a1e158491e8f2e77d22ef33af7db8eda18c9b - Fri Jun 17 15:14:08 2022 +0200 : :bug: Fixes #1681 -- Use a unique reference number every time for StUF-ZDS requests", "src/openforms/registrations/contrib/stuf_zds/management/commands/stuf_zds_test_stp.py", "src/openforms/registrations/contrib/stuf_zds/plugin.py", "src/stuf/stuf_zds/client.py", "src/stuf/stuf_zds/tests/test_backend.py", "src/stuf/stuf_zds/tests/test_client.py"]}, {"commit_id": "67604b01a701ed479224561b061025c487cdc059", "commit_date": "Mon Jun 20 09:05:59 2022 +0200", "commit_message": "Merge pull request #1689 from open-formulieren/issue/1681-fix-stuf-zds-ref-number", "files_name": ["c067cb170e0eb81194f6468d6eb43c1d7c8252ef - Mon Jun 20 09:14:15 2022 +0200 : :pencil: [#1687] -- document possible error responses for submission step submit", "src/openapi.yaml", "src/openforms/submissions/api/viewsets.py"]}, {"commit_id": "dc164256ad78585626278969d638a530847655e5", "commit_date": "Mon Jun 20 09:43:00 2022 +0200", "commit_message": ":bug: [#1687] -- ensure error messages are properly serialized", "files_name": ["src/openforms/submissions/attachments.py"]}, {"commit_id": "5c0905a0605f02427994ff46b10a9f21d7f7b786", "commit_date": "Wed Jun 8 15:38:07 2022 +0200", "commit_message": ":sparkles: [#1325] Deal with variables in export/import forms", "files_name": ["src/openforms/forms/utils.py"]}, {"commit_id": "30f5e47980bdf9cfe8348ca07b629cf07e1e9ab5", "commit_date": "Wed Jun 8 15:38:35 2022 +0200", "commit_message": ":white_check_mark: [#1325] Test export/import variables", "files_name": ["src/openforms/forms/tests/admin/test_form.py", "src/openforms/forms/tests/test_api_import_export.py", "src/openforms/forms/tests/test_import_export.py", "src/openforms/forms/tests/test_restore_version.py"]}, {"commit_id": "69b47a0aa8047a20b0778520ffaa6241b7793816", "commit_date": "Fri Jun 10 14:42:05 2022 +0200", "commit_message": ":bug: [#1325] Missing super call", "files_name": ["src/openforms/forms/tests/test_restore_version.py"]}], "parents": [{"commit_id_before": "908a36a3401ea4d68c4e2ec43391e65bbc6f863a", "url_before": "https://api.github.com/repos/open-formulieren/open-forms/commits/908a36a3401ea4d68c4e2ec43391e65bbc6f863a", "html_url_before": "https://github.com/open-formulieren/open-forms/commit/908a36a3401ea4d68c4e2ec43391e65bbc6f863a"}, {"commit_id_before": "d20368549f88a02b53d806e579b4c27b4ccd038f", "url_before": "https://api.github.com/repos/open-formulieren/open-forms/commits/d20368549f88a02b53d806e579b4c27b4ccd038f", "html_url_before": "https://github.com/open-formulieren/open-forms/commit/d20368549f88a02b53d806e579b4c27b4ccd038f"}], "details": [{"raw_url": "https://github.com/open-formulieren/open-forms/raw/3e8c9cce386e548765783354694fbb9d7a6ea7d3/src%2Fopenforms%2Fforms%2Ftemplatetags%2Fopenforms.py", "code": "from django.template import Library\nfrom django.template.defaultfilters import stringfilter\n\nfrom rest_framework.reverse import reverse\n\nfrom openforms.config.models import GlobalConfiguration\nfrom openforms.utils.redirect import allow_redirect_url\n\nfrom ..context_processors import sdk_urls\n\nregister = Library()\n\n\n@register.simple_tag(takes_context=True)\ndef api_base_url(context: dict):\n    request = context[\"request\"]\n    api_root = reverse(\"api:api-root\")\n    return request.build_absolute_uri(api_root)\n\n\n@register.filter\n@stringfilter\ndef trim(value):\n    return value.strip()\n\n\n@register.inclusion_tag(\"forms/sdk_info_banner.html\")\ndef sdk_info_banner():\n    config = GlobalConfiguration.get_solo()\n    return {\n        \"enabled\": config.display_sdk_information,\n        **sdk_urls(request=None),\n    }\n\n\n@register.simple_tag\ndef get_allowed_redirect_url(*candidates: str) -> str:\n    \"\"\"\n    Output the first variable passed that is not empty and is an allowed redirect URL.\n\n    Output nothing if none of the values satisfy the requirements.\n\n    Heavily insired on the builtin {% firstof %} tag.\n    \"\"\"\n    for candidate in candidates:\n        if not candidate:\n            continue\n        if allow_redirect_url(candidate):\n            return candidate\n    return \"\"\n", "code_before": "from django.template import Library\nfrom django.template.defaultfilters import stringfilter\n\nfrom rest_framework.reverse import reverse\n\nfrom openforms.config.models import GlobalConfiguration\nfrom openforms.utils.redirect import allow_redirect_url\n\nfrom ..context_processors import sdk_urls\n\nregister = Library()\n\n\n@register.simple_tag(takes_context=True)\ndef api_base_url(context: dict):\n    request = context[\"request\"]\n    api_root = reverse(\"api:api-root\")\n    return request.build_absolute_uri(api_root)\n\n\n@register.filter\n@stringfilter\ndef trim(value):\n    return value.strip()\n\n\n@register.inclusion_tag(\"forms/sdk_info_banner.html\")\ndef sdk_info_banner():\n    config = GlobalConfiguration.get_solo()\n    return {\n        \"enabled\": config.display_sdk_information,\n        **sdk_urls(request=None),\n    }\n\n\n@register.simple_tag\ndef get_allowed_redirect_url(*candidates: str) -> str:\n    \"\"\"\n    Output the first variable passed that is not empty and is an allowed redirect URL.\n\n    Output nothing if none of the values satisfy the requirements.\n\n    Heavily insired on the builtin {% firstof %} tag.\n    \"\"\"\n    for candidate in candidates:\n        if not candidate:\n            continue\n        if allow_redirect_url(candidate):\n            return candidate\n    return \"\"\n", "patch": "@@ -4,6 +4,7 @@\n from rest_framework.reverse import reverse\n \n from openforms.config.models import GlobalConfiguration\n+from openforms.utils.redirect import allow_redirect_url\n \n from ..context_processors import sdk_urls\n \n@@ -30,3 +31,20 @@ def sdk_info_banner():\n         \"enabled\": config.display_sdk_information,\n         **sdk_urls(request=None),\n     }\n+\n+\n+@register.simple_tag\n+def get_allowed_redirect_url(*candidates: str) -> str:\n+    \"\"\"\n+    Output the first variable passed that is not empty and is an allowed redirect URL.\n+\n+    Output nothing if none of the values satisfy the requirements.\n+\n+    Heavily insired on the builtin {% firstof %} tag.\n+    \"\"\"\n+    for candidate in candidates:\n+        if not candidate:\n+            continue\n+        if allow_redirect_url(candidate):\n+            return candidate\n+    return \"\"", "file_path": "files/2022_6/615", "file_language": "py", "file_name": "src/openforms/forms/templatetags/openforms.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/open-formulieren/open-forms/raw/3e8c9cce386e548765783354694fbb9d7a6ea7d3/src%2Fopenforms%2Ftemplates%2Fcookie_consent%2Fcookiegroup_list.html", "code": "{% extends 'ui/views/abstract/list.html' %}\n{% load i18n openforms %}\n\n\n{% block card %}\n    {% get_allowed_redirect_url request.GET.referer request.headers.referer as referer %}\n    <header class=\"card__header\">\n        <h1 class=\"title\">{% trans \"Cookies\" %}</h1>\n    </header>\n\n    <div class=\"card__body\">\n        {% block card_body %}\n            <p>\n              {% trans \"This is a list of the categories of cookies used in our website and why we use them.\" %}\n            </p>\n            <ul class=\"list\">\n                {% for cookie_group in object_list  %}\n                    <li class=\"list__item\">\n                        {% include \"cookie_consent/_cookie_group.html\" %}\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endblock %}\n\n        {% if referer %}\n            <a href=\"{{ referer }}\" class=\"button button--primary\">\n                {% trans \"Close\" %}\n            </a>\n        {% endif %}\n    </div>\n{% endblock %}\n", "code_before": "{% extends 'ui/views/abstract/list.html' %}\n{% load i18n openforms %}\n\n\n{% block card %}\n    {% get_allowed_redirect_url request.GET.referer request.headers.referer as referer %}\n    <header class=\"card__header\">\n        <h1 class=\"title\">{% trans \"Cookies\" %}</h1>\n    </header>\n\n    <div class=\"card__body\">\n        {% block card_body %}\n            <p>\n              {% trans \"This is a list of the categories of cookies used in our website and why we use them.\" %}\n            </p>\n            <ul class=\"list\">\n                {% for cookie_group in object_list  %}\n                    <li class=\"list__item\">\n                        {% include \"cookie_consent/_cookie_group.html\" %}\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endblock %}\n\n        {% if referer %}\n            <a href=\"{{ referer }}\" class=\"button button--primary\">\n                {% trans \"Close\" %}\n            </a>\n        {% endif %}\n    </div>\n{% endblock %}\n", "patch": "@@ -1,9 +1,9 @@\n {% extends 'ui/views/abstract/list.html' %}\n-{% load i18n %}\n+{% load i18n openforms %}\n \n \n {% block card %}\n-    {% firstof request.GET.referer request.headers.referer as referer %}\n+    {% get_allowed_redirect_url request.GET.referer request.headers.referer as referer %}\n     <header class=\"card__header\">\n         <h1 class=\"title\">{% trans \"Cookies\" %}</h1>\n     </header>", "file_path": "files/2022_6/616", "file_language": "html", "file_name": "src/openforms/templates/cookie_consent/cookiegroup_list.html", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/open-formulieren/open-forms/raw/3e8c9cce386e548765783354694fbb9d7a6ea7d3/src%2Fopenforms%2Ftests%2Ftest_cookie_notice.py", "code": "from io import StringIO\n\nfrom django.core.management import call_command\nfrom django.test import override_settings, tag\nfrom django.urls import reverse\nfrom django.utils.translation import gettext as _\n\nfrom cookie_consent.cache import delete_cache\nfrom cookie_consent.models import CookieGroup\nfrom django_webtest import WebTest\nfrom furl import furl\n\nfrom openforms.config.models import GlobalConfiguration\nfrom openforms.forms.tests.factories import FormFactory\nfrom openforms.tests.utils import NOOP_CACHES\n\n\n@override_settings(CACHES=NOOP_CACHES)\nclass CookieNoticeTests(WebTest):\n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n\n        cls.form = FormFactory.create()\n        cls.url = reverse(\"forms:form-detail\", kwargs={\"slug\": cls.form.slug})\n\n        # load some default cookie groups and cookies\n        call_command(\"loaddata\", \"cookie_consent\", stdout=StringIO())\n\n        config = GlobalConfiguration.get_solo()\n\n        # configure analytics so that the JS snippets are not empty\n        config.gtm_code = \"GTM-XXXX\"\n        config.ga_code = \"UA-XXXXX-Y\"\n        config.matomo_url = \"https://example.com\"\n        config.matomo_site_id = \"1234\"\n        config.piwik_url = \"https://example.com\"\n        config.piwik_site_id = \"1234\"\n        config.siteimprove_id = \"1234\"\n        config.analytics_cookie_consent_group = CookieGroup.objects.get(\n            varname=\"analytical\"\n        )\n        config.save()\n\n        # workaround for https://github.com/bmihelac/django-cookie-consent/issues/41\n        # the cache instance is resolved at import time rather than at runtime.\n        delete_cache()\n\n    def test_anon_user_notice_rendered(self):\n        form_page = self.app.get(self.url)\n\n        cookie_notice = form_page.pyquery(\".cookie-notice\")\n\n        # check that the notice is present\n        self.assertTrue(bool(cookie_notice))\n\n    def test_accept_reject_cookies(self):\n        \"\"\"\n        Assert that the cookie notice is no longer visible once the user accepted or\n        rejected them.\n        \"\"\"\n        with self.subTest(action=\"accept\"):\n            form_page = self.app.get(self.url)\n\n            accept_form = form_page.forms[0]\n            assert \"accept\" in accept_form.action\n\n            refreshed_form_page = accept_form.submit().follow()\n\n            self.assertEqual(refreshed_form_page.request.path, self.url)\n            self.assertFalse(refreshed_form_page.pyquery(\".cookie-notice\"))\n\n        self.renew_app()\n\n        with self.subTest(action=\"decline\"):\n            form_page = self.app.get(self.url)\n\n            decline_form = form_page.forms[1]\n            assert \"decline\" in decline_form.action\n\n            refreshed_form_page = decline_form.submit().follow()\n\n            self.assertEqual(refreshed_form_page.request.path, self.url)\n            self.assertFalse(refreshed_form_page.pyquery(\".cookie-notice\"))\n\n    def test_analytics_snippets_not_rendered(self):\n        \"\"\"\n        Assert that the analytics snippets are opt-in.\n\n        Analytics snippets are only loaded after the user accepts the cookies.\n        \"\"\"\n        with self.subTest(case=\"no cookies accepted or declined\"):\n            form_page = self.app.get(self.url)\n\n            self.assertTemplateNotUsed(form_page, \"includes/analytics/all_head.html\")\n            self.assertTemplateNotUsed(form_page, \"includes/analytics/all_bottom.html\")\n\n        with self.subTest(case=\"cookies rejected\"):\n            decline_form = form_page.forms[1]\n            assert \"decline\" in decline_form.action\n\n            refreshed_form_page = decline_form.submit().follow()\n\n            self.assertTemplateNotUsed(\n                refreshed_form_page, \"includes/analytics/all_head.html\"\n            )\n            self.assertTemplateNotUsed(\n                refreshed_form_page, \"includes/analytics/all_bottom.html\"\n            )\n\n        self.renew_app()\n\n        with self.subTest(case=\"cookies accepted\"):\n            form_page = self.app.get(self.url)\n\n            accept_form = form_page.forms[0]\n            assert \"accept\" in accept_form.action\n\n            refreshed_form_page = accept_form.submit().follow()\n\n            self.assertTemplateUsed(\n                refreshed_form_page, \"includes/analytics/all_head.html\"\n            )\n            self.assertTemplateUsed(\n                refreshed_form_page, \"includes/analytics/all_bottom.html\"\n            )\n\n    @tag(\"GHSA-c97h-m5qf-j8mf\")\n    @override_settings(\n        CORS_ALLOW_ALL_ORIGINS=False,\n        CORS_ALLOWED_ORIGINS=[\"https://external.domain.com\"],\n        ALLOWED_HOSTS=[\"testserver\", \"example.com\"],\n        IS_HTTPS=True,\n    )\n    def test_accept_reject_does_not_allow_open_redirect(self):\n        url = reverse(\"cookie_consent_cookie_group_list\")\n        allowed_redirects = (\n            \"https://example.com/foo/bar\",\n            \"https://testserver/admin/\",\n            \"/admin/\",\n        )\n        blocked_redirects = (\n            \"http://example.com\",\n            \"https://evil.com\",\n        )\n\n        for allowed in allowed_redirects:\n            with self.subTest(f\"Allowed redirect to '{allowed}'\"):\n                self.renew_app()\n\n                cookies_page = self.app.get(url, {\"referer\": allowed})\n\n                button = cookies_page.pyquery.find(\"a.button--primary\")\n                self.assertEqual(button.attr[\"href\"], allowed)\n                self.assertEqual(button.text(), _(\"Close\"))\n\n        for blocked in blocked_redirects:\n            with self.subTest(f\"Blockedredirect to '{blocked}'\"):\n                self.renew_app()\n\n                cookies_page = self.app.get(url, {\"referer\": blocked})\n\n                button = cookies_page.pyquery.find(\"a.button--primary\")\n                self.assertFalse(button)\n\n                for form in cookies_page.forms.values():\n                    next_url = furl(form[\"next\"].value)\n\n                    self.assertEqual(next_url.args.get(\"referer\", \"\"), \"\")\n", "code_before": "from io import StringIO\n\nfrom django.core.management import call_command\nfrom django.test import override_settings, tag\nfrom django.urls import reverse\nfrom django.utils.translation import gettext as _\n\nfrom cookie_consent.cache import delete_cache\nfrom cookie_consent.models import CookieGroup\nfrom django_webtest import WebTest\nfrom furl import furl\n\nfrom openforms.config.models import GlobalConfiguration\nfrom openforms.forms.tests.factories import FormFactory\nfrom openforms.tests.utils import NOOP_CACHES\n\n\n@override_settings(CACHES=NOOP_CACHES)\nclass CookieNoticeTests(WebTest):\n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n\n        cls.form = FormFactory.create()\n        cls.url = reverse(\"forms:form-detail\", kwargs={\"slug\": cls.form.slug})\n\n        # load some default cookie groups and cookies\n        call_command(\"loaddata\", \"cookie_consent\", stdout=StringIO())\n\n        config = GlobalConfiguration.get_solo()\n\n        # configure analytics so that the JS snippets are not empty\n        config.gtm_code = \"GTM-XXXX\"\n        config.ga_code = \"UA-XXXXX-Y\"\n        config.matomo_url = \"https://example.com\"\n        config.matomo_site_id = \"1234\"\n        config.piwik_url = \"https://example.com\"\n        config.piwik_site_id = \"1234\"\n        config.siteimprove_id = \"1234\"\n        config.analytics_cookie_consent_group = CookieGroup.objects.get(\n            varname=\"analytical\"\n        )\n        config.save()\n\n        # workaround for https://github.com/bmihelac/django-cookie-consent/issues/41\n        # the cache instance is resolved at import time rather than at runtime.\n        delete_cache()\n\n    def test_anon_user_notice_rendered(self):\n        form_page = self.app.get(self.url)\n\n        cookie_notice = form_page.pyquery(\".cookie-notice\")\n\n        # check that the notice is present\n        self.assertTrue(bool(cookie_notice))\n\n    def test_accept_reject_cookies(self):\n        \"\"\"\n        Assert that the cookie notice is no longer visible once the user accepted or\n        rejected them.\n        \"\"\"\n        with self.subTest(action=\"accept\"):\n            form_page = self.app.get(self.url)\n\n            accept_form = form_page.forms[0]\n            assert \"accept\" in accept_form.action\n\n            refreshed_form_page = accept_form.submit().follow()\n\n            self.assertEqual(refreshed_form_page.request.path, self.url)\n            self.assertFalse(refreshed_form_page.pyquery(\".cookie-notice\"))\n\n        self.renew_app()\n\n        with self.subTest(action=\"decline\"):\n            form_page = self.app.get(self.url)\n\n            decline_form = form_page.forms[1]\n            assert \"decline\" in decline_form.action\n\n            refreshed_form_page = decline_form.submit().follow()\n\n            self.assertEqual(refreshed_form_page.request.path, self.url)\n            self.assertFalse(refreshed_form_page.pyquery(\".cookie-notice\"))\n\n    def test_analytics_snippets_not_rendered(self):\n        \"\"\"\n        Assert that the analytics snippets are opt-in.\n\n        Analytics snippets are only loaded after the user accepts the cookies.\n        \"\"\"\n        with self.subTest(case=\"no cookies accepted or declined\"):\n            form_page = self.app.get(self.url)\n\n            self.assertTemplateNotUsed(form_page, \"includes/analytics/all_head.html\")\n            self.assertTemplateNotUsed(form_page, \"includes/analytics/all_bottom.html\")\n\n        with self.subTest(case=\"cookies rejected\"):\n            decline_form = form_page.forms[1]\n            assert \"decline\" in decline_form.action\n\n            refreshed_form_page = decline_form.submit().follow()\n\n            self.assertTemplateNotUsed(\n                refreshed_form_page, \"includes/analytics/all_head.html\"\n            )\n            self.assertTemplateNotUsed(\n                refreshed_form_page, \"includes/analytics/all_bottom.html\"\n            )\n\n        self.renew_app()\n\n        with self.subTest(case=\"cookies accepted\"):\n            form_page = self.app.get(self.url)\n\n            accept_form = form_page.forms[0]\n            assert \"accept\" in accept_form.action\n\n            refreshed_form_page = accept_form.submit().follow()\n\n            self.assertTemplateUsed(\n                refreshed_form_page, \"includes/analytics/all_head.html\"\n            )\n            self.assertTemplateUsed(\n                refreshed_form_page, \"includes/analytics/all_bottom.html\"\n            )\n\n    @tag(\"GHSA-c97h-m5qf-j8mf\")\n    @override_settings(\n        CORS_ALLOW_ALL_ORIGINS=False,\n        CORS_ALLOWED_ORIGINS=[\"https://external.domain.com\"],\n        ALLOWED_HOSTS=[\"testserver\", \"example.com\"],\n        IS_HTTPS=True,\n    )\n    def test_accept_reject_does_not_allow_open_redirect(self):\n        url = reverse(\"cookie_consent_cookie_group_list\")\n        allowed_redirects = (\n            \"https://example.com/foo/bar\",\n            \"https://testserver/admin/\",\n            \"/admin/\",\n        )\n        blocked_redirects = (\n            \"http://example.com\",\n            \"https://evil.com\",\n        )\n\n        for allowed in allowed_redirects:\n            with self.subTest(f\"Allowed redirect to '{allowed}'\"):\n                self.renew_app()\n\n                cookies_page = self.app.get(url, {\"referer\": allowed})\n\n                button = cookies_page.pyquery.find(\"a.button--primary\")\n                self.assertEqual(button.attr[\"href\"], allowed)\n                self.assertEqual(button.text(), _(\"Close\"))\n\n        for blocked in blocked_redirects:\n            with self.subTest(f\"Blockedredirect to '{blocked}'\"):\n                self.renew_app()\n\n                cookies_page = self.app.get(url, {\"referer\": blocked})\n\n                button = cookies_page.pyquery.find(\"a.button--primary\")\n                self.assertFalse(button)\n\n                for form in cookies_page.forms.values():\n                    next_url = furl(form[\"next\"].value)\n\n                    self.assertEqual(next_url.args.get(\"referer\", \"\"), \"\")\n", "patch": "@@ -1,12 +1,14 @@\n from io import StringIO\n \n from django.core.management import call_command\n-from django.test import override_settings\n+from django.test import override_settings, tag\n from django.urls import reverse\n+from django.utils.translation import gettext as _\n \n from cookie_consent.cache import delete_cache\n from cookie_consent.models import CookieGroup\n from django_webtest import WebTest\n+from furl import furl\n \n from openforms.config.models import GlobalConfiguration\n from openforms.forms.tests.factories import FormFactory\n@@ -122,3 +124,46 @@ def test_analytics_snippets_not_rendered(self):\n             self.assertTemplateUsed(\n                 refreshed_form_page, \"includes/analytics/all_bottom.html\"\n             )\n+\n+    @tag(\"GHSA-c97h-m5qf-j8mf\")\n+    @override_settings(\n+        CORS_ALLOW_ALL_ORIGINS=False,\n+        CORS_ALLOWED_ORIGINS=[\"https://external.domain.com\"],\n+        ALLOWED_HOSTS=[\"testserver\", \"example.com\"],\n+        IS_HTTPS=True,\n+    )\n+    def test_accept_reject_does_not_allow_open_redirect(self):\n+        url = reverse(\"cookie_consent_cookie_group_list\")\n+        allowed_redirects = (\n+            \"https://example.com/foo/bar\",\n+            \"https://testserver/admin/\",\n+            \"/admin/\",\n+        )\n+        blocked_redirects = (\n+            \"http://example.com\",\n+            \"https://evil.com\",\n+        )\n+\n+        for allowed in allowed_redirects:\n+            with self.subTest(f\"Allowed redirect to '{allowed}'\"):\n+                self.renew_app()\n+\n+                cookies_page = self.app.get(url, {\"referer\": allowed})\n+\n+                button = cookies_page.pyquery.find(\"a.button--primary\")\n+                self.assertEqual(button.attr[\"href\"], allowed)\n+                self.assertEqual(button.text(), _(\"Close\"))\n+\n+        for blocked in blocked_redirects:\n+            with self.subTest(f\"Blockedredirect to '{blocked}'\"):\n+                self.renew_app()\n+\n+                cookies_page = self.app.get(url, {\"referer\": blocked})\n+\n+                button = cookies_page.pyquery.find(\"a.button--primary\")\n+                self.assertFalse(button)\n+\n+                for form in cookies_page.forms.values():\n+                    next_url = furl(form[\"next\"].value)\n+\n+                    self.assertEqual(next_url.args.get(\"referer\", \"\"), \"\")", "file_path": "files/2022_6/617", "file_language": "py", "file_name": "src/openforms/tests/test_cookie_notice.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/open-formulieren/open-forms/raw/3e8c9cce386e548765783354694fbb9d7a6ea7d3/src%2Fopenforms%2Futils%2Fredirect.py", "code": "from urllib.parse import urlparse, urlunparse\n\nfrom django.conf import settings\nfrom django.utils.http import url_has_allowed_host_and_scheme\n\nfrom corsheaders.conf import conf as cors_conf\nfrom corsheaders.middleware import CorsMiddleware\n\n\ndef origin_from_url(url: str) -> str:\n    parts = urlparse(url)\n    new = [parts[0], parts[1], \"\", \"\", \"\", \"\"]\n    return urlunparse(new)\n\n\ndef allow_redirect_url(url: str) -> bool:\n    \"\"\"\n    Check that a redirect target is allowed against the CORS policy.\n\n    The \"Cross-Origin Resource Sharing\" configuration specifies which external hosts\n    are allowed to access Open Forms. We leverage this configuration to block or allow\n    redirects to external hosts.\n    \"\"\"\n    # first, check if the URL is in ALLOWED_HOSTS. We deliberately exclude the wildcard\n    # setting to require explicit configuration either via ALLOWED_HOSTS or CORS_* settings.\n    allowed_hosts_check = url_has_allowed_host_and_scheme(\n        url=url,\n        allowed_hosts=[host for host in settings.ALLOWED_HOSTS if host != \"*\"],\n        # settings.ALLOWED_HOSTS means we are serving the domain, so we can enforce our\n        # own custom HTTPS setting.\n        require_https=settings.IS_HTTPS,\n    )\n    # if we pass via ALLOWED_HOSTS, short-circuit, otherwise we check the CORS policy\n    # for allowed external domains.\n    if allowed_hosts_check:\n        return True\n\n    cors = CorsMiddleware()\n    origin = origin_from_url(url)\n    parts = urlparse(url)\n\n    if not cors_conf.CORS_ALLOW_ALL_ORIGINS and not cors.origin_found_in_white_lists(\n        origin, parts\n    ):\n        return False\n    else:\n        return True\n", "code_before": "from urllib.parse import urlparse, urlunparse\n\nfrom django.conf import settings\nfrom django.utils.http import url_has_allowed_host_and_scheme\n\nfrom corsheaders.conf import conf as cors_conf\nfrom corsheaders.middleware import CorsMiddleware\n\n\ndef origin_from_url(url: str) -> str:\n    parts = urlparse(url)\n    new = [parts[0], parts[1], \"\", \"\", \"\", \"\"]\n    return urlunparse(new)\n\n\ndef allow_redirect_url(url: str) -> bool:\n    \"\"\"\n    Check that a redirect target is allowed against the CORS policy.\n\n    The \"Cross-Origin Resource Sharing\" configuration specifies which external hosts\n    are allowed to access Open Forms. We leverage this configuration to block or allow\n    redirects to external hosts.\n    \"\"\"\n    # first, check if the URL is in ALLOWED_HOSTS. We deliberately exclude the wildcard\n    # setting to require explicit configuration either via ALLOWED_HOSTS or CORS_* settings.\n    allowed_hosts_check = url_has_allowed_host_and_scheme(\n        url=url,\n        allowed_hosts=[host for host in settings.ALLOWED_HOSTS if host != \"*\"],\n        # settings.ALLOWED_HOSTS means we are serving the domain, so we can enforce our\n        # own custom HTTPS setting.\n        require_https=settings.IS_HTTPS,\n    )\n    # if we pass via ALLOWED_HOSTS, short-circuit, otherwise we check the CORS policy\n    # for allowed external domains.\n    if allowed_hosts_check:\n        return True\n\n    cors = CorsMiddleware()\n    origin = origin_from_url(url)\n    parts = urlparse(url)\n\n    if not cors_conf.CORS_ALLOW_ALL_ORIGINS and not cors.origin_found_in_white_lists(\n        origin, parts\n    ):\n        return False\n    else:\n        return True\n", "patch": "@@ -1,5 +1,8 @@\n from urllib.parse import urlparse, urlunparse\n \n+from django.conf import settings\n+from django.utils.http import url_has_allowed_host_and_scheme\n+\n from corsheaders.conf import conf as cors_conf\n from corsheaders.middleware import CorsMiddleware\n \n@@ -18,6 +21,20 @@ def allow_redirect_url(url: str) -> bool:\n     are allowed to access Open Forms. We leverage this configuration to block or allow\n     redirects to external hosts.\n     \"\"\"\n+    # first, check if the URL is in ALLOWED_HOSTS. We deliberately exclude the wildcard\n+    # setting to require explicit configuration either via ALLOWED_HOSTS or CORS_* settings.\n+    allowed_hosts_check = url_has_allowed_host_and_scheme(\n+        url=url,\n+        allowed_hosts=[host for host in settings.ALLOWED_HOSTS if host != \"*\"],\n+        # settings.ALLOWED_HOSTS means we are serving the domain, so we can enforce our\n+        # own custom HTTPS setting.\n+        require_https=settings.IS_HTTPS,\n+    )\n+    # if we pass via ALLOWED_HOSTS, short-circuit, otherwise we check the CORS policy\n+    # for allowed external domains.\n+    if allowed_hosts_check:\n+        return True\n+\n     cors = CorsMiddleware()\n     origin = origin_from_url(url)\n     parts = urlparse(url)", "file_path": "files/2022_6/618", "file_language": "py", "file_name": "src/openforms/utils/redirect.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
