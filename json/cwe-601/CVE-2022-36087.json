{"index": 9090, "cve_id": "CVE-2022-36087", "cwe_id": ["CWE-20", "CWE-601"], "cve_language": "Python", "cve_description": "OAuthLib is an implementation of the OAuth request-signing logic for Python 3.6+. In OAuthLib versions 3.1.1 until 3.2.1, an attacker providing malicious redirect uri can cause denial of service. An attacker can also leverage usage of `uri_validate` functions depending where it is used. OAuthLib applications using OAuth2.0 provider support or use directly `uri_validate` are affected by this issue. Version 3.2.1 contains a patch. There are no known workarounds.", "cvss": "6.5", "publish_date": "September 9, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "UNCHANGED", "C": "NONE", "I": "NONE", "A": "HIGH", "commit_id": "2e40b412c844ecc4673c3fa3f72181f228bdbacd", "commit_message": "Merge pull request from GHSA-3pgj-pg6c-r5p7\n\nImprove test coverage of IPv6 parsing", "commit_date": "2022-09-09T19:48:14Z", "project": "oauthlib/oauthlib", "url": "https://api.github.com/repos/oauthlib/oauthlib/commits/2e40b412c844ecc4673c3fa3f72181f228bdbacd", "html_url": "https://github.com/oauthlib/oauthlib/commit/2e40b412c844ecc4673c3fa3f72181f228bdbacd", "windows_before": [{"commit_id": "b4bdd09c56aa5dedb475529e75ce73c092ca0898", "commit_date": "Tue Sep 6 22:29:50 2022 +0200", "commit_message": "Merge pull request #818 from dasm/master", "files_name": ["5d85c61998692643dd9d17e05d2646e06ce391e8 - Tue Sep 6 21:56:40 2022 +0200 : Fix IPV6 regex used to check redirect_uri", "oauthlib/uri_validate.py", "tests/test_uri_validate.py"]}, {"commit_id": "e514826eea15f2b62bbc13da407b71552ef5ff4c", "commit_date": "Fri Sep 2 23:22:17 2022 +0200", "commit_message": "Add check of performance of ipv6 check", "files_name": ["tests/test_uri_validate.py"]}, {"commit_id": "511ea25363cdeb955d8945f9d93594da0a6b9b80", "commit_date": "Tue Aug 30 10:13:24 2022 +0600", "commit_message": "create security policy", "files_name": ["SECURITY.md"]}, {"commit_id": "0adbbe10ed8ef822d1c780987fffc56670ce3f9f", "commit_date": "Tue Jul 5 23:02:37 2022 +0800", "commit_message": "docs: fix typos", "files_name": ["CHANGELOG.rst", "README.rst", "docs/contributing.rst", "docs/faq.rst", "docs/oauth1/security.rst", "docs/oauth1/server.rst", "docs/oauth2/endpoints/endpoints.rst", "docs/oauth2/endpoints/resource.rst", "docs/oauth2/grants/custom_validators.rst", "docs/oauth2/tokens/bearer.rst", "oauthlib/oauth1/rfc5849/endpoints/request_token.py", "oauthlib/oauth1/rfc5849/endpoints/resource.py", "oauthlib/oauth1/rfc5849/request_validator.py", "oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc6749/clients/mobile_application.py", "oauthlib/oauth2/rfc6749/clients/service_application.py", "oauthlib/oauth2/rfc6749/clients/web_application.py", "oauthlib/oauth2/rfc6749/endpoints/revocation.py", "oauthlib/oauth2/rfc6749/request_validator.py", "tox.ini"]}, {"commit_id": "6569ec3c062be7268f4a17f5a371aa29f1bcfa4a", "commit_date": "Sun Jul 3 08:51:07 2022 +1000", "commit_message": "docs: Fix a few typos", "files_name": ["docs/oauth1/security.rst", "docs/oauth2/grants/custom_grant.rst", "oauthlib/oauth2/rfc6749/clients/backend_application.py", "oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc6749/clients/legacy_application.py", "oauthlib/oauth2/rfc6749/clients/service_application.py", "oauthlib/oauth2/rfc6749/clients/web_application.py", "oauthlib/oauth2/rfc6749/endpoints/revocation.py", "oauthlib/oauth2/rfc6749/parameters.py", "oauthlib/openid/connect/core/grant_types/dispatchers.py"]}, {"commit_id": "9aa45aaff0cdeab258d18c025cf66e9bdba529c0", "commit_date": "Mon Jun 27 07:20:06 2022 -0700", "commit_message": "Restored test for port 0.", "files_name": ["oauthlib/oauth1/rfc5849/signature.py", "tests/oauth1/rfc5849/test_signatures.py"]}, {"commit_id": "f52f641d763e4958d108e875e0cd6fca50d110f2", "commit_date": "Tue Jun 21 07:53:36 2022 -0700", "commit_message": "Merge branch 'oauthlib:master' into master", "files_name": ["bdc486e2bc3a188027a4ebec3a3013e64023ce62 - Wed Jun 15 12:03:25 2022 -0700 : Fixed isort imports", "oauthlib/common.py", "oauthlib/oauth1/__init__.py", "oauthlib/oauth1/rfc5849/endpoints/base.py", "oauthlib/oauth1/rfc5849/signature.py", "oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc8628/clients/device.py", "oauthlib/openid/connect/core/grant_types/base.py", "oauthlib/openid/connect/core/tokens.py", "tests/oauth1/rfc5849/test_signatures.py", "tests/oauth2/rfc6749/endpoints/test_metadata.py"]}, {"commit_id": "ed0cb63945c4a5940b185823809693b7f97989ad", "commit_date": "Wed Jun 15 10:20:29 2022 -0700", "commit_message": "Removed unused query and fragment", "files_name": ["oauthlib/oauth1/rfc5849/signature.py"]}, {"commit_id": "d05c388078b45285ac4a012c568a5e2d56556a34", "commit_date": "Wed Jun 15 09:26:20 2022 -0700", "commit_message": "Removed dependency on split", "files_name": ["oauthlib/oauth1/rfc5849/signature.py", "tests/oauth1/rfc5849/test_signatures.py"]}, {"commit_id": "7db45bda96ea6f5fde1186e8fd43d75ce6b95ab5", "commit_date": "Wed May 25 16:02:42 2022 +0200", "commit_message": "Fix typo in server.rst", "files_name": ["docs/oauth2/server.rst"]}, {"commit_id": "49294a6a7cb6e9ece1c1814d629e2d9e497180fa", "commit_date": "Thu May 19 09:41:59 2022 -0700", "commit_message": "OAuth1: Allow IPv6 addresses being parsed by signature", "files_name": ["oauthlib/oauth1/rfc5849/signature.py"]}, {"commit_id": "b14ad85921db2406ecaf5927a8be08a7566c236e", "commit_date": "Sun May 8 18:57:00 2022 +0900", "commit_message": "chore: s/bode_code_verifier/body_code_verifier/g", "files_name": ["tests/oauth2/rfc6749/clients/test_web_application.py"]}, {"commit_id": "b123283ba3d41acb3e787fdf68bd5907972b4bad", "commit_date": "Sun Mar 6 09:24:34 2022 -0800", "commit_message": "Allow non-HTTPS issuer when OAUTHLIB_INSECURE_TRANSPORT. (#803)", "files_name": ["oauthlib/oauth2/rfc6749/endpoints/metadata.py", "tests/oauth2/rfc6749/endpoints/test_metadata.py"]}, {"commit_id": "2f887b5a070bf617a471c573ad52fb58251c61af", "commit_date": "Thu Feb 24 02:07:49 2022 +0100", "commit_message": "Docs: fix Sphinx warnings for better ReadTheDocs generation (#807)", "files_name": [".travis.yml", "README.rst", "docs/Makefile", "docs/conf.py", "docs/contributing.rst", "docs/feature_matrix.rst", "docs/oauth2/clients/client.rst", "docs/oauth2/oidc/grants.rst", "docs/oauth2/oidc/id_tokens.rst", "docs/oauth2/oidc/refresh_token.rst", "docs/oauth2/oidc/validator.rst", "docs/release_process.rst", "oauthlib/oauth1/rfc5849/request_validator.py", "oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc6749/endpoints/introspect.py", "oauthlib/oauth2/rfc6749/request_validator.py", "oauthlib/oauth2/rfc8628/clients/device.py", "oauthlib/openid/connect/core/endpoints/userinfo.py"]}, {"commit_id": "d4bafd9f1d0eba3766e933b1ac598cbbf37b8914", "commit_date": "Fri Feb 18 21:28:07 2022 +0100", "commit_message": "Merge pull request #797 from cclauss/patch-2", "files_name": ["f175204fee78b99be13ab1973e563795fc81d199 - Fri Feb 18 21:14:20 2022 +0100 : Merge pull request #806 from luhn/refresh-grant-cors", "47c229c5ae0803eae08233f60f846bd401f9543b - Tue Feb 15 16:33:41 2022 -0800 : Add CORS support for Refresh Token Grant.", "oauthlib/oauth2/rfc6749/grant_types/authorization_code.py", "oauthlib/oauth2/rfc6749/grant_types/base.py", "oauthlib/oauth2/rfc6749/grant_types/refresh_token.py", "oauthlib/oauth2/rfc6749/request_validator.py", "tests/oauth2/rfc6749/grant_types/test_refresh_token.py"]}, {"commit_id": "6b1f5db98d464c31db807b7ab0e0fe43ebca46d0", "commit_date": "Sat Feb 12 21:11:23 2022 +0100", "commit_message": "add missing slots to TokenBase", "files_name": ["oauthlib/oauth2/rfc6749/tokens.py"]}, {"commit_id": "ccf9189bd5a60ad490351c005db042c9788ac441", "commit_date": "Sat Jan 29 23:12:02 2022 +0100", "commit_message": "Merge pull request #800 from oauthlib/3.2.0-dev", "files_name": ["112404878bdc8b492764e133c388afb978392e09 - Sat Jan 29 23:04:08 2022 +0100 : Changed docs to python37", ".travis.yml"]}, {"commit_id": "d4d0a9dea44d98f44de2dab5a903aa790b4cbec7", "commit_date": "Sat Jan 29 22:55:57 2022 +0100", "commit_message": "Fixed the version", "files_name": ["oauthlib/__init__.py"]}, {"commit_id": "864bd932a1a17a82cfe98078634fb38ec222dfc6", "commit_date": "Sat Jan 29 22:55:27 2022 +0100", "commit_message": "Add contributors to AUTHORS file.", "files_name": ["AUTHORS"]}, {"commit_id": "4e01008da0ef0de88f4ebe648cdc564117beced8", "commit_date": "Sat Jan 29 22:47:54 2022 +0100", "commit_message": "Fixed code documentation", "files_name": ["oauthlib/oauth2/rfc8628/clients/device.py"]}, {"commit_id": "bd2e8edf8313aebd99a0bcf752ff4a7e2c1769a0", "commit_date": "Sat Jan 29 22:46:53 2022 +0100", "commit_message": "Changelog of 3.2.0", "files_name": ["CHANGELOG.rst", "docs/feature_matrix.rst"]}, {"commit_id": "947d533d3408be89f0344bcbdace01513bdb16d6", "commit_date": "Sat Jan 29 22:46:26 2022 +0100", "commit_message": "Set python3.7 since RTD has switched to python3.7", "files_name": ["tox.ini"]}, {"commit_id": "c45943f89c98a8f8f185128eddca0e359311a6ad", "commit_date": "Sat Jan 29 21:43:39 2022 +0100", "commit_message": "Merge pull request #766 from oauthlib/3.2.0-dev", "files_name": ["cc5216eb10f2bee34662471c90ba623ce0620bd9 - Mon Jan 24 03:26:34 2022 +0100 : Travis CI: Python 3.10.1 --> 3.10.2 (#798)", ".travis.yml"]}, {"commit_id": "c3e878733fa911804c7f55cf72f66dc281922fca", "commit_date": "Mon Jan 17 19:21:08 2022 -0800", "commit_message": "Add support for device authorization flow (RFC8628) (#795)", "files_name": ["docs/oauth2/clients/deviceclient.rst", "oauthlib/oauth2/__init__.py", "oauthlib/oauth2/rfc8628/__init__.py", "oauthlib/oauth2/rfc8628/clients/__init__.py", "oauthlib/oauth2/rfc8628/clients/device.py", "tests/oauth2/rfc8628/__init__.py", "tests/oauth2/rfc8628/clients/__init__.py", "tests/oauth2/rfc8628/clients/test_device.py"]}, {"commit_id": "553850bc85dfd408be0dae9884b4a0aefda8e579", "commit_date": "Sat Jan 8 15:17:41 2022 +0100", "commit_message": "Travis CI: Add Python 3.11-dev to the testing (#796)", "files_name": [".travis.yml", "tox.ini"]}, {"commit_id": "1695eef39f9abe2f8669427cd3dc6a9883f425d8", "commit_date": "Sat Jan 8 14:46:17 2022 +0100", "commit_message": "GitHub Action to lint Python code", "files_name": [".github/workflows/lint_python.yml"]}, {"commit_id": "06497bede5934e367a7fbe94fe1b1d0538d417d4", "commit_date": "Mon Dec 13 00:41:35 2021 -0500", "commit_message": "PKCE  (#786)", "files_name": ["oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc6749/clients/web_application.py", "oauthlib/oauth2/rfc6749/parameters.py", "tests/oauth2/rfc6749/clients/test_base.py", "tests/oauth2/rfc6749/clients/test_web_application.py", "tests/oauth2/rfc6749/test_parameters.py"]}, {"commit_id": "6db69014898e2095cf165be0faab4f99178896b6", "commit_date": "Tue Nov 16 22:40:49 2021 -0800", "commit_message": "Add `Access-Control-Allow-Origin` header to metadata endpoint.", "files_name": ["oauthlib/oauth2/rfc6749/endpoints/metadata.py", "tests/oauth2/rfc6749/endpoints/test_metadata.py"]}, {"commit_id": "55ce48b7218ee25794822141c5844eec4a0ff8d9", "commit_date": "Tue Nov 16 23:38:30 2021 -0800", "commit_message": "Add support for CORS in the token endpoint.", "files_name": ["oauthlib/oauth2/rfc6749/grant_types/authorization_code.py", "oauthlib/oauth2/rfc6749/request_validator.py", "tests/oauth2/rfc6749/grant_types/test_authorization_code.py", "tests/oauth2/rfc6749/test_request_validator.py"]}, {"commit_id": "ea5ef62290ee306b20e4b57270d0a0575788a461", "commit_date": "Tue Dec 7 16:49:01 2021 -0800", "commit_message": "minor spelling correction", "files_name": ["docs/installation.rst"]}, {"commit_id": "f6710113fdba6efe3710efdc2e26a08398509cb2", "commit_date": "Sat Nov 13 23:08:49 2021 +0300", "commit_message": "rm comma after Bearer in WWW-Authenticate header", "files_name": ["oauthlib/oauth2/rfc6749/errors.py", "tests/oauth2/rfc6749/endpoints/test_introspect_endpoint.py", "tests/oauth2/rfc6749/endpoints/test_revocation_endpoint.py"]}, {"commit_id": "ff24e70db077639bfdfe76e9d9bb333af27f9912", "commit_date": "Fri Oct 22 00:59:12 2021 -0600", "commit_message": "Bug expires at (#783)", "files_name": ["oauthlib/oauth2/rfc6749/clients/base.py", "tests/oauth2/rfc6749/clients/test_base.py"]}, {"commit_id": "f655d73f9dcbc1f7a1475038d6703870ef99c1fb", "commit_date": "Mon Oct 11 18:54:27 2021 +0300", "commit_message": "CoverageWarning: --include is ignored because --source is set (include-ignored)", "files_name": [".coveragerc"]}, {"commit_id": "642cc2134deccd7de3a305a3f48a302fbf7e8ae9", "commit_date": "Mon Oct 11 18:45:29 2021 +0300", "commit_message": "Universal wheels are for code expected to work on both Python 2 and 3", "files_name": ["setup.cfg"]}, {"commit_id": "757baf4cddf5216374932d756aaf75d0bde88b64", "commit_date": "Mon Oct 11 18:45:05 2021 +0300", "commit_message": "Add support for Python 3.9 and 3.10", "files_name": [".travis.yml", "setup.py"]}], "windows_after": [{"commit_id": "4a4d65f8eeecfe7d778269466871c5c15fe9c1bc", "commit_date": "Fri Sep 9 22:01:18 2022 +0200", "commit_message": "Merge pull request #832 from oauthlib/3.2.1", "files_name": ["52599819d5778d19ad684b83f2d503d1475f4c81 - Sat Sep 10 15:11:38 2022 +0600 : draft CI", ".github/workflows/python-publish.yml"]}, {"commit_id": "a70e13ff19d74f7fc1e397742782c7b881e2d496", "commit_date": "Fri Sep 16 13:28:20 2022 +0200", "commit_message": "Use proper SPDX identifier", "files_name": ["setup.py"]}, {"commit_id": "c3dda126005547184d2688d350585e940be996f5", "commit_date": "Thu Oct 6 09:20:34 2022 +0200", "commit_message": "Upgrade GitHub Actions and make bandit, codespell, and pytest mandatory (#835)", "files_name": [".github/workflows/lint_python.yml", "oauthlib/openid/connect/core/request_validator.py"]}, {"commit_id": "f1cc9c8d26c096b7ffee83fae5aae6c1249e7bf8", "commit_date": "Tue May 3 16:39:24 2022 +0200", "commit_message": "OAuth2Error: Allow falsy values as state", "files_name": ["oauthlib/oauth2/rfc6749/errors.py"]}, {"commit_id": "7e69a15c01dd7d23edf0a958ced62c0684286ccb", "commit_date": "Thu Oct 6 01:47:12 2022 -0700", "commit_message": "Update pre-configured OIDC server to use OIDC flavor of Refresh Token grant type (#838)", "files_name": ["oauthlib/openid/connect/core/endpoints/pre_configured.py", "tests/openid/connect/core/endpoints/test_refresh_token.py"]}, {"commit_id": "564d526fdbdc32a936e4b5ddac186c26024f626b", "commit_date": "Tue Oct 18 09:43:17 2022 +0200", "commit_message": "Update setup.cfg to use license_files (#839)", "files_name": ["setup.cfg"]}, {"commit_id": "7d7fe904af504c20f7d802650e54a78e3d0be8ba", "commit_date": "Mon Oct 17 21:42:56 2022 +0200", "commit_message": "Add 3.2.2 version", "files_name": ["CHANGELOG.rst", "oauthlib/__init__.py"]}, {"commit_id": "d4b6699f8ccb608152b764919e0bd3d38a7b171f", "commit_date": "Mon Aug 22 16:32:14 2022 +0000", "commit_message": "Ensure expires_at is always int", "files_name": ["oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc6749/parameters.py", "tests/oauth2/rfc6749/clients/test_base.py", "tests/oauth2/rfc6749/clients/test_service_application.py"]}, {"commit_id": "5eb7b65c6ea9ef66ecc69299f8f28b58a0fe33f3", "commit_date": "Wed Aug 23 15:47:58 2023 +0100", "commit_message": "Merge pull request #831 from oauthlib/secpol", "files_name": ["88e7ae82d9cd7433e19cd1fa4fa449a3c40b2aff - Wed Aug 23 15:48:21 2023 +0100 : Update .github/workflows/python-publish.yml", ".github/workflows/python-publish.yml"]}, {"commit_id": "a8d29ff192ff0c0bcb6fcee56ddea34034233efd", "commit_date": "Wed Aug 23 22:07:27 2023 +0600", "commit_message": "Update .github/workflows/python-publish.yml", "files_name": [".github/workflows/python-publish.yml"]}, {"commit_id": "7637284517a974cbe2ab71ad1de36fbd235ebc4b", "commit_date": "Wed Aug 23 19:51:38 2023 +0200", "commit_message": "Fix failing GitHub Action lint_python.yml", "files_name": [".github/workflows/lint_python.yml"]}, {"commit_id": "9139b72753cd1423d325cd7641f4b3c16ed27e43", "commit_date": "Thu Aug 24 13:36:49 2023 +0200", "commit_message": "Initial build & publish rules with GH Actions", "files_name": [".github/workflows/python-build.yml", ".github/workflows/python-publish.yml", ".travis.yml", "Makefile", "tox.ini"]}, {"commit_id": "d63d1aea5d3eb1e2240077096177687f018fc32a", "commit_date": "Fri Sep 16 13:28:20 2022 +0200", "commit_message": "Use proper SPDX identifier", "files_name": ["setup.py"]}, {"commit_id": "c21c56287d09f0d5f8e565ef201d841af5724004", "commit_date": "Thu Oct 6 09:20:34 2022 +0200", "commit_message": "Upgrade GitHub Actions and make bandit, codespell, and pytest mandatory (#835)", "files_name": [".github/workflows/lint_python.yml", "oauthlib/openid/connect/core/request_validator.py"]}, {"commit_id": "97f5d05357187cad30a4f1e3833620c18a173118", "commit_date": "Tue May 3 16:39:24 2022 +0200", "commit_message": "OAuth2Error: Allow falsy values as state", "files_name": ["oauthlib/oauth2/rfc6749/errors.py"]}, {"commit_id": "11833b611ed267e30c6746172815c7bc96f5777a", "commit_date": "Thu Oct 6 01:47:12 2022 -0700", "commit_message": "Update pre-configured OIDC server to use OIDC flavor of Refresh Token grant type (#838)", "files_name": ["oauthlib/openid/connect/core/endpoints/pre_configured.py", "tests/openid/connect/core/endpoints/test_refresh_token.py"]}, {"commit_id": "541297b344944d13c77f4ea0356b83bb3b381dba", "commit_date": "Tue Oct 18 09:43:17 2022 +0200", "commit_message": "Update setup.cfg to use license_files (#839)", "files_name": ["setup.cfg"]}, {"commit_id": "120c88e7aeae1a0f184c4aaf888cc0aef1c5f2b7", "commit_date": "Mon Oct 17 21:42:56 2022 +0200", "commit_message": "Add 3.2.2 version", "files_name": ["CHANGELOG.rst", "oauthlib/__init__.py"]}, {"commit_id": "761c1bf7b18c33abd24cdd7dd19b002a87f61866", "commit_date": "Mon Aug 22 16:32:14 2022 +0000", "commit_message": "Ensure expires_at is always int", "files_name": ["oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc6749/parameters.py", "tests/oauth2/rfc6749/clients/test_base.py", "tests/oauth2/rfc6749/clients/test_service_application.py"]}, {"commit_id": "ae242d89100be709e6b137594e45cf8df8eb634e", "commit_date": "Tue Aug 30 10:13:24 2022 +0600", "commit_message": "create security policy", "files_name": ["SECURITY.md"]}, {"commit_id": "38b2b4198d2a6b6232b68dab347618d4bc0a6a35", "commit_date": "Wed Aug 23 19:51:38 2023 +0200", "commit_message": "Fix failing GitHub Action lint_python.yml", "files_name": [".github/workflows/lint_python.yml"]}, {"commit_id": "2c9811b7c9180270412b2420d0b54b4cb4afa791", "commit_date": "Thu Aug 24 14:36:08 2023 +0200", "commit_message": "Add graphviz to generate dot graphs in docs", "files_name": [".github/workflows/python-build.yml"]}, {"commit_id": "a2c70e457a11287d0649a71877ed451c55821d34", "commit_date": "Thu Aug 24 15:55:45 2023 +0100", "commit_message": "Remove unnecessary name", "files_name": [".github/workflows/python-build.yml"]}, {"commit_id": "8b33f83fdcd5aed1d319534161dcb4bca73e28ed", "commit_date": "Thu Aug 24 17:45:46 2023 +0200", "commit_message": "Lint with ruff to replace bandit, flake8, isort, pyupgrade (#855)", "files_name": [".github/workflows/lint_python.yml", "docs/conf.py", "examples/__init__.py", "oauthlib/__init__.py", "oauthlib/common.py", "oauthlib/oauth1/rfc5849/__init__.py", "oauthlib/oauth1/rfc5849/endpoints/base.py", "oauthlib/oauth1/rfc5849/signature.py", "oauthlib/oauth1/rfc5849/utils.py", "oauthlib/oauth2/rfc6749/clients/base.py", "oauthlib/oauth2/rfc6749/clients/mobile_application.py", "oauthlib/oauth2/rfc6749/clients/web_application.py", "oauthlib/oauth2/rfc6749/endpoints/base.py", "oauthlib/oauth2/rfc6749/endpoints/introspect.py", "oauthlib/oauth2/rfc6749/endpoints/metadata.py", "oauthlib/oauth2/rfc6749/errors.py", "oauthlib/oauth2/rfc6749/grant_types/authorization_code.py", "oauthlib/oauth2/rfc6749/grant_types/base.py", "oauthlib/oauth2/rfc6749/grant_types/client_credentials.py", "oauthlib/oauth2/rfc6749/grant_types/implicit.py", "oauthlib/oauth2/rfc6749/grant_types/resource_owner_password_credentials.py", "oauthlib/oauth2/rfc6749/parameters.py", "oauthlib/oauth2/rfc6749/request_validator.py", "oauthlib/oauth2/rfc6749/tokens.py", "oauthlib/openid/connect/core/exceptions.py", "oauthlib/openid/connect/core/grant_types/hybrid.py", "oauthlib/openid/connect/core/tokens.py", "oauthlib/signals.py", "oauthlib/uri_validate.py", "ruff.toml", "setup.py", "tests/oauth1/rfc5849/endpoints/test_base.py", "tests/oauth1/rfc5849/test_signatures.py", "tests/oauth2/rfc6749/endpoints/test_metadata.py", "tests/oauth2/rfc6749/test_utils.py"]}, {"commit_id": "4a7db54f005686128102d7f7ac5c3d783c244669", "commit_date": "Thu Oct 27 11:43:20 2022 +0200", "commit_message": "Add classifier for Python 3.11", "files_name": ["setup.py"]}, {"commit_id": "3262c61a00e5ba9dc212b9890afa4d4df39afb1d", "commit_date": "Sat Aug 26 14:24:53 2023 +0200", "commit_message": "Merge master", "files_name": ["7fb099a19d1381267b258df8d648f348990c3706 - Sat Aug 26 14:27:07 2023 +0200 : Merge pull request #834 from oauthlib/CI", "3776064680b0d922993a00f765413ebbb57205fe - Sat Aug 26 14:30:53 2023 +0200 : Changed build badge in README", "README.rst"]}, {"commit_id": "56dd984375c7a3d83bdd2724aedaa31dcb31f465", "commit_date": "Sat Aug 26 14:32:24 2023 +0200", "commit_message": "Merge branch 'master' of https://github.com/oauthlib/oauthlib", "files_name": ["d6d230a5fac13b77d1fbb9763818301e70d876a7 - Sat Aug 26 14:34:22 2023 +0200 : Fix Build Badge URL", "README.rst"]}, {"commit_id": "3dda26bd2bd19c5c6f992812fd81995ca7feca7c", "commit_date": "Sun Aug 27 07:12:29 2023 -0600", "commit_message": "Add support for Python 3.12 (#859)", "files_name": [".github/workflows/python-build.yml", "docs/contributing.rst", "setup.py", "tox.ini"]}, {"commit_id": "af7c6aa8abcd8e375a773c60218adca52e808ad3", "commit_date": "Sat Aug 26 16:11:24 2023 +0300", "commit_message": "CI: Only attempt upload for upstream", "files_name": [".github/workflows/python-publish.yml"]}, {"commit_id": "b216ce1add7321a88153c2263a556874cbc024ff", "commit_date": "Mon Aug 28 23:48:41 2023 +0200", "commit_message": " Lint with ruff to replace bandit, flake8, isort, pyupgrade", "files_name": [".github/workflows/lint_python.yml"]}, {"commit_id": "00f9a212004a80df790ed071a59af53a05f5e3f2", "commit_date": "Fri Aug 11 09:35:16 2023 -0700", "commit_message": "Ensure that `request.client_id` is set during Refresh Token Grant.", "files_name": ["oauthlib/oauth2/rfc6749/grant_types/refresh_token.py", "tests/oauth2/rfc6749/grant_types/test_refresh_token.py"]}, {"commit_id": "eddb461c1043f8ad583fd67af34749e32fdc19cc", "commit_date": "Sun Sep 3 22:08:57 2023 +0200", "commit_message": "Tox use ruff (#864)", "files_name": ["Makefile", "tox.ini"]}, {"commit_id": "fe020db74199d5284c00d7735aa7d4ddc90f5d61", "commit_date": "Tue Oct 24 15:08:10 2023 +0200", "commit_message": "Make UtilsTests.test_filter_params Python 3.13+ compatible", "files_name": ["tests/oauth1/rfc5849/test_utils.py"]}], "parents": [{"commit_id_before": "b4bdd09c56aa5dedb475529e75ce73c092ca0898", "url_before": "https://api.github.com/repos/oauthlib/oauthlib/commits/b4bdd09c56aa5dedb475529e75ce73c092ca0898", "html_url_before": "https://github.com/oauthlib/oauthlib/commit/b4bdd09c56aa5dedb475529e75ce73c092ca0898"}, {"commit_id_before": "5d85c61998692643dd9d17e05d2646e06ce391e8", "url_before": "https://api.github.com/repos/oauthlib/oauthlib/commits/5d85c61998692643dd9d17e05d2646e06ce391e8", "html_url_before": "https://github.com/oauthlib/oauthlib/commit/5d85c61998692643dd9d17e05d2646e06ce391e8"}], "details": [{"raw_url": "https://github.com/oauthlib/oauthlib/raw/2e40b412c844ecc4673c3fa3f72181f228bdbacd/oauthlib%2Furi_validate.py", "code": "\"\"\"\nRegex for URIs\n\nThese regex are directly derived from the collected ABNF in RFC3986\n(except for DIGIT, ALPHA and HEXDIG, defined by RFC2234).\n\nThey should be processed with re.VERBOSE.\n\nThanks Mark Nottingham for this code - https://gist.github.com/138549\n\"\"\"\nimport re\n\n# basics\n\nDIGIT = r\"[\\x30-\\x39]\"\n\nALPHA = r\"[\\x41-\\x5A\\x61-\\x7A]\"\n\nHEXDIG = r\"[\\x30-\\x39A-Fa-f]\"\n\n#   pct-encoded   = \"%\" HEXDIG HEXDIG\npct_encoded = r\" %% %(HEXDIG)s %(HEXDIG)s\" % locals()\n\n#   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nunreserved = r\"(?: %(ALPHA)s | %(DIGIT)s | \\- | \\. | _ | ~ )\" % locals()\n\n# gen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\ngen_delims = r\"(?: : | / | \\? | \\# | \\[ | \\] | @ )\"\n\n#   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n#                 / \"*\" / \"+\" / \",\" / \";\" / \"=\"\nsub_delims = r\"\"\"(?: ! | \\$ | & | ' | \\( | \\) |\n                     \\* | \\+ | , | ; | = )\"\"\"\n\n#   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\npchar = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : | @ )\" % locals(\n)\n\n#   reserved      = gen-delims / sub-delims\nreserved = r\"(?: %(gen_delims)s | %(sub_delims)s )\" % locals()\n\n\n# scheme\n\n#   scheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nscheme = r\"%(ALPHA)s (?: %(ALPHA)s | %(DIGIT)s | \\+ | \\- | \\. )*\" % locals()\n\n\n# authority\n\n#   dec-octet     = DIGIT                 ; 0-9\n#                 / %x31-39 DIGIT         ; 10-99\n#                 / \"1\" 2DIGIT            ; 100-199\n#                 / \"2\" %x30-34 DIGIT     ; 200-249\n#                 / \"25\" %x30-35          ; 250-255\ndec_octet = r\"\"\"(?: %(DIGIT)s |\n                    [\\x31-\\x39] %(DIGIT)s |\n                    1 %(DIGIT)s{2} |\n                    2 [\\x30-\\x34] %(DIGIT)s |\n                    25 [\\x30-\\x35]\n                )\n\"\"\" % locals()\n\n#  IPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\nIPv4address = r\"%(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s\" % locals(\n)\n\n#   IPv6address\nIPv6address = r\"([A-Fa-f0-9:]+[:$])[A-Fa-f0-9]{1,4}\"\n\n#   IPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\nIPvFuture = r\"v %(HEXDIG)s+ \\. (?: %(unreserved)s | %(sub_delims)s | : )+\" % locals()\n\n#   IP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\nIP_literal = r\"\\[ (?: %(IPv6address)s | %(IPvFuture)s ) \\]\" % locals()\n\n#   reg-name      = *( unreserved / pct-encoded / sub-delims )\nreg_name = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s )*\" % locals()\n\n#   userinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nuserinfo = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : )\" % locals(\n)\n\n#   host          = IP-literal / IPv4address / reg-name\nhost = r\"(?: %(IP_literal)s | %(IPv4address)s | %(reg_name)s )\" % locals()\n\n#   port          = *DIGIT\nport = r\"(?: %(DIGIT)s )*\" % locals()\n\n#   authority     = [ userinfo \"@\" ] host [ \":\" port ]\nauthority = r\"(?: %(userinfo)s @)? %(host)s (?: : %(port)s)?\" % locals()\n\n# Path\n\n#   segment       = *pchar\nsegment = r\"%(pchar)s*\" % locals()\n\n#   segment-nz    = 1*pchar\nsegment_nz = r\"%(pchar)s+\" % locals()\n\n#   segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \"@\" )\n#                 ; non-zero-length segment without any colon \":\"\nsegment_nz_nc = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | @ )+\" % locals()\n\n#   path-abempty  = *( \"/\" segment )\npath_abempty = r\"(?: / %(segment)s )*\" % locals()\n\n#   path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath_absolute = r\"/ (?: %(segment_nz)s (?: / %(segment)s )* )?\" % locals()\n\n#   path-noscheme = segment-nz-nc *( \"/\" segment )\npath_noscheme = r\"%(segment_nz_nc)s (?: / %(segment)s )*\" % locals()\n\n#   path-rootless = segment-nz *( \"/\" segment )\npath_rootless = r\"%(segment_nz)s (?: / %(segment)s )*\" % locals()\n\n#   path-empty    = 0<pchar>\npath_empty = r\"\"  # FIXME\n\n#   path          = path-abempty    ; begins with \"/\" or is empty\n#                 / path-absolute   ; begins with \"/\" but not \"//\"\n#                 / path-noscheme   ; begins with a non-colon segment\n#                 / path-rootless   ; begins with a segment\n#                 / path-empty      ; zero characters\npath = r\"\"\"(?: %(path_abempty)s |\n               %(path_absolute)s |\n               %(path_noscheme)s |\n               %(path_rootless)s |\n               %(path_empty)s\n            )\n\"\"\" % locals()\n\n### Query and Fragment\n\n#   query         = *( pchar / \"/\" / \"?\" )\nquery = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n#   fragment      = *( pchar / \"/\" / \"?\" )\nfragment = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n# URIs\n\n#   hier-part     = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-rootless\n#                 / path-empty\nhier_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                    %(path_absolute)s |\n                    %(path_rootless)s |\n                    %(path_empty)s\n                )\n\"\"\" % locals()\n\n#   relative-part = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-noscheme\n#                 / path-empty\nrelative_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                        %(path_absolute)s |\n                        %(path_noscheme)s |\n                        %(path_empty)s\n                    )\n\"\"\" % locals()\n\n# relative-ref  = relative-part [ \"?\" query ] [ \"#\" fragment ]\nrelative_ref = r\"%(relative_part)s (?: \\? %(query)s)? (?: \\# %(fragment)s)?\" % locals(\n)\n\n# URI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\nURI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? (?: \\# %(fragment)s )? )$\" % locals(\n)\n\n#   URI-reference = URI / relative-ref\nURI_reference = r\"^(?: %(URI)s | %(relative_ref)s )$\" % locals()\n\n#   absolute-URI  = scheme \":\" hier-part [ \"?\" query ]\nabsolute_URI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? )$\" % locals(\n)\n\n\ndef is_uri(uri):\n    return re.match(URI, uri, re.VERBOSE)\n\n\ndef is_uri_reference(uri):\n    return re.match(URI_reference, uri, re.VERBOSE)\n\n\ndef is_absolute_uri(uri):\n    return re.match(absolute_URI, uri, re.VERBOSE)\n", "code_before": "\"\"\"\nRegex for URIs\n\nThese regex are directly derived from the collected ABNF in RFC3986\n(except for DIGIT, ALPHA and HEXDIG, defined by RFC2234).\n\nThey should be processed with re.VERBOSE.\n\nThanks Mark Nottingham for this code - https://gist.github.com/138549\n\"\"\"\nimport re\n\n# basics\n\nDIGIT = r\"[\\x30-\\x39]\"\n\nALPHA = r\"[\\x41-\\x5A\\x61-\\x7A]\"\n\nHEXDIG = r\"[\\x30-\\x39A-Fa-f]\"\n\n#   pct-encoded   = \"%\" HEXDIG HEXDIG\npct_encoded = r\" %% %(HEXDIG)s %(HEXDIG)s\" % locals()\n\n#   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nunreserved = r\"(?: %(ALPHA)s | %(DIGIT)s | \\- | \\. | _ | ~ )\" % locals()\n\n# gen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\ngen_delims = r\"(?: : | / | \\? | \\# | \\[ | \\] | @ )\"\n\n#   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n#                 / \"*\" / \"+\" / \",\" / \";\" / \"=\"\nsub_delims = r\"\"\"(?: ! | \\$ | & | ' | \\( | \\) |\n                     \\* | \\+ | , | ; | = )\"\"\"\n\n#   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\npchar = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : | @ )\" % locals(\n)\n\n#   reserved      = gen-delims / sub-delims\nreserved = r\"(?: %(gen_delims)s | %(sub_delims)s )\" % locals()\n\n\n# scheme\n\n#   scheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nscheme = r\"%(ALPHA)s (?: %(ALPHA)s | %(DIGIT)s | \\+ | \\- | \\. )*\" % locals()\n\n\n# authority\n\n#   dec-octet     = DIGIT                 ; 0-9\n#                 / %x31-39 DIGIT         ; 10-99\n#                 / \"1\" 2DIGIT            ; 100-199\n#                 / \"2\" %x30-34 DIGIT     ; 200-249\n#                 / \"25\" %x30-35          ; 250-255\ndec_octet = r\"\"\"(?: %(DIGIT)s |\n                    [\\x31-\\x39] %(DIGIT)s |\n                    1 %(DIGIT)s{2} |\n                    2 [\\x30-\\x34] %(DIGIT)s |\n                    25 [\\x30-\\x35]\n                )\n\"\"\" % locals()\n\n#  IPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\nIPv4address = r\"%(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s\" % locals(\n)\n\n#   IPv6address\nIPv6address = r\"([A-Fa-f0-9:]+[:$])[A-Fa-f0-9]{1,4}\"\n\n#   IPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\nIPvFuture = r\"v %(HEXDIG)s+ \\. (?: %(unreserved)s | %(sub_delims)s | : )+\" % locals()\n\n#   IP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\nIP_literal = r\"\\[ (?: %(IPv6address)s | %(IPvFuture)s ) \\]\" % locals()\n\n#   reg-name      = *( unreserved / pct-encoded / sub-delims )\nreg_name = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s )*\" % locals()\n\n#   userinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nuserinfo = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : )\" % locals(\n)\n\n#   host          = IP-literal / IPv4address / reg-name\nhost = r\"(?: %(IP_literal)s | %(IPv4address)s | %(reg_name)s )\" % locals()\n\n#   port          = *DIGIT\nport = r\"(?: %(DIGIT)s )*\" % locals()\n\n#   authority     = [ userinfo \"@\" ] host [ \":\" port ]\nauthority = r\"(?: %(userinfo)s @)? %(host)s (?: : %(port)s)?\" % locals()\n\n# Path\n\n#   segment       = *pchar\nsegment = r\"%(pchar)s*\" % locals()\n\n#   segment-nz    = 1*pchar\nsegment_nz = r\"%(pchar)s+\" % locals()\n\n#   segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \"@\" )\n#                 ; non-zero-length segment without any colon \":\"\nsegment_nz_nc = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | @ )+\" % locals()\n\n#   path-abempty  = *( \"/\" segment )\npath_abempty = r\"(?: / %(segment)s )*\" % locals()\n\n#   path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath_absolute = r\"/ (?: %(segment_nz)s (?: / %(segment)s )* )?\" % locals()\n\n#   path-noscheme = segment-nz-nc *( \"/\" segment )\npath_noscheme = r\"%(segment_nz_nc)s (?: / %(segment)s )*\" % locals()\n\n#   path-rootless = segment-nz *( \"/\" segment )\npath_rootless = r\"%(segment_nz)s (?: / %(segment)s )*\" % locals()\n\n#   path-empty    = 0<pchar>\npath_empty = r\"\"  # FIXME\n\n#   path          = path-abempty    ; begins with \"/\" or is empty\n#                 / path-absolute   ; begins with \"/\" but not \"//\"\n#                 / path-noscheme   ; begins with a non-colon segment\n#                 / path-rootless   ; begins with a segment\n#                 / path-empty      ; zero characters\npath = r\"\"\"(?: %(path_abempty)s |\n               %(path_absolute)s |\n               %(path_noscheme)s |\n               %(path_rootless)s |\n               %(path_empty)s\n            )\n\"\"\" % locals()\n\n### Query and Fragment\n\n#   query         = *( pchar / \"/\" / \"?\" )\nquery = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n#   fragment      = *( pchar / \"/\" / \"?\" )\nfragment = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n# URIs\n\n#   hier-part     = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-rootless\n#                 / path-empty\nhier_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                    %(path_absolute)s |\n                    %(path_rootless)s |\n                    %(path_empty)s\n                )\n\"\"\" % locals()\n\n#   relative-part = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-noscheme\n#                 / path-empty\nrelative_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                        %(path_absolute)s |\n                        %(path_noscheme)s |\n                        %(path_empty)s\n                    )\n\"\"\" % locals()\n\n# relative-ref  = relative-part [ \"?\" query ] [ \"#\" fragment ]\nrelative_ref = r\"%(relative_part)s (?: \\? %(query)s)? (?: \\# %(fragment)s)?\" % locals(\n)\n\n# URI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\nURI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? (?: \\# %(fragment)s )? )$\" % locals(\n)\n\n#   URI-reference = URI / relative-ref\nURI_reference = r\"^(?: %(URI)s | %(relative_ref)s )$\" % locals()\n\n#   absolute-URI  = scheme \":\" hier-part [ \"?\" query ]\nabsolute_URI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? )$\" % locals(\n)\n\n\ndef is_uri(uri):\n    return re.match(URI, uri, re.VERBOSE)\n\n\ndef is_uri_reference(uri):\n    return re.match(URI_reference, uri, re.VERBOSE)\n\n\ndef is_absolute_uri(uri):\n    return re.match(absolute_URI, uri, re.VERBOSE)\n", "patch": "@@ -66,7 +66,7 @@\n )\n \n #   IPv6address\n-IPv6address = r\"([A-Fa-f0-9:]+:+)+[A-Fa-f0-9]+\"\n+IPv6address = r\"([A-Fa-f0-9:]+[:$])[A-Fa-f0-9]{1,4}\"\n \n #   IPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n IPvFuture = r\"v %(HEXDIG)s+ \\. (?: %(unreserved)s | %(sub_delims)s | : )+\" % locals()", "file_path": "files/2022_9/943", "file_language": "py", "file_name": "oauthlib/uri_validate.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def is_uri(uri):\n    return re.match(URI, uri, re.VERBOSE)", "target": 0}, {"function": "def is_uri_reference(uri):\n    return re.match(URI_reference, uri, re.VERBOSE)", "target": 0}, {"function": "def is_absolute_uri(uri):\n    return re.match(absolute_URI, uri, re.VERBOSE)", "target": 0}], "function_after": [{"function": "def is_uri(uri):\n    return re.match(URI, uri, re.VERBOSE)", "target": 0}, {"function": "def is_uri_reference(uri):\n    return re.match(URI_reference, uri, re.VERBOSE)", "target": 0}, {"function": "def is_absolute_uri(uri):\n    return re.match(absolute_URI, uri, re.VERBOSE)", "target": 0}]}, {"raw_url": "https://github.com/oauthlib/oauthlib/raw/2e40b412c844ecc4673c3fa3f72181f228bdbacd/tests%2Ftest_uri_validate.py", "code": "import unittest\nfrom oauthlib.uri_validate import is_absolute_uri\n\nfrom tests.unittest import TestCase\n\n\nclass UriValidateTest(TestCase):\n\n    def test_is_absolute_uri(self):\n        self.assertIsNotNone(is_absolute_uri('schema://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path'))\n\n    def test_query(self):\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar&fruit=banana'))\n\n    def test_fragment_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar&fruit=banana'))\n\n    def test_combined_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo#bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo&bar#fruit'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar#fruit=banana'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar=2#fruit=banana&bar=foo'))\n\n    def test_custom_scheme(self):\n        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id://'))\n\n    def test_ipv6_bracket(self):\n        self.assertIsNotNone(is_absolute_uri('http://[::1]:38432/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:0001::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:1::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]:8080/path'))\n\n    @unittest.skip(\"ipv6 edge-cases not supported\")\n    def test_ipv6_edge_cases(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:7777:8888'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF'))\n        self.assertIsNotNone(is_absolute_uri('http://0123:4567:89ab:cdef:0123:4567:89ab:cdef/path'))\n        self.assertIsNotNone(is_absolute_uri('http://::'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:0db8:0001:0000:0000:0ab9:C0A8:0102'))\n\n    @unittest.skip(\"ipv6 dual ipv4 not supported\")\n    def test_ipv6_dual(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://::11.22.33.44'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::123.123.123.123'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:91.123.4.56'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678:5.6.7.8'))\n\n    def test_ipv4(self):\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.1:38432/'))\n\n    def test_failures(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:notaport/path'))\n        self.assertIsNone(is_absolute_uri('wrong'))\n        self.assertIsNone(is_absolute_uri('http://[:1]:38432/path'))\n        self.assertIsNone(is_absolute_uri('http://[abcd:efgh::1]/'))\n\n    def test_recursive_regex(self):\n        from datetime import datetime\n        t0 = datetime.now()\n        is_absolute_uri('http://[::::::::::::::::::::::::::]/path')\n        t1 = datetime.now()\n        spent = t1 - t0\n        self.assertGreater(0.1, spent.total_seconds(), \"possible recursive loop detected\")\n", "code_before": "import unittest\nfrom oauthlib.uri_validate import is_absolute_uri\n\nfrom tests.unittest import TestCase\n\n\nclass UriValidateTest(TestCase):\n\n    def test_is_absolute_uri(self):\n        self.assertIsNotNone(is_absolute_uri('schema://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path'))\n\n    def test_query(self):\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar&fruit=banana'))\n\n    def test_fragment_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar&fruit=banana'))\n\n    def test_combined_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo#bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo&bar#fruit'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar#fruit=banana'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar=2#fruit=banana&bar=foo'))\n\n    def test_custom_scheme(self):\n        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id://'))\n\n    def test_ipv6_bracket(self):\n        self.assertIsNotNone(is_absolute_uri('http://[::1]:38432/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:0001::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:1::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]:8080/path'))\n\n    @unittest.skip(\"ipv6 edge-cases not supported\")\n    def test_ipv6_edge_cases(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:7777:8888'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF'))\n        self.assertIsNotNone(is_absolute_uri('http://0123:4567:89ab:cdef:0123:4567:89ab:cdef/path'))\n        self.assertIsNotNone(is_absolute_uri('http://::'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:0db8:0001:0000:0000:0ab9:C0A8:0102'))\n\n    @unittest.skip(\"ipv6 dual ipv4 not supported\")\n    def test_ipv6_dual(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://::11.22.33.44'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::123.123.123.123'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:91.123.4.56'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678:5.6.7.8'))\n\n    def test_ipv4(self):\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.1:38432/'))\n\n    def test_failures(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:notaport/path'))\n        self.assertIsNone(is_absolute_uri('wrong'))\n        self.assertIsNone(is_absolute_uri('http://[:1]:38432/path'))\n        self.assertIsNone(is_absolute_uri('http://[abcd:efgh::1]/'))\n\n    def test_recursive_regex(self):\n        from datetime import datetime\n        t0 = datetime.now()\n        is_absolute_uri('http://[::::::::::::::::::::::::::]/path')\n        t1 = datetime.now()\n        spent = t1 - t0\n        self.assertGreater(0.1, spent.total_seconds(), \"possible recursive loop detected\")\n", "patch": "@@ -1,4 +1,4 @@\n-import oauthlib\n+import unittest\n from oauthlib.uri_validate import is_absolute_uri\n \n from tests.unittest import TestCase\n@@ -7,7 +7,6 @@\n class UriValidateTest(TestCase):\n \n     def test_is_absolute_uri(self):\n-\n         self.assertIsNotNone(is_absolute_uri('schema://example.com/path'))\n         self.assertIsNotNone(is_absolute_uri('https://example.com/path'))\n         self.assertIsNotNone(is_absolute_uri('https://example.com'))\n@@ -17,17 +16,69 @@ def test_is_absolute_uri(self):\n         self.assertIsNotNone(is_absolute_uri('http://example.com'))\n         self.assertIsNotNone(is_absolute_uri('http://example.com/path'))\n         self.assertIsNotNone(is_absolute_uri('http://example.com:80/path'))\n-        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id:/'))\n+\n+    def test_query(self):\n+        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo'))\n+        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar'))\n+        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar&fruit=banana'))\n+\n+    def test_fragment_forbidden(self):\n+        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo'))\n+        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar'))\n+        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar&fruit=banana'))\n+\n+    def test_combined_forbidden(self):\n+        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo#bar'))\n+        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo&bar#fruit'))\n+        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar#fruit=banana'))\n+        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar=2#fruit=banana&bar=foo'))\n+\n+    def test_custom_scheme(self):\n+        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id://'))\n+\n+    def test_ipv6_bracket(self):\n         self.assertIsNotNone(is_absolute_uri('http://[::1]:38432/path'))\n         self.assertIsNotNone(is_absolute_uri('http://[::1]/path'))\n         self.assertIsNotNone(is_absolute_uri('http://[fd01:0001::1]/path'))\n         self.assertIsNotNone(is_absolute_uri('http://[fd01:1::1]/path'))\n         self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/path'))\n+        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]:8080/path'))\n+\n+    @unittest.skip(\"ipv6 edge-cases not supported\")\n+    def test_ipv6_edge_cases(self):\n+        self.assertIsNotNone(is_absolute_uri('http://2001:db8::'))\n+        self.assertIsNotNone(is_absolute_uri('http://::1234:5678'))\n+        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678'))\n+        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:7777:8888'))\n+        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF'))\n+        self.assertIsNotNone(is_absolute_uri('http://0123:4567:89ab:cdef:0123:4567:89ab:cdef/path'))\n+        self.assertIsNotNone(is_absolute_uri('http://::'))\n+        self.assertIsNotNone(is_absolute_uri('http://2001:0db8:0001:0000:0000:0ab9:C0A8:0102'))\n+\n+    @unittest.skip(\"ipv6 dual ipv4 not supported\")\n+    def test_ipv6_dual(self):\n+        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:1.2.3.4'))\n+        self.assertIsNotNone(is_absolute_uri('http://::11.22.33.44'))\n+        self.assertIsNotNone(is_absolute_uri('http://2001:db8::123.123.123.123'))\n+        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:91.123.4.56'))\n+        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:1.2.3.4'))\n+        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678:5.6.7.8'))\n+\n+    def test_ipv4(self):\n         self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n         self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n         self.assertIsNotNone(is_absolute_uri('http://127.1:38432/'))\n \n+    def test_failures(self):\n         self.assertIsNone(is_absolute_uri('http://example.com:notaport/path'))\n         self.assertIsNone(is_absolute_uri('wrong'))\n         self.assertIsNone(is_absolute_uri('http://[:1]:38432/path'))\n         self.assertIsNone(is_absolute_uri('http://[abcd:efgh::1]/'))\n+\n+    def test_recursive_regex(self):\n+        from datetime import datetime\n+        t0 = datetime.now()\n+        is_absolute_uri('http://[::::::::::::::::::::::::::]/path')\n+        t1 = datetime.now()\n+        spent = t1 - t0\n+        self.assertGreater(0.1, spent.total_seconds(), \"possible recursive loop detected\")", "file_path": "files/2022_9/944", "file_language": "py", "file_name": "tests/test_uri_validate.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class UriValidateTest(TestCase):\n\n    def test_is_absolute_uri(self):\n        self.assertIsNotNone(is_absolute_uri('schema://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path'))\n\n    def test_query(self):\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar&fruit=banana'))\n\n    def test_fragment_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar&fruit=banana'))\n\n    def test_combined_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo#bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo&bar#fruit'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar#fruit=banana'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar=2#fruit=banana&bar=foo'))\n\n    def test_custom_scheme(self):\n        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id://'))\n\n    def test_ipv6_bracket(self):\n        self.assertIsNotNone(is_absolute_uri('http://[::1]:38432/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:0001::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:1::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]:8080/path'))\n\n    @unittest.skip(\"ipv6 edge-cases not supported\")\n    def test_ipv6_edge_cases(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:7777:8888'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF'))\n        self.assertIsNotNone(is_absolute_uri('http://0123:4567:89ab:cdef:0123:4567:89ab:cdef/path'))\n        self.assertIsNotNone(is_absolute_uri('http://::'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:0db8:0001:0000:0000:0ab9:C0A8:0102'))\n\n    @unittest.skip(\"ipv6 dual ipv4 not supported\")\n    def test_ipv6_dual(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://::11.22.33.44'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::123.123.123.123'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:91.123.4.56'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678:5.6.7.8'))\n\n    def test_ipv4(self):\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.1:38432/'))\n\n    def test_failures(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:notaport/path'))\n        self.assertIsNone(is_absolute_uri('wrong'))\n        self.assertIsNone(is_absolute_uri('http://[:1]:38432/path'))\n        self.assertIsNone(is_absolute_uri('http://[abcd:efgh::1]/'))\n\n    def test_recursive_regex(self):\n        from datetime import datetime\n        t0 = datetime.now()\n        is_absolute_uri('http://[::::::::::::::::::::::::::]/path')\n        t1 = datetime.now()\n        spent = t1 - t0\n        self.assertGreater(0.1, spent.total_seconds(), \"possible recursive loop detected\")", "target": 0}], "function_after": [{"function": "class UriValidateTest(TestCase):\n\n    def test_is_absolute_uri(self):\n        self.assertIsNotNone(is_absolute_uri('schema://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path'))\n\n    def test_query(self):\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar&fruit=banana'))\n\n    def test_fragment_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar&fruit=banana'))\n\n    def test_combined_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo#bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo&bar#fruit'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar#fruit=banana'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar=2#fruit=banana&bar=foo'))\n\n    def test_custom_scheme(self):\n        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id://'))\n\n    def test_ipv6_bracket(self):\n        self.assertIsNotNone(is_absolute_uri('http://[::1]:38432/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:0001::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:1::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]:8080/path'))\n\n    @unittest.skip(\"ipv6 edge-cases not supported\")\n    def test_ipv6_edge_cases(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:7777:8888'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF'))\n        self.assertIsNotNone(is_absolute_uri('http://0123:4567:89ab:cdef:0123:4567:89ab:cdef/path'))\n        self.assertIsNotNone(is_absolute_uri('http://::'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:0db8:0001:0000:0000:0ab9:C0A8:0102'))\n\n    @unittest.skip(\"ipv6 dual ipv4 not supported\")\n    def test_ipv6_dual(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://::11.22.33.44'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::123.123.123.123'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:91.123.4.56'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678:5.6.7.8'))\n\n    def test_ipv4(self):\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.1:38432/'))\n\n    def test_failures(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:notaport/path'))\n        self.assertIsNone(is_absolute_uri('wrong'))\n        self.assertIsNone(is_absolute_uri('http://[:1]:38432/path'))\n        self.assertIsNone(is_absolute_uri('http://[abcd:efgh::1]/'))\n\n    def test_recursive_regex(self):\n        from datetime import datetime\n        t0 = datetime.now()\n        is_absolute_uri('http://[::::::::::::::::::::::::::]/path')\n        t1 = datetime.now()\n        spent = t1 - t0\n        self.assertGreater(0.1, spent.total_seconds(), \"possible recursive loop detected\")", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
