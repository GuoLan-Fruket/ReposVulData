{"index": 7770, "cve_id": "CVE-2022-0869", "cwe_id": ["CWE-601"], "cve_language": "Python", "cve_description": "Multiple Open Redirect in GitHub repository nitely/spirit prior to 0.12.3.", "cvss": "7.4", "publish_date": "March 6, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "HIGH", "I": "NONE", "A": "NONE", "commit_id": "8f32f89654d6c30d56e0dd167059d32146fb32ef", "commit_message": "fix unsafe redirect (#308)", "commit_date": "2022-02-23T08:16:32Z", "project": "nitely/spirit", "url": "https://api.github.com/repos/nitely/Spirit/commits/8f32f89654d6c30d56e0dd167059d32146fb32ef", "html_url": "https://github.com/nitely/Spirit/commit/8f32f89654d6c30d56e0dd167059d32146fb32ef", "windows_before": [{"commit_id": "8b48d18e44f1dbb4b0f0a0a975d0dc14b88f0f41", "commit_date": "Wed Feb 16 04:31:55 2022 +0000", "commit_message": " Fix issue avoid-misusing-assert-true found at https://codereview.doctor (#306)", "files_name": ["spirit/category/admin/tests.py"]}, {"commit_id": "25dbaed736da76fdad2175b1ad0aa04b1f334523", "commit_date": "Tue Feb 15 20:27:52 2022 -0800", "commit_message": "submit to coveralls", "files_name": [".github/workflows/ci.yml"]}, {"commit_id": "13f338cf20415102de2e3ef0a125551281d1bc3c", "commit_date": "Thu Jan 27 21:23:23 2022 -0800", "commit_message": "Support search on Asian languages", "files_name": ["spirit/core/conf/defaults.py", "spirit/extra/project_template/project_name/settings/prod.py", "spirit/search/search_indexes.py"]}, {"commit_id": "01e579948c9f4df397085d0fa849137f79651aac", "commit_date": "Fri Jan 8 08:48:40 2021 -0300", "commit_message": "fix settings tag", "files_name": ["spirit/core/tags/settings.py", "spirit/user/auth/templates/spirit/user/auth/password_reset_complete.html", "spirit/user/auth/views.py"]}, {"commit_id": "408c251740d9ae9294f4a3c569f24fa6a8658089", "commit_date": "Fri Jan 8 08:24:51 2021 -0300", "commit_message": "bump to v0.12.2", "files_name": ["HISTORY.md", "spirit/__init__.py"]}, {"commit_id": "1cc9d9c3303a583fdcd30ef26f6e4c9e2fd570b6", "commit_date": "Fri Jan 8 08:19:03 2021 -0300", "commit_message": "fix reset complete view", "files_name": ["spirit/user/auth/templates/spirit/user/auth/password_reset_complete.html", "spirit/user/auth/views.py"]}, {"commit_id": "a10de8014bacd9f3009cf568b791561b2ab0aa20", "commit_date": "Fri Jan 8 07:32:30 2021 -0300", "commit_message": "add missing template tag", "files_name": ["spirit/user/auth/templates/spirit/user/auth/password_reset_complete.html"]}, {"commit_id": "07ba8fd0ba5528349eb6208ef8c233a892b7c8ee", "commit_date": "Mon Dec 14 21:53:04 2020 -0300", "commit_message": "update pillow", "files_name": ["HISTORY.md", "requirements.txt", "spirit/__init__.py"]}, {"commit_id": "547ec69bf4e2de56cbfe45b7b70e6748a21b1f6c", "commit_date": "Mon Oct 26 03:59:55 2020 -0300", "commit_message": "coverage skip project", "files_name": [".coveragerc"]}, {"commit_id": "02303fa938e1b046ac7a432dd3720c0090aa0c53", "commit_date": "Mon Oct 26 03:56:11 2020 -0300", "commit_message": "coverage skip project", "files_name": [".coveragerc"]}, {"commit_id": "e1b1edf536bd7b7fd0550ffcdb789f6a21864b66", "commit_date": "Mon Oct 26 03:53:57 2020 -0300", "commit_message": "bump to dev version", "files_name": ["HISTORY.md", "spirit/__init__.py"]}, {"commit_id": "8889b73a2421804f16b7adb7cd4fc12743dc14ca", "commit_date": "Mon Oct 26 03:50:07 2020 -0300", "commit_message": "bump to v0.12.0", "files_name": ["HISTORY.md", "spirit/__init__.py"]}, {"commit_id": "4365ada7bcd7dcd0b53667d8542590163b470c38", "commit_date": "Sun Oct 25 11:51:29 2020 -0300", "commit_message": "update locales", "files_name": ["spirit/admin/locale/de/LC_MESSAGES/django.po", "spirit/admin/locale/en/LC_MESSAGES/django.po", "spirit/admin/locale/es/LC_MESSAGES/django.po", "spirit/admin/locale/fr/LC_MESSAGES/django.po", "spirit/admin/locale/hu/LC_MESSAGES/django.po", "spirit/admin/locale/it/LC_MESSAGES/django.po", "spirit/admin/locale/ky/LC_MESSAGES/django.po", "spirit/admin/locale/lt/LC_MESSAGES/django.po", "spirit/admin/locale/pl/LC_MESSAGES/django.po", "spirit/admin/locale/pl_PL/LC_MESSAGES/django.po", "spirit/admin/locale/ru/LC_MESSAGES/django.po", "spirit/admin/locale/sv/LC_MESSAGES/django.po", "spirit/admin/locale/tr/LC_MESSAGES/django.po", "spirit/admin/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/category/admin/locale/de/LC_MESSAGES/django.po", "spirit/category/admin/locale/en/LC_MESSAGES/django.po", "spirit/category/admin/locale/es/LC_MESSAGES/django.po", "spirit/category/admin/locale/fr/LC_MESSAGES/django.po", "spirit/category/admin/locale/hu/LC_MESSAGES/django.po", "spirit/category/admin/locale/it/LC_MESSAGES/django.po", "spirit/category/admin/locale/ky/LC_MESSAGES/django.po", "spirit/category/admin/locale/lt/LC_MESSAGES/django.po", "spirit/category/admin/locale/pl/LC_MESSAGES/django.po", "spirit/category/admin/locale/pl_PL/LC_MESSAGES/django.po", "spirit/category/admin/locale/ru/LC_MESSAGES/django.po", "spirit/category/admin/locale/sv/LC_MESSAGES/django.po", "spirit/category/admin/locale/tr/LC_MESSAGES/django.po", "spirit/category/admin/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/category/locale/de/LC_MESSAGES/django.po", "spirit/category/locale/en/LC_MESSAGES/django.po", "spirit/category/locale/es/LC_MESSAGES/django.mo", "spirit/category/locale/es/LC_MESSAGES/django.po", "spirit/category/locale/fr/LC_MESSAGES/django.po", "spirit/category/locale/hu/LC_MESSAGES/django.po", "spirit/category/locale/it/LC_MESSAGES/django.po", "spirit/category/locale/ky/LC_MESSAGES/django.po", "spirit/category/locale/lt/LC_MESSAGES/django.po", "spirit/category/locale/pl/LC_MESSAGES/django.po", "spirit/category/locale/pl_PL/LC_MESSAGES/django.po", "spirit/category/locale/ru/LC_MESSAGES/django.po", "spirit/category/locale/sv/LC_MESSAGES/django.po", "spirit/category/locale/tr/LC_MESSAGES/django.po", "spirit/category/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/de/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/en/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/es/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/fr/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/hu/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/it/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/ky/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/lt/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/pl/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/pl_PL/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/ru/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/sv/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/tr/LC_MESSAGES/django.po", "spirit/comment/bookmark/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/de/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/en/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/es/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/fr/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/hu/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/it/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/ky/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/lt/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/pl/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/pl_PL/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/ru/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/sv/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/tr/LC_MESSAGES/django.po", "spirit/comment/flag/admin/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/comment/flag/locale/de/LC_MESSAGES/django.po", "spirit/comment/flag/locale/en/LC_MESSAGES/django.po", "spirit/comment/flag/locale/es/LC_MESSAGES/django.po", "spirit/comment/flag/locale/fr/LC_MESSAGES/django.po", "spirit/comment/flag/locale/hu/LC_MESSAGES/django.po", "spirit/comment/flag/locale/it/LC_MESSAGES/django.po", "spirit/comment/flag/locale/ky/LC_MESSAGES/django.po", "spirit/comment/flag/locale/lt/LC_MESSAGES/django.po", "spirit/comment/flag/locale/pl/LC_MESSAGES/django.po", "spirit/comment/flag/locale/pl_PL/LC_MESSAGES/django.po", "spirit/comment/flag/locale/ru/LC_MESSAGES/django.po", "spirit/comment/flag/locale/sv/LC_MESSAGES/django.po", "spirit/comment/flag/locale/tr/LC_MESSAGES/django.po", "spirit/comment/flag/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/comment/history/locale/de/LC_MESSAGES/django.po", "spirit/comment/history/locale/en/LC_MESSAGES/django.po", "spirit/comment/history/locale/es/LC_MESSAGES/django.po", "spirit/comment/history/locale/fr/LC_MESSAGES/django.po", "spirit/comment/history/locale/hu/LC_MESSAGES/django.po", "spirit/comment/history/locale/it/LC_MESSAGES/django.po", "spirit/comment/history/locale/ky/LC_MESSAGES/django.po", "spirit/comment/history/locale/lt/LC_MESSAGES/django.po", "spirit/comment/history/locale/pl/LC_MESSAGES/django.po", "spirit/comment/history/locale/pl_PL/LC_MESSAGES/django.po", "spirit/comment/history/locale/ru/LC_MESSAGES/django.po", "spirit/comment/history/locale/sv/LC_MESSAGES/django.po", "spirit/comment/history/locale/tr/LC_MESSAGES/django.po", "spirit/comment/history/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/comment/like/locale/de/LC_MESSAGES/django.po", "spirit/comment/like/locale/en/LC_MESSAGES/django.po", "spirit/comment/like/locale/es/LC_MESSAGES/django.po", "spirit/comment/like/locale/fr/LC_MESSAGES/django.po", "spirit/comment/like/locale/hu/LC_MESSAGES/django.po", "spirit/comment/like/locale/it/LC_MESSAGES/django.po", "spirit/comment/like/locale/ky/LC_MESSAGES/django.po", "spirit/comment/like/locale/lt/LC_MESSAGES/django.po", "spirit/comment/like/locale/pl/LC_MESSAGES/django.po", "spirit/comment/like/locale/pl_PL/LC_MESSAGES/django.po", "spirit/comment/like/locale/ru/LC_MESSAGES/django.po", "spirit/comment/like/locale/sv/LC_MESSAGES/django.po", "spirit/comment/like/locale/tr/LC_MESSAGES/django.po", "spirit/comment/like/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/comment/locale/de/LC_MESSAGES/django.po", "spirit/comment/locale/en/LC_MESSAGES/django.po", "spirit/comment/locale/es/LC_MESSAGES/django.mo", "spirit/comment/locale/es/LC_MESSAGES/django.po", "spirit/comment/locale/fr/LC_MESSAGES/django.po", "spirit/comment/locale/hu/LC_MESSAGES/django.po", "spirit/comment/locale/it/LC_MESSAGES/django.po", "spirit/comment/locale/ky/LC_MESSAGES/django.po", "spirit/comment/locale/lt/LC_MESSAGES/django.po", "spirit/comment/locale/pl/LC_MESSAGES/django.po", "spirit/comment/locale/pl_PL/LC_MESSAGES/django.po", "spirit/comment/locale/ru/LC_MESSAGES/django.po", "spirit/comment/locale/sv/LC_MESSAGES/django.po", "spirit/comment/locale/tr/LC_MESSAGES/django.po", "spirit/comment/locale/zh_Hans/LC_MESSAGES/django.po", "spirit/comment/poll/locale/de/LC_MESSAGES/django.po", "spirit/comment/poll/locale/en/LC_MESSAGES/django.po", "spirit/comment/poll/locale/es/LC_MESSAGES/django.po", "spirit/comment/poll/locale/fr/LC_MESSAGES/django.po", "spirit/comment/poll/locale/hu/LC_MESSAGES/django.po", "spirit/comment/poll/locale/it/LC_MESSAGES/django.po", "spirit/comment/poll/locale/ky/LC_MESSAGES/django.po", "spirit/comment/poll/locale/lt/LC_MESSAGES/django.po"]}], "windows_after": [{"commit_id": "58b563c1b2290a95219257045afaa4f08ac94cbf", "commit_date": "Wed Feb 23 00:24:06 2022 -0800", "commit_message": "bump to v0.12.3", "files_name": ["HISTORY.md", "spirit/__init__.py"]}, {"commit_id": "6bc1c33cd5db6d96e513ec5903bbb0bcf68ff7ae", "commit_date": "Wed Apr 5 21:21:47 2023 -0300", "commit_message": "support for Django 3.2, and 4.2 (#313)", "files_name": ["Makefile", "README.md", "docs/installation.rst", "requirements.txt", "setup.py", "spirit/admin/__init__.py", "spirit/admin/urls.py", "spirit/category/__init__.py", "spirit/category/admin/__init__.py", "spirit/category/admin/urls.py", "spirit/category/apps.py", "spirit/category/migrations/0007_alter_category_id.py", "spirit/category/urls.py", "spirit/comment/__init__.py", "spirit/comment/apps.py", "spirit/comment/bookmark/__init__.py", "spirit/comment/bookmark/apps.py", "spirit/comment/bookmark/migrations/0003_alter_commentbookmark_id.py", "spirit/comment/bookmark/urls.py", "spirit/comment/flag/__init__.py", "spirit/comment/flag/admin/__init__.py", "spirit/comment/flag/admin/urls.py", "spirit/comment/flag/apps.py", "spirit/comment/flag/migrations/0003_auto_20230405_2103.py", "spirit/comment/flag/urls.py", "spirit/comment/history/__init__.py", "spirit/comment/history/apps.py", "spirit/comment/history/migrations/0002_alter_commenthistory_id.py", "spirit/comment/history/urls.py", "spirit/comment/like/__init__.py", "spirit/comment/like/apps.py", "spirit/comment/like/migrations/0003_alter_commentlike_id.py", "spirit/comment/like/urls.py", "spirit/comment/migrations/0005_alter_comment_id.py", "spirit/comment/poll/__init__.py", "spirit/comment/poll/apps.py", "spirit/comment/poll/migrations/0003_auto_20230405_2106.py", "spirit/comment/poll/urls.py", "spirit/comment/tests.py", "spirit/comment/urls.py", "spirit/core/__init__.py", "spirit/core/conf/defaults.py", "spirit/core/management/commands/spiritcompilemessages.py", "spirit/core/management/commands/spiritmakemessages.py", "spirit/core/management/commands/spirittxpull.py", "spirit/core/management/commands/spirittxpush.py", "spirit/core/storage.py", "spirit/core/tests/apps.py", "spirit/core/tests/migrations/0002_auto_20200911_1759.py", "spirit/core/tests/migrations/0003_auto_20230405_2112.py", "spirit/core/tests/tests_utils.py", "spirit/core/utils/__init__.py", "spirit/extra/project_template/project_name/urls.py", "spirit/search/__init__.py", "spirit/search/urls.py", "spirit/topic/__init__.py", "spirit/topic/admin/__init__.py", "spirit/topic/admin/urls.py", "spirit/topic/apps.py", "spirit/topic/favorite/__init__.py", "spirit/topic/favorite/apps.py", "spirit/topic/favorite/migrations/0003_alter_topicfavorite_id.py", "spirit/topic/favorite/urls.py", "spirit/topic/migrations/0004_alter_topic_id.py", "spirit/topic/moderate/urls.py", "spirit/topic/notification/__init__.py", "spirit/topic/notification/apps.py", "spirit/topic/notification/migrations/0003_alter_topicnotification_id.py", "spirit/topic/notification/urls.py", "spirit/topic/private/__init__.py", "spirit/topic/private/apps.py", "spirit/topic/private/migrations/0003_alter_topicprivate_id.py", "spirit/topic/private/urls.py", "spirit/topic/unread/__init__.py", "spirit/topic/unread/apps.py", "spirit/topic/unread/migrations/0003_alter_topicunread_id.py", "spirit/topic/unread/urls.py", "spirit/topic/urls.py", "spirit/urls.py", "spirit/user/__init__.py", "spirit/user/admin/__init__.py", "spirit/user/admin/urls.py", "spirit/user/apps.py", "spirit/user/auth/__init__.py", "spirit/user/auth/tests/urls.py", "spirit/user/auth/urls.py", "spirit/user/middleware.py", "spirit/user/migrations/0014_alter_userprofile_id.py", "spirit/user/tests.py", "spirit/user/urls.py"]}, {"commit_id": "4d6168c3b234e0f000959bfe5f6b86fbe90239c4", "commit_date": "Wed Apr 5 21:25:37 2023 -0300", "commit_message": "update CI", "files_name": [".github/workflows/ci.yml", ".travis.yml"]}, {"commit_id": "186a8091c1e9576708d849a3a909ac37778ccb2e", "commit_date": "Wed Apr 5 21:40:12 2023 -0300", "commit_message": "bump to v0.13.0", "files_name": ["HISTORY.md", "spirit/__init__.py"]}, {"commit_id": "9a304a57de021108d9225b87f35ad6395d5d56d3", "commit_date": "Wed May 24 06:19:48 2023 -0300", "commit_message": "remove DO from readme", "files_name": ["README.md"]}, {"commit_id": "ad4f4a14e04153e03ccfff766de066e5dff1f138", "commit_date": "Sat Nov 4 18:12:43 2023 -0300", "commit_message": "remove spirit-project link", "files_name": ["README.md"]}], "parents": [{"commit_id_before": "8b48d18e44f1dbb4b0f0a0a975d0dc14b88f0f41", "url_before": "https://api.github.com/repos/nitely/Spirit/commits/8b48d18e44f1dbb4b0f0a0a975d0dc14b88f0f41", "html_url_before": "https://github.com/nitely/Spirit/commit/8b48d18e44f1dbb4b0f0a0a975d0dc14b88f0f41"}], "details": [{"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fadmin%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.shortcuts import render\nfrom django.contrib import messages\nfrom django.utils.translation import gettext as _\nfrom django.contrib.auth import get_user_model\n\nimport spirit\nimport django\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.category.models import Category\nfrom spirit.comment.flag.models import CommentFlag\nfrom spirit.comment.like.models import CommentLike\nfrom spirit.comment.models import Comment\nfrom spirit.topic.models import Topic\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.decorators import administrator_required\nfrom .forms import BasicConfigForm\n\nUser = get_user_model()\n\n\n@administrator_required\ndef config_basic(request):\n    form = BasicConfigForm(data=post_data(request))\n    if is_post(request) and form.is_valid():\n        form.save()\n        messages.info(request, _(\"Settings updated!\"))\n        return safe_redirect(request, \"next\", request.get_full_path())\n    return render(\n        request=request,\n        template_name='spirit/admin/config_basic.html',\n        context={'form': form})\n\n\n@administrator_required\ndef dashboard(request):\n    # Strongly inaccurate counters below...\n    context = {\n        'version': spirit.__version__,\n        'django_version': django.get_version(),\n        'category_count': Category.objects.all().count() - 1,  # - private\n        'topics_count': Topic.objects.all().count(),\n        'comments_count': Comment.objects.all().count(),\n        'users_count': User.objects.all().count(),\n        'flags_count': CommentFlag.objects.filter(is_closed=False).count(),\n        'likes_count': CommentLike.objects.all().count()\n    }\n\n    return render(request, 'spirit/admin/dashboard.html', context)\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom django.utils.translation import gettext as _\nfrom django.contrib.auth import get_user_model\n\nimport spirit\nimport django\nfrom spirit.category.models import Category\nfrom spirit.comment.flag.models import CommentFlag\nfrom spirit.comment.like.models import CommentLike\nfrom spirit.comment.models import Comment\nfrom spirit.topic.models import Topic\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.decorators import administrator_required\nfrom .forms import BasicConfigForm\n\nUser = get_user_model()\n\n\n@administrator_required\ndef config_basic(request):\n    form = BasicConfigForm(data=post_data(request))\n    if is_post(request) and form.is_valid():\n        form.save()\n        messages.info(request, _(\"Settings updated!\"))\n        return redirect(request.GET.get(\"next\", request.get_full_path()))\n    return render(\n        request=request,\n        template_name='spirit/admin/config_basic.html',\n        context={'form': form})\n\n\n@administrator_required\ndef dashboard(request):\n    # Strongly inaccurate counters below...\n    context = {\n        'version': spirit.__version__,\n        'django_version': django.get_version(),\n        'category_count': Category.objects.all().count() - 1,  # - private\n        'topics_count': Topic.objects.all().count(),\n        'comments_count': Comment.objects.all().count(),\n        'users_count': User.objects.all().count(),\n        'flags_count': CommentFlag.objects.filter(is_closed=False).count(),\n        'likes_count': CommentLike.objects.all().count()\n    }\n\n    return render(request, 'spirit/admin/dashboard.html', context)\n", "patch": "@@ -1,12 +1,13 @@\n # -*- coding: utf-8 -*-\n \n-from django.shortcuts import render, redirect\n+from django.shortcuts import render\n from django.contrib import messages\n from django.utils.translation import gettext as _\n from django.contrib.auth import get_user_model\n \n import spirit\n import django\n+from spirit.core.utils.http import safe_redirect\n from spirit.category.models import Category\n from spirit.comment.flag.models import CommentFlag\n from spirit.comment.like.models import CommentLike\n@@ -25,7 +26,7 @@ def config_basic(request):\n     if is_post(request) and form.is_valid():\n         form.save()\n         messages.info(request, _(\"Settings updated!\"))\n-        return redirect(request.GET.get(\"next\", request.get_full_path()))\n+        return safe_redirect(request, \"next\", request.get_full_path())\n     return render(\n         request=request,\n         template_name='spirit/admin/config_basic.html',", "file_path": "files/2022_3/721", "file_language": "py", "file_name": "spirit/admin/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           28\u2506 return redirect(request.GET.get(\"next\", request.get_full_path()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           28\u2506 return redirect(request.GET.get(\"next\", request.get_full_path()))"]]}, "target": 1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fcomment%2Fflag%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, get_object_or_404\n\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post, post_data\nfrom ..models import Comment\nfrom .forms import FlagForm\n\n\n@login_required\ndef create(request, comment_id):\n    comment = get_object_or_404(Comment, pk=comment_id)\n    form = FlagForm(\n        user=request.user,\n        comment=comment,\n        data=post_data(request))\n\n    if is_post(request) and form.is_valid():\n        form.save()\n        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n\n    return render(\n        request=request,\n        template_name='spirit/comment/flag/create.html',\n        context={\n            'form': form,\n            'comment': comment})\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\n\nfrom ...core.utils.views import is_post, post_data\nfrom ..models import Comment\nfrom .forms import FlagForm\n\n\n@login_required\ndef create(request, comment_id):\n    comment = get_object_or_404(Comment, pk=comment_id)\n    form = FlagForm(\n        user=request.user,\n        comment=comment,\n        data=post_data(request))\n\n    if is_post(request) and form.is_valid():\n        form.save()\n        return redirect(request.POST.get('next', comment.get_absolute_url()))\n\n    return render(\n        request=request,\n        template_name='spirit/comment/flag/create.html',\n        context={\n            'form': form,\n            'comment': comment})\n", "patch": "@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n \n-from ...core.utils.views import is_post, post_data\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core.utils.views import is_post, post_data\n from ..models import Comment\n from .forms import FlagForm\n \n@@ -18,7 +19,7 @@ def create(request, comment_id):\n \n     if is_post(request) and form.is_valid():\n         form.save()\n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,", "file_path": "files/2022_3/722", "file_language": "py", "file_name": "spirit/comment/flag/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           21\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           21\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))"]]}, "target": 1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fcomment%2Flike%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, get_object_or_404\nfrom django.urls import reverse\n\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post, post_data, is_ajax\nfrom spirit.core.utils import json_response\nfrom spirit.comment.models import Comment\nfrom .models import CommentLike\nfrom .forms import LikeForm\n\n\n@login_required\ndef create(request, comment_id):\n    comment = get_object_or_404(\n        Comment.objects.exclude(user=request.user),\n        pk=comment_id)\n    form = LikeForm(\n        user=request.user,\n        comment=comment,\n        data=post_data(request))\n\n    if is_post(request) and form.is_valid():\n        like = form.save()\n        like.comment.increase_likes_count()\n\n        if is_ajax(request):\n            return json_response({'url_delete': like.get_delete_url()})\n\n        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n\n    return render(\n        request=request,\n        template_name='spirit/comment/like/create.html',\n        context={\n            'form': form,\n            'comment': comment})\n\n\n@login_required\ndef delete(request, pk):\n    like = get_object_or_404(CommentLike, pk=pk, user=request.user)\n\n    if is_post(request):\n        like.delete()\n        like.comment.decrease_likes_count()\n\n        if is_ajax(request):\n            url = reverse(\n                'spirit:comment:like:create',\n                kwargs={'comment_id': like.comment.pk})\n            return json_response({'url_create': url, })\n\n        return safe_redirect(\n            request, 'next', like.comment.get_absolute_url(), method='POST')\n\n    return render(\n        request=request,\n        template_name='spirit/comment/like/delete.html',\n        context={'like': like})\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.urls import reverse\n\nfrom spirit.core.utils.views import is_post, post_data, is_ajax\nfrom spirit.core.utils import json_response\nfrom spirit.comment.models import Comment\nfrom .models import CommentLike\nfrom .forms import LikeForm\n\n\n@login_required\ndef create(request, comment_id):\n    comment = get_object_or_404(\n        Comment.objects.exclude(user=request.user),\n        pk=comment_id)\n    form = LikeForm(\n        user=request.user,\n        comment=comment,\n        data=post_data(request))\n\n    if is_post(request) and form.is_valid():\n        like = form.save()\n        like.comment.increase_likes_count()\n\n        if is_ajax(request):\n            return json_response({'url_delete': like.get_delete_url()})\n\n        return redirect(request.POST.get('next', comment.get_absolute_url()))\n\n    return render(\n        request=request,\n        template_name='spirit/comment/like/create.html',\n        context={\n            'form': form,\n            'comment': comment})\n\n\n@login_required\ndef delete(request, pk):\n    like = get_object_or_404(CommentLike, pk=pk, user=request.user)\n\n    if is_post(request):\n        like.delete()\n        like.comment.decrease_likes_count()\n\n        if is_ajax(request):\n            url = reverse(\n                'spirit:comment:like:create',\n                kwargs={'comment_id': like.comment.pk})\n            return json_response({'url_create': url, })\n\n        return redirect(request.POST.get('next', like.comment.get_absolute_url()))\n\n    return render(\n        request=request,\n        template_name='spirit/comment/like/delete.html',\n        context={'like': like})\n", "patch": "@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.urls import reverse\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data, is_ajax\n from spirit.core.utils import json_response\n from spirit.comment.models import Comment\n@@ -28,7 +29,7 @@ def create(request, comment_id):\n         if is_ajax(request):\n             return json_response({'url_delete': like.get_delete_url()})\n \n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,\n@@ -52,7 +53,8 @@ def delete(request, pk):\n                 kwargs={'comment_id': like.comment.pk})\n             return json_response({'url_create': url, })\n \n-        return redirect(request.POST.get('next', like.comment.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', like.comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,", "file_path": "files/2022_3/723", "file_language": "py", "file_name": "spirit/comment/like/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           55\u2506 return redirect(request.POST.get('next', like.comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           55\u2506 return redirect(request.POST.get('next', like.comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           31\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           31\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))"]]}, "target": 1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fcomment%2Fpoll%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\nfrom django.contrib.auth.views import redirect_to_login\nfrom django.utils import timezone\nfrom django.core.exceptions import PermissionDenied\n\nfrom djconfig import config\n\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core import utils\nfrom spirit.core.utils.paginator import yt_paginate\nfrom .models import CommentPoll, CommentPollChoice, CommentPollVote\nfrom .forms import PollVoteManyForm\n\n\n@login_required\n@require_POST\ndef close_or_open(request, pk, close=True):\n    # todo: moderators should be able to close it\n    poll = get_object_or_404(\n        CommentPoll,\n        pk=pk,\n        comment__user=request.user\n    )\n\n    if close:\n        close_at = timezone.now()\n    else:\n        close_at = None\n\n    (CommentPoll.objects\n     .filter(pk=poll.pk)\n     .update(close_at=close_at))\n\n    return safe_redirect(request, 'next', poll.get_absolute_url())\n\n\n@require_POST\ndef vote(request, pk):\n    # TODO: check if user has access to this topic/poll\n    poll = get_object_or_404(\n        CommentPoll.objects.unremoved(),\n        pk=pk\n    )\n\n    if not request.user.is_authenticated:\n        return redirect_to_login(next=poll.get_absolute_url())\n\n    form = PollVoteManyForm(user=request.user, poll=poll, data=request.POST)\n\n    if form.is_valid():\n        CommentPollChoice.decrease_vote_count(poll=poll, voter=request.user)\n        form.save_m2m()\n        CommentPollChoice.increase_vote_count(poll=poll, voter=request.user)\n        return safe_redirect(request, 'next', poll.get_absolute_url(), method='POST')\n\n    messages.error(request, utils.render_form_errors(form))\n    return safe_redirect(request, 'next', poll.get_absolute_url(), method='POST')\n\n\n@login_required\ndef voters(request, pk):\n    # TODO: check if user has access to this topic/poll\n    choice = get_object_or_404(\n        CommentPollChoice.objects\n            .unremoved()\n            .select_related('poll'),\n        pk=pk\n    )\n\n    if not choice.poll.can_show_results:\n        raise PermissionDenied\n\n    choice_votes = (\n        CommentPollVote.objects\n        .unremoved()\n        .for_choice(choice=choice)\n        .select_related('voter__st'))\n\n    choice_votes = yt_paginate(\n        choice_votes,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n\n    context = {\n        'choice': choice,\n        'votes': choice_votes\n    }\n\n    return render(request, 'spirit/comment/poll/voters.html', context)\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\nfrom django.contrib.auth.views import redirect_to_login\nfrom django.utils import timezone\nfrom django.core.exceptions import PermissionDenied\n\nfrom djconfig import config\n\nfrom ...core import utils\nfrom ...core.utils.paginator import yt_paginate\nfrom .models import CommentPoll, CommentPollChoice, CommentPollVote\nfrom .forms import PollVoteManyForm\n\n\n@login_required\n@require_POST\ndef close_or_open(request, pk, close=True):\n    # todo: moderators should be able to close it\n    poll = get_object_or_404(\n        CommentPoll,\n        pk=pk,\n        comment__user=request.user\n    )\n\n    if close:\n        close_at = timezone.now()\n    else:\n        close_at = None\n\n    (CommentPoll.objects\n     .filter(pk=poll.pk)\n     .update(close_at=close_at))\n\n    return redirect(request.GET.get('next', poll.get_absolute_url()))\n\n\n@require_POST\ndef vote(request, pk):\n    # TODO: check if user has access to this topic/poll\n    poll = get_object_or_404(\n        CommentPoll.objects.unremoved(),\n        pk=pk\n    )\n\n    if not request.user.is_authenticated:\n        return redirect_to_login(next=poll.get_absolute_url())\n\n    form = PollVoteManyForm(user=request.user, poll=poll, data=request.POST)\n\n    if form.is_valid():\n        CommentPollChoice.decrease_vote_count(poll=poll, voter=request.user)\n        form.save_m2m()\n        CommentPollChoice.increase_vote_count(poll=poll, voter=request.user)\n        return redirect(request.POST.get('next', poll.get_absolute_url()))\n\n    messages.error(request, utils.render_form_errors(form))\n    return redirect(request.POST.get('next', poll.get_absolute_url()))\n\n\n@login_required\ndef voters(request, pk):\n    # TODO: check if user has access to this topic/poll\n    choice = get_object_or_404(\n        CommentPollChoice.objects\n            .unremoved()\n            .select_related('poll'),\n        pk=pk\n    )\n\n    if not choice.poll.can_show_results:\n        raise PermissionDenied\n\n    choice_votes = (\n        CommentPollVote.objects\n        .unremoved()\n        .for_choice(choice=choice)\n        .select_related('voter__st'))\n\n    choice_votes = yt_paginate(\n        choice_votes,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n\n    context = {\n        'choice': choice,\n        'votes': choice_votes\n    }\n\n    return render(request, 'spirit/comment/poll/voters.html', context)\n", "patch": "@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.views.decorators.http import require_POST\n from django.contrib import messages\n from django.contrib.auth.views import redirect_to_login\n@@ -10,8 +10,9 @@\n \n from djconfig import config\n \n-from ...core import utils\n-from ...core.utils.paginator import yt_paginate\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core import utils\n+from spirit.core.utils.paginator import yt_paginate\n from .models import CommentPoll, CommentPollChoice, CommentPollVote\n from .forms import PollVoteManyForm\n \n@@ -35,7 +36,7 @@ def close_or_open(request, pk, close=True):\n      .filter(pk=poll.pk)\n      .update(close_at=close_at))\n \n-    return redirect(request.GET.get('next', poll.get_absolute_url()))\n+    return safe_redirect(request, 'next', poll.get_absolute_url())\n \n \n @require_POST\n@@ -55,10 +56,10 @@ def vote(request, pk):\n         CommentPollChoice.decrease_vote_count(poll=poll, voter=request.user)\n         form.save_m2m()\n         CommentPollChoice.increase_vote_count(poll=poll, voter=request.user)\n-        return redirect(request.POST.get('next', poll.get_absolute_url()))\n+        return safe_redirect(request, 'next', poll.get_absolute_url(), method='POST')\n \n     messages.error(request, utils.render_form_errors(form))\n-    return redirect(request.POST.get('next', poll.get_absolute_url()))\n+    return safe_redirect(request, 'next', poll.get_absolute_url(), method='POST')\n \n \n @login_required", "file_path": "files/2022_3/724", "file_language": "py", "file_name": "spirit/comment/poll/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           61\u2506 return redirect(request.POST.get('next', poll.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           61\u2506 return redirect(request.POST.get('next', poll.get_absolute_url()))", "       python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid\n          Use form.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to         \n          only access sanitized data                                                                           \n          Details: https://sg.run/kJn7                                                                         \n\n           58\u2506 return redirect(request.POST.get('next', poll.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           58\u2506 return redirect(request.POST.get('next', poll.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           58\u2506 return redirect(request.POST.get('next', poll.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           38\u2506 return redirect(request.GET.get('next', poll.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           38\u2506 return redirect(request.GET.get('next', poll.get_absolute_url()))"]]}, "target": 1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fcomment%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\nfrom django.http import Http404\n\nfrom djconfig import config\n\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post, post_data, is_ajax\nfrom spirit.core.utils.ratelimit.decorators import ratelimit\nfrom spirit.core.utils.decorators import moderator_required\nfrom spirit.core.utils import markdown, paginator, render_form_errors, json_response\nfrom spirit.topic.models import Topic\nfrom .models import Comment\nfrom .forms import CommentForm, CommentMoveForm, CommentImageForm, CommentFileForm\nfrom .utils import comment_posted, post_comment_update, pre_comment_update, post_comment_move\n\n\n@login_required\n@ratelimit(rate='1/10s')\ndef publish(request, topic_id, pk=None):\n    initial = None\n    if pk:  # todo: move to form\n        comment = get_object_or_404(\n            Comment.objects.for_access(user=request.user), pk=pk)\n        quote = markdown.quotify(comment.comment, comment.user.st.nickname)\n        initial = {'comment': quote}\n\n    user = request.user\n    topic = get_object_or_404(\n        Topic.objects.opened().for_access(user),\n        pk=topic_id)\n    form = CommentForm(\n        user=user,\n        topic=topic,\n        data=post_data(request),\n        initial=initial)\n\n    if is_post(request) and not request.is_limited() and form.is_valid():\n        if not user.st.update_post_hash(form.get_comment_hash()):\n            # Hashed comment may have not been saved yet\n            default_url = lambda: (Comment\n                .get_last_for_topic(topic_id)\n                .get_absolute_url())\n            return safe_redirect(request, 'next', default_url, method='POST')\n\n        comment = form.save()\n        comment_posted(comment=comment, mentions=form.mentions)\n        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n\n    return render(\n        request=request,\n        template_name='spirit/comment/publish.html',\n        context={\n            'form': form,\n            'topic': topic})\n\n\n@login_required\ndef update(request, pk):\n    comment = Comment.objects.for_update_or_404(pk, request.user)\n    form = CommentForm(data=post_data(request), instance=comment)\n    if is_post(request) and form.is_valid():\n        pre_comment_update(comment=Comment.objects.get(pk=comment.pk))\n        comment = form.save()\n        post_comment_update(comment=comment)\n        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n    return render(\n        request=request,\n        template_name='spirit/comment/update.html',\n        context={'form': form})\n\n\n@moderator_required\ndef delete(request, pk, remove=True):\n    comment = get_object_or_404(Comment, pk=pk)\n    if is_post(request):\n        (Comment.objects\n         .filter(pk=pk)\n         .update(is_removed=remove))\n        return safe_redirect(request, 'next', comment.get_absolute_url())\n    return render(\n        request=request,\n        template_name='spirit/comment/moderate.html',\n        context={'comment': comment})\n\n\n@require_POST\n@moderator_required\ndef move(request, topic_id):\n    topic = get_object_or_404(Topic, pk=topic_id)\n    form = CommentMoveForm(topic=topic, data=request.POST)\n\n    if form.is_valid():\n        comments = form.save()\n\n        for comment in comments:\n            comment_posted(comment=comment, mentions=None)\n            topic.decrease_comment_count()\n            post_comment_move(comment=comment, topic=topic)\n    else:\n        messages.error(request, render_form_errors(form))\n\n    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n\n\ndef find(request, pk):\n    comment = get_object_or_404(Comment.objects.select_related('topic'), pk=pk)\n    comment_number = (\n        Comment.objects\n        .filter(topic=comment.topic, date__lte=comment.date)\n        .count())\n    url = paginator.get_url(\n        comment.topic.get_absolute_url(),\n        comment_number,\n        config.comments_per_page,\n        'page')\n    return redirect(url)\n\n\n@require_POST\n@login_required\ndef image_upload_ajax(request):\n    if not is_ajax(request):\n        return Http404()\n\n    form = CommentImageForm(\n        user=request.user, data=request.POST, files=request.FILES)\n\n    if form.is_valid():\n        image = form.save()\n        return json_response({'url': image.url})\n\n    return json_response({'error': dict(form.errors.items())})\n\n\n@require_POST\n@login_required\ndef file_upload_ajax(request):\n    if not is_ajax(request):\n        return Http404()\n\n    form = CommentFileForm(\n        user=request.user, data=request.POST, files=request.FILES)\n\n    if form.is_valid():\n        file = form.save()\n        return json_response({'url': file.url})\n\n    return json_response({'error': dict(form.errors.items())})\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\nfrom django.http import Http404\n\nfrom djconfig import config\n\nfrom spirit.core.utils.views import is_post, post_data, is_ajax\nfrom spirit.core.utils.ratelimit.decorators import ratelimit\nfrom spirit.core.utils.decorators import moderator_required\nfrom spirit.core.utils import markdown, paginator, render_form_errors, json_response\nfrom spirit.topic.models import Topic\nfrom .models import Comment\nfrom .forms import CommentForm, CommentMoveForm, CommentImageForm, CommentFileForm\nfrom .utils import comment_posted, post_comment_update, pre_comment_update, post_comment_move\n\n\n@login_required\n@ratelimit(rate='1/10s')\ndef publish(request, topic_id, pk=None):\n    initial = None\n    if pk:  # todo: move to form\n        comment = get_object_or_404(\n            Comment.objects.for_access(user=request.user), pk=pk)\n        quote = markdown.quotify(comment.comment, comment.user.st.nickname)\n        initial = {'comment': quote}\n\n    user = request.user\n    topic = get_object_or_404(\n        Topic.objects.opened().for_access(user),\n        pk=topic_id)\n    form = CommentForm(\n        user=user,\n        topic=topic,\n        data=post_data(request),\n        initial=initial)\n\n    if is_post(request) and not request.is_limited() and form.is_valid():\n        if not user.st.update_post_hash(form.get_comment_hash()):\n            # Hashed comment may have not been saved yet\n            return redirect(\n                request.POST.get('next', None) or\n                Comment\n                .get_last_for_topic(topic_id)\n                .get_absolute_url())\n\n        comment = form.save()\n        comment_posted(comment=comment, mentions=form.mentions)\n        return redirect(request.POST.get('next', comment.get_absolute_url()))\n\n    return render(\n        request=request,\n        template_name='spirit/comment/publish.html',\n        context={\n            'form': form,\n            'topic': topic})\n\n\n@login_required\ndef update(request, pk):\n    comment = Comment.objects.for_update_or_404(pk, request.user)\n    form = CommentForm(data=post_data(request), instance=comment)\n    if is_post(request) and form.is_valid():\n        pre_comment_update(comment=Comment.objects.get(pk=comment.pk))\n        comment = form.save()\n        post_comment_update(comment=comment)\n        return redirect(request.POST.get('next', comment.get_absolute_url()))\n    return render(\n        request=request,\n        template_name='spirit/comment/update.html',\n        context={'form': form})\n\n\n@moderator_required\ndef delete(request, pk, remove=True):\n    comment = get_object_or_404(Comment, pk=pk)\n    if is_post(request):\n        (Comment.objects\n         .filter(pk=pk)\n         .update(is_removed=remove))\n        return redirect(request.GET.get('next', comment.get_absolute_url()))\n    return render(\n        request=request,\n        template_name='spirit/comment/moderate.html',\n        context={'comment': comment})\n\n\n@require_POST\n@moderator_required\ndef move(request, topic_id):\n    topic = get_object_or_404(Topic, pk=topic_id)\n    form = CommentMoveForm(topic=topic, data=request.POST)\n\n    if form.is_valid():\n        comments = form.save()\n\n        for comment in comments:\n            comment_posted(comment=comment, mentions=None)\n            topic.decrease_comment_count()\n            post_comment_move(comment=comment, topic=topic)\n    else:\n        messages.error(request, render_form_errors(form))\n\n    return redirect(request.POST.get('next', topic.get_absolute_url()))\n\n\ndef find(request, pk):\n    comment = get_object_or_404(Comment.objects.select_related('topic'), pk=pk)\n    comment_number = (\n        Comment.objects\n        .filter(topic=comment.topic, date__lte=comment.date)\n        .count())\n    url = paginator.get_url(\n        comment.topic.get_absolute_url(),\n        comment_number,\n        config.comments_per_page,\n        'page')\n    return redirect(url)\n\n\n@require_POST\n@login_required\ndef image_upload_ajax(request):\n    if not is_ajax(request):\n        return Http404()\n\n    form = CommentImageForm(\n        user=request.user, data=request.POST, files=request.FILES)\n\n    if form.is_valid():\n        image = form.save()\n        return json_response({'url': image.url})\n\n    return json_response({'error': dict(form.errors.items())})\n\n\n@require_POST\n@login_required\ndef file_upload_ajax(request):\n    if not is_ajax(request):\n        return Http404()\n\n    form = CommentFileForm(\n        user=request.user, data=request.POST, files=request.FILES)\n\n    if form.is_valid():\n        file = form.save()\n        return json_response({'url': file.url})\n\n    return json_response({'error': dict(form.errors.items())})\n", "patch": "@@ -8,6 +8,7 @@\n \n from djconfig import config\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data, is_ajax\n from spirit.core.utils.ratelimit.decorators import ratelimit\n from spirit.core.utils.decorators import moderator_required\n@@ -41,15 +42,14 @@ def publish(request, topic_id, pk=None):\n     if is_post(request) and not request.is_limited() and form.is_valid():\n         if not user.st.update_post_hash(form.get_comment_hash()):\n             # Hashed comment may have not been saved yet\n-            return redirect(\n-                request.POST.get('next', None) or\n-                Comment\n+            default_url = lambda: (Comment\n                 .get_last_for_topic(topic_id)\n                 .get_absolute_url())\n+            return safe_redirect(request, 'next', default_url, method='POST')\n \n         comment = form.save()\n         comment_posted(comment=comment, mentions=form.mentions)\n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,\n@@ -67,7 +67,7 @@ def update(request, pk):\n         pre_comment_update(comment=Comment.objects.get(pk=comment.pk))\n         comment = form.save()\n         post_comment_update(comment=comment)\n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n     return render(\n         request=request,\n         template_name='spirit/comment/update.html',\n@@ -81,7 +81,7 @@ def delete(request, pk, remove=True):\n         (Comment.objects\n          .filter(pk=pk)\n          .update(is_removed=remove))\n-        return redirect(request.GET.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url())\n     return render(\n         request=request,\n         template_name='spirit/comment/moderate.html',\n@@ -104,7 +104,7 @@ def move(request, topic_id):\n     else:\n         messages.error(request, render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n \n def find(request, pk):", "file_path": "files/2022_3/725", "file_language": "py", "file_name": "spirit/comment/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n          107\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          107\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           84\u2506 return redirect(request.GET.get('next', comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           84\u2506 return redirect(request.GET.get('next', comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           70\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           70\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           52\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           52\u2506 return redirect(request.POST.get('next', comment.get_absolute_url()))"]]}, "target": 1, "function_before": [{"function": "def find(request, pk):\n    comment = get_object_or_404(Comment.objects.select_related('topic'), pk=pk)\n    comment_number = (\n        Comment.objects\n        .filter(topic=comment.topic, date__lte=comment.date)\n        .count())\n    url = paginator.get_url(\n        comment.topic.get_absolute_url(),\n        comment_number,\n        config.comments_per_page,\n        'page')\n    return redirect(url)", "target": 1, "line": "@@  -104,7 +104,7  @@ def move(request, topic_id):\n     else:\n         messages.error(request, render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n \n def find(request, pk):"}], "function_after": [{"function": "def find(request, pk):\n    comment = get_object_or_404(Comment.objects.select_related('topic'), pk=pk)\n    comment_number = (\n        Comment.objects\n        .filter(topic=comment.topic, date__lte=comment.date)\n        .count())\n    url = paginator.get_url(\n        comment.topic.get_absolute_url(),\n        comment_number,\n        config.comments_per_page,\n        'page')\n    return redirect(url)", "target": 0}]}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fcore%2Futils%2Fdecorators.py", "code": "# -*- coding: utf-8 -*-\n\nfrom functools import wraps\n\nfrom django.core.exceptions import PermissionDenied\nfrom django.contrib.auth.views import redirect_to_login\n\nfrom spirit.core.conf import settings\nfrom spirit.core.utils.http import safe_redirect\n\n\ndef moderator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_moderator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n\n\ndef administrator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_administrator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n\n\ndef guest_only(view_func):\n    # TODO: test!\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return safe_redirect(request, 'next', request.user.st.get_absolute_url())\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom functools import wraps\n\nfrom django.core.exceptions import PermissionDenied\nfrom django.contrib.auth.views import redirect_to_login\nfrom django.shortcuts import redirect\n\nfrom spirit.core.conf import settings\n\n\ndef moderator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_moderator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n\n\ndef administrator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_administrator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n\n\ndef guest_only(view_func):\n    # TODO: test!\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n", "patch": "@@ -4,9 +4,9 @@\n \n from django.core.exceptions import PermissionDenied\n from django.contrib.auth.views import redirect_to_login\n-from django.shortcuts import redirect\n \n from spirit.core.conf import settings\n+from spirit.core.utils.http import safe_redirect\n \n \n def moderator_required(view_func):\n@@ -48,7 +48,7 @@ def guest_only(view_func):\n     @wraps(view_func)\n     def wrapper(request, *args, **kwargs):\n         if request.user.is_authenticated:\n-            return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n+            return safe_redirect(request, 'next', request.user.st.get_absolute_url())\n \n         return view_func(request, *args, **kwargs)\n ", "file_path": "files/2022_3/726", "file_language": "py", "file_name": "spirit/core/utils/decorators.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           51\u2506 return redirect(request.GET.get('next', request.user.st.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           51\u2506 return redirect(request.GET.get('next', request.user.st.get_absolute_url()))"]]}, "target": 1, "function_before": [{"function": "def moderator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_moderator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper", "target": 1, "line": "@@  -4,9 +4,9  @@\n \n from django.core.exceptions import PermissionDenied\n from django.contrib.auth.views import redirect_to_login\n-from django.shortcuts import redirect\n \n from spirit.core.conf import settings\n+from spirit.core.utils.http import safe_redirect\n \n \n def moderator_required(view_func):\n"}, {"function": "def administrator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_administrator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper", "target": 0}, {"function": "def guest_only(view_func):\n    # TODO: test!\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper", "target": 1, "line": "@@  -48,7 +48,7  @@ def guest_only(view_func):\n     @wraps(view_func)\n     def wrapper(request, *args, **kwargs):\n         if request.user.is_authenticated:\n-            return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n+            return safe_redirect(request, 'next', request.user.st.get_absolute_url())\n \n         return view_func(request, *args, **kwargs)\n "}], "function_after": [{"function": "def moderator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_moderator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper", "target": 0}, {"function": "def administrator_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        user = request.user\n\n        if not user.is_authenticated:\n            return redirect_to_login(next=request.get_full_path(),\n                                     login_url=settings.LOGIN_URL)\n\n        if not user.st.is_administrator:\n            raise PermissionDenied\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper", "target": 0}, {"function": "def guest_only(view_func):\n    # TODO: test!\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return safe_redirect(request, 'next', request.user.st.get_absolute_url())\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper", "target": 0}]}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fcore%2Futils%2Fhttp.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.shortcuts import redirect\nfrom django.utils.encoding import iri_to_uri\n\ntry:\n    from django.utils.http import url_has_allowed_host_and_scheme\nexcept ImportError:\n    from django.utils.http import is_safe_url as url_has_allowed_host_and_scheme\n\n\ndef _resolve_lazy_url(url):\n    if callable(url):\n        return url()\n    return url\n\n\ndef safe_redirect(request, key, default_url='', method='GET'):\n    next = (\n        getattr(request, method).get(key, None) or\n        _resolve_lazy_url(default_url)\n    )\n    url_is_safe = url_has_allowed_host_and_scheme(\n        url=next, allowed_hosts=None)\n        #allowed_hosts=settings.ALLOWED_HOSTS,\n        #require_https=request.is_secure())\n    if url_is_safe:\n        return redirect(iri_to_uri(next))\n    return redirect('/')\n", "code_before": "", "patch": "@@ -0,0 +1,29 @@\n+# -*- coding: utf-8 -*-\n+\n+from django.shortcuts import redirect\n+from django.utils.encoding import iri_to_uri\n+\n+try:\n+    from django.utils.http import url_has_allowed_host_and_scheme\n+except ImportError:\n+    from django.utils.http import is_safe_url as url_has_allowed_host_and_scheme\n+\n+\n+def _resolve_lazy_url(url):\n+    if callable(url):\n+        return url()\n+    return url\n+\n+\n+def safe_redirect(request, key, default_url='', method='GET'):\n+    next = (\n+        getattr(request, method).get(key, None) or\n+        _resolve_lazy_url(default_url)\n+    )\n+    url_is_safe = url_has_allowed_host_and_scheme(\n+        url=next, allowed_hosts=None)\n+        #allowed_hosts=settings.ALLOWED_HOSTS,\n+        #require_https=request.is_secure())\n+    if url_is_safe:\n+        return redirect(iri_to_uri(next))\n+    return redirect('/')", "file_path": "files/2022_3/727", "file_language": "py", "file_name": "spirit/core/utils/http.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Ftopic%2Ffavorite%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\n\nfrom .models import TopicFavorite\nfrom .forms import FavoriteForm\nfrom ..models import Topic\nfrom spirit.core import utils\nfrom spirit.core.utils.http import safe_redirect\n\n\n@require_POST\n@login_required\ndef create(request, topic_id):\n    topic = get_object_or_404(Topic, pk=topic_id)\n    form = FavoriteForm(user=request.user, topic=topic, data=request.POST)\n\n    if form.is_valid():\n        form.save()\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n\n\n@require_POST\n@login_required\ndef delete(request, pk):\n    favorite = get_object_or_404(TopicFavorite, pk=pk, user=request.user)\n    favorite.delete()\n    return safe_redirect(request, 'next', favorite.topic.get_absolute_url(), method='POST')\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import get_object_or_404\nfrom django.shortcuts import redirect\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\n\nfrom .models import TopicFavorite\nfrom .forms import FavoriteForm\nfrom ..models import Topic\nfrom ...core import utils\n\n\n@require_POST\n@login_required\ndef create(request, topic_id):\n    topic = get_object_or_404(Topic, pk=topic_id)\n    form = FavoriteForm(user=request.user, topic=topic, data=request.POST)\n\n    if form.is_valid():\n        form.save()\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return redirect(request.POST.get('next', topic.get_absolute_url()))\n\n\n@require_POST\n@login_required\ndef delete(request, pk):\n    favorite = get_object_or_404(TopicFavorite, pk=pk, user=request.user)\n    favorite.delete()\n    return redirect(request.POST.get('next', favorite.topic.get_absolute_url()))\n", "patch": "@@ -2,14 +2,14 @@\n \n from django.contrib.auth.decorators import login_required\n from django.shortcuts import get_object_or_404\n-from django.shortcuts import redirect\n from django.views.decorators.http import require_POST\n from django.contrib import messages\n \n from .models import TopicFavorite\n from .forms import FavoriteForm\n from ..models import Topic\n-from ...core import utils\n+from spirit.core import utils\n+from spirit.core.utils.http import safe_redirect\n \n \n @require_POST\n@@ -23,12 +23,12 @@ def create(request, topic_id):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n \n @require_POST\n @login_required\n def delete(request, pk):\n     favorite = get_object_or_404(TopicFavorite, pk=pk, user=request.user)\n     favorite.delete()\n-    return redirect(request.POST.get('next', favorite.topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', favorite.topic.get_absolute_url(), method='POST')", "file_path": "files/2022_3/728", "file_language": "py", "file_name": "spirit/topic/favorite/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           34\u2506 return redirect(request.POST.get('next', favorite.topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           34\u2506 return redirect(request.POST.get('next', favorite.topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           26\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           26\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))"]]}, "target": 1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Ftopic%2Fmoderate%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.utils import timezone\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom django.utils.translation import gettext as _\n\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post\nfrom spirit.core.utils.decorators import moderator_required\nfrom spirit.comment.models import Comment\nfrom spirit.topic.models import Topic\n\n\n@moderator_required\ndef _moderate(request, pk, field_name, to_value, action=None, message=None):\n    topic = get_object_or_404(Topic, pk=pk)\n\n    if is_post(request):\n        count = (\n            Topic.objects\n            .filter(pk=pk)\n            .exclude(**{field_name: to_value})\n            .update(**{\n                field_name: to_value,\n                'reindex_at': timezone.now()}))\n\n        if count and action is not None:\n            Comment.create_moderation_action(\n                user=request.user,\n                topic=topic,\n                action=action)\n\n        if message is not None:\n            messages.info(request, message)\n\n        return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n\n    return render(\n        request=request,\n        template_name='spirit/topic/moderate.html',\n        context={'topic': topic})\n\n\ndef delete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=True,\n        message=_(\"The topic has been deleted\"))\n\n\ndef undelete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=False,\n        message=_(\"The topic has been undeleted\"))\n\n\ndef lock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=True,\n        action=Comment.CLOSED,\n        message=_(\"The topic has been locked\"))\n\n\ndef unlock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=False,\n        action=Comment.UNCLOSED,\n        message=_(\"The topic has been unlocked\"))\n\n\ndef pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been pinned\"))\n\n\ndef unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been unpinned\"))\n\n\ndef global_pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been globally pinned\"))\n\n\ndef global_unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been globally unpinned\"))\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.utils import timezone\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib import messages\nfrom django.utils.translation import gettext as _\n\nfrom spirit.core.utils.views import is_post\nfrom spirit.core.utils.decorators import moderator_required\nfrom spirit.comment.models import Comment\nfrom spirit.topic.models import Topic\n\n\n@moderator_required\ndef _moderate(request, pk, field_name, to_value, action=None, message=None):\n    topic = get_object_or_404(Topic, pk=pk)\n\n    if is_post(request):\n        count = (\n            Topic.objects\n            .filter(pk=pk)\n            .exclude(**{field_name: to_value})\n            .update(**{\n                field_name: to_value,\n                'reindex_at': timezone.now()}))\n\n        if count and action is not None:\n            Comment.create_moderation_action(\n                user=request.user,\n                topic=topic,\n                action=action)\n\n        if message is not None:\n            messages.info(request, message)\n\n        return redirect(request.POST.get(\n            'next', topic.get_absolute_url()))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/moderate.html',\n        context={'topic': topic})\n\n\ndef delete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=True,\n        message=_(\"The topic has been deleted\"))\n\n\ndef undelete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=False,\n        message=_(\"The topic has been undeleted\"))\n\n\ndef lock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=True,\n        action=Comment.CLOSED,\n        message=_(\"The topic has been locked\"))\n\n\ndef unlock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=False,\n        action=Comment.UNCLOSED,\n        message=_(\"The topic has been unlocked\"))\n\n\ndef pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been pinned\"))\n\n\ndef unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been unpinned\"))\n\n\ndef global_pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been globally pinned\"))\n\n\ndef global_unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been globally unpinned\"))\n", "patch": "@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n \n from django.utils import timezone\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.contrib import messages\n from django.utils.translation import gettext as _\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post\n from spirit.core.utils.decorators import moderator_required\n from spirit.comment.models import Comment\n@@ -33,8 +34,7 @@ def _moderate(request, pk, field_name, to_value, action=None, message=None):\n         if message is not None:\n             messages.info(request, message)\n \n-        return redirect(request.POST.get(\n-            'next', topic.get_absolute_url()))\n+        return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,", "file_path": "files/2022_3/729", "file_language": "py", "file_name": "spirit/topic/moderate/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           36\u2506 return redirect(request.POST.get(           37\u2506     'next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           36\u2506 return redirect(request.POST.get(\n           37\u2506     'next', topic.get_absolute_url()))"]]}, "target": 1, "function_before": [{"function": "def delete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=True,\n        message=_(\"The topic has been deleted\"))", "target": 0}, {"function": "def undelete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=False,\n        message=_(\"The topic has been undeleted\"))", "target": 0}, {"function": "def lock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=True,\n        action=Comment.CLOSED,\n        message=_(\"The topic has been locked\"))", "target": 0}, {"function": "def unlock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=False,\n        action=Comment.UNCLOSED,\n        message=_(\"The topic has been unlocked\"))", "target": 0}, {"function": "def pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been pinned\"))", "target": 0}, {"function": "def unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been unpinned\"))", "target": 0}, {"function": "def global_pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been globally pinned\"))", "target": 0}, {"function": "def global_unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been globally unpinned\"))", "target": 0}], "function_after": [{"function": "def delete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=True,\n        message=_(\"The topic has been deleted\"))", "target": 0}, {"function": "def undelete(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_removed',\n        to_value=False,\n        message=_(\"The topic has been undeleted\"))", "target": 0}, {"function": "def lock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=True,\n        action=Comment.CLOSED,\n        message=_(\"The topic has been locked\"))", "target": 0}, {"function": "def unlock(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_closed',\n        to_value=False,\n        action=Comment.UNCLOSED,\n        message=_(\"The topic has been unlocked\"))", "target": 0}, {"function": "def pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been pinned\"))", "target": 0}, {"function": "def unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been unpinned\"))", "target": 0}, {"function": "def global_pin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=True,\n        action=Comment.PINNED,\n        message=_(\"The topic has been globally pinned\"))", "target": 0}, {"function": "def global_unpin(request, pk):\n    return _moderate(\n        request=request,\n        pk=pk,\n        field_name='is_globally_pinned',\n        to_value=False,\n        action=Comment.UNPINNED,\n        message=_(\"The topic has been globally unpinned\"))", "target": 0}]}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Ftopic%2Fnotification%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nimport json\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.http import Http404, HttpResponse\nfrom django.contrib import messages\nfrom django.utils.html import escape\nfrom django.urls import reverse\n\nfrom djconfig import config\nfrom infinite_scroll_pagination.serializers import to_page_key\n\nfrom spirit.core.conf import settings\nfrom spirit.core import utils\nfrom spirit.core.utils.paginator import yt_paginate\nfrom spirit.core.utils.paginator.infinite_paginator import paginate\nfrom spirit.core.utils.views import is_ajax\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.topic.models import Topic\nfrom .models import TopicNotification\nfrom .forms import NotificationForm, NotificationCreationForm\n\n\n@require_POST\n@login_required\ndef create(request, topic_id):\n    topic = get_object_or_404(\n        Topic.objects.for_access(request.user),\n        pk=topic_id)\n    form = NotificationCreationForm(\n        user=request.user,\n        topic=topic,\n        data=request.POST)\n\n    if form.is_valid():\n        form.save()\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n\n\n@require_POST\n@login_required\ndef update(request, pk):\n    notification = get_object_or_404(TopicNotification, pk=pk, user=request.user)\n    form = NotificationForm(data=request.POST, instance=notification)\n\n    if form.is_valid():\n        form.save()\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return safe_redirect(\n        request, 'next', notification.topic.get_absolute_url(), method='POST')\n\n\n@login_required\ndef index_ajax(request):\n    if not is_ajax(request):\n        return Http404()\n\n    notifications = (\n        TopicNotification.objects\n            .for_access(request.user)\n            .order_by(\"is_read\", \"-date\")\n            .with_related_data())\n    notifications = notifications[:settings.ST_NOTIFICATIONS_PER_PAGE]\n    notifications = [\n        {'user': escape(n.comment.user.st.nickname),\n         'action': n.action,\n         'title': escape(n.topic.title),\n         'url': n.get_absolute_url(),\n         'is_read': n.is_read}\n        for n in notifications]\n\n    return HttpResponse(\n        json.dumps({'n': notifications}),\n        content_type=\"application/json\")\n\n\n@login_required\ndef index_unread(request):\n    notifications = (\n        TopicNotification.objects\n            .for_access(request.user)\n            .filter(is_read=False)\n            .with_related_data())\n    page = paginate(\n        request,\n        query_set=notifications,\n        lookup_field='date',\n        page_var='p',\n        per_page=settings.ST_NOTIFICATIONS_PER_PAGE)\n    return render(\n        request=request,\n        template_name='spirit/topic/notification/index_unread.html',\n        context={\n            'page': page,\n            'next_page': to_page_key(**page.next_page())})\n\n\n@login_required\ndef index(request):\n    notifications = yt_paginate(\n        TopicNotification.objects\n            .for_access(request.user)\n            .with_related_data(),\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/notification/index.html',\n        context={'notifications': notifications})\n\n\n@require_POST\n@login_required\ndef mark_all_as_read(request):\n    (TopicNotification.objects\n        .for_access(request.user)\n        .filter(is_read=False)\n        .update(is_read=True))\n    return safe_redirect(\n        request, 'next', reverse('spirit:topic:notification:index'), method='POST')\n", "code_before": "# -*- coding: utf-8 -*-\n\nimport json\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.http import Http404, HttpResponse\nfrom django.contrib import messages\nfrom django.utils.html import escape\nfrom django.urls import reverse\n\nfrom djconfig import config\nfrom infinite_scroll_pagination.serializers import to_page_key\n\nfrom spirit.core.conf import settings\nfrom spirit.core import utils\nfrom spirit.core.utils.paginator import yt_paginate\nfrom spirit.core.utils.paginator.infinite_paginator import paginate\nfrom spirit.core.utils.views import is_ajax\nfrom spirit.topic.models import Topic\nfrom .models import TopicNotification\nfrom .forms import NotificationForm, NotificationCreationForm\n\n\n@require_POST\n@login_required\ndef create(request, topic_id):\n    topic = get_object_or_404(\n        Topic.objects.for_access(request.user),\n        pk=topic_id)\n    form = NotificationCreationForm(\n        user=request.user,\n        topic=topic,\n        data=request.POST)\n\n    if form.is_valid():\n        form.save()\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return redirect(request.POST.get('next', topic.get_absolute_url()))\n\n\n@require_POST\n@login_required\ndef update(request, pk):\n    notification = get_object_or_404(TopicNotification, pk=pk, user=request.user)\n    form = NotificationForm(data=request.POST, instance=notification)\n\n    if form.is_valid():\n        form.save()\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return redirect(request.POST.get(\n        'next', notification.topic.get_absolute_url()))\n\n\n@login_required\ndef index_ajax(request):\n    if not is_ajax(request):\n        return Http404()\n\n    notifications = (\n        TopicNotification.objects\n            .for_access(request.user)\n            .order_by(\"is_read\", \"-date\")\n            .with_related_data())\n    notifications = notifications[:settings.ST_NOTIFICATIONS_PER_PAGE]\n    notifications = [\n        {'user': escape(n.comment.user.st.nickname),\n         'action': n.action,\n         'title': escape(n.topic.title),\n         'url': n.get_absolute_url(),\n         'is_read': n.is_read}\n        for n in notifications]\n\n    return HttpResponse(\n        json.dumps({'n': notifications}),\n        content_type=\"application/json\")\n\n\n@login_required\ndef index_unread(request):\n    notifications = (\n        TopicNotification.objects\n            .for_access(request.user)\n            .filter(is_read=False)\n            .with_related_data())\n    page = paginate(\n        request,\n        query_set=notifications,\n        lookup_field='date',\n        page_var='p',\n        per_page=settings.ST_NOTIFICATIONS_PER_PAGE)\n    return render(\n        request=request,\n        template_name='spirit/topic/notification/index_unread.html',\n        context={\n            'page': page,\n            'next_page': to_page_key(**page.next_page())})\n\n\n@login_required\ndef index(request):\n    notifications = yt_paginate(\n        TopicNotification.objects\n            .for_access(request.user)\n            .with_related_data(),\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/notification/index.html',\n        context={'notifications': notifications})\n\n\n@require_POST\n@login_required\ndef mark_all_as_read(request):\n    (TopicNotification.objects\n        .for_access(request.user)\n        .filter(is_read=False)\n        .update(is_read=True))\n    return redirect(request.POST.get(\n        'next', reverse('spirit:topic:notification:index')))\n", "patch": "@@ -3,7 +3,7 @@\n import json\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.views.decorators.http import require_POST\n from django.http import Http404, HttpResponse\n from django.contrib import messages\n@@ -18,6 +18,7 @@\n from spirit.core.utils.paginator import yt_paginate\n from spirit.core.utils.paginator.infinite_paginator import paginate\n from spirit.core.utils.views import is_ajax\n+from spirit.core.utils.http import safe_redirect\n from spirit.topic.models import Topic\n from .models import TopicNotification\n from .forms import NotificationForm, NotificationCreationForm\n@@ -39,7 +40,7 @@ def create(request, topic_id):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n \n @require_POST\n@@ -53,8 +54,8 @@ def update(request, pk):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get(\n-        'next', notification.topic.get_absolute_url()))\n+    return safe_redirect(\n+        request, 'next', notification.topic.get_absolute_url(), method='POST')\n \n \n @login_required\n@@ -124,5 +125,5 @@ def mark_all_as_read(request):\n         .for_access(request.user)\n         .filter(is_read=False)\n         .update(is_read=True))\n-    return redirect(request.POST.get(\n-        'next', reverse('spirit:topic:notification:index')))\n+    return safe_redirect(\n+        request, 'next', reverse('spirit:topic:notification:index'), method='POST')", "file_path": "files/2022_3/730", "file_language": "py", "file_name": "spirit/topic/notification/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          127\u2506 return redirect(request.POST.get(          128\u2506     'next', reverse('spirit:topic:notification:index')))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          127\u2506 return redirect(request.POST.get(\n          128\u2506     'next', reverse('spirit:topic:notification:index')))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           56\u2506 return redirect(request.POST.get(\n           57\u2506     'next', notification.topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           56\u2506 return redirect(request.POST.get(\n           57\u2506     'next', notification.topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           42\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           42\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))"]]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Ftopic%2Fprivate%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.urls import reverse\nfrom django.contrib.auth import get_user_model\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\nfrom django.http import HttpResponsePermanentRedirect\n\nfrom djconfig import config\n\nfrom spirit.core.conf import settings\nfrom spirit.core import utils\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.paginator import paginate, yt_paginate\nfrom spirit.core.utils.ratelimit.decorators import ratelimit\nfrom spirit.comment.forms import CommentForm\nfrom spirit.comment.utils import comment_posted\nfrom spirit.comment.models import Comment\nfrom ..models import Topic\nfrom ..utils import topic_viewed\nfrom .utils import notify_access\nfrom .models import TopicPrivate\nfrom .forms import (\n    TopicPrivateManyForm, TopicForPrivateForm,\n    TopicPrivateJoinForm, TopicPrivateInviteForm)\nfrom ..notification.models import TopicNotification\n\nUser = get_user_model()\n\n\n@login_required\n@ratelimit(rate='1/10s')\ndef publish(request, user_id=None):\n    initial = None\n    if user_id:  # todo: move to form\n        user_to = get_object_or_404(User, pk=user_id)\n        initial = {'users': [user_to.st.nickname]}\n\n    user = request.user\n    tform = TopicForPrivateForm(\n        user=user, data=post_data(request))\n    cform = CommentForm(\n        user=user, data=post_data(request))\n    tpform = TopicPrivateManyForm(\n        user=user, data=post_data(request), initial=initial)\n\n    if (is_post(request) and\n            all([tform.is_valid(), cform.is_valid(), tpform.is_valid()]) and\n            not request.is_limited()):\n        if not user.st.update_post_hash(tform.get_topic_hash()):\n            return safe_redirect(\n                request, 'next', lambda: tform.category.get_absolute_url(), method='POST')\n\n        # wrap in transaction.atomic?\n        topic = tform.save()\n        cform.topic = topic\n        comment = cform.save()\n        comment_posted(comment=comment, mentions=None)\n        tpform.topic = topic\n        tpform.save_m2m()\n        TopicNotification.bulk_create(\n            users=tpform.get_users(), comment=comment)\n        return redirect(topic.get_absolute_url())\n\n    return render(\n        request=request,\n        template_name='spirit/topic/private/publish.html',\n        context={\n            'tform': tform,\n            'cform': cform,\n            'tpform': tpform})\n\n\n@login_required\ndef detail(request, topic_id, slug):\n    topic_private = get_object_or_404(\n        TopicPrivate.objects.select_related('topic'),\n        topic_id=topic_id,\n        user=request.user)\n    topic = topic_private.topic\n\n    if topic.slug != slug:\n        return HttpResponsePermanentRedirect(topic.get_absolute_url())\n\n    topic_viewed(request=request, topic=topic)\n\n    comments = (\n        Comment.objects\n        .for_topic(topic=topic)\n        .with_likes(user=request.user)\n        .with_polls(user=request.user)\n        .order_by('date'))\n\n    comments = paginate(\n        comments,\n        per_page=config.comments_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n\n    return render(\n        request=request,\n        template_name='spirit/topic/private/detail.html',\n        context={\n            'topic': topic,\n            'topic_private': topic_private,\n            'comments': comments,})\n\n\n@login_required\n@require_POST\ndef create_access(request, topic_id):\n    topic_private = TopicPrivate.objects.for_create_or_404(topic_id, request.user)\n    form = TopicPrivateInviteForm(\n        topic=topic_private.topic,\n        data=post_data(request))\n\n    if form.is_valid():\n        form.save()\n        notify_access(user=form.get_user(), topic_private=topic_private)\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return safe_redirect(\n        request, 'next', topic_private.get_absolute_url(), method='POST')\n\n\n@login_required\ndef delete_access(request, pk):\n    topic_private = TopicPrivate.objects.for_delete_or_404(pk, request.user)\n\n    if request.method == 'POST':\n        topic_private.delete()\n\n        if request.user.pk == topic_private.user_id:\n            return redirect(reverse(\"spirit:topic:private:index\"))\n\n        return safe_redirect(\n            request, 'next', topic_private.get_absolute_url(), method='POST')\n\n    return render(\n        request=request,\n        template_name='spirit/topic/private/delete.html',\n        context={'topic_private': topic_private})\n\n\n@login_required\ndef join_in(request, topic_id):\n    # todo: replace by create_access()?\n    # This is for topic creators who left their own topics and want to join again\n    topic = get_object_or_404(\n        Topic,\n        pk=topic_id,\n        user=request.user,\n        category_id=settings.ST_TOPIC_PRIVATE_CATEGORY_PK)\n    form = TopicPrivateJoinForm(\n        topic=topic,\n        user=request.user,\n        data=post_data(request))\n    if is_post(request) and form.is_valid():\n        topic_private = form.save()\n        notify_access(user=form.get_user(), topic_private=topic_private)\n        return safe_redirect(\n            request, 'next', topic.get_absolute_url(), method='POST')\n    return render(\n        request=request,\n        template_name='spirit/topic/private/join.html',\n        context={\n            'topic': topic,\n            'form': form})\n\n\n@login_required\ndef index(request):\n    topics = (\n        Topic.objects\n        .with_bookmarks(user=request.user)\n        .filter(topics_private__user=request.user))\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n    return render(\n        request=request,\n        template_name='spirit/topic/private/index.html',\n        context={'topics': topics})\n\n\n@login_required\ndef index_author(request):\n    # Show created topics but exclude those the user is participating on\n    # TODO: show all, show join link in those the user is not participating\n    # TODO: move to manager\n    topics = (\n        Topic.objects\n        .filter(\n            user=request.user,\n            category_id=settings.ST_TOPIC_PRIVATE_CATEGORY_PK)\n        .exclude(topics_private__user=request.user))\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n    return render(\n        request=request,\n        template_name='spirit/topic/private/index_author.html',\n        context={'topics': topics})\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.urls import reverse\nfrom django.contrib.auth import get_user_model\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.decorators.http import require_POST\nfrom django.contrib import messages\nfrom django.http import HttpResponsePermanentRedirect\n\nfrom djconfig import config\n\nfrom ...core.conf import settings\nfrom ...core import utils\nfrom ...core.utils.views import is_post, post_data\nfrom ...core.utils.paginator import paginate, yt_paginate\nfrom ...core.utils.ratelimit.decorators import ratelimit\nfrom ...comment.forms import CommentForm\nfrom ...comment.utils import comment_posted\nfrom ...comment.models import Comment\nfrom ..models import Topic\nfrom ..utils import topic_viewed\nfrom .utils import notify_access\nfrom .models import TopicPrivate\nfrom .forms import (\n    TopicPrivateManyForm, TopicForPrivateForm,\n    TopicPrivateJoinForm, TopicPrivateInviteForm)\nfrom ..notification.models import TopicNotification\n\nUser = get_user_model()\n\n\n@login_required\n@ratelimit(rate='1/10s')\ndef publish(request, user_id=None):\n    initial = None\n    if user_id:  # todo: move to form\n        user_to = get_object_or_404(User, pk=user_id)\n        initial = {'users': [user_to.st.nickname]}\n\n    user = request.user\n    tform = TopicForPrivateForm(\n        user=user, data=post_data(request))\n    cform = CommentForm(\n        user=user, data=post_data(request))\n    tpform = TopicPrivateManyForm(\n        user=user, data=post_data(request), initial=initial)\n\n    if (is_post(request) and\n            all([tform.is_valid(), cform.is_valid(), tpform.is_valid()]) and\n            not request.is_limited()):\n        if not user.st.update_post_hash(tform.get_topic_hash()):\n            return redirect(\n                request.POST.get('next', None) or\n                tform.category.get_absolute_url())\n\n        # wrap in transaction.atomic?\n        topic = tform.save()\n        cform.topic = topic\n        comment = cform.save()\n        comment_posted(comment=comment, mentions=None)\n        tpform.topic = topic\n        tpform.save_m2m()\n        TopicNotification.bulk_create(\n            users=tpform.get_users(), comment=comment)\n        return redirect(topic.get_absolute_url())\n\n    return render(\n        request=request,\n        template_name='spirit/topic/private/publish.html',\n        context={\n            'tform': tform,\n            'cform': cform,\n            'tpform': tpform})\n\n\n@login_required\ndef detail(request, topic_id, slug):\n    topic_private = get_object_or_404(\n        TopicPrivate.objects.select_related('topic'),\n        topic_id=topic_id,\n        user=request.user)\n    topic = topic_private.topic\n\n    if topic.slug != slug:\n        return HttpResponsePermanentRedirect(topic.get_absolute_url())\n\n    topic_viewed(request=request, topic=topic)\n\n    comments = (\n        Comment.objects\n        .for_topic(topic=topic)\n        .with_likes(user=request.user)\n        .with_polls(user=request.user)\n        .order_by('date'))\n\n    comments = paginate(\n        comments,\n        per_page=config.comments_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n\n    return render(\n        request=request,\n        template_name='spirit/topic/private/detail.html',\n        context={\n            'topic': topic,\n            'topic_private': topic_private,\n            'comments': comments,})\n\n\n@login_required\n@require_POST\ndef create_access(request, topic_id):\n    topic_private = TopicPrivate.objects.for_create_or_404(topic_id, request.user)\n    form = TopicPrivateInviteForm(\n        topic=topic_private.topic,\n        data=post_data(request))\n\n    if form.is_valid():\n        form.save()\n        notify_access(user=form.get_user(), topic_private=topic_private)\n    else:\n        messages.error(request, utils.render_form_errors(form))\n\n    return redirect(request.POST.get('next', topic_private.get_absolute_url()))\n\n\n@login_required\ndef delete_access(request, pk):\n    topic_private = TopicPrivate.objects.for_delete_or_404(pk, request.user)\n\n    if request.method == 'POST':\n        topic_private.delete()\n\n        if request.user.pk == topic_private.user_id:\n            return redirect(reverse(\"spirit:topic:private:index\"))\n\n        return redirect(request.POST.get('next', topic_private.get_absolute_url()))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/private/delete.html',\n        context={'topic_private': topic_private})\n\n\n@login_required\ndef join_in(request, topic_id):\n    # todo: replace by create_access()?\n    # This is for topic creators who left their own topics and want to join again\n    topic = get_object_or_404(\n        Topic,\n        pk=topic_id,\n        user=request.user,\n        category_id=settings.ST_TOPIC_PRIVATE_CATEGORY_PK)\n    form = TopicPrivateJoinForm(\n        topic=topic,\n        user=request.user,\n        data=post_data(request))\n    if is_post(request) and form.is_valid():\n        topic_private = form.save()\n        notify_access(user=form.get_user(), topic_private=topic_private)\n        return redirect(request.POST.get('next', topic.get_absolute_url()))\n    return render(\n        request=request,\n        template_name='spirit/topic/private/join.html',\n        context={\n            'topic': topic,\n            'form': form})\n\n\n@login_required\ndef index(request):\n    topics = (\n        Topic.objects\n        .with_bookmarks(user=request.user)\n        .filter(topics_private__user=request.user))\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n    return render(\n        request=request,\n        template_name='spirit/topic/private/index.html',\n        context={'topics': topics})\n\n\n@login_required\ndef index_author(request):\n    # Show created topics but exclude those the user is participating on\n    # TODO: show all, show join link in those the user is not participating\n    # TODO: move to manager\n    topics = (\n        Topic.objects\n        .filter(\n            user=request.user,\n            category_id=settings.ST_TOPIC_PRIVATE_CATEGORY_PK)\n        .exclude(topics_private__user=request.user))\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n    return render(\n        request=request,\n        template_name='spirit/topic/private/index_author.html',\n        context={'topics': topics})\n", "patch": "@@ -10,14 +10,15 @@\n \n from djconfig import config\n \n-from ...core.conf import settings\n-from ...core import utils\n-from ...core.utils.views import is_post, post_data\n-from ...core.utils.paginator import paginate, yt_paginate\n-from ...core.utils.ratelimit.decorators import ratelimit\n-from ...comment.forms import CommentForm\n-from ...comment.utils import comment_posted\n-from ...comment.models import Comment\n+from spirit.core.conf import settings\n+from spirit.core import utils\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core.utils.views import is_post, post_data\n+from spirit.core.utils.paginator import paginate, yt_paginate\n+from spirit.core.utils.ratelimit.decorators import ratelimit\n+from spirit.comment.forms import CommentForm\n+from spirit.comment.utils import comment_posted\n+from spirit.comment.models import Comment\n from ..models import Topic\n from ..utils import topic_viewed\n from .utils import notify_access\n@@ -50,9 +51,8 @@ def publish(request, user_id=None):\n             all([tform.is_valid(), cform.is_valid(), tpform.is_valid()]) and\n             not request.is_limited()):\n         if not user.st.update_post_hash(tform.get_topic_hash()):\n-            return redirect(\n-                request.POST.get('next', None) or\n-                tform.category.get_absolute_url())\n+            return safe_redirect(\n+                request, 'next', lambda: tform.category.get_absolute_url(), method='POST')\n \n         # wrap in transaction.atomic?\n         topic = tform.save()\n@@ -123,7 +123,8 @@ def create_access(request, topic_id):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic_private.get_absolute_url()))\n+    return safe_redirect(\n+        request, 'next', topic_private.get_absolute_url(), method='POST')\n \n \n @login_required\n@@ -136,7 +137,8 @@ def delete_access(request, pk):\n         if request.user.pk == topic_private.user_id:\n             return redirect(reverse(\"spirit:topic:private:index\"))\n \n-        return redirect(request.POST.get('next', topic_private.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', topic_private.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,\n@@ -160,7 +162,8 @@ def join_in(request, topic_id):\n     if is_post(request) and form.is_valid():\n         topic_private = form.save()\n         notify_access(user=form.get_user(), topic_private=topic_private)\n-        return redirect(request.POST.get('next', topic.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', topic.get_absolute_url(), method='POST')\n     return render(\n         request=request,\n         template_name='spirit/topic/private/join.html',", "file_path": "files/2022_3/731", "file_language": "py", "file_name": "spirit/topic/private/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n          163\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          163\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          139\u2506 return redirect(request.POST.get('next', topic_private.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          139\u2506 return redirect(request.POST.get('next', topic_private.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          126\u2506 return redirect(request.POST.get('next', topic_private.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          126\u2506 return redirect(request.POST.get('next', topic_private.get_absolute_url()))"]]}, "target": 1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Ftopic%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponsePermanentRedirect\n\nfrom djconfig import config\n\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.paginator import paginate, yt_paginate\nfrom spirit.core.utils.ratelimit.decorators import ratelimit\nfrom spirit.category.models import Category\nfrom spirit.comment.forms import CommentForm\nfrom spirit.comment.utils import comment_posted\nfrom spirit.comment.models import Comment\nfrom .models import Topic\nfrom .forms import TopicForm\nfrom . import utils\n\n\n@login_required\n@ratelimit(rate='1/10s')\ndef publish(request, category_id=None):\n    if category_id:\n        get_object_or_404(\n            Category.objects.visible(),\n            pk=category_id)\n\n    user = request.user\n    form = TopicForm(\n        user=user,\n        data=post_data(request),\n        initial={'category': category_id})\n    cform = CommentForm(\n        user=user,\n        data=post_data(request))\n    if (is_post(request) and\n            all([form.is_valid(), cform.is_valid()]) and\n            not request.is_limited()):\n        if not user.st.update_post_hash(form.get_topic_hash()):\n            default_url = lambda: form.get_category().get_absolute_url()\n            return safe_redirect(\n                request, 'next', default_url, method='POST')\n        # wrap in transaction.atomic?\n        topic = form.save()\n        cform.topic = topic\n        comment = cform.save()\n        comment_posted(comment=comment, mentions=cform.mentions)\n        return redirect(topic.get_absolute_url())\n    return render(\n        request=request,\n        template_name='spirit/topic/publish.html',\n        context={'form': form, 'cform': cform})\n\n\n@login_required\ndef update(request, pk):\n    topic = Topic.objects.for_update_or_404(pk, request.user)\n    category_id = topic.category_id\n    form = TopicForm(\n        user=request.user,\n        data=post_data(request),\n        instance=topic)\n    if is_post(request) and form.is_valid():\n        topic = form.save()\n        if topic.category_id != category_id:\n            Comment.create_moderation_action(\n                user=request.user, topic=topic, action=Comment.MOVED)\n        return safe_redirect(request,'next', topic.get_absolute_url(), method='POST')\n    return render(\n        request=request,\n        template_name='spirit/topic/update.html',\n        context={'form': form})\n\n\ndef detail(request, pk, slug):\n    topic = Topic.objects.get_public_or_404(pk, request.user)\n\n    if topic.slug != slug:\n        return HttpResponsePermanentRedirect(topic.get_absolute_url())\n\n    utils.topic_viewed(request=request, topic=topic)\n\n    comments = (\n        Comment.objects\n        .for_topic(topic=topic)\n        .with_likes(user=request.user)\n        .with_polls(user=request.user)\n        .order_by('date'))\n\n    comments = paginate(\n        comments,\n        per_page=config.comments_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/detail.html',\n        context={\n            'topic': topic,\n            'comments': comments})\n\n\ndef index_active(request):\n    categories = (\n        Category.objects\n        .visible()\n        .parents()\n        .ordered())\n\n    topics = (\n        Topic.objects\n        .visible()\n        .global_()\n        .with_bookmarks(user=request.user)\n        .order_by('-is_globally_pinned', '-last_active')\n        .select_related('category'))\n\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/active.html',\n        context={\n            'categories': categories,\n            'topics': topics})\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponsePermanentRedirect\n\nfrom djconfig import config\n\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.paginator import paginate, yt_paginate\nfrom spirit.core.utils.ratelimit.decorators import ratelimit\nfrom spirit.category.models import Category\nfrom spirit.comment.forms import CommentForm\nfrom spirit.comment.utils import comment_posted\nfrom spirit.comment.models import Comment\nfrom .models import Topic\nfrom .forms import TopicForm\nfrom . import utils\n\n\n@login_required\n@ratelimit(rate='1/10s')\ndef publish(request, category_id=None):\n    if category_id:\n        get_object_or_404(\n            Category.objects.visible(),\n            pk=category_id)\n\n    user = request.user\n    form = TopicForm(\n        user=user,\n        data=post_data(request),\n        initial={'category': category_id})\n    cform = CommentForm(\n        user=user,\n        data=post_data(request))\n    if (is_post(request) and\n            all([form.is_valid(), cform.is_valid()]) and\n            not request.is_limited()):\n        if not user.st.update_post_hash(form.get_topic_hash()):\n            return redirect(\n                request.POST.get('next', None) or\n                form.get_category().get_absolute_url())\n        # wrap in transaction.atomic?\n        topic = form.save()\n        cform.topic = topic\n        comment = cform.save()\n        comment_posted(comment=comment, mentions=cform.mentions)\n        return redirect(topic.get_absolute_url())\n    return render(\n        request=request,\n        template_name='spirit/topic/publish.html',\n        context={'form': form, 'cform': cform})\n\n\n@login_required\ndef update(request, pk):\n    topic = Topic.objects.for_update_or_404(pk, request.user)\n    category_id = topic.category_id\n    form = TopicForm(\n        user=request.user,\n        data=post_data(request),\n        instance=topic)\n    if is_post(request) and form.is_valid():\n        topic = form.save()\n        if topic.category_id != category_id:\n            Comment.create_moderation_action(\n                user=request.user, topic=topic, action=Comment.MOVED)\n        return redirect(request.POST.get('next', topic.get_absolute_url()))\n    return render(\n        request=request,\n        template_name='spirit/topic/update.html',\n        context={'form': form})\n\n\ndef detail(request, pk, slug):\n    topic = Topic.objects.get_public_or_404(pk, request.user)\n\n    if topic.slug != slug:\n        return HttpResponsePermanentRedirect(topic.get_absolute_url())\n\n    utils.topic_viewed(request=request, topic=topic)\n\n    comments = (\n        Comment.objects\n        .for_topic(topic=topic)\n        .with_likes(user=request.user)\n        .with_polls(user=request.user)\n        .order_by('date'))\n\n    comments = paginate(\n        comments,\n        per_page=config.comments_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/detail.html',\n        context={\n            'topic': topic,\n            'comments': comments})\n\n\ndef index_active(request):\n    categories = (\n        Category.objects\n        .visible()\n        .parents()\n        .ordered())\n\n    topics = (\n        Topic.objects\n        .visible()\n        .global_()\n        .with_bookmarks(user=request.user)\n        .order_by('-is_globally_pinned', '-last_active')\n        .select_related('category'))\n\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/active.html',\n        context={\n            'categories': categories,\n            'topics': topics})\n", "patch": "@@ -6,6 +6,7 @@\n \n from djconfig import config\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data\n from spirit.core.utils.paginator import paginate, yt_paginate\n from spirit.core.utils.ratelimit.decorators import ratelimit\n@@ -38,9 +39,9 @@ def publish(request, category_id=None):\n             all([form.is_valid(), cform.is_valid()]) and\n             not request.is_limited()):\n         if not user.st.update_post_hash(form.get_topic_hash()):\n-            return redirect(\n-                request.POST.get('next', None) or\n-                form.get_category().get_absolute_url())\n+            default_url = lambda: form.get_category().get_absolute_url()\n+            return safe_redirect(\n+                request, 'next', default_url, method='POST')\n         # wrap in transaction.atomic?\n         topic = form.save()\n         cform.topic = topic\n@@ -66,7 +67,7 @@ def update(request, pk):\n         if topic.category_id != category_id:\n             Comment.create_moderation_action(\n                 user=request.user, topic=topic, action=Comment.MOVED)\n-        return redirect(request.POST.get('next', topic.get_absolute_url()))\n+        return safe_redirect(request,'next', topic.get_absolute_url(), method='POST')\n     return render(\n         request=request,\n         template_name='spirit/topic/update.html',", "file_path": "files/2022_3/732", "file_language": "py", "file_name": "spirit/topic/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           69\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           69\u2506 return redirect(request.POST.get('next', topic.get_absolute_url()))"]]}, "target": 1, "function_before": [{"function": "def detail(request, pk, slug):\n    topic = Topic.objects.get_public_or_404(pk, request.user)\n\n    if topic.slug != slug:\n        return HttpResponsePermanentRedirect(topic.get_absolute_url())\n\n    utils.topic_viewed(request=request, topic=topic)\n\n    comments = (\n        Comment.objects\n        .for_topic(topic=topic)\n        .with_likes(user=request.user)\n        .with_polls(user=request.user)\n        .order_by('date'))\n\n    comments = paginate(\n        comments,\n        per_page=config.comments_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/detail.html',\n        context={\n            'topic': topic,\n            'comments': comments})", "target": 0}, {"function": "def index_active(request):\n    categories = (\n        Category.objects\n        .visible()\n        .parents()\n        .ordered())\n\n    topics = (\n        Topic.objects\n        .visible()\n        .global_()\n        .with_bookmarks(user=request.user)\n        .order_by('-is_globally_pinned', '-last_active')\n        .select_related('category'))\n\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/active.html',\n        context={\n            'categories': categories,\n            'topics': topics})", "target": 0}], "function_after": [{"function": "def detail(request, pk, slug):\n    topic = Topic.objects.get_public_or_404(pk, request.user)\n\n    if topic.slug != slug:\n        return HttpResponsePermanentRedirect(topic.get_absolute_url())\n\n    utils.topic_viewed(request=request, topic=topic)\n\n    comments = (\n        Comment.objects\n        .for_topic(topic=topic)\n        .with_likes(user=request.user)\n        .with_polls(user=request.user)\n        .order_by('date'))\n\n    comments = paginate(\n        comments,\n        per_page=config.comments_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/detail.html',\n        context={\n            'topic': topic,\n            'comments': comments})", "target": 0}, {"function": "def index_active(request):\n    categories = (\n        Category.objects\n        .visible()\n        .parents()\n        .ordered())\n\n    topics = (\n        Topic.objects\n        .visible()\n        .global_()\n        .with_bookmarks(user=request.user)\n        .order_by('-is_globally_pinned', '-last_active')\n        .select_related('category'))\n\n    topics = yt_paginate(\n        topics,\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1))\n\n    return render(\n        request=request,\n        template_name='spirit/topic/active.html',\n        context={\n            'categories': categories,\n            'topics': topics})", "target": 0}]}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fuser%2Fadmin%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib.auth import get_user_model\nfrom django.contrib import messages\nfrom django.utils.translation import gettext as _\n\nfrom djconfig import config\n\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.paginator import yt_paginate\nfrom spirit.core.utils.decorators import administrator_required\nfrom .forms import UserForm, UserProfileForm\n\nUser = get_user_model()\n\n\n@administrator_required\ndef edit(request, user_id):\n    user = get_object_or_404(User, pk=user_id)\n    uform = UserForm(data=post_data(request), instance=user)\n    form = UserProfileForm(data=post_data(request), instance=user.st)\n    if is_post(request) and all([uform.is_valid(), form.is_valid()]):\n        uform.save()\n        form.save()\n        messages.info(request, _(\"This profile has been updated!\"))\n        return safe_redirect(request, \"next\", request.get_full_path())\n    return render(\n        request=request,\n        template_name='spirit/user/admin/edit.html',\n        context={'form': form, 'uform': uform})\n\n\n@administrator_required\ndef _index(request, queryset, template):\n    users = yt_paginate(\n        queryset.order_by('-date_joined', '-pk'),\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n    return render(request, template, context={'users': users})\n\n\ndef index(request):\n    return _index(\n        request,\n        queryset=User.objects.all(),\n        template='spirit/user/admin/index.html'\n    )\n\n\ndef index_admins(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_administrator=True),\n        template='spirit/user/admin/admins.html'\n    )\n\n\ndef index_mods(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_moderator=True, st__is_administrator=False),\n        template='spirit/user/admin/mods.html'\n    )\n\n\ndef index_unactive(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(is_active=False),\n        template='spirit/user/admin/unactive.html'\n    )\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth import get_user_model\nfrom django.contrib import messages\nfrom django.utils.translation import gettext as _\n\nfrom djconfig import config\n\nfrom ...core.utils.views import is_post, post_data\nfrom ...core.utils.paginator import yt_paginate\nfrom ...core.utils.decorators import administrator_required\nfrom .forms import UserForm, UserProfileForm\n\nUser = get_user_model()\n\n\n@administrator_required\ndef edit(request, user_id):\n    user = get_object_or_404(User, pk=user_id)\n    uform = UserForm(data=post_data(request), instance=user)\n    form = UserProfileForm(data=post_data(request), instance=user.st)\n    if is_post(request) and all([uform.is_valid(), form.is_valid()]):\n        uform.save()\n        form.save()\n        messages.info(request, _(\"This profile has been updated!\"))\n        return redirect(request.GET.get(\"next\", request.get_full_path()))\n    return render(\n        request=request,\n        template_name='spirit/user/admin/edit.html',\n        context={'form': form, 'uform': uform})\n\n\n@administrator_required\ndef _index(request, queryset, template):\n    users = yt_paginate(\n        queryset.order_by('-date_joined', '-pk'),\n        per_page=config.topics_per_page,\n        page_number=request.GET.get('page', 1)\n    )\n    return render(request, template, context={'users': users})\n\n\ndef index(request):\n    return _index(\n        request,\n        queryset=User.objects.all(),\n        template='spirit/user/admin/index.html'\n    )\n\n\ndef index_admins(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_administrator=True),\n        template='spirit/user/admin/admins.html'\n    )\n\n\ndef index_mods(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_moderator=True, st__is_administrator=False),\n        template='spirit/user/admin/mods.html'\n    )\n\n\ndef index_unactive(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(is_active=False),\n        template='spirit/user/admin/unactive.html'\n    )\n", "patch": "@@ -1,15 +1,16 @@\n # -*- coding: utf-8 -*-\n \n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.contrib.auth import get_user_model\n from django.contrib import messages\n from django.utils.translation import gettext as _\n \n from djconfig import config\n \n-from ...core.utils.views import is_post, post_data\n-from ...core.utils.paginator import yt_paginate\n-from ...core.utils.decorators import administrator_required\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core.utils.views import is_post, post_data\n+from spirit.core.utils.paginator import yt_paginate\n+from spirit.core.utils.decorators import administrator_required\n from .forms import UserForm, UserProfileForm\n \n User = get_user_model()\n@@ -24,7 +25,7 @@ def edit(request, user_id):\n         uform.save()\n         form.save()\n         messages.info(request, _(\"This profile has been updated!\"))\n-        return redirect(request.GET.get(\"next\", request.get_full_path()))\n+        return safe_redirect(request, \"next\", request.get_full_path())\n     return render(\n         request=request,\n         template_name='spirit/user/admin/edit.html',", "file_path": "files/2022_3/733", "file_language": "py", "file_name": "spirit/user/admin/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n           27\u2506 return redirect(request.GET.get(\"next\", request.get_full_path()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           27\u2506 return redirect(request.GET.get(\"next\", request.get_full_path()))"]]}, "target": 1, "function_before": [{"function": "def index(request):\n    return _index(\n        request,\n        queryset=User.objects.all(),\n        template='spirit/user/admin/index.html'\n    )", "target": 0}, {"function": "def index_admins(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_administrator=True),\n        template='spirit/user/admin/admins.html'\n    )", "target": 0}, {"function": "def index_mods(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_moderator=True, st__is_administrator=False),\n        template='spirit/user/admin/mods.html'\n    )", "target": 0}, {"function": "def index_unactive(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(is_active=False),\n        template='spirit/user/admin/unactive.html'\n    )", "target": 0}], "function_after": [{"function": "def index(request):\n    return _index(\n        request,\n        queryset=User.objects.all(),\n        template='spirit/user/admin/index.html'\n    )", "target": 0}, {"function": "def index_admins(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_administrator=True),\n        template='spirit/user/admin/admins.html'\n    )", "target": 0}, {"function": "def index_mods(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(st__is_moderator=True, st__is_administrator=False),\n        template='spirit/user/admin/mods.html'\n    )", "target": 0}, {"function": "def index_unactive(request):\n    return _index(\n        request,\n        queryset=User.objects.filter(is_active=False),\n        template='spirit/user/admin/unactive.html'\n    )", "target": 0}]}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fuser%2Fauth%2Ftests%2Ftests.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom django.contrib.auth import get_user_model\nfrom django.core import mail\nfrom django.utils.translation import gettext as _\nfrom django.test.utils import override_settings\nfrom django.urls import NoReverseMatch\n\nfrom spirit.core.tests import utils\nfrom ..forms import RegistrationForm, ResendActivationForm, LoginForm\nfrom ..backends import EmailAuthBackend, UsernameAuthBackend\nfrom ...utils.tokens import UserActivationTokenGenerator\nfrom ...models import UserProfile\nfrom .urls import CustomRegisterForm\n\nUser = get_user_model()\n\n\nclass UserViewTest(TestCase):\n\n    def setUp(self):\n        utils.cache_clear()\n        self.user = utils.create_user()\n        self.user2 = utils.create_user()\n        self.category = utils.create_category()\n        self.topic = utils.create_topic(self.category, user=self.user2)\n        self.topic2 = utils.create_topic(self.category)\n\n    def test_login_email(self):\n        \"\"\"\n        try to login by email\n        \"\"\"\n        # get\n        response = self.client.get(reverse('spirit:user:auth:login'))\n        self.assertEqual(response.status_code, 200)\n\n        # post\n        form_data = {'username': self.user.email, 'password': \"bar\"}\n        response = self.client.post(reverse('spirit:user:auth:login'),\n                                    form_data)\n        expected_url = reverse('spirit:user:update')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    def test_login_redirect(self):\n        \"\"\"\n        try to login with a logged in user\n        \"\"\"\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:login'))\n        expected_url = self.user.st.get_absolute_url()\n        self.assertRedirects(response, expected_url, status_code=302)\n        # next\n        response = self.client.get(reverse('spirit:user:auth:login') + '?next=/fakepath/')\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n\n    def test_login_open_redirect(self):\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:login') + '?next=https%3A%2F%2Fevil.com')\n        self.assertRedirects(response, '/', status_code=302)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_login_email_case_insensitive(self):\n        \"\"\"\n        try to login by email\n        \"\"\"\n        self.assertNotEqual(\n            self.user.email, self.user.email.upper())\n        form_data = {\n            'username': self.user.email.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        expected_url = reverse('spirit:user:update')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_login_email_case_insensitive_off(self):\n        \"\"\"\n        try to login by email\n        \"\"\"\n        self.assertNotEqual(\n            self.user.email, self.user.email.upper())\n        form_data = {\n            'username': self.user.email.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        self.assertEqual(response.status_code, 200)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=True)\n    def test_login_username_case_insensitive(self):\n        self.assertNotEqual(\n            self.user.username, self.user.username.upper())\n        form_data = {\n            'username': self.user.username.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        expected_url = reverse('spirit:user:update')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=False)\n    def test_login_username_case_insensitive_off(self):\n        self.assertNotEqual(\n            self.user.username, self.user.username.upper())\n        form_data = {\n            'username': self.user.username.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        self.assertEqual(response.status_code, 200)\n\n    def test_register(self):\n        \"\"\"\n        register\n        \"\"\"\n        # get\n        response = self.client.get(reverse('spirit:user:auth:register'))\n        self.assertEqual(response.status_code, 200)\n\n        # post\n        form_data = {'username': 'uniquefoo', 'email': 'some@some.com',\n                     'email2': 'some@some.com', 'password': 'pass'}\n        response = self.client.post(reverse('spirit:user:auth:register'),\n                                    form_data)\n        expected_url = reverse('spirit:user:auth:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n        # redirect logged in user\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:register'))\n        self.assertRedirects(response, reverse('spirit:user:update'), status_code=302)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=True)\n    def test_register_username_case_insensitive(self):\n        form_data = {\n            'username': 'UnIqUeFoO',\n            'email': 'some@some.com',\n            'email2': 'some@some.com',\n            'password': 'pass'}\n        response = self.client.post(\n            reverse('spirit:user:auth:register'), form_data)\n        expected_url = reverse('spirit:user:auth:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertTrue(\n            User.objects.filter(username='uniquefoo').exists())\n        self.assertFalse(\n            User.objects.filter(username='UnIqUeFoO').exists())\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=False)\n    def test_register_username_case_insensitive_off(self):\n        form_data = {\n            'username': 'UnIqUeFoO',\n            'email': 'some@some.com',\n            'email2': 'some@some.com',\n            'password': 'pass'}\n        response = self.client.post(\n            reverse('spirit:user:auth:register'), form_data)\n        expected_url = reverse('spirit:user:auth:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertFalse(\n            User.objects.filter(username='uniquefoo').exists())\n        self.assertTrue(\n            User.objects.filter(username='UnIqUeFoO').exists())\n\n    @utils.immediate_on_commit\n    def test_register_email_sent(self):\n        \"\"\"\n        register and send activation email\n        \"\"\"\n        form_data = {'username': 'uniquefoo', 'email': 'some@some.com',\n                     'email2': 'some@some.com', 'password': 'pass'}\n        response = self.client.post(reverse('spirit:user:auth:register'), form_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, _(\"User activation\"))\n\n    def test_register_next_logged_in(self):\n        \"\"\"\n        redirect next on register\n        \"\"\"\n        # redirect logged in user\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:register') + \"?next=/fakepath/\")\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n\n    @override_settings(ROOT_URLCONF='spirit.user.auth.tests.urls')\n    def test_register_custom_form(self):\n        \"\"\"\n        Should allow a custom form\n        \"\"\"\n        response = self.client.get(reverse('spirit:user:auth:register'))\n        self.assertIsInstance(response.context['form'], CustomRegisterForm)\n\n        response = self.client.post(reverse('spirit:user:auth:register'), {})\n        self.assertIsInstance(response.context['form'], CustomRegisterForm)\n\n    @override_settings(ST_TESTS_RATELIMIT_NEVER_EXPIRE=True)\n    def test_login_rate_limit(self):\n        \"\"\"\n        test rate limit 5/5m\n        \"\"\"\n        form_data = {'username': self.user.email, 'password': \"badpassword\"}\n\n        for attempt in range(5):\n            url = reverse('spirit:user:auth:login')\n            response = self.client.post(url, form_data)\n            self.assertTemplateUsed(response, 'spirit/user/auth/login.html')\n\n        url = reverse('spirit:user:auth:login') + \"?next=/path/\"\n        response = self.client.post(url, form_data)\n        self.assertRedirects(response, url, status_code=302)\n\n    @override_settings(ST_TESTS_RATELIMIT_NEVER_EXPIRE=True)\n    def test_custom_reset_password(self):\n        \"\"\"\n        test rate limit 5/5m\n        \"\"\"\n        form_data = {'email': \"bademail@bad.com\", }\n\n        for attempt in range(5):\n            response = self.client.post(reverse('spirit:user:auth:password-reset'), form_data)\n            expected_url = reverse(\"spirit:user:auth:password-reset-done\")\n            self.assertRedirects(response, expected_url, status_code=302)\n\n        response = self.client.post(reverse('spirit:user:auth:password-reset'), form_data)\n        expected_url = reverse(\"spirit:user:auth:password-reset\")\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    @utils.immediate_on_commit\n    def test_custom_reset_password_email(self):\n        self.assertEqual(len(mail.outbox), 0)\n        form_data = {'email': self.user.email}\n        response = self.client.post(\n            reverse('spirit:user:auth:password-reset'), form_data)\n        expected_url = reverse(\"spirit:user:auth:password-reset-done\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertIn(\"Password reset on\", mail.outbox[0].subject)\n        self.assertIn(\"you requested a password reset\", mail.outbox[0].body)\n        self.assertEqual(mail.outbox[0].to, [self.user.email])\n\n    def test_password_reset_confirm(self):\n        \"\"\"\n        test access\n        \"\"\"\n        response = self.client.get(\n            reverse(\n                'spirit:user:auth:password-reset-confirm',\n                kwargs={'uidb64': 'f-a-k-e', 'token': 'f-a-k-e'}\n            )\n        )\n        self.assertEqual(response.status_code, 200)\n\n    def test_admin_login(self):\n        \"\"\"\n        Redirect to regular user login (optional)\n        make sure you added:\n        admin.site.login = login_required(admin.site.login)\n        to urls.py (the one in your project's root)\n        \"\"\"\n        # TODO: document that devs should be doing this.\n        try:\n            url = reverse('admin:login')\n        except NoReverseMatch:\n            return\n\n        response = self.client.get(url)\n        expected_url = reverse(\"spirit:user:auth:login\") + \"?next=\" + reverse('admin:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    def test_registration_activation(self):\n        \"\"\"\n        registration activation\n        \"\"\"\n        self.user.st.is_verified = False\n        self.user.is_active = False\n        self.user.save()\n        token = UserActivationTokenGenerator().generate(self.user)\n        response = self.client.get(\n            reverse(\n                'spirit:user:auth:registration-activation',\n                kwargs={'pk': self.user.pk, 'token': token}\n            )\n        )\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertTrue(User.objects.get(pk=self.user.pk).is_active)\n\n    def test_registration_activation_invalid(self):\n        \"\"\"\n        Activation token should not work if user is verified\n        ActiveUserMiddleware required\n        \"\"\"\n        self.user.st.is_verified = False\n        token = UserActivationTokenGenerator().generate(self.user)\n\n        utils.login(self)\n        User.objects.filter(pk=self.user.pk).update(is_active=False)\n        UserProfile.objects.filter(user__pk=self.user.pk).update(is_verified=True)\n        response = self.client.get(\n            reverse(\n                'spirit:user:auth:registration-activation',\n                kwargs={'pk': self.user.pk, 'token': token}\n            )\n        )\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertFalse(User.objects.get(pk=self.user.pk).is_active)\n\n    @utils.immediate_on_commit\n    def test_resend_activation_email(self):\n        \"\"\"\n        resend_activation_email\n        \"\"\"\n        user = utils.create_user(password=\"foo\")\n\n        form_data = {'email': user.email,\n                     'password': \"foo\"}\n        response = self.client.post(reverse('spirit:user:auth:resend-activation'),\n                                    form_data)\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, _(\"User activation\"))\n\n        # get\n        response = self.client.get(reverse('spirit:user:auth:resend-activation'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_resend_activation_email_invalid_previously_logged_in(self):\n        \"\"\"\n        resend_activation_email invalid if is_verified was set\n        \"\"\"\n        user = utils.create_user(password=\"foo\")\n        user.st.is_verified = True\n        user.st.save()\n\n        form_data = {'email': user.email,\n                     'password': \"foo\"}\n        response = self.client.post(reverse('spirit:user:auth:resend-activation'),\n                                    form_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(len(mail.outbox), 0)\n\n    def test_resend_activation_email_invalid_email(self):\n        \"\"\"\n        resend_activation_email invalid password\n        \"\"\"\n        utils.create_user(password=\"foo\")\n\n        form_data = {'email': \"bad@foo.com\", }\n        response = self.client.post(reverse('spirit:user:auth:resend-activation'),\n                                    form_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(len(mail.outbox), 0)\n\n    def test_resend_activation_email_redirect_logged(self):\n        \"\"\"\n        resend_activation_email redirect to profile if user is logged in\n        \"\"\"\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:resend-activation'))\n        expected_url = reverse(\"spirit:user:update\")\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    def test_logout(self):\n        \"\"\"\n        should log out on POST only\n        \"\"\"\n        utils.login(self)\n\n        # get should display confirmation message\n        response = self.client.get(reverse('spirit:user:auth:logout'))\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(self.client.session.items())\n\n        # post should log out the user (clear the session)\n        response = self.client.post(reverse('spirit:user:auth:logout'))\n        expected_url = \"/\"\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertFalse(self.client.session.items())\n\n        # next\n        utils.login(self)\n        self.assertTrue(self.client.session.items())\n        response = self.client.post(reverse('spirit:user:auth:logout') + '?next=/fakepath/')\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n        self.assertFalse(self.client.session.items())\n\n    def test_logout_anonymous_redirect(self):\n        \"\"\"\n        should log out on POST only\n        \"\"\"\n        # redirect to login if user is anonymous\n        response = self.client.get(reverse('spirit:user:auth:logout'))\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n\n        # next if user is anonymous\n        response = self.client.get(reverse('spirit:user:auth:logout') + '?next=/fakepath/')\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n\n\nclass UserFormTest(TestCase):\n\n    def setUp(self):\n        utils.cache_clear()\n        self.user = utils.create_user()\n\n    def test_registration(self):\n        \"\"\"\n        register\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n    def test_registration_login(self):\n        \"\"\"\n        Register and login\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n        user = form.save()\n        self.assertFalse(user.is_active)\n\n        user.is_active = True\n        user.save()\n        utils.login(self, user=user, password='pass')  # Asserts if can't login\n\n    def test_registration_email_required(self):\n        \"\"\"\n        Registration should require the email field\n        \"\"\"\n        form_data = {'username': 'foo',\n                     'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertIn('email', form.errors)\n\n    def test_registration_invalid(self):\n        \"\"\"\n        invalid email and user\n        \"\"\"\n        User.objects.create_user(username=\"foo\", password=\"bar\", email=\"foo@foo.com\")\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('username', form.cleaned_data)\n        self.assertNotIn('foo@foo.com', form.cleaned_data)\n\n    def test_registration_honeypot(self):\n        \"\"\"\n        registration honeypot\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass',\n                     'honeypot': 'im a robot'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('honeypot', form.cleaned_data)\n\n    def test_registration_email_duplication(self):\n        \"\"\"\n        register, don't allow email duplication\n        \"\"\"\n        utils.create_user(email='duplicated@bar.com')\n        form_data = {'username': 'foo', 'email': 'duplicated@bar.com',\n                     'email2': 'duplicated@bar.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('email', form.cleaned_data)\n\n    @override_settings(ST_UNIQUE_EMAILS=False)\n    def test_registration_email_duplication_allowed(self):\n        \"\"\"\n        Duplicated email allowed\n        \"\"\"\n        utils.create_user(email='duplicated@bar.com')\n        form_data = {'username': 'foo', 'email': 'duplicated@bar.com',\n                     'email2': 'duplicated@bar.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n    def test_registration_email_confirmation(self):\n        \"\"\"\n        Confirmation email should match email\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@bar.com',\n                     'email2': 'foofoo@bar.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('email2', form.cleaned_data)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_registration_email_confirmation_case_insensitive(self):\n        \"\"\"\n        Confirmation email should match email\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'FOO@bar.com',\n                     'email2': 'FOO@BAR.COM', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_registration_email_confirmation_case_sensitive(self):\n        \"\"\"\n        Confirmation email should match email\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'FOO@bar.com',\n                     'email2': 'FOO@BAR.COM', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('email2', form.cleaned_data)\n\n    def test_resend_activation_email(self):\n        \"\"\"\n        resend activation\n        \"\"\"\n        user = utils.create_user(email=\"newfoo@bar.com\")\n        form_data = {'email': 'newfoo@bar.com', }\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user)\n\n    def test_resend_activation_email_invalid_email(self):\n        \"\"\"\n        resend activation invalid\n        \"\"\"\n        form_data = {'email': 'bad@bar.com', }\n        form = ResendActivationForm(form_data)\n        self.assertFalse(form.is_valid())\n\n    def test_resend_activation_email_duplication(self):\n        \"\"\"\n        Send email to the first *not verified* user found\n        \"\"\"\n        utils.create_user(email=\"duplicated@bar.com\")\n        user2 = utils.create_user(email=\"duplicated@bar.com\")\n        user3 = utils.create_user(email=\"duplicated@bar.com\")\n        form_data = {'email': 'duplicated@bar.com', }\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user3)\n\n        user3.st.is_verified = True\n        user3.st.save()\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user2)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_resend_activation_email_case_insensitive(self):\n        \"\"\"\n        Should lower the email before checking it\n        \"\"\"\n        user = utils.create_user(email=\"newfoo@bar.com\")\n        form_data = {'email': 'NeWfOO@bAr.COM', }\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_resend_activation_email_case_sensitive(self):\n        \"\"\"\n        Should NOT lower the email before checking it\n        \"\"\"\n        utils.create_user(email=\"newfoo@bar.com\")\n        form_data = {'email': 'NeWfOO@bAr.COM', }\n        form = ResendActivationForm(form_data)\n        self.assertFalse(form.is_valid())\n        self.assertRaises(AttributeError, form.get_user)\n\n    def test_login(self):\n        \"\"\"\n        Should login the user\n        \"\"\"\n        utils.create_user(username=\"foobar\", password=\"foo\")\n        form_data = {'username': \"foobar\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertTrue(form.is_valid())\n\n    def test_login_email(self):\n        \"\"\"\n        Should login the user by email\n        \"\"\"\n        utils.create_user(email=\"foobar@bar.com\", password=\"foo\")\n        form_data = {'username': \"foobar@bar.com\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertTrue(form.is_valid())\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_login_email_case_sensitive(self):\n        \"\"\"\n        Should login the user by email\n        \"\"\"\n        utils.create_user(email=\"foobar@bar.com\", password=\"foo\")\n        form_data = {'username': \"FOOBAR@bar.com\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_login_email_case_sensitive(self):\n        \"\"\"\n        Should login the user by email\n        \"\"\"\n        utils.create_user(email=\"foobar@bar.com\", password=\"foo\")\n        form_data = {'username': \"FOOBAR@bar.com\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertTrue(form.is_valid())\n\n    def test_login_invalid(self):\n        \"\"\"\n        Should not login invalid user\n        \"\"\"\n        form = LoginForm(data={})\n        self.assertFalse(form.is_valid())\n\n    def test_login_password_invalid(self):\n        \"\"\"\n        Should not login invalid user\n        \"\"\"\n        utils.create_user(username=\"foobar\", password=\"foo\")\n        form_data = {'username': \"foobar\", 'password': \"bad\"}\n        form = LoginForm(data=form_data)\n        self.assertFalse(form.is_valid())\n\n    def test_login_username_invalid(self):\n        \"\"\"\n        Should not login invalid user\n        \"\"\"\n        utils.create_user(username=\"foobar\", password=\"foo\")\n        form_data = {'username': \"bad\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertFalse(form.is_valid())\n\n\nclass UserBackendTest(TestCase):\n\n    def setUp(self):\n        utils.cache_clear()\n        self.user = utils.create_user(\n            email=\"foobar@bar.com\",\n            password=\"bar\")\n\n    def test_email_auth_backend(self):\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"foobar@bar.com\", password=\"bar\")\n        self.assertEqual(user, self.user)\n\n    def test_email_auth_backend_email_duplication(self):\n        \"\"\"\n        it should NOT authenticate when the email is not unique (current behaviour, sorry)\n        \"\"\"\n        utils.create_user(email=\"duplicated@bar.com\", password=\"foo\")\n        utils.create_user(email=\"duplicated@bar.com\", password=\"foo2\")\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"duplicated@bar.com\", password=\"foo\")\n        self.assertIsNone(user)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_email_auth_backend_case_insensitive(self):\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"FooBar@bAr.COM\", password=\"bar\")\n        self.assertEqual(user, self.user)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_email_auth_backend_case_sensitive(self):\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"FooBar@bAr.COM\", password=\"bar\")\n        self.assertIsNone(user)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=True)\n    def test_username_auth_backend_case_sensitive(self):\n        usr = utils.create_user(\n            username=\"FooBar\",\n            password=\"bar\")\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"FooBar\", password=\"bar\")\n        self.assertEqual(user.pk, usr.pk)\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"foobar\", password=\"bar\")\n        self.assertEqual(user.pk, usr.pk)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=False)\n    def test_username_auth_backend_case_sensitive_off(self):\n        usr = utils.create_user(\n            username=\"FooBar\",\n            password=\"bar\")\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"FooBar\", password=\"bar\")\n        self.assertEqual(user.pk, usr.pk)\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"foobar\", password=\"bar\")\n        self.assertIsNone(user)\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom django.contrib.auth import get_user_model\nfrom django.core import mail\nfrom django.utils.translation import gettext as _\nfrom django.test.utils import override_settings\nfrom django.urls import NoReverseMatch\n\nfrom spirit.core.tests import utils\nfrom ..forms import RegistrationForm, ResendActivationForm, LoginForm\nfrom ..backends import EmailAuthBackend, UsernameAuthBackend\nfrom ...utils.tokens import UserActivationTokenGenerator\nfrom ...models import UserProfile\nfrom .urls import CustomRegisterForm\n\nUser = get_user_model()\n\n\nclass UserViewTest(TestCase):\n\n    def setUp(self):\n        utils.cache_clear()\n        self.user = utils.create_user()\n        self.user2 = utils.create_user()\n        self.category = utils.create_category()\n        self.topic = utils.create_topic(self.category, user=self.user2)\n        self.topic2 = utils.create_topic(self.category)\n\n    def test_login_email(self):\n        \"\"\"\n        try to login by email\n        \"\"\"\n        # get\n        response = self.client.get(reverse('spirit:user:auth:login'))\n        self.assertEqual(response.status_code, 200)\n\n        # post\n        form_data = {'username': self.user.email, 'password': \"bar\"}\n        response = self.client.post(reverse('spirit:user:auth:login'),\n                                    form_data)\n        expected_url = reverse('spirit:user:update')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    def test_login_redirect(self):\n        \"\"\"\n        try to login with a logged in user\n        \"\"\"\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:login'))\n        expected_url = self.user.st.get_absolute_url()\n        self.assertRedirects(response, expected_url, status_code=302)\n        # next\n        response = self.client.get(reverse('spirit:user:auth:login') + '?next=/fakepath/')\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_login_email_case_insensitive(self):\n        \"\"\"\n        try to login by email\n        \"\"\"\n        self.assertNotEqual(\n            self.user.email, self.user.email.upper())\n        form_data = {\n            'username': self.user.email.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        expected_url = reverse('spirit:user:update')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_login_email_case_insensitive_off(self):\n        \"\"\"\n        try to login by email\n        \"\"\"\n        self.assertNotEqual(\n            self.user.email, self.user.email.upper())\n        form_data = {\n            'username': self.user.email.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        self.assertEqual(response.status_code, 200)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=True)\n    def test_login_username_case_insensitive(self):\n        self.assertNotEqual(\n            self.user.username, self.user.username.upper())\n        form_data = {\n            'username': self.user.username.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        expected_url = reverse('spirit:user:update')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=False)\n    def test_login_username_case_insensitive_off(self):\n        self.assertNotEqual(\n            self.user.username, self.user.username.upper())\n        form_data = {\n            'username': self.user.username.upper(),\n            'password': \"bar\"}\n        response = self.client.post(\n            reverse('spirit:user:auth:login'), form_data)\n        self.assertEqual(response.status_code, 200)\n\n    def test_register(self):\n        \"\"\"\n        register\n        \"\"\"\n        # get\n        response = self.client.get(reverse('spirit:user:auth:register'))\n        self.assertEqual(response.status_code, 200)\n\n        # post\n        form_data = {'username': 'uniquefoo', 'email': 'some@some.com',\n                     'email2': 'some@some.com', 'password': 'pass'}\n        response = self.client.post(reverse('spirit:user:auth:register'),\n                                    form_data)\n        expected_url = reverse('spirit:user:auth:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n        # redirect logged in user\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:register'))\n        self.assertRedirects(response, reverse('spirit:user:update'), status_code=302)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=True)\n    def test_register_username_case_insensitive(self):\n        form_data = {\n            'username': 'UnIqUeFoO',\n            'email': 'some@some.com',\n            'email2': 'some@some.com',\n            'password': 'pass'}\n        response = self.client.post(\n            reverse('spirit:user:auth:register'), form_data)\n        expected_url = reverse('spirit:user:auth:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertTrue(\n            User.objects.filter(username='uniquefoo').exists())\n        self.assertFalse(\n            User.objects.filter(username='UnIqUeFoO').exists())\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=False)\n    def test_register_username_case_insensitive_off(self):\n        form_data = {\n            'username': 'UnIqUeFoO',\n            'email': 'some@some.com',\n            'email2': 'some@some.com',\n            'password': 'pass'}\n        response = self.client.post(\n            reverse('spirit:user:auth:register'), form_data)\n        expected_url = reverse('spirit:user:auth:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertFalse(\n            User.objects.filter(username='uniquefoo').exists())\n        self.assertTrue(\n            User.objects.filter(username='UnIqUeFoO').exists())\n\n    @utils.immediate_on_commit\n    def test_register_email_sent(self):\n        \"\"\"\n        register and send activation email\n        \"\"\"\n        form_data = {'username': 'uniquefoo', 'email': 'some@some.com',\n                     'email2': 'some@some.com', 'password': 'pass'}\n        response = self.client.post(reverse('spirit:user:auth:register'), form_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, _(\"User activation\"))\n\n    def test_register_next_logged_in(self):\n        \"\"\"\n        redirect next on register\n        \"\"\"\n        # redirect logged in user\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:register') + \"?next=/fakepath/\")\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n\n    @override_settings(ROOT_URLCONF='spirit.user.auth.tests.urls')\n    def test_register_custom_form(self):\n        \"\"\"\n        Should allow a custom form\n        \"\"\"\n        response = self.client.get(reverse('spirit:user:auth:register'))\n        self.assertIsInstance(response.context['form'], CustomRegisterForm)\n\n        response = self.client.post(reverse('spirit:user:auth:register'), {})\n        self.assertIsInstance(response.context['form'], CustomRegisterForm)\n\n    @override_settings(ST_TESTS_RATELIMIT_NEVER_EXPIRE=True)\n    def test_login_rate_limit(self):\n        \"\"\"\n        test rate limit 5/5m\n        \"\"\"\n        form_data = {'username': self.user.email, 'password': \"badpassword\"}\n\n        for attempt in range(5):\n            url = reverse('spirit:user:auth:login')\n            response = self.client.post(url, form_data)\n            self.assertTemplateUsed(response, 'spirit/user/auth/login.html')\n\n        url = reverse('spirit:user:auth:login') + \"?next=/path/\"\n        response = self.client.post(url, form_data)\n        self.assertRedirects(response, url, status_code=302)\n\n    @override_settings(ST_TESTS_RATELIMIT_NEVER_EXPIRE=True)\n    def test_custom_reset_password(self):\n        \"\"\"\n        test rate limit 5/5m\n        \"\"\"\n        form_data = {'email': \"bademail@bad.com\", }\n\n        for attempt in range(5):\n            response = self.client.post(reverse('spirit:user:auth:password-reset'), form_data)\n            expected_url = reverse(\"spirit:user:auth:password-reset-done\")\n            self.assertRedirects(response, expected_url, status_code=302)\n\n        response = self.client.post(reverse('spirit:user:auth:password-reset'), form_data)\n        expected_url = reverse(\"spirit:user:auth:password-reset\")\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    @utils.immediate_on_commit\n    def test_custom_reset_password_email(self):\n        self.assertEqual(len(mail.outbox), 0)\n        form_data = {'email': self.user.email}\n        response = self.client.post(\n            reverse('spirit:user:auth:password-reset'), form_data)\n        expected_url = reverse(\"spirit:user:auth:password-reset-done\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertIn(\"Password reset on\", mail.outbox[0].subject)\n        self.assertIn(\"you requested a password reset\", mail.outbox[0].body)\n        self.assertEqual(mail.outbox[0].to, [self.user.email])\n\n    def test_password_reset_confirm(self):\n        \"\"\"\n        test access\n        \"\"\"\n        response = self.client.get(\n            reverse(\n                'spirit:user:auth:password-reset-confirm',\n                kwargs={'uidb64': 'f-a-k-e', 'token': 'f-a-k-e'}\n            )\n        )\n        self.assertEqual(response.status_code, 200)\n\n    def test_admin_login(self):\n        \"\"\"\n        Redirect to regular user login (optional)\n        make sure you added:\n        admin.site.login = login_required(admin.site.login)\n        to urls.py (the one in your project's root)\n        \"\"\"\n        # TODO: document that devs should be doing this.\n        try:\n            url = reverse('admin:login')\n        except NoReverseMatch:\n            return\n\n        response = self.client.get(url)\n        expected_url = reverse(\"spirit:user:auth:login\") + \"?next=\" + reverse('admin:login')\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    def test_registration_activation(self):\n        \"\"\"\n        registration activation\n        \"\"\"\n        self.user.st.is_verified = False\n        self.user.is_active = False\n        self.user.save()\n        token = UserActivationTokenGenerator().generate(self.user)\n        response = self.client.get(\n            reverse(\n                'spirit:user:auth:registration-activation',\n                kwargs={'pk': self.user.pk, 'token': token}\n            )\n        )\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertTrue(User.objects.get(pk=self.user.pk).is_active)\n\n    def test_registration_activation_invalid(self):\n        \"\"\"\n        Activation token should not work if user is verified\n        ActiveUserMiddleware required\n        \"\"\"\n        self.user.st.is_verified = False\n        token = UserActivationTokenGenerator().generate(self.user)\n\n        utils.login(self)\n        User.objects.filter(pk=self.user.pk).update(is_active=False)\n        UserProfile.objects.filter(user__pk=self.user.pk).update(is_verified=True)\n        response = self.client.get(\n            reverse(\n                'spirit:user:auth:registration-activation',\n                kwargs={'pk': self.user.pk, 'token': token}\n            )\n        )\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertFalse(User.objects.get(pk=self.user.pk).is_active)\n\n    @utils.immediate_on_commit\n    def test_resend_activation_email(self):\n        \"\"\"\n        resend_activation_email\n        \"\"\"\n        user = utils.create_user(password=\"foo\")\n\n        form_data = {'email': user.email,\n                     'password': \"foo\"}\n        response = self.client.post(reverse('spirit:user:auth:resend-activation'),\n                                    form_data)\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, _(\"User activation\"))\n\n        # get\n        response = self.client.get(reverse('spirit:user:auth:resend-activation'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_resend_activation_email_invalid_previously_logged_in(self):\n        \"\"\"\n        resend_activation_email invalid if is_verified was set\n        \"\"\"\n        user = utils.create_user(password=\"foo\")\n        user.st.is_verified = True\n        user.st.save()\n\n        form_data = {'email': user.email,\n                     'password': \"foo\"}\n        response = self.client.post(reverse('spirit:user:auth:resend-activation'),\n                                    form_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(len(mail.outbox), 0)\n\n    def test_resend_activation_email_invalid_email(self):\n        \"\"\"\n        resend_activation_email invalid password\n        \"\"\"\n        utils.create_user(password=\"foo\")\n\n        form_data = {'email': \"bad@foo.com\", }\n        response = self.client.post(reverse('spirit:user:auth:resend-activation'),\n                                    form_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(len(mail.outbox), 0)\n\n    def test_resend_activation_email_redirect_logged(self):\n        \"\"\"\n        resend_activation_email redirect to profile if user is logged in\n        \"\"\"\n        utils.login(self)\n        response = self.client.get(reverse('spirit:user:auth:resend-activation'))\n        expected_url = reverse(\"spirit:user:update\")\n        self.assertRedirects(response, expected_url, status_code=302)\n\n    def test_logout(self):\n        \"\"\"\n        should log out on POST only\n        \"\"\"\n        utils.login(self)\n\n        # get should display confirmation message\n        response = self.client.get(reverse('spirit:user:auth:logout'))\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(self.client.session.items())\n\n        # post should log out the user (clear the session)\n        response = self.client.post(reverse('spirit:user:auth:logout'))\n        expected_url = \"/\"\n        self.assertRedirects(response, expected_url, status_code=302)\n        self.assertFalse(self.client.session.items())\n\n        # next\n        utils.login(self)\n        self.assertTrue(self.client.session.items())\n        response = self.client.post(reverse('spirit:user:auth:logout') + '?next=/fakepath/')\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n        self.assertFalse(self.client.session.items())\n\n    def test_logout_anonymous_redirect(self):\n        \"\"\"\n        should log out on POST only\n        \"\"\"\n        # redirect to login if user is anonymous\n        response = self.client.get(reverse('spirit:user:auth:logout'))\n        expected_url = reverse(\"spirit:user:auth:login\")\n        self.assertRedirects(response, expected_url, status_code=302)\n\n        # next if user is anonymous\n        response = self.client.get(reverse('spirit:user:auth:logout') + '?next=/fakepath/')\n        self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n\n\nclass UserFormTest(TestCase):\n\n    def setUp(self):\n        utils.cache_clear()\n        self.user = utils.create_user()\n\n    def test_registration(self):\n        \"\"\"\n        register\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n    def test_registration_login(self):\n        \"\"\"\n        Register and login\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n        user = form.save()\n        self.assertFalse(user.is_active)\n\n        user.is_active = True\n        user.save()\n        utils.login(self, user=user, password='pass')  # Asserts if can't login\n\n    def test_registration_email_required(self):\n        \"\"\"\n        Registration should require the email field\n        \"\"\"\n        form_data = {'username': 'foo',\n                     'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertIn('email', form.errors)\n\n    def test_registration_invalid(self):\n        \"\"\"\n        invalid email and user\n        \"\"\"\n        User.objects.create_user(username=\"foo\", password=\"bar\", email=\"foo@foo.com\")\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('username', form.cleaned_data)\n        self.assertNotIn('foo@foo.com', form.cleaned_data)\n\n    def test_registration_honeypot(self):\n        \"\"\"\n        registration honeypot\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@foo.com',\n                     'email2': 'foo@foo.com', 'password': 'pass',\n                     'honeypot': 'im a robot'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('honeypot', form.cleaned_data)\n\n    def test_registration_email_duplication(self):\n        \"\"\"\n        register, don't allow email duplication\n        \"\"\"\n        utils.create_user(email='duplicated@bar.com')\n        form_data = {'username': 'foo', 'email': 'duplicated@bar.com',\n                     'email2': 'duplicated@bar.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('email', form.cleaned_data)\n\n    @override_settings(ST_UNIQUE_EMAILS=False)\n    def test_registration_email_duplication_allowed(self):\n        \"\"\"\n        Duplicated email allowed\n        \"\"\"\n        utils.create_user(email='duplicated@bar.com')\n        form_data = {'username': 'foo', 'email': 'duplicated@bar.com',\n                     'email2': 'duplicated@bar.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n    def test_registration_email_confirmation(self):\n        \"\"\"\n        Confirmation email should match email\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'foo@bar.com',\n                     'email2': 'foofoo@bar.com', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('email2', form.cleaned_data)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_registration_email_confirmation_case_insensitive(self):\n        \"\"\"\n        Confirmation email should match email\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'FOO@bar.com',\n                     'email2': 'FOO@BAR.COM', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), True)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_registration_email_confirmation_case_sensitive(self):\n        \"\"\"\n        Confirmation email should match email\n        \"\"\"\n        form_data = {'username': 'foo', 'email': 'FOO@bar.com',\n                     'email2': 'FOO@BAR.COM', 'password': 'pass'}\n        form = RegistrationForm(data=form_data)\n        self.assertEqual(form.is_valid(), False)\n        self.assertNotIn('email2', form.cleaned_data)\n\n    def test_resend_activation_email(self):\n        \"\"\"\n        resend activation\n        \"\"\"\n        user = utils.create_user(email=\"newfoo@bar.com\")\n        form_data = {'email': 'newfoo@bar.com', }\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user)\n\n    def test_resend_activation_email_invalid_email(self):\n        \"\"\"\n        resend activation invalid\n        \"\"\"\n        form_data = {'email': 'bad@bar.com', }\n        form = ResendActivationForm(form_data)\n        self.assertFalse(form.is_valid())\n\n    def test_resend_activation_email_duplication(self):\n        \"\"\"\n        Send email to the first *not verified* user found\n        \"\"\"\n        utils.create_user(email=\"duplicated@bar.com\")\n        user2 = utils.create_user(email=\"duplicated@bar.com\")\n        user3 = utils.create_user(email=\"duplicated@bar.com\")\n        form_data = {'email': 'duplicated@bar.com', }\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user3)\n\n        user3.st.is_verified = True\n        user3.st.save()\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user2)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_resend_activation_email_case_insensitive(self):\n        \"\"\"\n        Should lower the email before checking it\n        \"\"\"\n        user = utils.create_user(email=\"newfoo@bar.com\")\n        form_data = {'email': 'NeWfOO@bAr.COM', }\n        form = ResendActivationForm(form_data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.get_user(), user)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_resend_activation_email_case_sensitive(self):\n        \"\"\"\n        Should NOT lower the email before checking it\n        \"\"\"\n        utils.create_user(email=\"newfoo@bar.com\")\n        form_data = {'email': 'NeWfOO@bAr.COM', }\n        form = ResendActivationForm(form_data)\n        self.assertFalse(form.is_valid())\n        self.assertRaises(AttributeError, form.get_user)\n\n    def test_login(self):\n        \"\"\"\n        Should login the user\n        \"\"\"\n        utils.create_user(username=\"foobar\", password=\"foo\")\n        form_data = {'username': \"foobar\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertTrue(form.is_valid())\n\n    def test_login_email(self):\n        \"\"\"\n        Should login the user by email\n        \"\"\"\n        utils.create_user(email=\"foobar@bar.com\", password=\"foo\")\n        form_data = {'username': \"foobar@bar.com\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertTrue(form.is_valid())\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_login_email_case_sensitive(self):\n        \"\"\"\n        Should login the user by email\n        \"\"\"\n        utils.create_user(email=\"foobar@bar.com\", password=\"foo\")\n        form_data = {'username': \"FOOBAR@bar.com\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_login_email_case_sensitive(self):\n        \"\"\"\n        Should login the user by email\n        \"\"\"\n        utils.create_user(email=\"foobar@bar.com\", password=\"foo\")\n        form_data = {'username': \"FOOBAR@bar.com\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertTrue(form.is_valid())\n\n    def test_login_invalid(self):\n        \"\"\"\n        Should not login invalid user\n        \"\"\"\n        form = LoginForm(data={})\n        self.assertFalse(form.is_valid())\n\n    def test_login_password_invalid(self):\n        \"\"\"\n        Should not login invalid user\n        \"\"\"\n        utils.create_user(username=\"foobar\", password=\"foo\")\n        form_data = {'username': \"foobar\", 'password': \"bad\"}\n        form = LoginForm(data=form_data)\n        self.assertFalse(form.is_valid())\n\n    def test_login_username_invalid(self):\n        \"\"\"\n        Should not login invalid user\n        \"\"\"\n        utils.create_user(username=\"foobar\", password=\"foo\")\n        form_data = {'username': \"bad\", 'password': \"foo\"}\n        form = LoginForm(data=form_data)\n        self.assertFalse(form.is_valid())\n\n\nclass UserBackendTest(TestCase):\n\n    def setUp(self):\n        utils.cache_clear()\n        self.user = utils.create_user(\n            email=\"foobar@bar.com\",\n            password=\"bar\")\n\n    def test_email_auth_backend(self):\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"foobar@bar.com\", password=\"bar\")\n        self.assertEqual(user, self.user)\n\n    def test_email_auth_backend_email_duplication(self):\n        \"\"\"\n        it should NOT authenticate when the email is not unique (current behaviour, sorry)\n        \"\"\"\n        utils.create_user(email=\"duplicated@bar.com\", password=\"foo\")\n        utils.create_user(email=\"duplicated@bar.com\", password=\"foo2\")\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"duplicated@bar.com\", password=\"foo\")\n        self.assertIsNone(user)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n    def test_email_auth_backend_case_insensitive(self):\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"FooBar@bAr.COM\", password=\"bar\")\n        self.assertEqual(user, self.user)\n\n    @override_settings(ST_CASE_INSENSITIVE_EMAILS=False)\n    def test_email_auth_backend_case_sensitive(self):\n        user = EmailAuthBackend().authenticate(\n            request=None, username=\"FooBar@bAr.COM\", password=\"bar\")\n        self.assertIsNone(user)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=True)\n    def test_username_auth_backend_case_sensitive(self):\n        usr = utils.create_user(\n            username=\"FooBar\",\n            password=\"bar\")\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"FooBar\", password=\"bar\")\n        self.assertEqual(user.pk, usr.pk)\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"foobar\", password=\"bar\")\n        self.assertEqual(user.pk, usr.pk)\n\n    @override_settings(ST_CASE_INSENSITIVE_USERNAMES=False)\n    def test_username_auth_backend_case_sensitive_off(self):\n        usr = utils.create_user(\n            username=\"FooBar\",\n            password=\"bar\")\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"FooBar\", password=\"bar\")\n        self.assertEqual(user.pk, usr.pk)\n        user = UsernameAuthBackend().authenticate(\n            request=None, username=\"foobar\", password=\"bar\")\n        self.assertIsNone(user)\n", "patch": "@@ -55,6 +55,11 @@ def test_login_redirect(self):\n         response = self.client.get(reverse('spirit:user:auth:login') + '?next=/fakepath/')\n         self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n \n+    def test_login_open_redirect(self):\n+        utils.login(self)\n+        response = self.client.get(reverse('spirit:user:auth:login') + '?next=https%3A%2F%2Fevil.com')\n+        self.assertRedirects(response, '/', status_code=302)\n+\n     @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n     def test_login_email_case_insensitive(self):\n         \"\"\"", "file_path": "files/2022_3/734", "file_language": "py", "file_name": "spirit/user/auth/tests/tests.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nitely/Spirit/raw/8f32f89654d6c30d56e0dd167059d32146fb32ef/spirit%2Fuser%2Fauth%2Fviews.py", "code": "# -*- coding: utf-8 -*-\n\nfrom django.contrib import messages\nfrom django.contrib.auth import views as django_views\nfrom django.urls import reverse\nfrom django.shortcuts import redirect, render, get_object_or_404\nfrom django.utils.translation import gettext as _\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse_lazy\n\nfrom spirit.core.conf import settings\nfrom spirit.core.utils.http import safe_redirect\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.ratelimit.decorators import ratelimit\nfrom spirit.user.utils.email import send_activation_email\nfrom spirit.user.utils.tokens import UserActivationTokenGenerator\nfrom .forms import (\n    RegistrationForm,\n    LoginForm,\n    ResendActivationForm,\n    CustomPasswordResetForm)\n\nUser = get_user_model()\n\n\n# I wish django would not force its crappy CBV on me\nclass _CustomPasswordResetView(django_views.PasswordResetView):\n    template_name = 'spirit/user/auth/password_reset_form.html'\n    email_template_name = 'spirit/user/auth/password_reset_email.html'\n    subject_template_name = 'spirit/user/auth/password_reset_subject.txt'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-done')\n    form_class = CustomPasswordResetForm\n\n\nclass _CustomPasswordResetConfirmView(django_views.PasswordResetConfirmView):\n    template_name = 'spirit/user/auth/password_reset_confirm.html'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-complete')\n\n\nclass _CustomPasswordResetCompleteView(django_views.PasswordResetCompleteView):\n    template_name = 'spirit/user/auth/password_reset_complete.html'\n\n\nclass _CustomPasswordResetDoneView(django_views.PasswordResetDoneView):\n    template_name = 'spirit/user/auth/password_reset_done.html'\n\n\nclass _CustomLoginView(django_views.LoginView):\n    template_name = 'spirit/user/auth/login.html'\n\n\n# Make views sane again\n_login_view = _CustomLoginView.as_view()\n_logout_view = django_views.LogoutView.as_view()\n_password_reset_view = _CustomPasswordResetView.as_view()\ncustom_password_reset_confirm = _CustomPasswordResetConfirmView.as_view()\ncustom_password_reset_complete = _CustomPasswordResetCompleteView.as_view()\ncustom_password_reset_done = _CustomPasswordResetDoneView.as_view()\n\n\n@ratelimit(field='username', rate='5/5m')\n# TODO: @guest_only\ndef custom_login(request, **kwargs):\n    # Currently, Django 1.5 login view does not redirect somewhere if the user is logged in\n    if request.user.is_authenticated:\n        return safe_redirect(\n            request, 'next', request.user.st.get_absolute_url())\n\n    if request.method == \"POST\" and request.is_limited():\n        return redirect(request.get_full_path())\n\n    return _login_view(request, authentication_form=LoginForm, **kwargs)\n\n\n# TODO: @login_required ?\ndef custom_logout(request, **kwargs):\n    if not request.user.is_authenticated:\n        return safe_redirect(request, 'next', reverse(settings.LOGIN_URL))\n\n    if request.method == 'POST':\n        return _logout_view(request, **kwargs)\n\n    return render(request, 'spirit/user/auth/logout.html')\n\n\n@ratelimit(field='email', rate='5/5m')\ndef custom_password_reset(request, **kwargs):\n    if request.method == \"POST\" and request.is_limited():\n        return redirect(reverse(\"spirit:user:auth:password-reset\"))\n\n    return _password_reset_view(request, **kwargs)\n\n\n@ratelimit(rate='2/10s')\n# TODO: @guest_only\ndef register(request, registration_form=RegistrationForm):\n    if request.user.is_authenticated:\n        return safe_redirect(request, 'next', reverse('spirit:user:update'))\n\n    form = registration_form(data=post_data(request))\n    if (is_post(request) and\n            not request.is_limited() and\n            form.is_valid()):\n        user = form.save()\n        send_activation_email(request, user)\n        messages.info(\n            request, _(\n                \"We have sent you an email to %(email)s \"\n                \"so you can activate your account!\") % {'email': form.get_email()})\n\n        # TODO: email-less activation\n        # if not settings.REGISTER_EMAIL_ACTIVATION_REQUIRED:\n        # login(request, user)\n        # return safe_redirect(request, 'next', reverse('spirit:user:update'))\n\n        return redirect(reverse(settings.LOGIN_URL))\n    return render(\n        request=request,\n        template_name='spirit/user/auth/register.html',\n        context={'form': form})\n\n\ndef registration_activation(request, pk, token):\n    user = get_object_or_404(User, pk=pk)\n    activation = UserActivationTokenGenerator()\n\n    if activation.is_valid(user, token):\n        user.st.is_verified = True\n        user.is_active = True\n        user.save()\n        messages.info(request, _(\"Your account has been activated!\"))\n\n    return redirect(reverse(settings.LOGIN_URL))\n\n\n@ratelimit(field='email', rate='5/5m')\n# TODO: @guest_only\ndef resend_activation_email(request):\n    if request.user.is_authenticated:\n        return safe_redirect(request, 'next', reverse('spirit:user:update'))\n\n    form = ResendActivationForm(data=post_data(request))\n    if is_post(request):\n        if not request.is_limited() and form.is_valid():\n            user = form.get_user()\n            send_activation_email(request, user)\n\n        # TODO: show if is_valid only\n        messages.info(\n            request, _(\n                \"If you don't receive an email, please make sure you've entered \"\n                \"the address you registered with, and check your spam folder.\"))\n        return redirect(reverse(settings.LOGIN_URL))\n    return render(\n        request=request,\n        template_name='spirit/user/auth/activation_resend.html',\n        context={'form': form})\n", "code_before": "# -*- coding: utf-8 -*-\n\nfrom django.contrib import messages\nfrom django.contrib.auth import views as django_views\nfrom django.urls import reverse\nfrom django.shortcuts import redirect, render, get_object_or_404\nfrom django.utils.translation import gettext as _\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse_lazy\n\nfrom spirit.core.conf import settings\nfrom spirit.core.utils.views import is_post, post_data\nfrom spirit.core.utils.ratelimit.decorators import ratelimit\nfrom spirit.user.utils.email import send_activation_email\nfrom spirit.user.utils.tokens import UserActivationTokenGenerator\nfrom .forms import (\n    RegistrationForm,\n    LoginForm,\n    ResendActivationForm,\n    CustomPasswordResetForm)\n\nUser = get_user_model()\n\n\n# I wish django would not force its crappy CBV on me\nclass _CustomPasswordResetView(django_views.PasswordResetView):\n    template_name = 'spirit/user/auth/password_reset_form.html'\n    email_template_name = 'spirit/user/auth/password_reset_email.html'\n    subject_template_name = 'spirit/user/auth/password_reset_subject.txt'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-done')\n    form_class = CustomPasswordResetForm\n\n\nclass _CustomPasswordResetConfirmView(django_views.PasswordResetConfirmView):\n    template_name = 'spirit/user/auth/password_reset_confirm.html'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-complete')\n\n\nclass _CustomPasswordResetCompleteView(django_views.PasswordResetCompleteView):\n    template_name = 'spirit/user/auth/password_reset_complete.html'\n\n\nclass _CustomPasswordResetDoneView(django_views.PasswordResetDoneView):\n    template_name = 'spirit/user/auth/password_reset_done.html'\n\n\nclass _CustomLoginView(django_views.LoginView):\n    template_name = 'spirit/user/auth/login.html'\n\n\n# Make views sane again\n_login_view = _CustomLoginView.as_view()\n_logout_view = django_views.LogoutView.as_view()\n_password_reset_view = _CustomPasswordResetView.as_view()\ncustom_password_reset_confirm = _CustomPasswordResetConfirmView.as_view()\ncustom_password_reset_complete = _CustomPasswordResetCompleteView.as_view()\ncustom_password_reset_done = _CustomPasswordResetDoneView.as_view()\n\n\n@ratelimit(field='username', rate='5/5m')\n# TODO: @guest_only\ndef custom_login(request, **kwargs):\n    # Currently, Django 1.5 login view does not redirect somewhere if the user is logged in\n    if request.user.is_authenticated:\n        return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n\n    if request.method == \"POST\" and request.is_limited():\n        return redirect(request.get_full_path())\n\n    return _login_view(request, authentication_form=LoginForm, **kwargs)\n\n\n# TODO: @login_required ?\ndef custom_logout(request, **kwargs):\n    if not request.user.is_authenticated:\n        return redirect(request.GET.get('next', reverse(settings.LOGIN_URL)))\n\n    if request.method == 'POST':\n        return _logout_view(request, **kwargs)\n\n    return render(request, 'spirit/user/auth/logout.html')\n\n\n@ratelimit(field='email', rate='5/5m')\ndef custom_password_reset(request, **kwargs):\n    if request.method == \"POST\" and request.is_limited():\n        return redirect(reverse(\"spirit:user:auth:password-reset\"))\n\n    return _password_reset_view(request, **kwargs)\n\n\n@ratelimit(rate='2/10s')\n# TODO: @guest_only\ndef register(request, registration_form=RegistrationForm):\n    if request.user.is_authenticated:\n        return redirect(request.GET.get('next', reverse('spirit:user:update')))\n\n    form = registration_form(data=post_data(request))\n    if (is_post(request) and\n            not request.is_limited() and\n            form.is_valid()):\n        user = form.save()\n        send_activation_email(request, user)\n        messages.info(\n            request, _(\n                \"We have sent you an email to %(email)s \"\n                \"so you can activate your account!\") % {'email': form.get_email()})\n\n        # TODO: email-less activation\n        # if not settings.REGISTER_EMAIL_ACTIVATION_REQUIRED:\n        # login(request, user)\n        # return redirect(request.GET.get('next', reverse('spirit:user:update')))\n\n        return redirect(reverse(settings.LOGIN_URL))\n    return render(\n        request=request,\n        template_name='spirit/user/auth/register.html',\n        context={'form': form})\n\n\ndef registration_activation(request, pk, token):\n    user = get_object_or_404(User, pk=pk)\n    activation = UserActivationTokenGenerator()\n\n    if activation.is_valid(user, token):\n        user.st.is_verified = True\n        user.is_active = True\n        user.save()\n        messages.info(request, _(\"Your account has been activated!\"))\n\n    return redirect(reverse(settings.LOGIN_URL))\n\n\n@ratelimit(field='email', rate='5/5m')\n# TODO: @guest_only\ndef resend_activation_email(request):\n    if request.user.is_authenticated:\n        return redirect(request.GET.get('next', reverse('spirit:user:update')))\n\n    form = ResendActivationForm(data=post_data(request))\n    if is_post(request):\n        if not request.is_limited() and form.is_valid():\n            user = form.get_user()\n            send_activation_email(request, user)\n\n        # TODO: show if is_valid only\n        messages.info(\n            request, _(\n                \"If you don't receive an email, please make sure you've entered \"\n                \"the address you registered with, and check your spam folder.\"))\n        return redirect(reverse(settings.LOGIN_URL))\n    return render(\n        request=request,\n        template_name='spirit/user/auth/activation_resend.html',\n        context={'form': form})\n", "patch": "@@ -9,6 +9,7 @@\n from django.urls import reverse_lazy\n \n from spirit.core.conf import settings\n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data\n from spirit.core.utils.ratelimit.decorators import ratelimit\n from spirit.user.utils.email import send_activation_email\n@@ -62,7 +63,8 @@ class _CustomLoginView(django_views.LoginView):\n def custom_login(request, **kwargs):\n     # Currently, Django 1.5 login view does not redirect somewhere if the user is logged in\n     if request.user.is_authenticated:\n-        return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', request.user.st.get_absolute_url())\n \n     if request.method == \"POST\" and request.is_limited():\n         return redirect(request.get_full_path())\n@@ -73,7 +75,7 @@ def custom_login(request, **kwargs):\n # TODO: @login_required ?\n def custom_logout(request, **kwargs):\n     if not request.user.is_authenticated:\n-        return redirect(request.GET.get('next', reverse(settings.LOGIN_URL)))\n+        return safe_redirect(request, 'next', reverse(settings.LOGIN_URL))\n \n     if request.method == 'POST':\n         return _logout_view(request, **kwargs)\n@@ -93,7 +95,7 @@ def custom_password_reset(request, **kwargs):\n # TODO: @guest_only\n def register(request, registration_form=RegistrationForm):\n     if request.user.is_authenticated:\n-        return redirect(request.GET.get('next', reverse('spirit:user:update')))\n+        return safe_redirect(request, 'next', reverse('spirit:user:update'))\n \n     form = registration_form(data=post_data(request))\n     if (is_post(request) and\n@@ -109,7 +111,7 @@ def register(request, registration_form=RegistrationForm):\n         # TODO: email-less activation\n         # if not settings.REGISTER_EMAIL_ACTIVATION_REQUIRED:\n         # login(request, user)\n-        # return redirect(request.GET.get('next', reverse('spirit:user:update')))\n+        # return safe_redirect(request, 'next', reverse('spirit:user:update'))\n \n         return redirect(reverse(settings.LOGIN_URL))\n     return render(\n@@ -135,7 +137,7 @@ def registration_activation(request, pk, token):\n # TODO: @guest_only\n def resend_activation_email(request):\n     if request.user.is_authenticated:\n-        return redirect(request.GET.get('next', reverse('spirit:user:update')))\n+        return safe_redirect(request, 'next', reverse('spirit:user:update'))\n \n     form = ResendActivationForm(data=post_data(request))\n     if is_post(request):", "file_path": "files/2022_3/735", "file_language": "py", "file_name": "spirit/user/auth/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n          138\u2506 return redirect(request.GET.get('next', reverse('spirit:user:update')))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n          138\u2506 return redirect(request.GET.get('next', reverse('spirit:user:update')))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           96\u2506 return redirect(request.GET.get('next', reverse('spirit:user:update')))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           96\u2506 return redirect(request.GET.get('next', reverse('spirit:user:update')))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           76\u2506 return redirect(request.GET.get('next', reverse(settings.LOGIN_URL)))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           76\u2506 return redirect(request.GET.get('next', reverse(settings.LOGIN_URL)))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           65\u2506 return redirect(request.GET.get('next', request.user.st.get_absolute_url()))", "       python.django.security.injection.open-redirect.open-redirect                                   \n          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be    \n          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().\n          See https://cwe.mitre.org/data/definitions/601.html for more information.                   \n          Details: https://sg.run/Ave2                                                                \n\n           65\u2506 return redirect(request.GET.get('next', request.user.st.get_absolute_url()))"]]}, "target": 1, "function_before": [{"function": "class _CustomPasswordResetView(django_views.PasswordResetView):\n    template_name = 'spirit/user/auth/password_reset_form.html'\n    email_template_name = 'spirit/user/auth/password_reset_email.html'\n    subject_template_name = 'spirit/user/auth/password_reset_subject.txt'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-done')\n    form_class = CustomPasswordResetForm", "target": 0}, {"function": "class _CustomPasswordResetConfirmView(django_views.PasswordResetConfirmView):\n    template_name = 'spirit/user/auth/password_reset_confirm.html'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-complete')", "target": 0}, {"function": "class _CustomPasswordResetCompleteView(django_views.PasswordResetCompleteView):\n    template_name = 'spirit/user/auth/password_reset_complete.html'", "target": 0}, {"function": "class _CustomPasswordResetDoneView(django_views.PasswordResetDoneView):\n    template_name = 'spirit/user/auth/password_reset_done.html'", "target": 0}, {"function": "class _CustomLoginView(django_views.LoginView):\n    template_name = 'spirit/user/auth/login.html'", "target": 0}, {"function": "def custom_logout(request, **kwargs):\n    if not request.user.is_authenticated:\n        return redirect(request.GET.get('next', reverse(settings.LOGIN_URL)))\n\n    if request.method == 'POST':\n        return _logout_view(request, **kwargs)\n\n    return render(request, 'spirit/user/auth/logout.html')", "target": 1, "line": "@@  -73,7 +75,7  @@ def custom_login(request, **kwargs):\n # TODO: @login_required ?\n def custom_logout(request, **kwargs):\n     if not request.user.is_authenticated:\n-        return redirect(request.GET.get('next', reverse(settings.LOGIN_URL)))\n+        return safe_redirect(request, 'next', reverse(settings.LOGIN_URL))\n \n     if request.method == 'POST':\n         return _logout_view(request, **kwargs)\n"}, {"function": "def registration_activation(request, pk, token):\n    user = get_object_or_404(User, pk=pk)\n    activation = UserActivationTokenGenerator()\n\n    if activation.is_valid(user, token):\n        user.st.is_verified = True\n        user.is_active = True\n        user.save()\n        messages.info(request, _(\"Your account has been activated!\"))\n\n    return redirect(reverse(settings.LOGIN_URL))", "target": 0}], "function_after": [{"function": "class _CustomPasswordResetView(django_views.PasswordResetView):\n    template_name = 'spirit/user/auth/password_reset_form.html'\n    email_template_name = 'spirit/user/auth/password_reset_email.html'\n    subject_template_name = 'spirit/user/auth/password_reset_subject.txt'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-done')\n    form_class = CustomPasswordResetForm", "target": 0}, {"function": "class _CustomPasswordResetConfirmView(django_views.PasswordResetConfirmView):\n    template_name = 'spirit/user/auth/password_reset_confirm.html'\n    success_url = reverse_lazy('spirit:user:auth:password-reset-complete')", "target": 0}, {"function": "class _CustomPasswordResetCompleteView(django_views.PasswordResetCompleteView):\n    template_name = 'spirit/user/auth/password_reset_complete.html'", "target": 0}, {"function": "class _CustomPasswordResetDoneView(django_views.PasswordResetDoneView):\n    template_name = 'spirit/user/auth/password_reset_done.html'", "target": 0}, {"function": "class _CustomLoginView(django_views.LoginView):\n    template_name = 'spirit/user/auth/login.html'", "target": 0}, {"function": "def custom_logout(request, **kwargs):\n    if not request.user.is_authenticated:\n        return safe_redirect(request, 'next', reverse(settings.LOGIN_URL))\n\n    if request.method == 'POST':\n        return _logout_view(request, **kwargs)\n\n    return render(request, 'spirit/user/auth/logout.html')", "target": 0}, {"function": "def registration_activation(request, pk, token):\n    user = get_object_or_404(User, pk=pk)\n    activation = UserActivationTokenGenerator()\n\n    if activation.is_valid(user, token):\n        user.st.is_verified = True\n        user.is_active = True\n        user.save()\n        messages.info(request, _(\"Your account has been activated!\"))\n\n    return redirect(reverse(settings.LOGIN_URL))", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
