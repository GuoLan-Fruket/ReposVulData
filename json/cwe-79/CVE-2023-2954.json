{"index": 11415, "cve_id": "CVE-2023-2954", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Cross-site Scripting (XSS) - Stored in GitHub repository liangliangyy/djangoblog prior to master.", "cvss": "5.4", "publish_date": "May 29, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719", "commit_message": "Merge pull request #662 from liangliangyy/dev\n\nfix xss", "commit_date": "2023-05-29T05:06:45Z", "project": "liangliangyy/djangoblog", "url": "https://api.github.com/repos/liangliangyy/DjangoBlog/commits/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719", "html_url": "https://github.com/liangliangyy/DjangoBlog/commit/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719", "windows_before": [{"commit_id": "ad98e00f7e3c26fef27c12ddc1d08128a47447e8", "commit_date": "Tue May 23 16:43:32 2023 +0800", "commit_message": "Merge pull request #660 from liangliangyy/dependabot/pip/requests-2.31.0", "files_name": ["27d17a7edbeb965ead935ac2703d1224998e1a91 - Tue May 23 06:58:50 2023 +0000 : Bump requests from 2.30.0 to 2.31.0", "requirements.txt"]}, {"commit_id": "c755e0420f1360997b8a35186478c2f739592368", "commit_date": "Tue May 9 16:29:30 2023 +0800", "commit_message": "Merge pull request #658 from liangliangyy/dev", "files_name": ["8213478fb6a8d26476664cc7f242bc632e69b488 - Tue May 9 16:17:28 2023 +0800 : \u589e\u52a0\u8bc4\u8bba\u5ba1\u6838\u5f00\u5173", "comments/tests.py"]}, {"commit_id": "17d8abb92211e76cd80392ca213f4808420851fe", "commit_date": "Tue May 9 16:08:29 2023 +0800", "commit_message": "\u589e\u52a0\u8bc4\u8bba\u5ba1\u6838\u5f00\u5173", "files_name": ["requirements.txt"]}, {"commit_id": "e2e5b29a4b47212d01fc1df12ad4f1b3c97a3b4d", "commit_date": "Tue May 9 16:05:56 2023 +0800", "commit_message": "\u589e\u52a0\u8bc4\u8bba\u5ba1\u6838\u5f00\u5173", "files_name": ["blog/context_processors.py", "blog/migrations/0003_blogsettings_comment_need_review.py", "blog/migrations/0004_rename_analyticscode_blogsettings_analytics_code_and_more.py", "blog/models.py", "blog/templatetags/blog_tags.py", "comments/views.py", "djangoblog/blog_signals.py", "djangoblog/utils.py", "requirements.txt", "templates/comments/tags/post_comment.html", "templates/share_layout/analyticscode.html", "templates/share_layout/footer.html"]}, {"commit_id": "7f62f2951b100d3afc36b8ed543ad7abdf35e947", "commit_date": "Mon Apr 24 22:13:18 2023 +0800", "commit_message": "Merge pull request #654 from liangliangyy/dev", "files_name": ["a450de8b02babd29508317ef482a536ab0535e32 - Mon Apr 24 22:03:16 2023 +0800 : \u8bc4\u8bba\u5ba1\u6838\u540e\u624d\u80fd\u663e\u793a", "comments/tests.py"]}, {"commit_id": "0a7087e8b996331db2d6a943fae50e47fdb355ea", "commit_date": "Mon Apr 24 21:51:58 2023 +0800", "commit_message": "\u8bc4\u8bba\u5ba1\u6838\u540e\u624d\u80fd\u663e\u793a", "files_name": ["comments/admin.py", "comments/migrations/0002_alter_comment_is_enable.py", "comments/models.py", "djangoblog/blog_signals.py", "djangoblog/settings.py", "templates/comments/tags/post_comment.html"]}, {"commit_id": "d39344d33ab0dcfdd998ecc40e103c6abd65db21", "commit_date": "Tue Apr 4 14:24:49 2023 +0800", "commit_message": "\u66f4\u65b0\u73af\u5883\u53d8\u91cf", "files_name": ["servermanager/api/commonapi.py"]}, {"commit_id": "07a1ded08eb4e0c6979f6aeebc35f3864ba250a7", "commit_date": "Tue Apr 4 14:17:32 2023 +0800", "commit_message": "Merge pull request #649 from liangliangyy/dev", "files_name": ["383b41af74678a522b6c58b01f08827be90444e5 - Tue Apr 4 13:53:27 2023 +0800 : \u66f4\u65b0facebook oauth api", "oauth/oauthmanager.py"]}, {"commit_id": "0ba255e783266b71ae983ed54bcbc8e130445daa", "commit_date": "Tue Apr 4 13:38:42 2023 +0800", "commit_message": "add proxy", "files_name": ["oauth/oauthmanager.py", "servermanager/api/commonapi.py"]}, {"commit_id": "a027ba10a202406cec3040414a934396e3ca405b", "commit_date": "Mon Apr 3 13:51:46 2023 +0800", "commit_message": "add chatgpt", "files_name": ["requirements.txt", "servermanager/api/blogapi.py", "servermanager/api/commonapi.py", "servermanager/robot.py", "servermanager/tests.py"]}, {"commit_id": "439bde5de87569e240ba984dc7db874200f8437e", "commit_date": "Mon Apr 3 11:03:53 2023 +0800", "commit_message": "Merge pull request #648 from liangliangyy/dependabot/pip/redis-4.5.4", "files_name": ["e35ae1af9709abaa4d44d099893400a6d0afa258 - Fri Mar 31 14:29:07 2023 +0000 : Bump redis from 4.5.3 to 4.5.4", "requirements.txt"]}, {"commit_id": "8967635e13ce8cfc277fc448fe9e98284dfdb693", "commit_date": "Wed Mar 29 20:18:44 2023 +0800", "commit_message": "Merge pull request #646 from liangliangyy/dev", "files_name": ["f7a4b6464a874db40fd0eb0a34cad033db2a1afe - Wed Mar 29 20:12:24 2023 +0800 : \u589e\u52a0\u5355\u5143\u6d4b\u8bd5", "oauth/tests.py"]}, {"commit_id": "b33c7aa36c708d253705b97f7d42efee5bc67b88", "commit_date": "Wed Mar 29 18:40:07 2023 +0800", "commit_message": "\u589e\u52a0\u5355\u5143\u6d4b\u8bd5", "files_name": [".coveragerc", "oauth/oauthmanager.py", "oauth/tests.py"]}, {"commit_id": "174be116c4f5ee1215aca88bbd2011ec5c0e5f52", "commit_date": "Wed Mar 29 14:18:00 2023 +0800", "commit_message": "Merge pull request #645 from liangliangyy/dev", "files_name": ["80b8b23cd6fa518379ea2605474db03f5f93d5f7 - Wed Mar 29 14:14:31 2023 +0800 : \u589e\u52a0global header,footer \u914d\u7f6e", "blog/context_processors.py", "blog/migrations/0002_blogsettings_global_footer_and_more.py", "blog/models.py", "templates/share_layout/base.html", "templates/share_layout/footer.html"]}, {"commit_id": "1163fe9e64ce1595835dee51b19fa90e3c70ce5a", "commit_date": "Tue Mar 28 15:34:09 2023 +0800", "commit_message": "Merge pull request #644 from liangliangyy/dev", "files_name": ["cdc03af8d6a27acb00bbbed68a6a871540e469e3 - Tue Mar 28 15:19:55 2023 +0800 : \u5347\u7ea7\u4f9d\u8d56", "comments/views.py", "requirements.txt"]}, {"commit_id": "9874b2091b2decd30abb4fb7a24ad954671e5c13", "commit_date": "Tue Mar 28 11:07:05 2023 +0800", "commit_message": "Merge pull request #643 from liangliangyy/dependabot/pip/redis-4.5.3", "files_name": ["a324db98c21b9e6345dbec08dcf833cae58e18b6 - Mon Mar 27 21:34:14 2023 +0000 : Bump redis from 4.5.1 to 4.5.3", "requirements.txt"]}, {"commit_id": "9461e5208ef9851f3d7da7c35a7a5dca04f25477", "commit_date": "Wed Mar 8 11:29:35 2023 +0800", "commit_message": "Merge pull request #640 from liangliangyy/dev", "files_name": ["d87579f2256cc1bb46857acfeb0795cb1cc3eb99 - Wed Mar 8 11:21:02 2023 +0800 : \u8865\u5145\u5355\u5143\u6d4b\u8bd5", ".gitignore", "blog/management/commands/sync_user_avatar.py", "blog/tests.py"]}, {"commit_id": "2df3e1a9749cbaa1780e41de3296ed869c422e55", "commit_date": "Wed Mar 8 10:16:27 2023 +0800", "commit_message": "Merge pull request #639 from liangliangyy/dev", "files_name": ["3244ea8272a3612f0bb667779917b7483f0cce06 - Tue Mar 7 18:28:13 2023 +0800 : \u4fee\u590d\u90e8\u5206\u5b57\u6bb5\u547d\u540d\u9519\u8bef\uff0c\u4fee\u6539\u540c\u6b65\u5934\u50cf\u529f\u80fd", "blog/management/commands/sync_user_avatar.py", "requirements.txt"]}, {"commit_id": "4500c0b32f19a241a6c8dbee264bdcab371aa8f4", "commit_date": "Tue Mar 7 18:14:01 2023 +0800", "commit_message": "\u4fee\u590d\u90e8\u5206\u5b57\u6bb5\u547d\u540d\u9519\u8bef\uff0c\u4fee\u6539\u540c\u6b65\u5934\u50cf\u529f\u80fd", "files_name": [".gitignore", "accounts/migrations/0001_initial.py", "blog/management/commands/sync_user_avatar.py", "blog/migrations/0001_initial.py", "comments/migrations/0001_initial.py", "djangoblog/utils.py", "oauth/admin.py", "oauth/migrations/0001_initial.py", "oauth/models.py", "oauth/oauthmanager.py", "oauth/views.py", "owntracks/migrations/0001_initial.py", "servermanager/migrations/0001_initial.py"]}, {"commit_id": "892e03da52a9fb07946a94c5bbef8b0280712230", "commit_date": "Thu Mar 2 17:51:19 2023 +0800", "commit_message": "\u8865\u5145\u90e8\u5206\u5355\u5143\u6d4b\u8bd5", "files_name": ["blog/tests.py", "owntracks/tests.py", "owntracks/views.py"]}, {"commit_id": "fc01ed623e3e9017a7a0ab01679646f9f8f737ec", "commit_date": "Thu Mar 2 16:04:56 2023 +0800", "commit_message": "Merge pull request #637 from liangliangyy/dev", "files_name": ["7c107b63536cd0eeb946e7c1a9f9bf58f66c84d8 - Thu Mar 2 15:57:02 2023 +0800 : \u4fee\u590d\u9ed8\u8ba4\u5934\u50cf\u5730\u5740", "blog/templatetags/blog_tags.py", "requirements.txt"]}, {"commit_id": "ede88b3f5b089eab0009e6150aa9f7e5d0ffb062", "commit_date": "Wed Mar 1 18:23:12 2023 +0800", "commit_message": "\u4fee\u6539resource\u914d\u7f6e", "files_name": ["blog/management/commands/sync_user_avatar.py", "blog/models.py", "blog/templatetags/blog_tags.py", "blog/views.py", "djangoblog/utils.py", "oauth/tests.py"]}, {"commit_id": "7243508d2280f2e102cb878d8275ec2b58cacb01", "commit_date": "Thu Feb 16 16:34:56 2023 +0800", "commit_message": "Merge pull request #635 from liangliangyy/dependabot/pip/django-4.1.7", "files_name": ["ddee91c4964b363dd23c6c96e08d88db5cd627fb - Wed Feb 15 20:38:49 2023 +0000 : Bump django from 4.1.6 to 4.1.7", "requirements.txt"]}, {"commit_id": "2cb919cd9b377e5e7da6408e5a521d7fccbf1db5", "commit_date": "Mon Feb 6 10:11:14 2023 +0800", "commit_message": "Merge pull request #633 from liangliangyy/dependabot/pip/django-4.1.6", "files_name": ["384d1a159c49c166869fddcc9cdff0b092625786 - Fri Feb 3 22:00:37 2023 +0000 : Bump django from 4.1.5 to 4.1.6", "requirements.txt"]}, {"commit_id": "abcb107c3e95f864431a8e65a78506e2df2f9447", "commit_date": "Thu Jan 12 14:15:29 2023 +0800", "commit_message": "Merge pull request #629 from liangliangyy/dev", "files_name": ["50123a7cdf7ed574bc42239400fc95d02d54e4ee - Thu Jan 12 14:10:10 2023 +0800 : \u5347\u7ea7\u4f9d\u8d56", "requirements.txt"]}, {"commit_id": "3ae7f29be8e627d4dcb5103cf9c4b4a9621d2c56", "commit_date": "Thu Jan 12 11:56:22 2023 +0800", "commit_message": "\u5347\u7ea7\u4f9d\u8d56", "files_name": ["docker-compose.es.yml", "docker-compose.yml", "requirements.txt"]}, {"commit_id": "43c0bc83f01058b7b945de78b333f4533ea6bdf5", "commit_date": "Mon Jan 9 14:50:20 2023 +0800", "commit_message": "Merge pull request #628 from liangliangyy/dev", "files_name": ["8f03a17ffd32709b6929f8085eccc3da923d4d95 - Mon Jan 9 14:44:58 2023 +0800 : \u5347\u7ea7\u4f9d\u8d56", "requirements.txt"]}, {"commit_id": "b78c581c8790a1fafad26bba18a1d2d9bbade02a", "commit_date": "Wed Nov 16 11:36:16 2022 +0800", "commit_message": "Merge pull request #622 from liangliangyy/dependabot/pip/pillow-9.3.0", "files_name": ["3ca681e13952c894ccec17ce3caa7a705ca986c5 - Wed Nov 16 11:35:55 2022 +0800 : Merge pull request #623 from liangliangyy/dev", "c5e4d1a23de0377fd680d54c28eb7f8bee71d158 - Wed Nov 16 11:31:03 2022 +0800 : \u5347\u7ea7\u5230python 3.11", ".github/workflows/django.yml"]}, {"commit_id": "c34cf43bf6a480274f23cd3b5099f693c7dd3cdf", "commit_date": "Wed Nov 16 11:06:32 2022 +0800", "commit_message": "\u5347\u7ea7\u5230python 3.11", "files_name": ["Dockerfile", "requirements.txt"]}, {"commit_id": "66748e2ed70e0112ba0657f88bbdf88028eecde2", "commit_date": "Tue Nov 15 13:50:22 2022 +0000", "commit_message": "Bump pillow from 9.2.0 to 9.3.0", "files_name": ["requirements.txt"]}, {"commit_id": "c6277d2c35b021806be0fa623f1451c201e9677d", "commit_date": "Fri Oct 28 11:36:18 2022 +0800", "commit_message": "Merge pull request #619 from liangliangyy/dev", "files_name": ["231f5d67ad0f3d9fdf083047fa8bfe2f81401632 - Fri Oct 28 11:23:48 2022 +0800 : update github actions", ".dockerignore", ".github/workflows/django.yml", ".gitignore", "Dockerfile", "docker-compose.yml"]}, {"commit_id": "e3db6576f083c09f8aabf4021f003e117bcd211f", "commit_date": "Fri Oct 21 16:21:07 2022 +0800", "commit_message": "Merge pull request #611 from liangliangyy/dev", "files_name": ["f37e128205f9ecaf1d01bb4784de2762a9af3684 - Fri Oct 21 15:19:44 2022 +0800 : update github actions", ".github/workflows/codeql-analysis.yml", ".github/workflows/django.yml", ".github/workflows/docker.yml", ".github/workflows/publish-release.yml"]}, {"commit_id": "dddc078d70675d2980d1d08a051e4abad48a545f", "commit_date": "Fri Oct 21 15:07:39 2022 +0800", "commit_message": "add pip cache", "files_name": [".github/workflows/django.yml"]}, {"commit_id": "1bff86327a1e1462883b8e958e93ea4454cb95d1", "commit_date": "Fri Oct 21 14:33:47 2022 +0800", "commit_message": "datetime->timezone", "files_name": ["blog/context_processors.py", "blog/views.py", "comments/models.py", "djangoblog/feeds.py", "oauth/views.py", "owntracks/views.py"]}, {"commit_id": "888c0cf1e93645a3f75d03a4850a19bbae1d2f1b", "commit_date": "Sat Oct 8 17:44:21 2022 +0800", "commit_message": "Merge pull request #610 from liangliangyy/dev", "files_name": ["77d85d30c71ec7d47a70d8898abe8cbbe9cd45b6 - Sat Oct 8 17:43:56 2022 +0800 : \u4fee\u590d\u90e8\u5206bug", "templates/comments/tags/comment_item.html", "templates/comments/tags/comment_item_tree.html"]}], "windows_after": [{"commit_id": "e6a95137b67843991ca6fbfdc5db283bad2c4f44", "commit_date": "Tue Jul 4 11:09:03 2023 +0800", "commit_message": "Merge pull request #667 from liangliangyy/dev", "files_name": ["bfa2696cfa04c8f4acde938bd857c2c9724ccd90 - Fri Jul 7 21:55:42 2023 +0800 : \u4fee\u590d\u811a\u672c\u9519\u8bef", "bin/docker_start.sh"]}, {"commit_id": "04ceef8ba027ab09efc9a7d688eab56a4bcb0a08", "commit_date": "Fri Jul 7 21:56:07 2023 +0800", "commit_message": "Merge pull request #670 from liangliangyy/dev", "files_name": ["29458924f1b4c48779a86d54b4f36ad681be2559 - Sun Jul 30 23:46:05 2023 +0800 : \u6dfb\u52a0docker-compose\u672c\u5730\u4e0a\u4f20\u6587\u4ef6\u5377", "docker-compose.es.yml", "docker-compose.yml"]}, {"commit_id": "768ec859842bd169d030c7bd5ce684a09b731bb1", "commit_date": "Mon Jul 31 21:33:01 2023 +0800", "commit_message": "Merge pull request #671 from Li-Dicker/master", "files_name": ["b7d336eaa73c9eef80e1443ec522f416dd838ca7 - Mon Aug 21 10:44:15 2023 +0800 : \u5347\u7ea7\u4f9d\u8d56", "requirements.txt"]}, {"commit_id": "6a708de228aaa07a2bf0de84f05eb1fb8f33a37d", "commit_date": "Wed Aug 23 21:48:34 2023 +0800", "commit_message": "Merge pull request #676 from liangliangyy/dev", "files_name": ["c582f44ba04c79d64dc19f55dce7a42a298eddfc - Tue Sep 5 00:06:31 2023 +0800 : \u5347\u7ea7\u4f9d\u8d56", "requirements.txt"]}, {"commit_id": "eb675280fff0883253ff6e8cf2df60043e35f9dd", "commit_date": "Tue Sep 5 00:11:18 2023 +0800", "commit_message": "Merge pull request #677 from liangliangyy/dev", "files_name": ["442a03ffdc1beaff8909823f070635b9a6021c5f - Fri Sep 8 00:24:28 2023 +0800 : \u589e\u52a0\u591a\u8bed\u8a00\u652f\u6301", "Dockerfile", "accounts/admin.py", "accounts/forms.py", "accounts/migrations/0002_alter_bloguser_options_remove_bloguser_created_time_and_more.py", "accounts/models.py", "accounts/tests.py", "accounts/urls.py", "accounts/utils.py", "accounts/views.py", "blog/admin.py", "blog/migrations/0005_alter_article_options_alter_category_options_and_more.py", "blog/models.py", "blog/static/blog/js/blog.js", "blog/static/blog/js/nprogress.js", "blog/templatetags/blog_tags.py", "blog/tests.py", "blog/views.py", "comments/admin.py", "comments/migrations/0003_alter_comment_options_remove_comment_created_time_and_more.py", "comments/models.py", "comments/tests.py", "comments/utils.py", "comments/views.py", "djangoblog/settings.py", "djangoblog/sitemap.py", "djangoblog/urls.py", "locale/en/LC_MESSAGES/django.po", "locale/zh_Hans/LC_MESSAGES/django.po", "locale/zh_Hant/LC_MESSAGES/django.po", "oauth/migrations/0002_alter_oauthconfig_options_alter_oauthuser_options_and_more.py", "oauth/models.py", "oauth/views.py", "owntracks/migrations/0002_alter_owntracklog_options_and_more.py", "owntracks/models.py", "owntracks/views.py", "servermanager/admin.py", "servermanager/migrations/0002_alter_emailsendlog_options_and_more.py", "servermanager/models.py", "servermanager/tests.py", "templates/account/forget_password.html", "templates/account/result.html", "templates/blog/article_archives.html", "templates/blog/tags/article_info.html", "templates/blog/tags/article_meta_info.html", "templates/blog/tags/article_pagination.html", "templates/blog/tags/article_tag_list.html", "templates/blog/tags/sidebar.html", "templates/comments/tags/comment_item.html", "templates/comments/tags/comment_item_tree.html", "templates/share_layout/base.html"]}, {"commit_id": "0221ee317a07d256d79a9957f01120c1c27b243f", "commit_date": "Wed Sep 13 16:07:29 2023 +0800", "commit_message": "\u589e\u52a0\u591a\u8bed\u8a00\u652f\u6301", "files_name": ["accounts/admin.py", "accounts/utils.py", "blog/models.py", "blog/urls.py", "blog/views.py", "comments/utils.py", "djangoblog/logentryadmin.py", "djangoblog/settings.py", "djangoblog/urls.py", "locale/en/LC_MESSAGES/django.po", "locale/zh_Hans/LC_MESSAGES/django.po", "locale/zh_Hant/LC_MESSAGES/django.po", "oauth/models.py", "oauth/views.py", "owntracks/views.py", "templates/account/login.html", "templates/blog/tags/article_meta_info.html", "templates/oauth/oauth_applications.html", "templates/share_layout/base.html", "templates/share_layout/nav.html"]}, {"commit_id": "2ee27969cdbc5161580ddddcf1467c12e0d3b51c", "commit_date": "Wed Sep 13 17:00:30 2023 +0800", "commit_message": "\u589e\u52a0\u591a\u8bed\u8a00\u652f\u6301", "files_name": [".dockerignore", "Dockerfile", "bin/docker_start.sh", "blog/static/blog/js/blog.js", "locale/zh_Hans/LC_MESSAGES/django.po", "locale/zh_Hant/LC_MESSAGES/django.po", "requirements.txt", "templates/share_layout/base.html"]}, {"commit_id": "c3b6e3c460fc47ba1adadf59f9e4787b6c474b63", "commit_date": "Wed Sep 13 17:05:25 2023 +0800", "commit_message": "Merge pull request #678 from liangliangyy/i18n", "files_name": ["383613aa60dca629f17317704fe233f4e664a4f2 - Wed Sep 13 18:09:25 2023 +0800 : Merge pull request #679 from liangliangyy/dev", "10ed9729e6019298a7adff3326d44463f385364f - Sun Sep 17 23:50:20 2023 +0800 : \u4fee\u6539js", "blog/static/blog/js/blog.js", "templates/comments/tags/comment_item_tree.html"]}, {"commit_id": "2119309a2cb96fe810e9890646ffee54901ab818", "commit_date": "Sun Sep 17 23:50:43 2023 +0800", "commit_message": "Merge pull request #680 from liangliangyy/dev", "files_name": ["a7800cc097148caacd3b8a558c26ec3f7f3717c5 - Tue Oct 3 20:30:30 2023 +0000 : Bump pillow from 10.0.0 to 10.0.1", "requirements.txt"]}, {"commit_id": "e9b9147cca3ca2fada83f225c2d99804073a46ad", "commit_date": "Sat Oct 7 20:01:03 2023 +0800", "commit_message": "\u5347\u7ea7\u4f9d\u8d56", "files_name": ["requirements.txt"]}, {"commit_id": "ad6d775207d61e1a18e3c3305feef93856855339", "commit_date": "Sun Oct 8 10:38:56 2023 +0800", "commit_message": "\u5347\u7ea7\u4f9d\u8d56", "files_name": [".dockerignore", "Dockerfile"]}, {"commit_id": "82d231101cc20e70494c47ac955d19cbaec5e561", "commit_date": "Sun Oct 8 10:41:46 2023 +0800", "commit_message": "Merge pull request #684 from liangliangyy/dev", "files_name": ["44aceba6f94dcad5f8d4023aa91497a29f6f75a1 - Sun Oct 8 10:42:05 2023 +0800 : Merge pull request #681 from liangliangyy/dependabot/pip/pillow-10.0.1", "1aed2048c4133943d2bc824b59712159f23d04f5 - Thu Nov 2 22:00:51 2023 +0000 : Bump django from 4.2.6 to 4.2.7", "requirements.txt"]}, {"commit_id": "5cf8889d43728685fc1a918fb98d8e1426194114", "commit_date": "Sun Nov 5 23:17:12 2023 +0800", "commit_message": "Merge pull request #687 from liangliangyy/dependabot/pip/django-4.2.7", "files_name": ["147115b7192024e89abac5b0dc4e987877fa1b21 - Wed Nov 22 21:16:57 2023 +0800 : \u589e\u52a0\u7ffb\u8bd1mo\u6587\u4ef6\u63d0\u4ea4", ".gitignore", "locale/en/LC_MESSAGES/django.mo", "locale/zh_Hans/LC_MESSAGES/django.mo", "locale/zh_Hant/LC_MESSAGES/django.mo"]}, {"commit_id": "570e4bdd155d33ea5ebae2bf0c2dce22dcdef137", "commit_date": "Wed Nov 22 21:17:35 2023 +0800", "commit_message": "Merge pull request #690 from liangliangyy/dev", "files_name": []}], "parents": [{"commit_id_before": "ad98e00f7e3c26fef27c12ddc1d08128a47447e8", "url_before": "https://api.github.com/repos/liangliangyy/DjangoBlog/commits/ad98e00f7e3c26fef27c12ddc1d08128a47447e8", "html_url_before": "https://github.com/liangliangyy/DjangoBlog/commit/ad98e00f7e3c26fef27c12ddc1d08128a47447e8"}, {"commit_id_before": "25cde2da68bf5881a3132b225a850b738606dc6a", "url_before": "https://api.github.com/repos/liangliangyy/DjangoBlog/commits/25cde2da68bf5881a3132b225a850b738606dc6a", "html_url_before": "https://github.com/liangliangyy/DjangoBlog/commit/25cde2da68bf5881a3132b225a850b738606dc6a"}], "details": [{"raw_url": "https://github.com/liangliangyy/DjangoBlog/raw/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719/blog%2Ftemplatetags%2Fblog_tags.py", "code": "import hashlib\nimport logging\nimport random\nimport urllib\n\nfrom django import template\nfrom django.conf import settings\nfrom django.db.models import Q\nfrom django.shortcuts import get_object_or_404\nfrom django.template.defaultfilters import stringfilter\nfrom django.templatetags.static import static\nfrom django.urls import reverse\nfrom django.utils.safestring import mark_safe\n\nfrom blog.models import Article, Category, Tag, Links, SideBar, LinkShowType\nfrom comments.models import Comment\nfrom djangoblog.utils import CommonMarkdown, sanitize_html\nfrom djangoblog.utils import cache\nfrom djangoblog.utils import get_current_site\nfrom oauth.models import OAuthUser\n\nlogger = logging.getLogger(__name__)\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef timeformat(data):\n    try:\n        return data.strftime(settings.TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.simple_tag\ndef datetimeformat(data):\n    try:\n        return data.strftime(settings.DATE_TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.filter()\n@stringfilter\ndef custom_markdown(content):\n    return mark_safe(CommonMarkdown.get_markdown(content))\n\n\n@register.simple_tag\ndef get_markdown_toc(content):\n    from djangoblog.utils import CommonMarkdown\n    body, toc = CommonMarkdown.get_markdown_with_toc(content)\n    return mark_safe(toc)\n\n\n@register.filter()\n@stringfilter\ndef comment_markdown(content):\n    content = CommonMarkdown.get_markdown(content)\n    return mark_safe(sanitize_html(content))\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncatechars_content(content):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u5185\u5bb9\u7684\u6458\u8981\n    :param content:\n    :return:\n    \"\"\"\n    from django.template.defaultfilters import truncatechars_html\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    return truncatechars_html(content, blogsetting.article_sub_length)\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncate(content):\n    from django.utils.html import strip_tags\n\n    return strip_tags(content)[:150]\n\n\n@register.inclusion_tag('blog/tags/breadcrumb.html')\ndef load_breadcrumb(article):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u9762\u5305\u5c51\n    :param article:\n    :return:\n    \"\"\"\n    names = article.get_category_tree()\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    site = get_current_site().domain\n    names.append((blogsetting.site_name, '/'))\n    names = names[::-1]\n\n    return {\n        'names': names,\n        'title': article.title,\n        'count': len(names) + 1\n    }\n\n\n@register.inclusion_tag('blog/tags/article_tag_list.html')\ndef load_articletags(article):\n    \"\"\"\n    \u6587\u7ae0\u6807\u7b7e\n    :param article:\n    :return:\n    \"\"\"\n    tags = article.tags.all()\n    tags_list = []\n    for tag in tags:\n        url = tag.get_absolute_url()\n        count = tag.get_article_count()\n        tags_list.append((\n            url, count, tag, random.choice(settings.BOOTSTRAP_COLOR_TYPES)\n        ))\n    return {\n        'article_tags_list': tags_list\n    }\n\n\n@register.inclusion_tag('blog/tags/sidebar.html')\ndef load_sidebar(user, linktype):\n    \"\"\"\n    \u52a0\u8f7d\u4fa7\u8fb9\u680f\n    :return:\n    \"\"\"\n    value = cache.get(\"sidebar\" + linktype)\n    if value:\n        value['user'] = user\n        return value\n    else:\n        logger.info('load sidebar')\n        from djangoblog.utils import get_blog_setting\n        blogsetting = get_blog_setting()\n        recent_articles = Article.objects.filter(\n            status='p')[:blogsetting.sidebar_article_count]\n        sidebar_categorys = Category.objects.all()\n        extra_sidebars = SideBar.objects.filter(\n            is_enable=True).order_by('sequence')\n        most_read_articles = Article.objects.filter(status='p').order_by(\n            '-views')[:blogsetting.sidebar_article_count]\n        dates = Article.objects.datetimes('created_time', 'month', order='DESC')\n        links = Links.objects.filter(is_enable=True).filter(\n            Q(show_type=str(linktype)) | Q(show_type=LinkShowType.A))\n        commment_list = Comment.objects.filter(is_enable=True).order_by(\n            '-id')[:blogsetting.sidebar_comment_count]\n        # \u6807\u7b7e\u4e91 \u8ba1\u7b97\u5b57\u4f53\u5927\u5c0f\n        # \u6839\u636e\u603b\u6570\u8ba1\u7b97\u51fa\u5e73\u5747\u503c \u5927\u5c0f\u4e3a (\u6570\u76ee/\u5e73\u5747\u503c)*\u6b65\u957f\n        increment = 5\n        tags = Tag.objects.all()\n        sidebar_tags = None\n        if tags and len(tags) > 0:\n            s = [t for t in [(t, t.get_article_count()) for t in tags] if t[1]]\n            count = sum([t[1] for t in s])\n            dd = 1 if (count == 0 or not len(tags)) else count / len(tags)\n            import random\n            sidebar_tags = list(\n                map(lambda x: (x[0], x[1], (x[1] / dd) * increment + 10), s))\n            random.shuffle(sidebar_tags)\n\n        value = {\n            'recent_articles': recent_articles,\n            'sidebar_categorys': sidebar_categorys,\n            'most_read_articles': most_read_articles,\n            'article_dates': dates,\n            'sidebar_comments': commment_list,\n            'sidabar_links': links,\n            'show_google_adsense': blogsetting.show_google_adsense,\n            'google_adsense_codes': blogsetting.google_adsense_codes,\n            'open_site_comment': blogsetting.open_site_comment,\n            'show_gongan_code': blogsetting.show_gongan_code,\n            'sidebar_tags': sidebar_tags,\n            'extra_sidebars': extra_sidebars\n        }\n        cache.set(\"sidebar\" + linktype, value, 60 * 60 * 60 * 3)\n        logger.info('set sidebar cache.key:{key}'.format(key=\"sidebar\" + linktype))\n        value['user'] = user\n        return value\n\n\n@register.inclusion_tag('blog/tags/article_meta_info.html')\ndef load_article_metas(article, user):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0meta\u4fe1\u606f\n    :param article:\n    :return:\n    \"\"\"\n    return {\n        'article': article,\n        'user': user\n    }\n\n\n@register.inclusion_tag('blog/tags/article_pagination.html')\ndef load_pagination_info(page_obj, page_type, tag_name):\n    previous_url = ''\n    next_url = ''\n    if page_type == '':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse('blog:index_page', kwargs={'page': next_number})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:index_page', kwargs={\n                    'page': previous_number})\n    if page_type == '\u5206\u7c7b\u6807\u7b7e\u5f52\u6863':\n        tag = get_object_or_404(Tag, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'tag_name': tag.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'tag_name': tag.slug})\n    if page_type == '\u4f5c\u8005\u6587\u7ae0\u5f52\u6863':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'author_name': tag_name})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'author_name': tag_name})\n\n    if page_type == '\u5206\u7c7b\u76ee\u5f55\u5f52\u6863':\n        category = get_object_or_404(Category, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'category_name': category.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'category_name': category.slug})\n\n    return {\n        'previous_url': previous_url,\n        'next_url': next_url,\n        'page_obj': page_obj\n    }\n\n\n@register.inclusion_tag('blog/tags/article_info.html')\ndef load_article_detail(article, isindex, user):\n    \"\"\"\n    \u52a0\u8f7d\u6587\u7ae0\u8be6\u60c5\n    :param article:\n    :param isindex:\u662f\u5426\u5217\u8868\u9875\uff0c\u82e5\u662f\u5217\u8868\u9875\u53ea\u663e\u793a\u6458\u8981\n    :return:\n    \"\"\"\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n\n    return {\n        'article': article,\n        'isindex': isindex,\n        'user': user,\n        'open_site_comment': blogsetting.open_site_comment,\n    }\n\n\n# return only the URL of the gravatar\n# TEMPLATE USE:  {{ email|gravatar_url:150 }}\n@register.filter\ndef gravatar_url(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    cachekey = 'gravatat/' + email\n    url = cache.get(cachekey)\n    if url:\n        return url\n    else:\n        usermodels = OAuthUser.objects.filter(email=email)\n        if usermodels:\n            o = list(filter(lambda x: x.picture is not None, usermodels))\n            if o:\n                return o[0].picture\n        email = email.encode('utf-8')\n\n        default = static('blog/img/avatar.png')\n\n        url = \"https://www.gravatar.com/avatar/%s?%s\" % (hashlib.md5(\n            email.lower()).hexdigest(), urllib.parse.urlencode({'d': default, 's': str(size)}))\n        cache.set(cachekey, url, 60 * 60 * 10)\n        logger.info('set gravatar cache.key:{key}'.format(key=cachekey))\n        return url\n\n\n@register.filter\ndef gravatar(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    url = gravatar_url(email, size)\n    return mark_safe(\n        '<img src=\"%s\" height=\"%d\" width=\"%d\">' %\n        (url, size, size))\n\n\n@register.simple_tag\ndef query(qs, **kwargs):\n    \"\"\" template tag which allows queryset filtering. Usage:\n          {% query books author=author as mybooks %}\n          {% for book in mybooks %}\n            ...\n          {% endfor %}\n    \"\"\"\n    return qs.filter(**kwargs)\n\n\n@register.filter\ndef addstr(arg1, arg2):\n    \"\"\"concatenate arg1 & arg2\"\"\"\n    return str(arg1) + str(arg2)\n", "code_before": "import hashlib\nimport logging\nimport random\nimport urllib\n\nfrom django import template\nfrom django.conf import settings\nfrom django.db.models import Q\nfrom django.shortcuts import get_object_or_404\nfrom django.template.defaultfilters import stringfilter\nfrom django.templatetags.static import static\nfrom django.urls import reverse\nfrom django.utils.safestring import mark_safe\n\nfrom blog.models import Article, Category, Tag, Links, SideBar, LinkShowType\nfrom comments.models import Comment\nfrom djangoblog.utils import CommonMarkdown, sanitize_html\nfrom djangoblog.utils import cache\nfrom djangoblog.utils import get_current_site\nfrom oauth.models import OAuthUser\n\nlogger = logging.getLogger(__name__)\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef timeformat(data):\n    try:\n        return data.strftime(settings.TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.simple_tag\ndef datetimeformat(data):\n    try:\n        return data.strftime(settings.DATE_TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.filter()\n@stringfilter\ndef custom_markdown(content):\n    return mark_safe(CommonMarkdown.get_markdown(content))\n\n\n@register.simple_tag\ndef get_markdown_toc(content):\n    from djangoblog.utils import CommonMarkdown\n    body, toc = CommonMarkdown.get_markdown_with_toc(content)\n    return mark_safe(toc)\n\n\n@register.filter()\n@stringfilter\ndef comment_markdown(content):\n    content = CommonMarkdown.get_markdown(content)\n    return mark_safe(sanitize_html(content))\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncatechars_content(content):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u5185\u5bb9\u7684\u6458\u8981\n    :param content:\n    :return:\n    \"\"\"\n    from django.template.defaultfilters import truncatechars_html\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    return truncatechars_html(content, blogsetting.article_sub_length)\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncate(content):\n    from django.utils.html import strip_tags\n\n    return strip_tags(content)[:150]\n\n\n@register.inclusion_tag('blog/tags/breadcrumb.html')\ndef load_breadcrumb(article):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u9762\u5305\u5c51\n    :param article:\n    :return:\n    \"\"\"\n    names = article.get_category_tree()\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    site = get_current_site().domain\n    names.append((blogsetting.site_name, '/'))\n    names = names[::-1]\n\n    return {\n        'names': names,\n        'title': article.title,\n        'count': len(names) + 1\n    }\n\n\n@register.inclusion_tag('blog/tags/article_tag_list.html')\ndef load_articletags(article):\n    \"\"\"\n    \u6587\u7ae0\u6807\u7b7e\n    :param article:\n    :return:\n    \"\"\"\n    tags = article.tags.all()\n    tags_list = []\n    for tag in tags:\n        url = tag.get_absolute_url()\n        count = tag.get_article_count()\n        tags_list.append((\n            url, count, tag, random.choice(settings.BOOTSTRAP_COLOR_TYPES)\n        ))\n    return {\n        'article_tags_list': tags_list\n    }\n\n\n@register.inclusion_tag('blog/tags/sidebar.html')\ndef load_sidebar(user, linktype):\n    \"\"\"\n    \u52a0\u8f7d\u4fa7\u8fb9\u680f\n    :return:\n    \"\"\"\n    value = cache.get(\"sidebar\" + linktype)\n    if value:\n        value['user'] = user\n        return value\n    else:\n        logger.info('load sidebar')\n        from djangoblog.utils import get_blog_setting\n        blogsetting = get_blog_setting()\n        recent_articles = Article.objects.filter(\n            status='p')[:blogsetting.sidebar_article_count]\n        sidebar_categorys = Category.objects.all()\n        extra_sidebars = SideBar.objects.filter(\n            is_enable=True).order_by('sequence')\n        most_read_articles = Article.objects.filter(status='p').order_by(\n            '-views')[:blogsetting.sidebar_article_count]\n        dates = Article.objects.datetimes('created_time', 'month', order='DESC')\n        links = Links.objects.filter(is_enable=True).filter(\n            Q(show_type=str(linktype)) | Q(show_type=LinkShowType.A))\n        commment_list = Comment.objects.filter(is_enable=True).order_by(\n            '-id')[:blogsetting.sidebar_comment_count]\n        # \u6807\u7b7e\u4e91 \u8ba1\u7b97\u5b57\u4f53\u5927\u5c0f\n        # \u6839\u636e\u603b\u6570\u8ba1\u7b97\u51fa\u5e73\u5747\u503c \u5927\u5c0f\u4e3a (\u6570\u76ee/\u5e73\u5747\u503c)*\u6b65\u957f\n        increment = 5\n        tags = Tag.objects.all()\n        sidebar_tags = None\n        if tags and len(tags) > 0:\n            s = [t for t in [(t, t.get_article_count()) for t in tags] if t[1]]\n            count = sum([t[1] for t in s])\n            dd = 1 if (count == 0 or not len(tags)) else count / len(tags)\n            import random\n            sidebar_tags = list(\n                map(lambda x: (x[0], x[1], (x[1] / dd) * increment + 10), s))\n            random.shuffle(sidebar_tags)\n\n        value = {\n            'recent_articles': recent_articles,\n            'sidebar_categorys': sidebar_categorys,\n            'most_read_articles': most_read_articles,\n            'article_dates': dates,\n            'sidebar_comments': commment_list,\n            'sidabar_links': links,\n            'show_google_adsense': blogsetting.show_google_adsense,\n            'google_adsense_codes': blogsetting.google_adsense_codes,\n            'open_site_comment': blogsetting.open_site_comment,\n            'show_gongan_code': blogsetting.show_gongan_code,\n            'sidebar_tags': sidebar_tags,\n            'extra_sidebars': extra_sidebars\n        }\n        cache.set(\"sidebar\" + linktype, value, 60 * 60 * 60 * 3)\n        logger.info('set sidebar cache.key:{key}'.format(key=\"sidebar\" + linktype))\n        value['user'] = user\n        return value\n\n\n@register.inclusion_tag('blog/tags/article_meta_info.html')\ndef load_article_metas(article, user):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0meta\u4fe1\u606f\n    :param article:\n    :return:\n    \"\"\"\n    return {\n        'article': article,\n        'user': user\n    }\n\n\n@register.inclusion_tag('blog/tags/article_pagination.html')\ndef load_pagination_info(page_obj, page_type, tag_name):\n    previous_url = ''\n    next_url = ''\n    if page_type == '':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse('blog:index_page', kwargs={'page': next_number})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:index_page', kwargs={\n                    'page': previous_number})\n    if page_type == '\u5206\u7c7b\u6807\u7b7e\u5f52\u6863':\n        tag = get_object_or_404(Tag, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'tag_name': tag.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'tag_name': tag.slug})\n    if page_type == '\u4f5c\u8005\u6587\u7ae0\u5f52\u6863':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'author_name': tag_name})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'author_name': tag_name})\n\n    if page_type == '\u5206\u7c7b\u76ee\u5f55\u5f52\u6863':\n        category = get_object_or_404(Category, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'category_name': category.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'category_name': category.slug})\n\n    return {\n        'previous_url': previous_url,\n        'next_url': next_url,\n        'page_obj': page_obj\n    }\n\n\n@register.inclusion_tag('blog/tags/article_info.html')\ndef load_article_detail(article, isindex, user):\n    \"\"\"\n    \u52a0\u8f7d\u6587\u7ae0\u8be6\u60c5\n    :param article:\n    :param isindex:\u662f\u5426\u5217\u8868\u9875\uff0c\u82e5\u662f\u5217\u8868\u9875\u53ea\u663e\u793a\u6458\u8981\n    :return:\n    \"\"\"\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n\n    return {\n        'article': article,\n        'isindex': isindex,\n        'user': user,\n        'open_site_comment': blogsetting.open_site_comment,\n    }\n\n\n# return only the URL of the gravatar\n# TEMPLATE USE:  {{ email|gravatar_url:150 }}\n@register.filter\ndef gravatar_url(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    cachekey = 'gravatat/' + email\n    url = cache.get(cachekey)\n    if url:\n        return url\n    else:\n        usermodels = OAuthUser.objects.filter(email=email)\n        if usermodels:\n            o = list(filter(lambda x: x.picture is not None, usermodels))\n            if o:\n                return o[0].picture\n        email = email.encode('utf-8')\n\n        default = static('blog/img/avatar.png')\n\n        url = \"https://www.gravatar.com/avatar/%s?%s\" % (hashlib.md5(\n            email.lower()).hexdigest(), urllib.parse.urlencode({'d': default, 's': str(size)}))\n        cache.set(cachekey, url, 60 * 60 * 10)\n        logger.info('set gravatar cache.key:{key}'.format(key=cachekey))\n        return url\n\n\n@register.filter\ndef gravatar(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    url = gravatar_url(email, size)\n    return mark_safe(\n        '<img src=\"%s\" height=\"%d\" width=\"%d\">' %\n        (url, size, size))\n\n\n@register.simple_tag\ndef query(qs, **kwargs):\n    \"\"\" template tag which allows queryset filtering. Usage:\n          {% query books author=author as mybooks %}\n          {% for book in mybooks %}\n            ...\n          {% endfor %}\n    \"\"\"\n    return qs.filter(**kwargs)\n\n\n@register.filter\ndef addstr(arg1, arg2):\n    \"\"\"concatenate arg1 & arg2\"\"\"\n    return str(arg1) + str(arg2)\n", "patch": "@@ -14,7 +14,7 @@\n \n from blog.models import Article, Category, Tag, Links, SideBar, LinkShowType\n from comments.models import Comment\n-from djangoblog.utils import CommonMarkdown\n+from djangoblog.utils import CommonMarkdown, sanitize_html\n from djangoblog.utils import cache\n from djangoblog.utils import get_current_site\n from oauth.models import OAuthUser\n@@ -55,6 +55,13 @@ def get_markdown_toc(content):\n     return mark_safe(toc)\n \n \n+@register.filter()\n+@stringfilter\n+def comment_markdown(content):\n+    content = CommonMarkdown.get_markdown(content)\n+    return mark_safe(sanitize_html(content))\n+\n+\n @register.filter(is_safe=True)\n @stringfilter\n def truncatechars_content(content):", "file_path": "files/2023_5/146", "file_language": "py", "file_name": "blog/templatetags/blog_tags.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.audit.avoid-mark-safe.avoid-mark-safe                                   \n          'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and\n          could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to\n          build HTML for rendering instead.                                                           \n          Details: https://sg.run/yd0P                                                                \n\n           55\u2506 return mark_safe(toc)"]]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/liangliangyy/DjangoBlog/raw/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719/djangoblog%2Futils.py", "code": "#!/usr/bin/env python\n# encoding: utf-8\n\n\nimport logging\nimport os\nimport random\nimport string\nimport uuid\nfrom hashlib import sha256\n\nimport bleach\nimport markdown\nimport requests\nfrom django.conf import settings\nfrom django.contrib.sites.models import Site\nfrom django.core.cache import cache\nfrom django.templatetags.static import static\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_max_articleid_commentid():\n    from blog.models import Article\n    from comments.models import Comment\n    return (Article.objects.latest().pk, Comment.objects.latest().pk)\n\n\ndef get_sha256(str):\n    m = sha256(str.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef cache_decorator(expiration=3 * 60):\n    def wrapper(func):\n        def news(*args, **kwargs):\n            try:\n                view = args[0]\n                key = view.get_cache_key()\n            except:\n                key = None\n            if not key:\n                unique_str = repr((func, args, kwargs))\n\n                m = sha256(unique_str.encode('utf-8'))\n                key = m.hexdigest()\n            value = cache.get(key)\n            if value is not None:\n                # logger.info('cache_decorator get cache:%s key:%s' % (func.__name__, key))\n                if str(value) == '__default_cache_value__':\n                    return None\n                else:\n                    return value\n            else:\n                logger.debug(\n                    'cache_decorator set cache:%s key:%s' %\n                    (func.__name__, key))\n                value = func(*args, **kwargs)\n                if value is None:\n                    cache.set(key, '__default_cache_value__', expiration)\n                else:\n                    cache.set(key, value, expiration)\n                return value\n\n        return news\n\n    return wrapper\n\n\ndef expire_view_cache(path, servername, serverport, key_prefix=None):\n    '''\n    \u5237\u65b0\u89c6\u56fe\u7f13\u5b58\n    :param path:url\u8def\u5f84\n    :param servername:host\n    :param serverport:\u7aef\u53e3\n    :param key_prefix:\u524d\u7f00\n    :return:\u662f\u5426\u6210\u529f\n    '''\n    from django.http import HttpRequest\n    from django.utils.cache import get_cache_key\n\n    request = HttpRequest()\n    request.META = {'SERVER_NAME': servername, 'SERVER_PORT': serverport}\n    request.path = path\n\n    key = get_cache_key(request, key_prefix=key_prefix, cache=cache)\n    if key:\n        logger.info('expire_view_cache:get key:{path}'.format(path=path))\n        if cache.get(key):\n            cache.delete(key)\n        return True\n    return False\n\n\n@cache_decorator()\ndef get_current_site():\n    site = Site.objects.get_current()\n    return site\n\n\nclass CommonMarkdown:\n    @staticmethod\n    def _convert_markdown(value):\n        md = markdown.Markdown(\n            extensions=[\n                'extra',\n                'codehilite',\n                'toc',\n                'tables',\n            ]\n        )\n        body = md.convert(value)\n        toc = md.toc\n        return body, toc\n\n    @staticmethod\n    def get_markdown_with_toc(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body, toc\n\n    @staticmethod\n    def get_markdown(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body\n\n\ndef send_email(emailto, title, content):\n    from djangoblog.blog_signals import send_email_signal\n    send_email_signal.send(\n        send_email.__class__,\n        emailto=emailto,\n        title=title,\n        content=content)\n\n\ndef generate_code() -> str:\n    \"\"\"\u751f\u6210\u968f\u673a\u6570\u9a8c\u8bc1\u7801\"\"\"\n    return ''.join(random.sample(string.digits, 6))\n\n\ndef parse_dict_to_url(dict):\n    from urllib.parse import quote\n    url = '&'.join(['{}={}'.format(quote(k, safe='/'), quote(v, safe='/'))\n                    for k, v in dict.items()])\n    return url\n\n\ndef get_blog_setting():\n    value = cache.get('get_blog_setting')\n    if value:\n        return value\n    else:\n        from blog.models import BlogSettings\n        if not BlogSettings.objects.count():\n            setting = BlogSettings()\n            setting.site_name = 'djangoblog'\n            setting.site_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_seo_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_keywords = 'Django,Python'\n            setting.article_sub_length = 300\n            setting.sidebar_article_count = 10\n            setting.sidebar_comment_count = 5\n            setting.show_google_adsense = False\n            setting.open_site_comment = True\n            setting.analytics_code = ''\n            setting.beian_code = ''\n            setting.show_gongan_code = False\n            setting.comment_need_review = False\n            setting.save()\n        value = BlogSettings.objects.first()\n        logger.info('set cache get_blog_setting')\n        cache.set('get_blog_setting', value)\n        return value\n\n\ndef save_user_avatar(url):\n    '''\n    \u4fdd\u5b58\u7528\u6237\u5934\u50cf\n    :param url:\u5934\u50cfurl\n    :return: \u672c\u5730\u8def\u5f84\n    '''\n    logger.info(url)\n\n    try:\n        basedir = os.path.join(settings.STATICFILES, 'avatar')\n        rsp = requests.get(url, timeout=2)\n        if rsp.status_code == 200:\n            if not os.path.exists(basedir):\n                os.makedirs(basedir)\n\n            image_extensions = ['.jpg', '.png', 'jpeg', '.gif']\n            isimage = len([i for i in image_extensions if url.endswith(i)]) > 0\n            ext = os.path.splitext(url)[1] if isimage else '.jpg'\n            save_filename = str(uuid.uuid4().hex) + ext\n            logger.info('\u4fdd\u5b58\u7528\u6237\u5934\u50cf:' + basedir + save_filename)\n            with open(os.path.join(basedir, save_filename), 'wb+') as file:\n                file.write(rsp.content)\n            return static('avatar/' + save_filename)\n    except Exception as e:\n        logger.error(e)\n        return static('blog/img/avatar.png')\n\n\ndef delete_sidebar_cache():\n    from blog.models import LinkShowType\n    keys = [\"sidebar\" + x for x in LinkShowType.values]\n    for k in keys:\n        logger.info('delete sidebar key:' + k)\n        cache.delete(k)\n\n\ndef delete_view_cache(prefix, keys):\n    from django.core.cache.utils import make_template_fragment_key\n    key = make_template_fragment_key(prefix, keys)\n    cache.delete(key)\n\n\ndef get_resource_url():\n    if settings.STATIC_URL:\n        return settings.STATIC_URL\n    else:\n        site = get_current_site()\n        return 'http://' + site.domain + '/static/'\n\n\nALLOWED_TAGS = ['a', 'abbr', 'acronym', 'b', 'blockquote', 'code', 'em', 'i', 'li', 'ol', 'pre', 'strong', 'ul', 'h1',\n                'h2', 'p']\nALLOWED_ATTRIBUTES = {'a': ['href', 'title'], 'abbr': ['title'], 'acronym': ['title']}\n\n\ndef sanitize_html(html):\n    return bleach.clean(html, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES)\n", "code_before": "#!/usr/bin/env python\n# encoding: utf-8\n\n\nimport logging\nimport os\nimport random\nimport string\nimport uuid\nfrom hashlib import sha256\n\nimport bleach\nimport markdown\nimport requests\nfrom django.conf import settings\nfrom django.contrib.sites.models import Site\nfrom django.core.cache import cache\nfrom django.templatetags.static import static\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_max_articleid_commentid():\n    from blog.models import Article\n    from comments.models import Comment\n    return (Article.objects.latest().pk, Comment.objects.latest().pk)\n\n\ndef get_sha256(str):\n    m = sha256(str.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef cache_decorator(expiration=3 * 60):\n    def wrapper(func):\n        def news(*args, **kwargs):\n            try:\n                view = args[0]\n                key = view.get_cache_key()\n            except:\n                key = None\n            if not key:\n                unique_str = repr((func, args, kwargs))\n\n                m = sha256(unique_str.encode('utf-8'))\n                key = m.hexdigest()\n            value = cache.get(key)\n            if value is not None:\n                # logger.info('cache_decorator get cache:%s key:%s' % (func.__name__, key))\n                if str(value) == '__default_cache_value__':\n                    return None\n                else:\n                    return value\n            else:\n                logger.debug(\n                    'cache_decorator set cache:%s key:%s' %\n                    (func.__name__, key))\n                value = func(*args, **kwargs)\n                if value is None:\n                    cache.set(key, '__default_cache_value__', expiration)\n                else:\n                    cache.set(key, value, expiration)\n                return value\n\n        return news\n\n    return wrapper\n\n\ndef expire_view_cache(path, servername, serverport, key_prefix=None):\n    '''\n    \u5237\u65b0\u89c6\u56fe\u7f13\u5b58\n    :param path:url\u8def\u5f84\n    :param servername:host\n    :param serverport:\u7aef\u53e3\n    :param key_prefix:\u524d\u7f00\n    :return:\u662f\u5426\u6210\u529f\n    '''\n    from django.http import HttpRequest\n    from django.utils.cache import get_cache_key\n\n    request = HttpRequest()\n    request.META = {'SERVER_NAME': servername, 'SERVER_PORT': serverport}\n    request.path = path\n\n    key = get_cache_key(request, key_prefix=key_prefix, cache=cache)\n    if key:\n        logger.info('expire_view_cache:get key:{path}'.format(path=path))\n        if cache.get(key):\n            cache.delete(key)\n        return True\n    return False\n\n\n@cache_decorator()\ndef get_current_site():\n    site = Site.objects.get_current()\n    return site\n\n\nclass CommonMarkdown:\n    @staticmethod\n    def _convert_markdown(value):\n        md = markdown.Markdown(\n            extensions=[\n                'extra',\n                'codehilite',\n                'toc',\n                'tables',\n            ]\n        )\n        body = md.convert(value)\n        toc = md.toc\n        return body, toc\n\n    @staticmethod\n    def get_markdown_with_toc(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body, toc\n\n    @staticmethod\n    def get_markdown(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body\n\n\ndef send_email(emailto, title, content):\n    from djangoblog.blog_signals import send_email_signal\n    send_email_signal.send(\n        send_email.__class__,\n        emailto=emailto,\n        title=title,\n        content=content)\n\n\ndef generate_code() -> str:\n    \"\"\"\u751f\u6210\u968f\u673a\u6570\u9a8c\u8bc1\u7801\"\"\"\n    return ''.join(random.sample(string.digits, 6))\n\n\ndef parse_dict_to_url(dict):\n    from urllib.parse import quote\n    url = '&'.join(['{}={}'.format(quote(k, safe='/'), quote(v, safe='/'))\n                    for k, v in dict.items()])\n    return url\n\n\ndef get_blog_setting():\n    value = cache.get('get_blog_setting')\n    if value:\n        return value\n    else:\n        from blog.models import BlogSettings\n        if not BlogSettings.objects.count():\n            setting = BlogSettings()\n            setting.site_name = 'djangoblog'\n            setting.site_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_seo_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_keywords = 'Django,Python'\n            setting.article_sub_length = 300\n            setting.sidebar_article_count = 10\n            setting.sidebar_comment_count = 5\n            setting.show_google_adsense = False\n            setting.open_site_comment = True\n            setting.analytics_code = ''\n            setting.beian_code = ''\n            setting.show_gongan_code = False\n            setting.comment_need_review = False\n            setting.save()\n        value = BlogSettings.objects.first()\n        logger.info('set cache get_blog_setting')\n        cache.set('get_blog_setting', value)\n        return value\n\n\ndef save_user_avatar(url):\n    '''\n    \u4fdd\u5b58\u7528\u6237\u5934\u50cf\n    :param url:\u5934\u50cfurl\n    :return: \u672c\u5730\u8def\u5f84\n    '''\n    logger.info(url)\n\n    try:\n        basedir = os.path.join(settings.STATICFILES, 'avatar')\n        rsp = requests.get(url, timeout=2)\n        if rsp.status_code == 200:\n            if not os.path.exists(basedir):\n                os.makedirs(basedir)\n\n            image_extensions = ['.jpg', '.png', 'jpeg', '.gif']\n            isimage = len([i for i in image_extensions if url.endswith(i)]) > 0\n            ext = os.path.splitext(url)[1] if isimage else '.jpg'\n            save_filename = str(uuid.uuid4().hex) + ext\n            logger.info('\u4fdd\u5b58\u7528\u6237\u5934\u50cf:' + basedir + save_filename)\n            with open(os.path.join(basedir, save_filename), 'wb+') as file:\n                file.write(rsp.content)\n            return static('avatar/' + save_filename)\n    except Exception as e:\n        logger.error(e)\n        return static('blog/img/avatar.png')\n\n\ndef delete_sidebar_cache():\n    from blog.models import LinkShowType\n    keys = [\"sidebar\" + x for x in LinkShowType.values]\n    for k in keys:\n        logger.info('delete sidebar key:' + k)\n        cache.delete(k)\n\n\ndef delete_view_cache(prefix, keys):\n    from django.core.cache.utils import make_template_fragment_key\n    key = make_template_fragment_key(prefix, keys)\n    cache.delete(key)\n\n\ndef get_resource_url():\n    if settings.STATIC_URL:\n        return settings.STATIC_URL\n    else:\n        site = get_current_site()\n        return 'http://' + site.domain + '/static/'\n\n\nALLOWED_TAGS = ['a', 'abbr', 'acronym', 'b', 'blockquote', 'code', 'em', 'i', 'li', 'ol', 'pre', 'strong', 'ul', 'h1',\n                'h2', 'p']\nALLOWED_ATTRIBUTES = {'a': ['href', 'title'], 'abbr': ['title'], 'acronym': ['title']}\n\n\ndef sanitize_html(html):\n    return bleach.clean(html, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES)\n", "patch": "@@ -9,6 +9,7 @@\n import uuid\n from hashlib import sha256\n \n+import bleach\n import markdown\n import requests\n from django.conf import settings\n@@ -220,3 +221,12 @@ def get_resource_url():\n     else:\n         site = get_current_site()\n         return 'http://' + site.domain + '/static/'\n+\n+\n+ALLOWED_TAGS = ['a', 'abbr', 'acronym', 'b', 'blockquote', 'code', 'em', 'i', 'li', 'ol', 'pre', 'strong', 'ul', 'h1',\n+                'h2', 'p']\n+ALLOWED_ATTRIBUTES = {'a': ['href', 'title'], 'abbr': ['title'], 'acronym': ['title']}\n+\n+\n+def sanitize_html(html):\n+    return bleach.clean(html, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES)", "file_path": "files/2023_5/147", "file_language": "py", "file_name": "djangoblog/utils.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/liangliangyy/DjangoBlog/raw/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719/templates%2Fcomments%2Ftags%2Fcomment_item.html", "code": "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            <div>{{ comment_item.created_time }}</div>\n            <div>\u56de\u590d\u7ed9:@{{ comment_item.author.parent_comment.username }}</div>\n        </div>\n        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->", "code_before": "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            <div>{{ comment_item.created_time }}</div>\n            <div>\u56de\u590d\u7ed9:@{{ comment_item.author.parent_comment.username }}</div>\n        </div>\n        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->", "patch": "@@ -24,7 +24,7 @@\n             <div>{{ comment_item.created_time }}</div>\n             <div>\u56de\u590d\u7ed9:@{{ comment_item.author.parent_comment.username }}</div>\n         </div>\n-        <p>{{ comment_item.body|escape|custom_markdown }}</p>\n+        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n         <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                               href=\"javascript:void(0)\"\n                               onclick=\"do_reply({{ comment_item.pk }})\"", "file_path": "files/2023_5/148", "file_language": "html", "file_name": "templates/comments/tags/comment_item.html", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/liangliangyy/DjangoBlog/raw/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719/templates%2Fcomments%2Ftags%2Fcomment_item_tree.html", "code": "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\"\n    style=\"margin-left: {% widthratio depth 1 3 %}rem\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            {{ comment_item.created_time }}\n        </div>\n        <p>\n            {% if comment_item.parent_comment %}\n                <div>\u56de\u590d <a\n                        href=\"#comment-{{ comment_item.parent_comment.pk }}\">@{{ comment_item.parent_comment.author.username }}</a>\n                </div>\n            {% endif %}\n        </p>\n\n        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->\n{% query article_comments parent_comment=comment_item as cc_comments %}\n{% for cc in cc_comments %}\n    {% with comment_item=cc template_name=\"comments/tags/comment_item_tree.html\" %}\n        {% if depth >= 1 %}\n            {% include template_name %}\n        {% else %}\n            {% with depth=depth|add:1 %}\n                {% include template_name %}\n            {% endwith %}\n        {% endif %}\n    {% endwith %}\n{% endfor %}", "code_before": "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\"\n    style=\"margin-left: {% widthratio depth 1 3 %}rem\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            {{ comment_item.created_time }}\n        </div>\n        <p>\n            {% if comment_item.parent_comment %}\n                <div>\u56de\u590d <a\n                        href=\"#comment-{{ comment_item.parent_comment.pk }}\">@{{ comment_item.parent_comment.author.username }}</a>\n                </div>\n            {% endif %}\n        </p>\n\n        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->\n{% query article_comments parent_comment=comment_item as cc_comments %}\n{% for cc in cc_comments %}\n    {% with comment_item=cc template_name=\"comments/tags/comment_item_tree.html\" %}\n        {% if depth >= 1 %}\n            {% include template_name %}\n        {% else %}\n            {% with depth=depth|add:1 %}\n                {% include template_name %}\n            {% endwith %}\n        {% endif %}\n    {% endwith %}\n{% endfor %}", "patch": "@@ -32,7 +32,7 @@\n             {% endif %}\n         </p>\n \n-        <p>{{ comment_item.body|escape|custom_markdown }}</p>\n+        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n \n         <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                               href=\"javascript:void(0)\"", "file_path": "files/2023_5/149", "file_language": "html", "file_name": "templates/comments/tags/comment_item_tree.html", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
