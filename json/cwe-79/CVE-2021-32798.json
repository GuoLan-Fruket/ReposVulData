{"index": 6385, "cve_id": "CVE-2021-32798", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "The Jupyter notebook is a web-based notebook environment for interactive computing. In affected versions untrusted notebook can execute code on load. Jupyter Notebook uses a deprecated version of Google Caja to sanitize user inputs. A public Caja bypass can be used to trigger an XSS when a victim opens a malicious ipynb document in Jupyter Notebook. The XSS allows an attacker to execute arbitrary code on the victim computer using Jupyter APIs.", "cvss": "9.6", "publish_date": "August 9, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "79fc76e890a8ec42f73a3d009e44ef84c14ef0d5", "commit_message": "Merge pull request from GHSA-hwvq-6gjx-j797\n\n* sanitizer fix\n\n* Pass sanitizer options explicitly", "commit_date": "2021-08-05T17:50:10Z", "project": "jupyter/notebook", "url": "https://api.github.com/repos/jupyter/notebook/commits/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5", "html_url": "https://github.com/jupyter/notebook/commit/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5", "windows_before": [{"commit_id": "903f2d3d760f6cc254fcb45989ea8f21337764f6", "commit_date": "Mon Aug 2 16:45:08 2021 +0200", "commit_message": "Enhancements to the desktop entry (#6099)", "files_name": ["jupyter-notebook.desktop"]}, {"commit_id": "94ac6d73c5b770b3ed411b08e17af6aa418c9766", "commit_date": "Wed Jul 28 21:54:52 2021 +0530", "commit_message": "Fix issue #3218 (#6108)", "files_name": ["notebook/static/notebook/less/notificationarea.less", "notebook/static/tree/less/tree.less"]}, {"commit_id": "540a45ae553364386111991a4e6559c93914937b", "commit_date": "Fri Jul 23 09:02:21 2021 +0200", "commit_message": "Release 0.3.0rc1", "files_name": [".bumpversion.cfg", "app/package.json", "buildutils/package.json", "packages/_metapackage/package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "retrolab/_version.py"]}, {"commit_id": "d9c5c56d550f877e12c2a223a37046d09679badc", "commit_date": "Fri Jul 23 08:51:31 2021 +0200", "commit_message": "Merge pull request #188 from jupyterlab/changelog-946f49cceb2b11eb98d9776351d1d298", "files_name": ["b9a62a9bda70398ec244657b9b6e562d1a32c167 - Thu Jul 22 20:29:57 2021 +0000 : Automated Changelog Entry for 0.3.0rc1 on main", "CHANGELOG.md"]}, {"commit_id": "9eaa171504b94869b850a46b97f748394d2154fa", "commit_date": "Thu Jul 22 21:15:00 2021 +0200", "commit_message": "Merge pull request #187 from jtpio/istatedb-plugin", "files_name": ["ee4e266e17f94ab665c07ae67cd3556e626b885f - Thu Jul 22 21:00:41 2021 +0200 : Provide `IStateDB`", "app/index.js"]}, {"commit_id": "9e36fde26e3005cebc80e0b5228a38a25a95eb81", "commit_date": "Thu Jul 22 20:41:26 2021 +0200", "commit_message": "Merge pull request #186 from jtpio/rc2", "files_name": ["16126809cd75a99cb81c4d115c02b2362d621020 - Thu Jul 22 16:28:19 2021 +0200 : Update python package to rc2", "pyproject.toml", "setup.cfg"]}, {"commit_id": "44a9b5f96a51fe1ce96f3b7db447b08d990c4d24", "commit_date": "Thu Jul 22 10:22:24 2021 +0200", "commit_message": "Update resolutions", "files_name": ["app/package.json"]}, {"commit_id": "75e15192769efda1166f097cfd13ec61b1b861d3", "commit_date": "Thu Jul 22 10:20:53 2021 +0200", "commit_message": "Update to JupyterLab 3.1.0rc2", "files_name": ["app/index.js", "app/package.json", "buildutils/package.json", "package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "yarn.lock"]}, {"commit_id": "a7ed40634f95cd21b718e60bc9697026604be08e", "commit_date": "Thu Jul 22 17:19:59 2021 +0200", "commit_message": "Improve the bump version script (#185)", "files_name": [".github/workflows/check-release.yml", "MANIFEST.in", "buildutils/src/release-bump.ts", "buildutils/src/utils.ts", "package.json", "packages/lab-extension/package.json", "pyproject.toml", "retrolab.png"]}, {"commit_id": "3f26c0f16234909394ed27c819d32ad331505963", "commit_date": "Tue Jul 20 14:55:24 2021 +0200", "commit_message": "Add check-release CI workflow and Changelog (#173)", "files_name": [".github/workflows/check-release.yml", ".github/workflows/release.yml", "CHANGELOG.md", "package.json"]}, {"commit_id": "7ec1019882df37b920f10e0f03cc5418597c3cd7", "commit_date": "Wed Jul 14 15:32:34 2021 +0200", "commit_message": "Release 0.3.0rc0", "files_name": [".bumpversion.cfg", "app/package.json", "buildutils/package.json", "packages/_metapackage/package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "retrolab/_version.py"]}, {"commit_id": "f26a3d6e6af0d4c2d5d3abc5b0f66108cd4d5df3", "commit_date": "Wed Jul 14 15:28:03 2021 +0200", "commit_message": "Merge pull request #180 from jtpio/changelog-0.3.0-rc0", "files_name": ["0eb2680b897f683c32325fcbdbfe0212a6d578f3 - Wed Jul 14 15:16:47 2021 +0200 : Add changelog for v0.3.0rc0", "CHANGELOG.md"]}, {"commit_id": "96671df35822f09721fd2e5df7118ce4fa2225ea", "commit_date": "Wed Jul 14 15:11:46 2021 +0200", "commit_message": "Update to jupyter-packaging 0.10 (#179)", "files_name": [".github/workflows/build.yml", ".github/workflows/buildutils.yml", ".github/workflows/release.yml", "CONTRIBUTING.md", "MANIFEST.in", "RELEASE.md", "binder/postBuild", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/tsconfig.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "pyproject.toml", "setup.cfg", "setup.py"]}, {"commit_id": "b2ca240c633257929fbd456a552597cb731f8850", "commit_date": "Wed Jul 14 10:51:10 2021 +0200", "commit_message": "Merge pull request #178 from jtpio/mobile-css", "files_name": ["17c977d4dda1fef4ebdcb009ead33ff7b7be7d84 - Wed Jul 14 10:30:44 2021 +0200 : Keep retro checkpoint CSS in mobile view", "packages/notebook-extension/style/base.css"]}, {"commit_id": "356b7965d8bfb8c23fd697e56ca1f9998c84a1ae", "commit_date": "Wed Jul 14 10:08:59 2021 +0200", "commit_message": "Reuse mobile view CSS from upstream JupyterLab", "files_name": ["packages/notebook-extension/style/base.css"]}, {"commit_id": "030314a8454e7d6b176a58d93f6a2d84ddb81854", "commit_date": "Wed Jul 14 10:06:48 2021 +0200", "commit_message": "Merge pull request #177 from jtpio/version", "files_name": ["40a1f2e817696d6de85e0689290e016fbe08ec8c - Wed Jul 14 09:57:02 2021 +0200 : `jupyter retro --version` returns the version", "retrolab/app.py"]}, {"commit_id": "773dff6d99215b5c9e68f8787676df57247c97a9", "commit_date": "Wed Jul 14 09:47:19 2021 +0200", "commit_message": "Merge pull request #176 from jtpio/lab-rc", "files_name": ["caa355c54467b22c8931b15be105c24f0598236b - Wed Jul 14 09:17:34 2021 +0200 : Update resolutions", "app/package.json"]}, {"commit_id": "b5ce67252e65cc8727b64ce57ca6f5bc143c78a3", "commit_date": "Tue Jul 13 15:39:31 2021 -0700", "commit_message": "Merge pull request #6101 from frenzymadness/patch-2", "files_name": ["4504721f73ffd28ca545cfd55b1fa2b560155a1d - Tue Jul 13 21:25:08 2021 +0200 : Update lab Python package to rc1", "pyproject.toml", "setup.py"]}, {"commit_id": "006ae6822ca845d707e4aa5db34128a36bceb59f", "commit_date": "Tue Jul 13 21:23:19 2021 +0200", "commit_message": "Update to JupyterLab 3.1.0rc1", "files_name": ["app/package.json", "buildutils/package.json", "package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "yarn.lock"]}, {"commit_id": "d61017515ece7b39a1f383fd48475883c11dad53", "commit_date": "Tue Jul 6 10:58:44 2021 +0200", "commit_message": "Release 0.3.0b0", "files_name": [".bumpversion.cfg", "app/package.json", "buildutils/package.json", "packages/_metapackage/package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "retrolab/_version.py"]}, {"commit_id": "ff42cbed673111c92bf5a1c438920ae2542a81f9", "commit_date": "Tue Jul 6 10:52:15 2021 +0200", "commit_message": "Merge pull request #174 from jtpio/changelog", "files_name": ["14f9e2b9c0ce863b60765b1310c3a4ec02ea30e9 - Tue Jul 6 08:51:53 2021 +0200 : Add Changelog for 0.3.0b0", "CHANGELOG.md"]}, {"commit_id": "574da61aa7c8cc4aa6840b0e548860f7ceeb11dc", "commit_date": "Mon Jul 5 20:39:25 2021 +0200", "commit_message": "Merge pull request #167 from jtpio/alpha-13", "files_name": ["a4c0a3a04d41a39f98da875477ca1881776f628c - Mon Jul 5 20:01:15 2021 +0200 : Cleanup", ".eslintrc.js", "app/package.json"]}, {"commit_id": "6c4648e8c0f3a6ddcbd7437ab216e54f94556c9e", "commit_date": "Mon Jul 5 19:44:49 2021 +0200", "commit_message": "Test on multiple browsers", "files_name": ["app/playwright.config.ts"]}, {"commit_id": "38401e17d03fc9e6a9ef59167eb914c2aa54df05", "commit_date": "Mon Jul 5 19:17:51 2021 +0200", "commit_message": "Fix rename test", "files_name": [".github/workflows/build.yml", "app/test/notebook.spec.ts", "packages/application-extension/src/index.ts"]}, {"commit_id": "6e7e1eb712958ec2124b99c300fb55ed480c662e", "commit_date": "Mon Jul 5 18:04:08 2021 +0200", "commit_message": "Update to @playwright/test as the test runner", "files_name": [".eslintrc.js", ".github/workflows/build.yml", ".gitignore", "app/babel.config.js", "app/jest-setup.js", "app/jest.config.js", "app/package.json", "app/playwright.config.ts", "app/test/notebook.spec.ts", "app/test/smoke.spec.ts", "app/test/tree.spec.ts"]}], "windows_after": [{"commit_id": "c73e2318aee7aecc4b43b7bb532d669d8880b502", "commit_date": "Thu Aug 5 12:54:02 2021 -0500", "commit_message": "Release 6.4.1", "files_name": ["notebook/_version.py", "notebook/static/base/js/namespace.js", "pyproject.toml"]}, {"commit_id": "b69dc8c7591198901e80fc54cb5623a6f28ba56d", "commit_date": "Thu Aug 5 12:57:33 2021 -0500", "commit_message": "Back to dev version", "files_name": ["notebook/_version.py", "notebook/static/base/js/namespace.js", "pyproject.toml"]}, {"commit_id": "999e8322bcd24e0ed62b180c19ec13db3f48165b", "commit_date": "Fri Aug 6 12:15:07 2021 +0100", "commit_message": "Add missing file to manifest (#6122)", "files_name": ["MANIFEST.in", "RELEASE.md", "pyproject.toml"]}, {"commit_id": "9c161384262fb1fdd79531b84b959de72e9b48ea", "commit_date": "Fri Aug 6 06:38:51 2021 -0500", "commit_message": "Automated Changelog Entry for 6.4.2 on master (#6125)", "files_name": ["CHANGELOG.md"]}, {"commit_id": "eb6c69de2d410d312b249eae3037f3fcad683094", "commit_date": "Fri Aug 6 11:46:36 2021 +0000", "commit_message": "Publish 6.4.2", "files_name": ["notebook/_version.py", "notebook/static/base/js/namespace.js", "pyproject.toml"]}, {"commit_id": "7a9e58438c13e49c9dcc7043c2839bfd8ab90dfd", "commit_date": "Mon Aug 9 11:11:43 2021 +0300", "commit_message": "Fix send2trash tests failing on Windows", "files_name": ["setup.py"]}, {"commit_id": "326821b61c599dc2696dd472306c0788359a079a", "commit_date": "Mon Aug 9 23:47:08 2021 +0900", "commit_message": "Fix syntax highlight", "files_name": ["docs/source/extending/savehooks.rst"]}, {"commit_id": "44c7f1260becf1cbdc83690a859eaeb5e4332c10", "commit_date": "Tue Aug 10 08:43:56 2021 -0500", "commit_message": "clean up link checking (#6130)", "files_name": [".github/workflows/check-release.yml", "notebook/tests/README.md", "pyproject.toml"]}, {"commit_id": "53c6ef07108c63b89b0322ac6007b5e9681dadeb", "commit_date": "Tue Aug 10 23:18:56 2021 +0100", "commit_message": "Switch webpack to production mode", "files_name": ["package.json", "webpack.config.js"]}, {"commit_id": "4ddc293cc52813736f0435c3ef78686737660ebb", "commit_date": "Tue Aug 10 15:32:53 2021 -0700", "commit_message": "Merge pull request #6131 from afshin/webpack-production", "files_name": ["3909a151a98c643d380af8f0e767d8d08a6b7388 - Wed Aug 11 00:13:55 2021 +0100 : Add @babel/core dependency", "package.json"]}, {"commit_id": "c373bd89adaaddffbb71747ebbcfe8a749cae0a8", "commit_date": "Tue Aug 10 16:45:43 2021 -0700", "commit_message": "Merge pull request #6133 from afshin/babel-core", "files_name": ["e1337ec12462e6cb23ba4e774dd95f0399531d03 - Wed Aug 11 03:48:42 2021 -0700 : Automated Changelog Entry for 6.4.3 on master (#6135)", "CHANGELOG.md"]}, {"commit_id": "021f836c468e3cacfa340d29d63b2d044c10ef09", "commit_date": "Wed Aug 11 10:54:28 2021 +0000", "commit_message": "Publish 6.4.3", "files_name": ["notebook/_version.py", "notebook/static/base/js/namespace.js", "pyproject.toml"]}, {"commit_id": "b2c07890987634529aea3bee20ec4d6ca75e6dd3", "commit_date": "Wed Aug 18 09:47:00 2021 -0700", "commit_message": "Merge pull request #6128 from massongit/patch-1", "files_name": ["b75ee54f5643cba11700b7ec537fbbab177d6928 - Wed Aug 25 11:57:37 2021 -0500 : Update Manual Release Instructions (#6152)", "RELEASE.md"]}, {"commit_id": "ce4d7f53e8b5ec70c61e33b29c938c91506d7ea1", "commit_date": "Fri Aug 27 15:24:08 2021 +0200", "commit_message": "Update to JupyterLab 3.1 final", "files_name": ["app/package.json", "buildutils/package.json", "package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "yarn.lock"]}, {"commit_id": "9ac4e52ffe730d4566d434655f39a8ee052705eb", "commit_date": "Fri Aug 27 15:36:20 2021 +0200", "commit_message": "Update Python packages to the latest jupyterlab", "files_name": ["pyproject.toml", "setup.cfg"]}, {"commit_id": "abe87012d295864ed0581e2b7d930ca3325909d6", "commit_date": "Fri Aug 27 15:55:32 2021 +0200", "commit_message": "Skip releaser check-links for now", "files_name": ["package.json"]}, {"commit_id": "2d5c297eca02dc862d330f9bba5487bb18e81c9a", "commit_date": "Fri Aug 27 16:16:13 2021 +0200", "commit_message": "Fix resolutions", "files_name": ["app/package.json"]}, {"commit_id": "2f06d80c12f720d2c457b0db5a57390f004819f4", "commit_date": "Fri Aug 27 16:43:02 2021 +0200", "commit_message": "Merge pull request #189 from jtpio/lab-3-1", "files_name": ["d7cfc129314789370f71f217df1991d77f7301bd - Fri Aug 27 15:02:52 2021 +0000 : Automated Changelog Entry for 0.3.0 on main", "CHANGELOG.md"]}, {"commit_id": "42fd99040b14dd3d357b0b99ccbfefad9879c77c", "commit_date": "Fri Aug 27 18:21:48 2021 +0200", "commit_message": "Merge pull request #191 from jupyterlab/changelog-da147f5a074711eca4af5f302c4f6325", "files_name": ["8c2d635672a0d41844fb0ba2e3c23aec7a8047a7 - Fri Aug 27 18:40:24 2021 +0200 : Release 0.3.0", ".bumpversion.cfg", "app/package.json", "buildutils/package.json", "packages/_metapackage/package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "retrolab/_version.py"]}, {"commit_id": "1ed64fce8f05404711bf9795d269f50c31872abc", "commit_date": "Fri Aug 27 21:38:50 2021 +0200", "commit_message": "Update spec in the check release workflow", "files_name": [".github/workflows/check-release.yml"]}, {"commit_id": "d9f01c4187c6d3fc45a7def72d0f5eaff0fc0b7a", "commit_date": "Fri Aug 27 21:54:10 2021 +0200", "commit_message": "Merge pull request #193 from jtpio/check-release-spec", "files_name": ["6769aece10e1b5fb44a2589bef4361ac3dbc7614 - Fri Aug 27 22:13:43 2021 +0200 : Add the rtc packages as singleton", "app/package.json"]}, {"commit_id": "d03c8337259b8c7cae693bfac9ad50cc6b6cc354", "commit_date": "Fri Aug 27 22:16:27 2021 +0200", "commit_message": "Add the docprovider extension to the build", "files_name": ["app/index.js", "app/package.json", "yarn.lock"]}, {"commit_id": "c64db928f87b02d0ef4a7402a35d28f969fd0c19", "commit_date": "Fri Aug 27 23:15:05 2021 +0100", "commit_message": "Use default JupyterLab CSS sanitizer options for Markdown", "files_name": ["notebook/static/base/js/markdown.js"]}, {"commit_id": "660066f7c58763bff9afcfcbaf005660f9889085", "commit_date": "Sat Aug 28 11:37:57 2021 +0200", "commit_message": "Merge pull request #194 from jtpio/yjs-resolutions", "files_name": ["db2dc937aa85361d97363f9c735492a312fb092a - Sat Aug 28 09:53:50 2021 +0000 : Automated Changelog Entry for 0.3.1 on main", "CHANGELOG.md"]}, {"commit_id": "29ccdc5aaca2dd7932f4090e97d1eca4819123fc", "commit_date": "Sat Aug 28 12:52:23 2021 +0200", "commit_message": "Merge pull request #195 from jupyterlab/changelog-d83f510207e511ecb0b09bfc18887a54", "files_name": ["9e81700947aec36a184bea890e09e46d37dccaf3 - Sat Aug 28 12:53:24 2021 +0200 : Release 0.3.1", ".bumpversion.cfg", "app/package.json", "buildutils/package.json", "packages/_metapackage/package.json", "packages/application-extension/package.json", "packages/application/package.json", "packages/docmanager-extension/package.json", "packages/help-extension/package.json", "packages/lab-extension/package.json", "packages/notebook-extension/package.json", "packages/terminal-extension/package.json", "packages/tree-extension/package.json", "packages/ui-components/package.json", "retrolab/_version.py"]}, {"commit_id": "f2a2a68b096bb6afd8f20b257e63e9b5a605221a", "commit_date": "Sun Aug 29 13:48:35 2021 +0200", "commit_message": "Initial support for code consoles", "files_name": ["app/index.js", "app/package.json", "packages/_metapackage/package.json", "packages/_metapackage/src/index.ts", "packages/_metapackage/tsconfig.json", "packages/console-extension/package.json", "packages/console-extension/src/index.ts", "packages/console-extension/style/base.css", "packages/console-extension/style/index.css", "packages/console-extension/style/index.js", "packages/console-extension/tsconfig.json", "retrolab/app.py", "retrolab/templates/consoles.html", "yarn.lock"]}, {"commit_id": "d3d829de4a14d395836dff7b87f3460b161ef64b", "commit_date": "Mon Aug 30 08:58:04 2021 +0200", "commit_message": "Add the New Console button to the file browser", "files_name": ["packages/console-extension/src/index.ts", "packages/tree-extension/src/index.ts"]}, {"commit_id": "32a279ef497254ae84a57c02707af6272d996c86", "commit_date": "Mon Aug 30 10:23:46 2021 +0200", "commit_message": "Use console path", "files_name": ["packages/console-extension/src/index.ts"]}, {"commit_id": "3fe6d535c9dc997e116d4ecc1589098ca5fb6aa5", "commit_date": "Mon Aug 30 10:33:30 2021 +0200", "commit_message": "Add completer and tooltip to the consoles", "files_name": ["app/index.js"]}, {"commit_id": "19942ed8757c3645e6099ea14371812f1516f6d2", "commit_date": "Mon Aug 30 10:59:37 2021 +0200", "commit_message": "Add the \"New Console for Notebook\" context menu item", "files_name": ["app/index.js"]}, {"commit_id": "8efb3c696c359bc9641a57e8c2923b491589e5c5", "commit_date": "Mon Aug 30 11:36:29 2021 +0200", "commit_message": "Add the console favicon", "files_name": [".gitignore", "retrolab/static/favicons/favicon-console.ico", "retrolab/templates/consoles.html"]}, {"commit_id": "d9f164a374fcafdd1a4032454f03d9e28135f65e", "commit_date": "Mon Aug 30 13:42:40 2021 +0200", "commit_message": "Move the new console button to a separate plugin", "files_name": ["packages/tree-extension/src/index.ts"]}, {"commit_id": "6c05fade6098a2fa70b5713f86c4d502cd74527e", "commit_date": "Mon Aug 30 15:50:09 2021 +0200", "commit_message": "Add the code console to the smoke test", "files_name": ["app/test/smoke.spec.ts"]}, {"commit_id": "ab319333c993ba2765ef0e31c5f905c5b9578dd8", "commit_date": "Mon Aug 30 16:15:19 2021 +0200", "commit_message": "Merge pull request #197 from jtpio/code-consoles", "files_name": ["dd331ea9c57f10263e1f7af9b22463d3e542b2e5 - Mon Aug 30 14:20:12 2021 +0000 : Automated Changelog Entry for 0.3.2 on main", "CHANGELOG.md"]}, {"commit_id": "aec53c38a0cb1fb48558108ea11183b876f97d94", "commit_date": "Mon Aug 30 16:33:36 2021 +0200", "commit_message": "Merge pull request #198 from jupyterlab/changelog-63187bce099d11ec9f9157cab5352b91", "files_name": ["dafa60054f810fdd9d0467ff807c48eb36530777 - Mon Aug 30 16:37:53 2021 +0200 : Update dependencies and resolutions", "app/package.json"]}, {"commit_id": "ecd9b1ee96b01f418d098885c6e2442c60b8480b", "commit_date": "Mon Aug 30 16:53:30 2021 +0200", "commit_message": "Merge pull request #199 from jtpio/deps", "files_name": ["53687ff820de3ec0ed2b025e41b61c5f92654eba - Mon Aug 30 17:02:35 2021 +0200 : Update CHANGELOG.md", "CHANGELOG.md"]}, {"commit_id": "eb392d8926760e3d352ce27a545f25ff63068b28", "commit_date": "Mon Aug 30 17:22:54 2021 +0200", "commit_message": "Merge pull request #200 from jtpio/update-changelog", "files_name": ["f5507c408dc7613d3c04c3df0c56c660790a846b - Mon Aug 30 17:23:34 2021 +0200 : Release 0.3.2", ".bumpversion.cfg"]}], "parents": [{"commit_id_before": "903f2d3d760f6cc254fcb45989ea8f21337764f6", "url_before": "https://api.github.com/repos/jupyter/notebook/commits/903f2d3d760f6cc254fcb45989ea8f21337764f6", "html_url_before": "https://github.com/jupyter/notebook/commit/903f2d3d760f6cc254fcb45989ea8f21337764f6"}], "details": [{"raw_url": "https://github.com/jupyter/notebook/raw/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5/bower.json", "code": "{\n  \"name\": \"jupyter-notebook-deps\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"backbone\": \"components/backbone#~1.2\",\n    \"bootstrap\": \"bootstrap#~3.4\",\n    \"bootstrap-tour\": \"0.9.0\",\n    \"codemirror\": \"components/codemirror#5.56.0+components1\",\n    \"create-react-class\": \"https://cdn.jsdelivr.net/npm/create-react-class@15.6.3/create-react-class.min.js\",\n    \"es6-promise\": \"~1.0\",\n    \"font-awesome\": \"components/font-awesome#~4.7.0\",\n    \"jed\": \"~1.1.1\",\n    \"jquery\": \"components/jquery#~3.5.0\",\n    \"jquery-typeahead\": \"~2.10.6\",\n    \"jquery-ui\": \"components/jqueryui#~1.12\",\n    \"marked\": \"~0.7\",\n    \"MathJax\": \"^2.7.4\",\n    \"moment\": \"~2.19.3\",\n    \"react\": \"~16.0.0\",\n    \"requirejs\": \"~2.2\",\n    \"requirejs-text\": \"~2.0.15\",\n    \"requirejs-plugins\": \"~1.0.3\",\n    \"text-encoding\": \"~0.1\",\n    \"underscore\": \"components/underscore#~1.8.3\",\n    \"xterm.js\": \"https://unpkg.com/xterm@~3.1.0/dist/xterm.js\",\n    \"xterm.js-css\": \"https://unpkg.com/xterm@~3.1.0/dist/xterm.css\",\n    \"xterm.js-fit\": \"https://unpkg.com/xterm@~3.1.0/dist/addons/fit/fit.js\"\n  }\n}\n", "code_before": "{\n  \"name\": \"jupyter-notebook-deps\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"backbone\": \"components/backbone#~1.2\",\n    \"bootstrap\": \"bootstrap#~3.4\",\n    \"bootstrap-tour\": \"0.9.0\",\n    \"codemirror\": \"components/codemirror#5.56.0+components1\",\n    \"create-react-class\": \"https://cdn.jsdelivr.net/npm/create-react-class@15.6.3/create-react-class.min.js\",\n    \"es6-promise\": \"~1.0\",\n    \"font-awesome\": \"components/font-awesome#~4.7.0\",\n    \"google-caja\": \"5669\",\n    \"jed\": \"~1.1.1\",\n    \"jquery\": \"components/jquery#~3.5.0\",\n    \"jquery-typeahead\": \"~2.10.6\",\n    \"jquery-ui\": \"components/jqueryui#~1.12\",\n    \"marked\": \"~0.7\",\n    \"MathJax\": \"^2.7.4\",\n    \"moment\": \"~2.19.3\",\n    \"react\": \"~16.0.0\",\n    \"requirejs\": \"~2.2\",\n    \"requirejs-text\": \"~2.0.15\",\n    \"requirejs-plugins\": \"~1.0.3\",\n    \"text-encoding\": \"~0.1\",\n    \"underscore\": \"components/underscore#~1.8.3\",\n    \"xterm.js\": \"https://unpkg.com/xterm@~3.1.0/dist/xterm.js\",\n    \"xterm.js-css\": \"https://unpkg.com/xterm@~3.1.0/dist/xterm.css\",\n    \"xterm.js-fit\": \"https://unpkg.com/xterm@~3.1.0/dist/addons/fit/fit.js\"\n  }\n}\n", "patch": "@@ -9,7 +9,6 @@\n     \"create-react-class\": \"https://cdn.jsdelivr.net/npm/create-react-class@15.6.3/create-react-class.min.js\",\n     \"es6-promise\": \"~1.0\",\n     \"font-awesome\": \"components/font-awesome#~4.7.0\",\n-    \"google-caja\": \"5669\",\n     \"jed\": \"~1.1.1\",\n     \"jquery\": \"components/jquery#~3.5.0\",\n     \"jquery-typeahead\": \"~2.10.6\",", "file_path": "files/2021_8/510", "file_language": "json", "file_name": "bower.json", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/jupyter/notebook/raw/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5/notebook%2Fstatic%2Fbase%2Fjs%2Fnamespace.js", "code": "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\nvar Jupyter = Jupyter || {};\n\nvar jprop = function(name, module_path){\n    Object.defineProperty(Jupyter, name, {\n      get: function() { \n          console.warn('accessing `'+name+'` is deprecated. Use `requirejs(\"'+module_path+'\")`');\n          return requirejs(module_path); \n      },\n      enumerable: true,\n      configurable: false\n    });\n}\n\nvar jglobal = function(name, module_path){\n    Object.defineProperty(Jupyter, name, {\n      get: function() { \n          console.warn('accessing `'+name+'` is deprecated. Use `requirejs(\"'+module_path+'\").'+name+'`');\n          return requirejs(module_path)[name]; \n      },\n      enumerable: true,\n      configurable: false\n    });\n}\n\ndefine(function(){\n    \"use strict\";\n\n    // expose modules\n    \n    jprop('utils','base/js/utils')\n    jprop('mathjaxutils','base/js/mathjaxutils');\n\n    //Jupyter.load_extensions = Jupyter.utils.load_extensions;\n    // \n    jprop('security','base/js/security');\n    jprop('keyboard','base/js/keyboard');\n    jprop('dialog','base/js/dialog');\n\n\n    //// exposed constructors\n    jglobal('CommManager','services/kernels/comm')\n    jglobal('Comm','services/kernels/comm')\n\n    jglobal('NotificationWidget','base/js/notificationwidget');\n    jglobal('Kernel','services/kernels/kernel');\n    jglobal('Session','services/sessions/session');\n    jglobal('LoginWidget','auth/js/loginwidget');\n    jglobal('Page','base/js/page');\n\n    // notebook\n    jglobal('TextCell','notebook/js/textcell');\n    jglobal('OutputArea','notebook/js/outputarea');\n    jglobal('KeyboardManager','notebook/js/keyboardmanager');\n    jglobal('Completer','notebook/js/completer');\n    jglobal('Notebook','notebook/js/notebook');\n    jglobal('Tooltip','notebook/js/tooltip');\n    jglobal('Toolbar','notebook/js/toolbar');\n    jglobal('SaveWidget','notebook/js/savewidget');\n    jglobal('Pager','notebook/js/pager');\n    jglobal('QuickHelp','notebook/js/quickhelp');\n    jglobal('MarkdownCell','notebook/js/textcell');\n    jglobal('RawCell','notebook/js/textcell');\n    jglobal('Cell','notebook/js/cell');\n    jglobal('MainToolBar','notebook/js/maintoolbar');\n    jglobal('NotebookNotificationArea','notebook/js/notificationarea');\n    jglobal('NotebookTour', 'notebook/js/tour');\n    jglobal('MenuBar', 'notebook/js/menubar');\n\n    // tree\n    jglobal('SessionList','tree/js/sessionlist');\n\n    Jupyter.version = \"6.5.0.dev0\";\n    Jupyter._target = '_blank';\n\n    return Jupyter;\n});\n\n// deprecated since 4.0, remove in 5+\nvar IPython = Jupyter;\n", "code_before": "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\nvar Jupyter = Jupyter || {};\n\nvar jprop = function(name, module_path){\n    Object.defineProperty(Jupyter, name, {\n      get: function() { \n          console.warn('accessing `'+name+'` is deprecated. Use `requirejs(\"'+module_path+'\")`');\n          return requirejs(module_path); \n      },\n      enumerable: true,\n      configurable: false\n    });\n}\n\nvar jglobal = function(name, module_path){\n    Object.defineProperty(Jupyter, name, {\n      get: function() { \n          console.warn('accessing `'+name+'` is deprecated. Use `requirejs(\"'+module_path+'\").'+name+'`');\n          return requirejs(module_path)[name]; \n      },\n      enumerable: true,\n      configurable: false\n    });\n}\n\ndefine(function(){\n    \"use strict\";\n\n    // expose modules\n    \n    jprop('utils','base/js/utils')\n    jprop('mathjaxutils','base/js/mathjaxutils');\n\n    //Jupyter.load_extensions = Jupyter.utils.load_extensions;\n    // \n    jprop('security','base/js/security');\n    jprop('keyboard','base/js/keyboard');\n    jprop('dialog','base/js/dialog');\n\n\n    //// exposed constructors\n    jglobal('CommManager','services/kernels/comm')\n    jglobal('Comm','services/kernels/comm')\n\n    jglobal('NotificationWidget','base/js/notificationwidget');\n    jglobal('Kernel','services/kernels/kernel');\n    jglobal('Session','services/sessions/session');\n    jglobal('LoginWidget','auth/js/loginwidget');\n    jglobal('Page','base/js/page');\n\n    // notebook\n    jglobal('TextCell','notebook/js/textcell');\n    jglobal('OutputArea','notebook/js/outputarea');\n    jglobal('KeyboardManager','notebook/js/keyboardmanager');\n    jglobal('Completer','notebook/js/completer');\n    jglobal('Notebook','notebook/js/notebook');\n    jglobal('Tooltip','notebook/js/tooltip');\n    jglobal('Toolbar','notebook/js/toolbar');\n    jglobal('SaveWidget','notebook/js/savewidget');\n    jglobal('Pager','notebook/js/pager');\n    jglobal('QuickHelp','notebook/js/quickhelp');\n    jglobal('MarkdownCell','notebook/js/textcell');\n    jglobal('RawCell','notebook/js/textcell');\n    jglobal('Cell','notebook/js/cell');\n    jglobal('MainToolBar','notebook/js/maintoolbar');\n    jglobal('NotebookNotificationArea','notebook/js/notificationarea');\n    jglobal('NotebookTour', 'notebook/js/tour');\n    jglobal('MenuBar', 'notebook/js/menubar');\n\n    // tree\n    jglobal('SessionList','tree/js/sessionlist');\n\n    Jupyter.version = \"6.4.0\";\n    Jupyter._target = '_blank';\n\n    return Jupyter;\n});\n\n// deprecated since 4.0, remove in 5+\nvar IPython = Jupyter;\n", "patch": "@@ -73,7 +73,7 @@ define(function(){\n     // tree\n     jglobal('SessionList','tree/js/sessionlist');\n \n-    Jupyter.version = \"6.4.0\";\n+    Jupyter.version = \"6.5.0.dev0\";\n     Jupyter._target = '_blank';\n \n     return Jupyter;", "file_path": "files/2021_8/511", "file_language": "js", "file_name": "notebook/static/base/js/namespace.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1}, {"raw_url": "https://github.com/jupyter/notebook/raw/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5/notebook%2Fstatic%2Fbase%2Fjs%2Fsecurity.js", "code": "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\ndefine([\n    'jquery',\n    'components/sanitizer/index',\n], function($, sanitizer) {\n    \"use strict\";\n\n    var noop = function (x) { return x; };\n    var defaultSanitizer = sanitizer.defaultSanitizer;\n\n    var sanitize_html = function (html, allow_css) {\n        /**\n         * sanitize HTML\n         * if allow_css is true (default: false), CSS is sanitized as well.\n         * otherwise, CSS elements and attributes are simply removed.\n         */\n         const options = {};\n         if (!allow_css) {\n             options.allowedStyles = {};\n         }\n        return defaultSanitizer.sanitize(html, options);\n    };\n\n    var sanitize_html_and_parse = function (html, allow_css) {\n        /**\n         * Sanitize HTML and parse it safely using jQuery.\n         *\n         * This disable's jQuery's html 'prefilter', which can make invalid\n         * HTML valid after the sanitizer has checked it.\n         *\n         * Returns an array of DOM nodes.\n         */\n        var sanitized_html = sanitize_html(html, allow_css);\n        var prev_htmlPrefilter = $.htmlPrefilter;\n        $.htmlPrefilter = function(html) {return html;};  // Don't modify HTML\n        try {\n            return $.parseHTML(sanitized_html);\n        } finally {\n            $.htmlPrefilter = prev_htmlPrefilter;  // Set it back again\n        }\n    };\n\n    var security = {\n        sanitize_html_and_parse: sanitize_html_and_parse,\n        sanitize_html: sanitize_html\n    };\n\n    return security;\n});\n", "code_before": "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\ndefine([\n    'jquery',\n    'components/google-caja/html-css-sanitizer-minified',\n], function($, sanitize) {\n    \"use strict\";\n    \n    var noop = function (x) { return x; };\n    \n    var caja;\n    if (window && window.html) {\n        caja = window.html;\n        caja.html4 = window.html4;\n        caja.sanitizeStylesheet = window.sanitizeStylesheet;\n    }\n    \n    var sanitizeAttribs = function (tagName, attribs, opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {\n        /**\n         * add trusting data-attributes to the default sanitizeAttribs from caja\n         * this function is mostly copied from the caja source\n         */\n        var ATTRIBS = caja.html4.ATTRIBS;\n        for (var i = 0; i < attribs.length; i += 2) {\n            var attribName = attribs[i];\n            if (attribName.substr(0,5) == 'data-') {\n                var attribKey = '*::' + attribName;\n                if (!ATTRIBS.hasOwnProperty(attribKey)) {\n                    ATTRIBS[attribKey] = 0;\n                }\n            }\n        }\n        // Caja doesn't allow data uri for img::src, see\n        // https://github.com/google/caja/issues/1558\n        // This is not a security issue for browser post ie6 though, so we\n        // disable the check\n        // https://www.owasp.org/index.php/Script_in_IMG_tags\n        ATTRIBS['img::src'] = 0;\n        return caja.sanitizeAttribs(tagName, attribs, opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger);\n    };\n    \n    var sanitize_css = function (css, tagPolicy) {\n        /**\n         * sanitize CSS\n         * like sanitize_html, but for CSS\n         * called by sanitize_stylesheets\n         */\n        return caja.sanitizeStylesheet(\n            window.location.pathname,\n            css,\n            {\n                containerClass: null,\n                idSuffix: '',\n                tagPolicy: tagPolicy,\n                virtualizeAttrName: noop\n            },\n            noop\n        );\n    };\n    \n    var sanitize_stylesheets = function (html, tagPolicy) {\n        /**\n         * sanitize just the css in style tags in a block of html\n         * called by sanitize_html, if allow_css is true\n         */\n        var h = $(\"<div/>\").append(html);\n        var style_tags = h.find(\"style\");\n        if (!style_tags.length) {\n            // no style tags to sanitize\n            return html;\n        }\n        style_tags.each(function(i, style) {\n            style.innerHTML = sanitize_css(style.innerHTML, tagPolicy);\n        });\n        return h.html();\n    };\n    \n    var sanitize_html = function (html, allow_css) {\n        /**\n         * sanitize HTML\n         * if allow_css is true (default: false), CSS is sanitized as well.\n         * otherwise, CSS elements and attributes are simply removed.\n         */\n        var html4 = caja.html4;\n\n        if (allow_css) {\n            // allow sanitization of style tags,\n            // not just scrubbing\n            html4.ELEMENTS.style &= ~html4.eflags.UNSAFE;\n            html4.ATTRIBS.style = html4.atype.STYLE;\n        } else {\n            // scrub all CSS\n            html4.ELEMENTS.style |= html4.eflags.UNSAFE;\n            html4.ATTRIBS.style = html4.atype.SCRIPT;\n        }\n        \n        var record_messages = function (msg, opts) {\n            console.log(\"HTML Sanitizer\", msg, opts);\n        };\n        \n        var policy = function (tagName, attribs) {\n            if (!(html4.ELEMENTS[tagName] & html4.eflags.UNSAFE)) {\n                return {\n                    'attribs': sanitizeAttribs(tagName, attribs,\n                        noop, noop, record_messages)\n                    };\n            } else {\n                record_messages(tagName + \" removed\", {\n                  change: \"removed\",\n                  tagName: tagName\n                });\n            }\n        };\n        \n        var sanitized = caja.sanitizeWithPolicy(html, policy);\n        \n        if (allow_css) {\n            // sanitize style tags as stylesheets\n            sanitized = sanitize_stylesheets(sanitized, policy);\n        }\n        \n        return sanitized;\n    };\n\n    var sanitize_html_and_parse = function (html, allow_css) {\n        /**\n         * Sanitize HTML and parse it safely using jQuery.\n         *\n         * This disable's jQuery's html 'prefilter', which can make invalid\n         * HTML valid after the sanitizer has checked it.\n         *\n         * Returns an array of DOM nodes.\n         */\n        var sanitized_html = sanitize_html(html, allow_css);\n        var prev_htmlPrefilter = $.htmlPrefilter;\n        $.htmlPrefilter = function(html) {return html;};  // Don't modify HTML\n        try {\n            return $.parseHTML(sanitized_html);\n        } finally {\n            $.htmlPrefilter = prev_htmlPrefilter;  // Set it back again\n        }\n    };\n    \n    var security = {\n        caja: caja,\n        sanitize_html_and_parse: sanitize_html_and_parse,\n        sanitize_html: sanitize_html\n    };\n\n    return security;\n});\n", "patch": "@@ -3,124 +3,24 @@\n \n define([\n     'jquery',\n-    'components/google-caja/html-css-sanitizer-minified',\n-], function($, sanitize) {\n+    'components/sanitizer/index',\n+], function($, sanitizer) {\n     \"use strict\";\n-    \n+\n     var noop = function (x) { return x; };\n-    \n-    var caja;\n-    if (window && window.html) {\n-        caja = window.html;\n-        caja.html4 = window.html4;\n-        caja.sanitizeStylesheet = window.sanitizeStylesheet;\n-    }\n-    \n-    var sanitizeAttribs = function (tagName, attribs, opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {\n-        /**\n-         * add trusting data-attributes to the default sanitizeAttribs from caja\n-         * this function is mostly copied from the caja source\n-         */\n-        var ATTRIBS = caja.html4.ATTRIBS;\n-        for (var i = 0; i < attribs.length; i += 2) {\n-            var attribName = attribs[i];\n-            if (attribName.substr(0,5) == 'data-') {\n-                var attribKey = '*::' + attribName;\n-                if (!ATTRIBS.hasOwnProperty(attribKey)) {\n-                    ATTRIBS[attribKey] = 0;\n-                }\n-            }\n-        }\n-        // Caja doesn't allow data uri for img::src, see\n-        // https://github.com/google/caja/issues/1558\n-        // This is not a security issue for browser post ie6 though, so we\n-        // disable the check\n-        // https://www.owasp.org/index.php/Script_in_IMG_tags\n-        ATTRIBS['img::src'] = 0;\n-        return caja.sanitizeAttribs(tagName, attribs, opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger);\n-    };\n-    \n-    var sanitize_css = function (css, tagPolicy) {\n-        /**\n-         * sanitize CSS\n-         * like sanitize_html, but for CSS\n-         * called by sanitize_stylesheets\n-         */\n-        return caja.sanitizeStylesheet(\n-            window.location.pathname,\n-            css,\n-            {\n-                containerClass: null,\n-                idSuffix: '',\n-                tagPolicy: tagPolicy,\n-                virtualizeAttrName: noop\n-            },\n-            noop\n-        );\n-    };\n-    \n-    var sanitize_stylesheets = function (html, tagPolicy) {\n-        /**\n-         * sanitize just the css in style tags in a block of html\n-         * called by sanitize_html, if allow_css is true\n-         */\n-        var h = $(\"<div/>\").append(html);\n-        var style_tags = h.find(\"style\");\n-        if (!style_tags.length) {\n-            // no style tags to sanitize\n-            return html;\n-        }\n-        style_tags.each(function(i, style) {\n-            style.innerHTML = sanitize_css(style.innerHTML, tagPolicy);\n-        });\n-        return h.html();\n-    };\n-    \n+    var defaultSanitizer = sanitizer.defaultSanitizer;\n+\n     var sanitize_html = function (html, allow_css) {\n         /**\n          * sanitize HTML\n          * if allow_css is true (default: false), CSS is sanitized as well.\n          * otherwise, CSS elements and attributes are simply removed.\n          */\n-        var html4 = caja.html4;\n-\n-        if (allow_css) {\n-            // allow sanitization of style tags,\n-            // not just scrubbing\n-            html4.ELEMENTS.style &= ~html4.eflags.UNSAFE;\n-            html4.ATTRIBS.style = html4.atype.STYLE;\n-        } else {\n-            // scrub all CSS\n-            html4.ELEMENTS.style |= html4.eflags.UNSAFE;\n-            html4.ATTRIBS.style = html4.atype.SCRIPT;\n-        }\n-        \n-        var record_messages = function (msg, opts) {\n-            console.log(\"HTML Sanitizer\", msg, opts);\n-        };\n-        \n-        var policy = function (tagName, attribs) {\n-            if (!(html4.ELEMENTS[tagName] & html4.eflags.UNSAFE)) {\n-                return {\n-                    'attribs': sanitizeAttribs(tagName, attribs,\n-                        noop, noop, record_messages)\n-                    };\n-            } else {\n-                record_messages(tagName + \" removed\", {\n-                  change: \"removed\",\n-                  tagName: tagName\n-                });\n-            }\n-        };\n-        \n-        var sanitized = caja.sanitizeWithPolicy(html, policy);\n-        \n-        if (allow_css) {\n-            // sanitize style tags as stylesheets\n-            sanitized = sanitize_stylesheets(sanitized, policy);\n-        }\n-        \n-        return sanitized;\n+         const options = {};\n+         if (!allow_css) {\n+             options.allowedStyles = {};\n+         }\n+        return defaultSanitizer.sanitize(html, options);\n     };\n \n     var sanitize_html_and_parse = function (html, allow_css) {\n@@ -141,9 +41,8 @@ define([\n             $.htmlPrefilter = prev_htmlPrefilter;  // Set it back again\n         }\n     };\n-    \n+\n     var security = {\n-        caja: caja,\n         sanitize_html_and_parse: sanitize_html_and_parse,\n         sanitize_html: sanitize_html\n     };", "file_path": "files/2021_8/512", "file_language": "js", "file_name": "notebook/static/base/js/security.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/jupyter/notebook/raw/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5/package.json", "code": "{\n  \"name\": \"jupyter-notebook-deps\",\n  \"private\": true,\n  \"version\": \"4.0.0\",\n  \"description\": \"Jupyter Notebook nodejs dependencies\",\n  \"author\": \"Jupyter Developers\",\n  \"license\": \"BSD-3-Clause\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jupyter/notebook.git\"\n  },\n  \"scripts\": {\n    \"bower\": \"bower install\",\n    \"build\": \"python setup.py js css\",\n    \"build:webpack\": \"webpack --mode development\",\n    \"build:watch\": \"npm run watch\",\n    \"watch\": \"onchange 'notebook/static/**/!(*.min).js' 'notebook/static/**/*.less' 'bower.json' -- npm run build\"\n  },\n  \"devDependencies\": {\n    \"@jupyterlab/apputils\": \"^3.1.3\",\n    \"bower\": \"^1.8.8\",\n    \"less\": \"~2\",\n    \"onchange\": \"^6.0.0\",\n    \"po2json\": \"^0.4.5\",\n    \"requirejs\": \"^2.3.6\",\n    \"webpack\": \"^5.46.0\",\n    \"webpack-cli\": \"^4.7.2\"\n  }\n}\n", "code_before": "{\n  \"name\": \"jupyter-notebook-deps\",\n  \"private\": true,\n  \"version\": \"4.0.0\",\n  \"description\": \"Jupyter Notebook nodejs dependencies\",\n  \"author\": \"Jupyter Developers\",\n  \"license\": \"BSD-3-Clause\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jupyter/notebook.git\"\n  },\n  \"scripts\": {\n    \"bower\": \"bower install\",\n    \"build\": \"python setup.py js css\",\n    \"build:watch\": \"npm run watch\",\n    \"watch\": \"onchange 'notebook/static/**/!(*.min).js' 'notebook/static/**/*.less' 'bower.json' -- npm run build\"\n  },\n  \"devDependencies\": {\n    \"bower\": \"^1.8.8\",\n    \"less\": \"~2\",\n    \"onchange\": \"^6.0.0\",\n    \"po2json\": \"^0.4.5\",\n    \"requirejs\": \"^2.3.6\"\n  }\n}\n", "patch": "@@ -12,14 +12,18 @@\n   \"scripts\": {\n     \"bower\": \"bower install\",\n     \"build\": \"python setup.py js css\",\n+    \"build:webpack\": \"webpack --mode development\",\n     \"build:watch\": \"npm run watch\",\n     \"watch\": \"onchange 'notebook/static/**/!(*.min).js' 'notebook/static/**/*.less' 'bower.json' -- npm run build\"\n   },\n   \"devDependencies\": {\n+    \"@jupyterlab/apputils\": \"^3.1.3\",\n     \"bower\": \"^1.8.8\",\n     \"less\": \"~2\",\n     \"onchange\": \"^6.0.0\",\n     \"po2json\": \"^0.4.5\",\n-    \"requirejs\": \"^2.3.6\"\n+    \"requirejs\": \"^2.3.6\",\n+    \"webpack\": \"^5.46.0\",\n+    \"webpack-cli\": \"^4.7.2\"\n   }\n }", "file_path": "files/2021_8/513", "file_language": "json", "file_name": "package.json", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/jupyter/notebook/raw/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5/setupbase.py", "code": "\"\"\"\nThis module defines the things that are used in setup.py for building the notebook\n\nThis includes:\n\n    * Functions for finding things like packages, package data, etc.\n    * A function for checking dependencies.\n\"\"\"\n\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport os\nimport re\nimport pipes\nimport shutil\nimport sys\n\nfrom distutils import log\nfrom distutils.cmd import Command\nfrom fnmatch import fnmatch\nfrom glob import glob\nfrom multiprocessing.pool import ThreadPool\nfrom subprocess import check_call\n\nif sys.platform == 'win32':\n    from subprocess import list2cmdline\nelse:\n    def list2cmdline(cmd_list):\n        return ' '.join(map(pipes.quote, cmd_list))\n\n#-------------------------------------------------------------------------------\n# Useful globals and utility functions\n#-------------------------------------------------------------------------------\n\n# A few handy globals\nisfile = os.path.isfile\npjoin = os.path.join\nrepo_root = os.path.dirname(os.path.abspath(__file__))\nis_repo = os.path.isdir(pjoin(repo_root, '.git'))\n\ndef oscmd(s):\n    print(\">\", s)\n    os.system(s)\n\n# Py3 compatibility hacks, without assuming IPython itself is installed with\n# the full py3compat machinery.\n\ntry:\n    execfile\nexcept NameError:\n    def execfile(fname, globs, locs=None):\n        locs = locs or globs\n        exec(compile(open(fname).read(), fname, \"exec\"), globs, locs)\n\n\n#---------------------------------------------------------------------------\n# Basic project information\n#---------------------------------------------------------------------------\n\nname = 'notebook'\n\n# release.py contains version, authors, license, url, keywords, etc.\nversion_ns = {}\nexecfile(pjoin(repo_root, name, '_version.py'), version_ns)\n\nversion = version_ns['__version__']\n\n\n# vendored from pep440 package, we allow `.dev` suffix without trailing number.\nloose_pep440re = re.compile(r'^([1-9]\\d*!)?(0|[1-9]\\d*)(\\.(0|[1-9]\\d*))*((a|b|rc)(0|[1-9]\\d*))?(\\.post(0|[1-9]\\d*))?(\\.dev(0|[1-9]\\d*)?)?$')\nif not loose_pep440re.match(version):\n    raise ValueError('Invalid version number `%s`, please follow pep440 convention or pip will get confused about which package is more recent.' % version)\n\n#---------------------------------------------------------------------------\n# Find packages\n#---------------------------------------------------------------------------\n\ndef find_packages():\n    \"\"\"\n    Find all of the packages.\n    \"\"\"\n    packages = []\n    for dir,subdirs,files in os.walk(name):\n        package = dir.replace(os.path.sep, '.')\n        if '__init__.py' not in files:\n            # not a package\n            continue\n        packages.append(package)\n    return packages\n\n#---------------------------------------------------------------------------\n# Find package data\n#---------------------------------------------------------------------------\n\ndef find_package_data():\n    \"\"\"\n    Find package_data.\n    \"\"\"\n    # This is not enough for these things to appear in a sdist.\n    # We need to muck with the MANIFEST to get this to work\n    \n    # exclude components and less from the walk;\n    # we will build the components separately\n    excludes = [\n        pjoin('static', 'components'),\n        pjoin('static', '*', 'less'),\n        pjoin('static', '*', 'node_modules')\n    ]\n\n    # walk notebook resources:\n    cwd = os.getcwd()\n    os.chdir('notebook')\n    static_data = []\n    for parent, dirs, files in os.walk('static'):\n        if any(fnmatch(parent, pat) for pat in excludes):\n            # prevent descending into subdirs\n            dirs[:] = []\n            continue\n        for f in files:\n            static_data.append(pjoin(parent, f))\n    \n    # for verification purposes, explicitly add main.min.js\n    # so that installation will fail if they are missing\n    for app in ['auth', 'edit', 'notebook', 'terminal', 'tree']:\n        static_data.append(pjoin('static', app, 'js', 'main.min.js'))\n    \n    components = pjoin(\"static\", \"components\")\n    # select the components we actually need to install\n    # (there are lots of resources we bundle for sdist-reasons that we don't actually use)\n    static_data.extend([\n        pjoin(components, \"backbone\", \"backbone-min.js\"),\n        pjoin(components, \"bootstrap\", \"dist\", \"js\", \"bootstrap.min.js\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"css\", \"bootstrap-tour.min.css\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"js\", \"bootstrap-tour.min.js\"),\n        pjoin(components, \"create-react-class\", \"index.js\"),\n        pjoin(components, \"font-awesome\", \"css\", \"*.css\"),\n        pjoin(components, \"es6-promise\", \"*.js\"),\n        pjoin(components, \"font-awesome\", \"fonts\", \"*.*\"),\n        pjoin(components, \"jed\", \"jed.js\"),\n        pjoin(components, \"jquery\", \"jquery.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.css\"),\n        pjoin(components, \"jquery-ui\", \"jquery-ui.min.js\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"jquery-ui.min.css\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"images\", \"*\"),\n        pjoin(components, \"marked\", \"lib\", \"marked.js\"),\n        pjoin(components, \"react\", \"react.production.min.js\"),\n        pjoin(components, \"react\", \"react-dom.production.min.js\"),\n        pjoin(components, \"requirejs\", \"require.js\"),\n        pjoin(components, \"requirejs-plugins\", \"src\", \"json.js\"),\n        pjoin(components, \"requirejs-text\", \"text.js\"),\n        pjoin(components, \"sanitizer\", \"index.js\"),\n        pjoin(components, \"underscore\", \"underscore-min.js\"),\n        pjoin(components, \"moment\", \"moment.js\"),\n        pjoin(components, \"moment\", \"min\", \"*.js\"),\n        pjoin(components, \"xterm.js\", \"index.js\"),\n        pjoin(components, \"xterm.js-css\", \"index.css\"),\n        pjoin(components, \"xterm.js-fit\", \"index.js\"),\n        pjoin(components, \"text-encoding\", \"lib\", \"encoding.js\"),\n    ])\n\n    # Ship all of Codemirror's CSS and JS\n    for parent, dirs, files in os.walk(pjoin(components, 'codemirror')):\n        for f in files:\n            if f.endswith(('.js', '.css')):\n                static_data.append(pjoin(parent, f))\n\n    # Trim mathjax\n    mj = lambda *path: pjoin(components, 'MathJax', *path)\n    static_data.extend([\n        mj('MathJax.js'),\n        mj('config', 'TeX-AMS-MML_HTMLorMML-full.js'),\n        mj('config', 'Safe.js'),\n    ])\n    \n    trees = []\n    mj_out = mj('jax', 'output')\n    \n    if os.path.exists(mj_out):\n        for output in os.listdir(mj_out):\n            path = pjoin(mj_out, output)\n            static_data.append(pjoin(path, '*.js'))\n            autoload = pjoin(path, 'autoload')\n            if os.path.isdir(autoload):\n                trees.append(autoload)\n\n    for tree in trees + [\n        mj('localization'), # limit to en?\n        mj('fonts', 'HTML-CSS', 'STIX-Web', 'woff'),\n        mj('extensions'),\n        mj('jax', 'input', 'TeX'),\n        mj('jax', 'output', 'HTML-CSS', 'fonts', 'STIX-Web'),\n        mj('jax', 'output', 'SVG', 'fonts', 'STIX-Web'),\n        mj('jax', 'element', 'mml'),\n    ]:\n        for parent, dirs, files in os.walk(tree):\n            for f in files:\n                static_data.append(pjoin(parent, f))\n\n    os.chdir(os.path.join('tests',))\n    js_tests = glob('*.js') + glob('*/*.js')\n\n    os.chdir(cwd)\n\n    package_data = {\n        'notebook' : ['templates/*'] + static_data,\n        'notebook.tests' : js_tests,\n        'notebook.bundler.tests': ['resources/*', 'resources/*/*', 'resources/*/*/.*'],\n        'notebook.services.api': ['api.yaml'],\n        'notebook.i18n': ['*/LC_MESSAGES/*.*'],\n    }\n    \n    return package_data\n\n\ndef check_package_data(package_data):\n    \"\"\"verify that package_data globs make sense\"\"\"\n    print(\"checking package data\")\n    for pkg, data in package_data.items():\n        pkg_root = pjoin(*pkg.split('.'))\n        for d in data:\n            path = pjoin(pkg_root, d)\n            if '*' in path:\n                assert len(glob(path)) > 0, \"No files match pattern %s\" % path\n            else:\n                assert os.path.exists(path), \"Missing package data: %s\" % path\n\n\ndef check_package_data_first(command):\n    \"\"\"decorator for checking package_data before running a given command\n    \n    Probably only needs to wrap build_py\n    \"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            check_package_data(self.package_data)\n            command.run(self)\n    return DecoratedCommand\n\ndef update_package_data(distribution):\n    \"\"\"update package_data to catch changes during setup\"\"\"\n    build_py = distribution.get_command_obj('build_py')\n    distribution.package_data = find_package_data()\n    # re-init build_py options which load package_data\n    build_py.finalize_options()\n\n#---------------------------------------------------------------------------\n# Notebook related\n#---------------------------------------------------------------------------\n\ntry:\n    from shutil import which\nexcept ImportError:\n    ## which() function copied from Python 3.4.3; PSF license\n    def which(cmd, mode=os.F_OK | os.X_OK, path=None):\n        \"\"\"Given a command, mode, and a PATH string, return the path which\n        conforms to the given mode on the PATH, or None if there is no such\n        file.\n\n        `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n        of os.environ.get(\"PATH\"), or can be overridden with a custom search\n        path.\n\n        \"\"\"\n        # Check that a given file can be accessed with the correct mode.\n        # Additionally check that `file` is not a directory, as on Windows\n        # directories pass the os.access check.\n        def _access_check(fn, mode):\n            return (os.path.exists(fn) and os.access(fn, mode)\n                    and not os.path.isdir(fn))\n\n        # If we're given a path with a directory part, look it up directly rather\n        # than referring to PATH directories. This includes checking relative to the\n        # current directory, e.g. ./script\n        if os.path.dirname(cmd):\n            if _access_check(cmd, mode):\n                return cmd\n            return None\n\n        if path is None:\n            path = os.environ.get(\"PATH\", os.defpath)\n        if not path:\n            return None\n        path = path.split(os.pathsep)\n\n        if sys.platform == \"win32\":\n            # The current directory takes precedence on Windows.\n            if not os.curdir in path:\n                path.insert(0, os.curdir)\n\n            # PATHEXT is necessary to check on Windows.\n            pathext = os.environ.get(\"PATHEXT\", \"\").split(os.pathsep)\n            # See if the given file matches any of the expected path extensions.\n            # This will allow us to short circuit when given \"python.exe\".\n            # If it does match, only test that one, otherwise we have to try\n            # others.\n            if any(cmd.lower().endswith(ext.lower()) for ext in pathext):\n                files = [cmd]\n            else:\n                files = [cmd + ext for ext in pathext]\n        else:\n            # On other platforms you don't have things like PATHEXT to tell you\n            # what file suffixes are executable, so just pass on cmd as-is.\n            files = [cmd]\n\n        seen = set()\n        for dir in path:\n            normdir = os.path.normcase(dir)\n            if not normdir in seen:\n                seen.add(normdir)\n                for thefile in files:\n                    name = os.path.join(dir, thefile)\n                    if _access_check(name, mode):\n                        return name\n        return None\n\n\nstatic = pjoin(repo_root, 'notebook', 'static')\n\nnpm_path = os.pathsep.join([\n    pjoin(repo_root, 'node_modules', '.bin'),\n    os.environ.get(\"PATH\", os.defpath),\n])\n\ndef mtime(path):\n    \"\"\"shorthand for mtime\"\"\"\n    return os.stat(path).st_mtime\n\n\ndef run(cmd, *args, **kwargs):\n    \"\"\"Echo a command before running it\"\"\"\n    log.info('> ' + list2cmdline(cmd))\n    kwargs['shell'] = (sys.platform == 'win32')\n    return check_call(cmd, *args, **kwargs)\n\nclass CompileBackendTranslation(Command):\n    description = \"compile the .po files into .mo files, that contain the translations.\"\n\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n\n    def run(self):\n        paths = glob('notebook/i18n/??_??')\n        for p in paths:\n            LANG = p[-5:]\n            for component in ['notebook', 'nbui']:\n                run(['pybabel', 'compile',\n                     '-D', component,\n                     '-f',\n                     '-l', LANG,\n                     '-i', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.po'),\n                     '-o', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.mo')\n                    ])\n\nclass Bower(Command):\n    description = \"fetch static client-side components with bower\"\n    \n    user_options = [\n        ('force', 'f', \"force fetching of bower dependencies\"),\n    ]\n    \n    def initialize_options(self):\n        self.force = False\n    \n    def finalize_options(self):\n        self.force = bool(self.force)\n    \n    bower_dir = pjoin(static, 'components')\n    node_modules = pjoin(repo_root, 'node_modules')\n    sanitizer_dir = pjoin(bower_dir, 'sanitizer')\n    \n    def should_run(self):\n        if self.force:\n            return True\n        if not os.path.exists(self.bower_dir):\n            return True\n        if not os.path.exists(self.sanitizer_dir):\n            return True\n\n        bower_stale = mtime(self.bower_dir) < mtime(pjoin(repo_root, 'bower.json'))\n        if bower_stale:\n            return True\n\n        return mtime(self.sanitizer_dir) < mtime(pjoin(repo_root, 'webpack.config.js'))\n\n    def should_run_npm(self):\n        if not which('npm'):\n            print(\"npm unavailable\", file=sys.stderr)\n            return False\n        if not os.path.exists(self.node_modules):\n            return True\n        return mtime(self.node_modules) < mtime(pjoin(repo_root, 'package.json'))\n\n    def run(self):\n        if not self.should_run():\n            print(\"bower dependencies up to date\")\n            return\n        \n        if self.should_run_npm():\n            print(\"installing build dependencies with npm\")\n            run(['npm', 'install'], cwd=repo_root)\n            os.utime(self.node_modules, None)\n        \n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        \n        try:\n            run(\n                ['bower', 'install', '--allow-root', '--config.interactive=false'],\n                cwd=repo_root,\n                env=env\n            )\n        except OSError as e:\n            print(\"Failed to run bower: %s\" % e, file=sys.stderr)\n            print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n            raise\n        # self.npm_components()\n        if not os.path.exists(self.sanitizer_dir):\n            run(['npm', 'run', 'build:webpack'], cwd=repo_root, env=env)\n        os.utime(self.bower_dir, None)\n        # update package data in case this created new files\n        update_package_data(self.distribution)\n\n\ndef patch_out_bootstrap_bw_print():\n    \"\"\"Hack! Manually patch out the bootstrap rule that forces printing in B&W.\n\n    We haven't found a way to override this rule with another one.\n    \"\"\"\n    print_less = pjoin(static, 'components', 'bootstrap', 'less', 'print.less')\n    with open(print_less) as f:\n        lines = f.readlines()\n\n    for ix, line in enumerate(lines):\n        if 'Black prints faster' in line:\n            break\n    else:\n        return  # Already patched out, nothing to do.\n\n    rmed = lines.pop(ix)\n    print(\"Removed line\", ix, \"from bootstrap print.less:\")\n    print(\"-\", rmed)\n    print()\n    with open(print_less, 'w') as f:\n        f.writelines(lines)\n\nclass CompileCSS(Command):\n    \"\"\"Recompile Notebook CSS\n    \n    Regenerate the compiled CSS from LESS sources.\n    \n    Requires various dev dependencies, such as require and lessc.\n    \"\"\"\n    description = \"Recompile Notebook CSS\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    sources = []\n    targets = []\n    for name in ('ipython', 'style'):\n        sources.append(pjoin(static, 'style', '%s.less' % name))\n        targets.append(pjoin(static, 'style', '%s.min.css' % name))\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n\n        patch_out_bootstrap_bw_print()\n        \n        for src, dst in zip(self.sources, self.targets):\n            try:\n                run(['lessc',\n                    '--source-map',\n                    '--include-path=%s' % pipes.quote(static),\n                    src,\n                    dst,\n                ], cwd=repo_root, env=env)\n            except OSError as e:\n                print(\"Failed to build css: %s\" % e, file=sys.stderr)\n                print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n                raise\n        # update package data in case this created new files\n        update_package_data(self.distribution)\n\n\nclass CompileJS(Command):\n    \"\"\"Rebuild Notebook Javascript main.min.js files and translation files.\n    \n    Calls require via build-main.js\n    \"\"\"\n    description = \"Rebuild Notebook Javascript main.min.js files\"\n    user_options = [\n        ('force', 'f', \"force rebuilding js targets\"),\n    ]\n\n    def initialize_options(self):\n        self.force = False\n\n    def finalize_options(self):\n        self.force = bool(self.force)\n\n    apps = ['notebook', 'tree', 'edit', 'terminal', 'auth']\n    targets = [ pjoin(static, app, 'js', 'main.min.js') for app in apps ]\n    \n    def sources(self, name):\n        \"\"\"Generator yielding .js sources that an application depends on\"\"\"\n        yield pjoin(repo_root, 'tools', 'build-main.js')\n        yield pjoin(static, name, 'js', 'main.js')\n\n        for sec in [name, 'base', 'auth']:\n            for f in glob(pjoin(static, sec, 'js', '*.js')):\n                if not f.endswith('.min.js'):\n                    yield f\n        yield pjoin(static, 'services', 'config.js')\n        if name == 'notebook':\n            for f in glob(pjoin(static, 'services', '*', '*.js')):\n                yield f\n        for parent, dirs, files in os.walk(pjoin(static, 'components')):\n            if os.path.basename(parent) == 'MathJax':\n                # don't look in MathJax, since it takes forever to walk it\n                dirs[:] = []\n                continue\n            for f in files:\n                yield pjoin(parent, f)\n    \n    def should_run(self, name, target):\n        if self.force or not os.path.exists(target):\n            return True\n        target_mtime = mtime(target)\n        for source in self.sources(name):\n            if mtime(source) > target_mtime:\n                print(source, target)\n                return True\n        return False\n\n    def build_main(self, name):\n        \"\"\"Build main.min.js\"\"\"\n        target = pjoin(static, name, 'js', 'main.min.js')\n\n        if not self.should_run(name, target):\n            log.info(\"%s up to date\" % target)\n            return\n        log.info(\"Rebuilding %s\" % target)\n        run(['node', 'tools/build-main.js', name])\n\n    def build_jstranslation(self, trd):\n        lang = trd[-5:]\n        run([\n            pjoin('node_modules', '.bin', 'po2json'),\n            '-p', '-F',\n            '-f', 'jed1.x',\n            '-d', 'nbjs',\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.po'),\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.json'),\n        ])\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        pool = ThreadPool()\n        pool.map(self.build_main, self.apps)\n        pool.map(self.build_jstranslation, glob('notebook/i18n/??_??'))\n        # update package data in case this created new files\n        update_package_data(self.distribution)\n\n\nclass JavascriptVersion(Command):\n    \"\"\"write the javascript version to notebook javascript\"\"\"\n    description = \"Write Jupyter version to javascript\"\n    user_options = []\n    \n    def initialize_options(self):\n        pass\n    \n    def finalize_options(self):\n        pass\n    \n    def run(self):\n        nsfile = pjoin(repo_root, \"notebook\", \"static\", \"base\", \"js\", \"namespace.js\")\n        with open(nsfile) as f:\n            lines = f.readlines()\n        with open(nsfile, 'w') as f:\n            found = False\n            for line in lines:\n                if line.strip().startswith(\"Jupyter.version\"):\n                    line = '    Jupyter.version = \"{0}\";\\n'.format(version)\n                    found = True\n                f.write(line)\n            if not found:\n                raise RuntimeError(\"Didn't find Jupyter.version line in %s\" % nsfile)\n\n\ndef css_js_prerelease(command, strict=False):\n    \"\"\"decorator for building minified js/css prior to another command\"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            self.distribution.run_command('jsversion')\n            jsdeps = self.distribution.get_command_obj('jsdeps')\n            js = self.distribution.get_command_obj('js')\n            css = self.distribution.get_command_obj('css')\n            jsdeps.force = js.force = strict\n\n            targets = [ jsdeps.bower_dir ]\n            targets.extend(js.targets)\n            targets.extend(css.targets)\n            missing = [ t for t in targets if not os.path.exists(t) ]\n\n            if not is_repo and not missing:\n                # If we're an sdist, we aren't a repo and everything should be present.\n                # Don't rebuild js/css in that case.\n                command.run(self)\n                return\n\n            try:\n                self.distribution.run_command('js')\n                self.distribution.run_command('css')\n                self.distribution.run_command('backendtranslations')\n            except Exception as e:\n                # refresh missing\n                missing = [ t for t in targets if not os.path.exists(t) ]\n                if strict or missing:\n                    # die if strict or any targets didn't build\n                    prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                    missing = [ m[len(prefix):] for m in missing ]\n                    log.warn(\"rebuilding js and css failed. The following required files are missing: %s\" % missing)\n                    raise e\n                else:\n                    log.warn(\"rebuilding js and css failed (not a problem)\")\n                    log.warn(str(e))\n\n            # check again for missing targets, just in case:\n            missing = [ t for t in targets if not os.path.exists(t) ]\n            if missing:\n                # command succeeded, but targets still missing (?!)\n                prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                missing = [ m[len(prefix):] for m in missing ]\n                raise ValueError(\"The following required files are missing: %s\" % missing)\n\n            command.run(self)\n    return DecoratedCommand\n", "code_before": "\"\"\"\nThis module defines the things that are used in setup.py for building the notebook\n\nThis includes:\n\n    * Functions for finding things like packages, package data, etc.\n    * A function for checking dependencies.\n\"\"\"\n\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport os\nimport re\nimport pipes\nimport shutil\nimport sys\n\nfrom distutils import log\nfrom distutils.cmd import Command\nfrom fnmatch import fnmatch\nfrom glob import glob\nfrom multiprocessing.pool import ThreadPool\nfrom subprocess import check_call\n\nif sys.platform == 'win32':\n    from subprocess import list2cmdline\nelse:\n    def list2cmdline(cmd_list):\n        return ' '.join(map(pipes.quote, cmd_list))\n\n#-------------------------------------------------------------------------------\n# Useful globals and utility functions\n#-------------------------------------------------------------------------------\n\n# A few handy globals\nisfile = os.path.isfile\npjoin = os.path.join\nrepo_root = os.path.dirname(os.path.abspath(__file__))\nis_repo = os.path.isdir(pjoin(repo_root, '.git'))\n\ndef oscmd(s):\n    print(\">\", s)\n    os.system(s)\n\n# Py3 compatibility hacks, without assuming IPython itself is installed with\n# the full py3compat machinery.\n\ntry:\n    execfile\nexcept NameError:\n    def execfile(fname, globs, locs=None):\n        locs = locs or globs\n        exec(compile(open(fname).read(), fname, \"exec\"), globs, locs)\n\n\n#---------------------------------------------------------------------------\n# Basic project information\n#---------------------------------------------------------------------------\n\nname = 'notebook'\n\n# release.py contains version, authors, license, url, keywords, etc.\nversion_ns = {}\nexecfile(pjoin(repo_root, name, '_version.py'), version_ns)\n\nversion = version_ns['__version__']\n\n\n# vendored from pep440 package, we allow `.dev` suffix without trailing number.\nloose_pep440re = re.compile(r'^([1-9]\\d*!)?(0|[1-9]\\d*)(\\.(0|[1-9]\\d*))*((a|b|rc)(0|[1-9]\\d*))?(\\.post(0|[1-9]\\d*))?(\\.dev(0|[1-9]\\d*)?)?$')\nif not loose_pep440re.match(version):\n    raise ValueError('Invalid version number `%s`, please follow pep440 convention or pip will get confused about which package is more recent.' % version)\n\n#---------------------------------------------------------------------------\n# Find packages\n#---------------------------------------------------------------------------\n\ndef find_packages():\n    \"\"\"\n    Find all of the packages.\n    \"\"\"\n    packages = []\n    for dir,subdirs,files in os.walk(name):\n        package = dir.replace(os.path.sep, '.')\n        if '__init__.py' not in files:\n            # not a package\n            continue\n        packages.append(package)\n    return packages\n\n#---------------------------------------------------------------------------\n# Find package data\n#---------------------------------------------------------------------------\n\ndef find_package_data():\n    \"\"\"\n    Find package_data.\n    \"\"\"\n    # This is not enough for these things to appear in a sdist.\n    # We need to muck with the MANIFEST to get this to work\n    \n    # exclude components and less from the walk;\n    # we will build the components separately\n    excludes = [\n        pjoin('static', 'components'),\n        pjoin('static', '*', 'less'),\n        pjoin('static', '*', 'node_modules')\n    ]\n\n    # walk notebook resources:\n    cwd = os.getcwd()\n    os.chdir('notebook')\n    static_data = []\n    for parent, dirs, files in os.walk('static'):\n        if any(fnmatch(parent, pat) for pat in excludes):\n            # prevent descending into subdirs\n            dirs[:] = []\n            continue\n        for f in files:\n            static_data.append(pjoin(parent, f))\n    \n    # for verification purposes, explicitly add main.min.js\n    # so that installation will fail if they are missing\n    for app in ['auth', 'edit', 'notebook', 'terminal', 'tree']:\n        static_data.append(pjoin('static', app, 'js', 'main.min.js'))\n    \n    components = pjoin(\"static\", \"components\")\n    # select the components we actually need to install\n    # (there are lots of resources we bundle for sdist-reasons that we don't actually use)\n    static_data.extend([\n        pjoin(components, \"backbone\", \"backbone-min.js\"),\n        pjoin(components, \"bootstrap\", \"dist\", \"js\", \"bootstrap.min.js\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"css\", \"bootstrap-tour.min.css\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"js\", \"bootstrap-tour.min.js\"),\n        pjoin(components, \"create-react-class\", \"index.js\"),\n        pjoin(components, \"font-awesome\", \"css\", \"*.css\"),\n        pjoin(components, \"es6-promise\", \"*.js\"),\n        pjoin(components, \"font-awesome\", \"fonts\", \"*.*\"),\n        pjoin(components, \"google-caja\", \"html-css-sanitizer-minified.js\"),\n        pjoin(components, \"jed\", \"jed.js\"),\n        pjoin(components, \"jquery\", \"jquery.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.css\"),\n        pjoin(components, \"jquery-ui\", \"jquery-ui.min.js\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"jquery-ui.min.css\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"images\", \"*\"),\n        pjoin(components, \"marked\", \"lib\", \"marked.js\"),\n        pjoin(components, \"react\", \"react.production.min.js\"),\n        pjoin(components, \"react\", \"react-dom.production.min.js\"),\n        pjoin(components, \"requirejs\", \"require.js\"),\n        pjoin(components, \"requirejs-plugins\", \"src\", \"json.js\"),\n        pjoin(components, \"requirejs-text\", \"text.js\"),\n        pjoin(components, \"underscore\", \"underscore-min.js\"),\n        pjoin(components, \"moment\", \"moment.js\"),\n        pjoin(components, \"moment\", \"min\", \"*.js\"),\n        pjoin(components, \"xterm.js\", \"index.js\"),\n        pjoin(components, \"xterm.js-css\", \"index.css\"),\n        pjoin(components, \"xterm.js-fit\", \"index.js\"),\n        pjoin(components, \"text-encoding\", \"lib\", \"encoding.js\"),\n    ])\n\n    # Ship all of Codemirror's CSS and JS\n    for parent, dirs, files in os.walk(pjoin(components, 'codemirror')):\n        for f in files:\n            if f.endswith(('.js', '.css')):\n                static_data.append(pjoin(parent, f))\n\n    # Trim mathjax\n    mj = lambda *path: pjoin(components, 'MathJax', *path)\n    static_data.extend([\n        mj('MathJax.js'),\n        mj('config', 'TeX-AMS-MML_HTMLorMML-full.js'),\n        mj('config', 'Safe.js'),\n    ])\n    \n    trees = []\n    mj_out = mj('jax', 'output')\n    \n    if os.path.exists(mj_out):\n        for output in os.listdir(mj_out):\n            path = pjoin(mj_out, output)\n            static_data.append(pjoin(path, '*.js'))\n            autoload = pjoin(path, 'autoload')\n            if os.path.isdir(autoload):\n                trees.append(autoload)\n\n    for tree in trees + [\n        mj('localization'), # limit to en?\n        mj('fonts', 'HTML-CSS', 'STIX-Web', 'woff'),\n        mj('extensions'),\n        mj('jax', 'input', 'TeX'),\n        mj('jax', 'output', 'HTML-CSS', 'fonts', 'STIX-Web'),\n        mj('jax', 'output', 'SVG', 'fonts', 'STIX-Web'),\n        mj('jax', 'element', 'mml'),\n    ]:\n        for parent, dirs, files in os.walk(tree):\n            for f in files:\n                static_data.append(pjoin(parent, f))\n\n    os.chdir(os.path.join('tests',))\n    js_tests = glob('*.js') + glob('*/*.js')\n\n    os.chdir(cwd)\n\n    package_data = {\n        'notebook' : ['templates/*'] + static_data,\n        'notebook.tests' : js_tests,\n        'notebook.bundler.tests': ['resources/*', 'resources/*/*', 'resources/*/*/.*'],\n        'notebook.services.api': ['api.yaml'],\n        'notebook.i18n': ['*/LC_MESSAGES/*.*'],\n    }\n    \n    return package_data\n\n\ndef check_package_data(package_data):\n    \"\"\"verify that package_data globs make sense\"\"\"\n    print(\"checking package data\")\n    for pkg, data in package_data.items():\n        pkg_root = pjoin(*pkg.split('.'))\n        for d in data:\n            path = pjoin(pkg_root, d)\n            if '*' in path:\n                assert len(glob(path)) > 0, \"No files match pattern %s\" % path\n            else:\n                assert os.path.exists(path), \"Missing package data: %s\" % path\n\n\ndef check_package_data_first(command):\n    \"\"\"decorator for checking package_data before running a given command\n    \n    Probably only needs to wrap build_py\n    \"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            check_package_data(self.package_data)\n            command.run(self)\n    return DecoratedCommand\n\ndef update_package_data(distribution):\n    \"\"\"update package_data to catch changes during setup\"\"\"\n    build_py = distribution.get_command_obj('build_py')\n    distribution.package_data = find_package_data()\n    # re-init build_py options which load package_data\n    build_py.finalize_options()\n\n#---------------------------------------------------------------------------\n# Notebook related\n#---------------------------------------------------------------------------\n\ntry:\n    from shutil import which\nexcept ImportError:\n    ## which() function copied from Python 3.4.3; PSF license\n    def which(cmd, mode=os.F_OK | os.X_OK, path=None):\n        \"\"\"Given a command, mode, and a PATH string, return the path which\n        conforms to the given mode on the PATH, or None if there is no such\n        file.\n\n        `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n        of os.environ.get(\"PATH\"), or can be overridden with a custom search\n        path.\n\n        \"\"\"\n        # Check that a given file can be accessed with the correct mode.\n        # Additionally check that `file` is not a directory, as on Windows\n        # directories pass the os.access check.\n        def _access_check(fn, mode):\n            return (os.path.exists(fn) and os.access(fn, mode)\n                    and not os.path.isdir(fn))\n\n        # If we're given a path with a directory part, look it up directly rather\n        # than referring to PATH directories. This includes checking relative to the\n        # current directory, e.g. ./script\n        if os.path.dirname(cmd):\n            if _access_check(cmd, mode):\n                return cmd\n            return None\n\n        if path is None:\n            path = os.environ.get(\"PATH\", os.defpath)\n        if not path:\n            return None\n        path = path.split(os.pathsep)\n\n        if sys.platform == \"win32\":\n            # The current directory takes precedence on Windows.\n            if not os.curdir in path:\n                path.insert(0, os.curdir)\n\n            # PATHEXT is necessary to check on Windows.\n            pathext = os.environ.get(\"PATHEXT\", \"\").split(os.pathsep)\n            # See if the given file matches any of the expected path extensions.\n            # This will allow us to short circuit when given \"python.exe\".\n            # If it does match, only test that one, otherwise we have to try\n            # others.\n            if any(cmd.lower().endswith(ext.lower()) for ext in pathext):\n                files = [cmd]\n            else:\n                files = [cmd + ext for ext in pathext]\n        else:\n            # On other platforms you don't have things like PATHEXT to tell you\n            # what file suffixes are executable, so just pass on cmd as-is.\n            files = [cmd]\n\n        seen = set()\n        for dir in path:\n            normdir = os.path.normcase(dir)\n            if not normdir in seen:\n                seen.add(normdir)\n                for thefile in files:\n                    name = os.path.join(dir, thefile)\n                    if _access_check(name, mode):\n                        return name\n        return None\n\n\nstatic = pjoin(repo_root, 'notebook', 'static')\n\nnpm_path = os.pathsep.join([\n    pjoin(repo_root, 'node_modules', '.bin'),\n    os.environ.get(\"PATH\", os.defpath),\n])\n\ndef mtime(path):\n    \"\"\"shorthand for mtime\"\"\"\n    return os.stat(path).st_mtime\n\n\ndef run(cmd, *args, **kwargs):\n    \"\"\"Echo a command before running it\"\"\"\n    log.info('> ' + list2cmdline(cmd))\n    kwargs['shell'] = (sys.platform == 'win32')\n    return check_call(cmd, *args, **kwargs)\n\nclass CompileBackendTranslation(Command):\n    description = \"compile the .po files into .mo files, that contain the translations.\"\n\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n\n    def run(self):\n        paths = glob('notebook/i18n/??_??')\n        for p in paths:\n            LANG = p[-5:]\n            for component in ['notebook', 'nbui']:\n                run(['pybabel', 'compile',\n                     '-D', component,\n                     '-f',\n                     '-l', LANG,\n                     '-i', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.po'),\n                     '-o', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.mo')\n                    ])\n\nclass Bower(Command):\n    description = \"fetch static client-side components with bower\"\n    \n    user_options = [\n        ('force', 'f', \"force fetching of bower dependencies\"),\n    ]\n    \n    def initialize_options(self):\n        self.force = False\n    \n    def finalize_options(self):\n        self.force = bool(self.force)\n    \n    bower_dir = pjoin(static, 'components')\n    node_modules = pjoin(repo_root, 'node_modules')\n    \n    def should_run(self):\n        if self.force:\n            return True\n        if not os.path.exists(self.bower_dir):\n            return True\n        \n        return mtime(self.bower_dir) < mtime(pjoin(repo_root, 'bower.json'))\n\n    def should_run_npm(self):\n        if not which('npm'):\n            print(\"npm unavailable\", file=sys.stderr)\n            return False\n        if not os.path.exists(self.node_modules):\n            return True\n        return mtime(self.node_modules) < mtime(pjoin(repo_root, 'package.json'))\n\n    def run(self):\n        if not self.should_run():\n            print(\"bower dependencies up to date\")\n            return\n        \n        if self.should_run_npm():\n            print(\"installing build dependencies with npm\")\n            run(['npm', 'install'], cwd=repo_root)\n            os.utime(self.node_modules, None)\n        \n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        \n        try:\n            run(\n                ['bower', 'install', '--allow-root', '--config.interactive=false'],\n                cwd=repo_root,\n                env=env\n            )\n        except OSError as e:\n            print(\"Failed to run bower: %s\" % e, file=sys.stderr)\n            print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n            raise\n        # self.npm_components()\n        os.utime(self.bower_dir, None)\n        # update package data in case this created new files\n        update_package_data(self.distribution)\n\n\ndef patch_out_bootstrap_bw_print():\n    \"\"\"Hack! Manually patch out the bootstrap rule that forces printing in B&W.\n\n    We haven't found a way to override this rule with another one.\n    \"\"\"\n    print_less = pjoin(static, 'components', 'bootstrap', 'less', 'print.less')\n    with open(print_less) as f:\n        lines = f.readlines()\n\n    for ix, line in enumerate(lines):\n        if 'Black prints faster' in line:\n            break\n    else:\n        return  # Already patched out, nothing to do.\n\n    rmed = lines.pop(ix)\n    print(\"Removed line\", ix, \"from bootstrap print.less:\")\n    print(\"-\", rmed)\n    print()\n    with open(print_less, 'w') as f:\n        f.writelines(lines)\n\nclass CompileCSS(Command):\n    \"\"\"Recompile Notebook CSS\n    \n    Regenerate the compiled CSS from LESS sources.\n    \n    Requires various dev dependencies, such as require and lessc.\n    \"\"\"\n    description = \"Recompile Notebook CSS\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    sources = []\n    targets = []\n    for name in ('ipython', 'style'):\n        sources.append(pjoin(static, 'style', '%s.less' % name))\n        targets.append(pjoin(static, 'style', '%s.min.css' % name))\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n\n        patch_out_bootstrap_bw_print()\n        \n        for src, dst in zip(self.sources, self.targets):\n            try:\n                run(['lessc',\n                    '--source-map',\n                    '--include-path=%s' % pipes.quote(static),\n                    src,\n                    dst,\n                ], cwd=repo_root, env=env)\n            except OSError as e:\n                print(\"Failed to build css: %s\" % e, file=sys.stderr)\n                print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n                raise\n        # update package data in case this created new files\n        update_package_data(self.distribution)\n\n\nclass CompileJS(Command):\n    \"\"\"Rebuild Notebook Javascript main.min.js files and translation files.\n    \n    Calls require via build-main.js\n    \"\"\"\n    description = \"Rebuild Notebook Javascript main.min.js files\"\n    user_options = [\n        ('force', 'f', \"force rebuilding js targets\"),\n    ]\n\n    def initialize_options(self):\n        self.force = False\n\n    def finalize_options(self):\n        self.force = bool(self.force)\n\n    apps = ['notebook', 'tree', 'edit', 'terminal', 'auth']\n    targets = [ pjoin(static, app, 'js', 'main.min.js') for app in apps ]\n    \n    def sources(self, name):\n        \"\"\"Generator yielding .js sources that an application depends on\"\"\"\n        yield pjoin(repo_root, 'tools', 'build-main.js')\n        yield pjoin(static, name, 'js', 'main.js')\n\n        for sec in [name, 'base', 'auth']:\n            for f in glob(pjoin(static, sec, 'js', '*.js')):\n                if not f.endswith('.min.js'):\n                    yield f\n        yield pjoin(static, 'services', 'config.js')\n        if name == 'notebook':\n            for f in glob(pjoin(static, 'services', '*', '*.js')):\n                yield f\n        for parent, dirs, files in os.walk(pjoin(static, 'components')):\n            if os.path.basename(parent) == 'MathJax':\n                # don't look in MathJax, since it takes forever to walk it\n                dirs[:] = []\n                continue\n            for f in files:\n                yield pjoin(parent, f)\n    \n    def should_run(self, name, target):\n        if self.force or not os.path.exists(target):\n            return True\n        target_mtime = mtime(target)\n        for source in self.sources(name):\n            if mtime(source) > target_mtime:\n                print(source, target)\n                return True\n        return False\n\n    def build_main(self, name):\n        \"\"\"Build main.min.js\"\"\"\n        target = pjoin(static, name, 'js', 'main.min.js')\n\n        if not self.should_run(name, target):\n            log.info(\"%s up to date\" % target)\n            return\n        log.info(\"Rebuilding %s\" % target)\n        run(['node', 'tools/build-main.js', name])\n\n    def build_jstranslation(self, trd):\n        lang = trd[-5:]\n        run([\n            pjoin('node_modules', '.bin', 'po2json'),\n            '-p', '-F',\n            '-f', 'jed1.x',\n            '-d', 'nbjs',\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.po'),\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.json'),\n        ])\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        pool = ThreadPool()\n        pool.map(self.build_main, self.apps)\n        pool.map(self.build_jstranslation, glob('notebook/i18n/??_??'))\n        # update package data in case this created new files\n        update_package_data(self.distribution)\n\n\nclass JavascriptVersion(Command):\n    \"\"\"write the javascript version to notebook javascript\"\"\"\n    description = \"Write Jupyter version to javascript\"\n    user_options = []\n    \n    def initialize_options(self):\n        pass\n    \n    def finalize_options(self):\n        pass\n    \n    def run(self):\n        nsfile = pjoin(repo_root, \"notebook\", \"static\", \"base\", \"js\", \"namespace.js\")\n        with open(nsfile) as f:\n            lines = f.readlines()\n        with open(nsfile, 'w') as f:\n            found = False\n            for line in lines:\n                if line.strip().startswith(\"Jupyter.version\"):\n                    line = '    Jupyter.version = \"{0}\";\\n'.format(version)\n                    found = True\n                f.write(line)\n            if not found:\n                raise RuntimeError(\"Didn't find Jupyter.version line in %s\" % nsfile)\n\n\ndef css_js_prerelease(command, strict=False):\n    \"\"\"decorator for building minified js/css prior to another command\"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            self.distribution.run_command('jsversion')\n            jsdeps = self.distribution.get_command_obj('jsdeps')\n            js = self.distribution.get_command_obj('js')\n            css = self.distribution.get_command_obj('css')\n            jsdeps.force = js.force = strict\n\n            targets = [ jsdeps.bower_dir ]\n            targets.extend(js.targets)\n            targets.extend(css.targets)\n            missing = [ t for t in targets if not os.path.exists(t) ]\n\n            if not is_repo and not missing:\n                # If we're an sdist, we aren't a repo and everything should be present.\n                # Don't rebuild js/css in that case.\n                command.run(self)\n                return\n\n            try:\n                self.distribution.run_command('js')\n                self.distribution.run_command('css')\n                self.distribution.run_command('backendtranslations')\n            except Exception as e:\n                # refresh missing\n                missing = [ t for t in targets if not os.path.exists(t) ]\n                if strict or missing:\n                    # die if strict or any targets didn't build\n                    prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                    missing = [ m[len(prefix):] for m in missing ]\n                    log.warn(\"rebuilding js and css failed. The following required files are missing: %s\" % missing)\n                    raise e\n                else:\n                    log.warn(\"rebuilding js and css failed (not a problem)\")\n                    log.warn(str(e))\n\n            # check again for missing targets, just in case:\n            missing = [ t for t in targets if not os.path.exists(t) ]\n            if missing:\n                # command succeeded, but targets still missing (?!)\n                prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                missing = [ m[len(prefix):] for m in missing ]\n                raise ValueError(\"The following required files are missing: %s\" % missing)\n\n            command.run(self)\n    return DecoratedCommand\n", "patch": "@@ -137,7 +137,6 @@ def find_package_data():\n         pjoin(components, \"font-awesome\", \"css\", \"*.css\"),\n         pjoin(components, \"es6-promise\", \"*.js\"),\n         pjoin(components, \"font-awesome\", \"fonts\", \"*.*\"),\n-        pjoin(components, \"google-caja\", \"html-css-sanitizer-minified.js\"),\n         pjoin(components, \"jed\", \"jed.js\"),\n         pjoin(components, \"jquery\", \"jquery.min.js\"),\n         pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.js\"),\n@@ -151,6 +150,7 @@ def find_package_data():\n         pjoin(components, \"requirejs\", \"require.js\"),\n         pjoin(components, \"requirejs-plugins\", \"src\", \"json.js\"),\n         pjoin(components, \"requirejs-text\", \"text.js\"),\n+        pjoin(components, \"sanitizer\", \"index.js\"),\n         pjoin(components, \"underscore\", \"underscore-min.js\"),\n         pjoin(components, \"moment\", \"moment.js\"),\n         pjoin(components, \"moment\", \"min\", \"*.js\"),\n@@ -374,14 +374,21 @@ def finalize_options(self):\n     \n     bower_dir = pjoin(static, 'components')\n     node_modules = pjoin(repo_root, 'node_modules')\n+    sanitizer_dir = pjoin(bower_dir, 'sanitizer')\n     \n     def should_run(self):\n         if self.force:\n             return True\n         if not os.path.exists(self.bower_dir):\n             return True\n-        \n-        return mtime(self.bower_dir) < mtime(pjoin(repo_root, 'bower.json'))\n+        if not os.path.exists(self.sanitizer_dir):\n+            return True\n+\n+        bower_stale = mtime(self.bower_dir) < mtime(pjoin(repo_root, 'bower.json'))\n+        if bower_stale:\n+            return True\n+\n+        return mtime(self.sanitizer_dir) < mtime(pjoin(repo_root, 'webpack.config.js'))\n \n     def should_run_npm(self):\n         if not which('npm'):\n@@ -415,6 +422,8 @@ def run(self):\n             print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n             raise\n         # self.npm_components()\n+        if not os.path.exists(self.sanitizer_dir):\n+            run(['npm', 'run', 'build:webpack'], cwd=repo_root, env=env)\n         os.utime(self.bower_dir, None)\n         # update package data in case this created new files\n         update_package_data(self.distribution)", "file_path": "files/2021_8/514", "file_language": "py", "file_name": "setupbase.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def oscmd(s):\n    print(\">\", s)\n    os.system(s)", "target": 0}, {"function": "def find_packages():\n    \"\"\"\n    Find all of the packages.\n    \"\"\"\n    packages = []\n    for dir,subdirs,files in os.walk(name):\n        package = dir.replace(os.path.sep, '.')\n        if '__init__.py' not in files:\n            # not a package\n            continue\n        packages.append(package)\n    return packages", "target": 0}, {"function": "def find_package_data():\n    \"\"\"\n    Find package_data.\n    \"\"\"\n    # This is not enough for these things to appear in a sdist.\n    # We need to muck with the MANIFEST to get this to work\n    \n    # exclude components and less from the walk;\n    # we will build the components separately\n    excludes = [\n        pjoin('static', 'components'),\n        pjoin('static', '*', 'less'),\n        pjoin('static', '*', 'node_modules')\n    ]\n\n    # walk notebook resources:\n    cwd = os.getcwd()\n    os.chdir('notebook')\n    static_data = []\n    for parent, dirs, files in os.walk('static'):\n        if any(fnmatch(parent, pat) for pat in excludes):\n            # prevent descending into subdirs\n            dirs[:] = []\n            continue\n        for f in files:\n            static_data.append(pjoin(parent, f))\n    \n    # for verification purposes, explicitly add main.min.js\n    # so that installation will fail if they are missing\n    for app in ['auth', 'edit', 'notebook', 'terminal', 'tree']:\n        static_data.append(pjoin('static', app, 'js', 'main.min.js'))\n    \n    components = pjoin(\"static\", \"components\")\n    # select the components we actually need to install\n    # (there are lots of resources we bundle for sdist-reasons that we don't actually use)\n    static_data.extend([\n        pjoin(components, \"backbone\", \"backbone-min.js\"),\n        pjoin(components, \"bootstrap\", \"dist\", \"js\", \"bootstrap.min.js\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"css\", \"bootstrap-tour.min.css\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"js\", \"bootstrap-tour.min.js\"),\n        pjoin(components, \"create-react-class\", \"index.js\"),\n        pjoin(components, \"font-awesome\", \"css\", \"*.css\"),\n        pjoin(components, \"es6-promise\", \"*.js\"),\n        pjoin(components, \"font-awesome\", \"fonts\", \"*.*\"),\n        pjoin(components, \"google-caja\", \"html-css-sanitizer-minified.js\"),\n        pjoin(components, \"jed\", \"jed.js\"),\n        pjoin(components, \"jquery\", \"jquery.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.css\"),\n        pjoin(components, \"jquery-ui\", \"jquery-ui.min.js\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"jquery-ui.min.css\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"images\", \"*\"),\n        pjoin(components, \"marked\", \"lib\", \"marked.js\"),\n        pjoin(components, \"react\", \"react.production.min.js\"),\n        pjoin(components, \"react\", \"react-dom.production.min.js\"),\n        pjoin(components, \"requirejs\", \"require.js\"),\n        pjoin(components, \"requirejs-plugins\", \"src\", \"json.js\"),\n        pjoin(components, \"requirejs-text\", \"text.js\"),\n        pjoin(components, \"underscore\", \"underscore-min.js\"),\n        pjoin(components, \"moment\", \"moment.js\"),\n        pjoin(components, \"moment\", \"min\", \"*.js\"),\n        pjoin(components, \"xterm.js\", \"index.js\"),\n        pjoin(components, \"xterm.js-css\", \"index.css\"),\n        pjoin(components, \"xterm.js-fit\", \"index.js\"),\n        pjoin(components, \"text-encoding\", \"lib\", \"encoding.js\"),\n    ])\n\n    # Ship all of Codemirror's CSS and JS\n    for parent, dirs, files in os.walk(pjoin(components, 'codemirror')):\n        for f in files:\n            if f.endswith(('.js', '.css')):\n                static_data.append(pjoin(parent, f))\n\n    # Trim mathjax\n    mj = lambda *path: pjoin(components, 'MathJax', *path)\n    static_data.extend([\n        mj('MathJax.js'),\n        mj('config', 'TeX-AMS-MML_HTMLorMML-full.js'),\n        mj('config', 'Safe.js'),\n    ])\n    \n    trees = []\n    mj_out = mj('jax', 'output')\n    \n    if os.path.exists(mj_out):\n        for output in os.listdir(mj_out):\n            path = pjoin(mj_out, output)\n            static_data.append(pjoin(path, '*.js'))\n            autoload = pjoin(path, 'autoload')\n            if os.path.isdir(autoload):\n                trees.append(autoload)\n\n    for tree in trees + [\n        mj('localization'), # limit to en?\n        mj('fonts', 'HTML-CSS', 'STIX-Web', 'woff'),\n        mj('extensions'),\n        mj('jax', 'input', 'TeX'),\n        mj('jax', 'output', 'HTML-CSS', 'fonts', 'STIX-Web'),\n        mj('jax', 'output', 'SVG', 'fonts', 'STIX-Web'),\n        mj('jax', 'element', 'mml'),\n    ]:\n        for parent, dirs, files in os.walk(tree):\n            for f in files:\n                static_data.append(pjoin(parent, f))\n\n    os.chdir(os.path.join('tests',))\n    js_tests = glob('*.js') + glob('*/*.js')\n\n    os.chdir(cwd)\n\n    package_data = {\n        'notebook' : ['templates/*'] + static_data,\n        'notebook.tests' : js_tests,\n        'notebook.bundler.tests': ['resources/*', 'resources/*/*', 'resources/*/*/.*'],\n        'notebook.services.api': ['api.yaml'],\n        'notebook.i18n': ['*/LC_MESSAGES/*.*'],\n    }\n    \n    return package_data", "target": 0}, {"function": "def check_package_data(package_data):\n    \"\"\"verify that package_data globs make sense\"\"\"\n    print(\"checking package data\")\n    for pkg, data in package_data.items():\n        pkg_root = pjoin(*pkg.split('.'))\n        for d in data:\n            path = pjoin(pkg_root, d)\n            if '*' in path:\n                assert len(glob(path)) > 0, \"No files match pattern %s\" % path\n            else:\n                assert os.path.exists(path), \"Missing package data: %s\" % path", "target": 0}, {"function": "def check_package_data_first(command):\n    \"\"\"decorator for checking package_data before running a given command\n    \n    Probably only needs to wrap build_py\n    \"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            check_package_data(self.package_data)\n            command.run(self)\n    return DecoratedCommand", "target": 0}, {"function": "def update_package_data(distribution):\n    \"\"\"update package_data to catch changes during setup\"\"\"\n    build_py = distribution.get_command_obj('build_py')\n    distribution.package_data = find_package_data()\n    # re-init build_py options which load package_data\n    build_py.finalize_options()", "target": 0}, {"function": "def mtime(path):\n    \"\"\"shorthand for mtime\"\"\"\n    return os.stat(path).st_mtime", "target": 0}, {"function": "def run(cmd, *args, **kwargs):\n    \"\"\"Echo a command before running it\"\"\"\n    log.info('> ' + list2cmdline(cmd))\n    kwargs['shell'] = (sys.platform == 'win32')\n    return check_call(cmd, *args, **kwargs)", "target": 0}, {"function": "class CompileBackendTranslation(Command):\n    description = \"compile the .po files into .mo files, that contain the translations.\"\n\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n\n    def run(self):\n        paths = glob('notebook/i18n/??_??')\n        for p in paths:\n            LANG = p[-5:]\n            for component in ['notebook', 'nbui']:\n                run(['pybabel', 'compile',\n                     '-D', component,\n                     '-f',\n                     '-l', LANG,\n                     '-i', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.po'),\n                     '-o', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.mo')\n                    ])", "target": 0}, {"function": "class Bower(Command):\n    description = \"fetch static client-side components with bower\"\n    \n    user_options = [\n        ('force', 'f', \"force fetching of bower dependencies\"),\n    ]\n    \n    def initialize_options(self):\n        self.force = False\n    \n    def finalize_options(self):\n        self.force = bool(self.force)\n    \n    bower_dir = pjoin(static, 'components')\n    node_modules = pjoin(repo_root, 'node_modules')\n    \n    def should_run(self):\n        if self.force:\n            return True\n        if not os.path.exists(self.bower_dir):\n            return True\n        \n        return mtime(self.bower_dir) < mtime(pjoin(repo_root, 'bower.json'))\n\n    def should_run_npm(self):\n        if not which('npm'):\n            print(\"npm unavailable\", file=sys.stderr)\n            return False\n        if not os.path.exists(self.node_modules):\n            return True\n        return mtime(self.node_modules) < mtime(pjoin(repo_root, 'package.json'))\n\n    def run(self):\n        if not self.should_run():\n            print(\"bower dependencies up to date\")\n            return\n        \n        if self.should_run_npm():\n            print(\"installing build dependencies with npm\")\n            run(['npm', 'install'], cwd=repo_root)\n            os.utime(self.node_modules, None)\n        \n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        \n        try:\n            run(\n                ['bower', 'install', '--allow-root', '--config.interactive=false'],\n                cwd=repo_root,\n                env=env\n            )\n        except OSError as e:\n            print(\"Failed to run bower: %s\" % e, file=sys.stderr)\n            print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n            raise\n        # self.npm_components()\n        os.utime(self.bower_dir, None)\n        # update package data in case this created new files\n        update_package_data(self.distribution)", "target": 0}, {"function": "def patch_out_bootstrap_bw_print():\n    \"\"\"Hack! Manually patch out the bootstrap rule that forces printing in B&W.\n\n    We haven't found a way to override this rule with another one.\n    \"\"\"\n    print_less = pjoin(static, 'components', 'bootstrap', 'less', 'print.less')\n    with open(print_less) as f:\n        lines = f.readlines()\n\n    for ix, line in enumerate(lines):\n        if 'Black prints faster' in line:\n            break\n    else:\n        return  # Already patched out, nothing to do.\n\n    rmed = lines.pop(ix)\n    print(\"Removed line\", ix, \"from bootstrap print.less:\")\n    print(\"-\", rmed)\n    print()\n    with open(print_less, 'w') as f:\n        f.writelines(lines)", "target": 0}, {"function": "class CompileCSS(Command):\n    \"\"\"Recompile Notebook CSS\n    \n    Regenerate the compiled CSS from LESS sources.\n    \n    Requires various dev dependencies, such as require and lessc.\n    \"\"\"\n    description = \"Recompile Notebook CSS\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    sources = []\n    targets = []\n    for name in ('ipython', 'style'):\n        sources.append(pjoin(static, 'style', '%s.less' % name))\n        targets.append(pjoin(static, 'style', '%s.min.css' % name))\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n\n        patch_out_bootstrap_bw_print()\n        \n        for src, dst in zip(self.sources, self.targets):\n            try:\n                run(['lessc',\n                    '--source-map',\n                    '--include-path=%s' % pipes.quote(static),\n                    src,\n                    dst,\n                ], cwd=repo_root, env=env)\n            except OSError as e:\n                print(\"Failed to build css: %s\" % e, file=sys.stderr)\n                print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n                raise\n        # update package data in case this created new files\n        update_package_data(self.distribution)", "target": 0}, {"function": "class CompileJS(Command):\n    \"\"\"Rebuild Notebook Javascript main.min.js files and translation files.\n    \n    Calls require via build-main.js\n    \"\"\"\n    description = \"Rebuild Notebook Javascript main.min.js files\"\n    user_options = [\n        ('force', 'f', \"force rebuilding js targets\"),\n    ]\n\n    def initialize_options(self):\n        self.force = False\n\n    def finalize_options(self):\n        self.force = bool(self.force)\n\n    apps = ['notebook', 'tree', 'edit', 'terminal', 'auth']\n    targets = [ pjoin(static, app, 'js', 'main.min.js') for app in apps ]\n    \n    def sources(self, name):\n        \"\"\"Generator yielding .js sources that an application depends on\"\"\"\n        yield pjoin(repo_root, 'tools', 'build-main.js')\n        yield pjoin(static, name, 'js', 'main.js')\n\n        for sec in [name, 'base', 'auth']:\n            for f in glob(pjoin(static, sec, 'js', '*.js')):\n                if not f.endswith('.min.js'):\n                    yield f\n        yield pjoin(static, 'services', 'config.js')\n        if name == 'notebook':\n            for f in glob(pjoin(static, 'services', '*', '*.js')):\n                yield f\n        for parent, dirs, files in os.walk(pjoin(static, 'components')):\n            if os.path.basename(parent) == 'MathJax':\n                # don't look in MathJax, since it takes forever to walk it\n                dirs[:] = []\n                continue\n            for f in files:\n                yield pjoin(parent, f)\n    \n    def should_run(self, name, target):\n        if self.force or not os.path.exists(target):\n            return True\n        target_mtime = mtime(target)\n        for source in self.sources(name):\n            if mtime(source) > target_mtime:\n                print(source, target)\n                return True\n        return False\n\n    def build_main(self, name):\n        \"\"\"Build main.min.js\"\"\"\n        target = pjoin(static, name, 'js', 'main.min.js')\n\n        if not self.should_run(name, target):\n            log.info(\"%s up to date\" % target)\n            return\n        log.info(\"Rebuilding %s\" % target)\n        run(['node', 'tools/build-main.js', name])\n\n    def build_jstranslation(self, trd):\n        lang = trd[-5:]\n        run([\n            pjoin('node_modules', '.bin', 'po2json'),\n            '-p', '-F',\n            '-f', 'jed1.x',\n            '-d', 'nbjs',\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.po'),\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.json'),\n        ])\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        pool = ThreadPool()\n        pool.map(self.build_main, self.apps)\n        pool.map(self.build_jstranslation, glob('notebook/i18n/??_??'))\n        # update package data in case this created new files\n        update_package_data(self.distribution)", "target": 0}, {"function": "class JavascriptVersion(Command):\n    \"\"\"write the javascript version to notebook javascript\"\"\"\n    description = \"Write Jupyter version to javascript\"\n    user_options = []\n    \n    def initialize_options(self):\n        pass\n    \n    def finalize_options(self):\n        pass\n    \n    def run(self):\n        nsfile = pjoin(repo_root, \"notebook\", \"static\", \"base\", \"js\", \"namespace.js\")\n        with open(nsfile) as f:\n            lines = f.readlines()\n        with open(nsfile, 'w') as f:\n            found = False\n            for line in lines:\n                if line.strip().startswith(\"Jupyter.version\"):\n                    line = '    Jupyter.version = \"{0}\";\\n'.format(version)\n                    found = True\n                f.write(line)\n            if not found:\n                raise RuntimeError(\"Didn't find Jupyter.version line in %s\" % nsfile)", "target": 0}, {"function": "def css_js_prerelease(command, strict=False):\n    \"\"\"decorator for building minified js/css prior to another command\"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            self.distribution.run_command('jsversion')\n            jsdeps = self.distribution.get_command_obj('jsdeps')\n            js = self.distribution.get_command_obj('js')\n            css = self.distribution.get_command_obj('css')\n            jsdeps.force = js.force = strict\n\n            targets = [ jsdeps.bower_dir ]\n            targets.extend(js.targets)\n            targets.extend(css.targets)\n            missing = [ t for t in targets if not os.path.exists(t) ]\n\n            if not is_repo and not missing:\n                # If we're an sdist, we aren't a repo and everything should be present.\n                # Don't rebuild js/css in that case.\n                command.run(self)\n                return\n\n            try:\n                self.distribution.run_command('js')\n                self.distribution.run_command('css')\n                self.distribution.run_command('backendtranslations')\n            except Exception as e:\n                # refresh missing\n                missing = [ t for t in targets if not os.path.exists(t) ]\n                if strict or missing:\n                    # die if strict or any targets didn't build\n                    prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                    missing = [ m[len(prefix):] for m in missing ]\n                    log.warn(\"rebuilding js and css failed. The following required files are missing: %s\" % missing)\n                    raise e\n                else:\n                    log.warn(\"rebuilding js and css failed (not a problem)\")\n                    log.warn(str(e))\n\n            # check again for missing targets, just in case:\n            missing = [ t for t in targets if not os.path.exists(t) ]\n            if missing:\n                # command succeeded, but targets still missing (?!)\n                prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                missing = [ m[len(prefix):] for m in missing ]\n                raise ValueError(\"The following required files are missing: %s\" % missing)\n\n            command.run(self)\n    return DecoratedCommand", "target": 0}], "function_after": [{"function": "def oscmd(s):\n    print(\">\", s)\n    os.system(s)", "target": 0}, {"function": "def find_packages():\n    \"\"\"\n    Find all of the packages.\n    \"\"\"\n    packages = []\n    for dir,subdirs,files in os.walk(name):\n        package = dir.replace(os.path.sep, '.')\n        if '__init__.py' not in files:\n            # not a package\n            continue\n        packages.append(package)\n    return packages", "target": 0}, {"function": "def find_package_data():\n    \"\"\"\n    Find package_data.\n    \"\"\"\n    # This is not enough for these things to appear in a sdist.\n    # We need to muck with the MANIFEST to get this to work\n    \n    # exclude components and less from the walk;\n    # we will build the components separately\n    excludes = [\n        pjoin('static', 'components'),\n        pjoin('static', '*', 'less'),\n        pjoin('static', '*', 'node_modules')\n    ]\n\n    # walk notebook resources:\n    cwd = os.getcwd()\n    os.chdir('notebook')\n    static_data = []\n    for parent, dirs, files in os.walk('static'):\n        if any(fnmatch(parent, pat) for pat in excludes):\n            # prevent descending into subdirs\n            dirs[:] = []\n            continue\n        for f in files:\n            static_data.append(pjoin(parent, f))\n    \n    # for verification purposes, explicitly add main.min.js\n    # so that installation will fail if they are missing\n    for app in ['auth', 'edit', 'notebook', 'terminal', 'tree']:\n        static_data.append(pjoin('static', app, 'js', 'main.min.js'))\n    \n    components = pjoin(\"static\", \"components\")\n    # select the components we actually need to install\n    # (there are lots of resources we bundle for sdist-reasons that we don't actually use)\n    static_data.extend([\n        pjoin(components, \"backbone\", \"backbone-min.js\"),\n        pjoin(components, \"bootstrap\", \"dist\", \"js\", \"bootstrap.min.js\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"css\", \"bootstrap-tour.min.css\"),\n        pjoin(components, \"bootstrap-tour\", \"build\", \"js\", \"bootstrap-tour.min.js\"),\n        pjoin(components, \"create-react-class\", \"index.js\"),\n        pjoin(components, \"font-awesome\", \"css\", \"*.css\"),\n        pjoin(components, \"es6-promise\", \"*.js\"),\n        pjoin(components, \"font-awesome\", \"fonts\", \"*.*\"),\n        pjoin(components, \"jed\", \"jed.js\"),\n        pjoin(components, \"jquery\", \"jquery.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.js\"),\n        pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.css\"),\n        pjoin(components, \"jquery-ui\", \"jquery-ui.min.js\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"jquery-ui.min.css\"),\n        pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"images\", \"*\"),\n        pjoin(components, \"marked\", \"lib\", \"marked.js\"),\n        pjoin(components, \"react\", \"react.production.min.js\"),\n        pjoin(components, \"react\", \"react-dom.production.min.js\"),\n        pjoin(components, \"requirejs\", \"require.js\"),\n        pjoin(components, \"requirejs-plugins\", \"src\", \"json.js\"),\n        pjoin(components, \"requirejs-text\", \"text.js\"),\n        pjoin(components, \"sanitizer\", \"index.js\"),\n        pjoin(components, \"underscore\", \"underscore-min.js\"),\n        pjoin(components, \"moment\", \"moment.js\"),\n        pjoin(components, \"moment\", \"min\", \"*.js\"),\n        pjoin(components, \"xterm.js\", \"index.js\"),\n        pjoin(components, \"xterm.js-css\", \"index.css\"),\n        pjoin(components, \"xterm.js-fit\", \"index.js\"),\n        pjoin(components, \"text-encoding\", \"lib\", \"encoding.js\"),\n    ])\n\n    # Ship all of Codemirror's CSS and JS\n    for parent, dirs, files in os.walk(pjoin(components, 'codemirror')):\n        for f in files:\n            if f.endswith(('.js', '.css')):\n                static_data.append(pjoin(parent, f))\n\n    # Trim mathjax\n    mj = lambda *path: pjoin(components, 'MathJax', *path)\n    static_data.extend([\n        mj('MathJax.js'),\n        mj('config', 'TeX-AMS-MML_HTMLorMML-full.js'),\n        mj('config', 'Safe.js'),\n    ])\n    \n    trees = []\n    mj_out = mj('jax', 'output')\n    \n    if os.path.exists(mj_out):\n        for output in os.listdir(mj_out):\n            path = pjoin(mj_out, output)\n            static_data.append(pjoin(path, '*.js'))\n            autoload = pjoin(path, 'autoload')\n            if os.path.isdir(autoload):\n                trees.append(autoload)\n\n    for tree in trees + [\n        mj('localization'), # limit to en?\n        mj('fonts', 'HTML-CSS', 'STIX-Web', 'woff'),\n        mj('extensions'),\n        mj('jax', 'input', 'TeX'),\n        mj('jax', 'output', 'HTML-CSS', 'fonts', 'STIX-Web'),\n        mj('jax', 'output', 'SVG', 'fonts', 'STIX-Web'),\n        mj('jax', 'element', 'mml'),\n    ]:\n        for parent, dirs, files in os.walk(tree):\n            for f in files:\n                static_data.append(pjoin(parent, f))\n\n    os.chdir(os.path.join('tests',))\n    js_tests = glob('*.js') + glob('*/*.js')\n\n    os.chdir(cwd)\n\n    package_data = {\n        'notebook' : ['templates/*'] + static_data,\n        'notebook.tests' : js_tests,\n        'notebook.bundler.tests': ['resources/*', 'resources/*/*', 'resources/*/*/.*'],\n        'notebook.services.api': ['api.yaml'],\n        'notebook.i18n': ['*/LC_MESSAGES/*.*'],\n    }\n    \n    return package_data", "target": 0}, {"function": "def check_package_data(package_data):\n    \"\"\"verify that package_data globs make sense\"\"\"\n    print(\"checking package data\")\n    for pkg, data in package_data.items():\n        pkg_root = pjoin(*pkg.split('.'))\n        for d in data:\n            path = pjoin(pkg_root, d)\n            if '*' in path:\n                assert len(glob(path)) > 0, \"No files match pattern %s\" % path\n            else:\n                assert os.path.exists(path), \"Missing package data: %s\" % path", "target": 0}, {"function": "def check_package_data_first(command):\n    \"\"\"decorator for checking package_data before running a given command\n    \n    Probably only needs to wrap build_py\n    \"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            check_package_data(self.package_data)\n            command.run(self)\n    return DecoratedCommand", "target": 0}, {"function": "def update_package_data(distribution):\n    \"\"\"update package_data to catch changes during setup\"\"\"\n    build_py = distribution.get_command_obj('build_py')\n    distribution.package_data = find_package_data()\n    # re-init build_py options which load package_data\n    build_py.finalize_options()", "target": 0}, {"function": "def mtime(path):\n    \"\"\"shorthand for mtime\"\"\"\n    return os.stat(path).st_mtime", "target": 0}, {"function": "def run(cmd, *args, **kwargs):\n    \"\"\"Echo a command before running it\"\"\"\n    log.info('> ' + list2cmdline(cmd))\n    kwargs['shell'] = (sys.platform == 'win32')\n    return check_call(cmd, *args, **kwargs)", "target": 0}, {"function": "class CompileBackendTranslation(Command):\n    description = \"compile the .po files into .mo files, that contain the translations.\"\n\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n\n    def run(self):\n        paths = glob('notebook/i18n/??_??')\n        for p in paths:\n            LANG = p[-5:]\n            for component in ['notebook', 'nbui']:\n                run(['pybabel', 'compile',\n                     '-D', component,\n                     '-f',\n                     '-l', LANG,\n                     '-i', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.po'),\n                     '-o', pjoin('notebook', 'i18n', LANG, 'LC_MESSAGES', component+'.mo')\n                    ])", "target": 0}, {"function": "class Bower(Command):\n    description = \"fetch static client-side components with bower\"\n    \n    user_options = [\n        ('force', 'f', \"force fetching of bower dependencies\"),\n    ]\n    \n    def initialize_options(self):\n        self.force = False\n    \n    def finalize_options(self):\n        self.force = bool(self.force)\n    \n    bower_dir = pjoin(static, 'components')\n    node_modules = pjoin(repo_root, 'node_modules')\n    sanitizer_dir = pjoin(bower_dir, 'sanitizer')\n    \n    def should_run(self):\n        if self.force:\n            return True\n        if not os.path.exists(self.bower_dir):\n            return True\n        if not os.path.exists(self.sanitizer_dir):\n            return True\n\n        bower_stale = mtime(self.bower_dir) < mtime(pjoin(repo_root, 'bower.json'))\n        if bower_stale:\n            return True\n\n        return mtime(self.sanitizer_dir) < mtime(pjoin(repo_root, 'webpack.config.js'))\n\n    def should_run_npm(self):\n        if not which('npm'):\n            print(\"npm unavailable\", file=sys.stderr)\n            return False\n        if not os.path.exists(self.node_modules):\n            return True\n        return mtime(self.node_modules) < mtime(pjoin(repo_root, 'package.json'))\n\n    def run(self):\n        if not self.should_run():\n            print(\"bower dependencies up to date\")\n            return\n        \n        if self.should_run_npm():\n            print(\"installing build dependencies with npm\")\n            run(['npm', 'install'], cwd=repo_root)\n            os.utime(self.node_modules, None)\n        \n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        \n        try:\n            run(\n                ['bower', 'install', '--allow-root', '--config.interactive=false'],\n                cwd=repo_root,\n                env=env\n            )\n        except OSError as e:\n            print(\"Failed to run bower: %s\" % e, file=sys.stderr)\n            print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n            raise\n        # self.npm_components()\n        if not os.path.exists(self.sanitizer_dir):\n            run(['npm', 'run', 'build:webpack'], cwd=repo_root, env=env)\n        os.utime(self.bower_dir, None)\n        # update package data in case this created new files\n        update_package_data(self.distribution)", "target": 0}, {"function": "def patch_out_bootstrap_bw_print():\n    \"\"\"Hack! Manually patch out the bootstrap rule that forces printing in B&W.\n\n    We haven't found a way to override this rule with another one.\n    \"\"\"\n    print_less = pjoin(static, 'components', 'bootstrap', 'less', 'print.less')\n    with open(print_less) as f:\n        lines = f.readlines()\n\n    for ix, line in enumerate(lines):\n        if 'Black prints faster' in line:\n            break\n    else:\n        return  # Already patched out, nothing to do.\n\n    rmed = lines.pop(ix)\n    print(\"Removed line\", ix, \"from bootstrap print.less:\")\n    print(\"-\", rmed)\n    print()\n    with open(print_less, 'w') as f:\n        f.writelines(lines)", "target": 0}, {"function": "class CompileCSS(Command):\n    \"\"\"Recompile Notebook CSS\n    \n    Regenerate the compiled CSS from LESS sources.\n    \n    Requires various dev dependencies, such as require and lessc.\n    \"\"\"\n    description = \"Recompile Notebook CSS\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    sources = []\n    targets = []\n    for name in ('ipython', 'style'):\n        sources.append(pjoin(static, 'style', '%s.less' % name))\n        targets.append(pjoin(static, 'style', '%s.min.css' % name))\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n\n        patch_out_bootstrap_bw_print()\n        \n        for src, dst in zip(self.sources, self.targets):\n            try:\n                run(['lessc',\n                    '--source-map',\n                    '--include-path=%s' % pipes.quote(static),\n                    src,\n                    dst,\n                ], cwd=repo_root, env=env)\n            except OSError as e:\n                print(\"Failed to build css: %s\" % e, file=sys.stderr)\n                print(\"You can install js dependencies with `npm install`\", file=sys.stderr)\n                raise\n        # update package data in case this created new files\n        update_package_data(self.distribution)", "target": 0}, {"function": "class CompileJS(Command):\n    \"\"\"Rebuild Notebook Javascript main.min.js files and translation files.\n    \n    Calls require via build-main.js\n    \"\"\"\n    description = \"Rebuild Notebook Javascript main.min.js files\"\n    user_options = [\n        ('force', 'f', \"force rebuilding js targets\"),\n    ]\n\n    def initialize_options(self):\n        self.force = False\n\n    def finalize_options(self):\n        self.force = bool(self.force)\n\n    apps = ['notebook', 'tree', 'edit', 'terminal', 'auth']\n    targets = [ pjoin(static, app, 'js', 'main.min.js') for app in apps ]\n    \n    def sources(self, name):\n        \"\"\"Generator yielding .js sources that an application depends on\"\"\"\n        yield pjoin(repo_root, 'tools', 'build-main.js')\n        yield pjoin(static, name, 'js', 'main.js')\n\n        for sec in [name, 'base', 'auth']:\n            for f in glob(pjoin(static, sec, 'js', '*.js')):\n                if not f.endswith('.min.js'):\n                    yield f\n        yield pjoin(static, 'services', 'config.js')\n        if name == 'notebook':\n            for f in glob(pjoin(static, 'services', '*', '*.js')):\n                yield f\n        for parent, dirs, files in os.walk(pjoin(static, 'components')):\n            if os.path.basename(parent) == 'MathJax':\n                # don't look in MathJax, since it takes forever to walk it\n                dirs[:] = []\n                continue\n            for f in files:\n                yield pjoin(parent, f)\n    \n    def should_run(self, name, target):\n        if self.force or not os.path.exists(target):\n            return True\n        target_mtime = mtime(target)\n        for source in self.sources(name):\n            if mtime(source) > target_mtime:\n                print(source, target)\n                return True\n        return False\n\n    def build_main(self, name):\n        \"\"\"Build main.min.js\"\"\"\n        target = pjoin(static, name, 'js', 'main.min.js')\n\n        if not self.should_run(name, target):\n            log.info(\"%s up to date\" % target)\n            return\n        log.info(\"Rebuilding %s\" % target)\n        run(['node', 'tools/build-main.js', name])\n\n    def build_jstranslation(self, trd):\n        lang = trd[-5:]\n        run([\n            pjoin('node_modules', '.bin', 'po2json'),\n            '-p', '-F',\n            '-f', 'jed1.x',\n            '-d', 'nbjs',\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.po'),\n            pjoin('notebook', 'i18n', lang, 'LC_MESSAGES', 'nbjs.json'),\n        ])\n\n    def run(self):\n        self.run_command('jsdeps')\n        env = os.environ.copy()\n        env['PATH'] = npm_path\n        pool = ThreadPool()\n        pool.map(self.build_main, self.apps)\n        pool.map(self.build_jstranslation, glob('notebook/i18n/??_??'))\n        # update package data in case this created new files\n        update_package_data(self.distribution)", "target": 0}, {"function": "class JavascriptVersion(Command):\n    \"\"\"write the javascript version to notebook javascript\"\"\"\n    description = \"Write Jupyter version to javascript\"\n    user_options = []\n    \n    def initialize_options(self):\n        pass\n    \n    def finalize_options(self):\n        pass\n    \n    def run(self):\n        nsfile = pjoin(repo_root, \"notebook\", \"static\", \"base\", \"js\", \"namespace.js\")\n        with open(nsfile) as f:\n            lines = f.readlines()\n        with open(nsfile, 'w') as f:\n            found = False\n            for line in lines:\n                if line.strip().startswith(\"Jupyter.version\"):\n                    line = '    Jupyter.version = \"{0}\";\\n'.format(version)\n                    found = True\n                f.write(line)\n            if not found:\n                raise RuntimeError(\"Didn't find Jupyter.version line in %s\" % nsfile)", "target": 0}, {"function": "def css_js_prerelease(command, strict=False):\n    \"\"\"decorator for building minified js/css prior to another command\"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            self.distribution.run_command('jsversion')\n            jsdeps = self.distribution.get_command_obj('jsdeps')\n            js = self.distribution.get_command_obj('js')\n            css = self.distribution.get_command_obj('css')\n            jsdeps.force = js.force = strict\n\n            targets = [ jsdeps.bower_dir ]\n            targets.extend(js.targets)\n            targets.extend(css.targets)\n            missing = [ t for t in targets if not os.path.exists(t) ]\n\n            if not is_repo and not missing:\n                # If we're an sdist, we aren't a repo and everything should be present.\n                # Don't rebuild js/css in that case.\n                command.run(self)\n                return\n\n            try:\n                self.distribution.run_command('js')\n                self.distribution.run_command('css')\n                self.distribution.run_command('backendtranslations')\n            except Exception as e:\n                # refresh missing\n                missing = [ t for t in targets if not os.path.exists(t) ]\n                if strict or missing:\n                    # die if strict or any targets didn't build\n                    prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                    missing = [ m[len(prefix):] for m in missing ]\n                    log.warn(\"rebuilding js and css failed. The following required files are missing: %s\" % missing)\n                    raise e\n                else:\n                    log.warn(\"rebuilding js and css failed (not a problem)\")\n                    log.warn(str(e))\n\n            # check again for missing targets, just in case:\n            missing = [ t for t in targets if not os.path.exists(t) ]\n            if missing:\n                # command succeeded, but targets still missing (?!)\n                prefix = os.path.commonprefix([repo_root + os.sep] + missing)\n                missing = [ m[len(prefix):] for m in missing ]\n                raise ValueError(\"The following required files are missing: %s\" % missing)\n\n            command.run(self)\n    return DecoratedCommand", "target": 0}]}, {"raw_url": "https://github.com/jupyter/notebook/raw/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5/webpack.config.js", "code": "const path = require('path');\n\nmodule.exports = {\n  entry: '@jupyterlab/apputils/lib/sanitizer',\n  output: {\n    filename: 'index.js',\n    path: path.resolve(__dirname, 'notebook/static/components/sanitizer'),\n    libraryTarget: \"amd\"\n  }\n}\n", "code_before": "", "patch": "@@ -0,0 +1,10 @@\n+const path = require('path');\n+\n+module.exports = {\n+  entry: '@jupyterlab/apputils/lib/sanitizer',\n+  output: {\n+    filename: 'index.js',\n+    path: path.resolve(__dirname, 'notebook/static/components/sanitizer'),\n+    libraryTarget: \"amd\"\n+  }\n+}", "file_path": "files/2021_8/515", "file_language": "js", "file_name": "webpack.config.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
