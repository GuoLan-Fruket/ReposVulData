{"index": 10506, "cve_id": "CVE-2019-25095", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "A vulnerability, which was classified as problematic, was found in kakwa LdapCherry up to 0.x. Affected is an unknown function of the component URL Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.0 is able to address this issue. The patch is identified as 6f98076281e9452fdb1adcd1bcbb70a6f968ade9. It is recommended to upgrade the affected component. VDB-217434 is the identifier assigned to this vulnerability.", "cvss": "6.1", "publish_date": "January 5, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "6f98076281e9452fdb1adcd1bcbb70a6f968ade9", "commit_message": "Protect against XSS vulnerabilities in URL redirection\n\n- Switch from base64 to URL encoding for the passing the URL, using the built-in Mako filtering\n- Apply HTML filtering to Mako output by default\n- Disable HTML filtering for nested templates in adduser, modify, and selfmodify", "commit_date": "2019-01-02T20:31:10Z", "project": "kakwa/ldapcherry", "url": "https://api.github.com/repos/kakwa/ldapcherry/commits/6f98076281e9452fdb1adcd1bcbb70a6f968ade9", "html_url": "https://github.com/kakwa/ldapcherry/commit/6f98076281e9452fdb1adcd1bcbb70a6f968ade9", "windows_before": [{"commit_id": "1ed654c91bf2caeedbad34944bf837b6c21a2292", "commit_date": "Wed Feb 7 19:54:23 2018 +0100", "commit_message": "Update README.rst", "files_name": ["README.rst"]}, {"commit_id": "c329e53811d640e21ee82cabb3bea747af58197b", "commit_date": "Wed Feb 7 19:52:29 2018 +0100", "commit_message": "Update README.rst", "files_name": ["README.rst"]}, {"commit_id": "05e3a0d6653ef6f0913de0e029b0f7a772956c3a", "commit_date": "Thu Oct 26 10:08:16 2017 +0200", "commit_message": "Update README.rst", "files_name": ["README.rst"]}, {"commit_id": "4bd6314b3b08f551ea60ae237a658d2f1ad108e4", "commit_date": "Mon Jun 12 19:50:42 2017 +0200", "commit_message": "remove useless tests", "files_name": ["tests/test_BackendAD.py", "tests/test_BackendDemo.py", "tests/test_BackendLdap.py"]}, {"commit_id": "c5dae7039a57497e49f30967ac8b8698790980ac", "commit_date": "Mon Jun 12 19:47:43 2017 +0200", "commit_message": "remove duplicated import in docs conf.py", "files_name": ["docs/conf.py"]}, {"commit_id": "ca1f78173f2d20cacd77d19169ec72defa2eac24", "commit_date": "Fri Jun 9 23:40:23 2017 +0200", "commit_message": "better documenation", "files_name": ["docs/goodies.rst"]}, {"commit_id": "9ed6007b02de3370cd53b95a32798702ada229e1", "commit_date": "Fri Jun 9 23:25:58 2017 +0200", "commit_message": "including fastcgi configuration example in the documentation", "files_name": ["docs/goodies.rst"]}, {"commit_id": "4d696a29ef3b5e858cd471705688d0f878f447dd", "commit_date": "Fri Jun 9 23:24:20 2017 +0200", "commit_message": "adding example for unix socket in defautl conf", "files_name": ["conf/ldapcherry.ini"]}, {"commit_id": "45d64120aed4c74618a2d673efeec9c2ccb57aa7", "commit_date": "Fri Jun 9 23:09:11 2017 +0200", "commit_message": "adding an nginx configuration exmaple for fastcgi", "files_name": ["goodies/nginx-fastcgi.conf"]}, {"commit_id": "00a4d22dd9c902d4a5794c26f9b22e29b69729f8", "commit_date": "Thu Apr 6 21:53:58 2017 +0200", "commit_message": "remove pip install method", "files_name": ["docs/install.rst"]}, {"commit_id": "32c513f96e828007f766447408ce796a81f2a7ce", "commit_date": "Thu Apr 6 21:37:02 2017 +0200", "commit_message": "change install method (pip install just doesn't work)", "files_name": ["README.rst"]}, {"commit_id": "7019cc2348aae65a5157b09780ac733348e6dc59", "commit_date": "Thu Apr 6 20:58:20 2017 +0200", "commit_message": "fix setup.py", "files_name": [".travis.yml", "ldapcherry/backend/backendAD.py"]}, {"commit_id": "a404cf0b395d013f45a4143d2005947a7ae8987c", "commit_date": "Thu Apr 6 20:57:42 2017 +0200", "commit_message": "add auto message for tagging script", "files_name": ["goodies/tag.sh"]}, {"commit_id": "9649803dd6f48dbf22d461ace0a0d257a939555c", "commit_date": "Thu Apr 6 20:52:55 2017 +0200", "commit_message": "changelog", "files_name": ["ChangeLog.rst"]}, {"commit_id": "eecccac1069d63a74e379b81d3ce6582d741875b", "commit_date": "Thu Apr 6 20:46:58 2017 +0200", "commit_message": "fix import of version in docs/conf.py and setup.py", "files_name": ["docs/conf.py", "setup.py"]}, {"commit_id": "f357adcd9a927a47357113220aeb8e6b5e4b2aa8", "commit_date": "Thu Apr 6 20:34:32 2017 +0200", "commit_message": "put version in standalone file", "files_name": ["docs/conf.py", "goodies/tag.sh", "ldapcherry/__init__.py", "ldapcherry/version.py", "setup.py"]}, {"commit_id": "e7998ced78e861024237693a340cc16f5baba940", "commit_date": "Thu Apr 6 20:28:44 2017 +0200", "commit_message": "adding a simple tagging script", "files_name": ["goodies/tag.sh"]}, {"commit_id": "8270988ed439a5c424e0ec77123075fe60ee8519", "commit_date": "Thu Apr 6 20:21:31 2017 +0200", "commit_message": "changelog + version bump + factorize version", "files_name": ["ChangeLog.rst", "docs/conf.py", "ldapcherry/__init__.py", "setup.py"]}, {"commit_id": "2e2453f309a8584f166c83b01a1db4c6e0b62f3e", "commit_date": "Thu Apr 6 01:26:54 2017 +0200", "commit_message": "fix camelcase", "files_name": ["resources/static/js/alignforms.js"]}, {"commit_id": "bbb13454bfe0bdd34c6d873b9a9ab20f195e4e56", "commit_date": "Thu Apr 6 01:21:57 2017 +0200", "commit_message": "more warning removal", "files_name": ["resources/static/js/alignforms.js"]}, {"commit_id": "3378822d2e8d84df1c033325551be2d5876a7b13", "commit_date": "Thu Apr 6 01:20:51 2017 +0200", "commit_message": "fix some warnings", "files_name": ["resources/static/js/alignforms.js"]}, {"commit_id": "6e526b6f15248f2f219ccfc7c0e95ba2298d7b4a", "commit_date": "Thu Apr 6 00:32:24 2017 +0200", "commit_message": "hack to have a cleaner resize", "files_name": ["resources/static/js/alignforms.js", "resources/templates/form.tmpl"]}, {"commit_id": "5b1803cb05fa4884047a3e957cfe5727225f101a", "commit_date": "Wed Apr 5 23:48:08 2017 +0200", "commit_message": "changelog + version bump", "files_name": ["ChangeLog.rst", "docs/conf.py", "setup.py"]}, {"commit_id": "de5f760c37f0faf04ed87acea54b9349eb361f4f", "commit_date": "Wed Apr 5 23:37:41 2017 +0200", "commit_message": "removing duplicate option in form select fields", "files_name": ["resources/templates/form.tmpl"]}, {"commit_id": "a33a46e8b8d7fbafe7435d5678258430e6c953e7", "commit_date": "Wed Apr 5 23:24:19 2017 +0200", "commit_message": "add dynamic resizing to align input-group-addon", "files_name": ["resources/static/js/alignforms.js", "resources/templates/base.tmpl", "resources/templates/form.tmpl"]}, {"commit_id": "eb3683084592d7615b4076d7509d461e7d340774", "commit_date": "Thu Mar 16 03:03:59 2017 +0100", "commit_message": "fixes", "files_name": ["ldapcherry/backend/backendAD.py", "ldapcherry/backend/backendLdap.py"]}, {"commit_id": "3fd6dcee824fa3fa87d3431b1c3b6f1527c8a214", "commit_date": "Thu Mar 16 02:45:23 2017 +0100", "commit_message": "fix issue related to python-ldap returning lists", "files_name": ["ldapcherry/backend/backendLdap.py"]}, {"commit_id": "55ce2bec5ee4641012cce750c8790160682d0a2f", "commit_date": "Thu Mar 16 02:40:23 2017 +0100", "commit_message": "small cleaning", "files_name": ["tests/test_BackendLdap.py"]}, {"commit_id": "e02a1a7f287ca86c8ee1d48d4c0414cc8fe2d434", "commit_date": "Thu Mar 16 02:39:41 2017 +0100", "commit_message": "adding posixGroups in test ldap", "files_name": ["tests/test_env/etc/ldap/content.ldif"]}, {"commit_id": "f9a305132821346c9caf5c1f987e141862e92e9e", "commit_date": "Sun Mar 12 17:46:49 2017 +0100", "commit_message": "Merge branch 'master' of https://github.com/kakwa/ldapcherry", "files_name": ["e4effc64ec99bcf88257cf2374c5df9b6bb22f3b - Sun Mar 12 17:45:01 2017 +0100 : fixing log errors in auth \"none\" mode", "ldapcherry/__init__.py"]}, {"commit_id": "b3a361afee8e4228385e0b4aaab3f9d9406c8b8f", "commit_date": "Fri Mar 10 00:43:51 2017 +0100", "commit_message": "remove broken download stats badge", "files_name": ["README.rst"]}, {"commit_id": "a802ce772a52e651a030c2372ebc56d227f6081b", "commit_date": "Tue Mar 7 23:21:27 2017 +0100", "commit_message": "adding documention of textfielf and better documenation for other types", "files_name": ["docs/deploy.rst"]}, {"commit_id": "3a1966324d6e5d344d9df4a771a109dde6959095", "commit_date": "Tue Mar 7 22:34:05 2017 +0100", "commit_message": "adding more try catch for template debugging", "files_name": ["ldapcherry/__init__.py"]}, {"commit_id": "819e575a28b081dcacbe5956e68031646c88d9fb", "commit_date": "Tue Mar 7 22:23:11 2017 +0100", "commit_message": "pep8ification", "files_name": ["ldapcherry/__init__.py", "ldapcherry/attributes.py"]}, {"commit_id": "12bb59790347f543b05f8279b7d9c2c465f78e53", "commit_date": "Tue Mar 7 22:19:15 2017 +0100", "commit_message": "Merge pull request #6 from rooty0/feat/template-parse-error", "files_name": ["7afe6c0ca7694e328127fbbe978229d683c29e9d - Tue Mar 7 22:14:18 2017 +0100 : Merge pull request #5 from rooty0/feat/add-textarea", "e1a27aa0a79a49db3c52f26dd3b4ad57e533a228 - Thu Mar 2 19:06:54 2017 -0800 : adding support for display template parse error", "ldapcherry/__init__.py", "ldapcherry/exceptions.py"]}, {"commit_id": "f7f72c7e116463a8618a58e84ecaec8d9be457c9", "commit_date": "Thu Mar 2 18:47:49 2017 -0800", "commit_message": "adding textarea", "files_name": ["ldapcherry/attributes.py", "resources/templates/form.tmpl"]}, {"commit_id": "e37b88dbda29d02655d66bb8d69744f78c6c9b6c", "commit_date": "Tue Jan 31 20:59:49 2017 +0100", "commit_message": "fix some errors in unused code", "files_name": ["ldapcherry/exceptions.py", "ldapcherry/ppolicy/simple.py", "misc/debug_ldapbackend.py", "setup.py"]}, {"commit_id": "d7303da85fa66217059be7ba1dfc7501ebe10686", "commit_date": "Tue Jan 24 03:06:48 2017 +0100", "commit_message": "fix test configuration", "files_name": ["tests/cfg/ldapcherry_adldap.cfg"]}, {"commit_id": "44024dbd022295d7394d2f303cd080c77b5b0ede", "commit_date": "Tue Jan 24 02:52:16 2017 +0100", "commit_message": "trying to add test on AD/DC for travis", "files_name": [".travis.yml", "tests/test_env/deploy.sh"]}, {"commit_id": "5a45a24055f01fd9ddd2384b23a9b08f49cc650a", "commit_date": "Mon Aug 1 19:57:51 2016 +0200", "commit_message": "proper exception in ldap backend", "files_name": ["ldapcherry/backend/backendLdap.py"]}, {"commit_id": "0a4db74f1f066c95c3c50b59d61b4f54f6779a37", "commit_date": "Sun Jul 31 13:14:31 2016 +0200", "commit_message": "version bump", "files_name": ["ChangeLog.rst", "docs/conf.py", "setup.py"]}, {"commit_id": "f7472525852b19c778ab64d762e8b2d4f53354d6", "commit_date": "Sun Jul 31 12:30:54 2016 +0200", "commit_message": "add changelog", "files_name": ["ChangeLog.rst"]}, {"commit_id": "7f00264e325045654eb8c0970d7f467609ced8c8", "commit_date": "Sun Jul 31 12:21:26 2016 +0200", "commit_message": "improve robustness if user dn attribute contains something like ,cn=", "files_name": ["ldapcherry/backend/backendLdap.py", "tests/test_BackendLdap.py"]}, {"commit_id": "d820cceeb6063dca74d02fd7911d8357833892ff", "commit_date": "Sun Jul 31 11:41:42 2016 +0200", "commit_message": "pep8", "files_name": ["ldapcherry/__init__.py"]}, {"commit_id": "d4235bc33ceb0a61c178e6c157c6e5dcacbd33a8", "commit_date": "Sun Jul 31 11:39:28 2016 +0200", "commit_message": "better behavior if user doesn't exist in one backend", "files_name": ["ldapcherry/__init__.py", "ldapcherry/backend/backendLdap.py", "tests/test_LdapCherry.py"]}, {"commit_id": "f21122b219c76fc7acd454c99c15199891b3f7a0", "commit_date": "Sun Jul 31 11:32:02 2016 +0200", "commit_message": "fix AD test configuration", "files_name": ["tests/cfg/attributes.yml", "tests/cfg/attributes_adldap.yml"]}, {"commit_id": "01aaf476c1c9c150dc3d5d27f81f796b863cd9e0", "commit_date": "Sun Jul 31 10:10:51 2016 +0200", "commit_message": "code multi-backends setups tests + new unit test", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "fec09b154316bc9145b472dcdcb97697ae472218", "commit_date": "Sun Jul 31 10:06:17 2016 +0200", "commit_message": "don't stop on UserDoesntExist exception on delete", "files_name": ["ldapcherry/__init__.py"]}, {"commit_id": "cf97f01245d15c1fc63786a6dc95b38738951f22", "commit_date": "Sun Jul 31 10:05:29 2016 +0200", "commit_message": "adding configuration for AD + LDAP setup", "files_name": ["tests/cfg/attributes_adldap.yml", "tests/cfg/ldapcherry_adldap.cfg", "tests/cfg/roles_adldap.yml"]}, {"commit_id": "5ddd9a6bbfe8b54930ea04032d84d9f591f20016", "commit_date": "Fri Jul 29 23:08:02 2016 +0200", "commit_message": "complete changelog", "files_name": ["ChangeLog.rst"]}, {"commit_id": "07a60823ad1a93aaba38790b602eac662958c436", "commit_date": "Fri Jul 29 23:06:09 2016 +0200", "commit_message": "Merge branch 'master' of https://github.com/kakwa/ldapcherry", "files_name": ["5ff62f0a8c98245f5632d69dfcb147efb87cd623 - Fri Jul 29 23:00:16 2016 +0200 : fix ppolicy client side javascript checker", "resources/static/js/ppolicy.js"]}, {"commit_id": "a84ee528aa32e9a13077c7abcc605ec8216a9ee2", "commit_date": "Fri Jul 29 22:56:56 2016 +0200", "commit_message": "403 flag for _check_auth + fix default 404 page", "files_name": ["ldapcherry/__init__.py"]}, {"commit_id": "1aa4a0bd641a05595c928553e94d5e0935ebaa60", "commit_date": "Fri Jul 29 11:17:44 2016 +0200", "commit_message": "adding change logs for next version", "files_name": []}], "windows_after": [{"commit_id": "636400b75fbe4d7b29012cfd657b937fb249d903", "commit_date": "Wed Jan 2 23:54:42 2019 +0100", "commit_message": "Merge pull request #16 from jthiltges/escape", "files_name": ["1f79648d5739e6f604b40daec4c19ca706b64a46 - Wed Jan 2 23:59:03 2019 +0100 : Update ChangeLog.rst", "ChangeLog.rst"]}, {"commit_id": "c6cce54d5f2496b686a7102306c9e8c08859a078", "commit_date": "Thu Jan 3 13:12:53 2019 -0600", "commit_message": "Escape form values with markupsafe", "files_name": ["resources/templates/form.tmpl"]}, {"commit_id": "5b0c72a572a6548f604e825cd30809a7c5c8945b", "commit_date": "Thu Jan 3 23:39:53 2019 +0100", "commit_message": "Merge pull request #17 from jthiltges/escfix", "files_name": ["2df56d2de23229b670d9fbc8b345aadaf0812707 - Wed Feb 6 21:38:11 2019 +0100 : fix template over-escaping + python 3 support", "resources/templates/base.tmpl", "resources/templates/form.tmpl", "resources/templates/roles.tmpl"]}, {"commit_id": "921a0820f4a307bd1ac696204e057578ecd7da03", "commit_date": "Wed Feb 6 22:26:46 2019 +0100", "commit_message": "switch to using lists in templates", "files_name": ["resources/templates/form.tmpl"]}, {"commit_id": "69526610f38b604b3c72fb230182ee3c29efa0d2", "commit_date": "Wed Feb 6 22:30:59 2019 +0100", "commit_message": "add a small script to generate a local dev config", "files_name": ["goodies/gen-dev-conf.sh"]}, {"commit_id": "74dc6c58941b61f838ee4e9cfcbc25df3c7b86c7", "commit_date": "Wed Feb 6 22:32:40 2019 +0100", "commit_message": "various changes to support python3", "files_name": ["ldapcherry/__init__.py", "ldapcherry/attributes.py", "ldapcherry/backend/backendDemo.py", "ldapcherry/backend/backendLdap.py", "ldapcherry/roles.py"]}, {"commit_id": "3beedc8d4d449f2e91374dd5e9388a12d57696bc", "commit_date": "Wed Feb 6 23:03:55 2019 +0100", "commit_message": "add an ignore on the local dev conf file", "files_name": [".gitignore"]}, {"commit_id": "ccc252965d3ad9fe31abb3a08ef50451fe02ccef", "commit_date": "Wed Feb 6 23:04:23 2019 +0100", "commit_message": "fix another __import__", "files_name": ["ldapcherry/__init__.py"]}, {"commit_id": "be598b0129f1d364430273f5a50e831b487166b0", "commit_date": "Wed Feb 6 23:55:03 2019 +0100", "commit_message": "slightly cleaner testenv deploy script", "files_name": ["tests/test_env/deploy.sh"]}, {"commit_id": "3d6e24eb7369478bd8834357c0c39059e5c84859", "commit_date": "Thu Feb 7 20:16:39 2019 +0100", "commit_message": "pep8", "files_name": ["ldapcherry/__init__.py", "ldapcherry/attributes.py", "ldapcherry/backend/backendDemo.py", "ldapcherry/backend/backendLdap.py", "ldapcherry/roles.py"]}, {"commit_id": "c81429a870d84bfeda4975ec5da3db43e06ba006", "commit_date": "Thu Feb 7 20:34:49 2019 +0100", "commit_message": "few tweaks for python3 support", "files_name": [".travis.yml", "ldapcherry/cli.py", "setup.py"]}, {"commit_id": "5bdcc5522ae7ff751955eb63fb403eb308459d4c", "commit_date": "Thu Feb 7 20:40:22 2019 +0100", "commit_message": "switch to xenial in travis configuration", "files_name": [".travis.yml"]}, {"commit_id": "9f6af580cda661a4c0db0b900cf5e92e9606d23e", "commit_date": "Thu Feb 7 20:41:22 2019 +0100", "commit_message": "remove env that doesn't exist", "files_name": [".travis.yml"]}, {"commit_id": "86fb6c1dd2dba5c2ef43006be80ea4e19170a1b2", "commit_date": "Thu Feb 7 20:44:19 2019 +0100", "commit_message": "adding an update as the first step of the deploy script", "files_name": ["tests/test_env/deploy.sh"]}, {"commit_id": "c3feafdb2cd9791c36fb13be8140fa82cb15ce1e", "commit_date": "Thu Feb 7 20:48:06 2019 +0100", "commit_message": "pep8", "files_name": ["ldapcherry/cli.py"]}, {"commit_id": "2a2864a3065eaddf15a1a6a23e4b3b8a670db11c", "commit_date": "Thu Feb 7 20:55:50 2019 +0100", "commit_message": "porting the tests over to python3", "files_name": ["tests/disable.py", "tests/test_Attributes.py", "tests/test_BackendAD.py", "tests/test_BackendDemo.py", "tests/test_BackendLdap.py", "tests/test_LdapCherry.py", "tests/test_Roles.py"]}, {"commit_id": "8bd4afb23550bbc7813b1e814b345c461784f146", "commit_date": "Thu Feb 7 21:07:36 2019 +0100", "commit_message": "remove scripts from pycodestyle", "files_name": [".travis.yml"]}, {"commit_id": "70140f966ac4c3d8c2e4f3b038d72dc8a8feddc3", "commit_date": "Thu Feb 7 21:09:42 2019 +0100", "commit_message": "pep 8", "files_name": ["ldapcherry/cli.py"]}, {"commit_id": "13bfbdcbbcf57dc9c928716e28dd3db9ac1af635", "commit_date": "Thu Feb 7 22:07:28 2019 +0100", "commit_message": "add requirements files for simulating RHEL 7 and Debian 9", "files_name": [".travis.yml", "requirements-el7.txt", "requirements-stretch.txt", "tests/test_env/deploy.sh"]}, {"commit_id": "ab9cd664ec87d8917d14dde52409ac129eb12c0c", "commit_date": "Thu Feb 7 22:12:49 2019 +0100", "commit_message": "fix pip install", "files_name": [".travis.yml"]}, {"commit_id": "fc98b1bd7070ce83e02df67a127a64fe0d6741ac", "commit_date": "Thu Feb 7 22:34:47 2019 +0100", "commit_message": "fixing the test env deploy script + small fix in unit tests", "files_name": ["tests/test_BackendLdap.py", "tests/test_env/deploy.sh"]}, {"commit_id": "9989f97091a1665acaeddd5f7b4e1e0f4b0426b7", "commit_date": "Thu Feb 7 22:38:30 2019 +0100", "commit_message": "remove python3 test env for el7 and stretch (no python3-ldap lib anyway)", "files_name": [".travis.yml"]}, {"commit_id": "bc0f3aceb50dbebb27b3314039e4ffddb9cf2cb5", "commit_date": "Thu Feb 7 22:42:30 2019 +0100", "commit_message": "adding another dependency for the samba/ad test", "files_name": ["tests/test_env/deploy.sh"]}, {"commit_id": "7430af5ffcd84e6d3f8c4426e861e5a7e0d70271", "commit_date": "Thu Feb 7 22:44:51 2019 +0100", "commit_message": "adding another samba package in test env", "files_name": ["tests/test_env/deploy.sh"]}, {"commit_id": "8b48a1f024b3db6add8dc67e69025bf791d66692", "commit_date": "Thu Feb 7 22:59:57 2019 +0100", "commit_message": "cleanup in travis file", "files_name": [".travis.yml"]}, {"commit_id": "d25ceef2d3c92b4349cbaec2a12ced519bb714ca", "commit_date": "Thu Feb 7 23:46:10 2019 +0100", "commit_message": "trying to fix samba/AD setup", "files_name": ["tests/test_env/deploy.sh"]}, {"commit_id": "12c511b53775fea213e1903eecf3aa400908e9bd", "commit_date": "Fri Feb 8 00:11:01 2019 +0100", "commit_message": "switch to explicit bytearray for checking missing params", "files_name": ["ldapcherry/backend/backendAD.py"]}, {"commit_id": "18fdeb483e422f8c97bae5d371e61459be95d162", "commit_date": "Fri Feb 8 20:33:58 2019 +0100", "commit_message": "better handling of the str/byte mess for python3", "files_name": ["ldapcherry/backend/backendAD.py", "ldapcherry/backend/backendLdap.py"]}, {"commit_id": "42759f1cc4519a75ccfd55c32ced6ca5fb6bd13a", "commit_date": "Fri Feb 8 20:38:03 2019 +0100", "commit_message": "pep8", "files_name": ["ldapcherry/backend/backendLdap.py"]}, {"commit_id": "8c0bf94904c2254f99d307a13b9b9c48a1150856", "commit_date": "Fri Feb 8 20:38:29 2019 +0100", "commit_message": "better log+fix in conf checking + fix in ppolicy handler", "files_name": ["ldapcherry/__init__.py", "ldapcherry/exceptions.py"]}, {"commit_id": "60d57d8530c6e0e773600340edb93c161054a5b3", "commit_date": "Fri Feb 8 20:47:15 2019 +0100", "commit_message": "changelog", "files_name": ["ChangeLog.rst"]}, {"commit_id": "b9437abefb98650d4ddca0dc8b285de2544f95a9", "commit_date": "Sat Feb 9 11:58:09 2019 +0100", "commit_message": "* support for python-ldap 2 and 3", "files_name": ["ldapcherry/backend/backendAD.py", "ldapcherry/backend/backendLdap.py"]}, {"commit_id": "bbfe96d4f780bb21894348915bc1eae7abbb263c", "commit_date": "Sat Feb 9 12:05:09 2019 +0100", "commit_message": "pep8", "files_name": ["ldapcherry/backend/backendLdap.py"]}, {"commit_id": "fb6b0a5d3146d18c3601fbb526fcf75f3be0c0fd", "commit_date": "Sat Feb 9 12:12:24 2019 +0100", "commit_message": "limit cherrypy to < 18.0.0 in setup.py", "files_name": ["setup.py"]}, {"commit_id": "979d4eeda8026e57d391024d6c0559f5e89e3265", "commit_date": "Sat Feb 9 15:42:48 2019 +0100", "commit_message": "disable ppolicy in samba test deployment", "files_name": ["tests/test_env/deploy.sh"]}, {"commit_id": "10747cff93b502f08dfa383ade2ce452d00f2994", "commit_date": "Sat Feb 9 16:08:18 2019 +0100", "commit_message": "add some python 3 support in the LDAP and AD backends", "files_name": ["ldapcherry/backend/backendAD.py", "ldapcherry/backend/backendLdap.py"]}, {"commit_id": "79983c078f77957ffe2c9f81352d89afbcc4e593", "commit_date": "Sat Feb 9 16:22:42 2019 +0100", "commit_message": "fix behavior of get_attributes()", "files_name": ["ldapcherry/attributes.py", "tests/test_Attributes.py"]}, {"commit_id": "90ff69586b0579e6d059d789da9a9ad37031c372", "commit_date": "Sat Feb 9 16:29:16 2019 +0100", "commit_message": "remove deprecation warning for html escape", "files_name": ["ldapcherry/__init__.py"]}, {"commit_id": "baa3430e637589814267eb88dc0741eefe81f621", "commit_date": "Sat Feb 9 17:12:39 2019 +0100", "commit_message": "fix test and exception handling in code", "files_name": ["ldapcherry/backend/backendLdap.py", "tests/test_BackendLdap.py", "tests/test_LdapCherry.py"]}, {"commit_id": "05aace0e9da4535a8c0822c552fe5ae1a0e15424", "commit_date": "Sat Feb 9 17:36:01 2019 +0100", "commit_message": "force the groups in flatten roles to be sorted", "files_name": ["ldapcherry/roles.py", "tests/test_Roles.py"]}, {"commit_id": "263e6be5478155e7f93580e7d0580d59995d38fe", "commit_date": "Sat Feb 9 17:40:43 2019 +0100", "commit_message": "fix html validator test for python 3", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "02357d886aef20224c91c24b6c92baa6579c6941", "commit_date": "Sat Feb 9 18:18:58 2019 +0100", "commit_message": "remove debug print", "files_name": ["ldapcherry/backend/backendLdap.py"]}, {"commit_id": "a56c491ee1a59f59a52182d4c204fa4bbf4bae78", "commit_date": "Sat Feb 9 18:31:37 2019 +0100", "commit_message": "cleanup in html template + tidylib", "files_name": ["resources/templates/adduser.tmpl", "resources/templates/base.tmpl", "resources/templates/index.tmpl", "setup.py", "tests/html_validator.py", "tests/test_LdapCherry.py"]}, {"commit_id": "f13961790f27a2dab07a0d8da344e6c20f4803de", "commit_date": "Sat Feb 9 18:40:48 2019 +0100", "commit_message": "adding exception for <nav> tags in html validation", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "98fca30fba88dc07860df7ae8552e857fcbb7914", "commit_date": "Sat Feb 9 18:44:51 2019 +0100", "commit_message": "ignoring another nav error", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "046afbbe29413378bd802f0b59f2624de0c1ad66", "commit_date": "Sat Feb 9 18:54:35 2019 +0100", "commit_message": "html_tidy cleanup", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "abfce4803a98cc2b936fb8978f090a17702a41df", "commit_date": "Sat Feb 9 18:57:50 2019 +0100", "commit_message": "fix typo", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "c5536bdc56396b68728712a72d17eb16cb7c37ca", "commit_date": "Sat Feb 9 19:04:40 2019 +0100", "commit_message": "adding a fffew other exception in tidylib", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "9d0d321e9ba1471e509d48cd54c14d99b1c4de81", "commit_date": "Sat Feb 9 19:09:32 2019 +0100", "commit_message": "another ignore for tidylib", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "7a8468f8b10eea6d131789b68f5c53782633ed0d", "commit_date": "Sat Feb 9 19:15:31 2019 +0100", "commit_message": "adding another ignore", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "fba2d32b440d9d8bd8fc1bf930de7624eac9582a", "commit_date": "Sat Feb 9 19:21:41 2019 +0100", "commit_message": "another exception for todylib", "files_name": ["tests/test_LdapCherry.py"]}, {"commit_id": "e50df5dde31ea97b2217b84aff8288ea186612f4", "commit_date": "Sat Feb 9 19:26:31 2019 +0100", "commit_message": "wider exception for <input> attribute \"type\" has invalid value", "files_name": ["tests/test_LdapCherry.py"]}], "parents": [{"commit_id_before": "1ed654c91bf2caeedbad34944bf837b6c21a2292", "url_before": "https://api.github.com/repos/kakwa/ldapcherry/commits/1ed654c91bf2caeedbad34944bf837b6c21a2292", "html_url_before": "https://github.com/kakwa/ldapcherry/commit/1ed654c91bf2caeedbad34944bf837b6c21a2292"}], "details": [{"raw_url": "https://github.com/kakwa/ldapcherry/raw/6f98076281e9452fdb1adcd1bcbb70a6f968ade9/ldapcherry%2F__init__.py", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:set expandtab tabstop=4 shiftwidth=4:\n#\n# The MIT License (MIT)\n# ldapCherry\n# Copyright (c) 2014 Carpentier Pierre-Francois\n\n# Generic imports\nimport sys\nimport re\nimport traceback\nimport json\nimport logging\nimport logging.handlers\nfrom operator import itemgetter\nfrom socket import error as socket_error\nimport urllib\nimport cgi\n\nfrom exceptions import *\nfrom ldapcherry.lclogging import *\nfrom ldapcherry.roles import Roles\nfrom ldapcherry.attributes import Attributes\n\n# Cherrypy http framework imports\nimport cherrypy\nfrom cherrypy.lib.httputil import parse_query_string\n\n# Mako template engines imports\nfrom mako.template import Template\nfrom mako import lookup\nfrom mako import exceptions\nfrom sets import Set\n\nSESSION_KEY = '_cp_username'\n\n\nclass LdapCherry(object):\n\n    def _handle_exception(self, e):\n        if hasattr(e, 'log'):\n            cherrypy.log.error(\n                msg=e.log,\n                severity=logging.ERROR\n            )\n        else:\n            cherrypy.log.error(\n                msg=\"uncaught exception: [%(e)s]\" % {'e': str(e)},\n                severity=logging.ERROR\n            )\n        # log the traceback as 'debug'\n        cherrypy.log.error(\n            msg='',\n            severity=logging.DEBUG,\n            traceback=True\n            )\n\n    def _escape_list(self, data):\n        ret = []\n        for i in data:\n            ret.append(cgi.escape(i, True))\n        return ret\n\n    def _escape_dict(self, data):\n        for d in data:\n            if isinstance(data[d], list):\n                data[d] = self._escape_list(data[d])\n            elif isinstance(data[d], dict):\n                data[d] = self._escape_dict(data[d])\n            elif isinstance(data[d], Set):\n                data[d] = Set(self._escape_list(data[d]))\n            else:\n                data[d] = cgi.escape(data[d], True)\n        return data\n\n    def _escape(self, data, dtype):\n        if data is None:\n            return None\n        elif dtype == 'search_list':\n            for d in data:\n                data[d] = self._escape_dict(data[d])\n        elif dtype == 'attr_list':\n            data = self._escape_dict(data)\n        elif dtype == 'lonely_groups':\n            data = self._escape_dict(data)\n        return data\n\n    def _get_param(self, section, key, config, default=None):\n        \"\"\" Get configuration parameter \"key\" from config\n        @str section: the section of the config file\n        @str key: the key to get\n        @dict config: the configuration (dictionnary)\n        @str default: the default value if parameter \"key\" is not present\n        @rtype: str (value of config['key'] if present default otherwith\n        \"\"\"\n        if section in config and key in config[section]:\n            return config[section][key]\n        if default is not None:\n            return default\n        else:\n            raise MissingParameter(section, key)\n\n    def _get_groups(self, username):\n        \"\"\" Get groups of a user\n        @str username: name of the user\n        @rtype: dict, format { '<backend>': [<list of groups>] }\n        \"\"\"\n        ret = {}\n        for b in self.backends:\n            ret[b] = self.backends[b].get_groups(username)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(ret),\n            severity=logging.DEBUG,\n        )\n        return ret\n\n    def _get_roles(self, username):\n        \"\"\" Get roles of a user\n        @str username: name of the user\n        @rtype: dict, format { 'roles': [<list of roles>],\n            'unusedgroups': [<list of groups not matching roles>] }\n        \"\"\"\n        groups = self._get_groups(username)\n        user_roles = self.roles.get_roles(groups)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' roles: \" + str(user_roles),\n            severity=logging.DEBUG,\n        )\n        return user_roles\n\n    def _is_admin(self, username):\n        \"\"\" Check if a user is an ldapcherry administrator\n        @str username: name of the user\n        @rtype: bool, True if administrator, False otherwise\n        \"\"\"\n        roles = self._get_roles(username)\n        return self.roles.is_admin(roles['roles'])\n\n    def _check_backends(self):\n        \"\"\" Check that every backend in roles and attributes\n        is declared in main configuration\n        \"\"\"\n        backends = self.backends_params.keys()\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n\n    def _init_backends(self, config):\n        \"\"\" Init all backends\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.backends_params = {}\n        self.backends = {}\n        self.backends_display_names = {}\n        for entry in config['backends']:\n            # split at the first dot\n            backend, sep, param = entry.partition('.')\n            value = config['backends'][entry]\n            if backend not in self.backends_params:\n                self.backends_params[backend] = {}\n            self.backends_params[backend][param] = value\n        for backend in self.backends_params:\n            # get the backend display_name\n            try:\n                self.backends_display_names[backend] = \\\n                    self.backends_params[backend]['display_name']\n            except:\n                self.backends_display_names[backend] = backend\n                self.backends_params[backend]['display_name'] = backend\n            params = self.backends_params[backend]\n            # Loading the backend module\n            try:\n                module = params['module']\n            except Exception as e:\n                raise MissingParameter('backends', backend + '.module')\n            try:\n                bc = __import__(module, globals(), locals(), ['Backend'], -1)\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleLoadingFail(module)\n            try:\n                attrslist = self.attributes.get_backend_attributes(backend)\n                key = self.attributes.get_backend_key(backend)\n                self.backends[backend] = bc.Backend(\n                    params,\n                    cherrypy.log,\n                    backend,\n                    attrslist,\n                    key,\n                    )\n            except MissingParameter as e:\n                raise\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleInitFail(module)\n\n    def _init_custom_js(self, config):\n        self.custom_js = []\n        if '/custom' not in config:\n            return\n        directory = self._get_param(\n            '/custom',\n            'tools.staticdir.dir',\n            config,\n            )\n        for file in os.listdir(directory):\n            if file.endswith(\".js\"):\n                self.custom_js.append(file)\n\n    def _init_ppolicy(self, config):\n        module = self._get_param(\n            'ppolicy',\n            'ppolicy.module',\n            config,\n            'ldapcherry.ppolicy'\n        )\n        try:\n            pp = __import__(module, globals(), locals(), ['PPolicy'], -1)\n        except:\n            raise BackendModuleLoadingFail(module)\n        if 'ppolicy' in config:\n            ppcfg = config['ppolicy']\n        else:\n            ppcfg = {}\n        self.ppolicy = pp.PPolicy(ppcfg, cherrypy.log)\n\n    def _init_auth(self, config):\n        \"\"\" Init authentication\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.auth_mode = self._get_param('auth', 'auth.mode', config)\n        if self.auth_mode in ['and', 'or', 'none']:\n            pass\n        elif self.auth_mode == 'custom':\n            # load custom auth module\n            auth_module = self._get_param('auth', 'auth.module', config)\n            auth = __import__(auth_module, globals(), locals(), ['Auth'], -1)\n            self.auth = auth.Auth(config['auth'], cherrypy.log)\n        else:\n            raise WrongParamValue(\n                'auth.mode',\n                'auth',\n                ['and', 'or', 'none', 'custom'],\n                )\n\n        self.roles_file = self._get_param('roles', 'roles.file', config)\n        cherrypy.log.error(\n            msg=\"loading roles file '%(file)s'\" % {'file': self.roles_file},\n            severity=logging.DEBUG\n        )\n        self.roles = Roles(self.roles_file)\n\n    def _set_access_log(self, config, level):\n        \"\"\" Configure access logs\n        \"\"\"\n        access_handler = self._get_param(\n            'global',\n            'log.access_handler',\n            config,\n            'syslog',\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\"\n            )\n\n        # replace access log handler by a syslog handler\n        if access_handler == 'syslog':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.access_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif access_handler == 'file':\n            pass\n\n        # replace access log handler by a null handler\n        elif access_handler == 'none':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.access_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.access_log.setLevel(level)\n\n    def _set_error_log(self, config, level, debug=False):\n        \"\"\" Configure error logs\n        \"\"\"\n        error_handler = self._get_param(\n            'global',\n            'log.error_handler',\n            config,\n            'syslog'\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\",\n            )\n\n        # replacing the error handler by a syslog handler\n        if error_handler == 'syslog':\n            cherrypy.log.error_log.handlers = []\n\n            # redefining log.error method because cherrypy does weird\n            # things like adding the date inside the message\n            # or adding space even if context is empty\n            # (by the way, what's the use of \"context\"?)\n            cherrypy.log.error = syslog_error\n\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.error_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif error_handler == 'file':\n            pass\n\n        # replacing the error handler by a null handler\n        elif error_handler == 'none':\n            cherrypy.log.error_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.error_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.error_log.setLevel(level)\n\n        if debug:\n            handler = logging.StreamHandler(sys.stderr)\n            handler.setLevel(logging.DEBUG)\n            cherrypy.log.error_log.addHandler(handler)\n            cherrypy.log.error_log.setLevel(logging.DEBUG)\n\n    def _auth(self, user, password):\n        \"\"\" authenticate a user\n        @str user: login of the user\n        @str password: password of the user\n        @rtype: dict, {'connected': <boolean, True if connection succeded>,\n            'isadmin': <True if user is ldapcherry administrator>}\n        \"\"\"\n        if self.auth_mode == 'none':\n            return {'connected': True, 'isadmin': True}\n        elif self.auth_mode == 'and':\n            ret1 = True\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) and ret1\n        elif self.auth_mode == 'or':\n            ret1 = False\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) or ret1\n        elif self.auth_mode == 'custom':\n            ret1 = self.auth.auth(user, password)\n        else:\n            raise Exception()\n        if not ret1:\n            return {'connected': False, 'isadmin': False}\n        else:\n            isadmin = self._is_admin(user)\n            return {'connected': True, 'isadmin': isadmin}\n\n    def _load_templates(self, config):\n        \"\"\" load templates\n        @dict: configuration of ldapcherry\n        \"\"\"\n        # definition of the template directory\n        self.template_dir = self._get_param(\n            'resources',\n            'templates.dir',\n            config\n            )\n        cherrypy.log.error(\n            msg=\"loading templates from dir '%(dir)s'\" %\n                {'dir': self.template_dir},\n            severity=logging.DEBUG\n        )\n        # preload templates\n        self.temp_lookup = lookup.TemplateLookup(\n            directories=self.template_dir, input_encoding='utf-8',\n            default_filters=['unicode', 'h']\n            )\n        # load each template\n        self.temp = {}\n        for t in ('index.tmpl', 'error.tmpl', 'login.tmpl', '404.tmpl',\n                  'searchadmin.tmpl', 'searchuser.tmpl', 'adduser.tmpl',\n                  'roles.tmpl', 'groups.tmpl', 'form.tmpl', 'selfmodify.tmpl',\n                  'modify.tmpl', 'service_unavailable.tmpl'\n                  ):\n            self.temp[t] = self.temp_lookup.get_template(t)\n\n    def reload(self, config=None, debug=False):\n        \"\"\" load/reload configuration\n        @dict: configuration of ldapcherry\n        \"\"\"\n        try:\n            # log configuration handling\n            # get log level\n            # (if not in configuration file, log level is set to debug)\n            level = get_loglevel(\n                self._get_param(\n                    'global',\n                    'log.level',\n                    config,\n                    'debug',\n                    )\n                )\n            # configure access log\n            self._set_access_log(config, level)\n            # configure error log\n            self._set_error_log(config, level, debug)\n\n            # load template files\n            self._load_templates(config)\n\n            # loading the auth configuration\n            self._init_auth(config)\n\n            # Loading the attributes\n            self.attributes_file = \\\n                self._get_param('attributes', 'attributes.file', config)\n            cherrypy.log.error(\n                msg=\"loading attributes file '%(file)s'\" %\n                    {'file': self.attributes_file},\n                severity=logging.DEBUG\n            )\n\n            self.notifications = {}\n\n            self.attributes = Attributes(self.attributes_file)\n\n            cherrypy.log.error(\n                msg=\"init directories backends\",\n                severity=logging.DEBUG\n            )\n            self._init_backends(config)\n            self._check_backends()\n\n            # loading the ppolicy\n            self._init_ppolicy(config)\n\n            # loading custom javascript\n            self._init_custom_js(config)\n\n            cherrypy.log.error(\n                msg=\"application started\",\n                severity=logging.INFO\n            )\n\n        except Exception as e:\n            self._handle_exception(e)\n            cherrypy.log.error(\n                msg=\"application failed to start\",\n                severity=logging.ERROR\n            )\n            exit(1)\n\n    def _add_notification(self, message):\n        \"\"\" add a notification in the notification queue of a user\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username not in self.notifications:\n            self.notifications[username] = []\n        self.notifications[username].append(message)\n\n    def _empty_notification(self):\n        \"\"\" empty and return list of message notification\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username in self.notifications:\n            ret = self.notifications[username]\n        else:\n            ret = []\n        self.notifications[username] = []\n        return ret\n\n    def _merge_user_attrs(self, attrs_backend, attrs_out, backend_name):\n        \"\"\" merge attributes from one backend search to the attributes dict\n        output\n\n        \"\"\"\n        for attr in attrs_backend:\n            if attr in self.attributes.backend_attributes[backend_name]:\n                attrid = self.attributes.backend_attributes[backend_name][attr]\n                if attrid not in attrs_out:\n                    attrs_out[attrid] = attrs_backend[attr]\n\n    def _search(self, searchstring):\n        \"\"\" search users\n        @str searchstring: search string\n        @rtype: dict, {<user>: {<attr>: <value>}}\n        \"\"\"\n        if searchstring is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            tmp = self.backends[b].search(searchstring)\n            for u in tmp:\n                if u not in ret:\n                    ret[u] = {}\n                self._merge_user_attrs(tmp[u], ret[u], b)\n        return ret\n\n    def _get_user(self, username):\n        \"\"\" get user attributes\n        @str username: user to get\n        @rtype: dict, {<attr>: <value>}\n        \"\"\"\n        if username is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            try:\n                tmp = self.backends[b].get_user(username)\n            except UserDoesntExist as e:\n                self._handle_exception(e)\n                tmp = {}\n            self._merge_user_attrs(tmp, ret, b)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes \" + str(ret),\n            severity=logging.DEBUG\n        )\n        return ret\n\n    def _parse_params(self, params):\n        \"\"\" get user attributes\n        @dict params: form parameters\n        @rtype: dict, {<type>: {<attr>: <value>}}\n        \"\"\"\n        ret = {'attrs': {}, 'roles': {}, 'groups': {}}\n        for p in params:\n            # each form attributes is prefixed with type, ex: attr.uidNumber\n            # separate this prefix from the attribute name\n            p_type, sep, param = p.partition('.')\n            if p_type == 'attr':\n                ret['attrs'][param] = params[p]\n            elif p_type == 'role':\n                ret['roles'][param] = params[p]\n            elif p_type == 'group':\n                # with groups there is a second prefix\n                # corresponding to the backend\n                backend, sep, value = param.partition('.')\n                if backend not in ret['groups']:\n                    ret['groups'][backend] = []\n                ret['groups'][backend].append(value)\n        return ret\n\n    def _check_admin(self):\n        \"\"\" check in the session database if current user\n        is an ldapcherry administrator\n        @rtype: boolean, True if administrator, False otherwise\n        \"\"\"\n        if self.auth_mode == 'none':\n            return True\n        return cherrypy.session['isadmin']\n\n    def _check_session(self):\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        return cherrypy.session.get(SESSION_KEY)\n\n    def _check_auth(self, must_admin, redir_login=True):\n        \"\"\" check if a user is autheticated and, optionnaly an administrator\n        if user not authenticated -> redirect to login page (with escaped URL\n            of the originaly requested page (redirection after login)\n        if user authenticated, not admin and must_admin enabled -> 403 error\n        @boolean must_admin: flag \"user must be an administrator to access\n            this page\"\n        @rtype str: login of the user\n        \"\"\"\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        username = self._check_session()\n\n        if cherrypy.request.query_string == '':\n            qs = ''\n        else:\n            qs = '?' + cherrypy.request.query_string\n        # Escaped version of the requested URL\n        quoted_requrl = urllib.quote_plus(cherrypy.url() + qs)\n        if not username:\n            # return to login page (with quoted url in query string)\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if 'connected' not in cherrypy.session \\\n                or not cherrypy.session['connected']:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if cherrypy.session['connected'] and \\\n                not cherrypy.session['isadmin']:\n            if must_admin:\n                # user is not an administrator, so he gets 403 Forbidden\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You are not allowed to access this resource.\",\n                    )\n            else:\n                return username\n\n        if cherrypy.session['connected'] and \\\n                cherrypy.session['isadmin']:\n            return username\n        else:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n    def _adduser(self, params):\n        cherrypy.log.error(\n            msg=\"add user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        badd = {}\n\n        for attr in self.attributes.get_attributes():\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                    raise PasswordMissMatch()\n                if not self._checkppolicy(params['attrs'][pwd1])['match']:\n                    raise PPolicyError()\n                params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs']:\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        added = False\n        for b in badd:\n            try:\n                self.backends[b].add_user(badd[b])\n                added = True\n            except UserAlreadyExists as e:\n                self._add_notification(\n                    'User already exists in backend \"' + b + '\"'\n                    )\n        if not added:\n            raise e\n\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' added by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        roles = []\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles.append(r)\n        groups = self.roles.get_groups(roles)\n        for b in groups:\n            self.backends[b].add_to_groups(username, Set(groups[b]))\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(groups),\n            severity=logging.DEBUG\n        )\n\n    def _modify_attrs(self, params, attr_list, username):\n        badd = {}\n        for attr in attr_list:\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if pwd1 in params['attrs']:\n                    if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                        raise PasswordMissMatch()\n                    if params['attrs'][pwd1] != '' and \\\n                            not self._checkppolicy(\n                                params['attrs'][pwd1]\n                                )['match']:\n                        raise PPolicyError()\n                    params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs'] and params['attrs'][attr] != '':\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        for b in badd:\n            try:\n                self.backends[b].set_attrs(username, badd[b])\n            except UserDoesntExist as e:\n                self._add_notification(\n                    'User does not exist in backend \"' + b + '\"'\n                    )\n\n        return badd\n\n    def _selfmodify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_selfattributes(),\n            username,\n            )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified his attributes\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n    def _modify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_attributes(),\n            username\n            )\n\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        tmp = self._get_roles(username)\n        roles_current = tmp['roles']\n        lonely_groups = tmp['unusedgroups']\n        roles_member = []\n        roles_not_member = []\n\n        groups_keep = {}\n        groups_remove = {}\n\n        for b in lonely_groups:\n            for g in lonely_groups[b]:\n                if b in params['groups'] and g in params['groups'][b]:\n                    if b not in groups_keep:\n                        groups_keep[b] = []\n                    groups_keep[b].append(g)\n\n                else:\n                    if b not in groups_remove:\n                        groups_remove[b] = []\n                    groups_remove[b].append(g)\n\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles_member.append(r)\n            else:\n                roles_not_member.append(r)\n\n        groups_current = self.roles.get_groups(roles_current)\n        groups_rm = self.roles.get_groups(roles_not_member)\n        groups_add = self.roles.get_groups(roles_member)\n\n        for b in groups_add:\n            for g in [groups_add, groups_keep,\n                      groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                Set(groups_add[b]) - \\\n                Set(groups_keep[b]) - \\\n                Set(groups_current[b]) - \\\n                Set(lonely_groups[b])\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' added to groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].add_to_groups(username, tmp)\n        for b in groups_rm:\n            for g in [groups_remove, groups_rm, groups_add,\n                      groups_keep, groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                (\n                    (Set(groups_rm[b]) | Set(groups_remove[b])) -\n                    (Set(groups_keep[b]) | Set(groups_add[b]))\n                ) & \\\n                (\n                    Set(groups_current[b]) | Set(lonely_groups[b])\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' removed from groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].del_from_groups(username, tmp)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles_member) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _deleteuser(self, username):\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        for b in self.backends:\n            try:\n                self.backends[b].del_user(username)\n            except UserDoesntExist as e:\n                cherrypy.log.error(\n                    msg=\"User '\" + username +\n                        \"' didn't exist in backend '\" + b + \"'\",\n                    severity=logging.INFO\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' deleted from backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n\n        cherrypy.log.error(\n            msg=\"User '\" + username + \"' deleted by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _checkppolicy(self, password):\n        return self.ppolicy.check(password)\n\n    @cherrypy.expose\n    @exception_decorator\n    def signin(self, url=None):\n        \"\"\"simple signin page\n        \"\"\"\n        return self.temp['login.tmpl'].render(url=url)\n\n    @cherrypy.expose\n    @exception_decorator\n    def login(self, login, password, url=None):\n        \"\"\"login page\n        \"\"\"\n        auth = self._auth(login, password)\n        cherrypy.session['isadmin'] = auth['isadmin']\n        cherrypy.session['connected'] = auth['connected']\n\n        if auth['connected']:\n            if auth['isadmin']:\n                message = \\\n                    \"login success for user '%(user)s' as administrator\" % {\n                        'user': login\n                    }\n            else:\n                message = \\\n                    \"login success for user '%(user)s' as normal user\" % {\n                        'user': login\n                    }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.INFO\n            )\n            cherrypy.session[SESSION_KEY] = cherrypy.request.login = login\n            if url is None:\n                redirect = \"/\"\n            else:\n                redirect = url\n            raise cherrypy.HTTPRedirect(redirect)\n        else:\n            message = \"login failed for user '%(user)s'\" % {\n                'user': login\n            }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.WARNING\n            )\n            if url is None:\n                qs = ''\n            else:\n                qs = '?url=' + urllib.quote_plus(url)\n            raise cherrypy.HTTPRedirect(\"/signin\" + qs)\n\n    @cherrypy.expose\n    @exception_decorator\n    def logout(self):\n        \"\"\" logout page\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        sess[SESSION_KEY] = None\n        if username:\n            cherrypy.request.login = None\n\n        cherrypy.log.error(\n            msg=\"user '%(user)s' logout\" % {'user': username},\n            severity=logging.INFO\n        )\n        raise cherrypy.HTTPRedirect(\"/signin\")\n\n    @cherrypy.expose\n    @exception_decorator\n    def index(self):\n        \"\"\"main page rendering\n        \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            user_attrs = None\n        else:\n            user_attrs = self._get_user(user)\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['index.tmpl'].render(\n            is_admin=is_admin,\n            attrs_list=attrs_list,\n            searchresult=self._escape(user_attrs, 'attr_list'),\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchuser(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        if searchstring is not None and len(searchstring) > 2:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchuser.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def checkppolicy(self, **params):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False, redir_login=False)\n        keys = params.keys()\n        if len(keys) != 1:\n            cherrypy.response.status = 400\n            return \"bad argument\"\n        password = params[keys[0]]\n        is_admin = self._check_admin()\n        ret = self._checkppolicy(password)\n        if ret['match']:\n            cherrypy.response.status = 200\n        else:\n            cherrypy.response.status = 200\n        return json.dumps(ret, separators=(',', ':'))\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchadmin(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        if searchstring is not None:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchadmin.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def adduser(self, **params):\n        \"\"\" add user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._adduser(params)\n            self._add_notification(\"User added\")\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=None,\n                modify=False,\n                autofill=True\n                )\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=None,\n                )\n            return self.temp['adduser.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n    @cherrypy.expose\n    @exception_decorator\n    def delete(self, user):\n        \"\"\" remove user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        try:\n            referer = cherrypy.request.headers['Referer']\n        except:\n            referer = '/'\n        self._deleteuser(user)\n        self._add_notification('User Deleted')\n        raise cherrypy.HTTPRedirect(referer)\n\n    @cherrypy.expose\n    @exception_decorator\n    def modify(self, user=None, **params):\n        \"\"\" modify user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._modify(params)\n            self._add_notification(\"User modified\")\n            try:\n                referer = cherrypy.request.headers['Referer']\n            except:\n                referer = '/'\n            raise cherrypy.HTTPRedirect(referer)\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n\n        if user is None:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"No user requested\"\n                )\n\n        user_attrs = self._get_user(user)\n        if user_attrs == {}:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"User '\" + user + \"' does not exist\"\n                )\n        tmp = self._get_roles(user)\n        user_roles = tmp['roles']\n        standalone_groups = tmp['unusedgroups']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        key = self.attributes.get_key()\n\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                keyattr=key,\n                autofill=False\n                )\n\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=user_roles,\n            )\n\n            glued_template = self.temp['modify.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                standalone_groups=self._escape(\n                    standalone_groups,\n                    'lonely_groups'\n                    ),\n                backends_display_names=self.backends_display_names,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n            )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n        return glued_template\n\n    @cherrypy.expose\n    @exception_decorator\n    def default(self, attr='', **params):\n        cherrypy.response.status = 404\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        return self.temp['404.tmpl'].render(\n            is_admin=is_admin,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def selfmodify(self, **params):\n        \"\"\" self modify user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"Not accessible with authentication disabled.\"\n                )\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._selfmodify(params)\n            self._add_notification(\n                \"Self modification done\"\n            )\n        user_attrs = self._get_user(user)\n\n        try:\n            if user_attrs == {}:\n                return self.temp['error.tmpl'].render(\n                    is_admin=is_admin,\n                    alert='warning',\n                    message=\"User doesn't exist\"\n                    )\n\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.get_selfattributes(),\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                autofill=False\n                )\n            return self.temp['selfmodify.tmpl'].render(\n                form=form,\n                is_admin=is_admin,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n", "code_before": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:set expandtab tabstop=4 shiftwidth=4:\n#\n# The MIT License (MIT)\n# ldapCherry\n# Copyright (c) 2014 Carpentier Pierre-Francois\n\n# Generic imports\nimport sys\nimport re\nimport traceback\nimport json\nimport logging\nimport logging.handlers\nfrom operator import itemgetter\nfrom socket import error as socket_error\nimport base64\nimport cgi\n\nfrom exceptions import *\nfrom ldapcherry.lclogging import *\nfrom ldapcherry.roles import Roles\nfrom ldapcherry.attributes import Attributes\n\n# Cherrypy http framework imports\nimport cherrypy\nfrom cherrypy.lib.httputil import parse_query_string\n\n# Mako template engines imports\nfrom mako.template import Template\nfrom mako import lookup\nfrom mako import exceptions\nfrom sets import Set\n\nSESSION_KEY = '_cp_username'\n\n\nclass LdapCherry(object):\n\n    def _handle_exception(self, e):\n        if hasattr(e, 'log'):\n            cherrypy.log.error(\n                msg=e.log,\n                severity=logging.ERROR\n            )\n        else:\n            cherrypy.log.error(\n                msg=\"uncaught exception: [%(e)s]\" % {'e': str(e)},\n                severity=logging.ERROR\n            )\n        # log the traceback as 'debug'\n        cherrypy.log.error(\n            msg='',\n            severity=logging.DEBUG,\n            traceback=True\n            )\n\n    def _escape_list(self, data):\n        ret = []\n        for i in data:\n            ret.append(cgi.escape(i, True))\n        return ret\n\n    def _escape_dict(self, data):\n        for d in data:\n            if isinstance(data[d], list):\n                data[d] = self._escape_list(data[d])\n            elif isinstance(data[d], dict):\n                data[d] = self._escape_dict(data[d])\n            elif isinstance(data[d], Set):\n                data[d] = Set(self._escape_list(data[d]))\n            else:\n                data[d] = cgi.escape(data[d], True)\n        return data\n\n    def _escape(self, data, dtype):\n        if data is None:\n            return None\n        elif dtype == 'search_list':\n            for d in data:\n                data[d] = self._escape_dict(data[d])\n        elif dtype == 'attr_list':\n            data = self._escape_dict(data)\n        elif dtype == 'lonely_groups':\n            data = self._escape_dict(data)\n        return data\n\n    def _get_param(self, section, key, config, default=None):\n        \"\"\" Get configuration parameter \"key\" from config\n        @str section: the section of the config file\n        @str key: the key to get\n        @dict config: the configuration (dictionnary)\n        @str default: the default value if parameter \"key\" is not present\n        @rtype: str (value of config['key'] if present default otherwith\n        \"\"\"\n        if section in config and key in config[section]:\n            return config[section][key]\n        if default is not None:\n            return default\n        else:\n            raise MissingParameter(section, key)\n\n    def _get_groups(self, username):\n        \"\"\" Get groups of a user\n        @str username: name of the user\n        @rtype: dict, format { '<backend>': [<list of groups>] }\n        \"\"\"\n        ret = {}\n        for b in self.backends:\n            ret[b] = self.backends[b].get_groups(username)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(ret),\n            severity=logging.DEBUG,\n        )\n        return ret\n\n    def _get_roles(self, username):\n        \"\"\" Get roles of a user\n        @str username: name of the user\n        @rtype: dict, format { 'roles': [<list of roles>],\n            'unusedgroups': [<list of groups not matching roles>] }\n        \"\"\"\n        groups = self._get_groups(username)\n        user_roles = self.roles.get_roles(groups)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' roles: \" + str(user_roles),\n            severity=logging.DEBUG,\n        )\n        return user_roles\n\n    def _is_admin(self, username):\n        \"\"\" Check if a user is an ldapcherry administrator\n        @str username: name of the user\n        @rtype: bool, True if administrator, False otherwise\n        \"\"\"\n        roles = self._get_roles(username)\n        return self.roles.is_admin(roles['roles'])\n\n    def _check_backends(self):\n        \"\"\" Check that every backend in roles and attributes\n        is declared in main configuration\n        \"\"\"\n        backends = self.backends_params.keys()\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n\n    def _init_backends(self, config):\n        \"\"\" Init all backends\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.backends_params = {}\n        self.backends = {}\n        self.backends_display_names = {}\n        for entry in config['backends']:\n            # split at the first dot\n            backend, sep, param = entry.partition('.')\n            value = config['backends'][entry]\n            if backend not in self.backends_params:\n                self.backends_params[backend] = {}\n            self.backends_params[backend][param] = value\n        for backend in self.backends_params:\n            # get the backend display_name\n            try:\n                self.backends_display_names[backend] = \\\n                    self.backends_params[backend]['display_name']\n            except:\n                self.backends_display_names[backend] = backend\n                self.backends_params[backend]['display_name'] = backend\n            params = self.backends_params[backend]\n            # Loading the backend module\n            try:\n                module = params['module']\n            except Exception as e:\n                raise MissingParameter('backends', backend + '.module')\n            try:\n                bc = __import__(module, globals(), locals(), ['Backend'], -1)\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleLoadingFail(module)\n            try:\n                attrslist = self.attributes.get_backend_attributes(backend)\n                key = self.attributes.get_backend_key(backend)\n                self.backends[backend] = bc.Backend(\n                    params,\n                    cherrypy.log,\n                    backend,\n                    attrslist,\n                    key,\n                    )\n            except MissingParameter as e:\n                raise\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleInitFail(module)\n\n    def _init_custom_js(self, config):\n        self.custom_js = []\n        if '/custom' not in config:\n            return\n        directory = self._get_param(\n            '/custom',\n            'tools.staticdir.dir',\n            config,\n            )\n        for file in os.listdir(directory):\n            if file.endswith(\".js\"):\n                self.custom_js.append(file)\n\n    def _init_ppolicy(self, config):\n        module = self._get_param(\n            'ppolicy',\n            'ppolicy.module',\n            config,\n            'ldapcherry.ppolicy'\n        )\n        try:\n            pp = __import__(module, globals(), locals(), ['PPolicy'], -1)\n        except:\n            raise BackendModuleLoadingFail(module)\n        if 'ppolicy' in config:\n            ppcfg = config['ppolicy']\n        else:\n            ppcfg = {}\n        self.ppolicy = pp.PPolicy(ppcfg, cherrypy.log)\n\n    def _init_auth(self, config):\n        \"\"\" Init authentication\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.auth_mode = self._get_param('auth', 'auth.mode', config)\n        if self.auth_mode in ['and', 'or', 'none']:\n            pass\n        elif self.auth_mode == 'custom':\n            # load custom auth module\n            auth_module = self._get_param('auth', 'auth.module', config)\n            auth = __import__(auth_module, globals(), locals(), ['Auth'], -1)\n            self.auth = auth.Auth(config['auth'], cherrypy.log)\n        else:\n            raise WrongParamValue(\n                'auth.mode',\n                'auth',\n                ['and', 'or', 'none', 'custom'],\n                )\n\n        self.roles_file = self._get_param('roles', 'roles.file', config)\n        cherrypy.log.error(\n            msg=\"loading roles file '%(file)s'\" % {'file': self.roles_file},\n            severity=logging.DEBUG\n        )\n        self.roles = Roles(self.roles_file)\n\n    def _set_access_log(self, config, level):\n        \"\"\" Configure access logs\n        \"\"\"\n        access_handler = self._get_param(\n            'global',\n            'log.access_handler',\n            config,\n            'syslog',\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\"\n            )\n\n        # replace access log handler by a syslog handler\n        if access_handler == 'syslog':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.access_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif access_handler == 'file':\n            pass\n\n        # replace access log handler by a null handler\n        elif access_handler == 'none':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.access_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.access_log.setLevel(level)\n\n    def _set_error_log(self, config, level, debug=False):\n        \"\"\" Configure error logs\n        \"\"\"\n        error_handler = self._get_param(\n            'global',\n            'log.error_handler',\n            config,\n            'syslog'\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\",\n            )\n\n        # replacing the error handler by a syslog handler\n        if error_handler == 'syslog':\n            cherrypy.log.error_log.handlers = []\n\n            # redefining log.error method because cherrypy does weird\n            # things like adding the date inside the message\n            # or adding space even if context is empty\n            # (by the way, what's the use of \"context\"?)\n            cherrypy.log.error = syslog_error\n\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.error_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif error_handler == 'file':\n            pass\n\n        # replacing the error handler by a null handler\n        elif error_handler == 'none':\n            cherrypy.log.error_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.error_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.error_log.setLevel(level)\n\n        if debug:\n            handler = logging.StreamHandler(sys.stderr)\n            handler.setLevel(logging.DEBUG)\n            cherrypy.log.error_log.addHandler(handler)\n            cherrypy.log.error_log.setLevel(logging.DEBUG)\n\n    def _auth(self, user, password):\n        \"\"\" authenticate a user\n        @str user: login of the user\n        @str password: password of the user\n        @rtype: dict, {'connected': <boolean, True if connection succeded>,\n            'isadmin': <True if user is ldapcherry administrator>}\n        \"\"\"\n        if self.auth_mode == 'none':\n            return {'connected': True, 'isadmin': True}\n        elif self.auth_mode == 'and':\n            ret1 = True\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) and ret1\n        elif self.auth_mode == 'or':\n            ret1 = False\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) or ret1\n        elif self.auth_mode == 'custom':\n            ret1 = self.auth.auth(user, password)\n        else:\n            raise Exception()\n        if not ret1:\n            return {'connected': False, 'isadmin': False}\n        else:\n            isadmin = self._is_admin(user)\n            return {'connected': True, 'isadmin': isadmin}\n\n    def _load_templates(self, config):\n        \"\"\" load templates\n        @dict: configuration of ldapcherry\n        \"\"\"\n        # definition of the template directory\n        self.template_dir = self._get_param(\n            'resources',\n            'templates.dir',\n            config\n            )\n        cherrypy.log.error(\n            msg=\"loading templates from dir '%(dir)s'\" %\n                {'dir': self.template_dir},\n            severity=logging.DEBUG\n        )\n        # preload templates\n        self.temp_lookup = lookup.TemplateLookup(\n            directories=self.template_dir, input_encoding='utf-8'\n            )\n        # load each template\n        self.temp = {}\n        for t in ('index.tmpl', 'error.tmpl', 'login.tmpl', '404.tmpl',\n                  'searchadmin.tmpl', 'searchuser.tmpl', 'adduser.tmpl',\n                  'roles.tmpl', 'groups.tmpl', 'form.tmpl', 'selfmodify.tmpl',\n                  'modify.tmpl', 'service_unavailable.tmpl'\n                  ):\n            self.temp[t] = self.temp_lookup.get_template(t)\n\n    def reload(self, config=None, debug=False):\n        \"\"\" load/reload configuration\n        @dict: configuration of ldapcherry\n        \"\"\"\n        try:\n            # log configuration handling\n            # get log level\n            # (if not in configuration file, log level is set to debug)\n            level = get_loglevel(\n                self._get_param(\n                    'global',\n                    'log.level',\n                    config,\n                    'debug',\n                    )\n                )\n            # configure access log\n            self._set_access_log(config, level)\n            # configure error log\n            self._set_error_log(config, level, debug)\n\n            # load template files\n            self._load_templates(config)\n\n            # loading the auth configuration\n            self._init_auth(config)\n\n            # Loading the attributes\n            self.attributes_file = \\\n                self._get_param('attributes', 'attributes.file', config)\n            cherrypy.log.error(\n                msg=\"loading attributes file '%(file)s'\" %\n                    {'file': self.attributes_file},\n                severity=logging.DEBUG\n            )\n\n            self.notifications = {}\n\n            self.attributes = Attributes(self.attributes_file)\n\n            cherrypy.log.error(\n                msg=\"init directories backends\",\n                severity=logging.DEBUG\n            )\n            self._init_backends(config)\n            self._check_backends()\n\n            # loading the ppolicy\n            self._init_ppolicy(config)\n\n            # loading custom javascript\n            self._init_custom_js(config)\n\n            cherrypy.log.error(\n                msg=\"application started\",\n                severity=logging.INFO\n            )\n\n        except Exception as e:\n            self._handle_exception(e)\n            cherrypy.log.error(\n                msg=\"application failed to start\",\n                severity=logging.ERROR\n            )\n            exit(1)\n\n    def _add_notification(self, message):\n        \"\"\" add a notification in the notification queue of a user\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username not in self.notifications:\n            self.notifications[username] = []\n        self.notifications[username].append(message)\n\n    def _empty_notification(self):\n        \"\"\" empty and return list of message notification\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username in self.notifications:\n            ret = self.notifications[username]\n        else:\n            ret = []\n        self.notifications[username] = []\n        return ret\n\n    def _merge_user_attrs(self, attrs_backend, attrs_out, backend_name):\n        \"\"\" merge attributes from one backend search to the attributes dict\n        output\n\n        \"\"\"\n        for attr in attrs_backend:\n            if attr in self.attributes.backend_attributes[backend_name]:\n                attrid = self.attributes.backend_attributes[backend_name][attr]\n                if attrid not in attrs_out:\n                    attrs_out[attrid] = attrs_backend[attr]\n\n    def _search(self, searchstring):\n        \"\"\" search users\n        @str searchstring: search string\n        @rtype: dict, {<user>: {<attr>: <value>}}\n        \"\"\"\n        if searchstring is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            tmp = self.backends[b].search(searchstring)\n            for u in tmp:\n                if u not in ret:\n                    ret[u] = {}\n                self._merge_user_attrs(tmp[u], ret[u], b)\n        return ret\n\n    def _get_user(self, username):\n        \"\"\" get user attributes\n        @str username: user to get\n        @rtype: dict, {<attr>: <value>}\n        \"\"\"\n        if username is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            try:\n                tmp = self.backends[b].get_user(username)\n            except UserDoesntExist as e:\n                self._handle_exception(e)\n                tmp = {}\n            self._merge_user_attrs(tmp, ret, b)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes \" + str(ret),\n            severity=logging.DEBUG\n        )\n        return ret\n\n    def _parse_params(self, params):\n        \"\"\" get user attributes\n        @dict params: form parameters\n        @rtype: dict, {<type>: {<attr>: <value>}}\n        \"\"\"\n        ret = {'attrs': {}, 'roles': {}, 'groups': {}}\n        for p in params:\n            # each form attributes is prefixed with type, ex: attr.uidNumber\n            # separate this prefix from the attribute name\n            p_type, sep, param = p.partition('.')\n            if p_type == 'attr':\n                ret['attrs'][param] = params[p]\n            elif p_type == 'role':\n                ret['roles'][param] = params[p]\n            elif p_type == 'group':\n                # with groups there is a second prefix\n                # corresponding to the backend\n                backend, sep, value = param.partition('.')\n                if backend not in ret['groups']:\n                    ret['groups'][backend] = []\n                ret['groups'][backend].append(value)\n        return ret\n\n    def _check_admin(self):\n        \"\"\" check in the session database if current user\n        is an ldapcherry administrator\n        @rtype: boolean, True if administrator, False otherwise\n        \"\"\"\n        if self.auth_mode == 'none':\n            return True\n        return cherrypy.session['isadmin']\n\n    def _check_session(self):\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        return cherrypy.session.get(SESSION_KEY)\n\n    def _check_auth(self, must_admin, redir_login=True):\n        \"\"\" check if a user is autheticated and, optionnaly an administrator\n        if user not authentifaced -> redirection to login page (with base64\n            of the originaly requested page (redirection after login)\n        if user authenticated, not admin and must_admin enabled -> 403 error\n        @boolean must_admin: flag \"user must be an administrator to access\n            this page\"\n        @rtype str: login of the user\n        \"\"\"\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        username = self._check_session()\n\n        if cherrypy.request.query_string == '':\n            qs = ''\n        else:\n            qs = '?' + cherrypy.request.query_string\n        # base64 of the requested URL\n        b64requrl = base64.b64encode(cherrypy.url() + qs)\n        if not username:\n            # return to login page (with base64 of the url in query string\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if 'connected' not in cherrypy.session \\\n                or not cherrypy.session['connected']:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if cherrypy.session['connected'] and \\\n                not cherrypy.session['isadmin']:\n            if must_admin:\n                # user is not an administrator, so he gets 403 Forbidden\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You are not allowed to access this resource.\",\n                    )\n            else:\n                return username\n\n        if cherrypy.session['connected'] and \\\n                cherrypy.session['isadmin']:\n            return username\n        else:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n    def _adduser(self, params):\n        cherrypy.log.error(\n            msg=\"add user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        badd = {}\n\n        for attr in self.attributes.get_attributes():\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                    raise PasswordMissMatch()\n                if not self._checkppolicy(params['attrs'][pwd1])['match']:\n                    raise PPolicyError()\n                params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs']:\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        added = False\n        for b in badd:\n            try:\n                self.backends[b].add_user(badd[b])\n                added = True\n            except UserAlreadyExists as e:\n                self._add_notification(\n                    'User already exists in backend \"' + b + '\"'\n                    )\n        if not added:\n            raise e\n\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' added by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        roles = []\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles.append(r)\n        groups = self.roles.get_groups(roles)\n        for b in groups:\n            self.backends[b].add_to_groups(username, Set(groups[b]))\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(groups),\n            severity=logging.DEBUG\n        )\n\n    def _modify_attrs(self, params, attr_list, username):\n        badd = {}\n        for attr in attr_list:\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if pwd1 in params['attrs']:\n                    if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                        raise PasswordMissMatch()\n                    if params['attrs'][pwd1] != '' and \\\n                            not self._checkppolicy(\n                                params['attrs'][pwd1]\n                                )['match']:\n                        raise PPolicyError()\n                    params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs'] and params['attrs'][attr] != '':\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        for b in badd:\n            try:\n                self.backends[b].set_attrs(username, badd[b])\n            except UserDoesntExist as e:\n                self._add_notification(\n                    'User does not exist in backend \"' + b + '\"'\n                    )\n\n        return badd\n\n    def _selfmodify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_selfattributes(),\n            username,\n            )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified his attributes\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n    def _modify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_attributes(),\n            username\n            )\n\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        tmp = self._get_roles(username)\n        roles_current = tmp['roles']\n        lonely_groups = tmp['unusedgroups']\n        roles_member = []\n        roles_not_member = []\n\n        groups_keep = {}\n        groups_remove = {}\n\n        for b in lonely_groups:\n            for g in lonely_groups[b]:\n                if b in params['groups'] and g in params['groups'][b]:\n                    if b not in groups_keep:\n                        groups_keep[b] = []\n                    groups_keep[b].append(g)\n\n                else:\n                    if b not in groups_remove:\n                        groups_remove[b] = []\n                    groups_remove[b].append(g)\n\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles_member.append(r)\n            else:\n                roles_not_member.append(r)\n\n        groups_current = self.roles.get_groups(roles_current)\n        groups_rm = self.roles.get_groups(roles_not_member)\n        groups_add = self.roles.get_groups(roles_member)\n\n        for b in groups_add:\n            for g in [groups_add, groups_keep,\n                      groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                Set(groups_add[b]) - \\\n                Set(groups_keep[b]) - \\\n                Set(groups_current[b]) - \\\n                Set(lonely_groups[b])\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' added to groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].add_to_groups(username, tmp)\n        for b in groups_rm:\n            for g in [groups_remove, groups_rm, groups_add,\n                      groups_keep, groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                (\n                    (Set(groups_rm[b]) | Set(groups_remove[b])) -\n                    (Set(groups_keep[b]) | Set(groups_add[b]))\n                ) & \\\n                (\n                    Set(groups_current[b]) | Set(lonely_groups[b])\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' removed from groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].del_from_groups(username, tmp)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles_member) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _deleteuser(self, username):\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        for b in self.backends:\n            try:\n                self.backends[b].del_user(username)\n            except UserDoesntExist as e:\n                cherrypy.log.error(\n                    msg=\"User '\" + username +\n                        \"' didn't exist in backend '\" + b + \"'\",\n                    severity=logging.INFO\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' deleted from backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n\n        cherrypy.log.error(\n            msg=\"User '\" + username + \"' deleted by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _checkppolicy(self, password):\n        return self.ppolicy.check(password)\n\n    @cherrypy.expose\n    @exception_decorator\n    def signin(self, url=None):\n        \"\"\"simple signin page\n        \"\"\"\n        return self.temp['login.tmpl'].render(url=url)\n\n    @cherrypy.expose\n    @exception_decorator\n    def login(self, login, password, url=None):\n        \"\"\"login page\n        \"\"\"\n        auth = self._auth(login, password)\n        cherrypy.session['isadmin'] = auth['isadmin']\n        cherrypy.session['connected'] = auth['connected']\n\n        if auth['connected']:\n            if auth['isadmin']:\n                message = \\\n                    \"login success for user '%(user)s' as administrator\" % {\n                        'user': login\n                    }\n            else:\n                message = \\\n                    \"login success for user '%(user)s' as normal user\" % {\n                        'user': login\n                    }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.INFO\n            )\n            cherrypy.session[SESSION_KEY] = cherrypy.request.login = login\n            if url is None:\n                redirect = \"/\"\n            else:\n                redirect = base64.b64decode(url)\n            raise cherrypy.HTTPRedirect(redirect)\n        else:\n            message = \"login failed for user '%(user)s'\" % {\n                'user': login\n            }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.WARNING\n            )\n            if url is None:\n                qs = ''\n            else:\n                qs = '?url=' + url\n            raise cherrypy.HTTPRedirect(\"/signin\" + qs)\n\n    @cherrypy.expose\n    @exception_decorator\n    def logout(self):\n        \"\"\" logout page\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        sess[SESSION_KEY] = None\n        if username:\n            cherrypy.request.login = None\n\n        cherrypy.log.error(\n            msg=\"user '%(user)s' logout\" % {'user': username},\n            severity=logging.INFO\n        )\n        raise cherrypy.HTTPRedirect(\"/signin\")\n\n    @cherrypy.expose\n    @exception_decorator\n    def index(self):\n        \"\"\"main page rendering\n        \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            user_attrs = None\n        else:\n            user_attrs = self._get_user(user)\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['index.tmpl'].render(\n            is_admin=is_admin,\n            attrs_list=attrs_list,\n            searchresult=self._escape(user_attrs, 'attr_list'),\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchuser(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        if searchstring is not None and len(searchstring) > 2:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchuser.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def checkppolicy(self, **params):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False, redir_login=False)\n        keys = params.keys()\n        if len(keys) != 1:\n            cherrypy.response.status = 400\n            return \"bad argument\"\n        password = params[keys[0]]\n        is_admin = self._check_admin()\n        ret = self._checkppolicy(password)\n        if ret['match']:\n            cherrypy.response.status = 200\n        else:\n            cherrypy.response.status = 200\n        return json.dumps(ret, separators=(',', ':'))\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchadmin(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        if searchstring is not None:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchadmin.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def adduser(self, **params):\n        \"\"\" add user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._adduser(params)\n            self._add_notification(\"User added\")\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=None,\n                modify=False,\n                autofill=True\n                )\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=None,\n                )\n            return self.temp['adduser.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n    @cherrypy.expose\n    @exception_decorator\n    def delete(self, user):\n        \"\"\" remove user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        try:\n            referer = cherrypy.request.headers['Referer']\n        except:\n            referer = '/'\n        self._deleteuser(user)\n        self._add_notification('User Deleted')\n        raise cherrypy.HTTPRedirect(referer)\n\n    @cherrypy.expose\n    @exception_decorator\n    def modify(self, user=None, **params):\n        \"\"\" modify user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._modify(params)\n            self._add_notification(\"User modified\")\n            try:\n                referer = cherrypy.request.headers['Referer']\n            except:\n                referer = '/'\n            raise cherrypy.HTTPRedirect(referer)\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n\n        if user is None:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"No user requested\"\n                )\n\n        user_attrs = self._get_user(user)\n        if user_attrs == {}:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"User '\" + user + \"' does not exist\"\n                )\n        tmp = self._get_roles(user)\n        user_roles = tmp['roles']\n        standalone_groups = tmp['unusedgroups']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        key = self.attributes.get_key()\n\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                keyattr=key,\n                autofill=False\n                )\n\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=user_roles,\n            )\n\n            glued_template = self.temp['modify.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                standalone_groups=self._escape(\n                    standalone_groups,\n                    'lonely_groups'\n                    ),\n                backends_display_names=self.backends_display_names,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n            )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n        return glued_template\n\n    @cherrypy.expose\n    @exception_decorator\n    def default(self, attr='', **params):\n        cherrypy.response.status = 404\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        return self.temp['404.tmpl'].render(\n            is_admin=is_admin,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def selfmodify(self, **params):\n        \"\"\" self modify user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"Not accessible with authentication disabled.\"\n                )\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._selfmodify(params)\n            self._add_notification(\n                \"Self modification done\"\n            )\n        user_attrs = self._get_user(user)\n\n        try:\n            if user_attrs == {}:\n                return self.temp['error.tmpl'].render(\n                    is_admin=is_admin,\n                    alert='warning',\n                    message=\"User doesn't exist\"\n                    )\n\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.get_selfattributes(),\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                autofill=False\n                )\n            return self.temp['selfmodify.tmpl'].render(\n                form=form,\n                is_admin=is_admin,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n", "patch": "@@ -15,7 +15,7 @@\n import logging.handlers\n from operator import itemgetter\n from socket import error as socket_error\n-import base64\n+import urllib\n import cgi\n \n from exceptions import *\n@@ -387,7 +387,8 @@ def _load_templates(self, config):\n         )\n         # preload templates\n         self.temp_lookup = lookup.TemplateLookup(\n-            directories=self.template_dir, input_encoding='utf-8'\n+            directories=self.template_dir, input_encoding='utf-8',\n+            default_filters=['unicode', 'h']\n             )\n         # load each template\n         self.temp = {}\n@@ -573,7 +574,7 @@ def _check_session(self):\n \n     def _check_auth(self, must_admin, redir_login=True):\n         \"\"\" check if a user is autheticated and, optionnaly an administrator\n-        if user not authentifaced -> redirection to login page (with base64\n+        if user not authenticated -> redirect to login page (with escaped URL\n             of the originaly requested page (redirection after login)\n         if user authenticated, not admin and must_admin enabled -> 403 error\n         @boolean must_admin: flag \"user must be an administrator to access\n@@ -588,13 +589,13 @@ def _check_auth(self, must_admin, redir_login=True):\n             qs = ''\n         else:\n             qs = '?' + cherrypy.request.query_string\n-        # base64 of the requested URL\n-        b64requrl = base64.b64encode(cherrypy.url() + qs)\n+        # Escaped version of the requested URL\n+        quoted_requrl = urllib.quote_plus(cherrypy.url() + qs)\n         if not username:\n-            # return to login page (with base64 of the url in query string\n+            # return to login page (with quoted url in query string)\n             if redir_login:\n                 raise cherrypy.HTTPRedirect(\n-                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n+                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                     )\n             else:\n                 raise cherrypy.HTTPError(\n@@ -606,7 +607,7 @@ def _check_auth(self, must_admin, redir_login=True):\n                 or not cherrypy.session['connected']:\n             if redir_login:\n                 raise cherrypy.HTTPRedirect(\n-                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n+                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                     )\n             else:\n                 raise cherrypy.HTTPError(\n@@ -631,7 +632,7 @@ def _check_auth(self, must_admin, redir_login=True):\n         else:\n             if redir_login:\n                 raise cherrypy.HTTPRedirect(\n-                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n+                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                     )\n             else:\n                 raise cherrypy.HTTPError(\n@@ -919,7 +920,7 @@ def login(self, login, password, url=None):\n             if url is None:\n                 redirect = \"/\"\n             else:\n-                redirect = base64.b64decode(url)\n+                redirect = url\n             raise cherrypy.HTTPRedirect(redirect)\n         else:\n             message = \"login failed for user '%(user)s'\" % {\n@@ -932,7 +933,7 @@ def login(self, login, password, url=None):\n             if url is None:\n                 qs = ''\n             else:\n-                qs = '?url=' + url\n+                qs = '?url=' + urllib.quote_plus(url)\n             raise cherrypy.HTTPRedirect(\"/signin\" + qs)\n \n     @cherrypy.expose", "file_path": "files/2023_1/2050", "file_language": "py", "file_name": "ldapcherry/__init__.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/kakwa/ldapcherry/raw/6f98076281e9452fdb1adcd1bcbb70a6f968ade9/resources%2Ftemplates%2Fadduser.tmpl", "code": "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' autocomplete=\"off\" action='/adduser' role=\"form\" class=\"form-signin\" id=form>\n              <fieldset>\n              <legend>Fill new user's attributes:</legend>\n              ${form | n}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles | n}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default green\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-plus-sign\"></span> Add User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "code_before": "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' autocomplete=\"off\" action='/adduser' role=\"form\" class=\"form-signin\" id=form>\n              <fieldset>\n              <legend>Fill new user's attributes:</legend>\n              ${form}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default green\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-plus-sign\"></span> Add User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "patch": "@@ -9,11 +9,11 @@\n               <form method='POST' autocomplete=\"off\" action='/adduser' role=\"form\" class=\"form-signin\" id=form>\n               <fieldset>\n               <legend>Fill new user's attributes:</legend>\n-              ${form}\n+              ${form | n}\n               </fieldset>\n               <fieldset>\n               <legend>Enable/Disable user's roles:</legend>\n-              ${roles}\n+              ${roles | n}\n               </fieldset>\n               <div class=\"form-group\">\n                 <div class=\"input-group\">", "file_path": "files/2023_1/2051", "file_language": "tmpl", "file_name": "resources/templates/adduser.tmpl", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/kakwa/ldapcherry/raw/6f98076281e9452fdb1adcd1bcbb70a6f968ade9/resources%2Ftemplates%2Flogin.tmpl", "code": "## -*- coding: utf-8 -*-\n<%inherit file=\"base.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix\" style=\"margin-top:30px\">\n        <div class=\"col-md-4 column\"></div>\n        <div class=\"col-md-4 column well\">\n            <form method='POST' role=\"form\" class=\"form-signin\"\n% if url:\n                action='login?url=${url | u}'\n% else:\n                action='login'\n% endif\n            >\n              <div class=\"form-group\">\n              <h2 class=\"form-signin-heading\">Please sign in</h2>\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-user\"></span>\n                    <input type=\"text\" class=\"form-control\" name=\"login\" placeholder=\"Login\" required autofocus>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-lock\"></span>\n                    <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\"><span class=\"glyphicon glyphicon-off\"></span> Sign in</button>\n                </div>\n              </div>\n            </form>\n        </div>\n        <div class=\"col-md-4 column\"></div>\n    </div>\n</%block>\n", "code_before": "## -*- coding: utf-8 -*-\n<%inherit file=\"base.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix\" style=\"margin-top:30px\">\n        <div class=\"col-md-4 column\"></div>\n        <div class=\"col-md-4 column well\">\n<%\nif url is None:\n    qs=''\nelse:\n    qs='?url=' + url\n%>\n            <form method='POST' action='/login${qs}' role=\"form\" class=\"form-signin\">\n              <div class=\"form-group\">\n              <h2 class=\"form-signin-heading\">Please sign in</h2>\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-user\"></span>\n                    <input type=\"text\" class=\"form-control\" name=\"login\" placeholder=\"Login\" required autofocus>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-lock\"></span>\n                    <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\"><span class=\"glyphicon glyphicon-off\"></span> Sign in</button>\n                </div>\n              </div>\n            </form>\n        </div>\n        <div class=\"col-md-4 column\"></div>\n    </div>\n</%block>\n", "patch": "@@ -4,13 +4,13 @@\n     <div class=\"row clearfix\" style=\"margin-top:30px\">\n         <div class=\"col-md-4 column\"></div>\n         <div class=\"col-md-4 column well\">\n-<%\n-if url is None:\n-    qs=''\n-else:\n-    qs='?url=' + url\n-%>\n-            <form method='POST' action='/login${qs}' role=\"form\" class=\"form-signin\">\n+            <form method='POST' role=\"form\" class=\"form-signin\"\n+% if url:\n+                action='login?url=${url | u}'\n+% else:\n+                action='login'\n+% endif\n+            >\n               <div class=\"form-group\">\n               <h2 class=\"form-signin-heading\">Please sign in</h2>\n                 <div class=\"input-group\">", "file_path": "files/2023_1/2052", "file_language": "tmpl", "file_name": "resources/templates/login.tmpl", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/kakwa/ldapcherry/raw/6f98076281e9452fdb1adcd1bcbb70a6f968ade9/resources%2Ftemplates%2Fmodify.tmpl", "code": "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/modify' role=\"form\" class=\"form-signin\" id=\"form\">\n              <fieldset>\n              <legend>Modify user's attributes:</legend>\n              ${form | n}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles | n}\n              </fieldset>\n              % if len(standalone_groups) != 0:\n              <fieldset>\n              <legend>Delete user's individual groups:</legend>\n              <table id=\"RecordTable\" class=\"table table-hover table-condensed tablesorter\">\n              <thead>\n              <tr>\n                  <th class=\"sorter-false\">\n                      Backend\n                  </th>\n                  <th class=\"sorter-false\">\n                      Group \n                  </th>\n                  <th class=\"sorter-false\">\n                      Enable/Disable\n                  </th>\n              </tr>\n              </thead>\n              <tbody>\n              % for backend in standalone_groups:\n                  % for group in standalone_groups[backend]:\n                  <tr>\n                    <td>\n                    ${backends_display_names[backend]}\n                    </td>\n                    <td>\n                    ${group}\n                    </td>\n                    <td>\n                    <input data-on-color=\"success\" data-off-color=\"danger\" data-on-text=\"Enabled\" \n                           data-off-text=\"Disabled\" data-handle-width=\"75\" type=\"checkbox\" \n                           name=\"group.${backend}.${group}\" data-size=\"mini\" id=\"group.${backend}.${group}\" checked>\n                    <script>$(\"[name='group.${backend}.${group}']\").bootstrapSwitch();</script>\n                    </td>\n                  </tr>\n                  % endfor\n              % endfor\n              </tbody>\n              </table>\n              </fieldset>\n              % endif\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-cog\"></span> Modify User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "code_before": "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/modify' role=\"form\" class=\"form-signin\" id=\"form\">\n              <fieldset>\n              <legend>Modify user's attributes:</legend>\n              ${form}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles}\n              </fieldset>\n              % if len(standalone_groups) != 0:\n              <fieldset>\n              <legend>Delete user's individual groups:</legend>\n              <table id=\"RecordTable\" class=\"table table-hover table-condensed tablesorter\">\n              <thead>\n              <tr>\n                  <th class=\"sorter-false\">\n                      Backend\n                  </th>\n                  <th class=\"sorter-false\">\n                      Group \n                  </th>\n                  <th class=\"sorter-false\">\n                      Enable/Disable\n                  </th>\n              </tr>\n              </thead>\n              <tbody>\n              % for backend in standalone_groups:\n                  % for group in standalone_groups[backend]:\n                  <tr>\n                    <td>\n                    ${backends_display_names[backend]}\n                    </td>\n                    <td>\n                    ${group}\n                    </td>\n                    <td>\n                    <input data-on-color=\"success\" data-off-color=\"danger\" data-on-text=\"Enabled\" \n                           data-off-text=\"Disabled\" data-handle-width=\"75\" type=\"checkbox\" \n                           name=\"group.${backend}.${group}\" data-size=\"mini\" id=\"group.${backend}.${group}\" checked>\n                    <script>$(\"[name='group.${backend}.${group}']\").bootstrapSwitch();</script>\n                    </td>\n                  </tr>\n                  % endfor\n              % endfor\n              </tbody>\n              </table>\n              </fieldset>\n              % endif\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-cog\"></span> Modify User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "patch": "@@ -9,11 +9,11 @@\n               <form method='POST' action='/modify' role=\"form\" class=\"form-signin\" id=\"form\">\n               <fieldset>\n               <legend>Modify user's attributes:</legend>\n-              ${form}\n+              ${form | n}\n               </fieldset>\n               <fieldset>\n               <legend>Enable/Disable user's roles:</legend>\n-              ${roles}\n+              ${roles | n}\n               </fieldset>\n               % if len(standalone_groups) != 0:\n               <fieldset>", "file_path": "files/2023_1/2053", "file_language": "tmpl", "file_name": "resources/templates/modify.tmpl", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/kakwa/ldapcherry/raw/6f98076281e9452fdb1adcd1bcbb70a6f968ade9/resources%2Ftemplates%2Fselfmodify.tmpl", "code": "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/selfmodify' autocomplete=\"off\" role=\"form\" class=\"form-signin\" id=\"form\">\n              <legend>Modify your attributes:</legend>\n              ${form | n}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <button type=\"submit\" class=\"btn btn-default blue\">\n                    <span class=\"glyphicon glyphicon-cog\"></span> Modify</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "code_before": "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/selfmodify' autocomplete=\"off\" role=\"form\" class=\"form-signin\" id=\"form\">\n              <legend>Modify your attributes:</legend>\n              ${form}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <button type=\"submit\" class=\"btn btn-default blue\">\n                    <span class=\"glyphicon glyphicon-cog\"></span> Modify</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "patch": "@@ -8,7 +8,7 @@\n             <div class=\"well well-sm\">\n               <form method='POST' action='/selfmodify' autocomplete=\"off\" role=\"form\" class=\"form-signin\" id=\"form\">\n               <legend>Modify your attributes:</legend>\n-              ${form}\n+              ${form | n}\n               </fieldset>\n               <div class=\"form-group\">\n                 <div class=\"input-group\">", "file_path": "files/2023_1/2054", "file_language": "tmpl", "file_name": "resources/templates/selfmodify.tmpl", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
