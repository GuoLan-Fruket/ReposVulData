{"index": 12058, "cve_id": "CVE-2023-40170", "cwe_id": ["CWE-79", "CWE-284", "CWE-306"], "cve_language": "Python", "cve_description": "jupyter-server is the backend for Jupyter web applications. Improper cross-site credential checks on `/files/` URLs could allow exposure of certain file contents, or accessing files when opening untrusted files via  \"Open image in new tab\". This issue has been addressed in commit `87a49272728` which has been included in release `2.7.2`. Users are advised to upgrade. Users unable to upgrade may use the lower performance `--ContentsManager.files_handler_class=jupyter_server.files.handlers.FilesHandler`, which implements the correct checks.", "cvss": "6.1", "publish_date": "August 28, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "87a4927272819f0b1cae1afa4c8c86ee2da002fd", "commit_message": "Merge pull request from GHSA-64x5-55rw-9974\n\nlost in forward-port PR 478\n\nCo-authored-by: Zachary Sailer <zsailer@apple.com>", "commit_date": "2023-08-18T03:27:05Z", "project": "jupyter-server/jupyter_server", "url": "https://api.github.com/repos/jupyter-server/jupyter_server/commits/87a4927272819f0b1cae1afa4c8c86ee2da002fd", "html_url": "https://github.com/jupyter-server/jupyter_server/commit/87a4927272819f0b1cae1afa4c8c86ee2da002fd", "windows_before": [{"commit_id": "ed65a6ce85808b9099e652cea6170f0289e76e51", "commit_date": "Tue Aug 15 23:24:38 2023 +0900", "commit_message": "Assert return value of `expected_http_error` (#1308)", "files_name": ["jupyter_server/services/events/handlers.py", "tests/services/contents/test_manager.py", "tests/services/events/test_api.py"]}, {"commit_id": "a25440c2ebc9ec5576e6fab52ba5b925b8f729c0", "commit_date": "Tue Aug 15 11:33:07 2023 +0000", "commit_message": "Bump to 2.8.0.dev0", "files_name": ["jupyter_server/_version.py"]}, {"commit_id": "6b45913c174fec7dfa13b9d95f85bf345ad7316c", "commit_date": "Tue Aug 15 11:33:05 2023 +0000", "commit_message": "Publish 2.7.1", "files_name": ["CHANGELOG.md", "jupyter_server/_version.py"]}, {"commit_id": "d8f4856c32b895106eac58c9c5768afd0e2f6465", "commit_date": "Tue Aug 15 13:25:51 2023 +0200", "commit_message": "accessing API version should not count as activity (#1315)", "files_name": ["jupyter_server/base/handlers.py"]}, {"commit_id": "bc171145cd00178465f38ea7d2e349fd928752e7", "commit_date": "Mon Aug 14 19:50:13 2023 -0500", "commit_message": "minor change to test token usage", "files_name": ["pyproject.toml"]}, {"commit_id": "c0833098e8c54b302a865a5fb9e63e0a8d7b2ebc", "commit_date": "Sat Aug 12 13:00:42 2023 +0200", "commit_message": "Add root `/api/` endpoint to REST spec (#1312)", "files_name": ["jupyter_server/services/api/api.yaml"]}, {"commit_id": "c5dc0f696f376e1db5a9a0cbcebb40a0bf98875c", "commit_date": "Wed Jul 26 11:57:41 2023 +0200", "commit_message": "Fix broken link in doc (#1307)", "files_name": ["docs/source/developers/extensions.rst"]}, {"commit_id": "aa7885cd8a9636d3e9fa006e6d5ef5d609c78089", "commit_date": "Wed Jul 26 13:15:30 2023 +0400", "commit_message": "Rename notebook.auth.security.passwd->jupyter_server.auth.passwd in docs (#1306)", "files_name": ["docs/source/operators/public-server.rst"]}, {"commit_id": "c1d689e05169ba47e630ccaa39cebb4f847b3562", "commit_date": "Sat Jul 15 15:52:12 2023 -0500", "commit_message": "[pre-commit.ci] pre-commit autoupdate (#1295)", "files_name": [".pre-commit-config.yaml", "jupyter_server/gateway/gateway_client.py", "jupyter_server/serverapp.py", "jupyter_server/services/kernels/connection/channels.py", "jupyter_server/services/kernels/websocket.py", "jupyter_server/utils.py", "pyproject.toml"]}, {"commit_id": "2563baeca9575be7895930ada2b1d244f93e5163", "commit_date": "Wed Jul 12 18:44:46 2023 -0700", "commit_message": "Make kernel_id as a conditional optional field (#1300)", "files_name": ["jupyter_server/event_schemas/kernel_actions/v1.yaml", "jupyter_server/services/kernels/kernelmanager.py", "pyproject.toml"]}, {"commit_id": "6658e2fc004bc4af9e5f30dda05bce3d4d1e5957", "commit_date": "Fri Jul 7 18:42:07 2023 +0300", "commit_message": "docs: fix broken hyperlink to Tornado (#1297)", "files_name": ["docs/source/operators/public-server.rst", "pyproject.toml"]}, {"commit_id": "7d1ea8b6d86497510d13b3114049725599406bcc", "commit_date": "Thu Jul 6 16:25:41 2023 +0100", "commit_message": "Update notes link (#1298)", "files_name": ["README.md"]}, {"commit_id": "8131c214c448182d93a1ed804abfa7d34bfee26c", "commit_date": "Fri Jun 30 03:28:04 2023 -0500", "commit_message": "Reference current_user to detect auth (#1294)", "files_name": ["jupyter_server/base/handlers.py"]}, {"commit_id": "8c90eb5cdce4bb66ec14a22a02b0abbf5ec58b67", "commit_date": "Wed Jun 28 00:47:46 2023 +0800", "commit_message": "send2trash now supports deleting from different filesystem type(#1290) (#1291)", "files_name": ["jupyter_server/services/contents/filemanager.py", "pyproject.toml"]}, {"commit_id": "32df893ef2fdd40a102e73a361c4280dbf042b71", "commit_date": "Tue Jun 27 03:52:43 2023 +0000", "commit_message": "Bump to 2.8.0.dev0", "files_name": ["jupyter_server/_version.py"]}, {"commit_id": "c8fff464f5fb4565ee045e68bb00bd7c87ce01f0", "commit_date": "Tue Jun 27 03:52:41 2023 +0000", "commit_message": "Publish 2.7.0", "files_name": ["CHANGELOG.md", "jupyter_server/_version.py"]}, {"commit_id": "b652f8d08530bd60ecf4cfffe6c32939fd94eb41", "commit_date": "Fri Jun 23 19:49:33 2023 +0200", "commit_message": "Remove frontend doc (#1292)", "files_name": ["docs/source/operators/public-server.rst"]}, {"commit_id": "820551ceaff90ec6ed72abaa6ae4f1b09075ab6e", "commit_date": "Thu Jun 22 08:03:58 2023 -0700", "commit_message": "Add missing events to gateway client (#1288)", "files_name": ["jupyter_server/gateway/gateway_client.py"]}, {"commit_id": "8c2987fef9da26c3ef12f6be8a6ad53444446578", "commit_date": "Mon Jun 19 09:19:17 2023 -0500", "commit_message": "Try testing against python 3.12 (#1282)", "files_name": [".github/workflows/python-tests.yml", "pyproject.toml"]}, {"commit_id": "acf63901a86d4197654b38f877408faee47e6b25", "commit_date": "Mon Jun 19 08:54:57 2023 -0500", "commit_message": "Handle test failures (#1289)", "files_name": [".github/workflows/python-tests.yml", "pyproject.toml", "tests/test_terminal.py"]}, {"commit_id": "d48843eea78fe2ee37608a767ceea3d0d2f71763", "commit_date": "Tue Jun 6 02:05:07 2023 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate (#1286)", "files_name": [".pre-commit-config.yaml", "jupyter_server/services/kernels/connection/base.py", "pyproject.toml"]}, {"commit_id": "9106e059f74353701621fd83e39584a910060ce0", "commit_date": "Thu May 25 17:01:40 2023 +0000", "commit_message": "Bump to 2.7.0.dev0", "files_name": ["jupyter_server/_version.py"]}, {"commit_id": "4249fb62612bef2c62c39a8d48d933dc9735e2f5", "commit_date": "Thu May 25 17:01:37 2023 +0000", "commit_message": "Publish 2.6.0", "files_name": ["CHANGELOG.md", "jupyter_server/_version.py"]}, {"commit_id": "35b8e9cb68eec48fe9a017ac128cb776c2ead195", "commit_date": "Tue May 23 16:30:05 2023 +0200", "commit_message": "Fix DeprecationWarning from pytest-console-scripts (#1281)", "files_name": ["tests/extension/test_entrypoint.py"]}, {"commit_id": "09c15ce4ffa9b1c5b54c376ff1601475150554fb", "commit_date": "Mon May 15 17:33:24 2023 -0500", "commit_message": "Remove distuils and mistune pins (#1278)", "files_name": ["pyproject.toml"]}, {"commit_id": "d7e3b0863d1fad9e007af44cd378a20c37f521c5", "commit_date": "Mon May 15 17:14:46 2023 -0500", "commit_message": "Update docutils requirement from <0.20 to <0.21 (#1277)", "files_name": ["pyproject.toml"]}, {"commit_id": "5342880d42315afb1332b8e7a6a4a0749e9f7a1f", "commit_date": "Fri May 12 12:33:56 2023 +0200", "commit_message": "Write server list to stdout (#1275)", "files_name": ["jupyter_server/serverapp.py", "pyproject.toml", "tests/test_serverapp.py"]}, {"commit_id": "cca1ef14c557a9ab4bf27c51ab6f5c672296f31a", "commit_date": "Fri May 12 12:33:44 2023 +0200", "commit_message": "Don't instantiate an unused Future in gateway connection trait (#1276)", "files_name": ["jupyter_server/gateway/connections.py"]}, {"commit_id": "35ffe5d435682128da16dc144a8e9e9f8fa85dd8", "commit_date": "Wed May 10 14:12:10 2023 -0700", "commit_message": "Merge the gateway handlers into the standard handlers. (#1261)", "files_name": ["docs/source/api/jupyter_server.gateway.rst", "jupyter_server/gateway/connections.py", "jupyter_server/gateway/handlers.py", "jupyter_server/kernelspecs/handlers.py", "jupyter_server/serverapp.py", "tests/test_gateway.py", "tests/test_serverapp.py"]}, {"commit_id": "54d72923949a506375c522193b41b3cff3aaa79f", "commit_date": "Wed May 10 18:07:23 2023 +0200", "commit_message": "Allows immutable cache for static files in a directory (#1268)", "files_name": ["jupyter_server/base/handlers.py", "jupyter_server/serverapp.py", "tests/base/test_handlers.py", "tests/test_serverapp.py"]}, {"commit_id": "ecd282229770c6545fa49ab6ad4b7beac60ff60b", "commit_date": "Wed May 10 09:04:49 2023 -0700", "commit_message": "Make the kernel_websocket_protocol flag reusable. (#1264)", "files_name": ["jupyter_server/services/kernels/connection/base.py", "jupyter_server/services/kernels/connection/channels.py"]}, {"commit_id": "e6be0fa72220271a12fdb01f83f487c894b8696d", "commit_date": "Mon May 8 17:15:46 2023 -0500", "commit_message": "[pre-commit.ci] pre-commit autoupdate (#1266)", "files_name": [".pre-commit-config.yaml", "jupyter_server/_sysinfo.py", "jupyter_server/serverapp.py", "pyproject.toml", "tests/extension/test_launch.py", "tests/services/kernels/test_events.py", "tests/test_utils.py"]}, {"commit_id": "f8ed273bb790f167c24a29f14a5f6cbf73e7eee3", "commit_date": "Mon May 8 23:41:18 2023 +0200", "commit_message": "Fix typo in docs (#1270)", "files_name": ["docs/source/operators/security.rst"]}, {"commit_id": "15505bb3467eaacaa83e7dc2a04f882e29a9d152", "commit_date": "Sat May 6 06:11:45 2023 -0700", "commit_message": "Use Python 3.9 for the readthedocs builds (#1269)", "files_name": [".readthedocs.yaml"]}, {"commit_id": "3ba9ac973643b56011cb6fbd63dc1093865b174e", "commit_date": "Tue Apr 25 15:02:07 2023 +0200", "commit_message": "Extends the IP documentation (#1258)Co-authored-by: Zachary Sailer <zachsailer@gmail.com>", "files_name": ["docs/source/operators/security.rst"]}, {"commit_id": "934fb5b4ef231301656bec900221cbe91830eaf9", "commit_date": "Mon Apr 24 18:18:09 2023 +0200", "commit_message": "Fix typo (#1262)", "files_name": ["docs/source/operators/multiple-extensions.rst"]}, {"commit_id": "5c49253359865773439bdba69352e26a473b9e07", "commit_date": "Mon Apr 17 13:52:05 2023 -0700", "commit_message": "Emit events from the kernels service and gateway client (#1252)", "files_name": ["jupyter_server/event_schemas/gateway_client/v1.yaml", "jupyter_server/event_schemas/kernel_actions/v1.yaml", "jupyter_server/gateway/gateway_client.py", "jupyter_server/gateway/managers.py", "jupyter_server/serverapp.py", "jupyter_server/services/kernels/kernelmanager.py", "pyproject.toml", "tests/services/kernels/test_events.py", "tests/test_gateway.py"]}, {"commit_id": "8144a0d1192761b0925f1ecee5e5b8900b49b01c", "commit_date": "Thu Apr 13 15:39:38 2023 -0500", "commit_message": "Fix coverage handling (#1257)", "files_name": [".github/workflows/integration-tests.yml", ".github/workflows/python-tests.yml", "README.md", "codecov.yml", "docs/source/conf.py", "pyproject.toml"]}, {"commit_id": "ca4b06227a3a1387d02c149eba9c12415a8520d0", "commit_date": "Tue Apr 11 10:10:32 2023 -0700", "commit_message": "Define a CURRENT_JUPYTER_HANDLER context var (#1251)", "files_name": ["docs/source/api/jupyter_server.base.rst", "jupyter_server/__init__.py", "jupyter_server/base/call_context.py", "jupyter_server/base/handlers.py", "tests/base/test_call_context.py"]}, {"commit_id": "87b215809701f46819e775c29417884a77dc935c", "commit_date": "Fri Apr 7 08:05:15 2023 -0700", "commit_message": "Gateway manager retry kernel updates (#1256)", "files_name": ["jupyter_server/gateway/managers.py", "tests/test_gateway.py"]}, {"commit_id": "cd8010e2335de29e6f9d7b98cd496b0695bc0ed3", "commit_date": "Tue Apr 4 17:58:45 2023 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate (#1255)", "files_name": [".pre-commit-config.yaml", "jupyter_server/auth/__main__.py", "jupyter_server/auth/identity.py", "jupyter_server/auth/login.py", "jupyter_server/auth/security.py", "jupyter_server/auth/utils.py", "jupyter_server/base/handlers.py", "jupyter_server/extension/utils.py", "jupyter_server/gateway/handlers.py", "jupyter_server/serverapp.py", "jupyter_server/services/kernels/websocket.py", "jupyter_server/utils.py", "pyproject.toml", "tests/auth/test_login.py", "tests/extension/test_manager.py", "tests/test_serverapp.py"]}, {"commit_id": "3d4e162a15982189d9b87da7c3ddcaa2c8720ccd", "commit_date": "Mon Apr 3 16:39:02 2023 +0200", "commit_message": "Use debug-level messages for generating anonymous users (#1254)", "files_name": ["jupyter_server/auth/identity.py"]}], "windows_after": [{"commit_id": "290362593b2ffb23c59f8114d76f77875de4b925", "commit_date": "Fri Aug 18 05:27:27 2023 +0200", "commit_message": "Merge pull request from GHSA-r726-vmfq-j9j3", "files_name": ["jupyter_server/auth/login.py", "tests/auth/test_login.py"]}, {"commit_id": "5a8a47f5ba674d0f758a91cca08e2a9c6eacf224", "commit_date": "Fri Aug 18 03:46:02 2023 +0000", "commit_message": "Publish 2.7.2", "files_name": ["jupyter_server/_version.py"]}, {"commit_id": "b1388b55eebe868e25c33d4ccc4c835fadb5381a", "commit_date": "Fri Aug 18 03:46:04 2023 +0000", "commit_message": "Bump to 2.8.0.dev0", "files_name": ["jupyter_server/_version.py"]}, {"commit_id": "e72bf7187e396605f46ba59567543ef6386e8920", "commit_date": "Thu Aug 31 10:08:57 2023 +0200", "commit_message": "Support external kernels (#1305)", "files_name": ["jupyter_server/serverapp.py", "jupyter_server/services/kernels/connection/channels.py"]}, {"commit_id": "cf8df8a6b26455977f1eb946dc3dead069981ea4", "commit_date": "Thu Aug 31 08:20:33 2023 +0000", "commit_message": "Publish 2.7.3", "files_name": ["CHANGELOG.md", "jupyter_server/_version.py"]}, {"commit_id": "93fde1ad9fece22607960184501f5c9c80cd3765", "commit_date": "Thu Aug 31 08:20:36 2023 +0000", "commit_message": "Bump to 2.8.0.dev0", "files_name": ["jupyter_server/_version.py"]}, {"commit_id": "1d9a77a4e3ba980014bf69174813a766838bfd3d", "commit_date": "Mon Sep 4 18:35:57 2023 +0200", "commit_message": "Avoid showing \"No answer for 5s\" when shutdown is slow (#1320)", "files_name": ["jupyter_server/serverapp.py"]}, {"commit_id": "a7b033deba7b4d87d8ce85846edd032db89d8910", "commit_date": "Mon Sep 4 21:05:20 2023 -0500", "commit_message": "Bump actions/checkout from 3 to 4 (#1321)", "files_name": [".github/workflows/downstream.yml", ".github/workflows/python-tests.yml"]}, {"commit_id": "1cb41168c21c9191dd52103f0ec1209d7e1debd0", "commit_date": "Tue Sep 5 05:06:10 2023 -0500", "commit_message": "[pre-commit.ci] pre-commit autoupdate (#1322)", "files_name": [".pre-commit-config.yaml", "jupyter_server/base/handlers.py", "jupyter_server/extension/application.py", "jupyter_server/extension/utils.py", "jupyter_server/gateway/connections.py", "jupyter_server/gateway/gateway_client.py", "jupyter_server/gateway/handlers.py", "jupyter_server/gateway/managers.py", "jupyter_server/log.py", "jupyter_server/serverapp.py", "jupyter_server/services/contents/filecheckpoints.py", "jupyter_server/services/contents/filemanager.py", "jupyter_server/services/contents/manager.py", "jupyter_server/services/kernels/connection/channels.py", "jupyter_server/services/kernelspecs/handlers.py", "jupyter_server/services/sessions/sessionmanager.py", "jupyter_server/traittypes.py", "pyproject.toml"]}, {"commit_id": "46e685bdce384e4c82530981cd8197bfa00aa39d", "commit_date": "Mon Sep 18 21:46:25 2023 -0500", "commit_message": "Adopt sp-repo-review (#1324)", "files_name": [".github/workflows/python-tests.yml", ".pre-commit-config.yaml", "CHANGELOG.md", "CONTRIBUTING.rst", "docs/source/conf.py", "docs/source/developers/contents.rst", "docs/source/developers/extensions.rst", "docs/source/developers/savehooks.rst", "docs/source/developers/websocket-protocols.rst", "docs/source/operators/configuring-logging.rst", "docs/source/operators/public-server.rst", "docs/source/operators/security.rst", "docs/source/users/configuration.rst", "examples/authorization/README.md", "examples/identity/system_password/jupyter_server_config.py", "examples/simple/README.md", "examples/simple/conftest.py", "examples/simple/simple_ext11/application.py", "examples/simple/simple_ext2/application.py", "jupyter_server/_tz.py", "jupyter_server/base/handlers.py", "jupyter_server/event_schemas/contents_service/v1.yaml", "jupyter_server/event_schemas/gateway_client/v1.yaml", "jupyter_server/event_schemas/kernel_actions/v1.yaml", "jupyter_server/extension/application.py", "jupyter_server/extension/utils.py", "jupyter_server/gateway/gateway_client.py", "jupyter_server/gateway/handlers.py", "jupyter_server/gateway/managers.py", "jupyter_server/i18n/notebook.pot", "jupyter_server/i18n/zh_CN/LC_MESSAGES/notebook.po", "jupyter_server/kernelspecs/handlers.py", "jupyter_server/log.py", "jupyter_server/prometheus/metrics.py", "jupyter_server/serverapp.py", "jupyter_server/services/api/api.yaml", "jupyter_server/services/contents/fileio.py", "jupyter_server/services/contents/filemanager.py", "jupyter_server/services/contents/manager.py", "jupyter_server/services/kernels/connection/channels.py", "jupyter_server/services/kernels/kernelmanager.py", "jupyter_server/services/sessions/sessionmanager.py", "jupyter_server/utils.py", "package.json", "pyproject.toml", "tests/base/test_handlers.py", "tests/extension/test_serverextension.py", "tests/services/config/test_api.py", "tests/services/contents/test_api.py", "tests/services/contents/test_fileio.py", "tests/services/kernelspecs/test_api.py", "tests/test_gateway.py", "tests/test_serverapp.py", "tests/test_terminal.py", "tests/unix_sockets/test_serverapp_integration.py"]}, {"commit_id": "3544deb53902cc02c9aa9d6513b3c30f1113896b", "commit_date": "Thu Sep 28 12:54:48 2023 -0500", "commit_message": "Update typings for traitlets 5.10 (#1330)", "files_name": ["examples/simple/simple_ext1/application.py", "examples/simple/simple_ext2/application.py", "jupyter_server/auth/identity.py", "jupyter_server/extension/manager.py", "jupyter_server/gateway/connections.py", "jupyter_server/gateway/gateway_client.py", "jupyter_server/gateway/managers.py", "jupyter_server/serverapp.py", "jupyter_server/services/contents/filecheckpoints.py", "jupyter_server/services/contents/filemanager.py", "jupyter_server/services/contents/manager.py", "jupyter_server/services/events/handlers.py", "jupyter_server/services/kernels/connection/channels.py", "jupyter_server/services/kernels/kernelmanager.py", "jupyter_server/traittypes.py", "pyproject.toml", "tests/extension/mockextensions/app.py"]}, {"commit_id": "1ece796301b185d69e2173a303487966585b5356", "commit_date": "Tue Oct 3 15:59:19 2023 -0500", "commit_message": "chore: update pre-commit hooks (#1334)", "files_name": [".pre-commit-config.yaml", "CHANGELOG.md", "docs/source/developers/contents.rst", "jupyter_server/base/handlers.py"]}, {"commit_id": "63463c40a51e8a7454d1f587da83077ef697206d", "commit_date": "Sat Oct 14 19:24:36 2023 -0500", "commit_message": "Add typings to commonly used APIs (#1333)", "files_name": ["examples/simple/simple_ext1/handlers.py", "examples/simple/simple_ext2/handlers.py", "jupyter_server/_tz.py", "jupyter_server/auth/decorator.py", "jupyter_server/auth/identity.py", "jupyter_server/auth/login.py", "jupyter_server/base/handlers.py", "jupyter_server/config_manager.py", "jupyter_server/extension/application.py", "jupyter_server/extension/handler.py", "jupyter_server/extension/serverextension.py", "jupyter_server/files/handlers.py", "jupyter_server/gateway/connections.py", "jupyter_server/gateway/handlers.py", "jupyter_server/gateway/managers.py", "jupyter_server/nbconvert/handlers.py", "jupyter_server/serverapp.py", "jupyter_server/services/contents/filemanager.py", "jupyter_server/services/contents/handlers.py", "jupyter_server/services/contents/manager.py", "jupyter_server/services/events/handlers.py", "jupyter_server/services/kernels/handlers.py", "jupyter_server/services/kernelspecs/handlers.py", "jupyter_server/services/sessions/handlers.py", "jupyter_server/services/shutdown.py", "jupyter_server/utils.py", "pyproject.toml", "tests/base/test_handlers.py", "tests/services/sessions/test_manager.py", "tests/test_gateway.py", "tests/test_utils.py"]}, {"commit_id": "89c8de5c6b7612559c8adfdc72b90af2241488f8", "commit_date": "Sat Oct 14 19:50:17 2023 -0500", "commit_message": "Update typings for mypy 1.6 (#1337)", "files_name": ["docs/source/conf.py", "examples/identity/system_password/jupyter_server_config.py", "examples/simple/simple_ext11/application.py", "jupyter_server/gateway/managers.py", "jupyter_server/prometheus/metrics.py", "jupyter_server/services/sessions/sessionmanager.py", "jupyter_server/utils.py", "pyproject.toml", "tests/test_terminal.py"]}, {"commit_id": "a984e0771da5db4a14e9ac86a392ad3592b863e5", "commit_date": "Sun Oct 15 20:22:07 2023 +0530", "commit_message": "Added Logs for get_os_path closes issue (#1336)", "files_name": ["jupyter_server/services/contents/fileio.py", "jupyter_server/services/contents/filemanager.py", "tests/services/contents/test_fileio.py"]}, {"commit_id": "91e726c8cf6f9c1b7e829406e34dc206af239c07", "commit_date": "Mon Oct 16 10:27:53 2023 +0000", "commit_message": "Publish 2.8.0", "files_name": ["CHANGELOG.md", "jupyter_server/_version.py"]}, {"commit_id": "260e86acbac026645ef451ac7da67b5ba18e1dae", "commit_date": "Mon Oct 16 10:27:55 2023 +0000", "commit_message": "Bump to 2.9.0.dev0", "files_name": ["jupyter_server/_version.py"]}, {"commit_id": "393c108694c566a3716f1004db3a109f6516815d", "commit_date": "Mon Oct 23 09:04:32 2023 -0700", "commit_message": "Run Gateway token renewers even if the auth token is empty. (#1340)", "files_name": ["jupyter_server/gateway/gateway_client.py", "tests/test_gateway.py"]}, {"commit_id": "b475f0e25660a26fcff70700ac33e3e24f1c3726", "commit_date": "Tue Oct 24 13:16:39 2023 -0700", "commit_message": "Ability to configure cull_idle_timeout with kernelSpec (#1342)", "files_name": ["jupyter_server/services/kernels/kernelmanager.py", "tests/services/kernels/test_cull.py"]}, {"commit_id": "3438ddb16575155e98fc4f49700fff420088c8b0", "commit_date": "Wed Oct 25 02:05:30 2023 +0200", "commit_message": "Update kernel env to reflect changes in session. (#1341)", "files_name": ["jupyter_server/services/sessions/sessionmanager.py"]}], "parents": [{"commit_id_before": "ed65a6ce85808b9099e652cea6170f0289e76e51", "url_before": "https://api.github.com/repos/jupyter-server/jupyter_server/commits/ed65a6ce85808b9099e652cea6170f0289e76e51", "html_url_before": "https://github.com/jupyter-server/jupyter_server/commit/ed65a6ce85808b9099e652cea6170f0289e76e51"}], "details": [{"raw_url": "https://github.com/jupyter-server/jupyter_server/raw/87a4927272819f0b1cae1afa4c8c86ee2da002fd/jupyter_server%2Fbase%2Fhandlers.py", "code": "\"\"\"Base Tornado handlers for the Jupyter server.\"\"\"\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\nfrom __future__ import annotations\n\nimport functools\nimport inspect\nimport ipaddress\nimport json\nimport mimetypes\nimport os\nimport re\nimport traceback\nimport types\nimport warnings\nfrom http.client import responses\nfrom typing import TYPE_CHECKING, Awaitable\nfrom urllib.parse import urlparse\n\nimport prometheus_client\nfrom jinja2 import TemplateNotFound\nfrom jupyter_core.paths import is_hidden\nfrom jupyter_events import EventLogger\nfrom tornado import web\nfrom tornado.log import app_log\nfrom traitlets.config import Application\n\nimport jupyter_server\nfrom jupyter_server import CallContext\nfrom jupyter_server._sysinfo import get_sys_info\nfrom jupyter_server._tz import utcnow\nfrom jupyter_server.auth import authorized\nfrom jupyter_server.i18n import combine_translations\nfrom jupyter_server.services.security import csp_report_uri\nfrom jupyter_server.utils import (\n    ensure_async,\n    filefind,\n    url_escape,\n    url_is_absolute,\n    url_path_join,\n    urldecode_unix_socket_path,\n)\n\nif TYPE_CHECKING:\n    from jupyter_server.auth.identity import User\n\n# -----------------------------------------------------------------------------\n# Top-level handlers\n# -----------------------------------------------------------------------------\n\n_sys_info_cache = None\n\n\ndef json_sys_info():\n    \"\"\"Get sys info as json.\"\"\"\n    global _sys_info_cache  # noqa\n    if _sys_info_cache is None:\n        _sys_info_cache = json.dumps(get_sys_info())\n    return _sys_info_cache\n\n\ndef log():\n    \"\"\"Get the application log.\"\"\"\n    if Application.initialized():\n        return Application.instance().log\n    else:\n        return app_log\n\n\nclass AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    @property\n    def base_url(self) -> str:\n        return self.settings.get(\"base_url\", \"/\")\n\n    @property\n    def content_security_policy(self):\n        \"\"\"The default Content-Security-Policy header\n\n        Can be overridden by defining Content-Security-Policy in settings['headers']\n        \"\"\"\n        if \"Content-Security-Policy\" in self.settings.get(\"headers\", {}):\n            # user-specified, don't override\n            return self.settings[\"headers\"][\"Content-Security-Policy\"]\n\n        return \"; \".join(\n            [\n                \"frame-ancestors 'self'\",\n                # Make sure the report-uri is relative to the base_url\n                \"report-uri \"\n                + self.settings.get(\"csp_report_uri\", url_path_join(self.base_url, csp_report_uri)),\n            ]\n        )\n\n    def set_default_headers(self):\n        \"\"\"Set the default headers.\"\"\"\n        headers = {}\n        headers[\"X-Content-Type-Options\"] = \"nosniff\"\n        headers.update(self.settings.get(\"headers\", {}))\n\n        headers[\"Content-Security-Policy\"] = self.content_security_policy\n\n        # Allow for overriding headers\n        for header_name, value in headers.items():\n            try:\n                self.set_header(header_name, value)\n            except Exception as e:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                self.log.exception(  # type:ignore[attr-defined]\n                    \"Could not set default headers: %s\", e\n                )\n\n    @property\n    def cookie_name(self):\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.get_cookie_name(self)\n\n    def force_clear_cookie(self, name, path=\"/\", domain=None):\n        \"\"\"Force a cookie clear.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider._force_clear_cookie(self, name, path=path, domain=domain)\n\n    def clear_login_cookie(self):\n        \"\"\"Clear a login cookie.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.clear_login_cookie(self)\n\n    def get_current_user(self):\n        \"\"\"Get the current user.\"\"\"\n        clsname = self.__class__.__name__\n        msg = (\n            f\"Calling `{clsname}.get_current_user()` directly is deprecated in jupyter-server 2.0.\"\n            \" Use `self.current_user` instead (works in all versions).\"\n        )\n        if hasattr(self, \"_jupyter_current_user\"):\n            # backward-compat: return _jupyter_current_user\n            warnings.warn(\n                msg,\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            return self._jupyter_current_user\n        # haven't called get_user in prepare, raise\n        raise RuntimeError(msg)\n\n    def skip_check_origin(self):\n        \"\"\"Ask my login_handler if I should skip the origin_check\n\n        For example: in the default LoginHandler, if a request is token-authenticated,\n        origin checking should be skipped.\n        \"\"\"\n        if self.request.method == \"OPTIONS\":\n            # no origin-check on options requests, which are used to check origins!\n            return True\n        return not self.identity_provider.should_check_origin(self)\n\n    @property\n    def token_authenticated(self):\n        \"\"\"Have I been authenticated with a token?\"\"\"\n        return self.identity_provider.is_token_authenticated(self)\n\n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\"\"\"\n        user = self.current_user\n        return user and user != \"anonymous\"\n\n    @property\n    def login_handler(self):\n        \"\"\"Return the login handler for this application, if any.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.login_handler_class\n\n    @property\n    def token(self):\n        \"\"\"Return the login token for this application, if any.\"\"\"\n        return self.identity_provider.token\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return self.identity_provider.login_available\n\n    @property\n    def authorizer(self):\n        if \"authorizer\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'authorizer' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an authorizer to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/\"\n                \"653740cbad7ce0c8a8752ce83e4d3c2c754b13cb/jupyter_server/serverapp.py\"\n                \"#L234-L256\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import AllowAllAuthorizer\n\n            self.settings[\"authorizer\"] = AllowAllAuthorizer(\n                config=self.settings.get(\"config\", None),\n                identity_provider=self.identity_provider,\n            )\n\n        return self.settings.get(\"authorizer\")\n\n    @property\n    def identity_provider(self):\n        if \"identity_provider\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'identity_provider' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an identity provider to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/v2.0.0/\"\n                \"jupyter_server/serverapp.py#L242\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import IdentityProvider\n\n            # no identity provider set, load default\n            self.settings[\"identity_provider\"] = IdentityProvider(\n                config=self.settings.get(\"config\", None)\n            )\n        return self.settings[\"identity_provider\"]\n\n\nclass JupyterHandler(AuthenticatedHandler):\n    \"\"\"Jupyter-specific extensions to authenticated handling\n\n    Mostly property shortcuts to Jupyter-specific settings.\n    \"\"\"\n\n    @property\n    def config(self):\n        return self.settings.get(\"config\", None)\n\n    @property\n    def log(self):\n        \"\"\"use the Jupyter log by default, falling back on tornado's logger\"\"\"\n        return log()\n\n    @property\n    def jinja_template_vars(self):\n        \"\"\"User-supplied values to supply to jinja templates.\"\"\"\n        return self.settings.get(\"jinja_template_vars\", {})\n\n    @property\n    def serverapp(self):\n        return self.settings[\"serverapp\"]\n\n    # ---------------------------------------------------------------\n    # URLs\n    # ---------------------------------------------------------------\n\n    @property\n    def version_hash(self):\n        \"\"\"The version hash to use for cache hints for static files\"\"\"\n        return self.settings.get(\"version_hash\", \"\")\n\n    @property\n    def mathjax_url(self):\n        url = self.settings.get(\"mathjax_url\", \"\")\n        if not url or url_is_absolute(url):\n            return url\n        return url_path_join(self.base_url, url)\n\n    @property\n    def mathjax_config(self):\n        return self.settings.get(\"mathjax_config\", \"TeX-AMS-MML_HTMLorMML-full,Safe\")\n\n    @property\n    def default_url(self):\n        return self.settings.get(\"default_url\", \"\")\n\n    @property\n    def ws_url(self):\n        return self.settings.get(\"websocket_url\", \"\")\n\n    @property\n    def contents_js_source(self):\n        self.log.debug(\n            \"Using contents: %s\",\n            self.settings.get(\"contents_js_source\", \"services/contents\"),\n        )\n        return self.settings.get(\"contents_js_source\", \"services/contents\")\n\n    # ---------------------------------------------------------------\n    # Manager objects\n    # ---------------------------------------------------------------\n\n    @property\n    def kernel_manager(self):\n        return self.settings[\"kernel_manager\"]\n\n    @property\n    def contents_manager(self):\n        return self.settings[\"contents_manager\"]\n\n    @property\n    def session_manager(self):\n        return self.settings[\"session_manager\"]\n\n    @property\n    def terminal_manager(self):\n        return self.settings[\"terminal_manager\"]\n\n    @property\n    def kernel_spec_manager(self):\n        return self.settings[\"kernel_spec_manager\"]\n\n    @property\n    def config_manager(self):\n        return self.settings[\"config_manager\"]\n\n    @property\n    def event_logger(self) -> EventLogger:\n        return self.settings[\"event_logger\"]\n\n    # ---------------------------------------------------------------\n    # CORS\n    # ---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get(\"allow_origin\", \"\")\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get(\"allow_origin_pat\", None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get(\"allow_credentials\", False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super().set_default_headers()\n\n    def set_cors_headers(self):\n        \"\"\"Add CORS headers, if defined\n\n        Now that current_user is async (jupyter-server 2.0),\n        must be called at the end of prepare(), instead of in set_default_headers.\n        \"\"\"\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and re.match(self.allow_origin_pat, origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        elif self.token_authenticated and \"Access-Control-Allow-Origin\" not in self.settings.get(\n            \"headers\", {}\n        ):\n            # allow token-authenticated requests cross-origin by default.\n            # only apply this exception if allow-origin has not been specified.\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))\n\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n\n    def set_attachment_header(self, filename):\n        \"\"\"Set Content-Disposition: attachment header\n\n        As a method to ensure handling of filename encoding\n        \"\"\"\n        escaped_filename = url_escape(filename)\n        self.set_header(\n            \"Content-Disposition\",\n            \"attachment;\"\n            \" filename*=utf-8''{utf8}\".format(\n                utf8=escaped_filename,\n            ),\n        )\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    # origin_to_satisfy_tornado is present because tornado requires\n    # check_origin to take an origin argument, but we don't use it\n    def check_origin(self, origin_to_satisfy_tornado=\"\"):\n        \"\"\"Check Origin for cross-site API requests, including websockets\n\n        Copied from WebSocket with changes:\n\n        - allow unspecified host/origin (e.g. scripts)\n        - allow token-authenticated requests\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        origin = self.request.headers.get(\"Origin\")\n\n        # If no header is provided, let the request through.\n        # Origin can be None for:\n        # - same-origin (IE, Firefox)\n        # - Cross-site POST form (IE, Firefox)\n        # - Scripts\n        # The cross-site POST (XSRF) case is handled by tornado's xsrf_token\n        if origin is None or host is None:\n            return True\n\n        origin = origin.lower()\n        origin_host = urlparse(origin).netloc\n\n        # OK if origin matches host\n        if origin_host == host:\n            return True\n\n        # Check CORS headers\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS headers deny the request\n            allow = False\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin API request for %s.  Origin: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_referer(self):\n        \"\"\"Check Referer for cross-site requests.\n        Disables requests to certain endpoints with\n        external or missing Referer.\n        If set, allow_origin settings are applied to the Referer\n        to whitelist specific cross-origin sites.\n        Used on GET for api endpoints and /files/\n        to block cross-site inclusion (XSSI).\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        referer = self.request.headers.get(\"Referer\")\n\n        if not host:\n            self.log.warning(\"Blocking request with no host\")\n            return False\n        if not referer:\n            self.log.warning(\"Blocking request with no referer\")\n            return False\n\n        referer_url = urlparse(referer)\n        referer_host = referer_url.netloc\n        if referer_host == host:\n            return True\n\n        # apply cross-origin checks to Referer:\n        origin = f\"{referer_url.scheme}://{referer_url.netloc}\"\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS settings, deny the request\n            allow = False\n\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin request for %s.  Referer: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_xsrf_cookie(self):\n        \"\"\"Bypass xsrf cookie checks when token-authenticated\"\"\"\n        if not hasattr(self, \"_jupyter_current_user\"):\n            # Called too early, will be checked later\n            return\n        if self.token_authenticated or self.settings.get(\"disable_check_xsrf\", False):\n            # Token-authenticated requests do not need additional XSRF-check\n            # Servers without authentication are vulnerable to XSRF\n            return\n        try:\n            return super().check_xsrf_cookie()\n        except web.HTTPError as e:\n            if self.request.method in {\"GET\", \"HEAD\"}:\n                # Consider Referer a sufficient cross-origin check for GET requests\n                if not self.check_referer():\n                    referer = self.request.headers.get(\"Referer\")\n                    if referer:\n                        msg = f\"Blocking Cross Origin request from {referer}.\"\n                    else:\n                        msg = \"Blocking request from unknown origin\"\n                    raise web.HTTPError(403, msg) from e\n            else:\n                raise\n\n    def check_host(self):\n        \"\"\"Check the host header if remote access disallowed.\n\n        Returns True if the request should continue, False otherwise.\n        \"\"\"\n        if self.settings.get(\"allow_remote_access\", False):\n            return True\n\n        # Remove port (e.g. ':8888') from host\n        match = re.match(r\"^(.*?)(:\\d+)?$\", self.request.host)\n        assert match is not None\n        host = match.group(1)\n\n        # Browsers format IPv6 addresses like [::1]; we need to remove the []\n        if host.startswith(\"[\") and host.endswith(\"]\"):\n            host = host[1:-1]\n\n        # UNIX socket handling\n        check_host = urldecode_unix_socket_path(host)\n        if check_host.startswith(\"/\") and os.path.exists(check_host):\n            allow = True\n        else:\n            try:\n                addr = ipaddress.ip_address(host)\n            except ValueError:\n                # Not an IP address: check against hostnames\n                allow = host in self.settings.get(\"local_hostnames\", [\"localhost\"])\n            else:\n                allow = addr.is_loopback\n\n        if not allow:\n            self.log.warning(\n                (\n                    \"Blocking request with non-local 'Host' %s (%s). \"\n                    \"If the server should be accessible at that name, \"\n                    \"set ServerApp.allow_remote_access to disable the check.\"\n                ),\n                host,\n                self.request.host,\n            )\n        return allow\n\n    async def prepare(self):\n        \"\"\"Pepare a response.\"\"\"\n        # Set the current Jupyter Handler context variable.\n        CallContext.set(CallContext.JUPYTER_HANDLER, self)\n\n        if not self.check_host():\n            self.current_user = self._jupyter_current_user = None\n            raise web.HTTPError(403)\n\n        from jupyter_server.auth import IdentityProvider\n\n        mod_obj = inspect.getmodule(self.get_current_user)\n        assert mod_obj is not None\n        user: User | None = None\n\n        if type(self.identity_provider) is IdentityProvider and mod_obj.__name__ != __name__:\n            # check for overridden get_current_user + default IdentityProvider\n            # deprecated way to override auth (e.g. JupyterHub < 3.0)\n            # allow deprecated, overridden get_current_user\n            warnings.warn(  # noqa\n                \"Overriding JupyterHandler.get_current_user is deprecated in jupyter-server 2.0.\"\n                \" Use an IdentityProvider class.\",\n                DeprecationWarning\n                # stacklevel not useful here\n            )\n            user = self.get_current_user()\n        else:\n            _user = self.identity_provider.get_user(self)\n            if isinstance(_user, Awaitable):\n                # IdentityProvider.get_user _may_ be async\n                _user = await _user\n            user = _user\n\n        # self.current_user for tornado's @web.authenticated\n        # self._jupyter_current_user for backward-compat in deprecated get_current_user calls\n        # and our own private checks for whether .current_user has been set\n        self.current_user = self._jupyter_current_user = user\n        # complete initial steps which require auth to resolve first:\n        self.set_cors_headers()\n        if self.request.method not in {\"GET\", \"HEAD\", \"OPTIONS\"}:\n            self.check_xsrf_cookie()\n        return super().prepare()\n\n    # ---------------------------------------------------------------\n    # template rendering\n    # ---------------------------------------------------------------\n\n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings[\"jinja2_env\"].get_template(name)\n\n    def render_template(self, name, **ns):\n        \"\"\"Render a template by name.\"\"\"\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n\n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            default_url=self.default_url,\n            ws_url=self.ws_url,\n            logged_in=self.logged_in,\n            allow_password_change=getattr(self.identity_provider, \"allow_password_change\", False),\n            auth_enabled=self.identity_provider.auth_enabled,\n            login_available=self.identity_provider.login_available,\n            token_available=bool(self.token),\n            static_url=self.static_url,\n            sys_info=json_sys_info(),\n            contents_js_source=self.contents_js_source,\n            version_hash=self.version_hash,\n            xsrf_form_html=self.xsrf_form_html,\n            token=self.token,\n            xsrf_token=self.xsrf_token.decode(\"utf8\"),\n            nbjs_translations=json.dumps(\n                combine_translations(self.request.headers.get(\"Accept-Language\", \"\"))\n            ),\n            **self.jinja_template_vars,\n        )\n\n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(\"utf-8\")\n        try:\n            model = json.loads(body)\n        except Exception as e:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, \"Invalid JSON in body of request\") from e\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get(\"exc_info\")\n        message = \"\"\n        status_message = responses.get(status_code, \"Unknown HTTP Error\")\n\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:  # noqa\n                pass\n\n            # construct the custom reason, if defined\n            reason = getattr(exception, \"reason\", \"\")\n            if reason:\n                status_message = reason\n        else:\n            exception = \"(unknown)\"\n\n        # build template namespace\n        ns = {\n            \"status_code\": status_code,\n            \"status_message\": status_message,\n            \"message\": message,\n            \"exception\": exception,\n        }\n\n        self.set_header(\"Content-Type\", \"text/html\")\n        # render the template\n        try:\n            html = self.render_template(\"%s.html\" % status_code, **ns)\n        except TemplateNotFound:\n            html = self.render_template(\"error.html\", **ns)\n\n        self.write(html)\n\n\nclass APIHandler(JupyterHandler):\n    \"\"\"Base class for API handlers\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare an API response.\"\"\"\n        await super().prepare()\n        if not self.check_origin():\n            raise web.HTTPError(404)\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"APIHandler errors are JSON, not human pages\"\"\"\n        self.set_header(\"Content-Type\", \"application/json\")\n        message = responses.get(status_code, \"Unknown HTTP Error\")\n        reply: dict = {\n            \"message\": message,\n        }\n        exc_info = kwargs.get(\"exc_info\")\n        if exc_info:\n            e = exc_info[1]\n            if isinstance(e, HTTPError):\n                reply[\"message\"] = e.log_message or message\n                reply[\"reason\"] = e.reason\n            else:\n                reply[\"message\"] = \"Unhandled error\"\n                reply[\"reason\"] = None\n                reply[\"traceback\"] = \"\".join(traceback.format_exception(*exc_info))\n        self.log.warning(\"wrote error: %r\", reply[\"message\"], exc_info=True)\n        self.finish(json.dumps(reply))\n\n    def get_login_url(self):\n        \"\"\"Get the login url.\"\"\"\n        # if get_login_url is invoked in an API handler,\n        # that means @web.authenticated is trying to trigger a redirect.\n        # instead of redirecting, raise 403 instead.\n        if not self.current_user:\n            raise web.HTTPError(403)\n        return super().get_login_url()\n\n    @property\n    def content_security_policy(self):\n        csp = \"; \".join(\n            [\n                super().content_security_policy,\n                \"default-src 'none'\",\n            ]\n        )\n        return csp\n\n    # set _track_activity = False on API handlers that shouldn't track activity\n    _track_activity = True\n\n    def update_api_activity(self):\n        \"\"\"Update last_activity of API requests\"\"\"\n        # record activity of authenticated requests\n        if (\n            self._track_activity\n            and getattr(self, \"_jupyter_current_user\", None)\n            and self.get_argument(\"no_track_activity\", None) is None\n        ):\n            self.settings[\"api_last_activity\"] = utcnow()\n\n    def finish(self, *args, **kwargs):\n        \"\"\"Finish an API response.\"\"\"\n        self.update_api_activity()\n        # Allow caller to indicate content-type...\n        set_content_type = kwargs.pop(\"set_content_type\", \"application/json\")\n        self.set_header(\"Content-Type\", set_content_type)\n        return super().finish(*args, **kwargs)\n\n    def options(self, *args, **kwargs):\n        \"\"\"Get the options.\"\"\"\n        if \"Access-Control-Allow-Headers\" in self.settings.get(\"headers\", {}):\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                self.settings[\"headers\"][\"Access-Control-Allow-Headers\"],\n            )\n        else:\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                \"accept, content-type, authorization, x-xsrftoken\",\n            )\n        self.set_header(\"Access-Control-Allow-Methods\", \"GET, PUT, POST, PATCH, DELETE, OPTIONS\")\n\n        # if authorization header is requested,\n        # that means the request is token-authenticated.\n        # avoid browser-side rejection of the preflight request.\n        # only allow this exception if allow_origin has not been specified\n        # and Jupyter server authentication is enabled.\n        # If the token is not valid, the 'real' request will still be rejected.\n        requested_headers = self.request.headers.get(\"Access-Control-Request-Headers\", \"\").split(\n            \",\"\n        )\n        if (\n            requested_headers\n            and any(h.strip().lower() == \"authorization\" for h in requested_headers)\n            and (\n                # FIXME: it would be even better to check specifically for token-auth,\n                # but there is currently no API for this.\n                self.login_available\n            )\n            and (\n                self.allow_origin\n                or self.allow_origin_pat\n                or \"Access-Control-Allow-Origin\" in self.settings.get(\"headers\", {})\n            )\n        ):\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))\n\n\nclass Template404(JupyterHandler):\n    \"\"\"Render our 404 template\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare a 404 response.\"\"\"\n        await super().prepare()\n        raise web.HTTPError(404)\n\n\nclass AuthenticatedFileHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    auth_resource = \"contents\"\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the Jupyter server.\n        return super().content_security_policy + \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    @authorized\n    def head(self, path):\n        \"\"\"Get the head response for a path.\"\"\"\n        self.check_xsrf_cookie()\n        return super().head(path)\n\n    @web.authenticated\n    @authorized\n    def get(self, path, **kwargs):\n        \"\"\"Get a file by path.\"\"\"\n        self.check_xsrf_cookie()\n        if os.path.splitext(path)[1] == \".ipynb\" or self.get_argument(\"download\", None):\n            name = path.rsplit(\"/\", 1)[-1]\n            self.set_attachment_header(name)\n\n        return web.StaticFileHandler.get(self, path, **kwargs)\n\n    def get_content_type(self):\n        \"\"\"Get the content type.\"\"\"\n        assert self.absolute_path is not None\n        path = self.absolute_path.strip(\"/\")\n        if \"/\" in path:\n            _, name = path.rsplit(\"/\", 1)\n        else:\n            name = path\n        if name.endswith(\".ipynb\"):\n            return \"application/x-ipynb+json\"\n        else:\n            cur_mime = mimetypes.guess_type(name)[0]\n            if cur_mime == \"text/plain\":\n                return \"text/plain; charset=UTF-8\"\n            else:\n                return super().get_content_type()\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments:\n            self.add_header(\"Cache-Control\", \"no-cache\")\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n\n        Requires tornado 3.1\n\n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super().validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        assert abs_path is not None\n        if not self.contents_manager.allow_hidden and is_hidden(abs_path, abs_root):\n            self.log.info(\n                \"Refusing to serve hidden file, via 404 Error, use flag 'ContentsManager.allow_hidden' to enable\"\n            )\n            raise web.HTTPError(404)\n        return abs_path\n\n\ndef json_errors(method):  # pragma: no cover\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n\n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n\n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n\n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    warnings.warn(\n        \"@json_errors is deprecated in notebook 5.2.0. Subclass APIHandler instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self.write_error = types.MethodType(APIHandler.write_error, self)\n        return method(self, *args, **kwargs)\n\n    return wrapper\n\n\n# -----------------------------------------------------------------------------\n# File handler\n# -----------------------------------------------------------------------------\n\n# to minimize subclass changes:\nHTTPError = web.HTTPError\n\n\nclass FileFindHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\n\n    The setting \"static_immutable_cache\" can be set up to serve some static\n    file as immutable (e.g. file name containing a hash). The setting is a\n    list of base URL, every static file URL starting with one of those will\n    be immutable.\n    \"\"\"\n\n    # cache search results, don't search for files more than once\n    _static_paths: dict = {}\n    root: tuple  # type:ignore[assignment]\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n\n        immutable_paths = self.settings.get(\"static_immutable_cache\", [])\n\n        # allow immutable cache for files\n        if any(self.request.path.startswith(path) for path in immutable_paths):\n            self.set_header(\"Cache-Control\", \"public, max-age=31536000, immutable\")\n\n        # disable browser caching, rely on 304 replies for savings\n        elif \"v\" not in self.request.arguments or any(\n            self.request.path.startswith(path) for path in self.no_cache_paths\n        ):\n            self.set_header(\"Cache-Control\", \"no-cache\")\n\n    def initialize(self, path, default_filename=None, no_cache_paths=None):\n        \"\"\"Initialize the file find handler.\"\"\"\n        self.no_cache_paths = no_cache_paths or []\n\n        if isinstance(path, str):\n            path = [path]\n\n        self.root = tuple(os.path.abspath(os.path.expanduser(p)) + os.sep for p in path)\n        self.default_filename = default_filename\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except OSError:\n                # IOError means not found\n                return \"\"\n\n            cls._static_paths[path] = abspath\n\n            log().debug(f\"Path {path} served from {abspath}\")\n            return abspath\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if not absolute_path:\n            raise web.HTTPError(404)\n\n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n\n        return super().validate_absolute_path(root, absolute_path)\n\n\nclass APIVersionHandler(APIHandler):\n    \"\"\"An API handler for the server version.\"\"\"\n\n    _track_activity = False\n\n    def get(self):\n        \"\"\"Get the server version info.\"\"\"\n        # not authenticated, so give as few info as possible\n        self.finish(json.dumps({\"version\": jupyter_server.__version__}))\n\n\nclass TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n\n    This should be the first, highest priority handler.\n    \"\"\"\n\n    def get(self):\n        \"\"\"Handle trailing slashes in a get.\"\"\"\n        assert self.request.uri is not None\n        path, *rest = self.request.uri.partition(\"?\")\n        # trim trailing *and* leading /\n        # to avoid misinterpreting repeated '//'\n        path = \"/\" + path.strip(\"/\")\n        new_uri = \"\".join([path, *rest])\n        self.redirect(new_uri)\n\n    post = put = get\n\n\nclass MainHandler(JupyterHandler):\n    \"\"\"Simple handler for base_url.\"\"\"\n\n    def get(self):\n        \"\"\"Get the main template.\"\"\"\n        html = self.render_template(\"main.html\")\n        self.write(html)\n\n    post = put = get\n\n\nclass FilesRedirectHandler(JupyterHandler):\n    \"\"\"Handler for redirecting relative URLs to the /files/ handler\"\"\"\n\n    @staticmethod\n    async def redirect_to_files(self, path):\n        \"\"\"make redirect logic a reusable static method\n\n        so it can be called from other handlers.\n        \"\"\"\n        cm = self.contents_manager\n        if await ensure_async(cm.dir_exists(path)):\n            # it's a *directory*, redirect to /tree\n            url = url_path_join(self.base_url, \"tree\", url_escape(path))\n        else:\n            orig_path = path\n            # otherwise, redirect to /files\n            parts = path.split(\"/\")\n\n            if not await ensure_async(cm.file_exists(path=path)) and \"files\" in parts:\n                # redirect without files/ iff it would 404\n                # this preserves pre-2.0-style 'files/' links\n                self.log.warning(\"Deprecated files/ URL: %s\", orig_path)\n                parts.remove(\"files\")\n                path = \"/\".join(parts)\n\n            if not await ensure_async(cm.file_exists(path=path)):\n                raise web.HTTPError(404)\n\n            url = url_path_join(self.base_url, \"files\", url_escape(path))\n        self.log.debug(\"Redirecting %s to %s\", self.request.path, url)\n        self.redirect(url)\n\n    def get(self, path=\"\"):\n        return self.redirect_to_files(self, path)\n\n\nclass RedirectWithParams(web.RequestHandler):\n    \"\"\"Sam as web.RedirectHandler, but preserves URL parameters\"\"\"\n\n    def initialize(self, url, permanent=True):\n        \"\"\"Initialize a redirect handler.\"\"\"\n        self._url = url\n        self._permanent = permanent\n\n    def get(self):\n        \"\"\"Get a redirect.\"\"\"\n        sep = \"&\" if \"?\" in self._url else \"?\"\n        url = sep.join([self._url, self.request.query])\n        self.redirect(url, permanent=self._permanent)\n\n\nclass PrometheusMetricsHandler(JupyterHandler):\n    \"\"\"\n    Return prometheus metrics for this server\n    \"\"\"\n\n    def get(self):\n        \"\"\"Get prometheus metrics.\"\"\"\n        if self.settings[\"authenticate_prometheus\"] and not self.logged_in:\n            raise web.HTTPError(403)\n\n        self.set_header(\"Content-Type\", prometheus_client.CONTENT_TYPE_LATEST)\n        self.write(prometheus_client.generate_latest(prometheus_client.REGISTRY))\n\n\n# -----------------------------------------------------------------------------\n# URL pattern fragments for re-use\n# -----------------------------------------------------------------------------\n\n# path matches any number of `/foo[/bar...]` or just `/` or ''\npath_regex = r\"(?P<path>(?:(?:/[^/]+)+|/?))\"\n\n# -----------------------------------------------------------------------------\n# URL to handler mappings\n# -----------------------------------------------------------------------------\n\n\ndefault_handlers = [\n    (r\".*/\", TrailingSlashHandler),\n    (r\"api\", APIVersionHandler),\n    (r\"/(robots\\.txt|favicon\\.ico)\", web.StaticFileHandler),\n    (r\"/metrics\", PrometheusMetricsHandler),\n]\n", "code_before": "\"\"\"Base Tornado handlers for the Jupyter server.\"\"\"\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\nfrom __future__ import annotations\n\nimport functools\nimport inspect\nimport ipaddress\nimport json\nimport mimetypes\nimport os\nimport re\nimport traceback\nimport types\nimport warnings\nfrom http.client import responses\nfrom typing import TYPE_CHECKING, Awaitable\nfrom urllib.parse import urlparse\n\nimport prometheus_client\nfrom jinja2 import TemplateNotFound\nfrom jupyter_core.paths import is_hidden\nfrom jupyter_events import EventLogger\nfrom tornado import web\nfrom tornado.log import app_log\nfrom traitlets.config import Application\n\nimport jupyter_server\nfrom jupyter_server import CallContext\nfrom jupyter_server._sysinfo import get_sys_info\nfrom jupyter_server._tz import utcnow\nfrom jupyter_server.auth import authorized\nfrom jupyter_server.i18n import combine_translations\nfrom jupyter_server.services.security import csp_report_uri\nfrom jupyter_server.utils import (\n    ensure_async,\n    filefind,\n    url_escape,\n    url_is_absolute,\n    url_path_join,\n    urldecode_unix_socket_path,\n)\n\nif TYPE_CHECKING:\n    from jupyter_server.auth.identity import User\n\n# -----------------------------------------------------------------------------\n# Top-level handlers\n# -----------------------------------------------------------------------------\n\n_sys_info_cache = None\n\n\ndef json_sys_info():\n    \"\"\"Get sys info as json.\"\"\"\n    global _sys_info_cache  # noqa\n    if _sys_info_cache is None:\n        _sys_info_cache = json.dumps(get_sys_info())\n    return _sys_info_cache\n\n\ndef log():\n    \"\"\"Get the application log.\"\"\"\n    if Application.initialized():\n        return Application.instance().log\n    else:\n        return app_log\n\n\nclass AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    @property\n    def base_url(self) -> str:\n        return self.settings.get(\"base_url\", \"/\")\n\n    @property\n    def content_security_policy(self):\n        \"\"\"The default Content-Security-Policy header\n\n        Can be overridden by defining Content-Security-Policy in settings['headers']\n        \"\"\"\n        if \"Content-Security-Policy\" in self.settings.get(\"headers\", {}):\n            # user-specified, don't override\n            return self.settings[\"headers\"][\"Content-Security-Policy\"]\n\n        return \"; \".join(\n            [\n                \"frame-ancestors 'self'\",\n                # Make sure the report-uri is relative to the base_url\n                \"report-uri \"\n                + self.settings.get(\"csp_report_uri\", url_path_join(self.base_url, csp_report_uri)),\n            ]\n        )\n\n    def set_default_headers(self):\n        \"\"\"Set the default headers.\"\"\"\n        headers = {}\n        headers[\"X-Content-Type-Options\"] = \"nosniff\"\n        headers.update(self.settings.get(\"headers\", {}))\n\n        headers[\"Content-Security-Policy\"] = self.content_security_policy\n\n        # Allow for overriding headers\n        for header_name, value in headers.items():\n            try:\n                self.set_header(header_name, value)\n            except Exception as e:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                self.log.exception(  # type:ignore[attr-defined]\n                    \"Could not set default headers: %s\", e\n                )\n\n    @property\n    def cookie_name(self):\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.get_cookie_name(self)\n\n    def force_clear_cookie(self, name, path=\"/\", domain=None):\n        \"\"\"Force a cookie clear.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider._force_clear_cookie(self, name, path=path, domain=domain)\n\n    def clear_login_cookie(self):\n        \"\"\"Clear a login cookie.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.clear_login_cookie(self)\n\n    def get_current_user(self):\n        \"\"\"Get the current user.\"\"\"\n        clsname = self.__class__.__name__\n        msg = (\n            f\"Calling `{clsname}.get_current_user()` directly is deprecated in jupyter-server 2.0.\"\n            \" Use `self.current_user` instead (works in all versions).\"\n        )\n        if hasattr(self, \"_jupyter_current_user\"):\n            # backward-compat: return _jupyter_current_user\n            warnings.warn(\n                msg,\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            return self._jupyter_current_user\n        # haven't called get_user in prepare, raise\n        raise RuntimeError(msg)\n\n    def skip_check_origin(self):\n        \"\"\"Ask my login_handler if I should skip the origin_check\n\n        For example: in the default LoginHandler, if a request is token-authenticated,\n        origin checking should be skipped.\n        \"\"\"\n        if self.request.method == \"OPTIONS\":\n            # no origin-check on options requests, which are used to check origins!\n            return True\n        return not self.identity_provider.should_check_origin(self)\n\n    @property\n    def token_authenticated(self):\n        \"\"\"Have I been authenticated with a token?\"\"\"\n        return self.identity_provider.is_token_authenticated(self)\n\n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\"\"\"\n        user = self.current_user\n        return user and user != \"anonymous\"\n\n    @property\n    def login_handler(self):\n        \"\"\"Return the login handler for this application, if any.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.login_handler_class\n\n    @property\n    def token(self):\n        \"\"\"Return the login token for this application, if any.\"\"\"\n        return self.identity_provider.token\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return self.identity_provider.login_available\n\n    @property\n    def authorizer(self):\n        if \"authorizer\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'authorizer' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an authorizer to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/\"\n                \"653740cbad7ce0c8a8752ce83e4d3c2c754b13cb/jupyter_server/serverapp.py\"\n                \"#L234-L256\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import AllowAllAuthorizer\n\n            self.settings[\"authorizer\"] = AllowAllAuthorizer(\n                config=self.settings.get(\"config\", None),\n                identity_provider=self.identity_provider,\n            )\n\n        return self.settings.get(\"authorizer\")\n\n    @property\n    def identity_provider(self):\n        if \"identity_provider\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'identity_provider' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an identity provider to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/v2.0.0/\"\n                \"jupyter_server/serverapp.py#L242\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import IdentityProvider\n\n            # no identity provider set, load default\n            self.settings[\"identity_provider\"] = IdentityProvider(\n                config=self.settings.get(\"config\", None)\n            )\n        return self.settings[\"identity_provider\"]\n\n\nclass JupyterHandler(AuthenticatedHandler):\n    \"\"\"Jupyter-specific extensions to authenticated handling\n\n    Mostly property shortcuts to Jupyter-specific settings.\n    \"\"\"\n\n    @property\n    def config(self):\n        return self.settings.get(\"config\", None)\n\n    @property\n    def log(self):\n        \"\"\"use the Jupyter log by default, falling back on tornado's logger\"\"\"\n        return log()\n\n    @property\n    def jinja_template_vars(self):\n        \"\"\"User-supplied values to supply to jinja templates.\"\"\"\n        return self.settings.get(\"jinja_template_vars\", {})\n\n    @property\n    def serverapp(self):\n        return self.settings[\"serverapp\"]\n\n    # ---------------------------------------------------------------\n    # URLs\n    # ---------------------------------------------------------------\n\n    @property\n    def version_hash(self):\n        \"\"\"The version hash to use for cache hints for static files\"\"\"\n        return self.settings.get(\"version_hash\", \"\")\n\n    @property\n    def mathjax_url(self):\n        url = self.settings.get(\"mathjax_url\", \"\")\n        if not url or url_is_absolute(url):\n            return url\n        return url_path_join(self.base_url, url)\n\n    @property\n    def mathjax_config(self):\n        return self.settings.get(\"mathjax_config\", \"TeX-AMS-MML_HTMLorMML-full,Safe\")\n\n    @property\n    def default_url(self):\n        return self.settings.get(\"default_url\", \"\")\n\n    @property\n    def ws_url(self):\n        return self.settings.get(\"websocket_url\", \"\")\n\n    @property\n    def contents_js_source(self):\n        self.log.debug(\n            \"Using contents: %s\",\n            self.settings.get(\"contents_js_source\", \"services/contents\"),\n        )\n        return self.settings.get(\"contents_js_source\", \"services/contents\")\n\n    # ---------------------------------------------------------------\n    # Manager objects\n    # ---------------------------------------------------------------\n\n    @property\n    def kernel_manager(self):\n        return self.settings[\"kernel_manager\"]\n\n    @property\n    def contents_manager(self):\n        return self.settings[\"contents_manager\"]\n\n    @property\n    def session_manager(self):\n        return self.settings[\"session_manager\"]\n\n    @property\n    def terminal_manager(self):\n        return self.settings[\"terminal_manager\"]\n\n    @property\n    def kernel_spec_manager(self):\n        return self.settings[\"kernel_spec_manager\"]\n\n    @property\n    def config_manager(self):\n        return self.settings[\"config_manager\"]\n\n    @property\n    def event_logger(self) -> EventLogger:\n        return self.settings[\"event_logger\"]\n\n    # ---------------------------------------------------------------\n    # CORS\n    # ---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get(\"allow_origin\", \"\")\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get(\"allow_origin_pat\", None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get(\"allow_credentials\", False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super().set_default_headers()\n\n    def set_cors_headers(self):\n        \"\"\"Add CORS headers, if defined\n\n        Now that current_user is async (jupyter-server 2.0),\n        must be called at the end of prepare(), instead of in set_default_headers.\n        \"\"\"\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and re.match(self.allow_origin_pat, origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        elif self.token_authenticated and \"Access-Control-Allow-Origin\" not in self.settings.get(\n            \"headers\", {}\n        ):\n            # allow token-authenticated requests cross-origin by default.\n            # only apply this exception if allow-origin has not been specified.\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))\n\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n\n    def set_attachment_header(self, filename):\n        \"\"\"Set Content-Disposition: attachment header\n\n        As a method to ensure handling of filename encoding\n        \"\"\"\n        escaped_filename = url_escape(filename)\n        self.set_header(\n            \"Content-Disposition\",\n            \"attachment;\"\n            \" filename*=utf-8''{utf8}\".format(\n                utf8=escaped_filename,\n            ),\n        )\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    # origin_to_satisfy_tornado is present because tornado requires\n    # check_origin to take an origin argument, but we don't use it\n    def check_origin(self, origin_to_satisfy_tornado=\"\"):\n        \"\"\"Check Origin for cross-site API requests, including websockets\n\n        Copied from WebSocket with changes:\n\n        - allow unspecified host/origin (e.g. scripts)\n        - allow token-authenticated requests\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        origin = self.request.headers.get(\"Origin\")\n\n        # If no header is provided, let the request through.\n        # Origin can be None for:\n        # - same-origin (IE, Firefox)\n        # - Cross-site POST form (IE, Firefox)\n        # - Scripts\n        # The cross-site POST (XSRF) case is handled by tornado's xsrf_token\n        if origin is None or host is None:\n            return True\n\n        origin = origin.lower()\n        origin_host = urlparse(origin).netloc\n\n        # OK if origin matches host\n        if origin_host == host:\n            return True\n\n        # Check CORS headers\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS headers deny the request\n            allow = False\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin API request for %s.  Origin: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_referer(self):\n        \"\"\"Check Referer for cross-site requests.\n        Disables requests to certain endpoints with\n        external or missing Referer.\n        If set, allow_origin settings are applied to the Referer\n        to whitelist specific cross-origin sites.\n        Used on GET for api endpoints and /files/\n        to block cross-site inclusion (XSSI).\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        referer = self.request.headers.get(\"Referer\")\n\n        if not host:\n            self.log.warning(\"Blocking request with no host\")\n            return False\n        if not referer:\n            self.log.warning(\"Blocking request with no referer\")\n            return False\n\n        referer_url = urlparse(referer)\n        referer_host = referer_url.netloc\n        if referer_host == host:\n            return True\n\n        # apply cross-origin checks to Referer:\n        origin = f\"{referer_url.scheme}://{referer_url.netloc}\"\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS settings, deny the request\n            allow = False\n\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin request for %s.  Referer: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_xsrf_cookie(self):\n        \"\"\"Bypass xsrf cookie checks when token-authenticated\"\"\"\n        if not hasattr(self, \"_jupyter_current_user\"):\n            # Called too early, will be checked later\n            return\n        if self.token_authenticated or self.settings.get(\"disable_check_xsrf\", False):\n            # Token-authenticated requests do not need additional XSRF-check\n            # Servers without authentication are vulnerable to XSRF\n            return\n        try:\n            return super().check_xsrf_cookie()\n        except web.HTTPError as e:\n            if self.request.method in {\"GET\", \"HEAD\"}:\n                # Consider Referer a sufficient cross-origin check for GET requests\n                if not self.check_referer():\n                    referer = self.request.headers.get(\"Referer\")\n                    if referer:\n                        msg = f\"Blocking Cross Origin request from {referer}.\"\n                    else:\n                        msg = \"Blocking request from unknown origin\"\n                    raise web.HTTPError(403, msg) from e\n            else:\n                raise\n\n    def check_host(self):\n        \"\"\"Check the host header if remote access disallowed.\n\n        Returns True if the request should continue, False otherwise.\n        \"\"\"\n        if self.settings.get(\"allow_remote_access\", False):\n            return True\n\n        # Remove port (e.g. ':8888') from host\n        match = re.match(r\"^(.*?)(:\\d+)?$\", self.request.host)\n        assert match is not None\n        host = match.group(1)\n\n        # Browsers format IPv6 addresses like [::1]; we need to remove the []\n        if host.startswith(\"[\") and host.endswith(\"]\"):\n            host = host[1:-1]\n\n        # UNIX socket handling\n        check_host = urldecode_unix_socket_path(host)\n        if check_host.startswith(\"/\") and os.path.exists(check_host):\n            allow = True\n        else:\n            try:\n                addr = ipaddress.ip_address(host)\n            except ValueError:\n                # Not an IP address: check against hostnames\n                allow = host in self.settings.get(\"local_hostnames\", [\"localhost\"])\n            else:\n                allow = addr.is_loopback\n\n        if not allow:\n            self.log.warning(\n                (\n                    \"Blocking request with non-local 'Host' %s (%s). \"\n                    \"If the server should be accessible at that name, \"\n                    \"set ServerApp.allow_remote_access to disable the check.\"\n                ),\n                host,\n                self.request.host,\n            )\n        return allow\n\n    async def prepare(self):\n        \"\"\"Pepare a response.\"\"\"\n        # Set the current Jupyter Handler context variable.\n        CallContext.set(CallContext.JUPYTER_HANDLER, self)\n\n        if not self.check_host():\n            self.current_user = self._jupyter_current_user = None\n            raise web.HTTPError(403)\n\n        from jupyter_server.auth import IdentityProvider\n\n        mod_obj = inspect.getmodule(self.get_current_user)\n        assert mod_obj is not None\n        user: User | None = None\n\n        if type(self.identity_provider) is IdentityProvider and mod_obj.__name__ != __name__:\n            # check for overridden get_current_user + default IdentityProvider\n            # deprecated way to override auth (e.g. JupyterHub < 3.0)\n            # allow deprecated, overridden get_current_user\n            warnings.warn(  # noqa\n                \"Overriding JupyterHandler.get_current_user is deprecated in jupyter-server 2.0.\"\n                \" Use an IdentityProvider class.\",\n                DeprecationWarning\n                # stacklevel not useful here\n            )\n            user = self.get_current_user()\n        else:\n            _user = self.identity_provider.get_user(self)\n            if isinstance(_user, Awaitable):\n                # IdentityProvider.get_user _may_ be async\n                _user = await _user\n            user = _user\n\n        # self.current_user for tornado's @web.authenticated\n        # self._jupyter_current_user for backward-compat in deprecated get_current_user calls\n        # and our own private checks for whether .current_user has been set\n        self.current_user = self._jupyter_current_user = user\n        # complete initial steps which require auth to resolve first:\n        self.set_cors_headers()\n        if self.request.method not in {\"GET\", \"HEAD\", \"OPTIONS\"}:\n            self.check_xsrf_cookie()\n        return super().prepare()\n\n    # ---------------------------------------------------------------\n    # template rendering\n    # ---------------------------------------------------------------\n\n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings[\"jinja2_env\"].get_template(name)\n\n    def render_template(self, name, **ns):\n        \"\"\"Render a template by name.\"\"\"\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n\n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            default_url=self.default_url,\n            ws_url=self.ws_url,\n            logged_in=self.logged_in,\n            allow_password_change=getattr(self.identity_provider, \"allow_password_change\", False),\n            auth_enabled=self.identity_provider.auth_enabled,\n            login_available=self.identity_provider.login_available,\n            token_available=bool(self.token),\n            static_url=self.static_url,\n            sys_info=json_sys_info(),\n            contents_js_source=self.contents_js_source,\n            version_hash=self.version_hash,\n            xsrf_form_html=self.xsrf_form_html,\n            token=self.token,\n            xsrf_token=self.xsrf_token.decode(\"utf8\"),\n            nbjs_translations=json.dumps(\n                combine_translations(self.request.headers.get(\"Accept-Language\", \"\"))\n            ),\n            **self.jinja_template_vars,\n        )\n\n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(\"utf-8\")\n        try:\n            model = json.loads(body)\n        except Exception as e:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, \"Invalid JSON in body of request\") from e\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get(\"exc_info\")\n        message = \"\"\n        status_message = responses.get(status_code, \"Unknown HTTP Error\")\n\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:  # noqa\n                pass\n\n            # construct the custom reason, if defined\n            reason = getattr(exception, \"reason\", \"\")\n            if reason:\n                status_message = reason\n        else:\n            exception = \"(unknown)\"\n\n        # build template namespace\n        ns = {\n            \"status_code\": status_code,\n            \"status_message\": status_message,\n            \"message\": message,\n            \"exception\": exception,\n        }\n\n        self.set_header(\"Content-Type\", \"text/html\")\n        # render the template\n        try:\n            html = self.render_template(\"%s.html\" % status_code, **ns)\n        except TemplateNotFound:\n            html = self.render_template(\"error.html\", **ns)\n\n        self.write(html)\n\n\nclass APIHandler(JupyterHandler):\n    \"\"\"Base class for API handlers\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare an API response.\"\"\"\n        await super().prepare()\n        if not self.check_origin():\n            raise web.HTTPError(404)\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"APIHandler errors are JSON, not human pages\"\"\"\n        self.set_header(\"Content-Type\", \"application/json\")\n        message = responses.get(status_code, \"Unknown HTTP Error\")\n        reply: dict = {\n            \"message\": message,\n        }\n        exc_info = kwargs.get(\"exc_info\")\n        if exc_info:\n            e = exc_info[1]\n            if isinstance(e, HTTPError):\n                reply[\"message\"] = e.log_message or message\n                reply[\"reason\"] = e.reason\n            else:\n                reply[\"message\"] = \"Unhandled error\"\n                reply[\"reason\"] = None\n                reply[\"traceback\"] = \"\".join(traceback.format_exception(*exc_info))\n        self.log.warning(\"wrote error: %r\", reply[\"message\"], exc_info=True)\n        self.finish(json.dumps(reply))\n\n    def get_login_url(self):\n        \"\"\"Get the login url.\"\"\"\n        # if get_login_url is invoked in an API handler,\n        # that means @web.authenticated is trying to trigger a redirect.\n        # instead of redirecting, raise 403 instead.\n        if not self.current_user:\n            raise web.HTTPError(403)\n        return super().get_login_url()\n\n    @property\n    def content_security_policy(self):\n        csp = \"; \".join(\n            [\n                super().content_security_policy,\n                \"default-src 'none'\",\n            ]\n        )\n        return csp\n\n    # set _track_activity = False on API handlers that shouldn't track activity\n    _track_activity = True\n\n    def update_api_activity(self):\n        \"\"\"Update last_activity of API requests\"\"\"\n        # record activity of authenticated requests\n        if (\n            self._track_activity\n            and getattr(self, \"_jupyter_current_user\", None)\n            and self.get_argument(\"no_track_activity\", None) is None\n        ):\n            self.settings[\"api_last_activity\"] = utcnow()\n\n    def finish(self, *args, **kwargs):\n        \"\"\"Finish an API response.\"\"\"\n        self.update_api_activity()\n        # Allow caller to indicate content-type...\n        set_content_type = kwargs.pop(\"set_content_type\", \"application/json\")\n        self.set_header(\"Content-Type\", set_content_type)\n        return super().finish(*args, **kwargs)\n\n    def options(self, *args, **kwargs):\n        \"\"\"Get the options.\"\"\"\n        if \"Access-Control-Allow-Headers\" in self.settings.get(\"headers\", {}):\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                self.settings[\"headers\"][\"Access-Control-Allow-Headers\"],\n            )\n        else:\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                \"accept, content-type, authorization, x-xsrftoken\",\n            )\n        self.set_header(\"Access-Control-Allow-Methods\", \"GET, PUT, POST, PATCH, DELETE, OPTIONS\")\n\n        # if authorization header is requested,\n        # that means the request is token-authenticated.\n        # avoid browser-side rejection of the preflight request.\n        # only allow this exception if allow_origin has not been specified\n        # and Jupyter server authentication is enabled.\n        # If the token is not valid, the 'real' request will still be rejected.\n        requested_headers = self.request.headers.get(\"Access-Control-Request-Headers\", \"\").split(\n            \",\"\n        )\n        if (\n            requested_headers\n            and any(h.strip().lower() == \"authorization\" for h in requested_headers)\n            and (\n                # FIXME: it would be even better to check specifically for token-auth,\n                # but there is currently no API for this.\n                self.login_available\n            )\n            and (\n                self.allow_origin\n                or self.allow_origin_pat\n                or \"Access-Control-Allow-Origin\" in self.settings.get(\"headers\", {})\n            )\n        ):\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))\n\n\nclass Template404(JupyterHandler):\n    \"\"\"Render our 404 template\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare a 404 response.\"\"\"\n        await super().prepare()\n        raise web.HTTPError(404)\n\n\nclass AuthenticatedFileHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    auth_resource = \"contents\"\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the Jupyter server.\n        return super().content_security_policy + \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    @authorized\n    def head(self, path):\n        \"\"\"Get the head response for a path.\"\"\"\n        self.check_xsrf_cookie()\n        return super().head(path)\n\n    @web.authenticated\n    @authorized\n    def get(self, path, **kwargs):\n        \"\"\"Get a file by path.\"\"\"\n        if os.path.splitext(path)[1] == \".ipynb\" or self.get_argument(\"download\", None):\n            name = path.rsplit(\"/\", 1)[-1]\n            self.set_attachment_header(name)\n\n        return web.StaticFileHandler.get(self, path, **kwargs)\n\n    def get_content_type(self):\n        \"\"\"Get the content type.\"\"\"\n        assert self.absolute_path is not None\n        path = self.absolute_path.strip(\"/\")\n        if \"/\" in path:\n            _, name = path.rsplit(\"/\", 1)\n        else:\n            name = path\n        if name.endswith(\".ipynb\"):\n            return \"application/x-ipynb+json\"\n        else:\n            cur_mime = mimetypes.guess_type(name)[0]\n            if cur_mime == \"text/plain\":\n                return \"text/plain; charset=UTF-8\"\n            else:\n                return super().get_content_type()\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments:\n            self.add_header(\"Cache-Control\", \"no-cache\")\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n\n        Requires tornado 3.1\n\n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super().validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        assert abs_path is not None\n        if not self.contents_manager.allow_hidden and is_hidden(abs_path, abs_root):\n            self.log.info(\n                \"Refusing to serve hidden file, via 404 Error, use flag 'ContentsManager.allow_hidden' to enable\"\n            )\n            raise web.HTTPError(404)\n        return abs_path\n\n\ndef json_errors(method):  # pragma: no cover\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n\n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n\n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n\n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    warnings.warn(\n        \"@json_errors is deprecated in notebook 5.2.0. Subclass APIHandler instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self.write_error = types.MethodType(APIHandler.write_error, self)\n        return method(self, *args, **kwargs)\n\n    return wrapper\n\n\n# -----------------------------------------------------------------------------\n# File handler\n# -----------------------------------------------------------------------------\n\n# to minimize subclass changes:\nHTTPError = web.HTTPError\n\n\nclass FileFindHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\n\n    The setting \"static_immutable_cache\" can be set up to serve some static\n    file as immutable (e.g. file name containing a hash). The setting is a\n    list of base URL, every static file URL starting with one of those will\n    be immutable.\n    \"\"\"\n\n    # cache search results, don't search for files more than once\n    _static_paths: dict = {}\n    root: tuple  # type:ignore[assignment]\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n\n        immutable_paths = self.settings.get(\"static_immutable_cache\", [])\n\n        # allow immutable cache for files\n        if any(self.request.path.startswith(path) for path in immutable_paths):\n            self.set_header(\"Cache-Control\", \"public, max-age=31536000, immutable\")\n\n        # disable browser caching, rely on 304 replies for savings\n        elif \"v\" not in self.request.arguments or any(\n            self.request.path.startswith(path) for path in self.no_cache_paths\n        ):\n            self.set_header(\"Cache-Control\", \"no-cache\")\n\n    def initialize(self, path, default_filename=None, no_cache_paths=None):\n        \"\"\"Initialize the file find handler.\"\"\"\n        self.no_cache_paths = no_cache_paths or []\n\n        if isinstance(path, str):\n            path = [path]\n\n        self.root = tuple(os.path.abspath(os.path.expanduser(p)) + os.sep for p in path)\n        self.default_filename = default_filename\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except OSError:\n                # IOError means not found\n                return \"\"\n\n            cls._static_paths[path] = abspath\n\n            log().debug(f\"Path {path} served from {abspath}\")\n            return abspath\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if not absolute_path:\n            raise web.HTTPError(404)\n\n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n\n        return super().validate_absolute_path(root, absolute_path)\n\n\nclass APIVersionHandler(APIHandler):\n    \"\"\"An API handler for the server version.\"\"\"\n\n    _track_activity = False\n\n    def get(self):\n        \"\"\"Get the server version info.\"\"\"\n        # not authenticated, so give as few info as possible\n        self.finish(json.dumps({\"version\": jupyter_server.__version__}))\n\n\nclass TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n\n    This should be the first, highest priority handler.\n    \"\"\"\n\n    def get(self):\n        \"\"\"Handle trailing slashes in a get.\"\"\"\n        assert self.request.uri is not None\n        path, *rest = self.request.uri.partition(\"?\")\n        # trim trailing *and* leading /\n        # to avoid misinterpreting repeated '//'\n        path = \"/\" + path.strip(\"/\")\n        new_uri = \"\".join([path, *rest])\n        self.redirect(new_uri)\n\n    post = put = get\n\n\nclass MainHandler(JupyterHandler):\n    \"\"\"Simple handler for base_url.\"\"\"\n\n    def get(self):\n        \"\"\"Get the main template.\"\"\"\n        html = self.render_template(\"main.html\")\n        self.write(html)\n\n    post = put = get\n\n\nclass FilesRedirectHandler(JupyterHandler):\n    \"\"\"Handler for redirecting relative URLs to the /files/ handler\"\"\"\n\n    @staticmethod\n    async def redirect_to_files(self, path):\n        \"\"\"make redirect logic a reusable static method\n\n        so it can be called from other handlers.\n        \"\"\"\n        cm = self.contents_manager\n        if await ensure_async(cm.dir_exists(path)):\n            # it's a *directory*, redirect to /tree\n            url = url_path_join(self.base_url, \"tree\", url_escape(path))\n        else:\n            orig_path = path\n            # otherwise, redirect to /files\n            parts = path.split(\"/\")\n\n            if not await ensure_async(cm.file_exists(path=path)) and \"files\" in parts:\n                # redirect without files/ iff it would 404\n                # this preserves pre-2.0-style 'files/' links\n                self.log.warning(\"Deprecated files/ URL: %s\", orig_path)\n                parts.remove(\"files\")\n                path = \"/\".join(parts)\n\n            if not await ensure_async(cm.file_exists(path=path)):\n                raise web.HTTPError(404)\n\n            url = url_path_join(self.base_url, \"files\", url_escape(path))\n        self.log.debug(\"Redirecting %s to %s\", self.request.path, url)\n        self.redirect(url)\n\n    def get(self, path=\"\"):\n        return self.redirect_to_files(self, path)\n\n\nclass RedirectWithParams(web.RequestHandler):\n    \"\"\"Sam as web.RedirectHandler, but preserves URL parameters\"\"\"\n\n    def initialize(self, url, permanent=True):\n        \"\"\"Initialize a redirect handler.\"\"\"\n        self._url = url\n        self._permanent = permanent\n\n    def get(self):\n        \"\"\"Get a redirect.\"\"\"\n        sep = \"&\" if \"?\" in self._url else \"?\"\n        url = sep.join([self._url, self.request.query])\n        self.redirect(url, permanent=self._permanent)\n\n\nclass PrometheusMetricsHandler(JupyterHandler):\n    \"\"\"\n    Return prometheus metrics for this server\n    \"\"\"\n\n    def get(self):\n        \"\"\"Get prometheus metrics.\"\"\"\n        if self.settings[\"authenticate_prometheus\"] and not self.logged_in:\n            raise web.HTTPError(403)\n\n        self.set_header(\"Content-Type\", prometheus_client.CONTENT_TYPE_LATEST)\n        self.write(prometheus_client.generate_latest(prometheus_client.REGISTRY))\n\n\n# -----------------------------------------------------------------------------\n# URL pattern fragments for re-use\n# -----------------------------------------------------------------------------\n\n# path matches any number of `/foo[/bar...]` or just `/` or ''\npath_regex = r\"(?P<path>(?:(?:/[^/]+)+|/?))\"\n\n# -----------------------------------------------------------------------------\n# URL to handler mappings\n# -----------------------------------------------------------------------------\n\n\ndefault_handlers = [\n    (r\".*/\", TrailingSlashHandler),\n    (r\"api\", APIVersionHandler),\n    (r\"/(robots\\.txt|favicon\\.ico)\", web.StaticFileHandler),\n    (r\"/metrics\", PrometheusMetricsHandler),\n]\n", "patch": "@@ -855,6 +855,7 @@ def head(self, path):\n     @authorized\n     def get(self, path, **kwargs):\n         \"\"\"Get a file by path.\"\"\"\n+        self.check_xsrf_cookie()\n         if os.path.splitext(path)[1] == \".ipynb\" or self.get_argument(\"download\", None):\n             name = path.rsplit(\"/\", 1)[-1]\n             self.set_attachment_header(name)", "file_path": "files/2023_8/115", "file_language": "py", "file_name": "jupyter_server/base/handlers.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def json_sys_info():\n    \"\"\"Get sys info as json.\"\"\"\n    global _sys_info_cache  # noqa\n    if _sys_info_cache is None:\n        _sys_info_cache = json.dumps(get_sys_info())\n    return _sys_info_cache", "target": 0}, {"function": "def log():\n    \"\"\"Get the application log.\"\"\"\n    if Application.initialized():\n        return Application.instance().log\n    else:\n        return app_log", "target": 0}, {"function": "class AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    @property\n    def base_url(self) -> str:\n        return self.settings.get(\"base_url\", \"/\")\n\n    @property\n    def content_security_policy(self):\n        \"\"\"The default Content-Security-Policy header\n\n        Can be overridden by defining Content-Security-Policy in settings['headers']\n        \"\"\"\n        if \"Content-Security-Policy\" in self.settings.get(\"headers\", {}):\n            # user-specified, don't override\n            return self.settings[\"headers\"][\"Content-Security-Policy\"]\n\n        return \"; \".join(\n            [\n                \"frame-ancestors 'self'\",\n                # Make sure the report-uri is relative to the base_url\n                \"report-uri \"\n                + self.settings.get(\"csp_report_uri\", url_path_join(self.base_url, csp_report_uri)),\n            ]\n        )\n\n    def set_default_headers(self):\n        \"\"\"Set the default headers.\"\"\"\n        headers = {}\n        headers[\"X-Content-Type-Options\"] = \"nosniff\"\n        headers.update(self.settings.get(\"headers\", {}))\n\n        headers[\"Content-Security-Policy\"] = self.content_security_policy\n\n        # Allow for overriding headers\n        for header_name, value in headers.items():\n            try:\n                self.set_header(header_name, value)\n            except Exception as e:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                self.log.exception(  # type:ignore[attr-defined]\n                    \"Could not set default headers: %s\", e\n                )\n\n    @property\n    def cookie_name(self):\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.get_cookie_name(self)\n\n    def force_clear_cookie(self, name, path=\"/\", domain=None):\n        \"\"\"Force a cookie clear.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider._force_clear_cookie(self, name, path=path, domain=domain)\n\n    def clear_login_cookie(self):\n        \"\"\"Clear a login cookie.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.clear_login_cookie(self)\n\n    def get_current_user(self):\n        \"\"\"Get the current user.\"\"\"\n        clsname = self.__class__.__name__\n        msg = (\n            f\"Calling `{clsname}.get_current_user()` directly is deprecated in jupyter-server 2.0.\"\n            \" Use `self.current_user` instead (works in all versions).\"\n        )\n        if hasattr(self, \"_jupyter_current_user\"):\n            # backward-compat: return _jupyter_current_user\n            warnings.warn(\n                msg,\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            return self._jupyter_current_user\n        # haven't called get_user in prepare, raise\n        raise RuntimeError(msg)\n\n    def skip_check_origin(self):\n        \"\"\"Ask my login_handler if I should skip the origin_check\n\n        For example: in the default LoginHandler, if a request is token-authenticated,\n        origin checking should be skipped.\n        \"\"\"\n        if self.request.method == \"OPTIONS\":\n            # no origin-check on options requests, which are used to check origins!\n            return True\n        return not self.identity_provider.should_check_origin(self)\n\n    @property\n    def token_authenticated(self):\n        \"\"\"Have I been authenticated with a token?\"\"\"\n        return self.identity_provider.is_token_authenticated(self)\n\n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\"\"\"\n        user = self.current_user\n        return user and user != \"anonymous\"\n\n    @property\n    def login_handler(self):\n        \"\"\"Return the login handler for this application, if any.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.login_handler_class\n\n    @property\n    def token(self):\n        \"\"\"Return the login token for this application, if any.\"\"\"\n        return self.identity_provider.token\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return self.identity_provider.login_available\n\n    @property\n    def authorizer(self):\n        if \"authorizer\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'authorizer' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an authorizer to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/\"\n                \"653740cbad7ce0c8a8752ce83e4d3c2c754b13cb/jupyter_server/serverapp.py\"\n                \"#L234-L256\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import AllowAllAuthorizer\n\n            self.settings[\"authorizer\"] = AllowAllAuthorizer(\n                config=self.settings.get(\"config\", None),\n                identity_provider=self.identity_provider,\n            )\n\n        return self.settings.get(\"authorizer\")\n\n    @property\n    def identity_provider(self):\n        if \"identity_provider\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'identity_provider' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an identity provider to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/v2.0.0/\"\n                \"jupyter_server/serverapp.py#L242\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import IdentityProvider\n\n            # no identity provider set, load default\n            self.settings[\"identity_provider\"] = IdentityProvider(\n                config=self.settings.get(\"config\", None)\n            )\n        return self.settings[\"identity_provider\"]", "target": 0}, {"function": "class JupyterHandler(AuthenticatedHandler):\n    \"\"\"Jupyter-specific extensions to authenticated handling\n\n    Mostly property shortcuts to Jupyter-specific settings.\n    \"\"\"\n\n    @property\n    def config(self):\n        return self.settings.get(\"config\", None)\n\n    @property\n    def log(self):\n        \"\"\"use the Jupyter log by default, falling back on tornado's logger\"\"\"\n        return log()\n\n    @property\n    def jinja_template_vars(self):\n        \"\"\"User-supplied values to supply to jinja templates.\"\"\"\n        return self.settings.get(\"jinja_template_vars\", {})\n\n    @property\n    def serverapp(self):\n        return self.settings[\"serverapp\"]\n\n    # ---------------------------------------------------------------\n    # URLs\n    # ---------------------------------------------------------------\n\n    @property\n    def version_hash(self):\n        \"\"\"The version hash to use for cache hints for static files\"\"\"\n        return self.settings.get(\"version_hash\", \"\")\n\n    @property\n    def mathjax_url(self):\n        url = self.settings.get(\"mathjax_url\", \"\")\n        if not url or url_is_absolute(url):\n            return url\n        return url_path_join(self.base_url, url)\n\n    @property\n    def mathjax_config(self):\n        return self.settings.get(\"mathjax_config\", \"TeX-AMS-MML_HTMLorMML-full,Safe\")\n\n    @property\n    def default_url(self):\n        return self.settings.get(\"default_url\", \"\")\n\n    @property\n    def ws_url(self):\n        return self.settings.get(\"websocket_url\", \"\")\n\n    @property\n    def contents_js_source(self):\n        self.log.debug(\n            \"Using contents: %s\",\n            self.settings.get(\"contents_js_source\", \"services/contents\"),\n        )\n        return self.settings.get(\"contents_js_source\", \"services/contents\")\n\n    # ---------------------------------------------------------------\n    # Manager objects\n    # ---------------------------------------------------------------\n\n    @property\n    def kernel_manager(self):\n        return self.settings[\"kernel_manager\"]\n\n    @property\n    def contents_manager(self):\n        return self.settings[\"contents_manager\"]\n\n    @property\n    def session_manager(self):\n        return self.settings[\"session_manager\"]\n\n    @property\n    def terminal_manager(self):\n        return self.settings[\"terminal_manager\"]\n\n    @property\n    def kernel_spec_manager(self):\n        return self.settings[\"kernel_spec_manager\"]\n\n    @property\n    def config_manager(self):\n        return self.settings[\"config_manager\"]\n\n    @property\n    def event_logger(self) -> EventLogger:\n        return self.settings[\"event_logger\"]\n\n    # ---------------------------------------------------------------\n    # CORS\n    # ---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get(\"allow_origin\", \"\")\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get(\"allow_origin_pat\", None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get(\"allow_credentials\", False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super().set_default_headers()\n\n    def set_cors_headers(self):\n        \"\"\"Add CORS headers, if defined\n\n        Now that current_user is async (jupyter-server 2.0),\n        must be called at the end of prepare(), instead of in set_default_headers.\n        \"\"\"\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and re.match(self.allow_origin_pat, origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        elif self.token_authenticated and \"Access-Control-Allow-Origin\" not in self.settings.get(\n            \"headers\", {}\n        ):\n            # allow token-authenticated requests cross-origin by default.\n            # only apply this exception if allow-origin has not been specified.\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))\n\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n\n    def set_attachment_header(self, filename):\n        \"\"\"Set Content-Disposition: attachment header\n\n        As a method to ensure handling of filename encoding\n        \"\"\"\n        escaped_filename = url_escape(filename)\n        self.set_header(\n            \"Content-Disposition\",\n            \"attachment;\"\n            \" filename*=utf-8''{utf8}\".format(\n                utf8=escaped_filename,\n            ),\n        )\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    # origin_to_satisfy_tornado is present because tornado requires\n    # check_origin to take an origin argument, but we don't use it\n    def check_origin(self, origin_to_satisfy_tornado=\"\"):\n        \"\"\"Check Origin for cross-site API requests, including websockets\n\n        Copied from WebSocket with changes:\n\n        - allow unspecified host/origin (e.g. scripts)\n        - allow token-authenticated requests\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        origin = self.request.headers.get(\"Origin\")\n\n        # If no header is provided, let the request through.\n        # Origin can be None for:\n        # - same-origin (IE, Firefox)\n        # - Cross-site POST form (IE, Firefox)\n        # - Scripts\n        # The cross-site POST (XSRF) case is handled by tornado's xsrf_token\n        if origin is None or host is None:\n            return True\n\n        origin = origin.lower()\n        origin_host = urlparse(origin).netloc\n\n        # OK if origin matches host\n        if origin_host == host:\n            return True\n\n        # Check CORS headers\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS headers deny the request\n            allow = False\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin API request for %s.  Origin: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_referer(self):\n        \"\"\"Check Referer for cross-site requests.\n        Disables requests to certain endpoints with\n        external or missing Referer.\n        If set, allow_origin settings are applied to the Referer\n        to whitelist specific cross-origin sites.\n        Used on GET for api endpoints and /files/\n        to block cross-site inclusion (XSSI).\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        referer = self.request.headers.get(\"Referer\")\n\n        if not host:\n            self.log.warning(\"Blocking request with no host\")\n            return False\n        if not referer:\n            self.log.warning(\"Blocking request with no referer\")\n            return False\n\n        referer_url = urlparse(referer)\n        referer_host = referer_url.netloc\n        if referer_host == host:\n            return True\n\n        # apply cross-origin checks to Referer:\n        origin = f\"{referer_url.scheme}://{referer_url.netloc}\"\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS settings, deny the request\n            allow = False\n\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin request for %s.  Referer: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_xsrf_cookie(self):\n        \"\"\"Bypass xsrf cookie checks when token-authenticated\"\"\"\n        if not hasattr(self, \"_jupyter_current_user\"):\n            # Called too early, will be checked later\n            return\n        if self.token_authenticated or self.settings.get(\"disable_check_xsrf\", False):\n            # Token-authenticated requests do not need additional XSRF-check\n            # Servers without authentication are vulnerable to XSRF\n            return\n        try:\n            return super().check_xsrf_cookie()\n        except web.HTTPError as e:\n            if self.request.method in {\"GET\", \"HEAD\"}:\n                # Consider Referer a sufficient cross-origin check for GET requests\n                if not self.check_referer():\n                    referer = self.request.headers.get(\"Referer\")\n                    if referer:\n                        msg = f\"Blocking Cross Origin request from {referer}.\"\n                    else:\n                        msg = \"Blocking request from unknown origin\"\n                    raise web.HTTPError(403, msg) from e\n            else:\n                raise\n\n    def check_host(self):\n        \"\"\"Check the host header if remote access disallowed.\n\n        Returns True if the request should continue, False otherwise.\n        \"\"\"\n        if self.settings.get(\"allow_remote_access\", False):\n            return True\n\n        # Remove port (e.g. ':8888') from host\n        match = re.match(r\"^(.*?)(:\\d+)?$\", self.request.host)\n        assert match is not None\n        host = match.group(1)\n\n        # Browsers format IPv6 addresses like [::1]; we need to remove the []\n        if host.startswith(\"[\") and host.endswith(\"]\"):\n            host = host[1:-1]\n\n        # UNIX socket handling\n        check_host = urldecode_unix_socket_path(host)\n        if check_host.startswith(\"/\") and os.path.exists(check_host):\n            allow = True\n        else:\n            try:\n                addr = ipaddress.ip_address(host)\n            except ValueError:\n                # Not an IP address: check against hostnames\n                allow = host in self.settings.get(\"local_hostnames\", [\"localhost\"])\n            else:\n                allow = addr.is_loopback\n\n        if not allow:\n            self.log.warning(\n                (\n                    \"Blocking request with non-local 'Host' %s (%s). \"\n                    \"If the server should be accessible at that name, \"\n                    \"set ServerApp.allow_remote_access to disable the check.\"\n                ),\n                host,\n                self.request.host,\n            )\n        return allow\n\n    async def prepare(self):\n        \"\"\"Pepare a response.\"\"\"\n        # Set the current Jupyter Handler context variable.\n        CallContext.set(CallContext.JUPYTER_HANDLER, self)\n\n        if not self.check_host():\n            self.current_user = self._jupyter_current_user = None\n            raise web.HTTPError(403)\n\n        from jupyter_server.auth import IdentityProvider\n\n        mod_obj = inspect.getmodule(self.get_current_user)\n        assert mod_obj is not None\n        user: User | None = None\n\n        if type(self.identity_provider) is IdentityProvider and mod_obj.__name__ != __name__:\n            # check for overridden get_current_user + default IdentityProvider\n            # deprecated way to override auth (e.g. JupyterHub < 3.0)\n            # allow deprecated, overridden get_current_user\n            warnings.warn(  # noqa\n                \"Overriding JupyterHandler.get_current_user is deprecated in jupyter-server 2.0.\"\n                \" Use an IdentityProvider class.\",\n                DeprecationWarning\n                # stacklevel not useful here\n            )\n            user = self.get_current_user()\n        else:\n            _user = self.identity_provider.get_user(self)\n            if isinstance(_user, Awaitable):\n                # IdentityProvider.get_user _may_ be async\n                _user = await _user\n            user = _user\n\n        # self.current_user for tornado's @web.authenticated\n        # self._jupyter_current_user for backward-compat in deprecated get_current_user calls\n        # and our own private checks for whether .current_user has been set\n        self.current_user = self._jupyter_current_user = user\n        # complete initial steps which require auth to resolve first:\n        self.set_cors_headers()\n        if self.request.method not in {\"GET\", \"HEAD\", \"OPTIONS\"}:\n            self.check_xsrf_cookie()\n        return super().prepare()\n\n    # ---------------------------------------------------------------\n    # template rendering\n    # ---------------------------------------------------------------\n\n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings[\"jinja2_env\"].get_template(name)\n\n    def render_template(self, name, **ns):\n        \"\"\"Render a template by name.\"\"\"\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n\n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            default_url=self.default_url,\n            ws_url=self.ws_url,\n            logged_in=self.logged_in,\n            allow_password_change=getattr(self.identity_provider, \"allow_password_change\", False),\n            auth_enabled=self.identity_provider.auth_enabled,\n            login_available=self.identity_provider.login_available,\n            token_available=bool(self.token),\n            static_url=self.static_url,\n            sys_info=json_sys_info(),\n            contents_js_source=self.contents_js_source,\n            version_hash=self.version_hash,\n            xsrf_form_html=self.xsrf_form_html,\n            token=self.token,\n            xsrf_token=self.xsrf_token.decode(\"utf8\"),\n            nbjs_translations=json.dumps(\n                combine_translations(self.request.headers.get(\"Accept-Language\", \"\"))\n            ),\n            **self.jinja_template_vars,\n        )\n\n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(\"utf-8\")\n        try:\n            model = json.loads(body)\n        except Exception as e:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, \"Invalid JSON in body of request\") from e\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get(\"exc_info\")\n        message = \"\"\n        status_message = responses.get(status_code, \"Unknown HTTP Error\")\n\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:  # noqa\n                pass\n\n            # construct the custom reason, if defined\n            reason = getattr(exception, \"reason\", \"\")\n            if reason:\n                status_message = reason\n        else:\n            exception = \"(unknown)\"\n\n        # build template namespace\n        ns = {\n            \"status_code\": status_code,\n            \"status_message\": status_message,\n            \"message\": message,\n            \"exception\": exception,\n        }\n\n        self.set_header(\"Content-Type\", \"text/html\")\n        # render the template\n        try:\n            html = self.render_template(\"%s.html\" % status_code, **ns)\n        except TemplateNotFound:\n            html = self.render_template(\"error.html\", **ns)\n\n        self.write(html)", "target": 0}, {"function": "class APIHandler(JupyterHandler):\n    \"\"\"Base class for API handlers\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare an API response.\"\"\"\n        await super().prepare()\n        if not self.check_origin():\n            raise web.HTTPError(404)\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"APIHandler errors are JSON, not human pages\"\"\"\n        self.set_header(\"Content-Type\", \"application/json\")\n        message = responses.get(status_code, \"Unknown HTTP Error\")\n        reply: dict = {\n            \"message\": message,\n        }\n        exc_info = kwargs.get(\"exc_info\")\n        if exc_info:\n            e = exc_info[1]\n            if isinstance(e, HTTPError):\n                reply[\"message\"] = e.log_message or message\n                reply[\"reason\"] = e.reason\n            else:\n                reply[\"message\"] = \"Unhandled error\"\n                reply[\"reason\"] = None\n                reply[\"traceback\"] = \"\".join(traceback.format_exception(*exc_info))\n        self.log.warning(\"wrote error: %r\", reply[\"message\"], exc_info=True)\n        self.finish(json.dumps(reply))\n\n    def get_login_url(self):\n        \"\"\"Get the login url.\"\"\"\n        # if get_login_url is invoked in an API handler,\n        # that means @web.authenticated is trying to trigger a redirect.\n        # instead of redirecting, raise 403 instead.\n        if not self.current_user:\n            raise web.HTTPError(403)\n        return super().get_login_url()\n\n    @property\n    def content_security_policy(self):\n        csp = \"; \".join(\n            [\n                super().content_security_policy,\n                \"default-src 'none'\",\n            ]\n        )\n        return csp\n\n    # set _track_activity = False on API handlers that shouldn't track activity\n    _track_activity = True\n\n    def update_api_activity(self):\n        \"\"\"Update last_activity of API requests\"\"\"\n        # record activity of authenticated requests\n        if (\n            self._track_activity\n            and getattr(self, \"_jupyter_current_user\", None)\n            and self.get_argument(\"no_track_activity\", None) is None\n        ):\n            self.settings[\"api_last_activity\"] = utcnow()\n\n    def finish(self, *args, **kwargs):\n        \"\"\"Finish an API response.\"\"\"\n        self.update_api_activity()\n        # Allow caller to indicate content-type...\n        set_content_type = kwargs.pop(\"set_content_type\", \"application/json\")\n        self.set_header(\"Content-Type\", set_content_type)\n        return super().finish(*args, **kwargs)\n\n    def options(self, *args, **kwargs):\n        \"\"\"Get the options.\"\"\"\n        if \"Access-Control-Allow-Headers\" in self.settings.get(\"headers\", {}):\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                self.settings[\"headers\"][\"Access-Control-Allow-Headers\"],\n            )\n        else:\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                \"accept, content-type, authorization, x-xsrftoken\",\n            )\n        self.set_header(\"Access-Control-Allow-Methods\", \"GET, PUT, POST, PATCH, DELETE, OPTIONS\")\n\n        # if authorization header is requested,\n        # that means the request is token-authenticated.\n        # avoid browser-side rejection of the preflight request.\n        # only allow this exception if allow_origin has not been specified\n        # and Jupyter server authentication is enabled.\n        # If the token is not valid, the 'real' request will still be rejected.\n        requested_headers = self.request.headers.get(\"Access-Control-Request-Headers\", \"\").split(\n            \",\"\n        )\n        if (\n            requested_headers\n            and any(h.strip().lower() == \"authorization\" for h in requested_headers)\n            and (\n                # FIXME: it would be even better to check specifically for token-auth,\n                # but there is currently no API for this.\n                self.login_available\n            )\n            and (\n                self.allow_origin\n                or self.allow_origin_pat\n                or \"Access-Control-Allow-Origin\" in self.settings.get(\"headers\", {})\n            )\n        ):\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))", "target": 0}, {"function": "class Template404(JupyterHandler):\n    \"\"\"Render our 404 template\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare a 404 response.\"\"\"\n        await super().prepare()\n        raise web.HTTPError(404)", "target": 0}, {"function": "class AuthenticatedFileHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    auth_resource = \"contents\"\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the Jupyter server.\n        return super().content_security_policy + \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    @authorized\n    def head(self, path):\n        \"\"\"Get the head response for a path.\"\"\"\n        self.check_xsrf_cookie()\n        return super().head(path)\n\n    @web.authenticated\n    @authorized\n    def get(self, path, **kwargs):\n        \"\"\"Get a file by path.\"\"\"\n        if os.path.splitext(path)[1] == \".ipynb\" or self.get_argument(\"download\", None):\n            name = path.rsplit(\"/\", 1)[-1]\n            self.set_attachment_header(name)\n\n        return web.StaticFileHandler.get(self, path, **kwargs)\n\n    def get_content_type(self):\n        \"\"\"Get the content type.\"\"\"\n        assert self.absolute_path is not None\n        path = self.absolute_path.strip(\"/\")\n        if \"/\" in path:\n            _, name = path.rsplit(\"/\", 1)\n        else:\n            name = path\n        if name.endswith(\".ipynb\"):\n            return \"application/x-ipynb+json\"\n        else:\n            cur_mime = mimetypes.guess_type(name)[0]\n            if cur_mime == \"text/plain\":\n                return \"text/plain; charset=UTF-8\"\n            else:\n                return super().get_content_type()\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments:\n            self.add_header(\"Cache-Control\", \"no-cache\")\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n\n        Requires tornado 3.1\n\n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super().validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        assert abs_path is not None\n        if not self.contents_manager.allow_hidden and is_hidden(abs_path, abs_root):\n            self.log.info(\n                \"Refusing to serve hidden file, via 404 Error, use flag 'ContentsManager.allow_hidden' to enable\"\n            )\n            raise web.HTTPError(404)\n        return abs_path", "target": 0}, {"function": "def json_errors(method):  # pragma: no cover\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n\n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n\n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n\n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    warnings.warn(\n        \"@json_errors is deprecated in notebook 5.2.0. Subclass APIHandler instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self.write_error = types.MethodType(APIHandler.write_error, self)\n        return method(self, *args, **kwargs)\n\n    return wrapper", "target": 0}, {"function": "class FileFindHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\n\n    The setting \"static_immutable_cache\" can be set up to serve some static\n    file as immutable (e.g. file name containing a hash). The setting is a\n    list of base URL, every static file URL starting with one of those will\n    be immutable.\n    \"\"\"\n\n    # cache search results, don't search for files more than once\n    _static_paths: dict = {}\n    root: tuple  # type:ignore[assignment]\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n\n        immutable_paths = self.settings.get(\"static_immutable_cache\", [])\n\n        # allow immutable cache for files\n        if any(self.request.path.startswith(path) for path in immutable_paths):\n            self.set_header(\"Cache-Control\", \"public, max-age=31536000, immutable\")\n\n        # disable browser caching, rely on 304 replies for savings\n        elif \"v\" not in self.request.arguments or any(\n            self.request.path.startswith(path) for path in self.no_cache_paths\n        ):\n            self.set_header(\"Cache-Control\", \"no-cache\")\n\n    def initialize(self, path, default_filename=None, no_cache_paths=None):\n        \"\"\"Initialize the file find handler.\"\"\"\n        self.no_cache_paths = no_cache_paths or []\n\n        if isinstance(path, str):\n            path = [path]\n\n        self.root = tuple(os.path.abspath(os.path.expanduser(p)) + os.sep for p in path)\n        self.default_filename = default_filename\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except OSError:\n                # IOError means not found\n                return \"\"\n\n            cls._static_paths[path] = abspath\n\n            log().debug(f\"Path {path} served from {abspath}\")\n            return abspath\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if not absolute_path:\n            raise web.HTTPError(404)\n\n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n\n        return super().validate_absolute_path(root, absolute_path)", "target": 0}, {"function": "class APIVersionHandler(APIHandler):\n    \"\"\"An API handler for the server version.\"\"\"\n\n    _track_activity = False\n\n    def get(self):\n        \"\"\"Get the server version info.\"\"\"\n        # not authenticated, so give as few info as possible\n        self.finish(json.dumps({\"version\": jupyter_server.__version__}))", "target": 0}, {"function": "class TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n\n    This should be the first, highest priority handler.\n    \"\"\"\n\n    def get(self):\n        \"\"\"Handle trailing slashes in a get.\"\"\"\n        assert self.request.uri is not None\n        path, *rest = self.request.uri.partition(\"?\")\n        # trim trailing *and* leading /\n        # to avoid misinterpreting repeated '//'\n        path = \"/\" + path.strip(\"/\")\n        new_uri = \"\".join([path, *rest])\n        self.redirect(new_uri)\n\n    post = put = get", "target": 0}, {"function": "class MainHandler(JupyterHandler):\n    \"\"\"Simple handler for base_url.\"\"\"\n\n    def get(self):\n        \"\"\"Get the main template.\"\"\"\n        html = self.render_template(\"main.html\")\n        self.write(html)\n\n    post = put = get", "target": 0}, {"function": "class FilesRedirectHandler(JupyterHandler):\n    \"\"\"Handler for redirecting relative URLs to the /files/ handler\"\"\"\n\n    @staticmethod\n    async def redirect_to_files(self, path):\n        \"\"\"make redirect logic a reusable static method\n\n        so it can be called from other handlers.\n        \"\"\"\n        cm = self.contents_manager\n        if await ensure_async(cm.dir_exists(path)):\n            # it's a *directory*, redirect to /tree\n            url = url_path_join(self.base_url, \"tree\", url_escape(path))\n        else:\n            orig_path = path\n            # otherwise, redirect to /files\n            parts = path.split(\"/\")\n\n            if not await ensure_async(cm.file_exists(path=path)) and \"files\" in parts:\n                # redirect without files/ iff it would 404\n                # this preserves pre-2.0-style 'files/' links\n                self.log.warning(\"Deprecated files/ URL: %s\", orig_path)\n                parts.remove(\"files\")\n                path = \"/\".join(parts)\n\n            if not await ensure_async(cm.file_exists(path=path)):\n                raise web.HTTPError(404)\n\n            url = url_path_join(self.base_url, \"files\", url_escape(path))\n        self.log.debug(\"Redirecting %s to %s\", self.request.path, url)\n        self.redirect(url)\n\n    def get(self, path=\"\"):\n        return self.redirect_to_files(self, path)", "target": 0}, {"function": "class RedirectWithParams(web.RequestHandler):\n    \"\"\"Sam as web.RedirectHandler, but preserves URL parameters\"\"\"\n\n    def initialize(self, url, permanent=True):\n        \"\"\"Initialize a redirect handler.\"\"\"\n        self._url = url\n        self._permanent = permanent\n\n    def get(self):\n        \"\"\"Get a redirect.\"\"\"\n        sep = \"&\" if \"?\" in self._url else \"?\"\n        url = sep.join([self._url, self.request.query])\n        self.redirect(url, permanent=self._permanent)", "target": 0}, {"function": "class PrometheusMetricsHandler(JupyterHandler):\n    \"\"\"\n    Return prometheus metrics for this server\n    \"\"\"\n\n    def get(self):\n        \"\"\"Get prometheus metrics.\"\"\"\n        if self.settings[\"authenticate_prometheus\"] and not self.logged_in:\n            raise web.HTTPError(403)\n\n        self.set_header(\"Content-Type\", prometheus_client.CONTENT_TYPE_LATEST)\n        self.write(prometheus_client.generate_latest(prometheus_client.REGISTRY))", "target": 0}], "function_after": [{"function": "def json_sys_info():\n    \"\"\"Get sys info as json.\"\"\"\n    global _sys_info_cache  # noqa\n    if _sys_info_cache is None:\n        _sys_info_cache = json.dumps(get_sys_info())\n    return _sys_info_cache", "target": 0}, {"function": "def log():\n    \"\"\"Get the application log.\"\"\"\n    if Application.initialized():\n        return Application.instance().log\n    else:\n        return app_log", "target": 0}, {"function": "class AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    @property\n    def base_url(self) -> str:\n        return self.settings.get(\"base_url\", \"/\")\n\n    @property\n    def content_security_policy(self):\n        \"\"\"The default Content-Security-Policy header\n\n        Can be overridden by defining Content-Security-Policy in settings['headers']\n        \"\"\"\n        if \"Content-Security-Policy\" in self.settings.get(\"headers\", {}):\n            # user-specified, don't override\n            return self.settings[\"headers\"][\"Content-Security-Policy\"]\n\n        return \"; \".join(\n            [\n                \"frame-ancestors 'self'\",\n                # Make sure the report-uri is relative to the base_url\n                \"report-uri \"\n                + self.settings.get(\"csp_report_uri\", url_path_join(self.base_url, csp_report_uri)),\n            ]\n        )\n\n    def set_default_headers(self):\n        \"\"\"Set the default headers.\"\"\"\n        headers = {}\n        headers[\"X-Content-Type-Options\"] = \"nosniff\"\n        headers.update(self.settings.get(\"headers\", {}))\n\n        headers[\"Content-Security-Policy\"] = self.content_security_policy\n\n        # Allow for overriding headers\n        for header_name, value in headers.items():\n            try:\n                self.set_header(header_name, value)\n            except Exception as e:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                self.log.exception(  # type:ignore[attr-defined]\n                    \"Could not set default headers: %s\", e\n                )\n\n    @property\n    def cookie_name(self):\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.get_cookie_name(self)\n\n    def force_clear_cookie(self, name, path=\"/\", domain=None):\n        \"\"\"Force a cookie clear.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider._force_clear_cookie(self, name, path=path, domain=domain)\n\n    def clear_login_cookie(self):\n        \"\"\"Clear a login cookie.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.clear_login_cookie(self)\n\n    def get_current_user(self):\n        \"\"\"Get the current user.\"\"\"\n        clsname = self.__class__.__name__\n        msg = (\n            f\"Calling `{clsname}.get_current_user()` directly is deprecated in jupyter-server 2.0.\"\n            \" Use `self.current_user` instead (works in all versions).\"\n        )\n        if hasattr(self, \"_jupyter_current_user\"):\n            # backward-compat: return _jupyter_current_user\n            warnings.warn(\n                msg,\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            return self._jupyter_current_user\n        # haven't called get_user in prepare, raise\n        raise RuntimeError(msg)\n\n    def skip_check_origin(self):\n        \"\"\"Ask my login_handler if I should skip the origin_check\n\n        For example: in the default LoginHandler, if a request is token-authenticated,\n        origin checking should be skipped.\n        \"\"\"\n        if self.request.method == \"OPTIONS\":\n            # no origin-check on options requests, which are used to check origins!\n            return True\n        return not self.identity_provider.should_check_origin(self)\n\n    @property\n    def token_authenticated(self):\n        \"\"\"Have I been authenticated with a token?\"\"\"\n        return self.identity_provider.is_token_authenticated(self)\n\n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\"\"\"\n        user = self.current_user\n        return user and user != \"anonymous\"\n\n    @property\n    def login_handler(self):\n        \"\"\"Return the login handler for this application, if any.\"\"\"\n        warnings.warn(\n            \"\"\"JupyterHandler.login_handler is deprecated in 2.0,\n            use JupyterHandler.identity_provider.\n            \"\"\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.identity_provider.login_handler_class\n\n    @property\n    def token(self):\n        \"\"\"Return the login token for this application, if any.\"\"\"\n        return self.identity_provider.token\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return self.identity_provider.login_available\n\n    @property\n    def authorizer(self):\n        if \"authorizer\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'authorizer' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an authorizer to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/\"\n                \"653740cbad7ce0c8a8752ce83e4d3c2c754b13cb/jupyter_server/serverapp.py\"\n                \"#L234-L256\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import AllowAllAuthorizer\n\n            self.settings[\"authorizer\"] = AllowAllAuthorizer(\n                config=self.settings.get(\"config\", None),\n                identity_provider=self.identity_provider,\n            )\n\n        return self.settings.get(\"authorizer\")\n\n    @property\n    def identity_provider(self):\n        if \"identity_provider\" not in self.settings:\n            warnings.warn(\n                \"The Tornado web application does not have an 'identity_provider' defined \"\n                \"in its settings. In future releases of jupyter_server, this will \"\n                \"be a required key for all subclasses of `JupyterHandler`. For an \"\n                \"example, see the jupyter_server source code for how to \"\n                \"add an identity provider to the tornado settings: \"\n                \"https://github.com/jupyter-server/jupyter_server/blob/v2.0.0/\"\n                \"jupyter_server/serverapp.py#L242\",\n                stacklevel=2,\n            )\n            from jupyter_server.auth import IdentityProvider\n\n            # no identity provider set, load default\n            self.settings[\"identity_provider\"] = IdentityProvider(\n                config=self.settings.get(\"config\", None)\n            )\n        return self.settings[\"identity_provider\"]", "target": 0}, {"function": "class JupyterHandler(AuthenticatedHandler):\n    \"\"\"Jupyter-specific extensions to authenticated handling\n\n    Mostly property shortcuts to Jupyter-specific settings.\n    \"\"\"\n\n    @property\n    def config(self):\n        return self.settings.get(\"config\", None)\n\n    @property\n    def log(self):\n        \"\"\"use the Jupyter log by default, falling back on tornado's logger\"\"\"\n        return log()\n\n    @property\n    def jinja_template_vars(self):\n        \"\"\"User-supplied values to supply to jinja templates.\"\"\"\n        return self.settings.get(\"jinja_template_vars\", {})\n\n    @property\n    def serverapp(self):\n        return self.settings[\"serverapp\"]\n\n    # ---------------------------------------------------------------\n    # URLs\n    # ---------------------------------------------------------------\n\n    @property\n    def version_hash(self):\n        \"\"\"The version hash to use for cache hints for static files\"\"\"\n        return self.settings.get(\"version_hash\", \"\")\n\n    @property\n    def mathjax_url(self):\n        url = self.settings.get(\"mathjax_url\", \"\")\n        if not url or url_is_absolute(url):\n            return url\n        return url_path_join(self.base_url, url)\n\n    @property\n    def mathjax_config(self):\n        return self.settings.get(\"mathjax_config\", \"TeX-AMS-MML_HTMLorMML-full,Safe\")\n\n    @property\n    def default_url(self):\n        return self.settings.get(\"default_url\", \"\")\n\n    @property\n    def ws_url(self):\n        return self.settings.get(\"websocket_url\", \"\")\n\n    @property\n    def contents_js_source(self):\n        self.log.debug(\n            \"Using contents: %s\",\n            self.settings.get(\"contents_js_source\", \"services/contents\"),\n        )\n        return self.settings.get(\"contents_js_source\", \"services/contents\")\n\n    # ---------------------------------------------------------------\n    # Manager objects\n    # ---------------------------------------------------------------\n\n    @property\n    def kernel_manager(self):\n        return self.settings[\"kernel_manager\"]\n\n    @property\n    def contents_manager(self):\n        return self.settings[\"contents_manager\"]\n\n    @property\n    def session_manager(self):\n        return self.settings[\"session_manager\"]\n\n    @property\n    def terminal_manager(self):\n        return self.settings[\"terminal_manager\"]\n\n    @property\n    def kernel_spec_manager(self):\n        return self.settings[\"kernel_spec_manager\"]\n\n    @property\n    def config_manager(self):\n        return self.settings[\"config_manager\"]\n\n    @property\n    def event_logger(self) -> EventLogger:\n        return self.settings[\"event_logger\"]\n\n    # ---------------------------------------------------------------\n    # CORS\n    # ---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get(\"allow_origin\", \"\")\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get(\"allow_origin_pat\", None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get(\"allow_credentials\", False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super().set_default_headers()\n\n    def set_cors_headers(self):\n        \"\"\"Add CORS headers, if defined\n\n        Now that current_user is async (jupyter-server 2.0),\n        must be called at the end of prepare(), instead of in set_default_headers.\n        \"\"\"\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and re.match(self.allow_origin_pat, origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        elif self.token_authenticated and \"Access-Control-Allow-Origin\" not in self.settings.get(\n            \"headers\", {}\n        ):\n            # allow token-authenticated requests cross-origin by default.\n            # only apply this exception if allow-origin has not been specified.\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))\n\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n\n    def set_attachment_header(self, filename):\n        \"\"\"Set Content-Disposition: attachment header\n\n        As a method to ensure handling of filename encoding\n        \"\"\"\n        escaped_filename = url_escape(filename)\n        self.set_header(\n            \"Content-Disposition\",\n            \"attachment;\"\n            \" filename*=utf-8''{utf8}\".format(\n                utf8=escaped_filename,\n            ),\n        )\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    # origin_to_satisfy_tornado is present because tornado requires\n    # check_origin to take an origin argument, but we don't use it\n    def check_origin(self, origin_to_satisfy_tornado=\"\"):\n        \"\"\"Check Origin for cross-site API requests, including websockets\n\n        Copied from WebSocket with changes:\n\n        - allow unspecified host/origin (e.g. scripts)\n        - allow token-authenticated requests\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        origin = self.request.headers.get(\"Origin\")\n\n        # If no header is provided, let the request through.\n        # Origin can be None for:\n        # - same-origin (IE, Firefox)\n        # - Cross-site POST form (IE, Firefox)\n        # - Scripts\n        # The cross-site POST (XSRF) case is handled by tornado's xsrf_token\n        if origin is None or host is None:\n            return True\n\n        origin = origin.lower()\n        origin_host = urlparse(origin).netloc\n\n        # OK if origin matches host\n        if origin_host == host:\n            return True\n\n        # Check CORS headers\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS headers deny the request\n            allow = False\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin API request for %s.  Origin: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_referer(self):\n        \"\"\"Check Referer for cross-site requests.\n        Disables requests to certain endpoints with\n        external or missing Referer.\n        If set, allow_origin settings are applied to the Referer\n        to whitelist specific cross-origin sites.\n        Used on GET for api endpoints and /files/\n        to block cross-site inclusion (XSSI).\n        \"\"\"\n        if self.allow_origin == \"*\" or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        referer = self.request.headers.get(\"Referer\")\n\n        if not host:\n            self.log.warning(\"Blocking request with no host\")\n            return False\n        if not referer:\n            self.log.warning(\"Blocking request with no referer\")\n            return False\n\n        referer_url = urlparse(referer)\n        referer_host = referer_url.netloc\n        if referer_host == host:\n            return True\n\n        # apply cross-origin checks to Referer:\n        origin = f\"{referer_url.scheme}://{referer_url.netloc}\"\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(re.match(self.allow_origin_pat, origin))\n        else:\n            # No CORS settings, deny the request\n            allow = False\n\n        if not allow:\n            self.log.warning(\n                \"Blocking Cross Origin request for %s.  Referer: %s, Host: %s\",\n                self.request.path,\n                origin,\n                host,\n            )\n        return allow\n\n    def check_xsrf_cookie(self):\n        \"\"\"Bypass xsrf cookie checks when token-authenticated\"\"\"\n        if not hasattr(self, \"_jupyter_current_user\"):\n            # Called too early, will be checked later\n            return\n        if self.token_authenticated or self.settings.get(\"disable_check_xsrf\", False):\n            # Token-authenticated requests do not need additional XSRF-check\n            # Servers without authentication are vulnerable to XSRF\n            return\n        try:\n            return super().check_xsrf_cookie()\n        except web.HTTPError as e:\n            if self.request.method in {\"GET\", \"HEAD\"}:\n                # Consider Referer a sufficient cross-origin check for GET requests\n                if not self.check_referer():\n                    referer = self.request.headers.get(\"Referer\")\n                    if referer:\n                        msg = f\"Blocking Cross Origin request from {referer}.\"\n                    else:\n                        msg = \"Blocking request from unknown origin\"\n                    raise web.HTTPError(403, msg) from e\n            else:\n                raise\n\n    def check_host(self):\n        \"\"\"Check the host header if remote access disallowed.\n\n        Returns True if the request should continue, False otherwise.\n        \"\"\"\n        if self.settings.get(\"allow_remote_access\", False):\n            return True\n\n        # Remove port (e.g. ':8888') from host\n        match = re.match(r\"^(.*?)(:\\d+)?$\", self.request.host)\n        assert match is not None\n        host = match.group(1)\n\n        # Browsers format IPv6 addresses like [::1]; we need to remove the []\n        if host.startswith(\"[\") and host.endswith(\"]\"):\n            host = host[1:-1]\n\n        # UNIX socket handling\n        check_host = urldecode_unix_socket_path(host)\n        if check_host.startswith(\"/\") and os.path.exists(check_host):\n            allow = True\n        else:\n            try:\n                addr = ipaddress.ip_address(host)\n            except ValueError:\n                # Not an IP address: check against hostnames\n                allow = host in self.settings.get(\"local_hostnames\", [\"localhost\"])\n            else:\n                allow = addr.is_loopback\n\n        if not allow:\n            self.log.warning(\n                (\n                    \"Blocking request with non-local 'Host' %s (%s). \"\n                    \"If the server should be accessible at that name, \"\n                    \"set ServerApp.allow_remote_access to disable the check.\"\n                ),\n                host,\n                self.request.host,\n            )\n        return allow\n\n    async def prepare(self):\n        \"\"\"Pepare a response.\"\"\"\n        # Set the current Jupyter Handler context variable.\n        CallContext.set(CallContext.JUPYTER_HANDLER, self)\n\n        if not self.check_host():\n            self.current_user = self._jupyter_current_user = None\n            raise web.HTTPError(403)\n\n        from jupyter_server.auth import IdentityProvider\n\n        mod_obj = inspect.getmodule(self.get_current_user)\n        assert mod_obj is not None\n        user: User | None = None\n\n        if type(self.identity_provider) is IdentityProvider and mod_obj.__name__ != __name__:\n            # check for overridden get_current_user + default IdentityProvider\n            # deprecated way to override auth (e.g. JupyterHub < 3.0)\n            # allow deprecated, overridden get_current_user\n            warnings.warn(  # noqa\n                \"Overriding JupyterHandler.get_current_user is deprecated in jupyter-server 2.0.\"\n                \" Use an IdentityProvider class.\",\n                DeprecationWarning\n                # stacklevel not useful here\n            )\n            user = self.get_current_user()\n        else:\n            _user = self.identity_provider.get_user(self)\n            if isinstance(_user, Awaitable):\n                # IdentityProvider.get_user _may_ be async\n                _user = await _user\n            user = _user\n\n        # self.current_user for tornado's @web.authenticated\n        # self._jupyter_current_user for backward-compat in deprecated get_current_user calls\n        # and our own private checks for whether .current_user has been set\n        self.current_user = self._jupyter_current_user = user\n        # complete initial steps which require auth to resolve first:\n        self.set_cors_headers()\n        if self.request.method not in {\"GET\", \"HEAD\", \"OPTIONS\"}:\n            self.check_xsrf_cookie()\n        return super().prepare()\n\n    # ---------------------------------------------------------------\n    # template rendering\n    # ---------------------------------------------------------------\n\n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings[\"jinja2_env\"].get_template(name)\n\n    def render_template(self, name, **ns):\n        \"\"\"Render a template by name.\"\"\"\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n\n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            default_url=self.default_url,\n            ws_url=self.ws_url,\n            logged_in=self.logged_in,\n            allow_password_change=getattr(self.identity_provider, \"allow_password_change\", False),\n            auth_enabled=self.identity_provider.auth_enabled,\n            login_available=self.identity_provider.login_available,\n            token_available=bool(self.token),\n            static_url=self.static_url,\n            sys_info=json_sys_info(),\n            contents_js_source=self.contents_js_source,\n            version_hash=self.version_hash,\n            xsrf_form_html=self.xsrf_form_html,\n            token=self.token,\n            xsrf_token=self.xsrf_token.decode(\"utf8\"),\n            nbjs_translations=json.dumps(\n                combine_translations(self.request.headers.get(\"Accept-Language\", \"\"))\n            ),\n            **self.jinja_template_vars,\n        )\n\n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(\"utf-8\")\n        try:\n            model = json.loads(body)\n        except Exception as e:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, \"Invalid JSON in body of request\") from e\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get(\"exc_info\")\n        message = \"\"\n        status_message = responses.get(status_code, \"Unknown HTTP Error\")\n\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:  # noqa\n                pass\n\n            # construct the custom reason, if defined\n            reason = getattr(exception, \"reason\", \"\")\n            if reason:\n                status_message = reason\n        else:\n            exception = \"(unknown)\"\n\n        # build template namespace\n        ns = {\n            \"status_code\": status_code,\n            \"status_message\": status_message,\n            \"message\": message,\n            \"exception\": exception,\n        }\n\n        self.set_header(\"Content-Type\", \"text/html\")\n        # render the template\n        try:\n            html = self.render_template(\"%s.html\" % status_code, **ns)\n        except TemplateNotFound:\n            html = self.render_template(\"error.html\", **ns)\n\n        self.write(html)", "target": 0}, {"function": "class APIHandler(JupyterHandler):\n    \"\"\"Base class for API handlers\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare an API response.\"\"\"\n        await super().prepare()\n        if not self.check_origin():\n            raise web.HTTPError(404)\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"APIHandler errors are JSON, not human pages\"\"\"\n        self.set_header(\"Content-Type\", \"application/json\")\n        message = responses.get(status_code, \"Unknown HTTP Error\")\n        reply: dict = {\n            \"message\": message,\n        }\n        exc_info = kwargs.get(\"exc_info\")\n        if exc_info:\n            e = exc_info[1]\n            if isinstance(e, HTTPError):\n                reply[\"message\"] = e.log_message or message\n                reply[\"reason\"] = e.reason\n            else:\n                reply[\"message\"] = \"Unhandled error\"\n                reply[\"reason\"] = None\n                reply[\"traceback\"] = \"\".join(traceback.format_exception(*exc_info))\n        self.log.warning(\"wrote error: %r\", reply[\"message\"], exc_info=True)\n        self.finish(json.dumps(reply))\n\n    def get_login_url(self):\n        \"\"\"Get the login url.\"\"\"\n        # if get_login_url is invoked in an API handler,\n        # that means @web.authenticated is trying to trigger a redirect.\n        # instead of redirecting, raise 403 instead.\n        if not self.current_user:\n            raise web.HTTPError(403)\n        return super().get_login_url()\n\n    @property\n    def content_security_policy(self):\n        csp = \"; \".join(\n            [\n                super().content_security_policy,\n                \"default-src 'none'\",\n            ]\n        )\n        return csp\n\n    # set _track_activity = False on API handlers that shouldn't track activity\n    _track_activity = True\n\n    def update_api_activity(self):\n        \"\"\"Update last_activity of API requests\"\"\"\n        # record activity of authenticated requests\n        if (\n            self._track_activity\n            and getattr(self, \"_jupyter_current_user\", None)\n            and self.get_argument(\"no_track_activity\", None) is None\n        ):\n            self.settings[\"api_last_activity\"] = utcnow()\n\n    def finish(self, *args, **kwargs):\n        \"\"\"Finish an API response.\"\"\"\n        self.update_api_activity()\n        # Allow caller to indicate content-type...\n        set_content_type = kwargs.pop(\"set_content_type\", \"application/json\")\n        self.set_header(\"Content-Type\", set_content_type)\n        return super().finish(*args, **kwargs)\n\n    def options(self, *args, **kwargs):\n        \"\"\"Get the options.\"\"\"\n        if \"Access-Control-Allow-Headers\" in self.settings.get(\"headers\", {}):\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                self.settings[\"headers\"][\"Access-Control-Allow-Headers\"],\n            )\n        else:\n            self.set_header(\n                \"Access-Control-Allow-Headers\",\n                \"accept, content-type, authorization, x-xsrftoken\",\n            )\n        self.set_header(\"Access-Control-Allow-Methods\", \"GET, PUT, POST, PATCH, DELETE, OPTIONS\")\n\n        # if authorization header is requested,\n        # that means the request is token-authenticated.\n        # avoid browser-side rejection of the preflight request.\n        # only allow this exception if allow_origin has not been specified\n        # and Jupyter server authentication is enabled.\n        # If the token is not valid, the 'real' request will still be rejected.\n        requested_headers = self.request.headers.get(\"Access-Control-Request-Headers\", \"\").split(\n            \",\"\n        )\n        if (\n            requested_headers\n            and any(h.strip().lower() == \"authorization\" for h in requested_headers)\n            and (\n                # FIXME: it would be even better to check specifically for token-auth,\n                # but there is currently no API for this.\n                self.login_available\n            )\n            and (\n                self.allow_origin\n                or self.allow_origin_pat\n                or \"Access-Control-Allow-Origin\" in self.settings.get(\"headers\", {})\n            )\n        ):\n            self.set_header(\"Access-Control-Allow-Origin\", self.request.headers.get(\"Origin\", \"\"))", "target": 0}, {"function": "class Template404(JupyterHandler):\n    \"\"\"Render our 404 template\"\"\"\n\n    async def prepare(self):\n        \"\"\"Prepare a 404 response.\"\"\"\n        await super().prepare()\n        raise web.HTTPError(404)", "target": 0}, {"function": "class AuthenticatedFileHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    auth_resource = \"contents\"\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the Jupyter server.\n        return super().content_security_policy + \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    @authorized\n    def head(self, path):\n        \"\"\"Get the head response for a path.\"\"\"\n        self.check_xsrf_cookie()\n        return super().head(path)\n\n    @web.authenticated\n    @authorized\n    def get(self, path, **kwargs):\n        \"\"\"Get a file by path.\"\"\"\n        self.check_xsrf_cookie()\n        if os.path.splitext(path)[1] == \".ipynb\" or self.get_argument(\"download\", None):\n            name = path.rsplit(\"/\", 1)[-1]\n            self.set_attachment_header(name)\n\n        return web.StaticFileHandler.get(self, path, **kwargs)\n\n    def get_content_type(self):\n        \"\"\"Get the content type.\"\"\"\n        assert self.absolute_path is not None\n        path = self.absolute_path.strip(\"/\")\n        if \"/\" in path:\n            _, name = path.rsplit(\"/\", 1)\n        else:\n            name = path\n        if name.endswith(\".ipynb\"):\n            return \"application/x-ipynb+json\"\n        else:\n            cur_mime = mimetypes.guess_type(name)[0]\n            if cur_mime == \"text/plain\":\n                return \"text/plain; charset=UTF-8\"\n            else:\n                return super().get_content_type()\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments:\n            self.add_header(\"Cache-Control\", \"no-cache\")\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n\n        Requires tornado 3.1\n\n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super().validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        assert abs_path is not None\n        if not self.contents_manager.allow_hidden and is_hidden(abs_path, abs_root):\n            self.log.info(\n                \"Refusing to serve hidden file, via 404 Error, use flag 'ContentsManager.allow_hidden' to enable\"\n            )\n            raise web.HTTPError(404)\n        return abs_path", "target": 0}, {"function": "def json_errors(method):  # pragma: no cover\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n\n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n\n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n\n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    warnings.warn(\n        \"@json_errors is deprecated in notebook 5.2.0. Subclass APIHandler instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self.write_error = types.MethodType(APIHandler.write_error, self)\n        return method(self, *args, **kwargs)\n\n    return wrapper", "target": 0}, {"function": "class FileFindHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\n\n    The setting \"static_immutable_cache\" can be set up to serve some static\n    file as immutable (e.g. file name containing a hash). The setting is a\n    list of base URL, every static file URL starting with one of those will\n    be immutable.\n    \"\"\"\n\n    # cache search results, don't search for files more than once\n    _static_paths: dict = {}\n    root: tuple  # type:ignore[assignment]\n\n    def set_headers(self):\n        \"\"\"Set the headers.\"\"\"\n        super().set_headers()\n\n        immutable_paths = self.settings.get(\"static_immutable_cache\", [])\n\n        # allow immutable cache for files\n        if any(self.request.path.startswith(path) for path in immutable_paths):\n            self.set_header(\"Cache-Control\", \"public, max-age=31536000, immutable\")\n\n        # disable browser caching, rely on 304 replies for savings\n        elif \"v\" not in self.request.arguments or any(\n            self.request.path.startswith(path) for path in self.no_cache_paths\n        ):\n            self.set_header(\"Cache-Control\", \"no-cache\")\n\n    def initialize(self, path, default_filename=None, no_cache_paths=None):\n        \"\"\"Initialize the file find handler.\"\"\"\n        self.no_cache_paths = no_cache_paths or []\n\n        if isinstance(path, str):\n            path = [path]\n\n        self.root = tuple(os.path.abspath(os.path.expanduser(p)) + os.sep for p in path)\n        self.default_filename = default_filename\n\n    def compute_etag(self):\n        \"\"\"Compute the etag.\"\"\"\n        return None\n\n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except OSError:\n                # IOError means not found\n                return \"\"\n\n            cls._static_paths[path] = abspath\n\n            log().debug(f\"Path {path} served from {abspath}\")\n            return abspath\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if not absolute_path:\n            raise web.HTTPError(404)\n\n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n\n        return super().validate_absolute_path(root, absolute_path)", "target": 0}, {"function": "class APIVersionHandler(APIHandler):\n    \"\"\"An API handler for the server version.\"\"\"\n\n    _track_activity = False\n\n    def get(self):\n        \"\"\"Get the server version info.\"\"\"\n        # not authenticated, so give as few info as possible\n        self.finish(json.dumps({\"version\": jupyter_server.__version__}))", "target": 0}, {"function": "class TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n\n    This should be the first, highest priority handler.\n    \"\"\"\n\n    def get(self):\n        \"\"\"Handle trailing slashes in a get.\"\"\"\n        assert self.request.uri is not None\n        path, *rest = self.request.uri.partition(\"?\")\n        # trim trailing *and* leading /\n        # to avoid misinterpreting repeated '//'\n        path = \"/\" + path.strip(\"/\")\n        new_uri = \"\".join([path, *rest])\n        self.redirect(new_uri)\n\n    post = put = get", "target": 0}, {"function": "class MainHandler(JupyterHandler):\n    \"\"\"Simple handler for base_url.\"\"\"\n\n    def get(self):\n        \"\"\"Get the main template.\"\"\"\n        html = self.render_template(\"main.html\")\n        self.write(html)\n\n    post = put = get", "target": 0}, {"function": "class FilesRedirectHandler(JupyterHandler):\n    \"\"\"Handler for redirecting relative URLs to the /files/ handler\"\"\"\n\n    @staticmethod\n    async def redirect_to_files(self, path):\n        \"\"\"make redirect logic a reusable static method\n\n        so it can be called from other handlers.\n        \"\"\"\n        cm = self.contents_manager\n        if await ensure_async(cm.dir_exists(path)):\n            # it's a *directory*, redirect to /tree\n            url = url_path_join(self.base_url, \"tree\", url_escape(path))\n        else:\n            orig_path = path\n            # otherwise, redirect to /files\n            parts = path.split(\"/\")\n\n            if not await ensure_async(cm.file_exists(path=path)) and \"files\" in parts:\n                # redirect without files/ iff it would 404\n                # this preserves pre-2.0-style 'files/' links\n                self.log.warning(\"Deprecated files/ URL: %s\", orig_path)\n                parts.remove(\"files\")\n                path = \"/\".join(parts)\n\n            if not await ensure_async(cm.file_exists(path=path)):\n                raise web.HTTPError(404)\n\n            url = url_path_join(self.base_url, \"files\", url_escape(path))\n        self.log.debug(\"Redirecting %s to %s\", self.request.path, url)\n        self.redirect(url)\n\n    def get(self, path=\"\"):\n        return self.redirect_to_files(self, path)", "target": 0}, {"function": "class RedirectWithParams(web.RequestHandler):\n    \"\"\"Sam as web.RedirectHandler, but preserves URL parameters\"\"\"\n\n    def initialize(self, url, permanent=True):\n        \"\"\"Initialize a redirect handler.\"\"\"\n        self._url = url\n        self._permanent = permanent\n\n    def get(self):\n        \"\"\"Get a redirect.\"\"\"\n        sep = \"&\" if \"?\" in self._url else \"?\"\n        url = sep.join([self._url, self.request.query])\n        self.redirect(url, permanent=self._permanent)", "target": 0}, {"function": "class PrometheusMetricsHandler(JupyterHandler):\n    \"\"\"\n    Return prometheus metrics for this server\n    \"\"\"\n\n    def get(self):\n        \"\"\"Get prometheus metrics.\"\"\"\n        if self.settings[\"authenticate_prometheus\"] and not self.logged_in:\n            raise web.HTTPError(403)\n\n        self.set_header(\"Content-Type\", prometheus_client.CONTENT_TYPE_LATEST)\n        self.write(prometheus_client.generate_latest(prometheus_client.REGISTRY))", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
