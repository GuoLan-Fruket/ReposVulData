{"index": 426, "cve_id": "CVE-2013-4249", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Cross-site scripting (XSS) vulnerability in the AdminURLFieldWidget widget in contrib/admin/widgets.py in Django 1.5.x before 1.5.2 and 1.6.x before 1.6 beta 2 allows remote attackers to inject arbitrary web script or HTML via a URLField.", "cvss": "3.7", "publish_date": "October 4, 2013", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "NONE", "I": "LOW", "A": "NONE", "commit_id": "cbe6d5568f4f5053ed7228ca3c3d0cce77cf9560", "commit_message": "Apply autoescaping to AdminURLFieldWidget.\n\nThis is a security fix; disclosure to follow shortly.", "commit_date": "2013-08-13T16:06:41Z", "project": "django/django", "url": "https://api.github.com/repos/django/django/commits/cbe6d5568f4f5053ed7228ca3c3d0cce77cf9560", "html_url": "https://github.com/django/django/commit/cbe6d5568f4f5053ed7228ca3c3d0cce77cf9560", "windows_before": [{"commit_id": "ae3535169af804352517b7fea94a42a1c9c4b762", "commit_date": "Tue Aug 13 11:06:22 2013 -0500", "commit_message": "Fixed is_safe_url() to reject URLs that use a scheme other than HTTP/S.", "files_name": ["django/contrib/auth/tests/test_views.py", "django/utils/http.py"]}, {"commit_id": "09a5f5aabe27f63ec8d8982efa6cef9bf7b86022", "commit_date": "Tue Aug 13 15:30:02 2013 +0300", "commit_message": "Fixed test failure on MySQL", "files_name": ["tests/queries/tests.py"]}, {"commit_id": "737b53ab9a01f9e3cc59265cb017a8792f80adf5", "commit_date": "Tue Aug 13 05:11:39 2013 -0700", "commit_message": "Merge pull request #1470 from loic/admin.actionlist", "files_name": ["163a34ce4bc1086b346a52c7271f48d2c207f710 - Mon Aug 12 18:30:38 2013 +0700 : Fixed #20883 -- Made model inheritance find parent links in abstract parents", "django/db/models/base.py", "docs/releases/1.7.txt", "tests/model_inheritance_regress/models.py", "tests/model_inheritance_regress/tests.py"]}, {"commit_id": "33fc083b0db392bd35bc9d5d9a141adb25537253", "commit_date": "Tue Aug 13 17:38:29 2013 +0700", "commit_message": "Fixed overflow for the \"Recent Actions\" widget on the admin index.", "files_name": ["django/contrib/admin/static/admin/css/dashboard.css"]}, {"commit_id": "dcdc579d162b750ee3449e34efd772703592faca", "commit_date": "Tue Aug 13 14:11:52 2013 +0300", "commit_message": "Fixed #20874 -- bump_prefix() in nested subqueries", "files_name": ["django/db/models/sql/compiler.py", "django/db/models/sql/query.py", "tests/foreign_object/tests.py", "tests/queries/tests.py"]}, {"commit_id": "6c12cd15e990b0ff5a5e85328f0a092f4bfe8080", "commit_date": "Sat Oct 20 07:50:44 2012 -0500", "commit_message": "Unlocalize line numbers and ids in debug 500 view.", "files_name": ["django/views/debug.py", "tests/view_tests/tests/test_debug.py", "tests/view_tests/urls.py", "tests/view_tests/views.py"]}, {"commit_id": "44f907dd980defaab2c06b4ead2255ec3566bcd5", "commit_date": "Mon Aug 12 20:05:20 2013 +0100", "commit_message": "Start of getting Oracle to do schema stuff", "files_name": ["django/db/backends/oracle/base.py", "django/db/backends/oracle/creation.py", "django/db/backends/oracle/schema.py"]}, {"commit_id": "3f6cc33cffa5774beedf7997354fc269497a93dd", "commit_date": "Mon Aug 12 13:20:58 2013 -0400", "commit_message": "Added missing release notes for older versions of Django", "files_name": ["docs/releases/1.3.3.txt", "docs/releases/1.3.4.txt", "docs/releases/1.3.5.txt", "docs/releases/1.3.6.txt", "docs/releases/1.3.7.txt", "docs/releases/1.4.2.txt", "docs/releases/1.4.3.txt", "docs/releases/1.4.4.txt", "docs/releases/1.4.5.txt", "docs/releases/index.txt"]}, {"commit_id": "71b5617c24bb997db294480f07611233069e3359", "commit_date": "Mon Aug 12 12:41:39 2013 -0400", "commit_message": "Fixed #17778 -- Prevented class attributes on context from resolving as template variables.", "files_name": ["django/template/base.py", "tests/template_tests/test_context.py"]}, {"commit_id": "841b7af8120e854f3aa37b8918f461efcbbef3d6", "commit_date": "Mon Aug 12 16:40:41 2013 +0100", "commit_message": "Use DEFAULT_DB_ALIAS", "files_name": ["django/core/management/commands/makemigrations.py"]}, {"commit_id": "6bdb3b1135d1bd7b2dc24131b9d26ac19ebdba67", "commit_date": "Mon May 13 13:38:53 2013 +0200", "commit_message": "Fixed #13518 -- Added FILE_UPLOAD_DIRECTORY_PERMISSIONS setting", "files_name": ["django/conf/global_settings.py", "django/core/files/storage.py", "docs/ref/settings.txt", "docs/releases/1.7.txt", "docs/topics/http/file-uploads.txt", "tests/file_storage/tests.py"]}, {"commit_id": "b61b6346284fb32614aab965bd2cb09b383fc9f5", "commit_date": "Sun Aug 11 15:28:51 2013 +0100", "commit_message": "Fix weird planning issues when already fully migrated.", "files_name": ["django/db/migrations/executor.py", "tests/migrations/test_executor.py", "tests/migrations/test_migrations_2/0001_initial.py", "tests/migrations/test_migrations_2/__init__.py"]}, {"commit_id": "b4c493ecd3b8d0d55347949984561762ad2ef1dc", "commit_date": "Sun Aug 11 14:28:55 2013 +0100", "commit_message": "Remove keep_default from add_field", "files_name": ["django/db/backends/schema.py"]}, {"commit_id": "d985fd7a189cdbfa2093c1225bdeb7eefaeb6978", "commit_date": "Sun Aug 11 14:27:42 2013 +0100", "commit_message": "Fix tablespace command", "files_name": ["django/db/backends/schema.py"]}, {"commit_id": "ae19315b4d8a19eda07ea8f313c485ca0a7875d0", "commit_date": "Sun Aug 11 14:23:31 2013 +0100", "commit_message": "Support index_together during model creation", "files_name": ["django/db/backends/schema.py", "django/db/backends/sqlite3/introspection.py", "tests/schema/models.py", "tests/schema/tests.py"]}, {"commit_id": "21be9fef7b14edd75c6ee402ec2bb28bf9b6ce59", "commit_date": "Sun Aug 11 00:01:30 2013 +0100", "commit_message": "Stop being overcautious about Field.rel", "files_name": ["django/db/backends/schema.py", "django/db/migrations/autodetector.py"]}, {"commit_id": "77028194415cb03b1ff2a85a86d806a0366bccff", "commit_date": "Sat Aug 10 23:58:12 2013 +0100", "commit_message": "Update get_constraints with better comments", "files_name": ["django/db/backends/__init__.py", "django/db/backends/postgresql_psycopg2/introspection.py"]}, {"commit_id": "ab680725bfb2f0d79cff26331b30a3d583c55a80", "commit_date": "Sat Aug 10 18:08:05 2013 -0400", "commit_message": "Fixed #20890 -- Added missing import in class-based view docs.", "files_name": ["docs/topics/class-based-views/intro.txt"]}, {"commit_id": "6e70f47d02a9c5d32c0d3e88cdd6f0f93458e7ca", "commit_date": "Sat Aug 10 14:48:46 2013 -0700", "commit_message": "Merge pull request #1464 from evildmp/squashing_commits", "files_name": ["e868eaf680a3d7acfcd3c76743bb248d29ac7b60 - Sat Aug 10 22:24:24 2013 +0100 : clarified misleading wording about squashing commits", "docs/internals/contributing/writing-code/working-with-git.txt"]}, {"commit_id": "d5a7a3d6a80684caa8f5c3c7d5b454e3da1799a1", "commit_date": "Sat Aug 10 21:04:59 2013 +0100", "commit_message": "Add clarifying comment", "files_name": ["django/core/management/commands/makemigrations.py"]}, {"commit_id": "22af1394c64b6687e45747ae9f643068b340a867", "commit_date": "Sat Aug 10 16:32:07 2013 -0300", "commit_message": "Expand testing of Test LiveServerTestCase static files serving.", "files_name": ["tests/runtests.py", "tests/servers/another_app/__init__.py", "tests/servers/another_app/models.py", "tests/servers/another_app/static/another_app/another_app_static_file.txt", "tests/servers/tests.py"]}, {"commit_id": "3f1f91f155c89d0be9f920bb88a2c32f652fa79b", "commit_date": "Sat Aug 10 20:02:55 2013 +0100", "commit_message": "Print all bad apps passed to makemigrations, not just the first one.", "files_name": ["django/core/management/commands/makemigrations.py"]}, {"commit_id": "cb92e3391b0560bc3d519f066185522316b4533f", "commit_date": "Sat Aug 10 15:54:22 2013 -0300", "commit_message": "Test that django.views.static.serve() generates 404 status codes.", "files_name": ["tests/view_tests/tests/test_static.py"]}, {"commit_id": "7970d97a708f0d2f4fbd654eaf785338ab04cc1e", "commit_date": "Sat Aug 10 20:00:12 2013 +0100", "commit_message": "Docs tweaks (thanks timgraham)", "files_name": ["django/db/backends/mysql/introspection.py", "django/db/migrations/autodetector.py", "django/db/migrations/graph.py", "django/test/runner.py", "django/utils/datastructures.py", "docs/ref/django-admin.txt", "docs/ref/signals.txt", "docs/releases/1.7.txt", "docs/topics/migrations.txt"]}, {"commit_id": "3c3d308ea3e017868b6530df144dd1824471b6f2", "commit_date": "Sat Aug 10 19:48:46 2013 +0100", "commit_message": "Back SortedSet onto OrderedDict, rename it, and a few typo fixes", "files_name": ["django/utils/datastructures.py"]}, {"commit_id": "00d23a13ebaf6057d1428e798bfb6cf47bb5ef7c", "commit_date": "Wed Aug 7 21:33:31 2013 +0530", "commit_message": "Fixed #20828 -- Allowed @permission_required to take a list of permissions", "files_name": ["django/contrib/auth/decorators.py", "django/contrib/auth/tests/test_decorators.py", "docs/releases/1.7.txt", "docs/topics/auth/default.txt"]}, {"commit_id": "5737c57d95cc8c17b1aa2da4809f70ad4c212716", "commit_date": "Fri Aug 9 16:02:05 2013 -0400", "commit_message": "Fixed #20868 -- Added an email to django-announce as a security step.", "files_name": ["docs/internals/security.txt"]}, {"commit_id": "db0779dbe1da8cff96f8fc9e92ce269a5cf1c1c1", "commit_date": "Fri Aug 9 12:18:56 2013 -0700", "commit_message": "Merge pull request #1447 from evansd/patch-1", "files_name": ["f093646bfc2b459b4e37bae8fe3f2b52e4e58ff3 - Fri Aug 9 17:47:13 2013 +0100 : Remove pointless comment.", "django/db/backends/mysql/introspection.py"]}, {"commit_id": "9b4a789eefc4b0c081056f3cb97e07895b5ffc00", "commit_date": "Fri Aug 9 17:45:19 2013 +0100", "commit_message": "Add [y/n] to autodetector questions and allow for default value", "files_name": ["django/db/migrations/autodetector.py"]}, {"commit_id": "ae96ad872f0bd16c0997991c0a7109e0139f9373", "commit_date": "Fri Aug 9 17:42:56 2013 +0100", "commit_message": "Remove pointless fetch_results param", "files_name": ["django/db/backends/schema.py"]}, {"commit_id": "fb16ee5a31256c1e230a697044c3ded2dbdec3e8", "commit_date": "Fri Aug 9 17:41:39 2013 +0100", "commit_message": "Remove commented-out print", "files_name": ["django/db/backends/schema.py"]}, {"commit_id": "b3cec920a2a7d547944823c539a7ebd99b3af23a", "commit_date": "Fri Aug 9 17:39:07 2013 +0100", "commit_message": "Remove other color_style override", "files_name": ["django/core/management/commands/makemigrations.py"]}, {"commit_id": "9f736294205486443f047e93f8ca53b5b00ac1d3", "commit_date": "Fri Aug 9 17:36:16 2013 +0100", "commit_message": "utils.importlib is deprecated", "files_name": ["django/core/management/commands/flush.py", "django/core/management/commands/migrate.py", "django/db/migrations/loader.py", "django/db/migrations/writer.py"]}, {"commit_id": "679627660fef3c7a9f7be743a168930e4a0e58ae", "commit_date": "Fri Aug 9 17:34:35 2013 +0100", "commit_message": "Remove useless override of self.style", "files_name": ["django/core/management/commands/migrate.py"]}, {"commit_id": "0cac4fbf699bb6a3de5f4a48c6e047a4dc6c2df7", "commit_date": "Mon Feb 4 16:50:15 2013 +0100", "commit_message": "Fixed #18356 -- Gave the test client signals.template_rendered call a unique dispatch_uid", "files_name": ["AUTHORS", "django/test/client.py", "tests/test_client_regress/tests.py", "tests/test_client_regress/urls.py", "tests/test_client_regress/views.py"]}, {"commit_id": "453915bb1272c9a9189a741e6a9b9246edfcbd03", "commit_date": "Fri Aug 9 10:57:25 2013 -0400", "commit_message": "SQLite test fix -- refs #9057", "files_name": ["django/contrib/auth/tests/test_management.py"]}, {"commit_id": "588b523233e6cd3e7f9695b76ba639fe26fe5192", "commit_date": "Fri Aug 9 14:37:37 2013 +0100", "commit_message": "Merge remote-tracking branch 'core/master' into schema-alteration", "files_name": ["1d1cfd0bd8016358719a1e73117c811f02ca8c02 - Fri Aug 9 14:31:24 2013 +0100 : Document new field API in release notes", "docs/releases/1.7.txt"]}, {"commit_id": "ddae74b64ccb1173e3f2f06d54dd45643130f9e0", "commit_date": "Thu Aug 1 11:31:34 2013 -0400", "commit_message": "Fixed #9057 -- Added default_permissions model meta option.", "files_name": ["django/contrib/auth/management/__init__.py", "django/contrib/auth/tests/test_management.py", "django/db/models/options.py", "docs/ref/models/options.txt", "docs/releases/1.7.txt"]}, {"commit_id": "de64c4d6e97c980fb4c0ace045fc4070b3f763d9", "commit_date": "Fri Aug 9 14:17:30 2013 +0100", "commit_message": "Merge remote-tracking branch 'core/master' into schema-alteration", "files_name": ["9c711ee3a6a638add26d19dad70447c981371598 - Fri Aug 9 09:12:15 2013 -0400 : Fixed test failures on Python 3 - refs #12288", "django/conf/__init__.py", "tests/settings_tests/tests.py"]}, {"commit_id": "b575d690bbc1c4cd7f575346132c09fca8c736a7", "commit_date": "Fri Aug 9 08:34:37 2013 -0400", "commit_message": "Fixed test failures introduced by #12288", "files_name": ["tests/view_tests/tests/test_i18n.py"]}, {"commit_id": "2ac89012d8ff750ea5443b6f6f347dacb697e059", "commit_date": "Wed Aug 7 01:07:16 2013 -0700", "commit_message": "Fixed #12288 -- Added unique validation for INSTALLED_APPS", "files_name": ["django/conf/__init__.py", "tests/settings_tests/tests.py"]}, {"commit_id": "4fa2738ff3ff2704140c8bcb6671d76e9f31f776", "commit_date": "Fri Aug 9 04:06:23 2013 -0700", "commit_message": "Merge pull request #1460 from loic/ObjectMixins.get_queryset", "files_name": ["f8a6a4eba1b52dd634ab3e72637cd47412dcfa6e - Fri Aug 9 17:31:17 2013 +0700 : Improved queryset handling and docs for (Single|Multiple)ObjectMixin.", "django/views/generic/detail.py", "django/views/generic/list.py", "docs/ref/class-based-views/mixins-multiple-object.txt"]}], "windows_after": [{"commit_id": "db682dcc9e028fa40bb4d3efb322fd3191ed1bd2", "commit_date": "Tue Aug 13 11:16:30 2013 -0500", "commit_message": "Added 1.4.6/1.5.2 release notes.", "files_name": ["docs/releases/1.4.6.txt", "docs/releases/1.5.2.txt", "docs/releases/index.txt"]}, {"commit_id": "907ef9d0d157c47c66bf265dca93a0bee8664ea3", "commit_date": "Tue Jun 4 22:41:49 2013 +0200", "commit_message": "Fixed #20555 -- Make subwidget id attribute available", "files_name": ["django/forms/forms.py", "django/forms/widgets.py", "docs/ref/forms/widgets.txt", "docs/releases/1.7.txt", "tests/forms_tests/tests/test_widgets.py"]}, {"commit_id": "157604a87fa7e1331c25fcbed558f0799aa5b8df", "commit_date": "Tue Aug 13 20:54:57 2013 +0100", "commit_message": "Oracle schema backend, passes most tests and is pretty complete.", "files_name": ["django/db/backends/oracle/base.py", "django/db/backends/oracle/introspection.py", "django/db/backends/oracle/schema.py", "django/db/backends/schema.py", "tests/schema/tests.py"]}, {"commit_id": "4e50e4065489f06d72eed8ce2d9ae98639be5a93", "commit_date": "Tue Aug 13 22:22:46 2013 +0200", "commit_message": "Removed unneeded conditional_escapes from the testsuite.", "files_name": ["tests/admin_widgets/tests.py"]}, {"commit_id": "4eeb8ec147022d3a7360d9fa78d3cd1c76accfb1", "commit_date": "Mon Aug 5 17:07:12 2013 +0200", "commit_message": "Fixed #20864 -- Made the test client use common method for performing requests.", "files_name": ["AUTHORS", "django/test/client.py"]}, {"commit_id": "71c491972eecae8783cf46e69fac7e5f9f83fc59", "commit_date": "Sat Aug 10 01:13:41 2013 -0700", "commit_message": "Fixed #11400 -- Passed kwargs from AbstractUser.email_user() to send_mail()", "files_name": ["AUTHORS", "django/contrib/auth/models.py", "django/contrib/auth/tests/test_models.py", "docs/ref/contrib/auth.txt", "docs/releases/1.7.txt"]}, {"commit_id": "ff410565bf1cf1a2905c1ef83db408d455211446", "commit_date": "Wed Aug 14 16:14:32 2013 +0200", "commit_message": "Fixed #20709 -- Allowed {% widthratio %} to accept an \"as\" parameter.", "files_name": ["AUTHORS", "django/template/defaulttags.py", "docs/ref/templates/builtins.txt", "docs/releases/1.7.txt", "tests/template_tests/tests.py"]}, {"commit_id": "b6178fa24be8a628cb002afe6a80db6391bb67d8", "commit_date": "Wed Aug 14 12:57:55 2013 -0400", "commit_message": "Added some doc links for django.contrib.messages", "files_name": ["docs/ref/contrib/messages.txt", "docs/ref/settings.txt"]}, {"commit_id": "354009d67eb56301457ec26c1c847af5fdfc083b", "commit_date": "Thu Aug 15 00:27:16 2013 +0100", "commit_message": "Updated docs following deprecation of django.views.defaults.shortcut", "files_name": ["docs/internals/deprecation.txt", "docs/ref/contrib/sites.txt"]}, {"commit_id": "29255fcb4f5f50334cda9546ada2f31e825deec3", "commit_date": "Thu Aug 15 07:14:10 2013 -0400", "commit_message": "Fixed some ReST errors regarding backticks", "files_name": ["docs/howto/custom-model-fields.txt", "docs/howto/deployment/index.txt", "docs/howto/deployment/wsgi/apache-auth.txt", "docs/howto/deployment/wsgi/modwsgi.txt", "docs/intro/tutorial01.txt", "docs/ref/contrib/admin/actions.txt", "docs/ref/contrib/admin/admindocs.txt", "docs/ref/models/querysets.txt", "docs/releases/1.7.txt", "docs/topics/auth/customizing.txt", "docs/topics/db/managers.txt", "docs/topics/http/shortcuts.txt"]}, {"commit_id": "bc5716fc9ce517c6aaa2b78f311724a335488924", "commit_date": "Tue Feb 26 13:12:27 2013 -0600", "commit_message": "Added release date to 1.5 release notes.", "files_name": ["docs/releases/1.5.txt"]}, {"commit_id": "b9ef96e73cf2f2613eb6ca96038ef8c4271ac116", "commit_date": "Thu Aug 15 20:59:58 2013 +0200", "commit_message": "Regression test and patch for ticket #20924.", "files_name": ["django/utils/functional.py", "tests/utils_tests/test_simplelazyobject.py"]}, {"commit_id": "55339a76691724109770092976e660ac62358bc5", "commit_date": "Thu Aug 15 15:24:58 2013 -0400", "commit_message": "Fixed #20891 -- Removed part of the tutorial that requires pytz", "files_name": ["docs/intro/tutorial02.txt"]}, {"commit_id": "22c6497f990fd12359b759a71abfcbf3f52b2d52", "commit_date": "Sun Aug 11 21:19:09 2013 +0100", "commit_message": "Fixed #20895 -- Made check management command warn if a BooleanField does not have a default value", "files_name": ["AUTHORS", "django/contrib/gis/tests/geoapp/models.py", "django/core/checks/compatibility/django_1_6_0.py", "tests/admin_views/models.py", "tests/aggregation_regress/models.py", "tests/check/models.py", "tests/check/tests.py", "tests/comment_tests/models.py", "tests/custom_managers/models.py", "tests/generic_relations/models.py", "tests/inspectdb/models.py", "tests/model_fields/models.py", "tests/model_fields/tests.py", "tests/model_formsets/models.py", "tests/model_inheritance/models.py", "tests/model_inheritance_regress/models.py", "tests/model_inheritance_select_related/models.py", "tests/modeladmin/models.py", "tests/one_to_one/models.py", "tests/one_to_one_regress/models.py", "tests/raw_query/models.py", "tests/reverse_single_related/models.py", "tests/serializers_regress/models.py"]}, {"commit_id": "165f44aaaa0b9008f35d8f6a3474db061559ad53", "commit_date": "Fri Aug 16 20:12:10 2013 +0200", "commit_message": "Combine consecutive with statements", "files_name": ["django/contrib/auth/tests/test_forms.py", "django/contrib/humanize/tests.py", "tests/admin_views/tests.py", "tests/admin_widgets/tests.py", "tests/defaultfilters/tests.py", "tests/forms_tests/tests/test_fields.py", "tests/i18n/tests.py", "tests/logging_tests/tests.py", "tests/one_to_one_regress/tests.py", "tests/test_utils/tests.py", "tests/transactions/tests.py", "tests/view_tests/tests/test_i18n.py"]}, {"commit_id": "240886183b022055b5a5115916c7c9766ec55c51", "commit_date": "Wed Jul 31 22:35:44 2013 +0200", "commit_message": "Fixed #20829 -- Skip postgis metadata tables with introspection", "files_name": ["django/contrib/gis/db/backends/postgis/introspection.py", "django/db/backends/postgresql_psycopg2/introspection.py"]}, {"commit_id": "c2907a6e3d96315027f7313885f3d0212dd19cbe", "commit_date": "Fri Aug 16 23:55:43 2013 -0600", "commit_message": "Remove the last FIXME from the howto-release-Django doc.", "files_name": ["docs/internals/howto-release-django.txt"]}, {"commit_id": "7a698c05b56d7d5e267241dc71c16c403efd2965", "commit_date": "Sun Aug 18 15:58:55 2013 +0200", "commit_message": "Update LazyObject method proxy declarations to simpler form.", "files_name": ["django/utils/functional.py"]}, {"commit_id": "aa01c99f5587b36c354e80c682ad52e1a3b41455", "commit_date": "Sun Aug 18 09:41:43 2013 -0700", "commit_message": "Merge pull request #1479 from nickbruun/ticket_20924", "files_name": ["40909826172374b849ddc9db8e1a8be9a8c3251b - Sun Aug 18 09:43:41 2013 -0700 : Some code simplification", "django/utils/functional.py"]}, {"commit_id": "4668c142dce77c6f29fb75532c1acfa1b2d322ff", "commit_date": "Wed Aug 7 09:51:32 2013 +0300", "commit_message": "Made Model.__eq__ consider proxy models equivalent", "files_name": ["django/db/models/base.py", "docs/ref/models/instances.txt", "docs/releases/1.7.txt", "tests/basic/tests.py", "tests/defer/tests.py", "tests/model_inheritance/tests.py", "tests/proxy_models/tests.py"]}, {"commit_id": "3844089edc43ff29aab5bac82a0eecab23d8d14a", "commit_date": "Thu Aug 15 10:32:54 2013 +0300", "commit_message": "Fixed #20777 -- Admin proxy model deletion regression", "files_name": ["django/contrib/admin/util.py", "docs/ref/models/instances.txt", "tests/proxy_models/admin.py", "tests/proxy_models/fixtures/myhorses.json", "tests/proxy_models/models.py", "tests/proxy_models/tests.py", "tests/proxy_models/urls.py"]}, {"commit_id": "630b9df42f771e90d9beb1766d4e7aa2107bd82d", "commit_date": "Mon Aug 19 14:07:51 2013 +0300", "commit_message": "Fixed #12567 -- Incorrect SQL in model inheritance case", "files_name": ["tests/model_inheritance/tests.py"]}, {"commit_id": "7d28bed13bfd07452fb7bc007544a34f7649a31f", "commit_date": "Mon Aug 19 14:16:10 2013 +0300", "commit_message": "PEP 8 cleanup", "files_name": ["tests/model_inheritance/tests.py"]}, {"commit_id": "5b522cd85a63cf5e352c500447aa91002e83845e", "commit_date": "Mon Aug 19 13:12:48 2013 +0100", "commit_message": "Minor oracle fixes", "files_name": ["django/db/backends/oracle/introspection.py"]}, {"commit_id": "52edc16086e3c28a78c31975bb4da2f9450590b4", "commit_date": "Mon Aug 19 13:50:26 2013 +0100", "commit_message": "Add more stringent M2M tests and fix the bug they exposed", "files_name": ["django/db/models/options.py", "tests/migrations/test_operations.py", "tests/schema/models.py", "tests/schema/tests.py"]}, {"commit_id": "7737305a4f5dc5006d92dac3a61523ad6c2a523a", "commit_date": "Mon Aug 19 16:00:17 2013 +0300", "commit_message": "Fixed #12886 -- aggregation over sliced queryset", "files_name": ["django/db/models/query.py", "django/db/models/sql/query.py", "tests/aggregation/tests.py"]}, {"commit_id": "7bc57a6d71dd4d00bb09cfa67be547591fd759ce", "commit_date": "Mon Aug 19 16:14:31 2013 +0300", "commit_message": "Fixed #11881 -- removed junk from aggregation subqueries", "files_name": ["django/db/models/sql/query.py", "tests/aggregation/tests.py"]}, {"commit_id": "58c6d0209d71872f0682d478921db1e00496e16c", "commit_date": "Mon Aug 19 16:24:45 2013 +0300", "commit_message": "Fixed #12807 -- EmptyResultSet ORed condition", "files_name": ["tests/queries/tests.py"]}, {"commit_id": "7b69c3e7758770dd632e1754c30714e91868e037", "commit_date": "Mon Aug 19 08:29:32 2013 -0400", "commit_message": "Removed versionadded/changed annotations for 1.5", "files_name": ["docs/ref/class-based-views/base.txt", "docs/ref/class-based-views/generic-date-based.txt", "docs/ref/class-based-views/mixins-date-based.txt", "docs/ref/class-based-views/mixins-multiple-object.txt", "docs/ref/class-based-views/mixins-simple.txt", "docs/ref/contrib/admin/index.txt", "docs/ref/contrib/auth.txt", "docs/ref/contrib/contenttypes.txt", "docs/ref/contrib/gis/geoquerysets.txt", "docs/ref/contrib/gis/geos.txt", "docs/ref/contrib/staticfiles.txt", "docs/ref/databases.txt", "docs/ref/django-admin.txt", "docs/ref/files/file.txt", "docs/ref/forms/api.txt", "docs/ref/forms/fields.txt", "docs/ref/forms/validation.txt", "docs/ref/forms/widgets.txt", "docs/ref/models/fields.txt", "docs/ref/models/instances.txt", "docs/ref/models/options.txt", "docs/ref/models/querysets.txt", "docs/ref/request-response.txt", "docs/ref/settings.txt", "docs/ref/signals.txt"]}], "parents": [{"commit_id_before": "ae3535169af804352517b7fea94a42a1c9c4b762", "url_before": "https://api.github.com/repos/django/django/commits/ae3535169af804352517b7fea94a42a1c9c4b762", "html_url_before": "https://github.com/django/django/commit/ae3535169af804352517b7fea94a42a1c9c4b762"}], "details": [{"raw_url": "https://github.com/django/django/raw/cbe6d5568f4f5053ed7228ca3c3d0cce77cf9560/django%2Fcontrib%2Fadmin%2Fwidgets.py", "code": "\"\"\"\nForm Widget classes specific to the Django admin site.\n\"\"\"\nfrom __future__ import unicode_literals\n\nimport copy\n\nfrom django import forms\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.core.urlresolvers import reverse\nfrom django.forms.widgets import RadioFieldRenderer\nfrom django.forms.util import flatatt\nfrom django.utils.html import escape, format_html, format_html_join, smart_urlquote\nfrom django.utils.text import Truncator\nfrom django.utils.translation import ugettext as _\nfrom django.utils.safestring import mark_safe\nfrom django.utils.encoding import force_text\nfrom django.utils import six\n\n\nclass FilteredSelectMultiple(forms.SelectMultiple):\n    \"\"\"\n    A SelectMultiple with a JavaScript filter interface.\n\n    Note that the resulting JavaScript assumes that the jsi18n\n    catalog has been loaded in the page\n    \"\"\"\n    @property\n    def media(self):\n        js = [\"core.js\", \"SelectBox.js\", \"SelectFilter2.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n        self.verbose_name = verbose_name\n        self.is_stacked = is_stacked\n        super(FilteredSelectMultiple, self).__init__(attrs, choices)\n\n    def render(self, name, value, attrs=None, choices=()):\n        if attrs is None:\n            attrs = {}\n        attrs['class'] = 'selectfilter'\n        if self.is_stacked:\n            attrs['class'] += 'stacked'\n        output = [super(FilteredSelectMultiple, self).render(name, value, attrs, choices)]\n        output.append('<script type=\"text/javascript\">addEvent(window, \"load\", function(e) {')\n        # TODO: \"id_\" is hard-coded here. This should instead use the correct\n        # API to determine the ID dynamically.\n        output.append('SelectFilter.init(\"id_%s\", \"%s\", %s, \"%s\"); });</script>\\n'\n            % (name, self.verbose_name.replace('\"', '\\\\\"'), int(self.is_stacked), static('admin/')))\n        return mark_safe(''.join(output))\n\nclass AdminDateWidget(forms.DateInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vDateField', 'size': '10'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminDateWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminTimeWidget(forms.TimeInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vTimeField', 'size': '8'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTimeWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminSplitDateTime(forms.SplitDateTimeWidget):\n    \"\"\"\n    A SplitDateTime Widget that has some admin-specific styling.\n    \"\"\"\n    def __init__(self, attrs=None):\n        widgets = [AdminDateWidget, AdminTimeWidget]\n        # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n        # we want to define widgets.\n        forms.MultiWidget.__init__(self, widgets, attrs)\n\n    def format_output(self, rendered_widgets):\n        return format_html('<p class=\"datetime\">{0} {1}<br />{2} {3}</p>',\n                           _('Date:'), rendered_widgets[0],\n                           _('Time:'), rendered_widgets[1])\n\nclass AdminRadioFieldRenderer(RadioFieldRenderer):\n    def render(self):\n        \"\"\"Outputs a <ul> for this set of radio fields.\"\"\"\n        return format_html('<ul{0}>\\n{1}\\n</ul>',\n                           flatatt(self.attrs),\n                           format_html_join('\\n', '<li>{0}</li>',\n                                            ((force_text(w),) for w in self)))\n\nclass AdminRadioSelect(forms.RadioSelect):\n    renderer = AdminRadioFieldRenderer\n\nclass AdminFileWidget(forms.ClearableFileInput):\n    template_with_initial = ('<p class=\"file-upload\">%s</p>'\n                            % forms.ClearableFileInput.template_with_initial)\n    template_with_clear = ('<span class=\"clearable-file-input\">%s</span>'\n                           % forms.ClearableFileInput.template_with_clear)\n\ndef url_params_from_lookup_dict(lookups):\n    \"\"\"\n    Converts the type of lookups specified in a ForeignKey limit_choices_to\n    attribute to a dictionary of query parameters\n    \"\"\"\n    params = {}\n    if lookups and hasattr(lookups, 'items'):\n        items = []\n        for k, v in lookups.items():\n            if callable(v):\n                v = v()\n            if isinstance(v, (tuple, list)):\n                v = ','.join([str(x) for x in v])\n            elif isinstance(v, bool):\n                # See django.db.fields.BooleanField.get_prep_lookup\n                v = ('0', '1')[v]\n            else:\n                v = six.text_type(v)\n            items.append((k, v))\n        params.update(dict(items))\n    return params\n\nclass ForeignKeyRawIdWidget(forms.TextInput):\n    \"\"\"\n    A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n    in a <select> box.\n    \"\"\"\n    def __init__(self, rel, admin_site, attrs=None, using=None):\n        self.rel = rel\n        self.admin_site = admin_site\n        self.db = using\n        super(ForeignKeyRawIdWidget, self).__init__(attrs)\n\n    def render(self, name, value, attrs=None):\n        rel_to = self.rel.to\n        if attrs is None:\n            attrs = {}\n        extra = []\n        if rel_to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            related_url = reverse('admin:%s_%s_changelist' %\n                                    (rel_to._meta.app_label,\n                                    rel_to._meta.model_name),\n                                    current_app=self.admin_site.name)\n\n            params = self.url_parameters()\n            if params:\n                url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])\n            else:\n                url = ''\n            if \"class\" not in attrs:\n                attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.\n            # TODO: \"lookup_id_\" is hard-coded here. This should instead use\n            # the correct API to determine the ID dynamically.\n            extra.append('<a href=\"%s%s\" class=\"related-lookup\" id=\"lookup_id_%s\" onclick=\"return showRelatedObjectLookupPopup(this);\"> '\n                            % (related_url, url, name))\n            extra.append('<img src=\"%s\" width=\"16\" height=\"16\" alt=\"%s\" /></a>'\n                            % (static('admin/img/selector-search.gif'), _('Lookup')))\n        output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra\n        if value:\n            output.append(self.label_for_value(value))\n        return mark_safe(''.join(output))\n\n    def base_url_parameters(self):\n        return url_params_from_lookup_dict(self.rel.limit_choices_to)\n\n    def url_parameters(self):\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n        params = self.base_url_parameters()\n        params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n        return params\n\n    def label_for_value(self, value):\n        key = self.rel.get_related_field().name\n        try:\n            obj = self.rel.to._default_manager.using(self.db).get(**{key: value})\n            return '&nbsp;<strong>%s</strong>' % escape(Truncator(obj).words(14, truncate='...'))\n        except (ValueError, self.rel.to.DoesNotExist):\n            return ''\n\nclass ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n    \"\"\"\n    A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n    in a <select multiple> box.\n    \"\"\"\n    def render(self, name, value, attrs=None):\n        if attrs is None:\n            attrs = {}\n        if self.rel.to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            attrs['class'] = 'vManyToManyRawIdAdminField'\n        if value:\n            value = ','.join([force_text(v) for v in value])\n        else:\n            value = ''\n        return super(ManyToManyRawIdWidget, self).render(name, value, attrs)\n\n    def url_parameters(self):\n        return self.base_url_parameters()\n\n    def label_for_value(self, value):\n        return ''\n\n    def value_from_datadict(self, data, files, name):\n        value = data.get(name)\n        if value:\n            return value.split(',')\n\n\nclass RelatedFieldWidgetWrapper(forms.Widget):\n    \"\"\"\n    This class is a wrapper to a given widget to add the add icon for the\n    admin interface.\n    \"\"\"\n    def __init__(self, widget, rel, admin_site, can_add_related=None):\n        self.is_hidden = widget.is_hidden\n        self.needs_multipart_form = widget.needs_multipart_form\n        self.attrs = widget.attrs\n        self.choices = widget.choices\n        self.widget = widget\n        self.rel = rel\n        # Backwards compatible check for whether a user can add related\n        # objects.\n        if can_add_related is None:\n            can_add_related = rel.to in admin_site._registry\n        self.can_add_related = can_add_related\n        # so we can check if the related object is registered with this AdminSite\n        self.admin_site = admin_site\n\n    def __deepcopy__(self, memo):\n        obj = copy.copy(self)\n        obj.widget = copy.deepcopy(self.widget, memo)\n        obj.attrs = self.widget.attrs\n        memo[id(self)] = obj\n        return obj\n\n    @property\n    def media(self):\n        return self.widget.media\n\n    def render(self, name, value, *args, **kwargs):\n        rel_to = self.rel.to\n        info = (rel_to._meta.app_label, rel_to._meta.model_name)\n        self.widget.choices = self.choices\n        output = [self.widget.render(name, value, *args, **kwargs)]\n        if self.can_add_related:\n            related_url = reverse('admin:%s_%s_add' % info, current_app=self.admin_site.name)\n            # TODO: \"add_id_\" is hard-coded here. This should instead use the\n            # correct API to determine the ID dynamically.\n            output.append('<a href=\"%s\" class=\"add-another\" id=\"add_id_%s\" onclick=\"return showAddAnotherPopup(this);\"> '\n                          % (related_url, name))\n            output.append('<img src=\"%s\" width=\"10\" height=\"10\" alt=\"%s\"/></a>'\n                          % (static('admin/img/icon_addlink.gif'), _('Add Another')))\n        return mark_safe(''.join(output))\n\n    def build_attrs(self, extra_attrs=None, **kwargs):\n        \"Helper function for building an attribute dictionary.\"\n        self.attrs = self.widget.build_attrs(extra_attrs=None, **kwargs)\n        return self.attrs\n\n    def value_from_datadict(self, data, files, name):\n        return self.widget.value_from_datadict(data, files, name)\n\n    def id_for_label(self, id_):\n        return self.widget.id_for_label(id_)\n\nclass AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vLargeTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextareaWidget, self).__init__(attrs=final_attrs)\n\nclass AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextInputWidget, self).__init__(attrs=final_attrs)\n\nclass AdminEmailInputWidget(forms.EmailInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminEmailInputWidget, self).__init__(attrs=final_attrs)\n\nclass AdminURLFieldWidget(forms.URLInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vURLField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminURLFieldWidget, self).__init__(attrs=final_attrs)\n\n    def render(self, name, value, attrs=None):\n        html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n        if value:\n            value = force_text(self._format_value(value))\n            final_attrs = {'href': smart_urlquote(value)}\n            html = format_html(\n                '<p class=\"url\">{0} <a{1}>{2}</a><br />{3} {4}</p>',\n                _('Currently:'), flatatt(final_attrs), value,\n                _('Change:'), html\n            )\n        return html\n\n\nclass AdminIntegerFieldWidget(forms.TextInput):\n    class_name = 'vIntegerField'\n\n    def __init__(self, attrs=None):\n        final_attrs = {'class': self.class_name}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminIntegerFieldWidget, self).__init__(attrs=final_attrs)\n\nclass AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = 'vBigIntegerField'\n\nclass AdminCommaSeparatedIntegerFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vCommaSeparatedIntegerField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminCommaSeparatedIntegerFieldWidget, self).__init__(attrs=final_attrs)\n", "code_before": "\"\"\"\nForm Widget classes specific to the Django admin site.\n\"\"\"\nfrom __future__ import unicode_literals\n\nimport copy\n\nfrom django import forms\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.core.urlresolvers import reverse\nfrom django.forms.widgets import RadioFieldRenderer\nfrom django.forms.util import flatatt\nfrom django.utils.html import escape, format_html, format_html_join, smart_urlquote\nfrom django.utils.text import Truncator\nfrom django.utils.translation import ugettext as _\nfrom django.utils.safestring import mark_safe\nfrom django.utils.encoding import force_text\nfrom django.utils import six\n\n\nclass FilteredSelectMultiple(forms.SelectMultiple):\n    \"\"\"\n    A SelectMultiple with a JavaScript filter interface.\n\n    Note that the resulting JavaScript assumes that the jsi18n\n    catalog has been loaded in the page\n    \"\"\"\n    @property\n    def media(self):\n        js = [\"core.js\", \"SelectBox.js\", \"SelectFilter2.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n        self.verbose_name = verbose_name\n        self.is_stacked = is_stacked\n        super(FilteredSelectMultiple, self).__init__(attrs, choices)\n\n    def render(self, name, value, attrs=None, choices=()):\n        if attrs is None:\n            attrs = {}\n        attrs['class'] = 'selectfilter'\n        if self.is_stacked:\n            attrs['class'] += 'stacked'\n        output = [super(FilteredSelectMultiple, self).render(name, value, attrs, choices)]\n        output.append('<script type=\"text/javascript\">addEvent(window, \"load\", function(e) {')\n        # TODO: \"id_\" is hard-coded here. This should instead use the correct\n        # API to determine the ID dynamically.\n        output.append('SelectFilter.init(\"id_%s\", \"%s\", %s, \"%s\"); });</script>\\n'\n            % (name, self.verbose_name.replace('\"', '\\\\\"'), int(self.is_stacked), static('admin/')))\n        return mark_safe(''.join(output))\n\nclass AdminDateWidget(forms.DateInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vDateField', 'size': '10'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminDateWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminTimeWidget(forms.TimeInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vTimeField', 'size': '8'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTimeWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminSplitDateTime(forms.SplitDateTimeWidget):\n    \"\"\"\n    A SplitDateTime Widget that has some admin-specific styling.\n    \"\"\"\n    def __init__(self, attrs=None):\n        widgets = [AdminDateWidget, AdminTimeWidget]\n        # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n        # we want to define widgets.\n        forms.MultiWidget.__init__(self, widgets, attrs)\n\n    def format_output(self, rendered_widgets):\n        return format_html('<p class=\"datetime\">{0} {1}<br />{2} {3}</p>',\n                           _('Date:'), rendered_widgets[0],\n                           _('Time:'), rendered_widgets[1])\n\nclass AdminRadioFieldRenderer(RadioFieldRenderer):\n    def render(self):\n        \"\"\"Outputs a <ul> for this set of radio fields.\"\"\"\n        return format_html('<ul{0}>\\n{1}\\n</ul>',\n                           flatatt(self.attrs),\n                           format_html_join('\\n', '<li>{0}</li>',\n                                            ((force_text(w),) for w in self)))\n\nclass AdminRadioSelect(forms.RadioSelect):\n    renderer = AdminRadioFieldRenderer\n\nclass AdminFileWidget(forms.ClearableFileInput):\n    template_with_initial = ('<p class=\"file-upload\">%s</p>'\n                            % forms.ClearableFileInput.template_with_initial)\n    template_with_clear = ('<span class=\"clearable-file-input\">%s</span>'\n                           % forms.ClearableFileInput.template_with_clear)\n\ndef url_params_from_lookup_dict(lookups):\n    \"\"\"\n    Converts the type of lookups specified in a ForeignKey limit_choices_to\n    attribute to a dictionary of query parameters\n    \"\"\"\n    params = {}\n    if lookups and hasattr(lookups, 'items'):\n        items = []\n        for k, v in lookups.items():\n            if callable(v):\n                v = v()\n            if isinstance(v, (tuple, list)):\n                v = ','.join([str(x) for x in v])\n            elif isinstance(v, bool):\n                # See django.db.fields.BooleanField.get_prep_lookup\n                v = ('0', '1')[v]\n            else:\n                v = six.text_type(v)\n            items.append((k, v))\n        params.update(dict(items))\n    return params\n\nclass ForeignKeyRawIdWidget(forms.TextInput):\n    \"\"\"\n    A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n    in a <select> box.\n    \"\"\"\n    def __init__(self, rel, admin_site, attrs=None, using=None):\n        self.rel = rel\n        self.admin_site = admin_site\n        self.db = using\n        super(ForeignKeyRawIdWidget, self).__init__(attrs)\n\n    def render(self, name, value, attrs=None):\n        rel_to = self.rel.to\n        if attrs is None:\n            attrs = {}\n        extra = []\n        if rel_to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            related_url = reverse('admin:%s_%s_changelist' %\n                                    (rel_to._meta.app_label,\n                                    rel_to._meta.model_name),\n                                    current_app=self.admin_site.name)\n\n            params = self.url_parameters()\n            if params:\n                url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])\n            else:\n                url = ''\n            if \"class\" not in attrs:\n                attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.\n            # TODO: \"lookup_id_\" is hard-coded here. This should instead use\n            # the correct API to determine the ID dynamically.\n            extra.append('<a href=\"%s%s\" class=\"related-lookup\" id=\"lookup_id_%s\" onclick=\"return showRelatedObjectLookupPopup(this);\"> '\n                            % (related_url, url, name))\n            extra.append('<img src=\"%s\" width=\"16\" height=\"16\" alt=\"%s\" /></a>'\n                            % (static('admin/img/selector-search.gif'), _('Lookup')))\n        output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra\n        if value:\n            output.append(self.label_for_value(value))\n        return mark_safe(''.join(output))\n\n    def base_url_parameters(self):\n        return url_params_from_lookup_dict(self.rel.limit_choices_to)\n\n    def url_parameters(self):\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n        params = self.base_url_parameters()\n        params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n        return params\n\n    def label_for_value(self, value):\n        key = self.rel.get_related_field().name\n        try:\n            obj = self.rel.to._default_manager.using(self.db).get(**{key: value})\n            return '&nbsp;<strong>%s</strong>' % escape(Truncator(obj).words(14, truncate='...'))\n        except (ValueError, self.rel.to.DoesNotExist):\n            return ''\n\nclass ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n    \"\"\"\n    A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n    in a <select multiple> box.\n    \"\"\"\n    def render(self, name, value, attrs=None):\n        if attrs is None:\n            attrs = {}\n        if self.rel.to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            attrs['class'] = 'vManyToManyRawIdAdminField'\n        if value:\n            value = ','.join([force_text(v) for v in value])\n        else:\n            value = ''\n        return super(ManyToManyRawIdWidget, self).render(name, value, attrs)\n\n    def url_parameters(self):\n        return self.base_url_parameters()\n\n    def label_for_value(self, value):\n        return ''\n\n    def value_from_datadict(self, data, files, name):\n        value = data.get(name)\n        if value:\n            return value.split(',')\n\n\nclass RelatedFieldWidgetWrapper(forms.Widget):\n    \"\"\"\n    This class is a wrapper to a given widget to add the add icon for the\n    admin interface.\n    \"\"\"\n    def __init__(self, widget, rel, admin_site, can_add_related=None):\n        self.is_hidden = widget.is_hidden\n        self.needs_multipart_form = widget.needs_multipart_form\n        self.attrs = widget.attrs\n        self.choices = widget.choices\n        self.widget = widget\n        self.rel = rel\n        # Backwards compatible check for whether a user can add related\n        # objects.\n        if can_add_related is None:\n            can_add_related = rel.to in admin_site._registry\n        self.can_add_related = can_add_related\n        # so we can check if the related object is registered with this AdminSite\n        self.admin_site = admin_site\n\n    def __deepcopy__(self, memo):\n        obj = copy.copy(self)\n        obj.widget = copy.deepcopy(self.widget, memo)\n        obj.attrs = self.widget.attrs\n        memo[id(self)] = obj\n        return obj\n\n    @property\n    def media(self):\n        return self.widget.media\n\n    def render(self, name, value, *args, **kwargs):\n        rel_to = self.rel.to\n        info = (rel_to._meta.app_label, rel_to._meta.model_name)\n        self.widget.choices = self.choices\n        output = [self.widget.render(name, value, *args, **kwargs)]\n        if self.can_add_related:\n            related_url = reverse('admin:%s_%s_add' % info, current_app=self.admin_site.name)\n            # TODO: \"add_id_\" is hard-coded here. This should instead use the\n            # correct API to determine the ID dynamically.\n            output.append('<a href=\"%s\" class=\"add-another\" id=\"add_id_%s\" onclick=\"return showAddAnotherPopup(this);\"> '\n                          % (related_url, name))\n            output.append('<img src=\"%s\" width=\"10\" height=\"10\" alt=\"%s\"/></a>'\n                          % (static('admin/img/icon_addlink.gif'), _('Add Another')))\n        return mark_safe(''.join(output))\n\n    def build_attrs(self, extra_attrs=None, **kwargs):\n        \"Helper function for building an attribute dictionary.\"\n        self.attrs = self.widget.build_attrs(extra_attrs=None, **kwargs)\n        return self.attrs\n\n    def value_from_datadict(self, data, files, name):\n        return self.widget.value_from_datadict(data, files, name)\n\n    def id_for_label(self, id_):\n        return self.widget.id_for_label(id_)\n\nclass AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vLargeTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextareaWidget, self).__init__(attrs=final_attrs)\n\nclass AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextInputWidget, self).__init__(attrs=final_attrs)\n\nclass AdminEmailInputWidget(forms.EmailInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminEmailInputWidget, self).__init__(attrs=final_attrs)\n\nclass AdminURLFieldWidget(forms.URLInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vURLField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminURLFieldWidget, self).__init__(attrs=final_attrs)\n\n    def render(self, name, value, attrs=None):\n        html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n        if value:\n            value = force_text(self._format_value(value))\n            final_attrs = {'href': mark_safe(smart_urlquote(value))}\n            html = format_html(\n                '<p class=\"url\">{0} <a {1}>{2}</a><br />{3} {4}</p>',\n                _('Currently:'), flatatt(final_attrs), value,\n                _('Change:'), html\n            )\n        return html\n\n\nclass AdminIntegerFieldWidget(forms.TextInput):\n    class_name = 'vIntegerField'\n\n    def __init__(self, attrs=None):\n        final_attrs = {'class': self.class_name}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminIntegerFieldWidget, self).__init__(attrs=final_attrs)\n\nclass AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = 'vBigIntegerField'\n\nclass AdminCommaSeparatedIntegerFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vCommaSeparatedIntegerField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminCommaSeparatedIntegerFieldWidget, self).__init__(attrs=final_attrs)\n", "patch": "@@ -305,9 +305,9 @@ def render(self, name, value, attrs=None):\n         html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n         if value:\n             value = force_text(self._format_value(value))\n-            final_attrs = {'href': mark_safe(smart_urlquote(value))}\n+            final_attrs = {'href': smart_urlquote(value)}\n             html = format_html(\n-                '<p class=\"url\">{0} <a {1}>{2}</a><br />{3} {4}</p>',\n+                '<p class=\"url\">{0} <a{1}>{2}</a><br />{3} {4}</p>',\n                 _('Currently:'), flatatt(final_attrs), value,\n                 _('Change:'), html\n             )", "file_path": "files/2013_10/43", "file_language": "py", "file_name": "django/contrib/admin/widgets.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.audit.avoid-mark-safe.avoid-mark-safe                                   \n          'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and\n          could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to\n          build HTML for rendering instead.                                                           \n          Details: https://sg.run/yd0P                                                                \n          308\u2506 final_attrs = {'href': mark_safe(smart_urlquote(value))}"]]}, "target": 1, "function_before": [{"function": "class FilteredSelectMultiple(forms.SelectMultiple):\n    \"\"\"\n    A SelectMultiple with a JavaScript filter interface.\n\n    Note that the resulting JavaScript assumes that the jsi18n\n    catalog has been loaded in the page\n    \"\"\"\n    @property\n    def media(self):\n        js = [\"core.js\", \"SelectBox.js\", \"SelectFilter2.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n        self.verbose_name = verbose_name\n        self.is_stacked = is_stacked\n        super(FilteredSelectMultiple, self).__init__(attrs, choices)\n\n    def render(self, name, value, attrs=None, choices=()):\n        if attrs is None:\n            attrs = {}\n        attrs['class'] = 'selectfilter'\n        if self.is_stacked:\n            attrs['class'] += 'stacked'\n        output = [super(FilteredSelectMultiple, self).render(name, value, attrs, choices)]\n        output.append('<script type=\"text/javascript\">addEvent(window, \"load\", function(e) {')\n        # TODO: \"id_\" is hard-coded here. This should instead use the correct\n        # API to determine the ID dynamically.\n        output.append('SelectFilter.init(\"id_%s\", \"%s\", %s, \"%s\"); });</script>\\n'\n            % (name, self.verbose_name.replace('\"', '\\\\\"'), int(self.is_stacked), static('admin/')))\n        return mark_safe(''.join(output))", "target": 0}, {"function": "class AdminDateWidget(forms.DateInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vDateField', 'size': '10'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminDateWidget, self).__init__(attrs=final_attrs, format=format)", "target": 0}, {"function": "class AdminTimeWidget(forms.TimeInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vTimeField', 'size': '8'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTimeWidget, self).__init__(attrs=final_attrs, format=format)", "target": 0}, {"function": "class AdminSplitDateTime(forms.SplitDateTimeWidget):\n    \"\"\"\n    A SplitDateTime Widget that has some admin-specific styling.\n    \"\"\"\n    def __init__(self, attrs=None):\n        widgets = [AdminDateWidget, AdminTimeWidget]\n        # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n        # we want to define widgets.\n        forms.MultiWidget.__init__(self, widgets, attrs)\n\n    def format_output(self, rendered_widgets):\n        return format_html('<p class=\"datetime\">{0} {1}<br />{2} {3}</p>',\n                           _('Date:'), rendered_widgets[0],\n                           _('Time:'), rendered_widgets[1])", "target": 0}, {"function": "class AdminRadioFieldRenderer(RadioFieldRenderer):\n    def render(self):\n        \"\"\"Outputs a <ul> for this set of radio fields.\"\"\"\n        return format_html('<ul{0}>\\n{1}\\n</ul>',\n                           flatatt(self.attrs),\n                           format_html_join('\\n', '<li>{0}</li>',\n                                            ((force_text(w),) for w in self)))", "target": 0}, {"function": "class AdminRadioSelect(forms.RadioSelect):\n    renderer = AdminRadioFieldRenderer", "target": 0}, {"function": "class AdminFileWidget(forms.ClearableFileInput):\n    template_with_initial = ('<p class=\"file-upload\">%s</p>'\n                            % forms.ClearableFileInput.template_with_initial)\n    template_with_clear = ('<span class=\"clearable-file-input\">%s</span>'\n                           % forms.ClearableFileInput.template_with_clear)", "target": 0}, {"function": "def url_params_from_lookup_dict(lookups):\n    \"\"\"\n    Converts the type of lookups specified in a ForeignKey limit_choices_to\n    attribute to a dictionary of query parameters\n    \"\"\"\n    params = {}\n    if lookups and hasattr(lookups, 'items'):\n        items = []\n        for k, v in lookups.items():\n            if callable(v):\n                v = v()\n            if isinstance(v, (tuple, list)):\n                v = ','.join([str(x) for x in v])\n            elif isinstance(v, bool):\n                # See django.db.fields.BooleanField.get_prep_lookup\n                v = ('0', '1')[v]\n            else:\n                v = six.text_type(v)\n            items.append((k, v))\n        params.update(dict(items))\n    return params", "target": 0}, {"function": "class ForeignKeyRawIdWidget(forms.TextInput):\n    \"\"\"\n    A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n    in a <select> box.\n    \"\"\"\n    def __init__(self, rel, admin_site, attrs=None, using=None):\n        self.rel = rel\n        self.admin_site = admin_site\n        self.db = using\n        super(ForeignKeyRawIdWidget, self).__init__(attrs)\n\n    def render(self, name, value, attrs=None):\n        rel_to = self.rel.to\n        if attrs is None:\n            attrs = {}\n        extra = []\n        if rel_to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            related_url = reverse('admin:%s_%s_changelist' %\n                                    (rel_to._meta.app_label,\n                                    rel_to._meta.model_name),\n                                    current_app=self.admin_site.name)\n\n            params = self.url_parameters()\n            if params:\n                url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])\n            else:\n                url = ''\n            if \"class\" not in attrs:\n                attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.\n            # TODO: \"lookup_id_\" is hard-coded here. This should instead use\n            # the correct API to determine the ID dynamically.\n            extra.append('<a href=\"%s%s\" class=\"related-lookup\" id=\"lookup_id_%s\" onclick=\"return showRelatedObjectLookupPopup(this);\"> '\n                            % (related_url, url, name))\n            extra.append('<img src=\"%s\" width=\"16\" height=\"16\" alt=\"%s\" /></a>'\n                            % (static('admin/img/selector-search.gif'), _('Lookup')))\n        output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra\n        if value:\n            output.append(self.label_for_value(value))\n        return mark_safe(''.join(output))\n\n    def base_url_parameters(self):\n        return url_params_from_lookup_dict(self.rel.limit_choices_to)\n\n    def url_parameters(self):\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n        params = self.base_url_parameters()\n        params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n        return params\n\n    def label_for_value(self, value):\n        key = self.rel.get_related_field().name\n        try:\n            obj = self.rel.to._default_manager.using(self.db).get(**{key: value})\n            return '&nbsp;<strong>%s</strong>' % escape(Truncator(obj).words(14, truncate='...'))\n        except (ValueError, self.rel.to.DoesNotExist):\n            return ''", "target": 0}, {"function": "class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n    \"\"\"\n    A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n    in a <select multiple> box.\n    \"\"\"\n    def render(self, name, value, attrs=None):\n        if attrs is None:\n            attrs = {}\n        if self.rel.to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            attrs['class'] = 'vManyToManyRawIdAdminField'\n        if value:\n            value = ','.join([force_text(v) for v in value])\n        else:\n            value = ''\n        return super(ManyToManyRawIdWidget, self).render(name, value, attrs)\n\n    def url_parameters(self):\n        return self.base_url_parameters()\n\n    def label_for_value(self, value):\n        return ''\n\n    def value_from_datadict(self, data, files, name):\n        value = data.get(name)\n        if value:\n            return value.split(',')", "target": 0}, {"function": "class RelatedFieldWidgetWrapper(forms.Widget):\n    \"\"\"\n    This class is a wrapper to a given widget to add the add icon for the\n    admin interface.\n    \"\"\"\n    def __init__(self, widget, rel, admin_site, can_add_related=None):\n        self.is_hidden = widget.is_hidden\n        self.needs_multipart_form = widget.needs_multipart_form\n        self.attrs = widget.attrs\n        self.choices = widget.choices\n        self.widget = widget\n        self.rel = rel\n        # Backwards compatible check for whether a user can add related\n        # objects.\n        if can_add_related is None:\n            can_add_related = rel.to in admin_site._registry\n        self.can_add_related = can_add_related\n        # so we can check if the related object is registered with this AdminSite\n        self.admin_site = admin_site\n\n    def __deepcopy__(self, memo):\n        obj = copy.copy(self)\n        obj.widget = copy.deepcopy(self.widget, memo)\n        obj.attrs = self.widget.attrs\n        memo[id(self)] = obj\n        return obj\n\n    @property\n    def media(self):\n        return self.widget.media\n\n    def render(self, name, value, *args, **kwargs):\n        rel_to = self.rel.to\n        info = (rel_to._meta.app_label, rel_to._meta.model_name)\n        self.widget.choices = self.choices\n        output = [self.widget.render(name, value, *args, **kwargs)]\n        if self.can_add_related:\n            related_url = reverse('admin:%s_%s_add' % info, current_app=self.admin_site.name)\n            # TODO: \"add_id_\" is hard-coded here. This should instead use the\n            # correct API to determine the ID dynamically.\n            output.append('<a href=\"%s\" class=\"add-another\" id=\"add_id_%s\" onclick=\"return showAddAnotherPopup(this);\"> '\n                          % (related_url, name))\n            output.append('<img src=\"%s\" width=\"10\" height=\"10\" alt=\"%s\"/></a>'\n                          % (static('admin/img/icon_addlink.gif'), _('Add Another')))\n        return mark_safe(''.join(output))\n\n    def build_attrs(self, extra_attrs=None, **kwargs):\n        \"Helper function for building an attribute dictionary.\"\n        self.attrs = self.widget.build_attrs(extra_attrs=None, **kwargs)\n        return self.attrs\n\n    def value_from_datadict(self, data, files, name):\n        return self.widget.value_from_datadict(data, files, name)\n\n    def id_for_label(self, id_):\n        return self.widget.id_for_label(id_)", "target": 0}, {"function": "class AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vLargeTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextareaWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextInputWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminEmailInputWidget(forms.EmailInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminEmailInputWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminURLFieldWidget(forms.URLInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vURLField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminURLFieldWidget, self).__init__(attrs=final_attrs)\n\n    def render(self, name, value, attrs=None):\n        html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n        if value:\n            value = force_text(self._format_value(value))\n            final_attrs = {'href': mark_safe(smart_urlquote(value))}\n            html = format_html(\n                '<p class=\"url\">{0} <a {1}>{2}</a><br />{3} {4}</p>',\n                _('Currently:'), flatatt(final_attrs), value,\n                _('Change:'), html\n            )\n        return html", "target": 1, "line": "@@  -305,9 +305,9  @@ def render(self, name, value, attrs=None):\n         html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n         if value:\n             value = force_text(self._format_value(value))\n-            final_attrs = {'href': mark_safe(smart_urlquote(value))}\n+            final_attrs = {'href': smart_urlquote(value)}\n             html = format_html(\n-                '<p class=\"url\">{0} <a {1}>{2}</a><br />{3} {4}</p>',\n+                '<p class=\"url\">{0} <a{1}>{2}</a><br />{3} {4}</p>',\n                 _('Currently:'), flatatt(final_attrs), value,\n                 _('Change:'), html\n             )"}, {"function": "class AdminIntegerFieldWidget(forms.TextInput):\n    class_name = 'vIntegerField'\n\n    def __init__(self, attrs=None):\n        final_attrs = {'class': self.class_name}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminIntegerFieldWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = 'vBigIntegerField'", "target": 0}, {"function": "class AdminCommaSeparatedIntegerFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vCommaSeparatedIntegerField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminCommaSeparatedIntegerFieldWidget, self).__init__(attrs=final_attrs)", "target": 0}], "function_after": [{"function": "class FilteredSelectMultiple(forms.SelectMultiple):\n    \"\"\"\n    A SelectMultiple with a JavaScript filter interface.\n\n    Note that the resulting JavaScript assumes that the jsi18n\n    catalog has been loaded in the page\n    \"\"\"\n    @property\n    def media(self):\n        js = [\"core.js\", \"SelectBox.js\", \"SelectFilter2.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n        self.verbose_name = verbose_name\n        self.is_stacked = is_stacked\n        super(FilteredSelectMultiple, self).__init__(attrs, choices)\n\n    def render(self, name, value, attrs=None, choices=()):\n        if attrs is None:\n            attrs = {}\n        attrs['class'] = 'selectfilter'\n        if self.is_stacked:\n            attrs['class'] += 'stacked'\n        output = [super(FilteredSelectMultiple, self).render(name, value, attrs, choices)]\n        output.append('<script type=\"text/javascript\">addEvent(window, \"load\", function(e) {')\n        # TODO: \"id_\" is hard-coded here. This should instead use the correct\n        # API to determine the ID dynamically.\n        output.append('SelectFilter.init(\"id_%s\", \"%s\", %s, \"%s\"); });</script>\\n'\n            % (name, self.verbose_name.replace('\"', '\\\\\"'), int(self.is_stacked), static('admin/')))\n        return mark_safe(''.join(output))", "target": 0}, {"function": "class AdminDateWidget(forms.DateInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vDateField', 'size': '10'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminDateWidget, self).__init__(attrs=final_attrs, format=format)", "target": 0}, {"function": "class AdminTimeWidget(forms.TimeInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vTimeField', 'size': '8'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTimeWidget, self).__init__(attrs=final_attrs, format=format)", "target": 0}, {"function": "class AdminSplitDateTime(forms.SplitDateTimeWidget):\n    \"\"\"\n    A SplitDateTime Widget that has some admin-specific styling.\n    \"\"\"\n    def __init__(self, attrs=None):\n        widgets = [AdminDateWidget, AdminTimeWidget]\n        # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n        # we want to define widgets.\n        forms.MultiWidget.__init__(self, widgets, attrs)\n\n    def format_output(self, rendered_widgets):\n        return format_html('<p class=\"datetime\">{0} {1}<br />{2} {3}</p>',\n                           _('Date:'), rendered_widgets[0],\n                           _('Time:'), rendered_widgets[1])", "target": 0}, {"function": "class AdminRadioFieldRenderer(RadioFieldRenderer):\n    def render(self):\n        \"\"\"Outputs a <ul> for this set of radio fields.\"\"\"\n        return format_html('<ul{0}>\\n{1}\\n</ul>',\n                           flatatt(self.attrs),\n                           format_html_join('\\n', '<li>{0}</li>',\n                                            ((force_text(w),) for w in self)))", "target": 0}, {"function": "class AdminRadioSelect(forms.RadioSelect):\n    renderer = AdminRadioFieldRenderer", "target": 0}, {"function": "class AdminFileWidget(forms.ClearableFileInput):\n    template_with_initial = ('<p class=\"file-upload\">%s</p>'\n                            % forms.ClearableFileInput.template_with_initial)\n    template_with_clear = ('<span class=\"clearable-file-input\">%s</span>'\n                           % forms.ClearableFileInput.template_with_clear)", "target": 0}, {"function": "def url_params_from_lookup_dict(lookups):\n    \"\"\"\n    Converts the type of lookups specified in a ForeignKey limit_choices_to\n    attribute to a dictionary of query parameters\n    \"\"\"\n    params = {}\n    if lookups and hasattr(lookups, 'items'):\n        items = []\n        for k, v in lookups.items():\n            if callable(v):\n                v = v()\n            if isinstance(v, (tuple, list)):\n                v = ','.join([str(x) for x in v])\n            elif isinstance(v, bool):\n                # See django.db.fields.BooleanField.get_prep_lookup\n                v = ('0', '1')[v]\n            else:\n                v = six.text_type(v)\n            items.append((k, v))\n        params.update(dict(items))\n    return params", "target": 0}, {"function": "class ForeignKeyRawIdWidget(forms.TextInput):\n    \"\"\"\n    A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n    in a <select> box.\n    \"\"\"\n    def __init__(self, rel, admin_site, attrs=None, using=None):\n        self.rel = rel\n        self.admin_site = admin_site\n        self.db = using\n        super(ForeignKeyRawIdWidget, self).__init__(attrs)\n\n    def render(self, name, value, attrs=None):\n        rel_to = self.rel.to\n        if attrs is None:\n            attrs = {}\n        extra = []\n        if rel_to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            related_url = reverse('admin:%s_%s_changelist' %\n                                    (rel_to._meta.app_label,\n                                    rel_to._meta.model_name),\n                                    current_app=self.admin_site.name)\n\n            params = self.url_parameters()\n            if params:\n                url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])\n            else:\n                url = ''\n            if \"class\" not in attrs:\n                attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.\n            # TODO: \"lookup_id_\" is hard-coded here. This should instead use\n            # the correct API to determine the ID dynamically.\n            extra.append('<a href=\"%s%s\" class=\"related-lookup\" id=\"lookup_id_%s\" onclick=\"return showRelatedObjectLookupPopup(this);\"> '\n                            % (related_url, url, name))\n            extra.append('<img src=\"%s\" width=\"16\" height=\"16\" alt=\"%s\" /></a>'\n                            % (static('admin/img/selector-search.gif'), _('Lookup')))\n        output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra\n        if value:\n            output.append(self.label_for_value(value))\n        return mark_safe(''.join(output))\n\n    def base_url_parameters(self):\n        return url_params_from_lookup_dict(self.rel.limit_choices_to)\n\n    def url_parameters(self):\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n        params = self.base_url_parameters()\n        params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n        return params\n\n    def label_for_value(self, value):\n        key = self.rel.get_related_field().name\n        try:\n            obj = self.rel.to._default_manager.using(self.db).get(**{key: value})\n            return '&nbsp;<strong>%s</strong>' % escape(Truncator(obj).words(14, truncate='...'))\n        except (ValueError, self.rel.to.DoesNotExist):\n            return ''", "target": 0}, {"function": "class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n    \"\"\"\n    A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n    in a <select multiple> box.\n    \"\"\"\n    def render(self, name, value, attrs=None):\n        if attrs is None:\n            attrs = {}\n        if self.rel.to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            attrs['class'] = 'vManyToManyRawIdAdminField'\n        if value:\n            value = ','.join([force_text(v) for v in value])\n        else:\n            value = ''\n        return super(ManyToManyRawIdWidget, self).render(name, value, attrs)\n\n    def url_parameters(self):\n        return self.base_url_parameters()\n\n    def label_for_value(self, value):\n        return ''\n\n    def value_from_datadict(self, data, files, name):\n        value = data.get(name)\n        if value:\n            return value.split(',')", "target": 0}, {"function": "class RelatedFieldWidgetWrapper(forms.Widget):\n    \"\"\"\n    This class is a wrapper to a given widget to add the add icon for the\n    admin interface.\n    \"\"\"\n    def __init__(self, widget, rel, admin_site, can_add_related=None):\n        self.is_hidden = widget.is_hidden\n        self.needs_multipart_form = widget.needs_multipart_form\n        self.attrs = widget.attrs\n        self.choices = widget.choices\n        self.widget = widget\n        self.rel = rel\n        # Backwards compatible check for whether a user can add related\n        # objects.\n        if can_add_related is None:\n            can_add_related = rel.to in admin_site._registry\n        self.can_add_related = can_add_related\n        # so we can check if the related object is registered with this AdminSite\n        self.admin_site = admin_site\n\n    def __deepcopy__(self, memo):\n        obj = copy.copy(self)\n        obj.widget = copy.deepcopy(self.widget, memo)\n        obj.attrs = self.widget.attrs\n        memo[id(self)] = obj\n        return obj\n\n    @property\n    def media(self):\n        return self.widget.media\n\n    def render(self, name, value, *args, **kwargs):\n        rel_to = self.rel.to\n        info = (rel_to._meta.app_label, rel_to._meta.model_name)\n        self.widget.choices = self.choices\n        output = [self.widget.render(name, value, *args, **kwargs)]\n        if self.can_add_related:\n            related_url = reverse('admin:%s_%s_add' % info, current_app=self.admin_site.name)\n            # TODO: \"add_id_\" is hard-coded here. This should instead use the\n            # correct API to determine the ID dynamically.\n            output.append('<a href=\"%s\" class=\"add-another\" id=\"add_id_%s\" onclick=\"return showAddAnotherPopup(this);\"> '\n                          % (related_url, name))\n            output.append('<img src=\"%s\" width=\"10\" height=\"10\" alt=\"%s\"/></a>'\n                          % (static('admin/img/icon_addlink.gif'), _('Add Another')))\n        return mark_safe(''.join(output))\n\n    def build_attrs(self, extra_attrs=None, **kwargs):\n        \"Helper function for building an attribute dictionary.\"\n        self.attrs = self.widget.build_attrs(extra_attrs=None, **kwargs)\n        return self.attrs\n\n    def value_from_datadict(self, data, files, name):\n        return self.widget.value_from_datadict(data, files, name)\n\n    def id_for_label(self, id_):\n        return self.widget.id_for_label(id_)", "target": 0}, {"function": "class AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vLargeTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextareaWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextInputWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminEmailInputWidget(forms.EmailInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminEmailInputWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminURLFieldWidget(forms.URLInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vURLField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminURLFieldWidget, self).__init__(attrs=final_attrs)\n\n    def render(self, name, value, attrs=None):\n        html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n        if value:\n            value = force_text(self._format_value(value))\n            final_attrs = {'href': smart_urlquote(value)}\n            html = format_html(\n                '<p class=\"url\">{0} <a{1}>{2}</a><br />{3} {4}</p>',\n                _('Currently:'), flatatt(final_attrs), value,\n                _('Change:'), html\n            )\n        return html", "target": 0}, {"function": "class AdminIntegerFieldWidget(forms.TextInput):\n    class_name = 'vIntegerField'\n\n    def __init__(self, attrs=None):\n        final_attrs = {'class': self.class_name}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminIntegerFieldWidget, self).__init__(attrs=final_attrs)", "target": 0}, {"function": "class AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = 'vBigIntegerField'", "target": 0}, {"function": "class AdminCommaSeparatedIntegerFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vCommaSeparatedIntegerField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminCommaSeparatedIntegerFieldWidget, self).__init__(attrs=final_attrs)", "target": 0}]}, {"raw_url": "https://github.com/django/django/raw/cbe6d5568f4f5053ed7228ca3c3d0cce77cf9560/tests%2Fadmin_widgets%2Ftests.py", "code": "# encoding: utf-8\nfrom __future__ import unicode_literals\n\nfrom datetime import datetime, timedelta\nfrom unittest import TestCase\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.contrib import admin\nfrom django.contrib.admin import widgets\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.core.files.storage import default_storage\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom django.db.models import CharField, DateField\nfrom django.test import TestCase as DjangoTestCase\nfrom django.test.utils import override_settings\nfrom django.utils import six\nfrom django.utils import translation\nfrom django.utils.html import conditional_escape\n\nfrom . import models\nfrom .widgetadmin import site as widget_admin_site\n\n\nadmin_static_prefix = lambda: {\n    'ADMIN_STATIC_PREFIX': \"%sadmin/\" % settings.STATIC_URL,\n}\n\nclass AdminFormfieldForDBFieldTests(TestCase):\n    \"\"\"\n    Tests for correct behavior of ModelAdmin.formfield_for_dbfield\n    \"\"\"\n\n    def assertFormfield(self, model, fieldname, widgetclass, **admin_overrides):\n        \"\"\"\n        Helper to call formfield_for_dbfield for a given model and field name\n        and verify that the returned formfield is appropriate.\n        \"\"\"\n        # Override any settings on the model admin\n        class MyModelAdmin(admin.ModelAdmin):\n            pass\n        for k in admin_overrides:\n            setattr(MyModelAdmin, k, admin_overrides[k])\n\n        # Construct the admin, and ask it for a formfield\n        ma = MyModelAdmin(model, admin.site)\n        ff = ma.formfield_for_dbfield(model._meta.get_field(fieldname), request=None)\n\n        # \"unwrap\" the widget wrapper, if needed\n        if isinstance(ff.widget, widgets.RelatedFieldWidgetWrapper):\n            widget = ff.widget.widget\n        else:\n            widget = ff.widget\n\n        # Check that we got a field of the right type\n        self.assertTrue(\n            isinstance(widget, widgetclass),\n            \"Wrong widget for %s.%s: expected %s, got %s\" % \\\n                (model.__class__.__name__, fieldname, widgetclass, type(widget))\n        )\n\n        # Return the formfield so that other tests can continue\n        return ff\n\n    def testDateField(self):\n        self.assertFormfield(models.Event, 'start_date', widgets.AdminDateWidget)\n\n    def testDateTimeField(self):\n        self.assertFormfield(models.Member, 'birthdate', widgets.AdminSplitDateTime)\n\n    def testTimeField(self):\n        self.assertFormfield(models.Event, 'start_time', widgets.AdminTimeWidget)\n\n    def testTextField(self):\n        self.assertFormfield(models.Event, 'description', widgets.AdminTextareaWidget)\n\n    def testURLField(self):\n        self.assertFormfield(models.Event, 'link', widgets.AdminURLFieldWidget)\n\n    def testIntegerField(self):\n        self.assertFormfield(models.Event, 'min_age', widgets.AdminIntegerFieldWidget)\n\n    def testCharField(self):\n        self.assertFormfield(models.Member, 'name', widgets.AdminTextInputWidget)\n\n    def testEmailField(self):\n        self.assertFormfield(models.Member, 'email', widgets.AdminEmailInputWidget)\n\n    def testFileField(self):\n        self.assertFormfield(models.Album, 'cover_art', widgets.AdminFileWidget)\n\n    def testForeignKey(self):\n        self.assertFormfield(models.Event, 'main_band', forms.Select)\n\n    def testRawIDForeignKey(self):\n        self.assertFormfield(models.Event, 'main_band', widgets.ForeignKeyRawIdWidget,\n                             raw_id_fields=['main_band'])\n\n    def testRadioFieldsForeignKey(self):\n        ff = self.assertFormfield(models.Event, 'main_band', widgets.AdminRadioSelect,\n                                  radio_fields={'main_band':admin.VERTICAL})\n        self.assertEqual(ff.empty_label, None)\n\n    def testManyToMany(self):\n        self.assertFormfield(models.Band, 'members', forms.SelectMultiple)\n\n    def testRawIDManyTOMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.ManyToManyRawIdWidget,\n                             raw_id_fields=['members'])\n\n    def testFilteredManyToMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.FilteredSelectMultiple,\n                             filter_vertical=['members'])\n\n    def testFormfieldOverrides(self):\n        self.assertFormfield(models.Event, 'start_date', forms.TextInput,\n                             formfield_overrides={DateField: {'widget': forms.TextInput}})\n\n    def testFormfieldOverridesWidgetInstances(self):\n        \"\"\"\n        Test that widget instances in formfield_overrides are not shared between\n        different fields. (#19423)\n        \"\"\"\n        class BandAdmin(admin.ModelAdmin):\n            formfield_overrides = {\n                CharField: {'widget': forms.TextInput(attrs={'size':'10'})}\n            }\n        ma = BandAdmin(models.Band, admin.site)\n        f1 = ma.formfield_for_dbfield(models.Band._meta.get_field('name'), request=None)\n        f2 = ma.formfield_for_dbfield(models.Band._meta.get_field('style'), request=None)\n        self.assertNotEqual(f1.widget, f2.widget)\n        self.assertEqual(f1.widget.attrs['maxlength'], '100')\n        self.assertEqual(f2.widget.attrs['maxlength'], '20')\n        self.assertEqual(f2.widget.attrs['size'], '10')\n\n    def testFieldWithChoices(self):\n        self.assertFormfield(models.Member, 'gender', forms.Select)\n\n    def testChoicesWithRadioFields(self):\n        self.assertFormfield(models.Member, 'gender', widgets.AdminRadioSelect,\n                             radio_fields={'gender':admin.VERTICAL})\n\n    def testInheritance(self):\n        self.assertFormfield(models.Album, 'backside_art', widgets.AdminFileWidget)\n\n    def test_m2m_widgets(self):\n        \"\"\"m2m fields help text as it applies to admin app (#9321).\"\"\"\n        class AdvisorAdmin(admin.ModelAdmin):\n            filter_vertical=['companies']\n\n        self.assertFormfield(models.Advisor, 'companies', widgets.FilteredSelectMultiple,\n                             filter_vertical=['companies'])\n        ma = AdvisorAdmin(models.Advisor, admin.site)\n        f = ma.formfield_for_dbfield(models.Advisor._meta.get_field('companies'), request=None)\n        self.assertEqual(six.text_type(f.help_text), ' Hold down \"Control\", or \"Command\" on a Mac, to select more than one.')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminFormfieldForDBFieldWithRequestTests(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n\n    def testFilterChoicesByRequestUser(self):\n        \"\"\"\n        Ensure the user can only see their own cars in the foreign key dropdown.\n        \"\"\"\n        self.client.login(username=\"super\", password=\"secret\")\n        response = self.client.get(\"/widget_admin/admin_widgets/cartire/add/\")\n        self.assertNotContains(response, \"BMW M3\")\n        self.assertContains(response, \"Volkswagon Passat\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyWidgetChangeList(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_changelist_foreignkey(self):\n        response = self.client.get('%s/admin_widgets/car/' % self.admin_root)\n        self.assertContains(response, '%s/auth/user/add/' % self.admin_root)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyRawIdWidget(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_nonexistent_target_id(self):\n        band = models.Band.objects.create(name='Bogey Blues')\n        pk = band.pk\n        band.delete()\n        post_data = {\n            \"main_band\": '%s' % pk,\n        }\n        # Try posting with a non-existent pk in a raw id field: this\n        # should result in an error message, not a server exception.\n        response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n            post_data)\n        self.assertContains(response,\n            'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_invalid_target_id(self):\n\n        for test_str in ('I\u00f1t\u00ebrn\u00e2ti\u00f4n\u00e0liz\u00e6ti\u00f8n', \"1234'\", -1234):\n            # This should result in an error message, not a server exception.\n            response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n                {\"main_band\": test_str})\n\n            self.assertContains(response,\n                'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_url_params_from_lookup_dict_any_iterable(self):\n        lookup1 = widgets.url_params_from_lookup_dict({'color__in': ('red', 'blue')})\n        lookup2 = widgets.url_params_from_lookup_dict({'color__in': ['red', 'blue']})\n        self.assertEqual(lookup1, {'color__in': 'red,blue'})\n        self.assertEqual(lookup1, lookup2)\n\n    def test_url_params_from_lookup_dict_callable(self):\n        def my_callable():\n            return 'works'\n        lookup1 = widgets.url_params_from_lookup_dict({'myfield': my_callable})\n        lookup2 = widgets.url_params_from_lookup_dict({'myfield': my_callable()})\n        self.assertEqual(lookup1, lookup2)\n\n\nclass FilteredSelectMultipleWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.FilteredSelectMultiple('test', False)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilter\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 0, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\n    def test_stacked_render(self):\n        w = widgets.FilteredSelectMultiple('test', True)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilterstacked\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 1, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\nclass AdminDateWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminDateWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test\" size=\"10\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminDateWidget(attrs={'size': 20, 'class': 'myDateField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"myDateField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminTimeWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminTimeWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test\" size=\"8\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminTimeWidget(attrs={'size': 20, 'class': 'myTimeField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"myTimeField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminSplitDateTimeWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminSplitDateTime()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<p class=\"datetime\">Date: <input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Time: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n        )\n\n    def test_localization(self):\n        w = widgets.AdminSplitDateTime()\n\n        with self.settings(USE_L10N=True):\n            with translation.override('de-at'):\n                w.is_localized = True\n                self.assertHTMLEqual(\n                    conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n                    '<p class=\"datetime\">Datum: <input value=\"01.12.2007\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Zeit: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n                )\n\n\nclass AdminURLWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', '')),\n            '<input class=\"vURLField\" name=\"test\" type=\"url\" />'\n        )\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example.com')),\n            '<p class=\"url\">Currently:<a href=\"http://example.com\">http://example.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com\" /></p>'\n        )\n\n    def test_render_idn(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com')),\n            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com\">http://example-\u00e4\u00fc\u00f6.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com\" /></p>'\n        )\n\n    def test_render_quoting(self):\n        # WARNING: Don't use assertHTMLEqual in that testcase!\n        # assertHTMLEqual will get rid of some escapes which are tested here!\n        w = widgets.AdminURLFieldWidget()\n        self.assertEqual(\n            w.render('test', 'http://example.com/<sometag>some text</sometag>'),\n            '<p class=\"url\">Currently: <a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n        )\n        self.assertEqual(\n            w.render('test', 'http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>'),\n            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n        )\n        self.assertEqual(\n            w.render('test', 'http://www.example.com/%C3%A4\"><script>alert(\"XSS!\")</script>\"'),\n            '<p class=\"url\">Currently: <a href=\"http://www.example.com/%C3%A4%22%3E%3Cscript%3Ealert(%22XSS!%22)%3C/script%3E%22\">http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;\" /></p>'\n        )\n\n\nclass AdminFileWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        album = band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n\n        w = widgets.AdminFileWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', album.cover_art)),\n            '<p class=\"file-upload\">Currently: <a href=\"%(STORAGE_URL)salbums/hybrid_theory.jpg\">albums\\hybrid_theory.jpg</a> <span class=\"clearable-file-input\"><input type=\"checkbox\" name=\"test-clear\" id=\"test-clear_id\" /> <label for=\"test-clear_id\">Clear</label></span><br />Change: <input type=\"file\" name=\"test\" /></p>' % { 'STORAGE_URL': default_storage.url('') },\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', SimpleUploadedFile('test', b'content'))),\n            '<input type=\"file\" name=\"test\" />',\n        )\n\n\nclass ForeignKeyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n        rel = models.Album._meta.get_field('band').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', band.pk, attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(bandpk)s\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/band/?t=id\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Linkin Park</strong>' % dict(admin_static_prefix(), bandpk=band.pk)\n        )\n\n    def test_relations_to_non_primary_key(self):\n        # Check that ForeignKeyRawIdWidget works with fields which aren't\n        # related to the model's primary key.\n        apple = models.Inventory.objects.create(barcode=86, name='Apple')\n        models.Inventory.objects.create(barcode=22, name='Pear')\n        core = models.Inventory.objects.create(\n            barcode=87, name='Core', parent=apple\n        )\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            w.render('test', core.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"86\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Apple</strong>' % admin_static_prefix()\n        )\n\n    def test_fk_related_model_not_in_admin(self):\n        # FK to a model not registered with admin site. Raw ID widget should\n        # have no magnifying glass link. See #16542\n        big_honeycomb = models.Honeycomb.objects.create(location='Old tree')\n        big_honeycomb.bee_set.create()\n        rel = models.Bee._meta.get_field('honeycomb').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('honeycomb_widget', big_honeycomb.pk, attrs={})),\n            '<input type=\"text\" name=\"honeycomb_widget\" value=\"%(hcombpk)s\" />&nbsp;<strong>Honeycomb object</strong>' % {'hcombpk': big_honeycomb.pk}\n        )\n\n    def test_fk_to_self_model_not_in_admin(self):\n        # FK to self, not registered with admin site. Raw ID widget should have\n        # no magnifying glass link. See #16542\n        subject1 = models.Individual.objects.create(name='Subject #1')\n        models.Individual.objects.create(name='Child', parent=subject1)\n        rel = models.Individual._meta.get_field('parent').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('individual_widget', subject1.pk, attrs={})),\n            '<input type=\"text\" name=\"individual_widget\" value=\"%(subj1pk)s\" />&nbsp;<strong>Individual object</strong>' % {'subj1pk': subject1.pk}\n        )\n\n    def test_proper_manager_for_label_lookup(self):\n        # see #9258\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n\n        hidden = models.Inventory.objects.create(\n            barcode=93, name='Hidden', hidden=True\n        )\n        child_of_hidden = models.Inventory.objects.create(\n            barcode=94, name='Child of hidden', parent=hidden\n        )\n        self.assertHTMLEqual(\n            w.render('test', child_of_hidden.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"93\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Hidden</strong>' % admin_static_prefix()\n        )\n\n\nclass ManyToManyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n\n        m1 = models.Member.objects.create(name='Chester')\n        m2 = models.Member.objects.create(name='Mike')\n        band.members.add(m1, m2)\n        rel = models.Band._meta.get_field('members').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk, m2.pk], attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s,%(m2pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"/static/admin/img/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk, m2pk=m2.pk)\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk])),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk)\n        )\n\n    def test_m2m_related_model_not_in_admin(self):\n        # M2M relationship with model not registered with admin site. Raw ID\n        # widget should have no magnifying glass link. See #16542\n        consultor1 = models.Advisor.objects.create(name='Rockstar Techie')\n\n        c1 = models.Company.objects.create(name='Doodle')\n        c2 = models.Company.objects.create(name='Pear')\n        consultor1.companies.add(c1, c2)\n        rel = models.Advisor._meta.get_field('companies').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget1', [c1.pk, c2.pk], attrs={})),\n            '<input type=\"text\" name=\"company_widget1\" value=\"%(c1pk)s,%(c2pk)s\" />' % {'c1pk': c1.pk, 'c2pk': c2.pk}\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget2', [c1.pk])),\n            '<input type=\"text\" name=\"company_widget2\" value=\"%(c1pk)s\" />' % {'c1pk': c1.pk}\n        )\n\nclass RelatedFieldWidgetWrapperTests(DjangoTestCase):\n    def test_no_can_add_related(self):\n        rel = models.Individual._meta.get_field('parent').rel\n        w = widgets.AdminRadioSelect()\n        # Used to fail with a name error.\n        w = widgets.RelatedFieldWidgetWrapper(w, rel, widget_admin_site)\n        self.assertFalse(w.can_add_related)\n\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass DateTimePickerSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def test_show_hide_date_time_picker_widgets(self):\n        \"\"\"\n        Ensure that pressing the ESC key closes the date and time picker\n        widgets.\n        Refs #17064.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        # Open a page that has a date and time picker widgets\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/admin_widgets/member/add/'))\n\n        # First, with the date picker widget ---------------------------------\n        # Check that the date picker is hidden\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n        # Click the calendar icon\n        self.selenium.find_element_by_id('calendarlink0').click()\n        # Check that the date picker is visible\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the date picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n\n        # Then, with the time picker widget ----------------------------------\n        # Check that the time picker is hidden\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n        # Click the time icon\n        self.selenium.find_element_by_id('clocklink0').click()\n        # Check that the time picker is visible\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the time picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n\nclass DateTimePickerSeleniumChromeTests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass DateTimePickerSeleniumIETests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(TIME_ZONE='Asia/Singapore')\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass DateTimePickerShortcutsSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def test_date_time_picker_shortcuts(self):\n        \"\"\"\n        Ensure that date/time/datetime picker shortcuts work in the current time zone.\n        Refs #20663.\n\n        This test case is fairly tricky, it relies on selenium still running the browser\n        in the default time zone \"America/Chicago\" despite `override_settings` changing\n        the time zone to \"Asia/Singapore\".\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url='/')\n\n        now = datetime.now()\n        error_margin = timedelta(seconds=10)\n\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/admin_widgets/member/add/'))\n\n        self.selenium.find_element_by_id('id_name').send_keys('test')\n\n        # Click on the \"today\" and \"now\" shortcuts.\n        shortcuts = self.selenium.find_elements_by_css_selector(\n            '.field-birthdate .datetimeshortcuts')\n\n        for shortcut in shortcuts:\n            shortcut.find_element_by_tag_name('a').click()\n\n        # Check that there is a time zone mismatch warning.\n        # Warning: This would effectively fail if the TIME_ZONE defined in the\n        # settings has the same UTC offset as \"Asia/Singapore\" because the\n        # mismatch warning would be rightfully missing from the page.\n        self.selenium.find_elements_by_css_selector(\n            '.field-birthdate .timezonewarning')\n\n        # Submit the form.\n        self.selenium.find_element_by_tag_name('form').submit()\n        self.wait_page_loaded()\n\n        # Make sure that \"now\" in javascript is within 10 seconds\n        # from \"now\" on the server side.\n        member = models.Member.objects.get(name='test')\n        self.assertGreater(member.birthdate, now - error_margin)\n        self.assertLess(member.birthdate, now + error_margin)\n\nclass DateTimePickerShortcutsSeleniumChromeTests(DateTimePickerShortcutsSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass DateTimePickerShortcutsSeleniumIETests(DateTimePickerShortcutsSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass HorizontalVerticalFilterSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def setUp(self):\n        self.lisa = models.Student.objects.create(name='Lisa')\n        self.john = models.Student.objects.create(name='John')\n        self.bob = models.Student.objects.create(name='Bob')\n        self.peter = models.Student.objects.create(name='Peter')\n        self.jenny = models.Student.objects.create(name='Jenny')\n        self.jason = models.Student.objects.create(name='Jason')\n        self.cliff = models.Student.objects.create(name='Cliff')\n        self.arthur = models.Student.objects.create(name='Arthur')\n        self.school = models.School.objects.create(name='School of Awesome')\n        super(HorizontalVerticalFilterSeleniumFirefoxTests, self).setUp()\n\n    def assertActiveButtons(self, mode, field_name, choose, remove,\n                             choose_all=None, remove_all=None):\n        choose_link = '#id_%s_add_link' % field_name\n        choose_all_link = '#id_%s_add_all_link' % field_name\n        remove_link = '#id_%s_remove_link' % field_name\n        remove_all_link = '#id_%s_remove_all_link' % field_name\n        self.assertEqual(self.has_css_class(choose_link, 'active'), choose)\n        self.assertEqual(self.has_css_class(remove_link, 'active'), remove)\n        if mode == 'horizontal':\n            self.assertEqual(self.has_css_class(choose_all_link, 'active'), choose_all)\n            self.assertEqual(self.has_css_class(remove_all_link, 'active'), remove_all)\n\n    def execute_basic_operations(self, mode, field_name):\n        from_box = '#id_%s_from' % field_name\n        to_box = '#id_%s_to' % field_name\n        choose_link = 'id_%s_add_link' % field_name\n        choose_all_link = 'id_%s_add_all_link' % field_name\n        remove_link = 'id_%s_remove_link' % field_name\n        remove_all_link = 'id_%s_remove_all_link' % field_name\n\n        # Initial positions ---------------------------------------------------\n        self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id)])\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        # Click 'Choose all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(choose_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Choose all' button in vertical mode, so individually\n            # select all options and click 'Choose'.\n            for option in self.selenium.find_elements_by_css_selector(from_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(choose_link).click()\n        self.assertSelectOptions(from_box, [])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertActiveButtons(mode, field_name, False, False, False, True)\n\n        # Click 'Remove all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(remove_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Remove all' button in vertical mode, so individually\n            # select all options and click 'Remove'.\n            for option in self.selenium.find_elements_by_css_selector(to_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(remove_link).click()\n        self.assertSelectOptions(from_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box, [])\n        self.assertActiveButtons(mode, field_name, False, False, True, False)\n\n        # Choose some options ------------------------------------------------\n        self.get_select_option(from_box, str(self.lisa.id)).click()\n        self.get_select_option(from_box, str(self.jason.id)).click()\n        self.get_select_option(from_box, str(self.bob.id)).click()\n        self.get_select_option(from_box, str(self.john.id)).click()\n        self.assertActiveButtons(mode, field_name, True, False, True, False)\n        self.selenium.find_element_by_id(choose_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.bob.id),\n                         str(self.jason.id), str(self.john.id)])\n\n        # Remove some options -------------------------------------------------\n        self.get_select_option(to_box, str(self.lisa.id)).click()\n        self.get_select_option(to_box, str(self.bob.id)).click()\n        self.assertActiveButtons(mode, field_name, False, True, True, True)\n        self.selenium.find_element_by_id(remove_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id)])\n\n        # Choose some more options --------------------------------------------\n        self.get_select_option(from_box, str(self.arthur.id)).click()\n        self.get_select_option(from_box, str(self.cliff.id)).click()\n        self.selenium.find_element_by_id(choose_link).click()\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id),\n                         str(self.arthur.id), str(self.cliff.id)])\n\n    def test_basic(self):\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n        self.wait_page_loaded()\n        self.execute_basic_operations('vertical', 'students')\n        self.execute_basic_operations('horizontal', 'alumni')\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id)  # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n\n    def test_filter(self):\n        \"\"\"\n        Ensure that typing in the search box filters out options displayed in\n        the 'from' box.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n\n        for field_name in ['students', 'alumni']:\n            from_box = '#id_%s_from' % field_name\n            to_box = '#id_%s_to' % field_name\n            choose_link = '#id_%s_add_link' % field_name\n            remove_link = '#id_%s_remove_link' % field_name\n            input = self.selenium.find_element_by_css_selector('#id_%s_input' % field_name)\n\n            # Initial values\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # Typing in some characters filters out non-matching options\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys('R')\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n\n            # Clearing the text box makes the other options reappear\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # -----------------------------------------------------------------\n            # Check that chosing a filtered option sends it properly to the\n            # 'to' box.\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            self.get_select_option(from_box, str(self.jason.id)).click()\n            self.selenium.find_element_by_css_selector(choose_link).click()\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.jason.id)])\n\n            self.get_select_option(to_box, str(self.lisa.id)).click()\n            self.selenium.find_element_by_css_selector(remove_link).click()\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n            input.send_keys([Keys.BACK_SPACE]) # Clear text box\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.john.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id) # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.jason, self.peter])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.jason, self.peter])\n\nclass HorizontalVerticalFilterSeleniumChromeTests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass HorizontalVerticalFilterSeleniumIETests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminRawIdWidgetSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def setUp(self):\n        models.Band.objects.create(id=42, name='Bogey Blues')\n        models.Band.objects.create(id=98, name='Green Potatoes')\n        super(AdminRawIdWidgetSeleniumFirefoxTests, self).setUp()\n\n    def test_foreignkey(self):\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/event/add/'))\n        main_window = self.selenium.current_window_handle\n\n        # No value has been selected yet\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_main_band').get_attribute('value'),\n            '')\n\n        # Open the popup window and click on a band\n        self.selenium.find_element_by_id('lookup_id_main_band').click()\n        self.selenium.switch_to_window('id_main_band')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Bogey Blues')\n        self.assertTrue('/band/42/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the selected band's id\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_main_band').get_attribute('value'),\n            '42')\n\n        # Reopen the popup window and click on another band\n        self.selenium.find_element_by_id('lookup_id_main_band').click()\n        self.selenium.switch_to_window('id_main_band')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Green Potatoes')\n        self.assertTrue('/band/98/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the other selected band's id\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_main_band').get_attribute('value'),\n            '98')\n\n    def test_many_to_many(self):\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/event/add/'))\n        main_window = self.selenium.current_window_handle\n\n        # No value has been selected yet\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'),\n            '')\n\n        # Open the popup window and click on a band\n        self.selenium.find_element_by_id('lookup_id_supporting_bands').click()\n        self.selenium.switch_to_window('id_supporting_bands')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Bogey Blues')\n        self.assertTrue('/band/42/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the selected band's id\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'),\n            '42')\n\n        # Reopen the popup window and click on another band\n        self.selenium.find_element_by_id('lookup_id_supporting_bands').click()\n        self.selenium.switch_to_window('id_supporting_bands')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Green Potatoes')\n        self.assertTrue('/band/98/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the two selected bands' ids\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'),\n            '42,98')\n\nclass AdminRawIdWidgetSeleniumChromeTests(AdminRawIdWidgetSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass AdminRawIdWidgetSeleniumIETests(AdminRawIdWidgetSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n", "code_before": "# encoding: utf-8\nfrom __future__ import unicode_literals\n\nfrom datetime import datetime, timedelta\nfrom unittest import TestCase\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.contrib import admin\nfrom django.contrib.admin import widgets\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.core.files.storage import default_storage\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom django.db.models import CharField, DateField\nfrom django.test import TestCase as DjangoTestCase\nfrom django.test.utils import override_settings\nfrom django.utils import six\nfrom django.utils import translation\nfrom django.utils.html import conditional_escape\n\nfrom . import models\nfrom .widgetadmin import site as widget_admin_site\n\n\nadmin_static_prefix = lambda: {\n    'ADMIN_STATIC_PREFIX': \"%sadmin/\" % settings.STATIC_URL,\n}\n\nclass AdminFormfieldForDBFieldTests(TestCase):\n    \"\"\"\n    Tests for correct behavior of ModelAdmin.formfield_for_dbfield\n    \"\"\"\n\n    def assertFormfield(self, model, fieldname, widgetclass, **admin_overrides):\n        \"\"\"\n        Helper to call formfield_for_dbfield for a given model and field name\n        and verify that the returned formfield is appropriate.\n        \"\"\"\n        # Override any settings on the model admin\n        class MyModelAdmin(admin.ModelAdmin):\n            pass\n        for k in admin_overrides:\n            setattr(MyModelAdmin, k, admin_overrides[k])\n\n        # Construct the admin, and ask it for a formfield\n        ma = MyModelAdmin(model, admin.site)\n        ff = ma.formfield_for_dbfield(model._meta.get_field(fieldname), request=None)\n\n        # \"unwrap\" the widget wrapper, if needed\n        if isinstance(ff.widget, widgets.RelatedFieldWidgetWrapper):\n            widget = ff.widget.widget\n        else:\n            widget = ff.widget\n\n        # Check that we got a field of the right type\n        self.assertTrue(\n            isinstance(widget, widgetclass),\n            \"Wrong widget for %s.%s: expected %s, got %s\" % \\\n                (model.__class__.__name__, fieldname, widgetclass, type(widget))\n        )\n\n        # Return the formfield so that other tests can continue\n        return ff\n\n    def testDateField(self):\n        self.assertFormfield(models.Event, 'start_date', widgets.AdminDateWidget)\n\n    def testDateTimeField(self):\n        self.assertFormfield(models.Member, 'birthdate', widgets.AdminSplitDateTime)\n\n    def testTimeField(self):\n        self.assertFormfield(models.Event, 'start_time', widgets.AdminTimeWidget)\n\n    def testTextField(self):\n        self.assertFormfield(models.Event, 'description', widgets.AdminTextareaWidget)\n\n    def testURLField(self):\n        self.assertFormfield(models.Event, 'link', widgets.AdminURLFieldWidget)\n\n    def testIntegerField(self):\n        self.assertFormfield(models.Event, 'min_age', widgets.AdminIntegerFieldWidget)\n\n    def testCharField(self):\n        self.assertFormfield(models.Member, 'name', widgets.AdminTextInputWidget)\n\n    def testEmailField(self):\n        self.assertFormfield(models.Member, 'email', widgets.AdminEmailInputWidget)\n\n    def testFileField(self):\n        self.assertFormfield(models.Album, 'cover_art', widgets.AdminFileWidget)\n\n    def testForeignKey(self):\n        self.assertFormfield(models.Event, 'main_band', forms.Select)\n\n    def testRawIDForeignKey(self):\n        self.assertFormfield(models.Event, 'main_band', widgets.ForeignKeyRawIdWidget,\n                             raw_id_fields=['main_band'])\n\n    def testRadioFieldsForeignKey(self):\n        ff = self.assertFormfield(models.Event, 'main_band', widgets.AdminRadioSelect,\n                                  radio_fields={'main_band':admin.VERTICAL})\n        self.assertEqual(ff.empty_label, None)\n\n    def testManyToMany(self):\n        self.assertFormfield(models.Band, 'members', forms.SelectMultiple)\n\n    def testRawIDManyTOMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.ManyToManyRawIdWidget,\n                             raw_id_fields=['members'])\n\n    def testFilteredManyToMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.FilteredSelectMultiple,\n                             filter_vertical=['members'])\n\n    def testFormfieldOverrides(self):\n        self.assertFormfield(models.Event, 'start_date', forms.TextInput,\n                             formfield_overrides={DateField: {'widget': forms.TextInput}})\n\n    def testFormfieldOverridesWidgetInstances(self):\n        \"\"\"\n        Test that widget instances in formfield_overrides are not shared between\n        different fields. (#19423)\n        \"\"\"\n        class BandAdmin(admin.ModelAdmin):\n            formfield_overrides = {\n                CharField: {'widget': forms.TextInput(attrs={'size':'10'})}\n            }\n        ma = BandAdmin(models.Band, admin.site)\n        f1 = ma.formfield_for_dbfield(models.Band._meta.get_field('name'), request=None)\n        f2 = ma.formfield_for_dbfield(models.Band._meta.get_field('style'), request=None)\n        self.assertNotEqual(f1.widget, f2.widget)\n        self.assertEqual(f1.widget.attrs['maxlength'], '100')\n        self.assertEqual(f2.widget.attrs['maxlength'], '20')\n        self.assertEqual(f2.widget.attrs['size'], '10')\n\n    def testFieldWithChoices(self):\n        self.assertFormfield(models.Member, 'gender', forms.Select)\n\n    def testChoicesWithRadioFields(self):\n        self.assertFormfield(models.Member, 'gender', widgets.AdminRadioSelect,\n                             radio_fields={'gender':admin.VERTICAL})\n\n    def testInheritance(self):\n        self.assertFormfield(models.Album, 'backside_art', widgets.AdminFileWidget)\n\n    def test_m2m_widgets(self):\n        \"\"\"m2m fields help text as it applies to admin app (#9321).\"\"\"\n        class AdvisorAdmin(admin.ModelAdmin):\n            filter_vertical=['companies']\n\n        self.assertFormfield(models.Advisor, 'companies', widgets.FilteredSelectMultiple,\n                             filter_vertical=['companies'])\n        ma = AdvisorAdmin(models.Advisor, admin.site)\n        f = ma.formfield_for_dbfield(models.Advisor._meta.get_field('companies'), request=None)\n        self.assertEqual(six.text_type(f.help_text), ' Hold down \"Control\", or \"Command\" on a Mac, to select more than one.')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminFormfieldForDBFieldWithRequestTests(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n\n    def testFilterChoicesByRequestUser(self):\n        \"\"\"\n        Ensure the user can only see their own cars in the foreign key dropdown.\n        \"\"\"\n        self.client.login(username=\"super\", password=\"secret\")\n        response = self.client.get(\"/widget_admin/admin_widgets/cartire/add/\")\n        self.assertNotContains(response, \"BMW M3\")\n        self.assertContains(response, \"Volkswagon Passat\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyWidgetChangeList(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_changelist_foreignkey(self):\n        response = self.client.get('%s/admin_widgets/car/' % self.admin_root)\n        self.assertContains(response, '%s/auth/user/add/' % self.admin_root)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyRawIdWidget(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_nonexistent_target_id(self):\n        band = models.Band.objects.create(name='Bogey Blues')\n        pk = band.pk\n        band.delete()\n        post_data = {\n            \"main_band\": '%s' % pk,\n        }\n        # Try posting with a non-existent pk in a raw id field: this\n        # should result in an error message, not a server exception.\n        response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n            post_data)\n        self.assertContains(response,\n            'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_invalid_target_id(self):\n\n        for test_str in ('I\u00f1t\u00ebrn\u00e2ti\u00f4n\u00e0liz\u00e6ti\u00f8n', \"1234'\", -1234):\n            # This should result in an error message, not a server exception.\n            response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n                {\"main_band\": test_str})\n\n            self.assertContains(response,\n                'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_url_params_from_lookup_dict_any_iterable(self):\n        lookup1 = widgets.url_params_from_lookup_dict({'color__in': ('red', 'blue')})\n        lookup2 = widgets.url_params_from_lookup_dict({'color__in': ['red', 'blue']})\n        self.assertEqual(lookup1, {'color__in': 'red,blue'})\n        self.assertEqual(lookup1, lookup2)\n\n    def test_url_params_from_lookup_dict_callable(self):\n        def my_callable():\n            return 'works'\n        lookup1 = widgets.url_params_from_lookup_dict({'myfield': my_callable})\n        lookup2 = widgets.url_params_from_lookup_dict({'myfield': my_callable()})\n        self.assertEqual(lookup1, lookup2)\n\n\nclass FilteredSelectMultipleWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.FilteredSelectMultiple('test', False)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilter\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 0, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\n    def test_stacked_render(self):\n        w = widgets.FilteredSelectMultiple('test', True)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilterstacked\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 1, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\nclass AdminDateWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminDateWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test\" size=\"10\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminDateWidget(attrs={'size': 20, 'class': 'myDateField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"myDateField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminTimeWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminTimeWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test\" size=\"8\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminTimeWidget(attrs={'size': 20, 'class': 'myTimeField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"myTimeField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminSplitDateTimeWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminSplitDateTime()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<p class=\"datetime\">Date: <input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Time: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n        )\n\n    def test_localization(self):\n        w = widgets.AdminSplitDateTime()\n\n        with self.settings(USE_L10N=True):\n            with translation.override('de-at'):\n                w.is_localized = True\n                self.assertHTMLEqual(\n                    conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n                    '<p class=\"datetime\">Datum: <input value=\"01.12.2007\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Zeit: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n                )\n\n\nclass AdminURLWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', '')),\n            '<input class=\"vURLField\" name=\"test\" type=\"url\" />'\n        )\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example.com')),\n            '<p class=\"url\">Currently:<a href=\"http://example.com\">http://example.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com\" /></p>'\n        )\n\n    def test_render_idn(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com')),\n            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com\">http://example-\u00e4\u00fc\u00f6.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com\" /></p>'\n        )\n\n    def test_render_quoting(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example.com/<sometag>some text</sometag>')),\n            '<p class=\"url\">Currently:<a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com/<sometag>some text</sometag>\" /></p>'\n        )\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>')),\n            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>\" /></p>'\n        )\n\n\nclass AdminFileWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        album = band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n\n        w = widgets.AdminFileWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', album.cover_art)),\n            '<p class=\"file-upload\">Currently: <a href=\"%(STORAGE_URL)salbums/hybrid_theory.jpg\">albums\\hybrid_theory.jpg</a> <span class=\"clearable-file-input\"><input type=\"checkbox\" name=\"test-clear\" id=\"test-clear_id\" /> <label for=\"test-clear_id\">Clear</label></span><br />Change: <input type=\"file\" name=\"test\" /></p>' % { 'STORAGE_URL': default_storage.url('') },\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', SimpleUploadedFile('test', b'content'))),\n            '<input type=\"file\" name=\"test\" />',\n        )\n\n\nclass ForeignKeyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n        rel = models.Album._meta.get_field('band').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', band.pk, attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(bandpk)s\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/band/?t=id\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Linkin Park</strong>' % dict(admin_static_prefix(), bandpk=band.pk)\n        )\n\n    def test_relations_to_non_primary_key(self):\n        # Check that ForeignKeyRawIdWidget works with fields which aren't\n        # related to the model's primary key.\n        apple = models.Inventory.objects.create(barcode=86, name='Apple')\n        models.Inventory.objects.create(barcode=22, name='Pear')\n        core = models.Inventory.objects.create(\n            barcode=87, name='Core', parent=apple\n        )\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            w.render('test', core.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"86\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Apple</strong>' % admin_static_prefix()\n        )\n\n    def test_fk_related_model_not_in_admin(self):\n        # FK to a model not registered with admin site. Raw ID widget should\n        # have no magnifying glass link. See #16542\n        big_honeycomb = models.Honeycomb.objects.create(location='Old tree')\n        big_honeycomb.bee_set.create()\n        rel = models.Bee._meta.get_field('honeycomb').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('honeycomb_widget', big_honeycomb.pk, attrs={})),\n            '<input type=\"text\" name=\"honeycomb_widget\" value=\"%(hcombpk)s\" />&nbsp;<strong>Honeycomb object</strong>' % {'hcombpk': big_honeycomb.pk}\n        )\n\n    def test_fk_to_self_model_not_in_admin(self):\n        # FK to self, not registered with admin site. Raw ID widget should have\n        # no magnifying glass link. See #16542\n        subject1 = models.Individual.objects.create(name='Subject #1')\n        models.Individual.objects.create(name='Child', parent=subject1)\n        rel = models.Individual._meta.get_field('parent').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('individual_widget', subject1.pk, attrs={})),\n            '<input type=\"text\" name=\"individual_widget\" value=\"%(subj1pk)s\" />&nbsp;<strong>Individual object</strong>' % {'subj1pk': subject1.pk}\n        )\n\n    def test_proper_manager_for_label_lookup(self):\n        # see #9258\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n\n        hidden = models.Inventory.objects.create(\n            barcode=93, name='Hidden', hidden=True\n        )\n        child_of_hidden = models.Inventory.objects.create(\n            barcode=94, name='Child of hidden', parent=hidden\n        )\n        self.assertHTMLEqual(\n            w.render('test', child_of_hidden.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"93\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Hidden</strong>' % admin_static_prefix()\n        )\n\n\nclass ManyToManyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n\n        m1 = models.Member.objects.create(name='Chester')\n        m2 = models.Member.objects.create(name='Mike')\n        band.members.add(m1, m2)\n        rel = models.Band._meta.get_field('members').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk, m2.pk], attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s,%(m2pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"/static/admin/img/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk, m2pk=m2.pk)\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk])),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk)\n        )\n\n    def test_m2m_related_model_not_in_admin(self):\n        # M2M relationship with model not registered with admin site. Raw ID\n        # widget should have no magnifying glass link. See #16542\n        consultor1 = models.Advisor.objects.create(name='Rockstar Techie')\n\n        c1 = models.Company.objects.create(name='Doodle')\n        c2 = models.Company.objects.create(name='Pear')\n        consultor1.companies.add(c1, c2)\n        rel = models.Advisor._meta.get_field('companies').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget1', [c1.pk, c2.pk], attrs={})),\n            '<input type=\"text\" name=\"company_widget1\" value=\"%(c1pk)s,%(c2pk)s\" />' % {'c1pk': c1.pk, 'c2pk': c2.pk}\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget2', [c1.pk])),\n            '<input type=\"text\" name=\"company_widget2\" value=\"%(c1pk)s\" />' % {'c1pk': c1.pk}\n        )\n\nclass RelatedFieldWidgetWrapperTests(DjangoTestCase):\n    def test_no_can_add_related(self):\n        rel = models.Individual._meta.get_field('parent').rel\n        w = widgets.AdminRadioSelect()\n        # Used to fail with a name error.\n        w = widgets.RelatedFieldWidgetWrapper(w, rel, widget_admin_site)\n        self.assertFalse(w.can_add_related)\n\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass DateTimePickerSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def test_show_hide_date_time_picker_widgets(self):\n        \"\"\"\n        Ensure that pressing the ESC key closes the date and time picker\n        widgets.\n        Refs #17064.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        # Open a page that has a date and time picker widgets\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/admin_widgets/member/add/'))\n\n        # First, with the date picker widget ---------------------------------\n        # Check that the date picker is hidden\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n        # Click the calendar icon\n        self.selenium.find_element_by_id('calendarlink0').click()\n        # Check that the date picker is visible\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the date picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n\n        # Then, with the time picker widget ----------------------------------\n        # Check that the time picker is hidden\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n        # Click the time icon\n        self.selenium.find_element_by_id('clocklink0').click()\n        # Check that the time picker is visible\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the time picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n\nclass DateTimePickerSeleniumChromeTests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass DateTimePickerSeleniumIETests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(TIME_ZONE='Asia/Singapore')\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass DateTimePickerShortcutsSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def test_date_time_picker_shortcuts(self):\n        \"\"\"\n        Ensure that date/time/datetime picker shortcuts work in the current time zone.\n        Refs #20663.\n\n        This test case is fairly tricky, it relies on selenium still running the browser\n        in the default time zone \"America/Chicago\" despite `override_settings` changing\n        the time zone to \"Asia/Singapore\".\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url='/')\n\n        now = datetime.now()\n        error_margin = timedelta(seconds=10)\n\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/admin_widgets/member/add/'))\n\n        self.selenium.find_element_by_id('id_name').send_keys('test')\n\n        # Click on the \"today\" and \"now\" shortcuts.\n        shortcuts = self.selenium.find_elements_by_css_selector(\n            '.field-birthdate .datetimeshortcuts')\n\n        for shortcut in shortcuts:\n            shortcut.find_element_by_tag_name('a').click()\n\n        # Check that there is a time zone mismatch warning.\n        # Warning: This would effectively fail if the TIME_ZONE defined in the\n        # settings has the same UTC offset as \"Asia/Singapore\" because the\n        # mismatch warning would be rightfully missing from the page.\n        self.selenium.find_elements_by_css_selector(\n            '.field-birthdate .timezonewarning')\n\n        # Submit the form.\n        self.selenium.find_element_by_tag_name('form').submit()\n        self.wait_page_loaded()\n\n        # Make sure that \"now\" in javascript is within 10 seconds\n        # from \"now\" on the server side.\n        member = models.Member.objects.get(name='test')\n        self.assertGreater(member.birthdate, now - error_margin)\n        self.assertLess(member.birthdate, now + error_margin)\n\nclass DateTimePickerShortcutsSeleniumChromeTests(DateTimePickerShortcutsSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass DateTimePickerShortcutsSeleniumIETests(DateTimePickerShortcutsSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass HorizontalVerticalFilterSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def setUp(self):\n        self.lisa = models.Student.objects.create(name='Lisa')\n        self.john = models.Student.objects.create(name='John')\n        self.bob = models.Student.objects.create(name='Bob')\n        self.peter = models.Student.objects.create(name='Peter')\n        self.jenny = models.Student.objects.create(name='Jenny')\n        self.jason = models.Student.objects.create(name='Jason')\n        self.cliff = models.Student.objects.create(name='Cliff')\n        self.arthur = models.Student.objects.create(name='Arthur')\n        self.school = models.School.objects.create(name='School of Awesome')\n        super(HorizontalVerticalFilterSeleniumFirefoxTests, self).setUp()\n\n    def assertActiveButtons(self, mode, field_name, choose, remove,\n                             choose_all=None, remove_all=None):\n        choose_link = '#id_%s_add_link' % field_name\n        choose_all_link = '#id_%s_add_all_link' % field_name\n        remove_link = '#id_%s_remove_link' % field_name\n        remove_all_link = '#id_%s_remove_all_link' % field_name\n        self.assertEqual(self.has_css_class(choose_link, 'active'), choose)\n        self.assertEqual(self.has_css_class(remove_link, 'active'), remove)\n        if mode == 'horizontal':\n            self.assertEqual(self.has_css_class(choose_all_link, 'active'), choose_all)\n            self.assertEqual(self.has_css_class(remove_all_link, 'active'), remove_all)\n\n    def execute_basic_operations(self, mode, field_name):\n        from_box = '#id_%s_from' % field_name\n        to_box = '#id_%s_to' % field_name\n        choose_link = 'id_%s_add_link' % field_name\n        choose_all_link = 'id_%s_add_all_link' % field_name\n        remove_link = 'id_%s_remove_link' % field_name\n        remove_all_link = 'id_%s_remove_all_link' % field_name\n\n        # Initial positions ---------------------------------------------------\n        self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id)])\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        # Click 'Choose all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(choose_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Choose all' button in vertical mode, so individually\n            # select all options and click 'Choose'.\n            for option in self.selenium.find_elements_by_css_selector(from_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(choose_link).click()\n        self.assertSelectOptions(from_box, [])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertActiveButtons(mode, field_name, False, False, False, True)\n\n        # Click 'Remove all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(remove_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Remove all' button in vertical mode, so individually\n            # select all options and click 'Remove'.\n            for option in self.selenium.find_elements_by_css_selector(to_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(remove_link).click()\n        self.assertSelectOptions(from_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box, [])\n        self.assertActiveButtons(mode, field_name, False, False, True, False)\n\n        # Choose some options ------------------------------------------------\n        self.get_select_option(from_box, str(self.lisa.id)).click()\n        self.get_select_option(from_box, str(self.jason.id)).click()\n        self.get_select_option(from_box, str(self.bob.id)).click()\n        self.get_select_option(from_box, str(self.john.id)).click()\n        self.assertActiveButtons(mode, field_name, True, False, True, False)\n        self.selenium.find_element_by_id(choose_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.bob.id),\n                         str(self.jason.id), str(self.john.id)])\n\n        # Remove some options -------------------------------------------------\n        self.get_select_option(to_box, str(self.lisa.id)).click()\n        self.get_select_option(to_box, str(self.bob.id)).click()\n        self.assertActiveButtons(mode, field_name, False, True, True, True)\n        self.selenium.find_element_by_id(remove_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id)])\n\n        # Choose some more options --------------------------------------------\n        self.get_select_option(from_box, str(self.arthur.id)).click()\n        self.get_select_option(from_box, str(self.cliff.id)).click()\n        self.selenium.find_element_by_id(choose_link).click()\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id),\n                         str(self.arthur.id), str(self.cliff.id)])\n\n    def test_basic(self):\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n        self.wait_page_loaded()\n        self.execute_basic_operations('vertical', 'students')\n        self.execute_basic_operations('horizontal', 'alumni')\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id)  # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n\n    def test_filter(self):\n        \"\"\"\n        Ensure that typing in the search box filters out options displayed in\n        the 'from' box.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n\n        for field_name in ['students', 'alumni']:\n            from_box = '#id_%s_from' % field_name\n            to_box = '#id_%s_to' % field_name\n            choose_link = '#id_%s_add_link' % field_name\n            remove_link = '#id_%s_remove_link' % field_name\n            input = self.selenium.find_element_by_css_selector('#id_%s_input' % field_name)\n\n            # Initial values\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # Typing in some characters filters out non-matching options\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys('R')\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n\n            # Clearing the text box makes the other options reappear\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # -----------------------------------------------------------------\n            # Check that chosing a filtered option sends it properly to the\n            # 'to' box.\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            self.get_select_option(from_box, str(self.jason.id)).click()\n            self.selenium.find_element_by_css_selector(choose_link).click()\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.jason.id)])\n\n            self.get_select_option(to_box, str(self.lisa.id)).click()\n            self.selenium.find_element_by_css_selector(remove_link).click()\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n            input.send_keys([Keys.BACK_SPACE]) # Clear text box\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.john.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id) # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.jason, self.peter])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.jason, self.peter])\n\nclass HorizontalVerticalFilterSeleniumChromeTests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass HorizontalVerticalFilterSeleniumIETests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminRawIdWidgetSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    available_apps = ['admin_widgets'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"admin_widgets.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def setUp(self):\n        models.Band.objects.create(id=42, name='Bogey Blues')\n        models.Band.objects.create(id=98, name='Green Potatoes')\n        super(AdminRawIdWidgetSeleniumFirefoxTests, self).setUp()\n\n    def test_foreignkey(self):\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/event/add/'))\n        main_window = self.selenium.current_window_handle\n\n        # No value has been selected yet\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_main_band').get_attribute('value'),\n            '')\n\n        # Open the popup window and click on a band\n        self.selenium.find_element_by_id('lookup_id_main_band').click()\n        self.selenium.switch_to_window('id_main_band')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Bogey Blues')\n        self.assertTrue('/band/42/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the selected band's id\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_main_band').get_attribute('value'),\n            '42')\n\n        # Reopen the popup window and click on another band\n        self.selenium.find_element_by_id('lookup_id_main_band').click()\n        self.selenium.switch_to_window('id_main_band')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Green Potatoes')\n        self.assertTrue('/band/98/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the other selected band's id\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_main_band').get_attribute('value'),\n            '98')\n\n    def test_many_to_many(self):\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/event/add/'))\n        main_window = self.selenium.current_window_handle\n\n        # No value has been selected yet\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'),\n            '')\n\n        # Open the popup window and click on a band\n        self.selenium.find_element_by_id('lookup_id_supporting_bands').click()\n        self.selenium.switch_to_window('id_supporting_bands')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Bogey Blues')\n        self.assertTrue('/band/42/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the selected band's id\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'),\n            '42')\n\n        # Reopen the popup window and click on another band\n        self.selenium.find_element_by_id('lookup_id_supporting_bands').click()\n        self.selenium.switch_to_window('id_supporting_bands')\n        self.wait_page_loaded()\n        link = self.selenium.find_element_by_link_text('Green Potatoes')\n        self.assertTrue('/band/98/' in link.get_attribute('href'))\n        link.click()\n\n        # The field now contains the two selected bands' ids\n        self.selenium.switch_to_window(main_window)\n        self.assertEqual(\n            self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'),\n            '42,98')\n\nclass AdminRawIdWidgetSeleniumChromeTests(AdminRawIdWidgetSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass AdminRawIdWidgetSeleniumIETests(AdminRawIdWidgetSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n", "patch": "@@ -321,18 +321,24 @@ def test_render_idn(self):\n         w = widgets.AdminURLFieldWidget()\n         self.assertHTMLEqual(\n             conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com')),\n-            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com\">http://example-\u00e4\u00fc\u00f6.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com\" /></p>'\n+            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com\">http://example-\u00e4\u00fc\u00f6.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com\" /></p>'\n         )\n \n     def test_render_quoting(self):\n+        # WARNING: Don't use assertHTMLEqual in that testcase!\n+        # assertHTMLEqual will get rid of some escapes which are tested here!\n         w = widgets.AdminURLFieldWidget()\n-        self.assertHTMLEqual(\n-            conditional_escape(w.render('test', 'http://example.com/<sometag>some text</sometag>')),\n-            '<p class=\"url\">Currently:<a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com/<sometag>some text</sometag>\" /></p>'\n+        self.assertEqual(\n+            w.render('test', 'http://example.com/<sometag>some text</sometag>'),\n+            '<p class=\"url\">Currently: <a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n         )\n-        self.assertHTMLEqual(\n-            conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>')),\n-            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>\" /></p>'\n+        self.assertEqual(\n+            w.render('test', 'http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>'),\n+            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n+        )\n+        self.assertEqual(\n+            w.render('test', 'http://www.example.com/%C3%A4\"><script>alert(\"XSS!\")</script>\"'),\n+            '<p class=\"url\">Currently: <a href=\"http://www.example.com/%C3%A4%22%3E%3Cscript%3Ealert(%22XSS!%22)%3C/script%3E%22\">http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;\" /></p>'\n         )\n \n ", "file_path": "files/2013_10/44", "file_language": "py", "file_name": "tests/admin_widgets/tests.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
