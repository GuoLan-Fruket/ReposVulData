{"index": 3175, "cve_id": "CVE-2018-19351", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Jupyter Notebook before 5.7.1 allows XSS via an untrusted notebook because nbconvert responses are considered to have the same origin as the notebook server. In other words, nbconvert endpoints can execute JavaScript with access to the server API. In notebook/nbconvert/handlers.py, NbconvertFileHandler and NbconvertPostHandler do not set a Content Security Policy to prevent this.", "cvss": "6.1", "publish_date": "November 18, 2018", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "107a89fce5f413fb5728c1c5d2c7788e1fb17491", "commit_message": "Apply CSP sandboxing for nbconvert responses\n\nThese may contain untrusted content, so they should be treated as being\nfrom a different domain to the notebook server.", "commit_date": "2018-10-22T13:52:36Z", "project": "jupyter/notebook", "url": "https://api.github.com/repos/jupyter/notebook/commits/107a89fce5f413fb5728c1c5d2c7788e1fb17491", "html_url": "https://github.com/jupyter/notebook/commit/107a89fce5f413fb5728c1c5d2c7788e1fb17491", "windows_before": [{"commit_id": "f140ba95c4c619cbe8fbe5f82ee38906c0580203", "commit_date": "Mon Oct 15 20:27:22 2018 +0100", "commit_message": "Present both possible URL options as separate copy/pastable options", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "643b992690c91b9bcfdfd7ce5f72ff7e3cf37b87", "commit_date": "Mon Oct 15 09:51:18 2018 +0100", "commit_message": "Fix copy/paste-ability of default URL presented on startup", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "04a686dbaf9dfe553324a03cb9e6f778cf1e3da1", "commit_date": "Sun Oct 21 12:10:01 2018 -0700", "commit_message": "Merge pull request #4074 from agatheliguori/master", "files_name": ["bbfa1cbe5af0ee58be2af0078d30a940a8793b2e - Fri Oct 19 14:43:48 2018 +0200 : Merge pull request #4122 from thomasaarholt/thomasaarholt-patch-1", "9182f84cf0d72b292b09e428906ebd44cb60f094 - Fri Oct 19 11:28:24 2018 +0200 : Corrected alt-text of \"replace in all cells\"", "notebook/static/notebook/js/searchandreplace.js"]}, {"commit_id": "4f9a6cbdd81ed26a7979d993766d7223e1c72e5c", "commit_date": "Thu Oct 18 13:45:35 2018 +0200", "commit_message": "Merge pull request #3664 from vit-tucek/unicode_home_dirs", "files_name": ["992810505261f2afd25629283217d7574fc9e091 - Thu Oct 18 10:25:24 2018 +0200 : Merge pull request #4099 from michalc/contents_manager_exists_can_return_futures", "815ed3ce561bbbe39e34fe09c1d0bda2a7077766 - Sat Oct 13 22:46:31 2018 +0100 : Allow more contents manager functions to return futures", "notebook/files/handlers.py", "notebook/services/contents/handlers.py"]}, {"commit_id": "f859abde690e60f778bfeb0f5ee08bfbfa9fef12", "commit_date": "Wed Oct 17 21:52:49 2018 +0300", "commit_message": "Enable login mode - to automatically source the /etc/profile script", "files_name": ["notebook/terminal/__init__.py"]}, {"commit_id": "d97275b91bfda4b6c187a5d0f448d8c48fb69172", "commit_date": "Thu Oct 11 00:19:19 2018 +0530", "commit_message": "removed bg darken for navbar", "files_name": ["notebook/static/notebook/less/variables.less"]}, {"commit_id": "b663bf1b14734d68518e8cdcb1d993d034ede0f9", "commit_date": "Wed Oct 10 15:18:32 2018 +0200", "commit_message": "Merge pull request #4034 from Carreau/adaptation-log", "files_name": ["dab6046ba6afd660b6681b397b770e1fc711a8c7 - Wed Oct 10 15:16:22 2018 +0200 : Merge pull request #4046 from Surya-06/master", "d2916c9a81be14d94da89c91baa4b16e4bfb5d7b - Wed Oct 10 11:23:27 2018 +0200 : Merge pull request #4073 from 1kastner/patch-1", "c588951c90f9d5cdd7771cb94a014349a53ba391 - Wed Oct 10 11:23:04 2018 +0200 : Update to nbjs.po", "notebook/i18n/fr_FR/LC_MESSAGES/nbjs.po"]}, {"commit_id": "4135e3ffe7df627cd9f264f600b2990145af17f6", "commit_date": "Wed Oct 10 11:19:27 2018 +0200", "commit_message": "Merge pull request #4063 from kevin-bates/log-status-type", "files_name": ["b71c05dc17e0671f81331cae9315ea97e77feaf4 - Tue Oct 9 08:17:08 2018 -0700 : Merge pull request #4061 from kara71/fix-fr-translations", "3ca5f16ff07b226f3e43872129ff366d40e56410 - Tue Oct 9 16:54:04 2018 +0530 : improved color contrast for file menus", "notebook/static/notebook/less/variables.less"]}, {"commit_id": "9c1309210c20eeb71757e71148ddf5ab285a899e", "commit_date": "Sun Oct 7 19:13:10 2018 +0200", "commit_message": "Fixed french translation mistakes and normalized capitalization", "files_name": ["notebook/i18n/fr_FR/LC_MESSAGES/nbui.po"]}, {"commit_id": "6126f783817d75d32ccc59e08a188f840cd22230", "commit_date": "Sun Oct 7 18:21:33 2018 +0200", "commit_message": "Fixed two remaining wrong translations", "files_name": ["notebook/i18n/fr_FR/LC_MESSAGES/nbjs.po"]}, {"commit_id": "9b7312d3306a5bfd8b8ef630310ca7fa110a83e0", "commit_date": "Sun Oct 7 17:57:57 2018 +0200", "commit_message": "Add info about messaging specs", "files_name": ["notebook/static/services/kernels/kernel.js"]}, {"commit_id": "23e74dcdfab838d2dfaa5f1df94ca11908875bed", "commit_date": "Thu Oct 4 08:35:42 2018 -0700", "commit_message": "Include status types when logging activity", "files_name": ["notebook/services/kernels/kernelmanager.py"]}, {"commit_id": "74f08b897c224ff21cc67f91ab3a49caa7c23629", "commit_date": "Thu Oct 4 01:17:11 2018 +0200", "commit_message": "Fixed some translations", "files_name": ["notebook/i18n/fr_FR/LC_MESSAGES/nbjs.po"]}, {"commit_id": "c2a2bcc4a7344652ae9229931fc2323ba67d7d4c", "commit_date": "Tue Oct 2 04:52:58 2018 -0400", "commit_message": "Merge pull request #4041 from arradha/fix/mathjax-codeblocks", "files_name": ["dfcea5b3f7d039bb66f580aa1f756a1fd2363db2 - Tue Oct 2 04:51:13 2018 -0400 : Merge pull request #4036 from Hyaxia/metrics_terminal", "fa7b40be27da8a6c5abf2c05625fa68b806e2968 - Tue Oct 2 04:49:38 2018 -0400 : Merge pull request #4039 from Carreau/try-fix-attr", "4c1d62f3b21af6f139d8396081578d0c1646a632 - Sun Sep 30 21:57:38 2018 +0300 : A temporary fix for appveyor tests problem that results in an error: `RequirementParseError(str(e)) pip._vendor.pkg_resources.RequirementParseError: Invalid requirement, parse error at \u201c\u2019; extra '`", "appveyor.yml"]}, {"commit_id": "c5d1a08951d4ee4fb4089dcc47beadfaf03d6adb", "commit_date": "Sat Sep 29 21:28:25 2018 +0530", "commit_message": "Updated .travis.yml for fixing attr", "files_name": [".travis.yml"]}, {"commit_id": "f2fdbf929e57475ad9d2342476651e8cb70611d8", "commit_date": "Sat Sep 29 16:56:40 2018 +0300", "commit_message": "Added metrics for number of kernels running labeled by type", "files_name": ["notebook/prometheus/metrics.py", "notebook/services/kernels/kernelmanager.py", "notebook/terminal/api_handlers.py"]}, {"commit_id": "23114ef44a426a54b5919fb0bad28f29dce7305d", "commit_date": "Thu Sep 27 21:25:24 2018 +0530", "commit_message": "Changed marked version to 0.5", "files_name": ["bower.json"]}, {"commit_id": "7eb6e29509fe97b8eaaf6f8baeb92e69d2999542", "commit_date": "Wed Sep 26 17:02:06 2018 -0700", "commit_message": "Fix spurious newline in expected result", "files_name": ["notebook/tests/notebook/markdown.js"]}, {"commit_id": "4395a838f68f0af8c9010ba27833529c52cbee57", "commit_date": "Wed Sep 26 16:41:25 2018 -0700", "commit_message": "From #4039:  Fix test by pinning attrs to 17.4+", "files_name": [".travis.yml"]}, {"commit_id": "e951fab0db264d5b561a027cedfc8a151484bd60", "commit_date": "Thu Sep 27 01:55:52 2018 +0300", "commit_message": "Added docs to the prometheus package and the terminal.api_handlers file.", "files_name": ["notebook/prometheus/__init__.py", "notebook/terminal/api_handlers.py"]}, {"commit_id": "6fd0a807788e53e5452fcb86ec08035edb8b1e70", "commit_date": "Wed Sep 26 15:42:59 2018 -0700", "commit_message": "Reformat long string", "files_name": ["notebook/tests/notebook/markdown.js"]}, {"commit_id": "c5bee3a29da17d04cba620e2acf6da4043e9fe0d", "commit_date": "Wed Sep 26 15:14:07 2018 -0700", "commit_message": "test and fix: disable math inside code blocks", "files_name": ["notebook/static/notebook/js/mathjaxutils.js", "notebook/tests/notebook/markdown.js"]}, {"commit_id": "96cb061e7b6000ae3d3d3d5da3c9050b80bf0d7a", "commit_date": "Wed Sep 26 11:46:14 2018 -0700", "commit_message": "More descriptive message.", "files_name": ["notebook/services/kernels/handlers.py"]}, {"commit_id": "02abe9e691ae79870d5c94363213dbb744adaa1d", "commit_date": "Wed Sep 26 10:34:57 2018 -0700", "commit_message": "Fix test by pinning attrs to 17.4+", "files_name": [".travis.yml"]}, {"commit_id": "7d211d431e5bea69347c19f64e5295df93dd5657", "commit_date": "Wed Sep 26 10:34:57 2018 -0700", "commit_message": "try to fix test", "files_name": [".travis.yml"]}, {"commit_id": "7bc7df472c8ff4b8de284c5c5b2178d52561c9a4", "commit_date": "Wed Sep 26 18:14:43 2018 +0300", "commit_message": "Fixed imports, from static to dynamic.", "files_name": ["notebook/prometheus/log_functions.py", "notebook/terminal/api_handlers.py"]}, {"commit_id": "03e5dc00e1639137d9ed5ce4caeb2639ca2650d6", "commit_date": "Wed Sep 26 17:15:40 2018 +0300", "commit_message": "Moved the 'metrics' file to a new package named 'promethues'. Then split the file into two files, one containing the metrics themselves, the other containing any function that have something to do with prometheus.", "files_name": ["notebook/log.py", "notebook/prometheus/__init__.py", "notebook/prometheus/log_functions.py", "notebook/prometheus/metrics.py", "notebook/terminal/api_handlers.py"]}, {"commit_id": "5711075f0b48dcf4f7ffcd4d93b35ecd1fe363d0", "commit_date": "Wed Sep 26 15:26:57 2018 +0200", "commit_message": "Merge pull request #3789 from munkm/pytest", "files_name": ["7e140c5bafcf83fd51290a4c0865c1512c1345cd - Tue Sep 25 20:52:21 2018 -0700 : When adapting also log the version jupyter_client is expecting.", "notebook/services/kernels/handlers.py"]}, {"commit_id": "26ec5952a74bcc9ee5b598709b1de5bf5cf00318", "commit_date": "Tue Sep 25 06:54:11 2018 -0500", "commit_message": "Merge pull request #3926 from Carreau/drop-27", "files_name": ["d772277c0bcaf129771e774e17310379cfa6652b - Thu Sep 20 09:30:47 2018 +0200 : Merge pull request #3949 from gustavoefeiche/fix-installation", "26c73d36d092e3088cf0d79d4a182025475bd07d - Thu Sep 20 00:18:16 2018 -0300 : Fix issue #3948", "notebook/static/base/js/namespace.js"]}, {"commit_id": "a8716eb9ac69b75a1ceec3d230278d2bbe8663e6", "commit_date": "Thu Sep 20 00:16:42 2018 -0300", "commit_message": "Fix versions mismatch in namespace.js and _version.py", "files_name": ["notebook/static/base/js/namespace.js"]}, {"commit_id": "e661c7642d8a099fa1869ee6ce70a591098089c9", "commit_date": "Thu Sep 20 00:15:58 2018 -0300", "commit_message": "Change from 6.0.0dev0 to 6.0.0.dev0", "files_name": ["notebook/_version.py"]}, {"commit_id": "b7fdc41ff673a9b6287246b4b584467fca6e1ae3", "commit_date": "Wed Sep 19 16:37:13 2018 +0200", "commit_message": "back to dev", "files_name": ["notebook/_version.py"]}, {"commit_id": "775cb20de3dc273f1fc31cd55d895e16dfe98bdf", "commit_date": "Wed Sep 19 16:35:51 2018 +0200", "commit_message": "minor typos in changelog for 5.7", "files_name": ["docs/source/changelog.rst"]}, {"commit_id": "7acb4e047d4f1fc0a5c1c4ebb2d16771ef7d223a", "commit_date": "Wed Sep 19 16:31:30 2018 +0200", "commit_message": "release 5.7.0", "files_name": ["notebook/_version.py", "notebook/static/base/js/namespace.js"]}, {"commit_id": "5b115c2e9029ce3c3d03fc483c591d29788cdabf", "commit_date": "Wed Sep 19 16:28:24 2018 +0200", "commit_message": "Merge pull request #3931 from minrk/translate-sdists", "files_name": ["ba7aadbf7a4fade76b8b0710b8408dbf5470d0ba - Wed Sep 19 14:57:47 2018 +0200 : note translation inclusions in sdists", "docs/source/changelog.rst"]}, {"commit_id": "bb8f63baca4ff48cb6cf07204a9a26b47b56581d", "commit_date": "Tue Sep 18 13:45:33 2018 +0200", "commit_message": "include translation sources in sdists", "files_name": ["MANIFEST.in"]}, {"commit_id": "33ec6440f8b0f5ff23719ae7b782373de6fd07be", "commit_date": "Tue Sep 18 13:37:25 2018 +0200", "commit_message": "Merge pull request #3925 from Carreau/package-translations", "files_name": ["e78f438e5aefd3d344ce6a95cac983a60edbcc9f - Mon Sep 17 10:34:48 2018 +0200 : invoke setup.py build on appveyor", "appveyor.yml"]}, {"commit_id": "52ca0d64caba1c9e579d52bc03bc2a65b18beee7", "commit_date": "Mon Sep 17 10:05:11 2018 +0200", "commit_message": "fix installation, invocation of po2json", "files_name": [".travis.yml", "setupbase.py"]}, {"commit_id": "37f9a419483b4d6675b7701f5a72eb1ec8afe3d6", "commit_date": "Sun Sep 16 12:16:59 2018 +0200", "commit_message": "Drop 2.7", "files_name": [".travis.yml", "appveyor.yml", "setup.py"]}, {"commit_id": "07126ca8a5ab58ae015f3828737fc263ea7ab9a5", "commit_date": "Sun Sep 16 18:12:41 2018 +0200", "commit_message": "one more try", "files_name": ["setupbase.py"]}, {"commit_id": "d239839e074758f924fcbf30db9f8b08c09c9fda", "commit_date": "Sat Sep 15 22:01:20 2018 +0200", "commit_message": "Build js translation at build time.", "files_name": [".travis.yml", "package.json", "setup.py", "setupbase.py"]}, {"commit_id": "bb07253ff4e9ef5a8925f72dad832221f3c578bd", "commit_date": "Sat Sep 15 20:00:24 2018 +0200", "commit_message": "Merge pull request #3888 from JocelynDelalande/jd-french-i18n", "files_name": ["05f94882325428a2d67aeffcdfea6732c54317cd - Sat Sep 15 18:12:28 2018 +0200 : Fix misc French wordings", "notebook/i18n/fr_FR/LC_MESSAGES/nbui.po"]}, {"commit_id": "e1494bb8f8204b45b8c7b0c4bc00cf16b91738be", "commit_date": "Sat Sep 15 18:10:58 2018 +0200", "commit_message": "Rework French wording \"Brute NBConvert\" \u2192 \u00ab Texte Brut (pour NBConvert)\"", "files_name": ["notebook/i18n/fr_FR/LC_MESSAGES/nbjs.po", "notebook/i18n/fr_FR/LC_MESSAGES/nbui.po"]}, {"commit_id": "db8b03e4349ca788c87784000bc5c1c14081545b", "commit_date": "Sat Sep 15 18:09:23 2018 +0200", "commit_message": "Rework French wording au-dessus/au-dessous \u2192 pr\u00e9c\u00e9dent/suivant", "files_name": ["notebook/i18n/fr_FR/LC_MESSAGES/nbjs.po", "notebook/i18n/fr_FR/LC_MESSAGES/nbui.po"]}, {"commit_id": "5a1b35fe1315ba63276786f3e0b756a183fedd84", "commit_date": "Sat Sep 15 18:04:58 2018 +0200", "commit_message": "Fix trailing spaces in translations", "files_name": ["notebook/i18n/fr_FR/LC_MESSAGES/nbui.po", "notebook/i18n/nbui.pot", "notebook/i18n/zh_CN/LC_MESSAGES/nbui.po", "notebook/templates/tree.html"]}, {"commit_id": "c9cd79b261a005daf5097cc0f2fc30a3f9c3cabf", "commit_date": "Fri Sep 14 11:26:19 2018 +0200", "commit_message": "Merge pull request #3915 from minrk/rel-5.7", "files_name": ["8b74d6dea405c1b2677b430b6f3293f35e1f1eb1 - Fri Sep 14 11:25:15 2018 +0200 : Merge pull request #3913 from minrk/fix-prompt-alignment", "f6f9bab9a9e5f7e26447d7038f628f9052aaee90 - Fri Sep 14 11:23:34 2018 +0200 : Merge pull request #3914 from minrk/requirejs-22", "4f70dd06aff2a02f2ac628874267cd04f8b82445 - Thu Sep 13 17:25:20 2018 +0200 : changelog for 5.7", "docs/source/changelog.rst"]}, {"commit_id": "37b35dc65f30af3aa67fa1d59aeb0914beadb8d0", "commit_date": "Thu Sep 13 16:33:54 2018 +0200", "commit_message": "fix uneven input/output prompt alignment", "files_name": ["notebook/static/notebook/less/cell.less", "notebook/static/notebook/less/codecell.less", "notebook/static/notebook/less/outputarea.less"]}, {"commit_id": "86e473e754302705dba6721e30ed81b03c9774d3", "commit_date": "Thu Sep 13 16:53:56 2018 +0200", "commit_message": "Merge pull request #3839 from AestheticIntegration/fix-output-prompt-width", "files_name": ["8ced0dd367c40b3e6dc4ad9df39af7cfc1535cd9 - Thu Sep 13 16:52:50 2018 +0200 : Merge pull request #3907 from kevin-bates/prevent-AttributeError-on-shutdown", "026d5f1a05de887f82268dc0e941372365888a9f - Thu Sep 13 16:37:34 2018 +0200 : bump requirejs to 2.2", "bower.json"]}, {"commit_id": "f81ec30b62fd1cec122d48c6a367b8ea6ae59809", "commit_date": "Thu Sep 13 16:36:54 2018 +0200", "commit_message": "Merge pull request #3829 from mociarain/fix-tornado-settings", "files_name": ["0da9648ed3b2bb030c372a3a189f72cbe5ad010e - Thu Sep 13 16:23:42 2018 +0200 : Merge pull request #3905 from KGHustad/breadcrumb-root-url-fix", "4650dabd058bc17ff7fdd82e53919ae14fb35dd4 - Thu Sep 13 16:23:00 2018 +0200 : Merge pull request #3871 from parente/fix/shortcut-editor-enter", "9c60369a1773753ab138dad6e9b8be4a3eebe32d - Thu Sep 13 16:22:44 2018 +0200 : Merge pull request #3836 from cmd-ntrf/jqueryui", "bee2c389cadd1bfb3f44816b3888275414fa1c15 - Thu Sep 13 16:22:14 2018 +0200 : Merge pull request #3883 from moble/public_server_csp", "075acdff806cc50330573ae456078e94f12f9c86 - Thu Sep 13 16:19:24 2018 +0200 : Merge pull request #3908 from MichaelChirico/patch-1"]}], "windows_after": [{"commit_id": "9c3ea1319a5792bb2be2119b99c3659d3a886810", "commit_date": "Mon Oct 22 11:35:48 2018 -0400", "commit_message": "Default to right table alignment but allow table local overrides", "files_name": ["notebook/static/notebook/js/outputarea.js", "notebook/static/notebook/js/textcell.js"]}, {"commit_id": "1c40db244072a618e0fef5be061af31f3abd0f84", "commit_date": "Thu Oct 25 09:36:01 2018 -0400", "commit_message": "Fix default value method for `allow_remote_access` when ip is '*'", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "03478bee8719f2ddb16a326c6b122ceff1ed1423", "commit_date": "Thu Oct 25 21:05:52 2018 -0700", "commit_message": "Migrate image display test to selenium", "files_name": ["notebook/tests/notebook/display_image.js", "notebook/tests/selenium/test_display_image.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "34cd3528d57fd646d7550ef8c063305460a070d7", "commit_date": "Thu Oct 25 22:21:28 2018 -0700", "commit_message": "Migrate test for merge cells api to selenium", "files_name": ["notebook/tests/notebook/merge_cells_api.js", "notebook/tests/selenium/test_merge_cells.py"]}, {"commit_id": "aa658d3d7929210b81c94afe272e8da1e815568e", "commit_date": "Fri Oct 26 07:36:02 2018 -0700", "commit_message": "Migrate display isolation test to selenium", "files_name": ["notebook/tests/notebook/isolated_svg.js", "notebook/tests/selenium/test_display_isolation.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "de7be3a64f507dcf711b77f9c931c17f23bf588f", "commit_date": "Fri Oct 26 14:02:49 2018 -0400", "commit_message": "Updated the description of Heading cells, which are no longer used", "files_name": ["docs/source/examples/Notebook/What is the Jupyter Notebook.ipynb"]}, {"commit_id": "760d4d35334bbdd789d2ec315a0b182f40e0eb55", "commit_date": "Fri Oct 26 14:17:48 2018 -0400", "commit_message": "fixed typo in example notebook", "files_name": ["docs/source/examples/Notebook/What is the Jupyter Notebook.ipynb"]}, {"commit_id": "a7033b8067f760f81331eeae6e64799d98c170be", "commit_date": "Wed Nov 7 11:50:50 2018 +0000", "commit_message": "Merge pull request #4139 from daf/fix-allow-remote-access-with-all-ips", "files_name": ["a036ba2cd84e72e27f82aedd9a635f646cae26dd - Wed Nov 7 12:37:43 2018 +0000 : Merge pull request #4142 from askerry/selenium_merge_cells", "2af744075f52f62ab18cf807ec009cb6ad6af2f1 - Wed Nov 7 15:13:57 2018 +0000 : Merge pull request #4103 from einon/einonm", "1c87821dc17c84362c4de9821d8408b70e1f58b1 - Wed Nov 7 21:00:21 2018 -0600 : Modifications to test JS funcion  in test_merge_cells.py", "notebook/tests/selenium/test_merge_cells.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "fd6ea8e55650f561823355b59be0e5bea9594000", "commit_date": "Wed Nov 7 22:20:35 2018 -0600", "commit_message": "Removed unnecessary property attibute created in utils.py and added comments to test_merge_cells.py", "files_name": ["notebook/tests/selenium/test_merge_cells.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "3ccc4ed2074422490d80c0cb1b0cb8acbffabb93", "commit_date": "Wed Nov 7 20:26:48 2018 -0800", "commit_message": "Address review feedback - use %r instead of %s to handle quoting more succintly - add a finally block to ensure browser state is transitioned from iframe back to default content", "files_name": ["notebook/tests/selenium/test_display_isolation.py"]}, {"commit_id": "a5a6e4ad089b5fdc479e377e268972cba8e658b1", "commit_date": "Wed Nov 7 20:35:26 2018 -0800", "commit_message": "Address review feedback - remove sleep hack cruft - consolidate/remove unncessary intermediate variables", "files_name": ["notebook/tests/selenium/test_display_image.py"]}, {"commit_id": "099383e012339cebed3a2d4ff6bbf44f4894ff5e", "commit_date": "Thu Nov 8 11:40:26 2018 +0000", "commit_message": "Merge pull request #4141 from askerry/selenium_display_image", "files_name": ["c9378c71fe5c62b817cb8e341264edfde8dd0937 - Thu Nov 8 11:42:11 2018 +0000 : Merge pull request #4146 from askerry/selenium_display_isolation", "f27e87541da22126d37e93369c0f5492fa8401fb - Thu Nov 8 08:00:51 2018 -0600 : Changed function name in utils.py and in test_merge_cells.py", "notebook/tests/selenium/test_merge_cells.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "dea186d177c7ad279845d41951051e071e10588e", "commit_date": "Thu Nov 8 10:43:33 2018 -0800", "commit_message": "Add wait_for_tag to avoid race condition in display isolation test", "files_name": ["notebook/tests/selenium/test_display_isolation.py"]}, {"commit_id": "6f73d7937689f6f75028da757459b79b4431fe24", "commit_date": "Sun Nov 11 09:33:44 2018 -0800", "commit_message": "Add custom expectation to wait for n elements", "files_name": ["notebook/tests/selenium/test_display_isolation.py", "notebook/tests/selenium/utils.py"]}, {"commit_id": "3faafc412241aeea7d1b5b2b4b9ac5b72184d131", "commit_date": "Fri Oct 26 12:24:46 2018 -0700", "commit_message": "Migrate buffering test to selenium", "files_name": ["notebook/tests/notebook/buffering.js", "notebook/tests/selenium/test_buffering.py"]}, {"commit_id": "39b3afc2e6d23cc480c92f9ae30a2e5baae10e52", "commit_date": "Sun Nov 11 19:58:38 2018 -0800", "commit_message": "Merge pull request #4085 from vgalisson/patch-1", "files_name": ["363926290e58b808ff3b0bacd50fbb40df6580c4 - Mon Nov 12 12:08:32 2018 +0800 : Fix type in nbjs.po", "notebook/i18n/zh_CN/LC_MESSAGES/nbjs.po"]}, {"commit_id": "f995db42ee4ca2ba0562aba7bde599a1ba9fc7e8", "commit_date": "Mon Nov 12 10:20:34 2018 -0800", "commit_message": "Address review feedback", "files_name": ["notebook/tests/selenium/utils.py"]}, {"commit_id": "b61cd92294fd2e2963cc999e0be284c954ba908b", "commit_date": "Tue Nov 13 11:34:11 2018 +0000", "commit_message": "Merge pull request #4194 from hansnow/patch-1", "files_name": ["2345350c7fc21517911310a9604bb9f91f240796 - Tue Nov 13 14:23:18 2018 +0000 : Merge pull request #4185 from askerry/fix_race", "6d7b6af514a693509fd42a3cb87c7e15c31acdc5 - Tue Nov 13 15:11:16 2018 +0000 : Merge pull request #4182 from AndresSan6/merge_selected_cells", "8b704d6628b973ffbdfa25cfd51bd748062c10b2 - Tue Nov 13 09:01:05 2018 -0800 : Address review feedback", "notebook/tests/selenium/test_buffering.py"]}, {"commit_id": "4b2e7dc3e382889aa29d0b96a214ff7a94795abd", "commit_date": "Tue Nov 13 17:38:29 2018 +0000", "commit_message": "Merge pull request #4193 from askerry/selenium_buffering", "files_name": ["c2b292f3e6b1b087e933fa5e229bf861a3a0d66a - Wed Nov 14 10:48:00 2018 +0700 : Add missing i18n parameter", "notebook/static/notebook/js/mathjaxutils.js"]}, {"commit_id": "a3987d6e27097983763131dfb0d0bd23fa58aa45", "commit_date": "Wed Nov 14 18:07:47 2018 +0530", "commit_message": "Add padding bottom for symmetry of the Notebook", "files_name": ["notebook/static/notebook/less/notebook.less"]}, {"commit_id": "d60445e92666a0c5651a33e180c92051d94a7d44", "commit_date": "Wed Nov 14 16:04:24 2018 +0000", "commit_message": "Merge pull request #4212 from vuamitom/patch-1", "files_name": ["0e63ebb1db0946bc667b7a910f9d2f6fccd45151 - Fri Nov 16 08:43:23 2018 -0800 : Update session_exists() to account for invalid sessions due to culling", "notebook/services/sessions/sessionmanager.py"]}, {"commit_id": "588b1f8eb3e3ee6f5a653d8f22faf8d7d22ae775", "commit_date": "Fri Nov 16 17:00:27 2018 +0000", "commit_message": "Merge branch 'nbconvert-sandbox'", "files_name": ["f03797bfc1dff7bd1477be0031948a7320c7de4a - Sat Nov 17 19:39:39 2018 +0100 : Tweak upload button to give feedback", "notebook/static/tree/js/notebooklist.js"]}, {"commit_id": "11a2e6d52e2e996c97511b17c63ee58a4b83431a", "commit_date": "Sun Nov 18 11:54:04 2018 +0100", "commit_message": "assemble breadcrumb html safely", "files_name": ["notebook/static/tree/js/notebooklist.js"]}, {"commit_id": "1ed04ffa8aeb407560ef5ed77fff0675d0a46b9e", "commit_date": "Sun Nov 18 12:22:37 2018 +0100", "commit_message": "changes for 5.7.1, 5.7.2", "files_name": ["docs/source/changelog.rst"]}, {"commit_id": "288b73e1edbf527740e273fcc69b889460871648", "commit_date": "Sun Nov 18 14:46:53 2018 +0100", "commit_message": "Merge branch 'directory-xss'", "files_name": ["4a7151448ce87a2a88d5a7842095ad6a81ae8f26 - Tue Nov 13 19:55:32 2018 +0100 : Enable kernel message filtering", "notebook/services/kernels/handlers.py", "notebook/services/kernels/kernelmanager.py", "notebook/services/kernels/tests/test_kernels_api.py", "notebook/tree/tests/handlers.py"]}, {"commit_id": "21b93eae432580b7f987a910484734dcefbabda6", "commit_date": "Mon Nov 19 15:42:11 2018 +0100", "commit_message": "Merge pull request #4219 from kevin-bates/tolerate-culled-kernels", "files_name": ["9d19aa3677a414341c5368622b01a2d229c2bad1 - Mon Nov 19 15:44:12 2018 +0100 : Merge pull request #4221 from betatim/uploading-ui-tweak", "64fa7cf6748c6ba2965aadd337b7edb7bb26b306 - Mon Nov 19 16:36:14 2018 -0800 : Merge pull request #4210 from SylvainCorlay/message-filtering", "91fb343c0ca6cd3e12fe40bb3b3c078240453af8 - Mon Nov 26 17:39:59 2018 -0500 : fixed ui-icons from blocking tooltip text", "notebook/static/notebook/less/tooltip.less"]}, {"commit_id": "069465bf951ba5c9ff397e422d338e3ae537ac06", "commit_date": "Thu Nov 29 17:01:41 2018 +0100", "commit_message": "Merge pull request #4236 from steaward/issue-4230", "files_name": ["82782a370e11cddf9bc92ef87ee2244b98c24ec7 - Mon Dec 3 13:26:06 2018 +0100 : Merge pull request #4084 from bhansa/issues-4000-accessibility", "7a42187ccd7cf0f500b94aae2e4b3867d80d88e1 - Mon Dec 3 19:03:27 2018 -0500 : Optimize Base64 encoding of large files to be uploaded to avoid GC pauses.", "notebook/static/tree/js/notebooklist.js"]}, {"commit_id": "daa80ad4ac7c27ccc8e8204283520184788b3ca3", "commit_date": "Mon Dec 3 19:04:12 2018 -0500", "commit_message": "Tune chunk size for large file uploads to be larger for perf gains.", "files_name": ["notebook/static/tree/js/notebooklist.js"]}, {"commit_id": "6f2946b9dc4fbbcc2059143c8e495af6245485f2", "commit_date": "Wed Dec 5 15:43:48 2018 -0600", "commit_message": "Respect parent template headaercontent in child pages", "files_name": ["notebook/templates/edit.html", "notebook/templates/notebook.html", "notebook/templates/terminal.html", "notebook/templates/tree.html"]}, {"commit_id": "49aad1bfbc862fd45fdf9e239dd99ccc147e7310", "commit_date": "Wed Dec 5 16:31:50 2018 -0600", "commit_message": "relocate super() content to other side of span", "files_name": ["notebook/templates/edit.html", "notebook/templates/notebook.html", "notebook/templates/terminal.html", "notebook/templates/tree.html"]}, {"commit_id": "f759e4d3beb9719e9deb4cde6691c2f135b6eae2", "commit_date": "Thu Dec 6 00:15:06 2018 +0100", "commit_message": "Merge pull request #4248 from christek91/optimize-large-file-uploads", "files_name": ["48042adaf9632e74bb939d2cbb8d78f55153a2bb - Sun Dec 9 18:42:30 2018 -0500 : Add Documentation regarding backslash escaping in Markdown File", "docs/source/examples/Notebook/Working With Markdown Cells.ipynb"]}, {"commit_id": "270c0f96d761ec3c81e0ef3dae6f39d88677d6b5", "commit_date": "Tue Dec 11 13:20:46 2018 +0000", "commit_message": "Launch the browser with a redirect file", "files_name": ["notebook/notebookapp.py", "notebook/templates/browser-open.html", "notebook/utils.py"]}, {"commit_id": "28e296fc9f47405c771df3c9af475a4d621a90dc", "commit_date": "Tue Dec 11 15:57:02 2018 +0000", "commit_message": "Use permanent token in redirect file", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "92362103e3719e58679916a55f883dd34562a875", "commit_date": "Tue Dec 11 16:05:16 2018 +0000", "commit_message": "Point to file in terminal message", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "56d7a2d3a6a547b02d0aec56748bd2fd703512e9", "commit_date": "Wed Dec 12 15:22:06 2018 +0000", "commit_message": "Remove one-time token code", "files_name": ["notebook/auth/login.py", "notebook/base/handlers.py", "notebook/notebookapp.py"]}, {"commit_id": "51dae23b593ce74c0c99a9f13f2282e5c4c77da3", "commit_date": "Thu Dec 13 10:31:11 2018 +0100", "commit_message": "Merge pull request #4260 from takluyver/browser-open-file", "files_name": ["68ec51d3db3fd4b1d0672b7d0c697a339df8e177 - Fri Dec 14 10:59:14 2018 +0100 : Merge pull request #4257 from ctrlaltdelete00/MarkdownDocumentationBackslashEscapes", "363d73d145a28c9443c538c6f7861176e7139972 - Fri Dec 14 11:58:52 2018 +0100 : bootstrap 3.4", "bower.json", "notebook/templates/page.html", "setupbase.py", "tools/build-main.js"]}, {"commit_id": "46a887f6e0ecf50f3af5ecadaa05a6ac34675fbb", "commit_date": "Fri Dec 14 17:10:51 2018 +0100", "commit_message": "Merge pull request #4271 from minrk/bs34", "files_name": ["0734e2c95088d6753a8708cbe78fa58fe9074e04 - Fri Dec 14 22:47:34 2018 -0500 : remove multiple download links for the .ipynb click", "notebook/static/notebook/js/menubar.js"]}, {"commit_id": "35aa99324a17cf0864d0725cf1864189a28fdb8e", "commit_date": "Sun Dec 16 09:50:27 2018 +0100", "commit_message": "Write release notes for 5.7.3", "files_name": ["docs/source/changelog.rst"]}, {"commit_id": "55d6f535701fb8d9a12a20a33b732887da121470", "commit_date": "Sun Dec 16 09:57:28 2018 +0100", "commit_message": "Merge pull request #4278 from takluyver/changelog-5.7.3", "files_name": ["6896aacdf6291799e97cb4875303b71d44cc37ca - Sun Dec 16 21:06:36 2018 +0100 : Add failing test for list_running_servers", "notebook/tests/test_notebookapp.py"]}, {"commit_id": "adcb7025cab9ddb73fb54b40be7d50dd67311983", "commit_date": "Sun Dec 16 21:06:55 2018 +0100", "commit_message": "Make filename check in list_running_servers more specific", "files_name": ["notebook/notebookapp.py"]}, {"commit_id": "cf1b7b36284dfff8ae55004d9e64789f79e842b5", "commit_date": "Sun Dec 16 22:33:46 2018 +0100", "commit_message": "Merge pull request #4284 from takluyver/i4283", "files_name": ["a4d663b5789957bc343fbd26340a79cb2947d206 - Sun Dec 16 22:52:01 2018 +0100 : Add release notes for 5.7.4", "docs/source/changelog.rst"]}, {"commit_id": "29f58de211c71b2979ef6684caf2fc1006bb2d67", "commit_date": "Sun Dec 16 18:43:38 2018 -0800", "commit_message": "updating file tree", "files_name": ["docs/source/examples/Notebook/Distributing Jupyter Extensions as Python Packages.ipynb"]}, {"commit_id": "f24fa85ef8f8df7ab5f6fd2d4ac7a4e14edaa852", "commit_date": "Mon Dec 17 10:22:56 2018 +0100", "commit_message": "Merge pull request #4286 from takluyver/changelog-5.7.4", "files_name": ["31c2184d011e2a6b78d02f6039f0da4273a2cfb5 - Mon Dec 17 14:47:10 2018 +0100 : Merge pull request #4287 from choldgraf/ntbkext", "9b3aa52b80769005800c8bf2447792ba520d5e7c - Sat Dec 29 17:28:15 2018 +0800 : make kill kernel configurable.", "notebook/static/notebook/js/notebook.js"]}, {"commit_id": "605dfb8b15bc07416d1c5b31b77981b126e2dc09", "commit_date": "Wed Jan 2 11:57:41 2019 +0000", "commit_message": "Convert multiselect test to Selenium", "files_name": [".gitignore", "notebook/tests/selenium/test_multiselect.py"]}, {"commit_id": "a5ad463427370b4f1811ce4fffee6664c55941b9", "commit_date": "Wed Jan 2 11:58:16 2019 +0000", "commit_message": "Remove multiselect Javascript test converted to Selenium", "files_name": ["notebook/tests/notebook/multiselect.js"]}, {"commit_id": "9035cb1bdd2fe6c8195912f67d232ed77da0f6c0", "commit_date": "Wed Jan 2 12:33:50 2019 +0000", "commit_message": "Limit to tornado <6 for now", "files_name": ["setup.py"]}, {"commit_id": "5f8a2040ffcd3efac067ae44baf02fd57abf258d", "commit_date": "Sat Jan 5 20:16:05 2019 +0000", "commit_message": "Fix typo in introduction", "files_name": ["docs/source/examples/Notebook/Running Code.ipynb"]}, {"commit_id": "18ca0330d8e859be2fa99e2d7d3ab95530e56c65", "commit_date": "Sun Jan 6 04:17:04 2019 +0300", "commit_message": "Update document.title to a more descriptive name", "files_name": ["notebook/static/edit/js/savewidget.js"]}], "parents": [{"commit_id_before": "04a686dbaf9dfe553324a03cb9e6f778cf1e3da1", "url_before": "https://api.github.com/repos/jupyter/notebook/commits/04a686dbaf9dfe553324a03cb9e6f778cf1e3da1", "html_url_before": "https://github.com/jupyter/notebook/commit/04a686dbaf9dfe553324a03cb9e6f778cf1e3da1"}], "details": [{"raw_url": "https://github.com/jupyter/notebook/raw/107a89fce5f413fb5728c1c5d2c7788e1fb17491/notebook%2Fnbconvert%2Fhandlers.py", "code": "\"\"\"Tornado handlers for nbconvert.\"\"\"\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport io\nimport os\nimport zipfile\n\nfrom tornado import web, escape\nfrom tornado.log import app_log\n\nfrom ..base.handlers import (\n    IPythonHandler, FilesRedirectHandler,\n    path_regex,\n)\nfrom nbformat import from_dict\n\nfrom ipython_genutils.py3compat import cast_bytes\nfrom ipython_genutils import text\n\ndef find_resource_files(output_files_dir):\n    files = []\n    for dirpath, dirnames, filenames in os.walk(output_files_dir):\n        files.extend([os.path.join(dirpath, f) for f in filenames])\n    return files\n\ndef respond_zip(handler, name, output, resources):\n    \"\"\"Zip up the output and resource files and respond with the zip file.\n\n    Returns True if it has served a zip file, False if there are no resource\n    files, in which case we serve the plain output file.\n    \"\"\"\n    # Check if we have resource files we need to zip\n    output_files = resources.get('outputs', None)\n    if not output_files:\n        return False\n\n    # Headers\n    zip_filename = os.path.splitext(name)[0] + '.zip'\n    handler.set_attachment_header(zip_filename)\n    handler.set_header('Content-Type', 'application/zip')\n    handler.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n\n    # Prepare the zip file\n    buffer = io.BytesIO()\n    zipf = zipfile.ZipFile(buffer, mode='w', compression=zipfile.ZIP_DEFLATED)\n    output_filename = os.path.splitext(name)[0] + resources['output_extension']\n    zipf.writestr(output_filename, cast_bytes(output, 'utf-8'))\n    for filename, data in output_files.items():\n        zipf.writestr(os.path.basename(filename), data)\n    zipf.close()\n\n    handler.finish(buffer.getvalue())\n    return True\n\ndef get_exporter(format, **kwargs):\n    \"\"\"get an exporter, raising appropriate errors\"\"\"\n    # if this fails, will raise 500\n    try:\n        from nbconvert.exporters.base import get_exporter\n    except ImportError as e:\n        raise web.HTTPError(500, \"Could not import nbconvert: %s\" % e)\n\n    try:\n        Exporter = get_exporter(format)\n    except KeyError:\n        # should this be 400?\n        raise web.HTTPError(404, u\"No exporter for format: %s\" % format)\n\n    try:\n        return Exporter(**kwargs)\n    except Exception as e:\n        app_log.exception(\"Could not construct Exporter: %s\", Exporter)\n        raise web.HTTPError(500, \"Could not construct Exporter: %s\" % e)\n\nclass NbconvertFileHandler(IPythonHandler):\n\n    SUPPORTED_METHODS = ('GET',)\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the notebook server.\n        return super(NbconvertFileHandler, self).content_security_policy + \\\n               \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def get(self, format, path):\n\n        exporter = get_exporter(format, config=self.config, log=self.log)\n\n        path = path.strip('/')\n        # If the notebook relates to a real file (default contents manager),\n        # give its path to nbconvert.\n        if hasattr(self.contents_manager, '_get_os_path'):\n            os_path = self.contents_manager._get_os_path(path)\n            ext_resources_dir, basename = os.path.split(os_path)\n        else:\n            ext_resources_dir = None\n\n        model = self.contents_manager.get(path=path)\n        name = model['name']\n        if model['type'] != 'notebook':\n            # not a notebook, redirect to files\n            return FilesRedirectHandler.redirect_to_files(self, path)\n\n        nb = model['content']\n\n        self.set_header('Last-Modified', model['last_modified'])\n\n        # create resources dictionary\n        mod_date = model['last_modified'].strftime(text.date_format)\n        nb_title = os.path.splitext(name)[0]\n\n        resource_dict = {\n            \"metadata\": {\n                \"name\": nb_title,\n                \"modified_date\": mod_date\n            },\n            \"config_dir\": self.application.settings['config_dir']\n        }\n\n        if ext_resources_dir:\n            resource_dict['metadata']['path'] = ext_resources_dir\n\n        try:\n            output, resources = exporter.from_notebook_node(\n                nb,\n                resources=resource_dict\n            )\n        except Exception as e:\n            self.log.exception(\"nbconvert failed: %s\", e)\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # Force download if requested\n        if self.get_argument('download', 'false').lower() == 'true':\n            filename = os.path.splitext(name)[0] + resources['output_extension']\n            self.set_attachment_header(filename)\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n        self.finish(output)\n\nclass NbconvertPostHandler(IPythonHandler):\n    SUPPORTED_METHODS = ('POST',)\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the notebook server.\n        return super(NbconvertPostHandler, self).content_security_policy + \\\n               \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def post(self, format):\n        exporter = get_exporter(format, config=self.config)\n\n        model = self.get_json_body()\n        name = model.get('name', 'notebook.ipynb')\n        nbnode = from_dict(model['content'])\n\n        try:\n            output, resources = exporter.from_notebook_node(nbnode, resources={\n                \"metadata\": {\"name\": name[:name.rfind('.')],},\n                \"config_dir\": self.application.settings['config_dir'],\n            })\n        except Exception as e:\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.finish(output)\n\n\n#-----------------------------------------------------------------------------\n# URL to handler mappings\n#-----------------------------------------------------------------------------\n\n_format_regex = r\"(?P<format>\\w+)\"\n\n\ndefault_handlers = [\n    (r\"/nbconvert/%s\" % _format_regex, NbconvertPostHandler),\n    (r\"/nbconvert/%s%s\" % (_format_regex, path_regex),\n         NbconvertFileHandler),\n]\n", "code_before": "\"\"\"Tornado handlers for nbconvert.\"\"\"\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport io\nimport os\nimport zipfile\n\nfrom tornado import web, escape\nfrom tornado.log import app_log\n\nfrom ..base.handlers import (\n    IPythonHandler, FilesRedirectHandler,\n    path_regex,\n)\nfrom nbformat import from_dict\n\nfrom ipython_genutils.py3compat import cast_bytes\nfrom ipython_genutils import text\n\ndef find_resource_files(output_files_dir):\n    files = []\n    for dirpath, dirnames, filenames in os.walk(output_files_dir):\n        files.extend([os.path.join(dirpath, f) for f in filenames])\n    return files\n\ndef respond_zip(handler, name, output, resources):\n    \"\"\"Zip up the output and resource files and respond with the zip file.\n\n    Returns True if it has served a zip file, False if there are no resource\n    files, in which case we serve the plain output file.\n    \"\"\"\n    # Check if we have resource files we need to zip\n    output_files = resources.get('outputs', None)\n    if not output_files:\n        return False\n\n    # Headers\n    zip_filename = os.path.splitext(name)[0] + '.zip'\n    handler.set_attachment_header(zip_filename)\n    handler.set_header('Content-Type', 'application/zip')\n    handler.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n\n    # Prepare the zip file\n    buffer = io.BytesIO()\n    zipf = zipfile.ZipFile(buffer, mode='w', compression=zipfile.ZIP_DEFLATED)\n    output_filename = os.path.splitext(name)[0] + resources['output_extension']\n    zipf.writestr(output_filename, cast_bytes(output, 'utf-8'))\n    for filename, data in output_files.items():\n        zipf.writestr(os.path.basename(filename), data)\n    zipf.close()\n\n    handler.finish(buffer.getvalue())\n    return True\n\ndef get_exporter(format, **kwargs):\n    \"\"\"get an exporter, raising appropriate errors\"\"\"\n    # if this fails, will raise 500\n    try:\n        from nbconvert.exporters.base import get_exporter\n    except ImportError as e:\n        raise web.HTTPError(500, \"Could not import nbconvert: %s\" % e)\n\n    try:\n        Exporter = get_exporter(format)\n    except KeyError:\n        # should this be 400?\n        raise web.HTTPError(404, u\"No exporter for format: %s\" % format)\n\n    try:\n        return Exporter(**kwargs)\n    except Exception as e:\n        app_log.exception(\"Could not construct Exporter: %s\", Exporter)\n        raise web.HTTPError(500, \"Could not construct Exporter: %s\" % e)\n\nclass NbconvertFileHandler(IPythonHandler):\n\n    SUPPORTED_METHODS = ('GET',)\n\n    @web.authenticated\n    def get(self, format, path):\n\n        exporter = get_exporter(format, config=self.config, log=self.log)\n\n        path = path.strip('/')\n        # If the notebook relates to a real file (default contents manager),\n        # give its path to nbconvert.\n        if hasattr(self.contents_manager, '_get_os_path'):\n            os_path = self.contents_manager._get_os_path(path)\n            ext_resources_dir, basename = os.path.split(os_path)\n        else:\n            ext_resources_dir = None\n\n        model = self.contents_manager.get(path=path)\n        name = model['name']\n        if model['type'] != 'notebook':\n            # not a notebook, redirect to files\n            return FilesRedirectHandler.redirect_to_files(self, path)\n\n        nb = model['content']\n\n        self.set_header('Last-Modified', model['last_modified'])\n\n        # create resources dictionary\n        mod_date = model['last_modified'].strftime(text.date_format)\n        nb_title = os.path.splitext(name)[0]\n\n        resource_dict = {\n            \"metadata\": {\n                \"name\": nb_title,\n                \"modified_date\": mod_date\n            },\n            \"config_dir\": self.application.settings['config_dir']\n        }\n\n        if ext_resources_dir:\n            resource_dict['metadata']['path'] = ext_resources_dir\n\n        try:\n            output, resources = exporter.from_notebook_node(\n                nb,\n                resources=resource_dict\n            )\n        except Exception as e:\n            self.log.exception(\"nbconvert failed: %s\", e)\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # Force download if requested\n        if self.get_argument('download', 'false').lower() == 'true':\n            filename = os.path.splitext(name)[0] + resources['output_extension']\n            self.set_attachment_header(filename)\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n        self.finish(output)\n\nclass NbconvertPostHandler(IPythonHandler):\n    SUPPORTED_METHODS = ('POST',)\n\n    @web.authenticated\n    def post(self, format):\n        exporter = get_exporter(format, config=self.config)\n\n        model = self.get_json_body()\n        name = model.get('name', 'notebook.ipynb')\n        nbnode = from_dict(model['content'])\n\n        try:\n            output, resources = exporter.from_notebook_node(nbnode, resources={\n                \"metadata\": {\"name\": name[:name.rfind('.')],},\n                \"config_dir\": self.application.settings['config_dir'],\n            })\n        except Exception as e:\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.finish(output)\n\n\n#-----------------------------------------------------------------------------\n# URL to handler mappings\n#-----------------------------------------------------------------------------\n\n_format_regex = r\"(?P<format>\\w+)\"\n\n\ndefault_handlers = [\n    (r\"/nbconvert/%s\" % _format_regex, NbconvertPostHandler),\n    (r\"/nbconvert/%s%s\" % (_format_regex, path_regex),\n         NbconvertFileHandler),\n]\n", "patch": "@@ -78,6 +78,13 @@ class NbconvertFileHandler(IPythonHandler):\n \n     SUPPORTED_METHODS = ('GET',)\n \n+    @property\n+    def content_security_policy(self):\n+        # In case we're serving HTML/SVG, confine any Javascript to a unique\n+        # origin so it can't interact with the notebook server.\n+        return super(NbconvertFileHandler, self).content_security_policy + \\\n+               \"; sandbox allow-scripts\"\n+\n     @web.authenticated\n     def get(self, format, path):\n \n@@ -145,6 +152,13 @@ def get(self, format, path):\n class NbconvertPostHandler(IPythonHandler):\n     SUPPORTED_METHODS = ('POST',)\n \n+    @property\n+    def content_security_policy(self):\n+        # In case we're serving HTML/SVG, confine any Javascript to a unique\n+        # origin so it can't interact with the notebook server.\n+        return super(NbconvertPostHandler, self).content_security_policy + \\\n+               \"; sandbox allow-scripts\"\n+\n     @web.authenticated\n     def post(self, format):\n         exporter = get_exporter(format, config=self.config)", "file_path": "files/2018_11\\4", "file_language": "py", "file_name": "notebook/nbconvert/handlers.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def find_resource_files(output_files_dir):\n    files = []\n    for dirpath, dirnames, filenames in os.walk(output_files_dir):\n        files.extend([os.path.join(dirpath, f) for f in filenames])\n    return files", "target": 0}, {"function": "def respond_zip(handler, name, output, resources):\n    \"\"\"Zip up the output and resource files and respond with the zip file.\n\n    Returns True if it has served a zip file, False if there are no resource\n    files, in which case we serve the plain output file.\n    \"\"\"\n    # Check if we have resource files we need to zip\n    output_files = resources.get('outputs', None)\n    if not output_files:\n        return False\n\n    # Headers\n    zip_filename = os.path.splitext(name)[0] + '.zip'\n    handler.set_attachment_header(zip_filename)\n    handler.set_header('Content-Type', 'application/zip')\n    handler.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n\n    # Prepare the zip file\n    buffer = io.BytesIO()\n    zipf = zipfile.ZipFile(buffer, mode='w', compression=zipfile.ZIP_DEFLATED)\n    output_filename = os.path.splitext(name)[0] + resources['output_extension']\n    zipf.writestr(output_filename, cast_bytes(output, 'utf-8'))\n    for filename, data in output_files.items():\n        zipf.writestr(os.path.basename(filename), data)\n    zipf.close()\n\n    handler.finish(buffer.getvalue())\n    return True", "target": 0}, {"function": "def get_exporter(format, **kwargs):\n    \"\"\"get an exporter, raising appropriate errors\"\"\"\n    # if this fails, will raise 500\n    try:\n        from nbconvert.exporters.base import get_exporter\n    except ImportError as e:\n        raise web.HTTPError(500, \"Could not import nbconvert: %s\" % e)\n\n    try:\n        Exporter = get_exporter(format)\n    except KeyError:\n        # should this be 400?\n        raise web.HTTPError(404, u\"No exporter for format: %s\" % format)\n\n    try:\n        return Exporter(**kwargs)\n    except Exception as e:\n        app_log.exception(\"Could not construct Exporter: %s\", Exporter)\n        raise web.HTTPError(500, \"Could not construct Exporter: %s\" % e)", "target": 0}, {"function": "class NbconvertFileHandler(IPythonHandler):\n\n    SUPPORTED_METHODS = ('GET',)\n\n    @web.authenticated\n    def get(self, format, path):\n\n        exporter = get_exporter(format, config=self.config, log=self.log)\n\n        path = path.strip('/')\n        # If the notebook relates to a real file (default contents manager),\n        # give its path to nbconvert.\n        if hasattr(self.contents_manager, '_get_os_path'):\n            os_path = self.contents_manager._get_os_path(path)\n            ext_resources_dir, basename = os.path.split(os_path)\n        else:\n            ext_resources_dir = None\n\n        model = self.contents_manager.get(path=path)\n        name = model['name']\n        if model['type'] != 'notebook':\n            # not a notebook, redirect to files\n            return FilesRedirectHandler.redirect_to_files(self, path)\n\n        nb = model['content']\n\n        self.set_header('Last-Modified', model['last_modified'])\n\n        # create resources dictionary\n        mod_date = model['last_modified'].strftime(text.date_format)\n        nb_title = os.path.splitext(name)[0]\n\n        resource_dict = {\n            \"metadata\": {\n                \"name\": nb_title,\n                \"modified_date\": mod_date\n            },\n            \"config_dir\": self.application.settings['config_dir']\n        }\n\n        if ext_resources_dir:\n            resource_dict['metadata']['path'] = ext_resources_dir\n\n        try:\n            output, resources = exporter.from_notebook_node(\n                nb,\n                resources=resource_dict\n            )\n        except Exception as e:\n            self.log.exception(\"nbconvert failed: %s\", e)\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # Force download if requested\n        if self.get_argument('download', 'false').lower() == 'true':\n            filename = os.path.splitext(name)[0] + resources['output_extension']\n            self.set_attachment_header(filename)\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n        self.finish(output)", "target": 0}, {"function": "class NbconvertPostHandler(IPythonHandler):\n    SUPPORTED_METHODS = ('POST',)\n\n    @web.authenticated\n    def post(self, format):\n        exporter = get_exporter(format, config=self.config)\n\n        model = self.get_json_body()\n        name = model.get('name', 'notebook.ipynb')\n        nbnode = from_dict(model['content'])\n\n        try:\n            output, resources = exporter.from_notebook_node(nbnode, resources={\n                \"metadata\": {\"name\": name[:name.rfind('.')],},\n                \"config_dir\": self.application.settings['config_dir'],\n            })\n        except Exception as e:\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.finish(output)", "target": 0}], "function_after": [{"function": "def find_resource_files(output_files_dir):\n    files = []\n    for dirpath, dirnames, filenames in os.walk(output_files_dir):\n        files.extend([os.path.join(dirpath, f) for f in filenames])\n    return files", "target": 0}, {"function": "def respond_zip(handler, name, output, resources):\n    \"\"\"Zip up the output and resource files and respond with the zip file.\n\n    Returns True if it has served a zip file, False if there are no resource\n    files, in which case we serve the plain output file.\n    \"\"\"\n    # Check if we have resource files we need to zip\n    output_files = resources.get('outputs', None)\n    if not output_files:\n        return False\n\n    # Headers\n    zip_filename = os.path.splitext(name)[0] + '.zip'\n    handler.set_attachment_header(zip_filename)\n    handler.set_header('Content-Type', 'application/zip')\n    handler.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n\n    # Prepare the zip file\n    buffer = io.BytesIO()\n    zipf = zipfile.ZipFile(buffer, mode='w', compression=zipfile.ZIP_DEFLATED)\n    output_filename = os.path.splitext(name)[0] + resources['output_extension']\n    zipf.writestr(output_filename, cast_bytes(output, 'utf-8'))\n    for filename, data in output_files.items():\n        zipf.writestr(os.path.basename(filename), data)\n    zipf.close()\n\n    handler.finish(buffer.getvalue())\n    return True", "target": 0}, {"function": "def get_exporter(format, **kwargs):\n    \"\"\"get an exporter, raising appropriate errors\"\"\"\n    # if this fails, will raise 500\n    try:\n        from nbconvert.exporters.base import get_exporter\n    except ImportError as e:\n        raise web.HTTPError(500, \"Could not import nbconvert: %s\" % e)\n\n    try:\n        Exporter = get_exporter(format)\n    except KeyError:\n        # should this be 400?\n        raise web.HTTPError(404, u\"No exporter for format: %s\" % format)\n\n    try:\n        return Exporter(**kwargs)\n    except Exception as e:\n        app_log.exception(\"Could not construct Exporter: %s\", Exporter)\n        raise web.HTTPError(500, \"Could not construct Exporter: %s\" % e)", "target": 0}, {"function": "class NbconvertFileHandler(IPythonHandler):\n\n    SUPPORTED_METHODS = ('GET',)\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the notebook server.\n        return super(NbconvertFileHandler, self).content_security_policy + \\\n               \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def get(self, format, path):\n\n        exporter = get_exporter(format, config=self.config, log=self.log)\n\n        path = path.strip('/')\n        # If the notebook relates to a real file (default contents manager),\n        # give its path to nbconvert.\n        if hasattr(self.contents_manager, '_get_os_path'):\n            os_path = self.contents_manager._get_os_path(path)\n            ext_resources_dir, basename = os.path.split(os_path)\n        else:\n            ext_resources_dir = None\n\n        model = self.contents_manager.get(path=path)\n        name = model['name']\n        if model['type'] != 'notebook':\n            # not a notebook, redirect to files\n            return FilesRedirectHandler.redirect_to_files(self, path)\n\n        nb = model['content']\n\n        self.set_header('Last-Modified', model['last_modified'])\n\n        # create resources dictionary\n        mod_date = model['last_modified'].strftime(text.date_format)\n        nb_title = os.path.splitext(name)[0]\n\n        resource_dict = {\n            \"metadata\": {\n                \"name\": nb_title,\n                \"modified_date\": mod_date\n            },\n            \"config_dir\": self.application.settings['config_dir']\n        }\n\n        if ext_resources_dir:\n            resource_dict['metadata']['path'] = ext_resources_dir\n\n        try:\n            output, resources = exporter.from_notebook_node(\n                nb,\n                resources=resource_dict\n            )\n        except Exception as e:\n            self.log.exception(\"nbconvert failed: %s\", e)\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # Force download if requested\n        if self.get_argument('download', 'false').lower() == 'true':\n            filename = os.path.splitext(name)[0] + resources['output_extension']\n            self.set_attachment_header(filename)\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n        self.finish(output)", "target": 0}, {"function": "class NbconvertPostHandler(IPythonHandler):\n    SUPPORTED_METHODS = ('POST',)\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the notebook server.\n        return super(NbconvertPostHandler, self).content_security_policy + \\\n               \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def post(self, format):\n        exporter = get_exporter(format, config=self.config)\n\n        model = self.get_json_body()\n        name = model.get('name', 'notebook.ipynb')\n        nbnode = from_dict(model['content'])\n\n        try:\n            output, resources = exporter.from_notebook_node(nbnode, resources={\n                \"metadata\": {\"name\": name[:name.rfind('.')],},\n                \"config_dir\": self.application.settings['config_dir'],\n            })\n        except Exception as e:\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.finish(output)", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
