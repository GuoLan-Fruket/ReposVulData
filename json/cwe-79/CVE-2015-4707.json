{"index": 2287, "cve_id": "CVE-2015-4707", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Cross-site scripting (XSS) vulnerability in IPython before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/notebooks path.", "cvss": "6.1", "publish_date": "September 20, 2017", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "c2078a53543ed502efd968649fee1125e0eb549c", "commit_message": "Set content type in json_error to application/json", "commit_date": "2015-06-22T04:12:34Z", "project": "ipython/ipython", "url": "https://api.github.com/repos/ipython/ipython/commits/c2078a53543ed502efd968649fee1125e0eb549c", "html_url": "https://github.com/ipython/ipython/commit/c2078a53543ed502efd968649fee1125e0eb549c", "windows_before": [{"commit_id": "7298a15276c7be6d348bbd78ab6593efdce4b65f", "commit_date": "Sun Jun 21 15:44:40 2015 -0700", "commit_message": "Merge pull request #8545 from Carreau/remove-magic", "files_name": ["454a419c35d4dad24a448587fe74478b42aa8763 - Mon Jun 22 00:14:04 2015 +0200 : No longer deprecated. Removed.", "IPython/extensions/sympyprinting.py"]}, {"commit_id": "d4181dd41aaa9b7ff7b6756e3be2291e5a458fe3", "commit_date": "Sun Jun 21 13:22:46 2015 -0700", "commit_message": "Merge pull request #8559 from Carreau/more-unused", "files_name": ["7faa1fb9e3adc752d7a173b9e7b0651a57750b06 - Sun Jun 21 22:01:17 2015 +0200 : remove unused and broken function", "IPython/testing/globalipapp.py"]}, {"commit_id": "67d3518a562136301949cd4d352438f022c160ac", "commit_date": "Sun Jun 21 12:41:13 2015 -0700", "commit_message": "Merge pull request #8558 from Carreau/deprecated-none", "files_name": ["318f416b569ae625d4cf139c2d2fdc5b56199414 - Sun Jun 21 21:31:51 2015 +0200 : Remove deprecated methods.", "IPython/lib/inputhook.py"]}, {"commit_id": "3842205376d101147f3605b0e8ea238f884b21f8", "commit_date": "Thu Jun 18 20:45:07 2015 +0200", "commit_message": "Remove old deprecated extensions.", "files_name": ["IPython/extensions/cythonmagic.py", "IPython/extensions/rmagic.py", "IPython/extensions/sympyprinting.py"]}, {"commit_id": "60e33b68e6890f3c1b4c388f16d49893ca402d9c", "commit_date": "Sat Jun 13 13:21:25 2015 -0700", "commit_message": "Merge pull request #8534 from SylvainCorlay/fix_shim", "files_name": ["e2f48fa8a437b4e1e871dce69f02da5a3af68ea9 - Sat Jun 13 14:36:28 2015 -0400 : Fix qtconsole shims", "IPython/qt.py"]}, {"commit_id": "5ac739bcffae8dbaa9768bd85894ec454841498c", "commit_date": "Thu Jun 11 13:20:17 2015 -0700", "commit_message": "Merge pull request #8530 from takluyver/no-dreload-collections-py3k-2", "files_name": ["353f7f0df7bfbcc6c07a6b766e1c10cfc1913154 - Thu Jun 11 13:00:29 2015 -0700 : Wake up, Travis!", "IPython/lib/tests/test_deepreload.py"]}, {"commit_id": "786c612bffa6eca905518660729350b364d5d8db", "commit_date": "Thu Jun 11 12:46:33 2015 -0700", "commit_message": "Another attempt at blacklisting collections for dreload", "files_name": ["IPython/lib/tests/test_deepreload.py"]}, {"commit_id": "c4d05dcce3dbe404247a43bd983970129431b982", "commit_date": "Tue Jun 9 19:42:54 2015 -0500", "commit_message": "Merge pull request #8521 from Carreau/close-14-remove-Term", "files_name": ["a33a0632c00b604683aab8454983716823550407 - Tue Jun 9 16:55:20 2015 -0700 : Remove old unused class", "IPython/core/magics/execution.py", "IPython/core/profiledir.py", "IPython/utils/io.py"]}, {"commit_id": "3a927984fa3582669bdf958c55b075d70e745413", "commit_date": "Tue Jun 9 11:17:46 2015 -0700", "commit_message": "Merge pull request #8519 from chebee7i/ipydirective_update", "files_name": ["e2b4f66ce3882f14a9d4e80c51e0986f9ea58925 - Mon Jun 8 20:46:04 2015 -0500 : Add a more informative error message for IPython directive. When a bad block is detected, show more information.", "IPython/sphinxext/ipython_directive.py"]}, {"commit_id": "db282c7a3a8ddfe56a9255bc5ef74818bdfc111c", "commit_date": "Mon Jun 8 11:40:46 2015 -0700", "commit_message": "Merge pull request #8516 from takluyver/make-no-gitwash", "files_name": ["573cfd5e191030dc2ca9de888140bf73249ebb40 - Mon Jun 8 11:34:24 2015 -0700 : Remove gitwash from docs Makefile", "docs/Makefile"]}, {"commit_id": "dc787f720e2b452e847850f9f4d0822c53868678", "commit_date": "Mon Jun 8 10:55:30 2015 -0700", "commit_message": "Merge pull request #8515 from takluyver/qtconsole-subcmd-import", "files_name": ["2e032c2187d1b4f95d2f87c013cfc7c974e7f735 - Mon Jun 8 10:49:37 2015 -0700 : Fix import location for qtconsole subcommand", "IPython/terminal/ipapp.py"]}, {"commit_id": "b87b138b4e34f94d674e3894092b181fd6ab59c2", "commit_date": "Thu Jun 4 11:16:18 2015 -0700", "commit_message": "Merge pull request #8506 from Carreau/matplotlib-list", "files_name": ["41b8f2f0aa24a93a4e2acf5ea04428be34ba2ed3 - Wed Jun 3 16:23:26 2015 -0700 : remove explicit default", "IPython/core/magics/pylab.py"]}, {"commit_id": "b4f9523e158ecd3da30009330c5252f3309919ee", "commit_date": "Wed Jun 3 16:20:10 2015 -0700", "commit_message": "Merge pull request #8505 from Carreau/displayhook", "files_name": ["56fbc14c2b290a9afb5e897096598383b0d6d4ae - Wed Jun 3 11:48:57 2015 -0700 : Fix test after rebase", "IPython/core/displayhook.py", "IPython/lib/tests/test_deepreload.py"]}, {"commit_id": "d823445d551ab1d86422a88e0ee746f1eade8fe2", "commit_date": "Wed Jun 3 11:17:31 2015 -0700", "commit_message": "pep8", "files_name": ["IPython/core/tests/test_displayhook.py"]}, {"commit_id": "b61d88a990d7923e4a74df003dc70c4667186ee7", "commit_date": "Wed Jun 3 11:03:30 2015 -0700", "commit_message": "fix indentation by tabs", "files_name": ["IPython/core/displayhook.py"]}, {"commit_id": "fe67899d9f2772ce01689ebff59ab43b0280474e", "commit_date": "Sat May 23 21:54:25 2015 -0500", "commit_message": "Update displayhook.py", "files_name": ["IPython/core/displayhook.py"]}, {"commit_id": "eaf200b8953889ad0895d35e4b2348cda0ce981d", "commit_date": "Sat May 23 10:07:13 2015 -0500", "commit_message": "Update displayhook.py", "files_name": ["IPython/core/displayhook.py"]}, {"commit_id": "ecd438130638c5e5bcc96f0013fc86ddfa358bc6", "commit_date": "Tue Apr 14 10:42:50 2015 -0400", "commit_message": "make the tests fail correctly", "files_name": ["IPython/core/tests/test_displayhook.py"]}, {"commit_id": "be0a8e6a964a1d1e3742a1f01a94f1ed08fca557", "commit_date": "Mon Apr 13 19:07:48 2015 -0400", "commit_message": "Added tests for displayhook", "files_name": ["IPython/core/tests/test_displayhook.py"]}, {"commit_id": "ab59d42f3ec812e6b4bc1ae6d16213eddd8819f3", "commit_date": "Mon Apr 13 18:03:14 2015 -0400", "commit_message": "add test file for display hooks", "files_name": ["IPython/core/tests/test_displayhook.py"]}, {"commit_id": "fafb8488845bf2f1a316aa221cd77161f770b8a1", "commit_date": "Tue Jun 2 10:58:43 2015 -0700", "commit_message": "Merge pull request #8487 from Carreau/nodreload", "files_name": ["3a35a5e66957bfbfbbb09650f11bb17cbac200a6 - Tue Jun 2 00:00:10 2015 +0200 : Merge pull request #8480 from Carreau/interactive-deprecation-warning", "5131c02ad8cbe468994094a86dbb289195fc3afd - Mon Jun 1 10:26:59 2015 -0700 : Merge pull request #8493 from tianhuil/master", "64e63ff5e5d48937f0335c42672444cf6afd0502 - Sun May 31 17:57:28 2015 -0400 : ExecutionResult support `raise_error` method", "IPython/core/interactiveshell.py"]}, {"commit_id": "b259affc210da9a1c6a395bc7b55e58db035a27d", "commit_date": "Sun May 31 17:56:55 2015 -0400", "commit_message": "flipping order of charges in safe_exefile_ipy", "files_name": ["IPython/core/interactiveshell.py"]}, {"commit_id": "1ea4357e3f18fbadbceaa8fcba04d22c8fc50b22", "commit_date": "Sun May 31 17:56:19 2015 -0400", "commit_message": "Reprising caught error", "files_name": ["IPython/core/interactiveshell.py"]}, {"commit_id": "ba8af4d6beedab3aa499bb739c0a69ea38c5a139", "commit_date": "Sun May 31 09:07:35 2015 -0400", "commit_message": "safe_execfile_ipy optionally raises exception in user code", "files_name": ["IPython/core/interactiveshell.py"]}, {"commit_id": "2d91b5b6bf039564f78bb708bc1f4c05673f181e", "commit_date": "Fri May 29 14:08:16 2015 -0700", "commit_message": "add what's new", "files_name": ["docs/source/whatsnew/pr/no-dreload.rst"]}, {"commit_id": "ec2ff45690cb3e686f1923acaf9277649a6195e2", "commit_date": "Fri May 29 14:03:56 2015 -0700", "commit_message": "deprecate auto-injection of deep-reload", "files_name": ["IPython/core/builtin_trap.py", "IPython/core/interactiveshell.py", "IPython/core/shellapp.py", "IPython/lib/deepreload.py", "docs/source/config/intro.rst"]}, {"commit_id": "e54e44b9bced8a9df0eed4fef77bf678e599cf82", "commit_date": "Fri May 29 12:44:19 2015 +1000", "commit_message": "Simpler if statement and added line to the docs", "files_name": ["IPython/core/magics/pylab.py"]}, {"commit_id": "fe31d6221c83cb4c452b75e6a76f3a1eaf1346f5", "commit_date": "Thu May 28 15:01:04 2015 -0700", "commit_message": "Merge pull request #8484 from takluyver/docs-autogen-config-traitlets", "files_name": ["b5741cb8aa1ca5839c441d691c92bcaf05dce451 - Thu May 28 14:22:38 2015 -0700 : Merge pull request #8481 from Virako/master", "e1b98ee4a9f1fbc48c6f711a56cda7e126cba92e - Thu May 28 12:08:56 2015 -0700 : do not show pending deprecation warnign", "IPython/core/interactiveshell.py", "docs/source/whatsnew/pr/deprecation_warning.rst"]}, {"commit_id": "916e70316a6124cbfb7293e9e31e42424d4d405e", "commit_date": "Thu May 28 12:01:04 2015 -0700", "commit_message": "Use new traitlets API to generate config docs", "files_name": ["docs/autogen_config.py"]}, {"commit_id": "48f65af2e3b3898167adf6034a9b0f3687b9e5b8", "commit_date": "Thu May 28 09:54:02 2015 -0700", "commit_message": "Merge pull request #8464 from RazerM/master", "files_name": ["e51e50d36f2d05061ef7bdcea56531f5fca08f4c - Wed May 27 19:13:48 2015 -0700 : Merge pull request #8475 from Carreau/do-not-dreload-collections", "ef5e143028f623f482d3289fc386a0d48eccbcb0 - Wed May 27 19:13:21 2015 -0700 : Merge pull request #8476 from takluyver/docs-cleanup-config", "fb7adcb90c1a63f0235d91a2f6e87b8d0f5038a5 - Wed May 27 19:10:15 2015 -0700 : use user-ns __name__", "IPython/core/interactiveshell.py"]}, {"commit_id": "453f768fc98b1e402ce1bfb36c05ef8bf9c3356c", "commit_date": "Thu May 28 01:10:47 2015 +0200", "commit_message": "Longlist display code with syntax-highlighted. Close #4093", "files_name": ["IPython/core/debugger.py"]}, {"commit_id": "c69d5c43b9524f9b09e47648de630b9425f51b2e", "commit_date": "Wed May 27 13:25:38 2015 -0700", "commit_message": "add info in whats new", "files_name": ["docs/source/whatsnew/pr/deprecation_warning.rst"]}, {"commit_id": "4763214a42c979b36adda901811a4b8688f180a5", "commit_date": "Wed May 27 11:24:07 2015 -0700", "commit_message": "Test imported code does not raise deprecation warning.", "files_name": ["IPython/core/tests/test_interactiveshell.py"]}, {"commit_id": "a4980283bcca551b373f936ef4fa7aed6edc1729", "commit_date": "Wed May 27 11:02:30 2015 -0700", "commit_message": "Add test that interactive warning is shown.", "files_name": ["IPython/core/tests/test_interactiveshell.py"]}, {"commit_id": "1478e0d7c7152dfcbe3c1c3d9ba58255f62fa2b7", "commit_date": "Wed May 27 10:50:45 2015 -0700", "commit_message": "register default deprecation warning filter.", "files_name": ["IPython/core/interactiveshell.py"]}, {"commit_id": "44705adbfac6740e9ea20ec34f425d0dd5f770d0", "commit_date": "Tue May 26 15:19:14 2015 -0700", "commit_message": "Merge pull request #8477 from takluyver/docs-rm-parallel", "files_name": ["085662f638d1a288574e81f68045975c594ee23d - Tue May 26 15:06:40 2015 -0700 : Remove ipyparallel docs", "docs/source/index.rst", "docs/source/parallel/asyncresult.rst", "docs/source/parallel/dag_dependencies.rst", "docs/source/parallel/figs/asian_call.pdf", "docs/source/parallel/figs/asian_call.png", "docs/source/parallel/figs/asian_put.pdf", "docs/source/parallel/figs/asian_put.png", "docs/source/parallel/figs/dagdeps.pdf", "docs/source/parallel/figs/dagdeps.png", "docs/source/parallel/figs/hpc_job_manager.pdf", "docs/source/parallel/figs/hpc_job_manager.png", "docs/source/parallel/figs/mec_simple.pdf", "docs/source/parallel/figs/mec_simple.png", "docs/source/parallel/figs/parallel_pi.pdf", "docs/source/parallel/figs/parallel_pi.png", "docs/source/parallel/figs/simpledag.pdf", "docs/source/parallel/figs/simpledag.png", "docs/source/parallel/figs/single_digits.pdf", "docs/source/parallel/figs/single_digits.png", "docs/source/parallel/figs/two_digit_counts.pdf", "docs/source/parallel/figs/two_digit_counts.png", "docs/source/parallel/figs/wideView.png", "docs/source/parallel/index.rst", "docs/source/parallel/magics.rst", "docs/source/parallel/parallel_db.rst", "docs/source/parallel/parallel_demos.rst", "docs/source/parallel/parallel_details.rst", "docs/source/parallel/parallel_intro.rst", "docs/source/parallel/parallel_mpi.rst", "docs/source/parallel/parallel_multiengine.rst", "docs/source/parallel/parallel_process.rst", "docs/source/parallel/parallel_security.rst", "docs/source/parallel/parallel_task.rst", "docs/source/parallel/parallel_transition.rst", "docs/source/parallel/parallel_winhpc.rst"]}, {"commit_id": "0f07b0a272582a40cb2d8386afffdab2e422f3d8", "commit_date": "Tue May 26 14:40:18 2015 -0700", "commit_message": "Describe finding the IPython directory in user-facing config docs", "files_name": ["docs/source/config/intro.rst"]}, {"commit_id": "91d05663d890e7c189042578f02825a0baddf39c", "commit_date": "Tue May 26 14:31:51 2015 -0700", "commit_message": "Remove documentation on startup files", "files_name": ["docs/source/development/config.rst"]}, {"commit_id": "ef7f9d6ea578aa9073201002ae29272f0591160f", "commit_date": "Tue May 26 14:30:21 2015 -0700", "commit_message": "Remove docs on security files", "files_name": ["docs/source/development/config.rst"]}, {"commit_id": "53847590637f818a5bbafab5c54ea474920002a8", "commit_date": "Tue May 26 14:27:41 2015 -0700", "commit_message": "Remove documentation of machinery that is now in traitlets", "files_name": ["docs/source/conf.py", "docs/source/config/intro.rst", "docs/source/development/config.rst"]}, {"commit_id": "8361063526906efaf628a0a93fd4e990b68736d9", "commit_date": "Tue May 26 13:33:25 2015 -0700", "commit_message": "Do not deep-reload collection to fix tests.", "files_name": ["IPython/lib/tests/test_deepreload.py"]}, {"commit_id": "8927031afe358f7455b5ab9e9cf1a008dc1b6210", "commit_date": "Tue May 26 19:56:22 2015 +0200", "commit_message": "Remove extra indentation.", "files_name": ["IPython/lib/pretty.py"]}, {"commit_id": "5a106ac3f2e61a69d082403493d3f3f110a0c146", "commit_date": "Mon May 25 20:34:35 2015 -0500", "commit_message": "Merge pull request #8461 from minrk/optional-deps", "files_name": ["1b326bd554fc35c486edeca47c1e7509b83cb6b9 - Sun May 24 16:38:08 2015 -0700 : Merge pull request #8470 from takluyver/i8465", "cf133197cc3ed3d72a726909fc0538a3b7564f73 - Sun May 24 15:55:14 2015 -0700 : Fix quitting debugger when readline not in use", "IPython/core/debugger.py"]}, {"commit_id": "a1cc866c25a8ab7b79a837bc5eb746fb79f15ffb", "commit_date": "Sat May 23 15:26:16 2015 +0200", "commit_message": "Remove refs to Python 2.4, use group context manager", "files_name": ["IPython/lib/pretty.py"]}], "windows_after": [{"commit_id": "d2f74cd655129a16ba4fe4270c9df8b8030f2419", "commit_date": "Mon Jun 22 13:55:02 2015 +0200", "commit_message": "Typo in sympyprinting `as move`-> `has moved`", "files_name": ["IPython/extensions/sympyprinting.py"]}, {"commit_id": "b754d5eae1eb14692024453a9b556abb93445749", "commit_date": "Mon Jun 22 09:59:58 2015 -0700", "commit_message": "Merge pull request #8561 from ipython/Carreau-patch-1-2", "files_name": ["e97b7e68a3bb2f4871ff75b63bb9ef3923907173 - Wed Jun 24 11:44:25 2015 +0300 : fix to autoreload for cases when module has no __name__ attribute", "IPython/extensions/autoreload.py"]}, {"commit_id": "b0100c6f1e7d44b55edd36ed30d80686d3deb3d9", "commit_date": "Wed Jun 24 14:52:23 2015 -0700", "commit_message": "Refer to jupyter_client docs for message spec", "files_name": ["docs/source/conf.py", "docs/source/development/figs/frontend-kernel.png", "docs/source/development/figs/frontend-kernel.svg", "docs/source/development/index.rst", "docs/source/development/messaging.rst"]}, {"commit_id": "bec8d3dc5437434d63f9bc7ebc3a7b10e6ac4fd3", "commit_date": "Wed Jun 24 17:18:24 2015 -0700", "commit_message": "Remove outdated info from README", "files_name": ["README.rst"]}, {"commit_id": "d78f0a793c72cb800f69e08cc413c93f7843ebdd", "commit_date": "Wed Jun 24 23:53:54 2015 -0500", "commit_message": "Merge pull request #8574 from takluyver/no-submodules-readme", "files_name": ["20da5b47a1b48bb3dc94663e5ee853285f36caa8 - Thu Jun 25 07:58:37 2015 +0200 : Merge pull request #8573 from takluyver/rm-msgspec", "36683fff1590318007336830401deaf2797f5fa1 - Fri Jun 26 14:32:34 2015 -0700 : Update subcommand alias for installing nbextensions", "IPython/terminal/ipapp.py"]}, {"commit_id": "906c0f940ca8bbe58d5ec22687247bfb69c7b9e5", "commit_date": "Sat Jun 27 20:45:29 2015 -0700", "commit_message": "Merge pull request #8583 from takluyver/subcmd-nbextension-install", "files_name": ["f4ed417c7afe77961e6ee6d7adf32f657cd5a845 - Sun Jun 28 17:52:55 2015 -0700 : handle multiple decorators in oinspect", "IPython/core/oinspect.py", "IPython/core/tests/test_oinspect.py"]}, {"commit_id": "7fb6e46a1dcfdabdf63e7f3db71015eda09be5a5", "commit_date": "Mon Jun 29 10:13:28 2015 -0700", "commit_message": "Merge pull request #8588 from minrk/multi-wrap", "files_name": ["9e713c799e70f419f61c034826f8c9222e34b6b2 - Tue Jun 30 12:02:53 2015 -0700 : create new config objects in test_omit__names", "IPython/core/tests/test_completer.py"]}, {"commit_id": "506ed73aae9113f04eb485dda87803fcd4b49de4", "commit_date": "Tue Jun 30 15:03:12 2015 -0700", "commit_message": "Merge pull request #8593 from minrk/new-config", "files_name": ["702159755d89990092d0ae303d88ef4f164c4b33 - Thu Jul 2 08:20:41 2015 -0700 : Deprecate and undocument install_ext", "IPython/core/magics/extension.py", "docs/source/config/extensions/index.rst"]}, {"commit_id": "2c9013e4690c119b08394a19fca8cc82b6da101b", "commit_date": "Thu Jul 2 11:22:53 2015 -0700", "commit_message": "add ShimWarning for shimmed imports", "files_name": ["IPython/config.py", "IPython/frontend.py", "IPython/html.py", "IPython/kernel/__init__.py", "IPython/nbconvert.py", "IPython/nbformat.py", "IPython/parallel.py", "IPython/qt.py", "IPython/terminal/console.py", "IPython/utils/shimmodule.py", "IPython/utils/tests/test_shimmodule.py"]}, {"commit_id": "47753b437acabf3602ec06f4380966f70d041d34", "commit_date": "Thu Jul 2 12:31:38 2015 -0700", "commit_message": "Merge pull request #8602 from minrk/shim-warning", "files_name": ["cda41d92ff2e2642038e5d200632ade709c4e6c4 - Wed Jul 8 16:11:37 2015 +0200 : Safely encode paths in compress_user - Avoids a `UnicodeDecodeError` when a tooltip that includes a non-ascii pathname is shown on Python 2 - Related to #8543", "IPython/utils/path.py"]}, {"commit_id": "ea49c8634d7db8ca30ed308cff2a1ef924e82261", "commit_date": "Wed Jul 8 11:03:32 2015 -0500", "commit_message": "Merge pull request #8614 from smathot/master", "files_name": ["48aac09dd0a5a94ce135deb1adcf12f9d8b57907 - Thu Jul 9 09:15:39 2015 -0500 : Add failing test for suppressing exception chaining", "IPython/core/tests/test_ultratb.py"]}, {"commit_id": "8ea23f363ada424cc34f00b8fc7df8d5409f6dfc", "commit_date": "Thu Jul 9 09:16:01 2015 -0500", "commit_message": "Fix suppression of exception chaining with 'from None'", "files_name": ["IPython/core/ultratb.py"]}, {"commit_id": "c114093a427b0dd22f3790debb83f528ba6a6a37", "commit_date": "Fri Jul 10 21:39:30 2015 -0500", "commit_message": "Merge pull request #8620 from takluyver/i8618", "files_name": ["1603d69e333dae0fd770869d8575709bea846b26 - Sat Jul 11 14:58:14 2015 -0500 : remove js, css steps from release script", "tools/release"]}, {"commit_id": "8137f8f0dfd0183450b535b362c4d537f2e4aa9a", "commit_date": "Sat Jul 11 15:00:41 2015 -0500", "commit_message": "4.0.0b1", "files_name": ["IPython/core/release.py"]}, {"commit_id": "3dcf94a47dcd54529b7e4d5cca8dbd8fac4ed7e2", "commit_date": "Sat Jul 11 15:04:05 2015 -0500", "commit_message": "back to dev", "files_name": ["IPython/core/release.py"]}, {"commit_id": "6ea81c9640afa25712c6dd2f2a39337000cf2fc4", "commit_date": "Tue Jul 14 23:20:04 2015 +1000", "commit_message": "Fixed typo", "files_name": ["tools/gen_latex_symbols.py"]}, {"commit_id": "89da3f523d2be13032a486717d99eb4478740775", "commit_date": "Tue Jul 14 09:18:42 2015 -0700", "commit_message": "Merge pull request #8632 from radarhere/patch-1", "files_name": ["068f9d2552e2b31a4e0d83310a10659c9a066c19 - Wed Jul 15 11:34:46 2015 -0700 : Merge pull request #8601 from Carreau/no-install-ext", "a08029261ca835a534dbfa9e76239d3a6c6d006d - Mon Jul 20 20:12:57 2015 +0000 : Use instances of traits instead of trait classes", "IPython/core/application.py", "IPython/core/display_trap.py", "IPython/core/formatters.py", "IPython/core/magic.py", "IPython/core/shellapp.py"]}, {"commit_id": "f0fa6349991967212c4ad30a07200c7ea2201919", "commit_date": "Mon Jul 20 13:28:03 2015 -0700", "commit_message": "Merge pull request #8643 from jasongrout/trait-instances", "files_name": ["5b9cee89e038fd28cadeb5065fc5d4aad699cbd7 - Thu Jul 23 12:06:06 2015 +0200 : Fix minor documentation typo", "IPython/lib/pretty.py"]}, {"commit_id": "3e49b3cd7f4e32bedf5a5666ea1a967f7791a2bd", "commit_date": "Thu Jul 23 10:01:30 2015 -0700", "commit_message": "Merge pull request #8651 from RazerM/master", "files_name": ["059ea261ce5a1c088e08c153d783b8e6ea33249f - Thu Jul 23 17:49:11 2015 +0000 : Fix one more deprecated trait type vs. instance case", "IPython/lib/latextools.py"]}, {"commit_id": "20d56660bb155da29a927b94f3bdb15648bda36f", "commit_date": "Fri Jul 24 21:37:07 2015 +0200", "commit_message": "added absolute_import to utils.text module + test", "files_name": ["IPython/utils/tests/test_text.py", "IPython/utils/text.py"]}, {"commit_id": "7f388f5d23b358d1c971618b3bc611880c21c341", "commit_date": "Fri Jul 24 13:40:26 2015 -0700", "commit_message": "Merge pull request #8654 from jasongrout/traits", "files_name": ["55c0cb15b8543a0079017e8f554538fda6037063 - Fri Jul 24 22:42:17 2015 +0200 : Revert \"added absolute_import to utils.text module + test\"", "IPython/utils/tests/test_text.py", "IPython/utils/text.py"]}, {"commit_id": "172b830d38724417942a5ac405e5bde756cafedf", "commit_date": "Fri Jul 24 22:46:10 2015 +0200", "commit_message": "Re-added fix without whitespace mess", "files_name": ["IPython/utils/tests/test_text.py", "IPython/utils/text.py"]}, {"commit_id": "d3fde8121a0bedf15f613750105d80d62c66f2ad", "commit_date": "Fri Jul 24 23:53:02 2015 +0200", "commit_message": "put test in test_LSString", "files_name": ["IPython/utils/tests/test_text.py"]}, {"commit_id": "2d3afeb531e912097da9c25edbb14755322f2aa9", "commit_date": "Fri Jul 24 15:43:51 2015 -0700", "commit_message": "Test on Python 3.5 beta 3", "files_name": [".travis.yml"]}, {"commit_id": "b37201e3f2d25a1d94c92bc049116bdafb7c97fb", "commit_date": "Sat Jul 25 19:03:20 2015 +0200", "commit_message": "added test", "files_name": ["IPython/utils/tests/test_text.py"]}, {"commit_id": "310c41723bd24cbbdd55abfe07264c8eb8832b41", "commit_date": "Sat Jul 25 19:09:29 2015 +0200", "commit_message": "text fix", "files_name": ["IPython/utils/tests/test_text.py"]}, {"commit_id": "14dd04c0fa9e27c40b72d8593bf6193858fd3543", "commit_date": "Sat Jul 25 19:29:31 2015 +0200", "commit_message": "test fix to try path for cwd", "files_name": ["IPython/utils/tests/test_text.py"]}, {"commit_id": "a38307b204663ccc98bf26b4aee1fcf3883fc5de", "commit_date": "Sat Jul 25 19:32:06 2015 +0200", "commit_message": "added path import in test_text", "files_name": ["IPython/utils/tests/test_text.py"]}, {"commit_id": "2d94e1da3e8dcd3abd473238b55e9c6be4c85793", "commit_date": "Sat Jul 25 13:10:11 2015 -0700", "commit_message": "Merge pull request #8656 from Mrngilles/local_import_fix", "files_name": ["6525f3bb574917afd42ceef44dd41c882a2f2d3f - Mon Jul 27 09:22:48 2015 -0700 : Exclude some more modules from deepreload test", "IPython/lib/tests/test_deepreload.py"]}, {"commit_id": "1d9ef76249a2a4dd9351f0df14f91f5915e37c8f", "commit_date": "Mon Jul 27 09:31:03 2015 -0700", "commit_message": "Exclude some more import-related modules from deepreload test", "files_name": ["IPython/lib/tests/test_deepreload.py"]}, {"commit_id": "0b5f4a8225196cfcb89851eceff52a6368cb7abc", "commit_date": "Mon Jul 27 09:39:40 2015 -0700", "commit_message": "Merge pull request #8658 from takluyver/travis-3.5b3", "files_name": ["368981c774e4c48e6774bab54f7732137d17039b - Mon Jul 27 13:18:40 2015 -0700 : Test on 3.5 beta 4 on Travis", ".travis.yml"]}, {"commit_id": "1059cf4772f993a804d1b05a66a94fafee379692", "commit_date": "Wed Jul 29 18:24:54 2015 +0200", "commit_message": "Support unicode returned by raw_input", "files_name": ["IPython/terminal/interactiveshell.py"]}, {"commit_id": "4a04424fb2aae526e16c5090b9963b3b8ac67590", "commit_date": "Wed Jul 29 10:03:08 2015 -0700", "commit_message": "Merge pull request #8673 from Drekin/allow-unicode-rawinput", "files_name": ["1a63c2f9742ee5d612437d3404041dab1b0b042a - Thu Jul 30 15:19:36 2015 +1000 : Note use of -- for -i to behave like cpython", "IPython/terminal/ipapp.py"]}, {"commit_id": "c1047b2f37fb9f9f06e6d515b9fddbae1fbebdec", "commit_date": "Thu Jul 30 10:18:21 2015 -0700", "commit_message": "Merge pull request #8675 from jnothman/force_interact_comment", "files_name": ["5e2eb98837352035a9b08df4e1869dec9f95937c - Fri Jul 31 10:06:15 2015 -0700 : Merge pull request #8668 from takluyver/travis-35b4", "b831b2966096cedc2ad97af6e574c843043417af - Tue Aug 4 11:02:27 2015 -0700 : Remove unmaintained lists of contributors", "docs/source/about/credits.rst", "docs/source/about/index.rst", "docs/source/about/license_and_copyright.rst"]}, {"commit_id": "37ff5bd21eddebdabf72dc69d7ad27041d206a19", "commit_date": "Tue Aug 4 11:16:22 2015 -0700", "commit_message": "Update long description for PyPI", "files_name": ["IPython/core/release.py"]}, {"commit_id": "845d820bc19b2ea60587b81c3914afa7fedb747e", "commit_date": "Tue Aug 4 11:39:35 2015 -0700", "commit_message": "Merge pull request #8687 from takluyver/rm-static-credits-list", "files_name": ["36ad84dc090ed2b5f42eef086c563085b23209f8 - Tue Aug 4 11:41:15 2015 -0700 : Merge pull request #8688 from takluyver/update-pypi-description", "44ce61cb6143e7d39294f7e94522843d573b475a - Wed Aug 5 16:58:12 2015 +0100 : Capitalising Python", "docs/source/interactive/shell.rst"]}, {"commit_id": "5c9050fc745c316dfe5247d3583277806fcadb8b", "commit_date": "Wed Aug 5 10:49:28 2015 -0700", "commit_message": "Merge pull request #8690 from joedborg/patch-1", "files_name": ["81795ac452b124c2346a9439154eca6cc2804a8b - Wed Aug 5 12:02:36 2015 -0700 : Remove manpages for IPython.parallel commands", "docs/man/ipcluster.1", "docs/man/ipcontroller.1", "docs/man/ipengine.1"]}, {"commit_id": "7a31d9311432fa8001f75aac1b1ba1599c967ed6", "commit_date": "Wed Aug 5 12:21:57 2015 -0700", "commit_message": "Remove ipynb icons", "files_name": ["docs/resources/Info.plist.example", "docs/resources/generate_icons.sh", "docs/resources/ipynb_icon.icns", "docs/resources/ipynb_icon_128x128.png", "docs/resources/ipynb_icon_16x16.png", "docs/resources/ipynb_icon_16x16.svg", "docs/resources/ipynb_icon_24x24.png", "docs/resources/ipynb_icon_24x24.svg", "docs/resources/ipynb_icon_256x256.png", "docs/resources/ipynb_icon_32x32.png", "docs/resources/ipynb_icon_32x32.svg", "docs/resources/ipynb_icon_48x48.png", "docs/resources/ipynb_icon_512x512.png", "docs/resources/ipynb_icon_512x512.svg", "docs/resources/ipynb_icon_64x64.png"]}, {"commit_id": "128da1a6e7ea8e3ab20bea18cb63056e097ffb2b", "commit_date": "Wed Aug 5 14:26:43 2015 -0700", "commit_message": "Remove notebook docs", "files_name": ["docs/source/index.rst", "docs/source/notebook/index.rst", "docs/source/notebook/ipython_security.asc", "docs/source/notebook/nbconvert.rst", "docs/source/notebook/nbformat.rst", "docs/source/notebook/notebook.rst", "docs/source/notebook/public_server.rst", "docs/source/notebook/security.rst"]}, {"commit_id": "d652d370c2959cfb74b9a1c62a77b3d03d4799e1", "commit_date": "Wed Aug 5 14:26:57 2015 -0700", "commit_message": "Add see also box for Jupyter and ipyparallel docs", "files_name": ["docs/source/index.rst"]}, {"commit_id": "2fa7a5312fa7120b6a56182d5381d4ffe2933afc", "commit_date": "Wed Aug 5 14:32:28 2015 -0700", "commit_message": "Fix seealso link to the notebook", "files_name": ["docs/source/interactive/index.rst"]}, {"commit_id": "acfa06b032ae240b8157c25f257b9cacea5b878f", "commit_date": "Wed Aug 5 14:33:47 2015 -0700", "commit_message": "Remove links to notebook and qtconsole options docs", "files_name": ["docs/source/config/options/index.rst"]}, {"commit_id": "18bbe9afb8177f5bcf2d6869db28c16eeaea9818", "commit_date": "Wed Aug 5 14:40:44 2015 -0700", "commit_message": "Remove docs for deprecated extensions", "files_name": ["docs/source/config/extensions/cythonmagic.rst", "docs/source/config/extensions/index.rst", "docs/source/config/extensions/sympyprinting.rst"]}], "parents": [{"commit_id_before": "64966ea2ae0d44a9c059efcb299db66cbc66ef04", "url_before": "https://api.github.com/repos/ipython/ipython/commits/64966ea2ae0d44a9c059efcb299db66cbc66ef04", "html_url_before": "https://github.com/ipython/ipython/commit/64966ea2ae0d44a9c059efcb299db66cbc66ef04"}], "details": [{"raw_url": "https://github.com/ipython/ipython/raw/c2078a53543ed502efd968649fee1125e0eb549c/IPython%2Fhtml%2Fbase%2Fhandlers.py", "code": "\"\"\"Base Tornado handlers for the notebook.\n\nAuthors:\n\n* Brian Granger\n\"\"\"\n\n#-----------------------------------------------------------------------------\n#  Copyright (C) 2011  The IPython Development Team\n#\n#  Distributed under the terms of the BSD License.  The full license is in\n#  the file COPYING, distributed as part of this software.\n#-----------------------------------------------------------------------------\n\n#-----------------------------------------------------------------------------\n# Imports\n#-----------------------------------------------------------------------------\n\n\nimport functools\nimport json\nimport logging\nimport os\nimport re\nimport sys\nimport traceback\ntry:\n    # py3\n    from http.client import responses\nexcept ImportError:\n    from httplib import responses\n\nfrom jinja2 import TemplateNotFound\nfrom tornado import web\n\ntry:\n    from tornado.log import app_log\nexcept ImportError:\n    app_log = logging.getLogger()\n\nfrom IPython.config import Application\nfrom IPython.utils.path import filefind\nfrom IPython.utils.py3compat import string_types\nfrom IPython.html.utils import is_hidden\n\n#-----------------------------------------------------------------------------\n# Top-level handlers\n#-----------------------------------------------------------------------------\nnon_alphanum = re.compile(r'[^A-Za-z0-9]')\n\nclass AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    def set_default_headers(self):\n        headers = self.settings.get('headers', {})\n\n        if \"X-Frame-Options\" not in headers:\n            headers[\"X-Frame-Options\"] = \"SAMEORIGIN\"\n\n        for header_name,value in headers.items() :\n            try:\n                self.set_header(header_name, value)\n            except Exception:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                pass\n    \n    def clear_login_cookie(self):\n        self.clear_cookie(self.cookie_name)\n    \n    def get_current_user(self):\n        user_id = self.get_secure_cookie(self.cookie_name)\n        # For now the user_id should not return empty, but it could eventually\n        if user_id == '':\n            user_id = 'anonymous'\n        if user_id is None:\n            # prevent extra Invalid cookie sig warnings:\n            self.clear_login_cookie()\n            if not self.login_available:\n                user_id = 'anonymous'\n        return user_id\n\n    @property\n    def cookie_name(self):\n        default_cookie_name = non_alphanum.sub('-', 'username-{}'.format(\n            self.request.host\n        ))\n        return self.settings.get('cookie_name', default_cookie_name)\n    \n    @property\n    def password(self):\n        \"\"\"our password\"\"\"\n        return self.settings.get('password', '')\n    \n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\n\n        \"\"\"\n        user = self.get_current_user()\n        return (user and not user == 'anonymous')\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return bool(self.settings.get('password', ''))\n\n\nclass IPythonHandler(AuthenticatedHandler):\n    \"\"\"IPython-specific extensions to authenticated handling\n    \n    Mostly property shortcuts to IPython-specific settings.\n    \"\"\"\n    \n    @property\n    def config(self):\n        return self.settings.get('config', None)\n    \n    @property\n    def log(self):\n        \"\"\"use the IPython log by default, falling back on tornado's logger\"\"\"\n        if Application.initialized():\n            return Application.instance().log\n        else:\n            return app_log\n    \n    #---------------------------------------------------------------\n    # URLs\n    #---------------------------------------------------------------\n    \n    @property\n    def mathjax_url(self):\n        return self.settings.get('mathjax_url', '')\n    \n    @property\n    def base_url(self):\n        return self.settings.get('base_url', '/')\n    \n    #---------------------------------------------------------------\n    # Manager objects\n    #---------------------------------------------------------------\n    \n    @property\n    def kernel_manager(self):\n        return self.settings['kernel_manager']\n\n    @property\n    def notebook_manager(self):\n        return self.settings['notebook_manager']\n    \n    @property\n    def cluster_manager(self):\n        return self.settings['cluster_manager']\n    \n    @property\n    def session_manager(self):\n        return self.settings['session_manager']\n    \n    @property\n    def project_dir(self):\n        return self.notebook_manager.notebook_dir\n    \n    #---------------------------------------------------------------\n    # CORS\n    #---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get('allow_origin', '')\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get('allow_origin_pat', None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get('allow_credentials', False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super(IPythonHandler, self).set_default_headers()\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and self.allow_origin_pat.match(origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", 'true')\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    #---------------------------------------------------------------\n    # template rendering\n    #---------------------------------------------------------------\n    \n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings['jinja2_env'].get_template(name)\n    \n    def render_template(self, name, **ns):\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n    \n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            logged_in=self.logged_in,\n            login_available=self.login_available,\n            static_url=self.static_url,\n        )\n    \n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(u'utf-8')\n        try:\n            model = json.loads(body)\n        except Exception:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, u'Invalid JSON in body of request')\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get('exc_info')\n        message = ''\n        status_message = responses.get(status_code, 'Unknown HTTP Error')\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:\n                pass\n            \n            # construct the custom reason, if defined\n            reason = getattr(exception, 'reason', '')\n            if reason:\n                status_message = reason\n        \n        # build template namespace\n        ns = dict(\n            status_code=status_code,\n            status_message=status_message,\n            message=message,\n            exception=exception,\n        )\n        \n        self.set_header('Content-Type', 'text/html')\n        # render the template\n        try:\n            html = self.render_template('%s.html' % status_code, **ns)\n        except TemplateNotFound:\n            self.log.debug(\"No template for %d\", status_code)\n            html = self.render_template('error.html', **ns)\n        \n        self.write(html)\n        \n\n\nclass Template404(IPythonHandler):\n    \"\"\"Render our 404 template\"\"\"\n    def prepare(self):\n        raise web.HTTPError(404)\n\n\nclass AuthenticatedFileHandler(IPythonHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    @web.authenticated\n    def get(self, path):\n        if os.path.splitext(path)[1] == '.ipynb':\n            name = os.path.basename(path)\n            self.set_header('Content-Type', 'application/json')\n            self.set_header('Content-Disposition','attachment; filename=\"%s\"' % name)\n        \n        return web.StaticFileHandler.get(self, path)\n    \n    def compute_etag(self):\n        return None\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n        \n        Requires tornado 3.1\n        \n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super(AuthenticatedFileHandler, self).validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        if is_hidden(abs_path, abs_root):\n            self.log.info(\"Refusing to serve hidden file, via 404 Error\")\n            raise web.HTTPError(404)\n        return abs_path\n\n\ndef json_errors(method):\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n    \n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n    \n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n    \n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        try:\n            result = method(self, *args, **kwargs)\n        except web.HTTPError as e:\n            status = e.status_code\n            message = e.log_message\n            self.log.warn(message)\n            self.set_status(e.status_code)\n            self.set_header('Content-Type', 'application/json')\n            self.finish(json.dumps(dict(message=message)))\n        except Exception:\n            self.log.error(\"Unhandled error in API request\", exc_info=True)\n            status = 500\n            message = \"Unknown server error\"\n            t, value, tb = sys.exc_info()\n            self.set_status(status)\n            tb_text = ''.join(traceback.format_exception(t, value, tb))\n            reply = dict(message=message, traceback=tb_text)\n            self.set_header('Content-Type', 'application/json')\n            self.finish(json.dumps(reply))\n        else:\n            return result\n    return wrapper\n\n\n\n#-----------------------------------------------------------------------------\n# File handler\n#-----------------------------------------------------------------------------\n\n# to minimize subclass changes:\nHTTPError = web.HTTPError\n\nclass FileFindHandler(web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\"\"\"\n    \n    # cache search results, don't search for files more than once\n    _static_paths = {}\n    \n    def initialize(self, path, default_filename=None):\n        if isinstance(path, string_types):\n            path = [path]\n        \n        self.root = tuple(\n            os.path.abspath(os.path.expanduser(p)) + os.sep for p in path\n        )\n        self.default_filename = default_filename\n    \n    def compute_etag(self):\n        return None\n    \n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except IOError:\n                # IOError means not found\n                return ''\n            \n            cls._static_paths[path] = abspath\n            return abspath\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if absolute_path == '':\n            raise web.HTTPError(404)\n        \n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n        \n        return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)\n\n\nclass TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n    \n    This should be the first, highest priority handler.\n    \"\"\"\n    \n    SUPPORTED_METHODS = ['GET']\n    \n    def get(self):\n        self.redirect(self.request.uri.rstrip('/'))\n\n#-----------------------------------------------------------------------------\n# URL pattern fragments for re-use\n#-----------------------------------------------------------------------------\n\npath_regex = r\"(?P<path>(?:/.*)*)\"\nnotebook_name_regex = r\"(?P<name>[^/]+\\.ipynb)\"\nnotebook_path_regex = \"%s/%s\" % (path_regex, notebook_name_regex)\n\n#-----------------------------------------------------------------------------\n# URL to handler mappings\n#-----------------------------------------------------------------------------\n\n\ndefault_handlers = [\n    (r\".*/\", TrailingSlashHandler)\n]\n", "code_before": "\"\"\"Base Tornado handlers for the notebook.\n\nAuthors:\n\n* Brian Granger\n\"\"\"\n\n#-----------------------------------------------------------------------------\n#  Copyright (C) 2011  The IPython Development Team\n#\n#  Distributed under the terms of the BSD License.  The full license is in\n#  the file COPYING, distributed as part of this software.\n#-----------------------------------------------------------------------------\n\n#-----------------------------------------------------------------------------\n# Imports\n#-----------------------------------------------------------------------------\n\n\nimport functools\nimport json\nimport logging\nimport os\nimport re\nimport sys\nimport traceback\ntry:\n    # py3\n    from http.client import responses\nexcept ImportError:\n    from httplib import responses\n\nfrom jinja2 import TemplateNotFound\nfrom tornado import web\n\ntry:\n    from tornado.log import app_log\nexcept ImportError:\n    app_log = logging.getLogger()\n\nfrom IPython.config import Application\nfrom IPython.utils.path import filefind\nfrom IPython.utils.py3compat import string_types\nfrom IPython.html.utils import is_hidden\n\n#-----------------------------------------------------------------------------\n# Top-level handlers\n#-----------------------------------------------------------------------------\nnon_alphanum = re.compile(r'[^A-Za-z0-9]')\n\nclass AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    def set_default_headers(self):\n        headers = self.settings.get('headers', {})\n\n        if \"X-Frame-Options\" not in headers:\n            headers[\"X-Frame-Options\"] = \"SAMEORIGIN\"\n\n        for header_name,value in headers.items() :\n            try:\n                self.set_header(header_name, value)\n            except Exception:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                pass\n    \n    def clear_login_cookie(self):\n        self.clear_cookie(self.cookie_name)\n    \n    def get_current_user(self):\n        user_id = self.get_secure_cookie(self.cookie_name)\n        # For now the user_id should not return empty, but it could eventually\n        if user_id == '':\n            user_id = 'anonymous'\n        if user_id is None:\n            # prevent extra Invalid cookie sig warnings:\n            self.clear_login_cookie()\n            if not self.login_available:\n                user_id = 'anonymous'\n        return user_id\n\n    @property\n    def cookie_name(self):\n        default_cookie_name = non_alphanum.sub('-', 'username-{}'.format(\n            self.request.host\n        ))\n        return self.settings.get('cookie_name', default_cookie_name)\n    \n    @property\n    def password(self):\n        \"\"\"our password\"\"\"\n        return self.settings.get('password', '')\n    \n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\n\n        \"\"\"\n        user = self.get_current_user()\n        return (user and not user == 'anonymous')\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return bool(self.settings.get('password', ''))\n\n\nclass IPythonHandler(AuthenticatedHandler):\n    \"\"\"IPython-specific extensions to authenticated handling\n    \n    Mostly property shortcuts to IPython-specific settings.\n    \"\"\"\n    \n    @property\n    def config(self):\n        return self.settings.get('config', None)\n    \n    @property\n    def log(self):\n        \"\"\"use the IPython log by default, falling back on tornado's logger\"\"\"\n        if Application.initialized():\n            return Application.instance().log\n        else:\n            return app_log\n    \n    #---------------------------------------------------------------\n    # URLs\n    #---------------------------------------------------------------\n    \n    @property\n    def mathjax_url(self):\n        return self.settings.get('mathjax_url', '')\n    \n    @property\n    def base_url(self):\n        return self.settings.get('base_url', '/')\n    \n    #---------------------------------------------------------------\n    # Manager objects\n    #---------------------------------------------------------------\n    \n    @property\n    def kernel_manager(self):\n        return self.settings['kernel_manager']\n\n    @property\n    def notebook_manager(self):\n        return self.settings['notebook_manager']\n    \n    @property\n    def cluster_manager(self):\n        return self.settings['cluster_manager']\n    \n    @property\n    def session_manager(self):\n        return self.settings['session_manager']\n    \n    @property\n    def project_dir(self):\n        return self.notebook_manager.notebook_dir\n    \n    #---------------------------------------------------------------\n    # CORS\n    #---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get('allow_origin', '')\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get('allow_origin_pat', None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get('allow_credentials', False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super(IPythonHandler, self).set_default_headers()\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and self.allow_origin_pat.match(origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", 'true')\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    #---------------------------------------------------------------\n    # template rendering\n    #---------------------------------------------------------------\n    \n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings['jinja2_env'].get_template(name)\n    \n    def render_template(self, name, **ns):\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n    \n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            logged_in=self.logged_in,\n            login_available=self.login_available,\n            static_url=self.static_url,\n        )\n    \n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(u'utf-8')\n        try:\n            model = json.loads(body)\n        except Exception:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, u'Invalid JSON in body of request')\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get('exc_info')\n        message = ''\n        status_message = responses.get(status_code, 'Unknown HTTP Error')\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:\n                pass\n            \n            # construct the custom reason, if defined\n            reason = getattr(exception, 'reason', '')\n            if reason:\n                status_message = reason\n        \n        # build template namespace\n        ns = dict(\n            status_code=status_code,\n            status_message=status_message,\n            message=message,\n            exception=exception,\n        )\n        \n        self.set_header('Content-Type', 'text/html')\n        # render the template\n        try:\n            html = self.render_template('%s.html' % status_code, **ns)\n        except TemplateNotFound:\n            self.log.debug(\"No template for %d\", status_code)\n            html = self.render_template('error.html', **ns)\n        \n        self.write(html)\n        \n\n\nclass Template404(IPythonHandler):\n    \"\"\"Render our 404 template\"\"\"\n    def prepare(self):\n        raise web.HTTPError(404)\n\n\nclass AuthenticatedFileHandler(IPythonHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    @web.authenticated\n    def get(self, path):\n        if os.path.splitext(path)[1] == '.ipynb':\n            name = os.path.basename(path)\n            self.set_header('Content-Type', 'application/json')\n            self.set_header('Content-Disposition','attachment; filename=\"%s\"' % name)\n        \n        return web.StaticFileHandler.get(self, path)\n    \n    def compute_etag(self):\n        return None\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n        \n        Requires tornado 3.1\n        \n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super(AuthenticatedFileHandler, self).validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        if is_hidden(abs_path, abs_root):\n            self.log.info(\"Refusing to serve hidden file, via 404 Error\")\n            raise web.HTTPError(404)\n        return abs_path\n\n\ndef json_errors(method):\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n    \n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n    \n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n    \n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        try:\n            result = method(self, *args, **kwargs)\n        except web.HTTPError as e:\n            status = e.status_code\n            message = e.log_message\n            self.log.warn(message)\n            self.set_status(e.status_code)\n            self.finish(json.dumps(dict(message=message)))\n        except Exception:\n            self.log.error(\"Unhandled error in API request\", exc_info=True)\n            status = 500\n            message = \"Unknown server error\"\n            t, value, tb = sys.exc_info()\n            self.set_status(status)\n            tb_text = ''.join(traceback.format_exception(t, value, tb))\n            reply = dict(message=message, traceback=tb_text)\n            self.finish(json.dumps(reply))\n        else:\n            return result\n    return wrapper\n\n\n\n#-----------------------------------------------------------------------------\n# File handler\n#-----------------------------------------------------------------------------\n\n# to minimize subclass changes:\nHTTPError = web.HTTPError\n\nclass FileFindHandler(web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\"\"\"\n    \n    # cache search results, don't search for files more than once\n    _static_paths = {}\n    \n    def initialize(self, path, default_filename=None):\n        if isinstance(path, string_types):\n            path = [path]\n        \n        self.root = tuple(\n            os.path.abspath(os.path.expanduser(p)) + os.sep for p in path\n        )\n        self.default_filename = default_filename\n    \n    def compute_etag(self):\n        return None\n    \n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except IOError:\n                # IOError means not found\n                return ''\n            \n            cls._static_paths[path] = abspath\n            return abspath\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if absolute_path == '':\n            raise web.HTTPError(404)\n        \n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n        \n        return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)\n\n\nclass TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n    \n    This should be the first, highest priority handler.\n    \"\"\"\n    \n    SUPPORTED_METHODS = ['GET']\n    \n    def get(self):\n        self.redirect(self.request.uri.rstrip('/'))\n\n#-----------------------------------------------------------------------------\n# URL pattern fragments for re-use\n#-----------------------------------------------------------------------------\n\npath_regex = r\"(?P<path>(?:/.*)*)\"\nnotebook_name_regex = r\"(?P<name>[^/]+\\.ipynb)\"\nnotebook_path_regex = \"%s/%s\" % (path_regex, notebook_name_regex)\n\n#-----------------------------------------------------------------------------\n# URL to handler mappings\n#-----------------------------------------------------------------------------\n\n\ndefault_handlers = [\n    (r\".*/\", TrailingSlashHandler)\n]\n", "patch": "@@ -339,6 +339,7 @@ def wrapper(self, *args, **kwargs):\n             message = e.log_message\n             self.log.warn(message)\n             self.set_status(e.status_code)\n+            self.set_header('Content-Type', 'application/json')\n             self.finish(json.dumps(dict(message=message)))\n         except Exception:\n             self.log.error(\"Unhandled error in API request\", exc_info=True)\n@@ -348,6 +349,7 @@ def wrapper(self, *args, **kwargs):\n             self.set_status(status)\n             tb_text = ''.join(traceback.format_exception(t, value, tb))\n             reply = dict(message=message, traceback=tb_text)\n+            self.set_header('Content-Type', 'application/json')\n             self.finish(json.dumps(reply))\n         else:\n             return result", "file_path": "files/2017_9/81", "file_language": "py", "file_name": "IPython/html/base/handlers.py", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    def set_default_headers(self):\n        headers = self.settings.get('headers', {})\n\n        if \"X-Frame-Options\" not in headers:\n            headers[\"X-Frame-Options\"] = \"SAMEORIGIN\"\n\n        for header_name,value in headers.items() :\n            try:\n                self.set_header(header_name, value)\n            except Exception:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                pass\n    \n    def clear_login_cookie(self):\n        self.clear_cookie(self.cookie_name)\n    \n    def get_current_user(self):\n        user_id = self.get_secure_cookie(self.cookie_name)\n        # For now the user_id should not return empty, but it could eventually\n        if user_id == '':\n            user_id = 'anonymous'\n        if user_id is None:\n            # prevent extra Invalid cookie sig warnings:\n            self.clear_login_cookie()\n            if not self.login_available:\n                user_id = 'anonymous'\n        return user_id\n\n    @property\n    def cookie_name(self):\n        default_cookie_name = non_alphanum.sub('-', 'username-{}'.format(\n            self.request.host\n        ))\n        return self.settings.get('cookie_name', default_cookie_name)\n    \n    @property\n    def password(self):\n        \"\"\"our password\"\"\"\n        return self.settings.get('password', '')\n    \n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\n\n        \"\"\"\n        user = self.get_current_user()\n        return (user and not user == 'anonymous')\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return bool(self.settings.get('password', ''))", "target": 0}, {"function": "class IPythonHandler(AuthenticatedHandler):\n    \"\"\"IPython-specific extensions to authenticated handling\n    \n    Mostly property shortcuts to IPython-specific settings.\n    \"\"\"\n    \n    @property\n    def config(self):\n        return self.settings.get('config', None)\n    \n    @property\n    def log(self):\n        \"\"\"use the IPython log by default, falling back on tornado's logger\"\"\"\n        if Application.initialized():\n            return Application.instance().log\n        else:\n            return app_log\n    \n    #---------------------------------------------------------------\n    # URLs\n    #---------------------------------------------------------------\n    \n    @property\n    def mathjax_url(self):\n        return self.settings.get('mathjax_url', '')\n    \n    @property\n    def base_url(self):\n        return self.settings.get('base_url', '/')\n    \n    #---------------------------------------------------------------\n    # Manager objects\n    #---------------------------------------------------------------\n    \n    @property\n    def kernel_manager(self):\n        return self.settings['kernel_manager']\n\n    @property\n    def notebook_manager(self):\n        return self.settings['notebook_manager']\n    \n    @property\n    def cluster_manager(self):\n        return self.settings['cluster_manager']\n    \n    @property\n    def session_manager(self):\n        return self.settings['session_manager']\n    \n    @property\n    def project_dir(self):\n        return self.notebook_manager.notebook_dir\n    \n    #---------------------------------------------------------------\n    # CORS\n    #---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get('allow_origin', '')\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get('allow_origin_pat', None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get('allow_credentials', False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super(IPythonHandler, self).set_default_headers()\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and self.allow_origin_pat.match(origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", 'true')\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    #---------------------------------------------------------------\n    # template rendering\n    #---------------------------------------------------------------\n    \n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings['jinja2_env'].get_template(name)\n    \n    def render_template(self, name, **ns):\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n    \n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            logged_in=self.logged_in,\n            login_available=self.login_available,\n            static_url=self.static_url,\n        )\n    \n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(u'utf-8')\n        try:\n            model = json.loads(body)\n        except Exception:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, u'Invalid JSON in body of request')\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get('exc_info')\n        message = ''\n        status_message = responses.get(status_code, 'Unknown HTTP Error')\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:\n                pass\n            \n            # construct the custom reason, if defined\n            reason = getattr(exception, 'reason', '')\n            if reason:\n                status_message = reason\n        \n        # build template namespace\n        ns = dict(\n            status_code=status_code,\n            status_message=status_message,\n            message=message,\n            exception=exception,\n        )\n        \n        self.set_header('Content-Type', 'text/html')\n        # render the template\n        try:\n            html = self.render_template('%s.html' % status_code, **ns)\n        except TemplateNotFound:\n            self.log.debug(\"No template for %d\", status_code)\n            html = self.render_template('error.html', **ns)\n        \n        self.write(html)", "target": 0}, {"function": "class Template404(IPythonHandler):\n    \"\"\"Render our 404 template\"\"\"\n    def prepare(self):\n        raise web.HTTPError(404)", "target": 0}, {"function": "class AuthenticatedFileHandler(IPythonHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    @web.authenticated\n    def get(self, path):\n        if os.path.splitext(path)[1] == '.ipynb':\n            name = os.path.basename(path)\n            self.set_header('Content-Type', 'application/json')\n            self.set_header('Content-Disposition','attachment; filename=\"%s\"' % name)\n        \n        return web.StaticFileHandler.get(self, path)\n    \n    def compute_etag(self):\n        return None\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n        \n        Requires tornado 3.1\n        \n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super(AuthenticatedFileHandler, self).validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        if is_hidden(abs_path, abs_root):\n            self.log.info(\"Refusing to serve hidden file, via 404 Error\")\n            raise web.HTTPError(404)\n        return abs_path", "target": 0}, {"function": "def json_errors(method):\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n    \n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n    \n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n    \n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        try:\n            result = method(self, *args, **kwargs)\n        except web.HTTPError as e:\n            status = e.status_code\n            message = e.log_message\n            self.log.warn(message)\n            self.set_status(e.status_code)\n            self.finish(json.dumps(dict(message=message)))\n        except Exception:\n            self.log.error(\"Unhandled error in API request\", exc_info=True)\n            status = 500\n            message = \"Unknown server error\"\n            t, value, tb = sys.exc_info()\n            self.set_status(status)\n            tb_text = ''.join(traceback.format_exception(t, value, tb))\n            reply = dict(message=message, traceback=tb_text)\n            self.finish(json.dumps(reply))\n        else:\n            return result\n    return wrapper", "target": 0}, {"function": "class FileFindHandler(web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\"\"\"\n    \n    # cache search results, don't search for files more than once\n    _static_paths = {}\n    \n    def initialize(self, path, default_filename=None):\n        if isinstance(path, string_types):\n            path = [path]\n        \n        self.root = tuple(\n            os.path.abspath(os.path.expanduser(p)) + os.sep for p in path\n        )\n        self.default_filename = default_filename\n    \n    def compute_etag(self):\n        return None\n    \n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except IOError:\n                # IOError means not found\n                return ''\n            \n            cls._static_paths[path] = abspath\n            return abspath\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if absolute_path == '':\n            raise web.HTTPError(404)\n        \n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n        \n        return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)", "target": 0}, {"function": "class TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n    \n    This should be the first, highest priority handler.\n    \"\"\"\n    \n    SUPPORTED_METHODS = ['GET']\n    \n    def get(self):\n        self.redirect(self.request.uri.rstrip('/'))", "target": 0}], "function_after": [{"function": "class AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    def set_default_headers(self):\n        headers = self.settings.get('headers', {})\n\n        if \"X-Frame-Options\" not in headers:\n            headers[\"X-Frame-Options\"] = \"SAMEORIGIN\"\n\n        for header_name,value in headers.items() :\n            try:\n                self.set_header(header_name, value)\n            except Exception:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                pass\n    \n    def clear_login_cookie(self):\n        self.clear_cookie(self.cookie_name)\n    \n    def get_current_user(self):\n        user_id = self.get_secure_cookie(self.cookie_name)\n        # For now the user_id should not return empty, but it could eventually\n        if user_id == '':\n            user_id = 'anonymous'\n        if user_id is None:\n            # prevent extra Invalid cookie sig warnings:\n            self.clear_login_cookie()\n            if not self.login_available:\n                user_id = 'anonymous'\n        return user_id\n\n    @property\n    def cookie_name(self):\n        default_cookie_name = non_alphanum.sub('-', 'username-{}'.format(\n            self.request.host\n        ))\n        return self.settings.get('cookie_name', default_cookie_name)\n    \n    @property\n    def password(self):\n        \"\"\"our password\"\"\"\n        return self.settings.get('password', '')\n    \n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\n\n        \"\"\"\n        user = self.get_current_user()\n        return (user and not user == 'anonymous')\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        return bool(self.settings.get('password', ''))", "target": 0}, {"function": "class IPythonHandler(AuthenticatedHandler):\n    \"\"\"IPython-specific extensions to authenticated handling\n    \n    Mostly property shortcuts to IPython-specific settings.\n    \"\"\"\n    \n    @property\n    def config(self):\n        return self.settings.get('config', None)\n    \n    @property\n    def log(self):\n        \"\"\"use the IPython log by default, falling back on tornado's logger\"\"\"\n        if Application.initialized():\n            return Application.instance().log\n        else:\n            return app_log\n    \n    #---------------------------------------------------------------\n    # URLs\n    #---------------------------------------------------------------\n    \n    @property\n    def mathjax_url(self):\n        return self.settings.get('mathjax_url', '')\n    \n    @property\n    def base_url(self):\n        return self.settings.get('base_url', '/')\n    \n    #---------------------------------------------------------------\n    # Manager objects\n    #---------------------------------------------------------------\n    \n    @property\n    def kernel_manager(self):\n        return self.settings['kernel_manager']\n\n    @property\n    def notebook_manager(self):\n        return self.settings['notebook_manager']\n    \n    @property\n    def cluster_manager(self):\n        return self.settings['cluster_manager']\n    \n    @property\n    def session_manager(self):\n        return self.settings['session_manager']\n    \n    @property\n    def project_dir(self):\n        return self.notebook_manager.notebook_dir\n    \n    #---------------------------------------------------------------\n    # CORS\n    #---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get('allow_origin', '')\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get('allow_origin_pat', None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get('allow_credentials', False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super(IPythonHandler, self).set_default_headers()\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and self.allow_origin_pat.match(origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", 'true')\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    #---------------------------------------------------------------\n    # template rendering\n    #---------------------------------------------------------------\n    \n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings['jinja2_env'].get_template(name)\n    \n    def render_template(self, name, **ns):\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n    \n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            logged_in=self.logged_in,\n            login_available=self.login_available,\n            static_url=self.static_url,\n        )\n    \n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(u'utf-8')\n        try:\n            model = json.loads(body)\n        except Exception:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, u'Invalid JSON in body of request')\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get('exc_info')\n        message = ''\n        status_message = responses.get(status_code, 'Unknown HTTP Error')\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:\n                pass\n            \n            # construct the custom reason, if defined\n            reason = getattr(exception, 'reason', '')\n            if reason:\n                status_message = reason\n        \n        # build template namespace\n        ns = dict(\n            status_code=status_code,\n            status_message=status_message,\n            message=message,\n            exception=exception,\n        )\n        \n        self.set_header('Content-Type', 'text/html')\n        # render the template\n        try:\n            html = self.render_template('%s.html' % status_code, **ns)\n        except TemplateNotFound:\n            self.log.debug(\"No template for %d\", status_code)\n            html = self.render_template('error.html', **ns)\n        \n        self.write(html)", "target": 0}, {"function": "class Template404(IPythonHandler):\n    \"\"\"Render our 404 template\"\"\"\n    def prepare(self):\n        raise web.HTTPError(404)", "target": 0}, {"function": "class AuthenticatedFileHandler(IPythonHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    @web.authenticated\n    def get(self, path):\n        if os.path.splitext(path)[1] == '.ipynb':\n            name = os.path.basename(path)\n            self.set_header('Content-Type', 'application/json')\n            self.set_header('Content-Disposition','attachment; filename=\"%s\"' % name)\n        \n        return web.StaticFileHandler.get(self, path)\n    \n    def compute_etag(self):\n        return None\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n        \n        Requires tornado 3.1\n        \n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super(AuthenticatedFileHandler, self).validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        if is_hidden(abs_path, abs_root):\n            self.log.info(\"Refusing to serve hidden file, via 404 Error\")\n            raise web.HTTPError(404)\n        return abs_path", "target": 0}, {"function": "def json_errors(method):\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n    \n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n    \n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n    \n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        try:\n            result = method(self, *args, **kwargs)\n        except web.HTTPError as e:\n            status = e.status_code\n            message = e.log_message\n            self.log.warn(message)\n            self.set_status(e.status_code)\n            self.set_header('Content-Type', 'application/json')\n            self.finish(json.dumps(dict(message=message)))\n        except Exception:\n            self.log.error(\"Unhandled error in API request\", exc_info=True)\n            status = 500\n            message = \"Unknown server error\"\n            t, value, tb = sys.exc_info()\n            self.set_status(status)\n            tb_text = ''.join(traceback.format_exception(t, value, tb))\n            reply = dict(message=message, traceback=tb_text)\n            self.set_header('Content-Type', 'application/json')\n            self.finish(json.dumps(reply))\n        else:\n            return result\n    return wrapper", "target": 0}, {"function": "class FileFindHandler(web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\"\"\"\n    \n    # cache search results, don't search for files more than once\n    _static_paths = {}\n    \n    def initialize(self, path, default_filename=None):\n        if isinstance(path, string_types):\n            path = [path]\n        \n        self.root = tuple(\n            os.path.abspath(os.path.expanduser(p)) + os.sep for p in path\n        )\n        self.default_filename = default_filename\n    \n    def compute_etag(self):\n        return None\n    \n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except IOError:\n                # IOError means not found\n                return ''\n            \n            cls._static_paths[path] = abspath\n            return abspath\n    \n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if absolute_path == '':\n            raise web.HTTPError(404)\n        \n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n        \n        return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)", "target": 0}, {"function": "class TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n    \n    This should be the first, highest priority handler.\n    \"\"\"\n    \n    SUPPORTED_METHODS = ['GET']\n    \n    def get(self):\n        self.redirect(self.request.uri.rstrip('/'))", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
