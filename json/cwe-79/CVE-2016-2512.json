{"index": 1105, "cve_id": "CVE-2016-2512", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\\@attacker.com.", "cvss": "7.4", "publish_date": "April 8, 2016", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "NONE", "I": "HIGH", "A": "NONE", "commit_id": "c5544d289233f501917e25970c03ed444abbd4f0", "commit_message": "Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.\n\nThis is a security fix.", "commit_date": "2016-03-01T16:25:28Z", "project": "django/django", "url": "https://api.github.com/repos/django/django/commits/c5544d289233f501917e25970c03ed444abbd4f0", "html_url": "https://github.com/django/django/commit/c5544d289233f501917e25970c03ed444abbd4f0", "windows_before": [{"commit_id": "67b46ba7016da2d259c1ecc7d666d11f5e1cfaab", "commit_date": "Sat Feb 13 21:09:46 2016 +0100", "commit_message": "Fixed CVE-2016-2513 -- Fixed user enumeration timing attack during login.", "files_name": ["django/contrib/auth/hashers.py", "docs/releases/1.8.10.txt", "docs/releases/1.9.3.txt", "docs/topics/auth/passwords.txt", "tests/auth_tests/test_hashers.py"]}, {"commit_id": "f43291639bb968001df4719c4e69269bd8a3162b", "commit_date": "Fri Feb 19 11:33:17 2016 -0500", "commit_message": "Added stub release notes for security issues.", "files_name": ["docs/releases/1.8.10.txt", "docs/releases/1.9.3.txt"]}, {"commit_id": "fe8ea3ba3ba709b3d6c39da046f0883a296e6441", "commit_date": "Sat Feb 20 18:04:50 2016 +0100", "commit_message": "Fixed #26217 -- Added a warning about format strings to WeekArchiveView docs.", "files_name": ["docs/ref/class-based-views/generic-date-based.txt"]}, {"commit_id": "a1b1688c7d6c1a6d307bd22669bd20f08e948f8d", "commit_date": "Wed Feb 3 23:59:45 2016 +0530", "commit_message": "Fixed #26165 -- Added some FAQs about CSRF protection.", "files_name": ["docs/ref/csrf.txt"]}, {"commit_id": "11a8207d4294b46561ce34b37803f191014509af", "commit_date": "Tue Mar 1 15:07:22 2016 +0530", "commit_message": "Fixed typos in docs/ref/models/meta.txt.", "files_name": ["docs/ref/models/meta.txt"]}, {"commit_id": "65bd053f11d22bca529f1da895599796fa0f3ee1", "commit_date": "Mon Feb 29 11:12:25 2016 +0000", "commit_message": "Fixed #26229 -- Improved check for model admin check admin.E124", "files_name": ["django/contrib/admin/checks.py", "tests/modeladmin/tests.py"]}, {"commit_id": "0223e213dd690b6b6e0669f836a20efb10998c83", "commit_date": "Mon Feb 22 16:05:47 2016 -0500", "commit_message": "Fixed #26186 -- Documented how app relative relationships of abstract models behave.", "files_name": ["django/db/models/fields/related.py", "docs/ref/models/fields.txt", "docs/releases/1.9.3.txt", "tests/model_fields/tests.py"]}, {"commit_id": "eac1423f9ebcf432dc5be95d605d124a05ab2686", "commit_date": "Sun Feb 28 09:41:30 2016 -0800", "commit_message": "Removed obsolete test CreatesuperuserManagementCommandTestCase.test_nolocale.", "files_name": ["tests/auth_tests/test_management.py"]}, {"commit_id": "6a383f773a178a61bcbce5464c7e49fdaecd8ed0", "commit_date": "Sun Feb 28 10:32:33 2016 +0000", "commit_message": "Removed unused 'Between' lookup.", "files_name": ["django/db/models/lookups.py"]}, {"commit_id": "72e5778b23be7afec60658ebc48bb487e154fd37", "commit_date": "Sun Feb 28 19:30:18 2016 +0200", "commit_message": "Minor fixes for release-process doc fix", "files_name": ["docs/internals/release-process.txt"]}, {"commit_id": "3dd4e9203a64f99fdbe52f522619b98ec4a10a9f", "commit_date": "Sat Feb 27 17:55:10 2016 +0200", "commit_message": "Fixed docs: release-process, Supported Versions section, concrete example", "files_name": ["docs/internals/release-process.txt"]}, {"commit_id": "b84f5ab4ec2d1edbe9a7effa9f75a3caa189bace", "commit_date": "Wed Feb 24 15:10:09 2016 +0800", "commit_message": "Fixed #26230 -- Made default_related_name affect related_query_name.", "files_name": ["django/db/models/fields/related.py", "django/db/models/fields/reverse_related.py", "django/db/models/sql/query.py", "docs/internals/deprecation.txt", "docs/ref/models/fields.txt", "docs/ref/models/options.txt", "docs/releases/1.10.txt", "tests/model_options/test_default_related_name.py"]}, {"commit_id": "5fb9756eba01237cc0e550da689b9b79c51c96ed", "commit_date": "Fri Feb 26 13:44:22 2016 -0800", "commit_message": "Fixed #26275 -- Noted difference between o and Y date format chars.", "files_name": ["docs/ref/templates/builtins.txt"]}, {"commit_id": "5e2c4d7afbaeec196aedb9888a47e0b635ff55d4", "commit_date": "Fri Feb 26 07:28:48 2016 +0200", "commit_message": "Fixed #26264 -- Fixed prefetch_related() crashes with values_list(flat=True)", "files_name": ["django/db/models/query.py", "tests/prefetch_related/test_uuid.py"]}, {"commit_id": "3389c5ea229884a1943873fe7e7ffc2800cefc22", "commit_date": "Fri Jan 8 17:08:08 2016 +0100", "commit_message": "Fixed #21608 -- Prevented logged out sessions being resurrected by concurrent requests.", "files_name": ["AUTHORS", "django/contrib/sessions/backends/base.py", "django/contrib/sessions/backends/cache.py", "django/contrib/sessions/backends/db.py", "django/contrib/sessions/backends/file.py", "django/contrib/sessions/middleware.py", "tests/defer_regress/tests.py", "tests/sessions_tests/tests.py"]}, {"commit_id": "3938b3ccaa85f1c366909a4839696007726a09da", "commit_date": "Fri Dec 18 14:49:23 2015 -0500", "commit_message": "Fixed #26286 -- Prevented content type managers from sharing their cache.", "files_name": ["django/contrib/contenttypes/models.py", "docs/releases/1.8.10.txt", "docs/releases/1.9.3.txt", "tests/contenttypes_tests/test_models.py"]}, {"commit_id": "b9519b273030a12f382ea0c1b72729fc0c3248da", "commit_date": "Fri Feb 26 16:06:34 2016 -0500", "commit_message": "Added 'prefetches to docs/spelling_wordlist.", "files_name": ["docs/spelling_wordlist"]}, {"commit_id": "ef33bc2d4d5e66b08cba2a318aa700ba1e28ba81", "commit_date": "Sat Aug 15 13:41:57 2015 +0100", "commit_message": "Fixed #25279 -- Made prefetch_related_objects() public.", "files_name": ["django/db/models/__init__.py", "django/db/models/query.py", "docs/ref/models/querysets.txt", "docs/releases/1.10.txt", "tests/prefetch_related/test_prefetch_related_objects.py"]}, {"commit_id": "d5f89ff6e873dbb2890ed05ce2aeae628792c8f7", "commit_date": "Wed Jan 27 15:34:00 2016 +1100", "commit_message": "Fixed #24974 -- Fixed inheritance of formfield_callback for modelform_factory forms.", "files_name": ["django/forms/models.py", "tests/model_forms/tests.py"]}, {"commit_id": "766afc22a1dfa7d34a08de85356b7bc9dba025e7", "commit_date": "Tue Jan 19 20:43:41 2016 -0500", "commit_message": "Fixed #24793 -- Unified temporal difference support.", "files_name": ["django/db/backends/base/features.py", "django/db/backends/base/operations.py", "django/db/backends/mysql/features.py", "django/db/backends/mysql/operations.py", "django/db/backends/oracle/features.py", "django/db/backends/oracle/operations.py", "django/db/backends/postgresql/features.py", "django/db/backends/postgresql/operations.py", "django/db/backends/sqlite3/base.py", "django/db/backends/sqlite3/features.py", "django/db/backends/sqlite3/operations.py", "django/db/models/expressions.py", "docs/releases/1.10.txt", "tests/expressions/tests.py"]}, {"commit_id": "31098e3288595c13f165935f2579f1af744e5240", "commit_date": "Tue Jan 19 20:41:15 2016 -0500", "commit_message": "Used setUpTestData for the timedelta expression tests.", "files_name": ["tests/expressions/tests.py"]}, {"commit_id": "65aa94200b3d10d515b15a78898c3692cd57e6c7", "commit_date": "Thu Feb 25 23:10:03 2016 +0300", "commit_message": "Fixed #24653 -- Fixed MySQL database introspection when using read_default_file.", "files_name": ["django/db/backends/mysql/introspection.py"]}, {"commit_id": "62ea86448ee1e56c96a4275da5d42f39680a611c", "commit_date": "Thu Feb 25 20:04:03 2016 -0500", "commit_message": "Cleaned up session backends tests.", "files_name": ["tests/sessions_tests/tests.py"]}, {"commit_id": "8890c533e0b53cb0021bd5faf15668430cd3075a", "commit_date": "Fri Feb 26 09:49:02 2016 +0300", "commit_message": "Fixed #26280 -- Fixed cached template loader crash when loading nonexistent template.", "files_name": ["django/template/loaders/cached.py", "docs/releases/1.9.3.txt", "tests/template_tests/test_loaders.py"]}, {"commit_id": "eb44172760e9439c8025d6812885b99a94892af3", "commit_date": "Thu Feb 25 23:32:43 2016 -0430", "commit_message": "Fixed #25811 -- Added a helpful error when making _in queries across different databases.", "files_name": ["django/db/models/lookups.py", "tests/lookup/tests.py"]}, {"commit_id": "7fec264e46d2a757f06f857e513072d72686cf9d", "commit_date": "Thu Feb 25 19:08:16 2016 -0500", "commit_message": "Removed try/fail antipattern from model_options tests.", "files_name": ["tests/model_options/test_default_related_name.py"]}, {"commit_id": "bbe136e1a2f9cbf3fd10d49fbe8558a5b394752c", "commit_date": "Wed Feb 17 15:18:24 2016 +0100", "commit_message": "Fixed #26231 -- Used .get_username in admin login template.", "files_name": ["django/contrib/admin/templates/admin/login.html", "docs/releases/1.9.3.txt"]}, {"commit_id": "ee69789f4546cc07b4ea85d03eb5bb6261673198", "commit_date": "Fri Feb 12 15:26:45 2016 +0300", "commit_message": "Fixed #26269 -- Prohibited spaces in is_valid_ipv6_address().", "files_name": ["django/utils/ipv6.py", "tests/utils_tests/test_ipv6.py"]}, {"commit_id": "22d2a5b00ac99e638d95cbfe1cc41ef217fa50d4", "commit_date": "Thu Feb 25 14:22:41 2016 -0500", "commit_message": "Corrected a run on sentence in doc/topics/db/models.txt.", "files_name": ["docs/topics/db/models.txt"]}, {"commit_id": "4b1529e2cbee697e7e772b05ad5038edef22f38d", "commit_date": "Thu Jan 28 01:22:39 2016 +1100", "commit_message": "Fixed #26151 -- Refactored MigrationWriter.serialize()", "files_name": ["django/db/migrations/serializer.py", "django/db/migrations/writer.py"]}, {"commit_id": "fc584f06859b88474ea0db49bfe142e87428865d", "commit_date": "Sun Jan 24 18:23:38 2016 -0600", "commit_message": "Fixed #26117 -- Consulted database routers in initial migration detection.", "files_name": ["django/db/migrations/executor.py", "tests/migrations/routers.py", "tests/migrations/test_base.py", "tests/migrations/test_commands.py", "tests/migrations/test_migrations/0001_initial.py"]}, {"commit_id": "1f8cfcf3b41bac0ec862f171e2efb51b35324045", "commit_date": "Thu Feb 25 08:55:10 2016 -0500", "commit_message": "Fixed #26278 -- Clarified apps.ready docs.", "files_name": ["docs/ref/applications.txt"]}, {"commit_id": "7a7e403325427642905a5b3e26931c2b8e92d4b1", "commit_date": "Wed Feb 24 10:18:18 2016 -0500", "commit_message": "Refs #26270 -- Reorganized TestCase docs.", "files_name": ["docs/topics/testing/tools.txt"]}, {"commit_id": "10781b4c6ff981f581157957d221e7621e0bf4ed", "commit_date": "Thu Nov 12 00:48:16 2015 +0100", "commit_message": "Fixed #12233 -- Allowed redirecting authenticated users away from the login view.", "files_name": ["django/contrib/auth/views.py", "docs/releases/1.10.txt", "docs/topics/auth/default.txt", "tests/auth_tests/test_views.py", "tests/auth_tests/urls.py"]}, {"commit_id": "4c18a8a3788a4cd25b75ae342a7244c5f775b213", "commit_date": "Wed Feb 24 20:16:49 2016 +0100", "commit_message": "Fixed #14098 -- Prevented crash for introspection errors in inspectdb", "files_name": ["django/core/management/commands/inspectdb.py", "tests/inspectdb/tests.py"]}, {"commit_id": "441c537b66233ae57bf0023f02d8262474229e1a", "commit_date": "Wed Feb 24 16:24:33 2016 -0500", "commit_message": "Fixed a function signature in docs/topics/auth/default.txt.", "files_name": ["docs/topics/auth/default.txt"]}, {"commit_id": "8ad7b8118c99ef53fb055596b59388f9b8c3bc0b", "commit_date": "Wed Feb 24 11:22:09 2016 -0500", "commit_message": "Used addCleanup() to call recorder.flush() in migration loader tests.", "files_name": ["tests/migrations/test_loader.py"]}, {"commit_id": "c5517b9e7439e542b381a0054bbdab9b5d2bc34b", "commit_date": "Tue Feb 23 19:57:53 2016 +0100", "commit_message": "Fixed #26266 -- Output the primary key in the GeoJSON serializer properties", "files_name": ["django/contrib/gis/serializers/geojson.py", "docs/ref/contrib/gis/serializers.txt", "docs/releases/1.10.txt", "tests/gis_tests/geoapp/test_serializers.py"]}, {"commit_id": "6637cd0ef2fd5f063df82000c18c64c246bb6e1b", "commit_date": "Wed Feb 24 09:57:39 2016 -0500", "commit_message": "Removed docs of deprecated SimpleTestCase warnings behavior.", "files_name": ["docs/topics/testing/tools.txt"]}, {"commit_id": "b41268135995cef46d40e550f9301fab20cf330d", "commit_date": "Tue Feb 23 15:39:20 2016 -0800", "commit_message": "Fixed #26267 -- Fixed BoundField to reallow slices of subwidgets.", "files_name": ["django/forms/boundfield.py", "docs/releases/1.8.10.txt", "docs/releases/1.9.3.txt", "docs/spelling_wordlist", "tests/forms_tests/tests/test_forms.py"]}, {"commit_id": "1ff6e37de46f0cbf271a287a0ca67678e741a90a", "commit_date": "Tue Feb 9 15:00:14 2016 +0000", "commit_message": "Fixed #23832 -- Added timezone aware Storage API.", "files_name": ["django/contrib/staticfiles/management/commands/collectstatic.py", "django/core/files/storage.py", "docs/internals/deprecation.txt", "docs/ref/files/storage.txt", "docs/releases/1.10.txt", "tests/file_storage/tests.py"]}], "windows_after": [{"commit_id": "f43291639bb968001df4719c4e69269bd8a3162b", "commit_date": "Fri Feb 19 11:33:17 2016 -0500", "commit_message": "Added stub release notes for security issues.", "files_name": ["docs/releases/1.8.10.txt", "docs/releases/1.9.3.txt"]}, {"commit_id": "67b46ba7016da2d259c1ecc7d666d11f5e1cfaab", "commit_date": "Sat Feb 13 21:09:46 2016 +0100", "commit_message": "Fixed CVE-2016-2513 -- Fixed user enumeration timing attack during login.", "files_name": ["django/contrib/auth/hashers.py", "docs/releases/1.8.10.txt", "docs/releases/1.9.3.txt", "docs/topics/auth/passwords.txt", "tests/auth_tests/test_hashers.py"]}, {"commit_id": "24fc9352183c449a8b11d1c7b442e70aa61a8800", "commit_date": "Tue Mar 1 12:32:42 2016 -0500", "commit_message": "Added CVE-2016-2512/2513 to security release archive.", "files_name": ["docs/releases/security.txt"]}, {"commit_id": "2e895d2870860e9855b79fcda41693783671ed12", "commit_date": "Tue Mar 1 12:39:01 2016 -0500", "commit_message": "Added stub release notes for 1.9.4.", "files_name": ["docs/releases/1.9.4.txt", "docs/releases/index.txt"]}, {"commit_id": "33db899a21387b8a00e881a06bd8e085482d30c2", "commit_date": "Tue Mar 1 12:59:43 2016 -0500", "commit_message": "Fixed #25814 -- Added changing #django topic to release checklist.", "files_name": ["docs/internals/howto-release-django.txt"]}, {"commit_id": "8c42cf0cbd87f344748423f235938dd6ade03f55", "commit_date": "Tue Mar 1 16:02:09 2016 +0000", "commit_message": "Fixed #26303 -- Updated links to mod_wsgi docs.", "files_name": ["docs/howto/deployment/wsgi/apache-auth.txt", "docs/howto/deployment/wsgi/modwsgi.txt", "tests/auth_tests/test_handlers.py"]}, {"commit_id": "fb3540d6a41d9c765a1bc65475da7c3bd24c1b14", "commit_date": "Tue Mar 1 11:29:02 2016 -0800", "commit_message": "Removed obsolete, unused option 'hide_empty' from loaddata command.", "files_name": ["django/core/management/commands/loaddata.py"]}, {"commit_id": "5155c2b4587629c4bc77a11846e5b9d3ba5a43ef", "commit_date": "Wed Mar 2 08:15:53 2016 +0100", "commit_message": "Fixed typo in 1.9.3/1.8.10 release date.", "files_name": ["docs/releases/1.8.10.txt", "docs/releases/1.9.3.txt"]}, {"commit_id": "60633ef3dec8421706c610d8238af2cd679fc915", "commit_date": "Wed Mar 2 14:40:46 2016 +1030", "commit_message": "Fixed #26304 -- Ignored unmanaged through model in table introspection.", "files_name": ["AUTHORS", "django/db/backends/base/introspection.py", "tests/introspection/models.py", "tests/introspection/tests.py"]}, {"commit_id": "04240b23658f8935bbfebacccc23b5e47a1d6c22", "commit_date": "Thu Aug 20 22:38:58 2015 -0700", "commit_message": "Refs #19527 -- Allowed QuerySet.bulk_create() to set the primary key of its objects.", "files_name": ["django/db/backends/base/features.py", "django/db/backends/postgresql/features.py", "django/db/backends/postgresql/operations.py", "django/db/models/query.py", "django/db/models/sql/compiler.py", "docs/ref/models/querysets.txt", "docs/releases/1.10.txt", "tests/bulk_create/tests.py"]}, {"commit_id": "8ddc79a7991685b9463b4f4db43fc4c064bc49f8", "commit_date": "Fri Jun 5 12:31:44 2015 +0100", "commit_message": "Fixed #26285 -- Deprecated the MySQL-specific __search lookup.", "files_name": ["django/db/backends/base/operations.py", "django/db/backends/mysql/operations.py", "django/db/models/lookups.py", "docs/internals/deprecation.txt", "docs/ref/models/fields.txt", "docs/ref/models/querysets.txt", "docs/releases/1.10.txt", "tests/lookup/models.py", "tests/lookup/tests.py"]}, {"commit_id": "1d17bb4f7d78f6c3df9dedc0710acc5bdb300693", "commit_date": "Wed Mar 2 15:54:46 2016 -0500", "commit_message": "Refs #19527 -- Fixed typo in docs/ref/models/querysets.txt.", "files_name": ["docs/ref/models/querysets.txt"]}, {"commit_id": "5d240b070d744f9a2f4cc3117306ea861d866019", "commit_date": "Fri Feb 19 12:47:24 2016 -0500", "commit_message": "Refs #17001 -- Added a test for custom prefetch related queryset on generic relations.", "files_name": ["tests/prefetch_related/tests.py"]}, {"commit_id": "c92123cc1dceeb800b3b8900e2e530ed19d78863", "commit_date": "Thu Feb 18 22:37:11 2016 -0500", "commit_message": "Fixed #26226 -- Made related managers honor the queryset used for prefetching their results.", "files_name": ["django/contrib/contenttypes/fields.py", "django/db/models/fields/related_descriptors.py", "django/db/models/query.py", "docs/internals/deprecation.txt", "docs/releases/1.10.txt", "tests/prefetch_related/tests.py"]}, {"commit_id": "2404d209a5e8c4573927e14587735562b79e13ed", "commit_date": "Wed Mar 2 15:48:13 2016 +0000", "commit_message": "Fixed #26309 -- Documented that login URL settings no longer support dotted paths.", "files_name": ["docs/internals/deprecation.txt", "docs/ref/settings.txt", "docs/releases/1.10.txt", "docs/releases/1.8.txt"]}, {"commit_id": "d0451e4cadf4277f117b9b581530c68d8dc43c6a", "commit_date": "Mon Dec 14 12:36:09 2015 -0500", "commit_message": "Fixed #26295 -- Allowed using i18n_patterns() in any root URLconf.", "files_name": ["django/middleware/locale.py", "docs/releases/1.10.txt", "docs/topics/i18n/translation.txt", "tests/i18n/patterns/tests.py"]}, {"commit_id": "394b7f90d324eade4f4d8527e164800b3dbf8c8a", "commit_date": "Thu Mar 3 20:36:43 2016 +0100", "commit_message": "Passed proper default value to int-type 'verbosity' option", "files_name": ["django/core/management/base.py"]}, {"commit_id": "4e2da368dbad53205bec81b7bd74df63397716ad", "commit_date": "Thu Mar 3 12:20:06 2016 -0800", "commit_message": "Cleaned up TestStaticFilePermissions to use call_command().", "files_name": ["tests/staticfiles_tests/test_storage.py"]}, {"commit_id": "c0181f2c1f982d27cdcea2ed293aa34a3ecf7d8b", "commit_date": "Thu Mar 3 10:15:24 2016 -0500", "commit_message": "Fixed #26310 -- Documented that a queryset ordering must be specified to ensure ordered results.", "files_name": ["docs/ref/models/options.txt", "docs/ref/models/querysets.txt"]}, {"commit_id": "87994b40b3874e45666edfceb313e19611cd460e", "commit_date": "Thu Mar 3 21:09:35 2016 +0100", "commit_message": "Refs #25653 -- Corrected help text for runtests.py --selenium option.", "files_name": ["tests/runtests.py"]}, {"commit_id": "b886f166b332bda96b178a7327a5118f75d804b6", "commit_date": "Fri Mar 4 03:46:22 2016 +0530", "commit_message": "Fixed #26316 -- Factored duplicated code in model/field migration operations.", "files_name": ["django/db/migrations/operations/fields.py", "django/db/migrations/operations/models.py"]}, {"commit_id": "de8a11ba18d5902c668d4db47c38c9c6bdf9c1da", "commit_date": "Thu Mar 3 19:34:31 2016 -0500", "commit_message": "Fixed #26321 -- Added missing \"for_save\" parameter in expressions example.", "files_name": ["docs/ref/models/expressions.txt"]}, {"commit_id": "2f0c785a4c2353a3035ba6022cec5e25fb9d569b", "commit_date": "Fri Mar 4 09:47:43 2016 -0500", "commit_message": "Added stub release notes for 1.8.11.", "files_name": ["docs/releases/1.8.11.txt", "docs/releases/index.txt"]}, {"commit_id": "cecbf1bdef04e00e6947f47d96198aa57c2a0dc3", "commit_date": "Fri Mar 4 14:16:56 2016 -0500", "commit_message": "Fixed typo in docs/releases/1.9.1.txt.", "files_name": ["docs/releases/1.9.1.txt"]}, {"commit_id": "ada7a4aefb9bec4c34667b511022be6057102f98", "commit_date": "Fri Mar 4 15:41:52 2016 +0100", "commit_message": "Fixed #26308 -- Prevented crash with binary URLs in is_safe_url()", "files_name": ["django/utils/http.py", "docs/releases/1.8.11.txt", "docs/releases/1.9.4.txt", "tests/utils_tests/test_http.py"]}, {"commit_id": "552f03869ea7f3072b3fa19ffb6cb2d957fd8447", "commit_date": "Fri Mar 4 23:33:35 2016 +0100", "commit_message": "Added safety to URL decoding in is_safe_url() on Python 2", "files_name": ["django/utils/http.py", "docs/releases/1.8.11.txt", "docs/releases/1.9.4.txt", "tests/utils_tests/test_http.py"]}, {"commit_id": "e19fc9f08ab06f75eade82a122e7a4d0300ff860", "commit_date": "Sat Mar 5 08:39:56 2016 -0500", "commit_message": "Removed claim that you can use different database backends for Django's tests.", "files_name": ["docs/internals/contributing/writing-code/unit-tests.txt"]}, {"commit_id": "b388c294eb5745b3e01dedf0220636fae87ea9a2", "commit_date": "Fri Mar 4 10:24:23 2016 +0900", "commit_message": "Fixed #26312 -- Documented \"create database\" requirement in tutorial 2.", "files_name": ["docs/intro/tutorial02.txt"]}, {"commit_id": "c960af4adb87f8ce87f5698902b68e8332e448cb", "commit_date": "Sat Mar 5 10:00:40 2016 -0500", "commit_message": "Added stub release notes for 1.9.5/1.8.12.", "files_name": ["docs/releases/1.8.12.txt", "docs/releases/1.9.5.txt", "docs/releases/index.txt"]}, {"commit_id": "bc0410d98adcb70ad91f37fa9fee9a7ae71faa18", "commit_date": "Sat Mar 5 10:02:29 2016 -0500", "commit_message": "Fixed typo in docs/releases/1.8.12.txt.", "files_name": ["docs/releases/1.8.12.txt"]}, {"commit_id": "9ed4a788aa8d6ba6a57a2daa15253c3047048dfb", "commit_date": "Sat Mar 5 10:58:45 2016 -0500", "commit_message": "Refs #26312 -- Reworded tutorial 2 to avoid spelling \"error\".", "files_name": ["docs/intro/tutorial02.txt"]}, {"commit_id": "8d3fcfa39e8aab5618d9b7f6a592006e9af8cefc", "commit_date": "Wed Mar 2 17:53:12 2016 -0800", "commit_message": "Cleaned up tests to use call_command() instead of Command.execute().", "files_name": ["django/core/management/commands/test.py", "tests/admin_scripts/tests.py", "tests/auth_tests/test_management.py", "tests/createsuperuser/tests.py"]}, {"commit_id": "4115288b4f7bbd694946a1ddef0f0ba85c03f9a1", "commit_date": "Wed Mar 2 17:12:56 2016 -0800", "commit_message": "Fixed #26315 -- Allowed call_command() to accept a Command object as the first argument.", "files_name": ["django/core/management/__init__.py", "docs/ref/django-admin.txt", "docs/releases/1.10.txt", "tests/admin_scripts/tests.py", "tests/auth_tests/test_management.py"]}, {"commit_id": "1845bc1d1007751a7f65c66aeddc35f032f6bf41", "commit_date": "Wed Mar 2 18:01:36 2016 -0800", "commit_message": "Refs #26315 -- Cleaned up argparse options in commands.", "files_name": ["django/contrib/auth/management/commands/changepassword.py", "django/contrib/auth/management/commands/createsuperuser.py", "django/contrib/staticfiles/management/commands/runserver.py", "django/core/management/base.py", "django/core/management/commands/check.py", "django/core/management/commands/compilemessages.py", "django/core/management/commands/createcachetable.py", "django/core/management/commands/dbshell.py", "django/core/management/commands/dumpdata.py", "django/core/management/commands/flush.py", "django/core/management/commands/loaddata.py", "django/core/management/commands/makemessages.py", "django/core/management/commands/makemigrations.py", "django/core/management/commands/migrate.py", "django/core/management/commands/runserver.py", "django/core/management/commands/showmigrations.py", "django/core/management/commands/sqlsequencereset.py", "django/core/management/commands/squashmigrations.py", "django/core/management/commands/test.py", "django/core/management/commands/testserver.py", "docs/releases/1.10.txt"]}, {"commit_id": "359be4460e89e325fb2969b1f231c9507d1c116b", "commit_date": "Sat Mar 5 14:02:35 2016 -0500", "commit_message": "Refs #19527 -- Fixed SQL compiler regression causing Oracle failure.", "files_name": ["django/db/models/sql/compiler.py"]}, {"commit_id": "2109975e901440da70e29d0f330a600bc2d37e9a", "commit_date": "Sun Mar 6 00:47:26 2016 +0100", "commit_message": "Refs #26217 -- Fixed typo in docs/ref/class-based-views/generic-date-based.txt.", "files_name": ["docs/ref/class-based-views/generic-date-based.txt"]}, {"commit_id": "95ca01f9995ef72c6bbe9bba477781b46cf573b4", "commit_date": "Sat Mar 5 20:20:40 2016 +0100", "commit_message": "Fixed #26271 -- Fixed i18n_patterns resolution when no language is active", "files_name": ["django/urls/resolvers.py", "tests/i18n/patterns/tests.py"]}, {"commit_id": "75614f6d4c1a3fe779a75eb3e787452cccd1d814", "commit_date": "Sun Mar 6 00:48:06 2016 -0800", "commit_message": "Fixed #26331 -- Fixed test function names with typos", "files_name": ["tests/cache/tests.py", "tests/signing/tests.py"]}, {"commit_id": "4b129ac81f4fa38004950d0b307f81d1e9b44af8", "commit_date": "Mon Mar 7 12:06:46 2016 +0000", "commit_message": "Fixed #26325 -- Made MultiPartParser ignore filenames that normalize to an empty string.", "files_name": ["django/http/multipartparser.py"]}], "parents": [{"commit_id_before": "f43291639bb968001df4719c4e69269bd8a3162b", "url_before": "https://api.github.com/repos/django/django/commits/f43291639bb968001df4719c4e69269bd8a3162b", "html_url_before": "https://github.com/django/django/commit/f43291639bb968001df4719c4e69269bd8a3162b"}], "details": [{"raw_url": "https://github.com/django/django/raw/c5544d289233f501917e25970c03ed444abbd4f0/django%2Futils%2Fhttp.py", "code": "from __future__ import unicode_literals\n\nimport base64\nimport calendar\nimport datetime\nimport re\nimport sys\nimport unicodedata\nfrom binascii import Error as BinasciiError\nfrom email.utils import formatdate\n\nfrom django.utils import six\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_bytes, force_str, force_text\nfrom django.utils.functional import keep_lazy_text\nfrom django.utils.six.moves.urllib.parse import (\n    quote, quote_plus, unquote, unquote_plus, urlencode as original_urlencode,\n    urlparse,\n)\n\nETAG_MATCH = re.compile(r'(?:W/)?\"((?:\\\\.|[^\"])*)\"')\n\nMONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec'.split()\n__D = r'(?P<day>\\d{2})'\n__D2 = r'(?P<day>[ \\d]\\d)'\n__M = r'(?P<mon>\\w{3})'\n__Y = r'(?P<year>\\d{4})'\n__Y2 = r'(?P<year>\\d{2})'\n__T = r'(?P<hour>\\d{2}):(?P<min>\\d{2}):(?P<sec>\\d{2})'\nRFC1123_DATE = re.compile(r'^\\w{3}, %s %s %s %s GMT$' % (__D, __M, __Y, __T))\nRFC850_DATE = re.compile(r'^\\w{6,9}, %s-%s-%s %s GMT$' % (__D, __M, __Y2, __T))\nASCTIME_DATE = re.compile(r'^\\w{3} %s %s %s %s$' % (__M, __D2, __T, __Y))\n\nRFC3986_GENDELIMS = str(\":/?#[]@\")\nRFC3986_SUBDELIMS = str(\"!$&'()*+,;=\")\n\nPROTOCOL_TO_PORT = {\n    'http': 80,\n    'https': 443,\n}\n\n\n@keep_lazy_text\ndef urlquote(url, safe='/'):\n    \"\"\"\n    A version of Python's urllib.quote() function that can operate on unicode\n    strings. The url is first UTF-8 encoded before quoting. The returned string\n    can safely be used as part of an argument to a subsequent iri_to_uri() call\n    without double-quoting occurring.\n    \"\"\"\n    return force_text(quote(force_str(url), force_str(safe)))\n\n\n@keep_lazy_text\ndef urlquote_plus(url, safe=''):\n    \"\"\"\n    A version of Python's urllib.quote_plus() function that can operate on\n    unicode strings. The url is first UTF-8 encoded before quoting. The\n    returned string can safely be used as part of an argument to a subsequent\n    iri_to_uri() call without double-quoting occurring.\n    \"\"\"\n    return force_text(quote_plus(force_str(url), force_str(safe)))\n\n\n@keep_lazy_text\ndef urlunquote(quoted_url):\n    \"\"\"\n    A wrapper for Python's urllib.unquote() function that can operate on\n    the result of django.utils.http.urlquote().\n    \"\"\"\n    return force_text(unquote(force_str(quoted_url)))\n\n\n@keep_lazy_text\ndef urlunquote_plus(quoted_url):\n    \"\"\"\n    A wrapper for Python's urllib.unquote_plus() function that can operate on\n    the result of django.utils.http.urlquote_plus().\n    \"\"\"\n    return force_text(unquote_plus(force_str(quoted_url)))\n\n\ndef urlencode(query, doseq=0):\n    \"\"\"\n    A version of Python's urllib.urlencode() function that can operate on\n    unicode strings. The parameters are first cast to UTF-8 encoded strings and\n    then encoded as per normal.\n    \"\"\"\n    if isinstance(query, MultiValueDict):\n        query = query.lists()\n    elif hasattr(query, 'items'):\n        query = query.items()\n    return original_urlencode(\n        [(force_str(k),\n         [force_str(i) for i in v] if isinstance(v, (list, tuple)) else force_str(v))\n            for k, v in query],\n        doseq)\n\n\ndef cookie_date(epoch_seconds=None):\n    \"\"\"\n    Formats the time to ensure compatibility with Netscape's cookie standard.\n\n    Accepts a floating point number expressed in seconds since the epoch, in\n    UTC - such as that outputted by time.time(). If set to None, defaults to\n    the current time.\n\n    Outputs a string in the format 'Wdy, DD-Mon-YYYY HH:MM:SS GMT'.\n    \"\"\"\n    rfcdate = formatdate(epoch_seconds)\n    return '%s-%s-%s GMT' % (rfcdate[:7], rfcdate[8:11], rfcdate[12:25])\n\n\ndef http_date(epoch_seconds=None):\n    \"\"\"\n    Formats the time to match the RFC1123 date format as specified by HTTP\n    RFC2616 section 3.3.1.\n\n    Accepts a floating point number expressed in seconds since the epoch, in\n    UTC - such as that outputted by time.time(). If set to None, defaults to\n    the current time.\n\n    Outputs a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.\n    \"\"\"\n    return formatdate(epoch_seconds, usegmt=True)\n\n\ndef parse_http_date(date):\n    \"\"\"\n    Parses a date format as specified by HTTP RFC2616 section 3.3.1.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Returns an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"\n    # emails.Util.parsedate does the job for RFC1123 dates; unfortunately\n    # RFC2616 makes it mandatory to support RFC850 dates too. So we roll\n    # our own RFC-compliant parsing.\n    for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n        m = regex.match(date)\n        if m is not None:\n            break\n    else:\n        raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n    try:\n        year = int(m.group('year'))\n        if year < 100:\n            if year < 70:\n                year += 2000\n            else:\n                year += 1900\n        month = MONTHS.index(m.group('mon').lower()) + 1\n        day = int(m.group('day'))\n        hour = int(m.group('hour'))\n        min = int(m.group('min'))\n        sec = int(m.group('sec'))\n        result = datetime.datetime(year, month, day, hour, min, sec)\n        return calendar.timegm(result.utctimetuple())\n    except Exception:\n        six.reraise(ValueError, ValueError(\"%r is not a valid date\" % date), sys.exc_info()[2])\n\n\ndef parse_http_date_safe(date):\n    \"\"\"\n    Same as parse_http_date, but returns None if the input is invalid.\n    \"\"\"\n    try:\n        return parse_http_date(date)\n    except Exception:\n        pass\n\n\n# Base 36 functions: useful for generating compact URLs\n\ndef base36_to_int(s):\n    \"\"\"\n    Converts a base 36 string to an ``int``. Raises ``ValueError` if the\n    input won't fit into an int.\n    \"\"\"\n    # To prevent overconsumption of server resources, reject any\n    # base36 string that is long than 13 base36 digits (13 digits\n    # is sufficient to base36-encode any 64-bit integer)\n    if len(s) > 13:\n        raise ValueError(\"Base36 input too large\")\n    value = int(s, 36)\n    # ... then do a final check that the value will fit into an int to avoid\n    # returning a long (#15067). The long type was removed in Python 3.\n    if six.PY2 and value > sys.maxint:\n        raise ValueError(\"Base36 input too large\")\n    return value\n\n\ndef int_to_base36(i):\n    \"\"\"\n    Converts an integer to a base36 string\n    \"\"\"\n    char_set = '0123456789abcdefghijklmnopqrstuvwxyz'\n    if i < 0:\n        raise ValueError(\"Negative base36 conversion input.\")\n    if six.PY2:\n        if not isinstance(i, six.integer_types):\n            raise TypeError(\"Non-integer base36 conversion input.\")\n        if i > sys.maxint:\n            raise ValueError(\"Base36 conversion input too large.\")\n    if i < 36:\n        return char_set[i]\n    b36 = ''\n    while i != 0:\n        i, n = divmod(i, 36)\n        b36 = char_set[n] + b36\n    return b36\n\n\ndef urlsafe_base64_encode(s):\n    \"\"\"\n    Encodes a bytestring in base64 for use in URLs, stripping any trailing\n    equal signs.\n    \"\"\"\n    return base64.urlsafe_b64encode(s).rstrip(b'\\n=')\n\n\ndef urlsafe_base64_decode(s):\n    \"\"\"\n    Decodes a base64 encoded string, adding back any trailing equal signs that\n    might have been stripped.\n    \"\"\"\n    s = force_bytes(s)\n    try:\n        return base64.urlsafe_b64decode(s.ljust(len(s) + len(s) % 4, b'='))\n    except (LookupError, BinasciiError) as e:\n        raise ValueError(e)\n\n\ndef parse_etags(etag_str):\n    \"\"\"\n    Parses a string with one or several etags passed in If-None-Match and\n    If-Match headers by the rules in RFC 2616. Returns a list of etags\n    without surrounding double quotes (\") and unescaped from \\<CHAR>.\n    \"\"\"\n    etags = ETAG_MATCH.findall(etag_str)\n    if not etags:\n        # etag_str has wrong format, treat it as an opaque string then\n        return [etag_str]\n    etags = [e.encode('ascii').decode('unicode_escape') for e in etags]\n    return etags\n\n\ndef quote_etag(etag):\n    \"\"\"\n    Wraps a string in double quotes escaping contents as necessary.\n    \"\"\"\n    return '\"%s\"' % etag.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')\n\n\ndef unquote_etag(etag):\n    \"\"\"\n    Unquote an ETag string; i.e. revert quote_etag().\n    \"\"\"\n    return etag.strip('\"').replace('\\\\\"', '\"').replace('\\\\\\\\', '\\\\') if etag else etag\n\n\ndef is_same_domain(host, pattern):\n    \"\"\"\n    Return ``True`` if the host is either an exact match or a match\n    to the wildcard pattern.\n\n    Any pattern beginning with a period matches a domain and all of its\n    subdomains. (e.g. ``.example.com`` matches ``example.com`` and\n    ``foo.example.com``). Anything else is an exact string match.\n    \"\"\"\n    if not pattern:\n        return False\n\n    pattern = pattern.lower()\n    return (\n        pattern[0] == '.' and (host.endswith(pattern) or host == pattern[1:]) or\n        pattern == host\n    )\n\n\ndef is_safe_url(url, host=None):\n    \"\"\"\n    Return ``True`` if the url is a safe redirection (i.e. it doesn't point to\n    a different host and uses a safe scheme).\n\n    Always returns ``False`` on an empty url.\n    \"\"\"\n    if url is not None:\n        url = url.strip()\n    if not url:\n        return False\n    # Chrome treats \\ completely as / in paths but it could be part of some\n    # basic auth credentials so we need to check both URLs.\n    return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)\n\n\ndef _is_safe_url(url, host):\n    # Chrome considers any URL with more than two slashes to be absolute, but\n    # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n    if url.startswith('///'):\n        return False\n    url_info = urlparse(url)\n    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n    # In that URL, example.com is not the hostname but, a path component. However,\n    # Chrome will still consider example.com to be the hostname, so we must not\n    # allow this syntax.\n    if not url_info.netloc and url_info.scheme:\n        return False\n    # Forbid URLs that start with control characters. Some browsers (like\n    # Chrome) ignore quite a few control characters at the start of a\n    # URL and might consider the URL as scheme relative.\n    if unicodedata.category(url[0])[0] == 'C':\n        return False\n    return ((not url_info.netloc or url_info.netloc == host) and\n            (not url_info.scheme or url_info.scheme in ['http', 'https']))\n", "code_before": "from __future__ import unicode_literals\n\nimport base64\nimport calendar\nimport datetime\nimport re\nimport sys\nimport unicodedata\nfrom binascii import Error as BinasciiError\nfrom email.utils import formatdate\n\nfrom django.utils import six\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_bytes, force_str, force_text\nfrom django.utils.functional import keep_lazy_text\nfrom django.utils.six.moves.urllib.parse import (\n    quote, quote_plus, unquote, unquote_plus, urlencode as original_urlencode,\n    urlparse,\n)\n\nETAG_MATCH = re.compile(r'(?:W/)?\"((?:\\\\.|[^\"])*)\"')\n\nMONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec'.split()\n__D = r'(?P<day>\\d{2})'\n__D2 = r'(?P<day>[ \\d]\\d)'\n__M = r'(?P<mon>\\w{3})'\n__Y = r'(?P<year>\\d{4})'\n__Y2 = r'(?P<year>\\d{2})'\n__T = r'(?P<hour>\\d{2}):(?P<min>\\d{2}):(?P<sec>\\d{2})'\nRFC1123_DATE = re.compile(r'^\\w{3}, %s %s %s %s GMT$' % (__D, __M, __Y, __T))\nRFC850_DATE = re.compile(r'^\\w{6,9}, %s-%s-%s %s GMT$' % (__D, __M, __Y2, __T))\nASCTIME_DATE = re.compile(r'^\\w{3} %s %s %s %s$' % (__M, __D2, __T, __Y))\n\nRFC3986_GENDELIMS = str(\":/?#[]@\")\nRFC3986_SUBDELIMS = str(\"!$&'()*+,;=\")\n\nPROTOCOL_TO_PORT = {\n    'http': 80,\n    'https': 443,\n}\n\n\n@keep_lazy_text\ndef urlquote(url, safe='/'):\n    \"\"\"\n    A version of Python's urllib.quote() function that can operate on unicode\n    strings. The url is first UTF-8 encoded before quoting. The returned string\n    can safely be used as part of an argument to a subsequent iri_to_uri() call\n    without double-quoting occurring.\n    \"\"\"\n    return force_text(quote(force_str(url), force_str(safe)))\n\n\n@keep_lazy_text\ndef urlquote_plus(url, safe=''):\n    \"\"\"\n    A version of Python's urllib.quote_plus() function that can operate on\n    unicode strings. The url is first UTF-8 encoded before quoting. The\n    returned string can safely be used as part of an argument to a subsequent\n    iri_to_uri() call without double-quoting occurring.\n    \"\"\"\n    return force_text(quote_plus(force_str(url), force_str(safe)))\n\n\n@keep_lazy_text\ndef urlunquote(quoted_url):\n    \"\"\"\n    A wrapper for Python's urllib.unquote() function that can operate on\n    the result of django.utils.http.urlquote().\n    \"\"\"\n    return force_text(unquote(force_str(quoted_url)))\n\n\n@keep_lazy_text\ndef urlunquote_plus(quoted_url):\n    \"\"\"\n    A wrapper for Python's urllib.unquote_plus() function that can operate on\n    the result of django.utils.http.urlquote_plus().\n    \"\"\"\n    return force_text(unquote_plus(force_str(quoted_url)))\n\n\ndef urlencode(query, doseq=0):\n    \"\"\"\n    A version of Python's urllib.urlencode() function that can operate on\n    unicode strings. The parameters are first cast to UTF-8 encoded strings and\n    then encoded as per normal.\n    \"\"\"\n    if isinstance(query, MultiValueDict):\n        query = query.lists()\n    elif hasattr(query, 'items'):\n        query = query.items()\n    return original_urlencode(\n        [(force_str(k),\n         [force_str(i) for i in v] if isinstance(v, (list, tuple)) else force_str(v))\n            for k, v in query],\n        doseq)\n\n\ndef cookie_date(epoch_seconds=None):\n    \"\"\"\n    Formats the time to ensure compatibility with Netscape's cookie standard.\n\n    Accepts a floating point number expressed in seconds since the epoch, in\n    UTC - such as that outputted by time.time(). If set to None, defaults to\n    the current time.\n\n    Outputs a string in the format 'Wdy, DD-Mon-YYYY HH:MM:SS GMT'.\n    \"\"\"\n    rfcdate = formatdate(epoch_seconds)\n    return '%s-%s-%s GMT' % (rfcdate[:7], rfcdate[8:11], rfcdate[12:25])\n\n\ndef http_date(epoch_seconds=None):\n    \"\"\"\n    Formats the time to match the RFC1123 date format as specified by HTTP\n    RFC2616 section 3.3.1.\n\n    Accepts a floating point number expressed in seconds since the epoch, in\n    UTC - such as that outputted by time.time(). If set to None, defaults to\n    the current time.\n\n    Outputs a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.\n    \"\"\"\n    return formatdate(epoch_seconds, usegmt=True)\n\n\ndef parse_http_date(date):\n    \"\"\"\n    Parses a date format as specified by HTTP RFC2616 section 3.3.1.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Returns an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"\n    # emails.Util.parsedate does the job for RFC1123 dates; unfortunately\n    # RFC2616 makes it mandatory to support RFC850 dates too. So we roll\n    # our own RFC-compliant parsing.\n    for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n        m = regex.match(date)\n        if m is not None:\n            break\n    else:\n        raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n    try:\n        year = int(m.group('year'))\n        if year < 100:\n            if year < 70:\n                year += 2000\n            else:\n                year += 1900\n        month = MONTHS.index(m.group('mon').lower()) + 1\n        day = int(m.group('day'))\n        hour = int(m.group('hour'))\n        min = int(m.group('min'))\n        sec = int(m.group('sec'))\n        result = datetime.datetime(year, month, day, hour, min, sec)\n        return calendar.timegm(result.utctimetuple())\n    except Exception:\n        six.reraise(ValueError, ValueError(\"%r is not a valid date\" % date), sys.exc_info()[2])\n\n\ndef parse_http_date_safe(date):\n    \"\"\"\n    Same as parse_http_date, but returns None if the input is invalid.\n    \"\"\"\n    try:\n        return parse_http_date(date)\n    except Exception:\n        pass\n\n\n# Base 36 functions: useful for generating compact URLs\n\ndef base36_to_int(s):\n    \"\"\"\n    Converts a base 36 string to an ``int``. Raises ``ValueError` if the\n    input won't fit into an int.\n    \"\"\"\n    # To prevent overconsumption of server resources, reject any\n    # base36 string that is long than 13 base36 digits (13 digits\n    # is sufficient to base36-encode any 64-bit integer)\n    if len(s) > 13:\n        raise ValueError(\"Base36 input too large\")\n    value = int(s, 36)\n    # ... then do a final check that the value will fit into an int to avoid\n    # returning a long (#15067). The long type was removed in Python 3.\n    if six.PY2 and value > sys.maxint:\n        raise ValueError(\"Base36 input too large\")\n    return value\n\n\ndef int_to_base36(i):\n    \"\"\"\n    Converts an integer to a base36 string\n    \"\"\"\n    char_set = '0123456789abcdefghijklmnopqrstuvwxyz'\n    if i < 0:\n        raise ValueError(\"Negative base36 conversion input.\")\n    if six.PY2:\n        if not isinstance(i, six.integer_types):\n            raise TypeError(\"Non-integer base36 conversion input.\")\n        if i > sys.maxint:\n            raise ValueError(\"Base36 conversion input too large.\")\n    if i < 36:\n        return char_set[i]\n    b36 = ''\n    while i != 0:\n        i, n = divmod(i, 36)\n        b36 = char_set[n] + b36\n    return b36\n\n\ndef urlsafe_base64_encode(s):\n    \"\"\"\n    Encodes a bytestring in base64 for use in URLs, stripping any trailing\n    equal signs.\n    \"\"\"\n    return base64.urlsafe_b64encode(s).rstrip(b'\\n=')\n\n\ndef urlsafe_base64_decode(s):\n    \"\"\"\n    Decodes a base64 encoded string, adding back any trailing equal signs that\n    might have been stripped.\n    \"\"\"\n    s = force_bytes(s)\n    try:\n        return base64.urlsafe_b64decode(s.ljust(len(s) + len(s) % 4, b'='))\n    except (LookupError, BinasciiError) as e:\n        raise ValueError(e)\n\n\ndef parse_etags(etag_str):\n    \"\"\"\n    Parses a string with one or several etags passed in If-None-Match and\n    If-Match headers by the rules in RFC 2616. Returns a list of etags\n    without surrounding double quotes (\") and unescaped from \\<CHAR>.\n    \"\"\"\n    etags = ETAG_MATCH.findall(etag_str)\n    if not etags:\n        # etag_str has wrong format, treat it as an opaque string then\n        return [etag_str]\n    etags = [e.encode('ascii').decode('unicode_escape') for e in etags]\n    return etags\n\n\ndef quote_etag(etag):\n    \"\"\"\n    Wraps a string in double quotes escaping contents as necessary.\n    \"\"\"\n    return '\"%s\"' % etag.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')\n\n\ndef unquote_etag(etag):\n    \"\"\"\n    Unquote an ETag string; i.e. revert quote_etag().\n    \"\"\"\n    return etag.strip('\"').replace('\\\\\"', '\"').replace('\\\\\\\\', '\\\\') if etag else etag\n\n\ndef is_same_domain(host, pattern):\n    \"\"\"\n    Return ``True`` if the host is either an exact match or a match\n    to the wildcard pattern.\n\n    Any pattern beginning with a period matches a domain and all of its\n    subdomains. (e.g. ``.example.com`` matches ``example.com`` and\n    ``foo.example.com``). Anything else is an exact string match.\n    \"\"\"\n    if not pattern:\n        return False\n\n    pattern = pattern.lower()\n    return (\n        pattern[0] == '.' and (host.endswith(pattern) or host == pattern[1:]) or\n        pattern == host\n    )\n\n\ndef is_safe_url(url, host=None):\n    \"\"\"\n    Return ``True`` if the url is a safe redirection (i.e. it doesn't point to\n    a different host and uses a safe scheme).\n\n    Always returns ``False`` on an empty url.\n    \"\"\"\n    if url is not None:\n        url = url.strip()\n    if not url:\n        return False\n    # Chrome treats \\ completely as /\n    url = url.replace('\\\\', '/')\n    # Chrome considers any URL with more than two slashes to be absolute, but\n    # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n    if url.startswith('///'):\n        return False\n    url_info = urlparse(url)\n    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n    # In that URL, example.com is not the hostname but, a path component. However,\n    # Chrome will still consider example.com to be the hostname, so we must not\n    # allow this syntax.\n    if not url_info.netloc and url_info.scheme:\n        return False\n    # Forbid URLs that start with control characters. Some browsers (like\n    # Chrome) ignore quite a few control characters at the start of a\n    # URL and might consider the URL as scheme relative.\n    if unicodedata.category(url[0])[0] == 'C':\n        return False\n    return ((not url_info.netloc or url_info.netloc == host) and\n            (not url_info.scheme or url_info.scheme in ['http', 'https']))\n", "patch": "@@ -290,8 +290,12 @@ def is_safe_url(url, host=None):\n         url = url.strip()\n     if not url:\n         return False\n-    # Chrome treats \\ completely as /\n-    url = url.replace('\\\\', '/')\n+    # Chrome treats \\ completely as / in paths but it could be part of some\n+    # basic auth credentials so we need to check both URLs.\n+    return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)\n+\n+\n+def _is_safe_url(url, host):\n     # Chrome considers any URL with more than two slashes to be absolute, but\n     # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n     if url.startswith('///'):", "file_path": "files/2016_4/92", "file_language": "py", "file_name": "django/utils/http.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/django/django/raw/c5544d289233f501917e25970c03ed444abbd4f0/docs%2Freleases%2F1.8.10.txt", "code": "===========================\nDjango 1.8.10 release notes\n===========================\n\n*March 1, 2015*\n\nDjango 1.8.10 fixes two security issues and several bugs in 1.8.9.\n\nCVE-2016-2512: Malicious redirect and possible XSS attack via user-supplied redirect URLs containing basic auth\n===============================================================================================================\n\nDjango relies on user input in some cases (e.g.\n:func:`django.contrib.auth.views.login` and :doc:`i18n </topics/i18n/index>`)\nto redirect the user to an \"on success\" URL. The security check for these\nredirects (namely ``django.utils.http.is_safe_url()``) considered some URLs\nwith basic authentication credentials \"safe\" when they shouldn't be.\n\nFor example, a URL like ``http://mysite.example.com\\@attacker.com`` would be\nconsidered safe if the request's host is ``http://mysite.example.com``, but\nredirecting to this URL sends the user to ``attacker.com``.\n\nAlso, if a developer relies on ``is_safe_url()`` to provide safe redirect\ntargets and puts such a URL into a link, they could suffer from an XSS attack.\n\nBugfixes\n========\n\n* Fixed a crash on PostgreSQL that prevented using ``TIME_ZONE=None`` and\n  ``USE_TZ=False`` (:ticket:`26177`).\n\n* Added system checks for query name clashes of hidden relationships\n  (:ticket:`26162`).\n\n* Made ``forms.FileField`` and ``utils.translation.lazy_number()`` picklable\n  (:ticket:`26212`).\n\n* Fixed :class:`~django.contrib.postgres.fields.RangeField` and\n  :class:`~django.contrib.postgres.fields.ArrayField` serialization with\n  ``None`` values (:ticket:`26215`).\n\n* Reallowed dashes in top-level domain names of URLs checked by\n  ``URLValidator`` to fix a regression in Django 1.8 (:ticket:`26204`).\n\n* Fixed ``BoundField`` to reallow slices of subwidgets (:ticket:`26267`).\n\n* Prevented ``ContentTypeManager`` instances from sharing their cache\n  (:ticket:`26286`).\n", "code_before": "===========================\nDjango 1.8.10 release notes\n===========================\n\n*March 1, 2015*\n\nDjango 1.8.10 fixes two security issues and several bugs in 1.8.9.\n\nBugfixes\n========\n\n* Fixed a crash on PostgreSQL that prevented using ``TIME_ZONE=None`` and\n  ``USE_TZ=False`` (:ticket:`26177`).\n\n* Added system checks for query name clashes of hidden relationships\n  (:ticket:`26162`).\n\n* Made ``forms.FileField`` and ``utils.translation.lazy_number()`` picklable\n  (:ticket:`26212`).\n\n* Fixed :class:`~django.contrib.postgres.fields.RangeField` and\n  :class:`~django.contrib.postgres.fields.ArrayField` serialization with\n  ``None`` values (:ticket:`26215`).\n\n* Reallowed dashes in top-level domain names of URLs checked by\n  ``URLValidator`` to fix a regression in Django 1.8 (:ticket:`26204`).\n\n* Fixed ``BoundField`` to reallow slices of subwidgets (:ticket:`26267`).\n\n* Prevented ``ContentTypeManager`` instances from sharing their cache\n  (:ticket:`26286`).\n", "patch": "@@ -6,6 +6,22 @@ Django 1.8.10 release notes\n \n Django 1.8.10 fixes two security issues and several bugs in 1.8.9.\n \n+CVE-2016-2512: Malicious redirect and possible XSS attack via user-supplied redirect URLs containing basic auth\n+===============================================================================================================\n+\n+Django relies on user input in some cases (e.g.\n+:func:`django.contrib.auth.views.login` and :doc:`i18n </topics/i18n/index>`)\n+to redirect the user to an \"on success\" URL. The security check for these\n+redirects (namely ``django.utils.http.is_safe_url()``) considered some URLs\n+with basic authentication credentials \"safe\" when they shouldn't be.\n+\n+For example, a URL like ``http://mysite.example.com\\@attacker.com`` would be\n+considered safe if the request's host is ``http://mysite.example.com``, but\n+redirecting to this URL sends the user to ``attacker.com``.\n+\n+Also, if a developer relies on ``is_safe_url()`` to provide safe redirect\n+targets and puts such a URL into a link, they could suffer from an XSS attack.\n+\n Bugfixes\n ========\n ", "file_path": "files/2016_4/93", "file_language": "txt", "file_name": "docs/releases/1.8.10.txt", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 1}, {"raw_url": "https://github.com/django/django/raw/c5544d289233f501917e25970c03ed444abbd4f0/docs%2Freleases%2F1.9.3.txt", "code": "==========================\nDjango 1.9.3 release notes\n==========================\n\n*March 1, 2015*\n\nDjango 1.9.3 fixes two security issues and several bugs in 1.9.2.\n\nCVE-2016-2512: Malicious redirect and possible XSS attack via user-supplied redirect URLs containing basic auth\n===============================================================================================================\n\nDjango relies on user input in some cases (e.g.\n:func:`django.contrib.auth.views.login` and :doc:`i18n </topics/i18n/index>`)\nto redirect the user to an \"on success\" URL. The security check for these\nredirects (namely ``django.utils.http.is_safe_url()``) considered some URLs\nwith basic authentication credentials \"safe\" when they shouldn't be.\n\nFor example, a URL like ``http://mysite.example.com\\@attacker.com`` would be\nconsidered safe if the request's host is ``http://mysite.example.com``, but\nredirecting to this URL sends the user to ``attacker.com``.\n\nAlso, if a developer relies on ``is_safe_url()`` to provide safe redirect\ntargets and puts such a URL into a link, they could suffer from an XSS attack.\n\nBugfixes\n========\n\n* Skipped URL checks (new in 1.9) if the ``ROOT_URLCONF`` setting isn't defined\n  (:ticket:`26155`).\n\n* Fixed a crash on PostgreSQL that prevented using ``TIME_ZONE=None`` and\n  ``USE_TZ=False`` (:ticket:`26177`).\n\n* Added system checks for query name clashes of hidden relationships\n  (:ticket:`26162`).\n\n* Fixed a regression for cases where\n  ``ForeignObject.get_extra_descriptor_filter()`` returned a ``Q`` object\n  (:ticket:`26153`).\n\n* Fixed regression with an ``__in=qs`` lookup for a ``ForeignKey`` with\n  ``to_field`` set (:ticket:`26196`).\n\n* Made ``forms.FileField`` and ``utils.translation.lazy_number()`` picklable\n  (:ticket:`26212`).\n\n* Fixed :class:`~django.contrib.postgres.fields.RangeField` and\n  :class:`~django.contrib.postgres.fields.ArrayField` serialization with\n  ``None`` values (:ticket:`26215`).\n\n* Fixed a crash when filtering by a ``Decimal`` in ``RawQuery``\n  (:ticket:`26219`).\n\n* Reallowed dashes in top-level domain names of URLs checked by\n  ``URLValidator`` to fix a regression in Django 1.8 (:ticket:`26204`).\n\n* Fixed some crashing deprecation shims in ``SimpleTemplateResponse`` that\n  regressed in Django 1.9 (:ticket:`26253`).\n\n* Fixed ``BoundField`` to reallow slices of subwidgets (:ticket:`26267`).\n\n* Changed the admin's \"permission denied\" message in the login template to use\n  ``get_username`` instead of ``username`` to support custom user models\n  (:ticket:`26231`).\n\n* Fixed a crash when passing a nonexistent template name to the cached template\n  loader's ``load_template()`` method (:ticket:`26280`).\n\n* Prevented ``ContentTypeManager`` instances from sharing their cache\n  (:ticket:`26286`).\n\n* Reverted a change in Django 1.9.2 (:ticket:`25858`) that prevented relative\n  lazy relationships defined on abstract models to be resolved according to\n  their concrete model's ``app_label`` (:ticket:`26186`).\n", "code_before": "==========================\nDjango 1.9.3 release notes\n==========================\n\n*March 1, 2015*\n\nDjango 1.9.3 fixes two security issues and several bugs in 1.9.2.\n\nBugfixes\n========\n\n* Skipped URL checks (new in 1.9) if the ``ROOT_URLCONF`` setting isn't defined\n  (:ticket:`26155`).\n\n* Fixed a crash on PostgreSQL that prevented using ``TIME_ZONE=None`` and\n  ``USE_TZ=False`` (:ticket:`26177`).\n\n* Added system checks for query name clashes of hidden relationships\n  (:ticket:`26162`).\n\n* Fixed a regression for cases where\n  ``ForeignObject.get_extra_descriptor_filter()`` returned a ``Q`` object\n  (:ticket:`26153`).\n\n* Fixed regression with an ``__in=qs`` lookup for a ``ForeignKey`` with\n  ``to_field`` set (:ticket:`26196`).\n\n* Made ``forms.FileField`` and ``utils.translation.lazy_number()`` picklable\n  (:ticket:`26212`).\n\n* Fixed :class:`~django.contrib.postgres.fields.RangeField` and\n  :class:`~django.contrib.postgres.fields.ArrayField` serialization with\n  ``None`` values (:ticket:`26215`).\n\n* Fixed a crash when filtering by a ``Decimal`` in ``RawQuery``\n  (:ticket:`26219`).\n\n* Reallowed dashes in top-level domain names of URLs checked by\n  ``URLValidator`` to fix a regression in Django 1.8 (:ticket:`26204`).\n\n* Fixed some crashing deprecation shims in ``SimpleTemplateResponse`` that\n  regressed in Django 1.9 (:ticket:`26253`).\n\n* Fixed ``BoundField`` to reallow slices of subwidgets (:ticket:`26267`).\n\n* Changed the admin's \"permission denied\" message in the login template to use\n  ``get_username`` instead of ``username`` to support custom user models\n  (:ticket:`26231`).\n\n* Fixed a crash when passing a nonexistent template name to the cached template\n  loader's ``load_template()`` method (:ticket:`26280`).\n\n* Prevented ``ContentTypeManager`` instances from sharing their cache\n  (:ticket:`26286`).\n\n* Reverted a change in Django 1.9.2 (:ticket:`25858`) that prevented relative\n  lazy relationships defined on abstract models to be resolved according to\n  their concrete model's ``app_label`` (:ticket:`26186`).\n", "patch": "@@ -6,6 +6,22 @@ Django 1.9.3 release notes\n \n Django 1.9.3 fixes two security issues and several bugs in 1.9.2.\n \n+CVE-2016-2512: Malicious redirect and possible XSS attack via user-supplied redirect URLs containing basic auth\n+===============================================================================================================\n+\n+Django relies on user input in some cases (e.g.\n+:func:`django.contrib.auth.views.login` and :doc:`i18n </topics/i18n/index>`)\n+to redirect the user to an \"on success\" URL. The security check for these\n+redirects (namely ``django.utils.http.is_safe_url()``) considered some URLs\n+with basic authentication credentials \"safe\" when they shouldn't be.\n+\n+For example, a URL like ``http://mysite.example.com\\@attacker.com`` would be\n+considered safe if the request's host is ``http://mysite.example.com``, but\n+redirecting to this URL sends the user to ``attacker.com``.\n+\n+Also, if a developer relies on ``is_safe_url()`` to provide safe redirect\n+targets and puts such a URL into a link, they could suffer from an XSS attack.\n+\n Bugfixes\n ========\n ", "file_path": "files/2016_4/94", "file_language": "txt", "file_name": "docs/releases/1.9.3.txt", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 1}, {"raw_url": "https://github.com/django/django/raw/c5544d289233f501917e25970c03ed444abbd4f0/tests%2Futils_tests%2Ftest_http.py", "code": "from __future__ import unicode_literals\n\nimport sys\nimport unittest\nfrom datetime import datetime\n\nfrom django.utils import http, six\nfrom django.utils.datastructures import MultiValueDict\n\n\nclass TestUtilsHttp(unittest.TestCase):\n\n    def test_urlencode(self):\n        # 2-tuples (the norm)\n        result = http.urlencode((('a', 1), ('b', 2), ('c', 3)))\n        self.assertEqual(result, 'a=1&b=2&c=3')\n\n        # A dictionary\n        result = http.urlencode({'a': 1, 'b': 2, 'c': 3})\n        acceptable_results = [\n            # Need to allow all of these as dictionaries have to be treated as\n            # unordered\n            'a=1&b=2&c=3',\n            'a=1&c=3&b=2',\n            'b=2&a=1&c=3',\n            'b=2&c=3&a=1',\n            'c=3&a=1&b=2',\n            'c=3&b=2&a=1'\n        ]\n        self.assertIn(result, acceptable_results)\n        result = http.urlencode({'a': [1, 2]}, doseq=False)\n        self.assertEqual(result, 'a=%5B%271%27%2C+%272%27%5D')\n        result = http.urlencode({'a': [1, 2]}, doseq=True)\n        self.assertEqual(result, 'a=1&a=2')\n        result = http.urlencode({'a': []}, doseq=True)\n        self.assertEqual(result, '')\n\n        # A MultiValueDict\n        result = http.urlencode(MultiValueDict({\n            'name': ['Adrian', 'Simon'],\n            'position': ['Developer']\n        }), doseq=True)\n        acceptable_results = [\n            # MultiValueDicts are similarly unordered\n            'name=Adrian&name=Simon&position=Developer',\n            'position=Developer&name=Adrian&name=Simon'\n        ]\n        self.assertIn(result, acceptable_results)\n\n    def test_base36(self):\n        # reciprocity works\n        for n in [0, 1, 1000, 1000000]:\n            self.assertEqual(n, http.base36_to_int(http.int_to_base36(n)))\n        if six.PY2:\n            self.assertEqual(sys.maxint, http.base36_to_int(http.int_to_base36(sys.maxint)))\n\n        # bad input\n        with self.assertRaises(ValueError):\n            http.int_to_base36(-1)\n        if six.PY2:\n            with self.assertRaises(ValueError):\n                http.int_to_base36(sys.maxint + 1)\n        for n in ['1', 'foo', {1: 2}, (1, 2, 3), 3.141]:\n            with self.assertRaises(TypeError):\n                http.int_to_base36(n)\n\n        for n in ['#', ' ']:\n            with self.assertRaises(ValueError):\n                http.base36_to_int(n)\n        for n in [123, {1: 2}, (1, 2, 3), 3.141]:\n            with self.assertRaises(TypeError):\n                http.base36_to_int(n)\n\n        # more explicit output testing\n        for n, b36 in [(0, '0'), (1, '1'), (42, '16'), (818469960, 'django')]:\n            self.assertEqual(http.int_to_base36(n), b36)\n            self.assertEqual(http.base36_to_int(b36), n)\n\n    def test_is_safe_url(self):\n        for bad_url in ('http://example.com',\n                        'http:///example.com',\n                        'https://example.com',\n                        'ftp://example.com',\n                        r'\\\\example.com',\n                        r'\\\\\\example.com',\n                        r'/\\\\/example.com',\n                        r'\\\\\\example.com',\n                        r'\\\\example.com',\n                        r'\\\\//example.com',\n                        r'/\\/example.com',\n                        r'\\/example.com',\n                        r'/\\example.com',\n                        'http:///example.com',\n                        'http:/\\//example.com',\n                        'http:\\/example.com',\n                        'http:/\\example.com',\n                        'javascript:alert(\"XSS\")',\n                        '\\njavascript:alert(x)',\n                        '\\x08//example.com',\n                        r'http://otherserver\\@example.com',\n                        r'http:\\\\testserver\\@example.com',\n                        r'http://testserver\\me:pass@example.com',\n                        r'http://testserver\\@example.com',\n                        r'http:\\\\testserver\\confirm\\me@example.com',\n                        '\\n'):\n            self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n        for good_url in ('/view/?param=http://example.com',\n                     '/view/?param=https://example.com',\n                     '/view?param=ftp://example.com',\n                     'view/?param=//example.com',\n                     'https://testserver/',\n                     'HTTPS://testserver/',\n                     '//testserver/',\n                     'http://testserver/confirm?email=me@example.com',\n                     '/url%20with%20spaces/'):\n            self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n        # Valid basic auth credentials are allowed.\n        self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))\n        # A path without host is allowed.\n        self.assertTrue(http.is_safe_url('/confirm/me@example.com'))\n        # Basic auth without host is not allowed.\n        self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))\n\n    def test_urlsafe_base64_roundtrip(self):\n        bytestring = b'foo'\n        encoded = http.urlsafe_base64_encode(bytestring)\n        decoded = http.urlsafe_base64_decode(encoded)\n        self.assertEqual(bytestring, decoded)\n\n    def test_urlquote(self):\n        self.assertEqual(http.urlquote('Paris & Orl\\xe9ans'),\n            'Paris%20%26%20Orl%C3%A9ans')\n        self.assertEqual(http.urlquote('Paris & Orl\\xe9ans', safe=\"&\"),\n            'Paris%20&%20Orl%C3%A9ans')\n        self.assertEqual(\n            http.urlunquote('Paris%20%26%20Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n        self.assertEqual(\n            http.urlunquote('Paris%20&%20Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n        self.assertEqual(http.urlquote_plus('Paris & Orl\\xe9ans'),\n            'Paris+%26+Orl%C3%A9ans')\n        self.assertEqual(http.urlquote_plus('Paris & Orl\\xe9ans', safe=\"&\"),\n            'Paris+&+Orl%C3%A9ans')\n        self.assertEqual(\n            http.urlunquote_plus('Paris+%26+Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n        self.assertEqual(\n            http.urlunquote_plus('Paris+&+Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n\n    def test_is_same_domain_good(self):\n        for pair in (\n            ('example.com', 'example.com'),\n            ('example.com', '.example.com'),\n            ('foo.example.com', '.example.com'),\n            ('example.com:8888', 'example.com:8888'),\n            ('example.com:8888', '.example.com:8888'),\n            ('foo.example.com:8888', '.example.com:8888'),\n        ):\n            self.assertTrue(http.is_same_domain(*pair))\n\n    def test_is_same_domain_bad(self):\n        for pair in (\n            ('example2.com', 'example.com'),\n            ('foo.example.com', 'example.com'),\n            ('example.com:9999', 'example.com:8888'),\n        ):\n            self.assertFalse(http.is_same_domain(*pair))\n\n\nclass ETagProcessingTests(unittest.TestCase):\n    def test_parsing(self):\n        etags = http.parse_etags(r'\"\", \"etag\", \"e\\\"t\\\"ag\", \"e\\\\tag\", W/\"weak\"')\n        self.assertEqual(etags, ['', 'etag', 'e\"t\"ag', r'e\\tag', 'weak'])\n\n    def test_quoting(self):\n        original_etag = r'e\\t\"ag'\n        quoted_etag = http.quote_etag(original_etag)\n        self.assertEqual(quoted_etag, r'\"e\\\\t\\\"ag\"')\n        self.assertEqual(http.unquote_etag(quoted_etag), original_etag)\n\n\nclass HttpDateProcessingTests(unittest.TestCase):\n    def test_http_date(self):\n        t = 1167616461.0\n        self.assertEqual(http.http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n\n    def test_cookie_date(self):\n        t = 1167616461.0\n        self.assertEqual(http.cookie_date(t), 'Mon, 01-Jan-2007 01:54:21 GMT')\n\n    def test_parsing_rfc1123(self):\n        parsed = http.parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n        self.assertEqual(datetime.utcfromtimestamp(parsed),\n                         datetime(1994, 11, 6, 8, 49, 37))\n\n    def test_parsing_rfc850(self):\n        parsed = http.parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n        self.assertEqual(datetime.utcfromtimestamp(parsed),\n                         datetime(1994, 11, 6, 8, 49, 37))\n\n    def test_parsing_asctime(self):\n        parsed = http.parse_http_date('Sun Nov  6 08:49:37 1994')\n        self.assertEqual(datetime.utcfromtimestamp(parsed),\n                         datetime(1994, 11, 6, 8, 49, 37))\n", "code_before": "from __future__ import unicode_literals\n\nimport sys\nimport unittest\nfrom datetime import datetime\n\nfrom django.utils import http, six\nfrom django.utils.datastructures import MultiValueDict\n\n\nclass TestUtilsHttp(unittest.TestCase):\n\n    def test_urlencode(self):\n        # 2-tuples (the norm)\n        result = http.urlencode((('a', 1), ('b', 2), ('c', 3)))\n        self.assertEqual(result, 'a=1&b=2&c=3')\n\n        # A dictionary\n        result = http.urlencode({'a': 1, 'b': 2, 'c': 3})\n        acceptable_results = [\n            # Need to allow all of these as dictionaries have to be treated as\n            # unordered\n            'a=1&b=2&c=3',\n            'a=1&c=3&b=2',\n            'b=2&a=1&c=3',\n            'b=2&c=3&a=1',\n            'c=3&a=1&b=2',\n            'c=3&b=2&a=1'\n        ]\n        self.assertIn(result, acceptable_results)\n        result = http.urlencode({'a': [1, 2]}, doseq=False)\n        self.assertEqual(result, 'a=%5B%271%27%2C+%272%27%5D')\n        result = http.urlencode({'a': [1, 2]}, doseq=True)\n        self.assertEqual(result, 'a=1&a=2')\n        result = http.urlencode({'a': []}, doseq=True)\n        self.assertEqual(result, '')\n\n        # A MultiValueDict\n        result = http.urlencode(MultiValueDict({\n            'name': ['Adrian', 'Simon'],\n            'position': ['Developer']\n        }), doseq=True)\n        acceptable_results = [\n            # MultiValueDicts are similarly unordered\n            'name=Adrian&name=Simon&position=Developer',\n            'position=Developer&name=Adrian&name=Simon'\n        ]\n        self.assertIn(result, acceptable_results)\n\n    def test_base36(self):\n        # reciprocity works\n        for n in [0, 1, 1000, 1000000]:\n            self.assertEqual(n, http.base36_to_int(http.int_to_base36(n)))\n        if six.PY2:\n            self.assertEqual(sys.maxint, http.base36_to_int(http.int_to_base36(sys.maxint)))\n\n        # bad input\n        with self.assertRaises(ValueError):\n            http.int_to_base36(-1)\n        if six.PY2:\n            with self.assertRaises(ValueError):\n                http.int_to_base36(sys.maxint + 1)\n        for n in ['1', 'foo', {1: 2}, (1, 2, 3), 3.141]:\n            with self.assertRaises(TypeError):\n                http.int_to_base36(n)\n\n        for n in ['#', ' ']:\n            with self.assertRaises(ValueError):\n                http.base36_to_int(n)\n        for n in [123, {1: 2}, (1, 2, 3), 3.141]:\n            with self.assertRaises(TypeError):\n                http.base36_to_int(n)\n\n        # more explicit output testing\n        for n, b36 in [(0, '0'), (1, '1'), (42, '16'), (818469960, 'django')]:\n            self.assertEqual(http.int_to_base36(n), b36)\n            self.assertEqual(http.base36_to_int(b36), n)\n\n    def test_is_safe_url(self):\n        for bad_url in ('http://example.com',\n                        'http:///example.com',\n                        'https://example.com',\n                        'ftp://example.com',\n                        r'\\\\example.com',\n                        r'\\\\\\example.com',\n                        r'/\\\\/example.com',\n                        r'\\\\\\example.com',\n                        r'\\\\example.com',\n                        r'\\\\//example.com',\n                        r'/\\/example.com',\n                        r'\\/example.com',\n                        r'/\\example.com',\n                        'http:///example.com',\n                        'http:/\\//example.com',\n                        'http:\\/example.com',\n                        'http:/\\example.com',\n                        'javascript:alert(\"XSS\")',\n                        '\\njavascript:alert(x)',\n                        '\\x08//example.com',\n                        '\\n'):\n            self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n        for good_url in ('/view/?param=http://example.com',\n                     '/view/?param=https://example.com',\n                     '/view?param=ftp://example.com',\n                     'view/?param=//example.com',\n                     'https://testserver/',\n                     'HTTPS://testserver/',\n                     '//testserver/',\n                     '/url%20with%20spaces/'):\n            self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n\n    def test_urlsafe_base64_roundtrip(self):\n        bytestring = b'foo'\n        encoded = http.urlsafe_base64_encode(bytestring)\n        decoded = http.urlsafe_base64_decode(encoded)\n        self.assertEqual(bytestring, decoded)\n\n    def test_urlquote(self):\n        self.assertEqual(http.urlquote('Paris & Orl\\xe9ans'),\n            'Paris%20%26%20Orl%C3%A9ans')\n        self.assertEqual(http.urlquote('Paris & Orl\\xe9ans', safe=\"&\"),\n            'Paris%20&%20Orl%C3%A9ans')\n        self.assertEqual(\n            http.urlunquote('Paris%20%26%20Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n        self.assertEqual(\n            http.urlunquote('Paris%20&%20Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n        self.assertEqual(http.urlquote_plus('Paris & Orl\\xe9ans'),\n            'Paris+%26+Orl%C3%A9ans')\n        self.assertEqual(http.urlquote_plus('Paris & Orl\\xe9ans', safe=\"&\"),\n            'Paris+&+Orl%C3%A9ans')\n        self.assertEqual(\n            http.urlunquote_plus('Paris+%26+Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n        self.assertEqual(\n            http.urlunquote_plus('Paris+&+Orl%C3%A9ans'),\n            'Paris & Orl\\xe9ans')\n\n    def test_is_same_domain_good(self):\n        for pair in (\n            ('example.com', 'example.com'),\n            ('example.com', '.example.com'),\n            ('foo.example.com', '.example.com'),\n            ('example.com:8888', 'example.com:8888'),\n            ('example.com:8888', '.example.com:8888'),\n            ('foo.example.com:8888', '.example.com:8888'),\n        ):\n            self.assertTrue(http.is_same_domain(*pair))\n\n    def test_is_same_domain_bad(self):\n        for pair in (\n            ('example2.com', 'example.com'),\n            ('foo.example.com', 'example.com'),\n            ('example.com:9999', 'example.com:8888'),\n        ):\n            self.assertFalse(http.is_same_domain(*pair))\n\n\nclass ETagProcessingTests(unittest.TestCase):\n    def test_parsing(self):\n        etags = http.parse_etags(r'\"\", \"etag\", \"e\\\"t\\\"ag\", \"e\\\\tag\", W/\"weak\"')\n        self.assertEqual(etags, ['', 'etag', 'e\"t\"ag', r'e\\tag', 'weak'])\n\n    def test_quoting(self):\n        original_etag = r'e\\t\"ag'\n        quoted_etag = http.quote_etag(original_etag)\n        self.assertEqual(quoted_etag, r'\"e\\\\t\\\"ag\"')\n        self.assertEqual(http.unquote_etag(quoted_etag), original_etag)\n\n\nclass HttpDateProcessingTests(unittest.TestCase):\n    def test_http_date(self):\n        t = 1167616461.0\n        self.assertEqual(http.http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n\n    def test_cookie_date(self):\n        t = 1167616461.0\n        self.assertEqual(http.cookie_date(t), 'Mon, 01-Jan-2007 01:54:21 GMT')\n\n    def test_parsing_rfc1123(self):\n        parsed = http.parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n        self.assertEqual(datetime.utcfromtimestamp(parsed),\n                         datetime(1994, 11, 6, 8, 49, 37))\n\n    def test_parsing_rfc850(self):\n        parsed = http.parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n        self.assertEqual(datetime.utcfromtimestamp(parsed),\n                         datetime(1994, 11, 6, 8, 49, 37))\n\n    def test_parsing_asctime(self):\n        parsed = http.parse_http_date('Sun Nov  6 08:49:37 1994')\n        self.assertEqual(datetime.utcfromtimestamp(parsed),\n                         datetime(1994, 11, 6, 8, 49, 37))\n", "patch": "@@ -97,6 +97,11 @@ def test_is_safe_url(self):\n                         'javascript:alert(\"XSS\")',\n                         '\\njavascript:alert(x)',\n                         '\\x08//example.com',\n+                        r'http://otherserver\\@example.com',\n+                        r'http:\\\\testserver\\@example.com',\n+                        r'http://testserver\\me:pass@example.com',\n+                        r'http://testserver\\@example.com',\n+                        r'http:\\\\testserver\\confirm\\me@example.com',\n                         '\\n'):\n             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n         for good_url in ('/view/?param=http://example.com',\n@@ -106,8 +111,15 @@ def test_is_safe_url(self):\n                      'https://testserver/',\n                      'HTTPS://testserver/',\n                      '//testserver/',\n+                     'http://testserver/confirm?email=me@example.com',\n                      '/url%20with%20spaces/'):\n             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n+        # Valid basic auth credentials are allowed.\n+        self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))\n+        # A path without host is allowed.\n+        self.assertTrue(http.is_safe_url('/confirm/me@example.com'))\n+        # Basic auth without host is not allowed.\n+        self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))\n \n     def test_urlsafe_base64_roundtrip(self):\n         bytestring = b'foo'", "file_path": "files/2016_4/95", "file_language": "py", "file_name": "tests/utils_tests/test_http.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
