{"index": 8525, "cve_id": "CVE-2022-2514", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "The time and filter parameters in Fava prior to v1.22 are vulnerable to reflected XSS due to the lack of escaping of error messages which contained the parameters in verbatim.", "cvss": "6.1", "publish_date": "July 25, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "ca9e3882c7b5fbf5273ba52340b9fea6a99f3711", "commit_message": "avoid use of |safe filter in templates\n\nExplicitly mark those few places where we need to pass in data that\nshould not be escaped on the Python side.", "commit_date": "2022-07-03T09:23:55Z", "project": "beancount/fava", "url": "https://api.github.com/repos/beancount/fava/commits/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711", "html_url": "https://github.com/beancount/fava/commit/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711", "windows_before": [{"commit_id": "c9f3ee8cd35fb336a8c170187448d64b8f7aae92", "commit_date": "Sat Jul 2 14:31:33 2022 +0200", "commit_message": "fix: fava.core.commodities - remove unused func", "files_name": ["src/fava/core/commodities.py", "tests/test_core_commodities.py"]}, {"commit_id": "72580a65a05963b3460e51fdaf6aded5bd76b423", "commit_date": "Sat Jul 2 14:11:06 2022 +0200", "commit_message": "help: document commodity metadata", "files_name": ["src/fava/help/beancount_syntax.md"]}, {"commit_id": "051305b7e74bb3d31a8799b0586e37e68f58f0d3", "commit_date": "Sat Jul 2 14:06:39 2022 +0200", "commit_message": "frontend: also render numbers according to specified precision", "files_name": ["frontend/src/charts/Sunburst.svelte", "frontend/src/charts/Treemap.svelte", "frontend/src/charts/bar.ts", "frontend/src/charts/line.ts", "frontend/src/format.ts", "frontend/src/stores/index.ts", "src/fava/templates/_layout.html"]}, {"commit_id": "856ec68035b492e3325fb251e8c85a93dd0b711f", "commit_date": "Sat Jul 2 13:35:56 2022 +0200", "commit_message": "commodities: expose precisions on formatter", "files_name": ["src/fava/core/commodities.py", "src/fava/core/number.py", "tests/data/long-example.beancount", "tests/test_core_commodities.py", "tests/test_core_number.py"]}, {"commit_id": "7564872b283e9b832d75229518c002badafceae7", "commit_date": "Sat Jul 2 13:17:35 2022 +0200", "commit_message": "commodities: allow for precision to be specified explicitly", "files_name": ["src/fava/core/commodities.py", "src/fava/core/number.py", "tests/__snapshots__/test_json_api.py-test_api_context", "tests/__snapshots__/test_json_api.py-test_api_context-2", "tests/data/long-example.beancount", "tests/test_core_commodities.py", "tests/test_json_api.py"]}, {"commit_id": "f3b76022ca8389a222679d5b2989285b56aeb61c", "commit_date": "Sat Jul 2 13:03:58 2022 +0200", "commit_message": "fava.core: add module for commodities", "files_name": ["src/fava/core/__init__.py", "src/fava/core/commodities.py", "src/fava/templates/macros/_commodity_macros.html", "tests/test_core.py"]}, {"commit_id": "6ec42909454a882c70fec8097e72ff7071edd10c", "commit_date": "Sun Apr 10 12:19:26 2022 +1000", "commit_message": "Skip price entries in journal table", "files_name": ["src/fava/templates/_journal_table.html"]}, {"commit_id": "307ba72604e1a9c0a81b380657c252cc6cd4f876", "commit_date": "Sat Jul 2 11:39:41 2022 +0200", "commit_message": "tests: bump coverage requirement", "files_name": ["tox.ini"]}, {"commit_id": "6f4bcd5db8603a8baa4cdd190f22d62b0520db46", "commit_date": "Sat May 7 13:39:11 2022 +0200", "commit_message": "explicit filtered ledger", "files_name": ["src/fava/application.py", "src/fava/context.py", "src/fava/core/__init__.py", "src/fava/core/charts.py", "src/fava/core/query_shell.py", "src/fava/ext/portfolio_list/__init__.py", "src/fava/json_api.py", "src/fava/template_filters.py", "src/fava/templates/_charts.html", "src/fava/templates/_tree_table.html", "src/fava/templates/account.html", "src/fava/templates/balance_sheet.html", "src/fava/templates/beancount_file", "src/fava/templates/commodities.html", "src/fava/templates/documents.html", "src/fava/templates/events.html", "src/fava/templates/holdings.html", "src/fava/templates/income_statement.html", "src/fava/templates/journal.html", "src/fava/templates/statistics.html", "src/fava/templates/trial_balance.html", "tests/conftest.py", "tests/test_core.py", "tests/test_core_charts.py", "tests/test_core_query_shell.py", "tests/test_template_filters.py"]}, {"commit_id": "150d75d34958abc5f1d12e01c766ab5888d86346", "commit_date": "Tue Jun 28 18:47:49 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json", "frontend/package.json"]}, {"commit_id": "f2526b4748db2498eafd85eaec92e96a012fc688", "commit_date": "Sat Jul 2 10:05:10 2022 +0200", "commit_message": "charts: strictly type chart modes", "files_name": ["frontend/src/charts/LineChart.svelte", "frontend/src/stores/chart.ts"]}, {"commit_id": "2fcd6057619bb8fa100358a9085ec0a33039be2d", "commit_date": "Sat Jul 2 09:55:05 2022 +0200", "commit_message": "fix: localStorage name clash", "files_name": ["frontend/src/charts/Chart.svelte", "frontend/src/stores/chart.ts"]}, {"commit_id": "ca3af133ddbe748379f37fe517c1ac32dece7e25", "commit_date": "Sat Jul 2 09:49:32 2022 +0200", "commit_message": "charts: always generate interval_totals with sub-accounts", "files_name": ["src/fava/core/charts.py", "src/fava/templates/_charts.html", "src/fava/templates/account.html", "src/fava/templates/income_statement.html", "tests/__snapshots__/test_core_charts.py-test_interval_totals", "tests/__snapshots__/test_core_charts.py-test_interval_totals-2", "tests/__snapshots__/test_core_charts.py-test_interval_totals_inverted", "tests/__snapshots__/test_core_charts.py-test_interval_totals_inverted-2", "tests/test_core_charts.py"]}, {"commit_id": "456d71988d1d62d0f0a4e29b74d641ff9c027a38", "commit_date": "Fri Jul 1 22:36:37 2022 +0200", "commit_message": "charts: refactors; move more logic to bar.ts", "files_name": ["frontend/src/charts/BarChart.svelte", "frontend/src/charts/bar.ts", "frontend/test/charts.test.ts"]}, {"commit_id": "a7301e49c9c66d9a652aa8296938d9c87b274a13", "commit_date": "Fri Jul 1 18:46:14 2022 +0200", "commit_message": "charts: minor refactors for stacked bar charts", "files_name": ["frontend/src/charts/BarChart.svelte", "frontend/src/charts/Chart.svelte", "frontend/src/charts/bar.ts", "frontend/test/charts.test.ts"]}, {"commit_id": "3cb83400d0377e7b4c6ec84c4cdd4755f8d35d29", "commit_date": "Fri Apr 15 16:40:55 2022 -0700", "commit_message": "Remove bucketing functionality.  Add tests", "files_name": ["frontend/src/charts/BarChart.svelte", "frontend/src/charts/bar.ts", "frontend/test/charts.test.ts", "src/fava/core/charts.py", "src/fava/core/fava_options.py", "src/fava/templates/_charts.html", "src/fava/templates/account.html", "src/fava/templates/income_statement.html", "tests/__snapshots__/test_core_charts.py-test_interval_totals_children", "tests/__snapshots__/test_core_charts.py-test_interval_totals_children-2", "tests/test_core_charts.py"]}, {"commit_id": "7f3b5b2e0a1c23291adc02a22154d2de681f786b", "commit_date": "Fri Apr 8 14:35:03 2022 -0700", "commit_message": "Initial stacked barchart implementation", "files_name": ["frontend/src/charts/BarChart.svelte", "frontend/src/charts/Chart.svelte", "frontend/src/charts/bar.ts", "frontend/src/charts/helpers.ts", "frontend/src/stores/chart.ts", "src/fava/core/charts.py", "src/fava/core/fava_options.py", "src/fava/templates/_charts.html", "src/fava/templates/account.html", "src/fava/templates/income_statement.html", "tests/__snapshots__/test_core_charts.py-test_interval_totals", "tests/__snapshots__/test_core_charts.py-test_interval_totals-2", "tests/__snapshots__/test_core_charts.py-test_interval_totals_inverted", "tests/__snapshots__/test_core_charts.py-test_interval_totals_inverted-2"]}, {"commit_id": "2338ce4c6111b6c0f8993ff6523ddcc76adf9f15", "commit_date": "Tue Jun 28 18:49:48 2022 +0200", "commit_message": "Fix modal size on mobile (#1431)", "files_name": ["frontend/src/modals/ModalBase.svelte"]}, {"commit_id": "84faac8a924906d17cb3b7ca29750327530c1c9a", "commit_date": "Tue Jun 28 18:22:14 2022 +0200", "commit_message": "contributing: add email for security issues", "files_name": ["CONTRIBUTING.md"]}, {"commit_id": "b05d2448f54ab505ef0a6834cdd0824b58fc49d0", "commit_date": "Thu May 12 18:06:32 2022 +0200", "commit_message": "fix: do not filter ledger for get_changed or get_errors", "files_name": ["src/fava/application.py"]}, {"commit_id": "37d94e5de8cea3eee3a56e6a7ac8ace2148d7b24", "commit_date": "Sat May 7 13:25:44 2022 +0200", "commit_message": "tests: use ledger.all_* in some more places", "files_name": ["tests/test_core_tree.py", "tests/test_json_api.py", "tests/test_template_filters.py"]}, {"commit_id": "f5c498e33fc1b4502ec90c930e6b124b5ed1f30b", "commit_date": "Sat May 7 11:31:38 2022 +0200", "commit_message": "logging: correctly filter out requests to changed endpoint", "files_name": ["src/fava/util/__init__.py"]}, {"commit_id": "b9eb168ba664384658a261e60eead8a94c80b913", "commit_date": "Mon Jun 13 19:29:24 2022 +0200", "commit_message": "lint", "files_name": ["src/fava/core/filters.py"]}, {"commit_id": "d64134b1e29f5287946bf5aed158e6aefbddaff5", "commit_date": "Mon Jun 13 19:22:56 2022 +0200", "commit_message": "upgrade codemirror", "files_name": ["frontend/package-lock.json", "frontend/package.json"]}, {"commit_id": "7588897b70a993bf01df607d9cf68a52fe11cb18", "commit_date": "Mon Jun 13 18:28:17 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json", "frontend/package.json"]}, {"commit_id": "67852e3f504758807ce504aa895b132d70172bfb", "commit_date": "Sat Apr 30 09:27:35 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json", "frontend/package.json"]}, {"commit_id": "cd2c7115a66c0af0d61ffaac8511c6442a4119fa", "commit_date": "Sun Apr 24 11:22:59 2022 +0200", "commit_message": "update codemirror", "files_name": ["frontend/package-lock.json", "frontend/package.json", "frontend/src/codemirror/beancount-autocomplete.ts", "frontend/src/codemirror/beancount-highlight.ts", "frontend/src/codemirror/beancount-stream-parser.ts", "frontend/src/codemirror/beancount.ts", "frontend/src/codemirror/bql-stream-parser.ts", "frontend/src/codemirror/bql.ts", "frontend/src/codemirror/setup.ts", "frontend/src/editor/EditorMenu.svelte"]}, {"commit_id": "39a7f2e3e731736808bb266bee66845218668666", "commit_date": "Thu Apr 21 15:34:21 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json"]}, {"commit_id": "bb23a516512927fb3b46b08d4535b6ea4313e8fd", "commit_date": "Mon May 2 19:18:52 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "877e4348e19eca880510661d7cc02c2dafe3fca1", "commit_date": "Mon Apr 11 19:11:45 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json"]}], "windows_after": [{"commit_id": "96c56e2ff25deea4c1681649ca316ed7dfdf3294", "commit_date": "Sun Jul 3 11:27:49 2022 +0200", "commit_message": "more direct imports and some typing", "files_name": ["contrib/scripts.py", "src/fava/application.py", "src/fava/context.py"]}, {"commit_id": "9d2d2ab4db4debb01a5b6b1a6d9591f14d71c581", "commit_date": "Sun Jul 3 11:39:31 2022 +0200", "commit_message": "translations", "files_name": ["src/fava/translations/bg/LC_MESSAGES/messages.po", "src/fava/translations/ca/LC_MESSAGES/messages.po", "src/fava/translations/de/LC_MESSAGES/messages.po", "src/fava/translations/es/LC_MESSAGES/messages.po", "src/fava/translations/fa/LC_MESSAGES/messages.po", "src/fava/translations/fr/LC_MESSAGES/messages.po", "src/fava/translations/nl/LC_MESSAGES/messages.po", "src/fava/translations/pt/LC_MESSAGES/messages.po", "src/fava/translations/ru/LC_MESSAGES/messages.po", "src/fava/translations/sk/LC_MESSAGES/messages.po", "src/fava/translations/sv/LC_MESSAGES/messages.po", "src/fava/translations/uk/LC_MESSAGES/messages.po", "src/fava/translations/zh/LC_MESSAGES/messages.po", "src/fava/translations/zh_Hant_TW/LC_MESSAGES/messages.po"]}, {"commit_id": "b100959cacbefbfbd180f3c1ee6ed4440311fdb5", "commit_date": "Sun Jul 3 18:04:39 2022 +0200", "commit_message": "changes", "files_name": ["CHANGES"]}, {"commit_id": "6956476f0662664d88dd25c9d04ed7650fe90404", "commit_date": "Mon Jul 4 17:58:57 2022 +0530", "commit_message": "Bugfix: Mark extension generated content as safe", "files_name": ["src/fava/application.py"]}, {"commit_id": "51c504a4c01ede41cf896324955bb3bf756767f0", "commit_date": "Mon Jul 4 18:07:39 2022 +0200", "commit_message": "context: allow all types of entries", "files_name": ["frontend/src/api.ts", "frontend/src/entries.ts", "frontend/src/helpers.ts", "frontend/src/lib/validation.ts", "frontend/src/modals/EntryContext.svelte"]}, {"commit_id": "39cce56a301be3fed9455fdca6bd20e0dd5bd13d", "commit_date": "Mon Jul 4 20:21:26 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "9bb6366423f81dfb3ad997c75630807376a9a58c", "commit_date": "Wed Jul 6 21:36:31 2022 +0200", "commit_message": "fix: precision may be integer 0 (#1445)", "files_name": ["src/fava/core/commodities.py", "tests/__snapshots__/test_json_api.py-test_api_context", "tests/__snapshots__/test_json_api.py-test_api_context-2", "tests/data/long-example.beancount", "tests/test_core_commodities.py"]}, {"commit_id": "239061c02b0df8e1ed47d34c4a361dc84447452f", "commit_date": "Tue Jul 12 21:48:31 2022 +0200", "commit_message": "update translations", "files_name": ["src/fava/translations/bg/LC_MESSAGES/messages.po", "src/fava/translations/zh/LC_MESSAGES/messages.po", "src/fava/translations/zh_Hant_TW/LC_MESSAGES/messages.po"]}, {"commit_id": "2cfe7232f9958caad9fbb9c45947c1f223556dcf", "commit_date": "Tue Jul 12 21:49:38 2022 +0200", "commit_message": "[pre-commit.ci] pre-commit autoupdate (#1450)", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "d2ce787e2c8d1776dbfac742492a986c19a1cd2b", "commit_date": "Tue Jul 12 21:54:55 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json", "frontend/package.json", "frontend/tsconfig.json"]}, {"commit_id": "11e0ed360ac4b4a40eda35f6822b7e0ff128535e", "commit_date": "Fri Jul 22 19:36:44 2022 +0200", "commit_message": "fix #1453", "files_name": ["src/fava/templates/_charts.html"]}, {"commit_id": "dccfb6a2f4567f35ce2e9a78e24f92ebf946bc9b", "commit_date": "Sat Jul 23 21:06:44 2022 +0200", "commit_message": "fix xss issue in query filter", "files_name": ["frontend/src/modals/EntryContext.svelte", "frontend/src/query/Query.svelte"]}, {"commit_id": "dc8e5e94f07f4ffac3c19f1d563815085dea140f", "commit_date": "Mon Jul 4 15:39:17 2022 +1000", "commit_message": "add conversion_currencies option", "files_name": ["frontend/src/stores/chart.ts", "frontend/src/stores/index.ts", "src/fava/core/fava_options.py", "src/fava/help/options.md", "tests/test_core_fava_options.py"]}, {"commit_id": "b8e87dedd7cf8fd75c58fb65551037d1347aa187", "commit_date": "Sun Jul 24 09:41:48 2022 +0200", "commit_message": "make some more strings translateable", "files_name": ["frontend/src/charts/HierarchyContainer.svelte", "frontend/src/journal/JournalFilters.svelte", "src/fava/templates/_charts.html", "src/fava/translations/babel.conf"]}, {"commit_id": "fcb437273676089de935160507c0198a88df43f3", "commit_date": "Sun Jul 24 09:59:45 2022 +0200", "commit_message": "update translations", "files_name": ["src/fava/translations/bg/LC_MESSAGES/messages.po", "src/fava/translations/ca/LC_MESSAGES/messages.po", "src/fava/translations/de/LC_MESSAGES/messages.po", "src/fava/translations/es/LC_MESSAGES/messages.po", "src/fava/translations/fa/LC_MESSAGES/messages.po", "src/fava/translations/fr/LC_MESSAGES/messages.po", "src/fava/translations/nl/LC_MESSAGES/messages.po", "src/fava/translations/pt/LC_MESSAGES/messages.po", "src/fava/translations/ru/LC_MESSAGES/messages.po", "src/fava/translations/sk/LC_MESSAGES/messages.po", "src/fava/translations/sv/LC_MESSAGES/messages.po", "src/fava/translations/uk/LC_MESSAGES/messages.po", "src/fava/translations/zh/LC_MESSAGES/messages.po", "src/fava/translations/zh_Hant_TW/LC_MESSAGES/messages.po"]}, {"commit_id": "971ae3757daeae8b8b407c8a28072adcc40055cd", "commit_date": "Sun Jul 24 11:15:16 2022 +0200", "commit_message": "add unrealized profit and loss column in Holdings", "files_name": ["src/fava/templates/holdings.html"]}, {"commit_id": "472f3f9ee70e9ece24581fa2a27caf3eae5ac87f", "commit_date": "Sun Jul 24 11:19:29 2022 +0200", "commit_message": "deps", "files_name": ["frontend/package-lock.json"]}, {"commit_id": "6a1a27716b3d3c4f2840dd4bf1b12c62318ec6fd", "commit_date": "Sun Jul 24 11:27:04 2022 +0200", "commit_message": "editor: indent with tab", "files_name": ["frontend/src/codemirror/setup.ts", "src/fava/help/features.md"]}, {"commit_id": "25631ce7e0b817e19f89313066d083cb7c301027", "commit_date": "Sun Jul 24 11:39:44 2022 +0200", "commit_message": "docs: add note that one should use recent deps", "files_name": ["docs/development.rst"]}, {"commit_id": "545f91cc3c74fc79fe5454c113419744667d511f", "commit_date": "Sun Jul 24 11:51:58 2022 +0200", "commit_message": "help: add query chart example", "files_name": ["src/fava/help/features.md"]}, {"commit_id": "e0eaf228561c569a57a9ae1b22ed57e371e7d019", "commit_date": "Mon Jul 25 20:15:18 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "ac8b4ea86ef4bb8d3672099f595aa99cb343da47", "commit_date": "Wed Jul 27 22:19:26 2022 +0200", "commit_message": "manifest: remove some excludes", "files_name": ["MANIFEST.in"]}, {"commit_id": "793cefabb88a95e6ead427ac3fa389b616034941", "commit_date": "Tue Jul 26 17:31:46 2022 +0200", "commit_message": "deps", "files_name": ["frontend/package-lock.json"]}, {"commit_id": "5e185f5e6c452c394182dd7951a26cd77a118e08", "commit_date": "Sat Jul 30 09:21:16 2022 +0200", "commit_message": "temporarily disable sourcehut Arch build", "files_name": [".builds/archlinux.yml"]}, {"commit_id": "6aba5e77e1ee924c22a4271ea8d5368ddf33672f", "commit_date": "Sat Jul 30 09:48:24 2022 +0200", "commit_message": "lazily create tooltip and notification div", "files_name": ["frontend/src/charts/tooltip.ts", "frontend/src/notifications.ts"]}, {"commit_id": "68bbb6e39319deb35ab9f18d0b6aa9fa70472539", "commit_date": "Sat Jul 30 09:18:04 2022 +0200", "commit_message": "create tooltip contents in a xss-safe way", "files_name": ["frontend/src/charts/ScatterPlot.svelte", "frontend/src/charts/Treemap.svelte", "frontend/src/charts/bar.ts", "frontend/src/charts/context.ts", "frontend/src/charts/line.ts", "frontend/src/charts/tooltip.ts", "frontend/src/keyboard-shortcuts.ts", "frontend/src/sidebar/index.ts"]}, {"commit_id": "d6afda1a7f597ed255b4001b725ef0304b2028b6", "commit_date": "Mon Aug 1 20:55:02 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "421b4c23c7f0b7d75a7f589f6c53891c1f7d954b", "commit_date": "Tue Aug 2 18:12:10 2022 +0200", "commit_message": "lint", "files_name": ["src/fava/application.py", "tests/test_application.py"]}, {"commit_id": "5585ecaa6db58ae2b34358a4ed7cf3d2f9649db6", "commit_date": "Thu Aug 4 18:18:13 2022 +0200", "commit_message": "Revert \"temporarily disable sourcehut Arch build\"", "files_name": [".builds/archlinux.yml"]}, {"commit_id": "dbd6fcb465ba06ed2adb65b20662ec0d46af95dd", "commit_date": "Wed Jul 27 17:46:59 2022 +0200", "commit_message": "simpler serialisation for tags and links", "files_name": ["frontend/src/entries.ts", "frontend/src/entry-forms/Transaction.svelte", "src/fava/serialisation.py", "tests/__snapshots__/test_json_api.py-test_api_context", "tests/test_json_api.py", "tests/test_serialisation.py"]}, {"commit_id": "7e3971195ccbb7978edb7d3df9c4ee09b5b68846", "commit_date": "Fri Aug 5 17:27:18 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json"]}, {"commit_id": "1bfa6cccf2cce6e0402b4e78bd52af247cde5539", "commit_date": "Fri Aug 5 16:29:19 2022 +0200", "commit_message": "fix Flask deprecation warnings; more direct imports", "files_name": ["pyproject.toml", "src/fava/application.py", "src/fava/core/__init__.py", "src/fava/core/_compat.py", "src/fava/core/charts.py", "src/fava/core/documents.py", "src/fava/core/extensions.py", "src/fava/core/ingest.py", "src/fava/core/tree.py", "src/fava/core/watcher.py", "src/fava/ext/auto_commit.py", "src/fava/json_api.py", "src/fava/serialisation.py", "src/fava/template_filters.py", "src/fava/util/__init__.py", "src/fava/util/typing.py", "tests/test_application.py", "tests/test_json_api.py"]}, {"commit_id": "bcf9fb115b300e510e2f09a17166bd29002a7780", "commit_date": "Fri Aug 5 17:14:05 2022 +0200", "commit_message": "remove deprecated FavaLedger attributes", "files_name": ["src/fava/core/__init__.py", "tests/test_core.py"]}, {"commit_id": "6f37698a597f2a54539312b1c18e8e5313877c57", "commit_date": "Fri Aug 5 17:16:29 2022 +0200", "commit_message": "ci: run old_deps in ci; increase min Beancount version", "files_name": [".github/workflows/test.yml", "setup.cfg", "tox.ini"]}, {"commit_id": "da9230b59d46fd4b4bfddf930ee128ae84d1bbaf", "commit_date": "Fri Aug 5 17:52:29 2022 +0200", "commit_message": "tests: add test for Pattern jsonification", "files_name": ["tests/test_core_fava_options.py"]}, {"commit_id": "c3ffeaea3d435d0c57a16643bce7dcef263504cf", "commit_date": "Wed Aug 17 20:00:38 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml"]}], "parents": [{"commit_id_before": "c9f3ee8cd35fb336a8c170187448d64b8f7aae92", "url_before": "https://api.github.com/repos/beancount/fava/commits/c9f3ee8cd35fb336a8c170187448d64b8f7aae92", "html_url_before": "https://github.com/beancount/fava/commit/c9f3ee8cd35fb336a8c170187448d64b8f7aae92"}], "details": [{"raw_url": "https://github.com/beancount/fava/raw/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711/src%2Ffava%2Fapplication.py", "code": "\"\"\"Fava's main WSGI application.\n\nwhen using Fava's WSGI app, make sure to set ``app.config['BEANCOUNT_FILES']``.\nTo start a simple server::\n\n    from fava.application import app\n    app.config['BEANCOUNT_FILES'] = ['/path/to/file.beancount']\n    app.run('localhost', 5000)\n\nAttributes:\n    app: An instance of :class:`flask.Flask`, this is Fava's WSGI application.\n\n\"\"\"\nfrom __future__ import annotations\n\nimport datetime\nimport functools\nimport threading\nfrom io import BytesIO\nfrom typing import Any\n\nimport flask\nimport markdown2  # type: ignore\nimport werkzeug.urls\nfrom beancount import __version__ as beancount_version\nfrom beancount.core.account import ACCOUNT_RE\nfrom beancount.utils.text_utils import replace_numbers\nfrom flask import abort\nfrom flask import Flask\nfrom flask import redirect\nfrom flask import render_template\nfrom flask import render_template_string\nfrom flask import request\nfrom flask import send_file\nfrom flask.wrappers import Response\nfrom flask_babel import Babel  # type: ignore\nfrom flask_babel import get_translations\nfrom markupsafe import Markup\nfrom werkzeug.utils import secure_filename\n\nfrom fava import __version__ as fava_version\nfrom fava import LANGUAGES\nfrom fava import template_filters\nfrom fava.context import g\nfrom fava.core import FavaLedger\nfrom fava.core.charts import FavaJSONEncoder\nfrom fava.core.documents import is_document_or_import_file\nfrom fava.help import HELP_PAGES\nfrom fava.helpers import FavaAPIException\nfrom fava.json_api import json_api\nfrom fava.serialisation import serialise\nfrom fava.util import next_key\nfrom fava.util import resource_path\nfrom fava.util import send_file_inline\nfrom fava.util import setup_logging\nfrom fava.util import slugify\nfrom fava.util.date import Interval\nfrom fava.util.excel import HAVE_EXCEL\n\n\nSTATIC_FOLDER = resource_path(\"static\")\nsetup_logging()\napp = Flask(  # pylint: disable=invalid-name\n    __name__,\n    template_folder=str(resource_path(\"templates\")),\n    static_folder=str(STATIC_FOLDER),\n)\napp.register_blueprint(json_api, url_prefix=\"/<bfile>/api\")\n\napp.json_encoder = FavaJSONEncoder  # type: ignore\njinja_extensions = app.jinja_options.setdefault(\"extensions\", [])\njinja_extensions.append(\"jinja2.ext.do\")\njinja_extensions.append(\"jinja2.ext.loopcontrols\")\napp.jinja_env.trim_blocks = True\napp.jinja_env.lstrip_blocks = True\n\napp.config[\"HAVE_EXCEL\"] = HAVE_EXCEL\napp.config[\"ACCOUNT_RE\"] = ACCOUNT_RE\n\nREPORTS = [\n    \"balance_sheet\",\n    \"commodities\",\n    \"documents\",\n    \"events\",\n    \"editor\",\n    \"errors\",\n    \"holdings\",\n    \"import\",\n    \"income_statement\",\n    \"journal\",\n    \"options\",\n    \"query\",\n    \"statistics\",\n    \"trial_balance\",\n]\n\n\nLOAD_FILE_LOCK = threading.Lock()\n\n\ndef ledger_slug(ledger: FavaLedger) -> str:\n    \"\"\"Generate URL slug for a ledger.\"\"\"\n    title_slug = slugify(ledger.options[\"title\"])\n    return title_slug or slugify(ledger.beancount_file_path)\n\n\ndef update_ledger_slugs(ledgers: list[FavaLedger]) -> None:\n    \"\"\"Update the dictionary mapping URL slugs to ledgers.\"\"\"\n    ledgers_by_slug: dict[str, FavaLedger] = {}\n    for ledger in ledgers:\n        slug = ledger_slug(ledger)\n        unique_key = next_key(slug, ledgers_by_slug)\n        ledgers_by_slug[unique_key] = ledger\n    app.config[\"LEDGERS\"] = ledgers_by_slug\n\n\ndef _load_file() -> None:\n    \"\"\"Load Beancount files.\n\n    This is run automatically on the first request.\n    \"\"\"\n    ledgers = [\n        FavaLedger(filepath) for filepath in app.config[\"BEANCOUNT_FILES\"]\n    ]\n    update_ledger_slugs(ledgers)\n\n\ndef get_locale() -> str | None:\n    \"\"\"Get locale.\n\n    Returns:\n        The locale that should be used for Babel. If not given as an option to\n        Fava, guess from browser.\n    \"\"\"\n    lang = g.ledger.fava_options.language\n    if lang is not None:\n        return lang\n    return request.accept_languages.best_match([\"en\"] + LANGUAGES)\n\n\nBABEL = Babel(app)\nBABEL.localeselector(get_locale)\n\n\nfor function in template_filters.FILTERS:\n    app.add_template_filter(function)  # type: ignore\napp.add_template_filter(serialise)\n\n\n@app.url_defaults\ndef _inject_filters(endpoint: str, values: dict[str, str | None]) -> None:\n    if \"bfile\" not in values and app.url_map.is_endpoint_expecting(\n        endpoint, \"bfile\"\n    ):\n        values[\"bfile\"] = g.beancount_file_slug\n    if endpoint in [\"static\", \"index\"]:\n        return\n    for name in [\"conversion\", \"interval\", \"account\", \"filter\", \"time\"]:\n        if name not in values:\n            values[name] = request.args.get(name)\n\n\ndef static_url(filename: str) -> str:\n    \"\"\"Return a static url with an mtime query string for cache busting.\"\"\"\n    file_path = STATIC_FOLDER / filename\n    try:\n        mtime = int(file_path.stat().st_mtime)\n    except FileNotFoundError:\n        mtime = 0\n    return url_for(\"static\", filename=filename, mtime=mtime)\n\n\nCACHED_URL_FOR = functools.lru_cache(2048)(flask.url_for)\n\n\ndef url_for(endpoint: str, **values: str | int) -> str:\n    \"\"\"A wrapper around flask.url_for that uses a cache.\"\"\"\n    _inject_filters(endpoint, values)\n    return CACHED_URL_FOR(endpoint, **values)\n\n\ndef url_for_source(**kwargs: str) -> str:\n    \"\"\"URL to source file (possibly link to external editor).\"\"\"\n    if g.ledger.fava_options.use_external_editor:\n        return (\n            f\"beancount://{kwargs.get('file_path')}\"\n            + f\"?lineno={kwargs.get('line', 1)}\"\n        )\n    return url_for(\"report\", report_name=\"editor\", **kwargs)\n\n\ndef translations() -> Any:\n    \"\"\"Get translations catalog.\"\"\"\n    # pylint: disable=protected-access\n    return get_translations()._catalog\n\n\napp.add_template_global(static_url, \"static_url\")\napp.add_template_global(datetime.date.today, \"today\")\napp.add_template_global(url_for, \"url_for\")\napp.add_template_global(url_for_source, \"url_for_source\")\napp.add_template_global(translations, \"translations\")\n\n\n@app.context_processor\ndef template_context() -> dict[str, FavaLedger]:\n    \"\"\"Inject variables into the template context.\"\"\"\n    return dict(ledger=g.ledger)\n\n\n@app.before_request\ndef _perform_global_filters() -> None:\n    if request.endpoint in (\"json_api.get_changed\", \"json_api.get_errors\"):\n        return\n    ledger = getattr(g, \"ledger\", None)\n    if ledger:\n        # check (and possibly reload) source file\n        if request.blueprint != \"json_api\":\n            ledger.changed()\n\n        g.filtered = ledger.get_filtered(\n            account=request.args.get(\"account\"),\n            filter=request.args.get(\"filter\"),\n            time=request.args.get(\"time\"),\n        )\n\n\n@app.after_request\ndef _incognito(\n    response: werkzeug.wrappers.Response,\n) -> werkzeug.wrappers.Response:\n    \"\"\"Replace all numbers with 'X'.\"\"\"\n    if app.config.get(\"INCOGNITO\") and response.content_type.startswith(\n        \"text/html\"\n    ):\n        is_editor = (\n            request.endpoint == \"report\"\n            and request.view_args is not None\n            and request.view_args[\"report_name\"] == \"editor\"\n        )\n        if not is_editor:\n            original_text = response.get_data(as_text=True)\n            response.set_data(replace_numbers(original_text))\n    return response\n\n\n@app.url_value_preprocessor\ndef _pull_beancount_file(_: str | None, values: dict[str, str] | None) -> None:\n    g.beancount_file_slug = values.pop(\"bfile\", None) if values else None\n    with LOAD_FILE_LOCK:\n        if not app.config.get(\"LEDGERS\"):\n            _load_file()\n    if g.beancount_file_slug:\n        if g.beancount_file_slug not in app.config[\"LEDGERS\"]:\n            if not any(\n                g.beancount_file_slug == ledger_slug(ledger)\n                for ledger in app.config[\"LEDGERS\"].values()\n            ):\n                abort(404)\n            # one of the file slugs changed, update the mapping\n            update_ledger_slugs(app.config[\"LEDGERS\"].values())\n        g.ledger = app.config[\"LEDGERS\"][g.beancount_file_slug]\n        g.conversion = request.args.get(\"conversion\", \"at_cost\")\n        g.interval = Interval.get(request.args.get(\"interval\", \"month\"))\n\n\n@app.errorhandler(FavaAPIException)\ndef fava_api_exception(error: FavaAPIException) -> str:\n    \"\"\"Handle API errors.\"\"\"\n    return render_template(\n        \"_layout.html\", page_title=\"Error\", content=error.message\n    )\n\n\n@app.route(\"/\")\n@app.route(\"/<bfile>/\")\ndef index() -> werkzeug.wrappers.Response:\n    \"\"\"Redirect to the Income Statement (of the given or first file).\"\"\"\n    if not g.beancount_file_slug:\n        g.beancount_file_slug = next(iter(app.config[\"LEDGERS\"]))\n    index_url = url_for(\"index\")\n    default_path = app.config[\"LEDGERS\"][\n        g.beancount_file_slug\n    ].fava_options.default_page\n    return redirect(f\"{index_url}{default_path}\")\n\n\n@app.route(\"/<bfile>/account/<name>/\")\n@app.route(\"/<bfile>/account/<name>/<subreport>/\")\ndef account(name: str, subreport: str = \"journal\") -> str:\n    \"\"\"The account report.\"\"\"\n    if subreport in [\"journal\", \"balances\", \"changes\"]:\n        return render_template(\n            \"account.html\", account_name=name, subreport=subreport\n        )\n    return abort(404)\n\n\n@app.route(\"/<bfile>/document/\", methods=[\"GET\"])\ndef document() -> Response:\n    \"\"\"Download a document.\"\"\"\n    filename = request.args.get(\"filename\")\n    if filename is None:\n        return abort(404)\n    if is_document_or_import_file(filename, g.ledger):\n        return send_file_inline(filename)\n    return abort(404)\n\n\n@app.route(\"/<bfile>/statement/\", methods=[\"GET\"])\ndef statement() -> Response:\n    \"\"\"Download a statement file.\"\"\"\n    entry_hash = request.args.get(\"entry_hash\", \"\")\n    key = request.args.get(\"key\", \"\")\n    document_path = g.ledger.statement_path(entry_hash, key)\n    return send_file_inline(document_path)\n\n\n@app.route(\"/<bfile>/holdings/by_<aggregation_key>/\")\ndef holdings_by(aggregation_key: str) -> str:\n    \"\"\"The holdings report.\"\"\"\n    if aggregation_key in [\"account\", \"currency\", \"cost_currency\"]:\n        return render_template(\n            \"_layout.html\",\n            active_page=\"holdings\",\n            aggregation_key=aggregation_key,\n        )\n    return abort(404)\n\n\n@app.route(\"/<bfile>/<report_name>/\")\ndef report(report_name: str) -> str:\n    \"\"\"Endpoint for most reports.\"\"\"\n    if report_name in REPORTS:\n        return render_template(\"_layout.html\", active_page=report_name)\n    return abort(404)\n\n\n@app.route(\"/<bfile>/extension/<report_name>/\")\ndef extension_report(report_name: str) -> str:\n    \"\"\"Endpoint for extension reports.\"\"\"\n    try:\n        template, extension = g.ledger.extensions.template_and_extension(\n            report_name\n        )\n        content = render_template_string(template, extension=extension)\n        return render_template(\n            \"_layout.html\", content=content, page_title=extension.report_title\n        )\n    except LookupError:\n        return abort(404)\n\n\n@app.route(\"/<bfile>/download-query/query_result.<result_format>\")\ndef download_query(result_format: str) -> Any:\n    \"\"\"Download a query result.\"\"\"\n    name, data = g.ledger.query_shell.query_to_file(\n        g.filtered.entries, request.args.get(\"query_string\", \"\"), result_format\n    )\n\n    filename = f\"{secure_filename(name.strip())}.{result_format}\"\n    return send_file(data, as_attachment=True, download_name=filename)\n\n\n@app.route(\"/<bfile>/download-journal/\")\ndef download_journal() -> Any:\n    \"\"\"Download a Journal file.\"\"\"\n    now = datetime.datetime.now().replace(microsecond=0)\n    filename = f\"journal_{now.isoformat()}.beancount\"\n    data = BytesIO(bytes(render_template(\"beancount_file\"), \"utf8\"))\n    return send_file(data, as_attachment=True, download_name=filename)\n\n\n@app.route(\"/<bfile>/help/\", defaults={\"page_slug\": \"_index\"})\n@app.route(\"/<bfile>/help/<string:page_slug>\")\ndef help_page(page_slug: str) -> str:\n    \"\"\"Fava's included documentation.\"\"\"\n    if page_slug not in HELP_PAGES:\n        abort(404)\n    html = markdown2.markdown_path(\n        (resource_path(\"help\") / (page_slug + \".md\")),\n        extras=[\"fenced-code-blocks\", \"tables\", \"header-ids\"],\n    )\n    return render_template(\n        \"_layout.html\",\n        active_page=\"help\",\n        page_slug=page_slug,\n        help_html=Markup(\n            render_template_string(\n                html,\n                beancount_version=beancount_version,\n                fava_version=fava_version,\n            )\n        ),\n        HELP_PAGES=HELP_PAGES,\n    )\n\n\n@app.route(\"/jump\")\ndef jump() -> werkzeug.wrappers.Response:\n    \"\"\"Redirect back to the referer, replacing some parameters.\n\n    This is useful for sidebar links, e.g. a link ``/jump?time=year``\n    would set the time filter to `year` on the current page.\n\n    When accessing ``/jump?param1=abc`` from\n    ``/example/page?param1=123&param2=456``, this view should redirect to\n    ``/example/page?param1=abc&param2=456``.\n\n    \"\"\"\n    url = werkzeug.urls.url_parse(request.referrer)\n    qs_dict = url.decode_query()\n    for key, values in request.args.lists():\n        if values == [\"\"]:\n            try:\n                del qs_dict[key]\n            except KeyError:\n                pass\n        else:\n            qs_dict.setlist(key, values)\n\n    redirect_url = url.replace(\n        query=werkzeug.urls.url_encode(qs_dict, sort=True)\n    )\n    return redirect(werkzeug.urls.url_unparse(redirect_url))\n", "code_before": "\"\"\"Fava's main WSGI application.\n\nwhen using Fava's WSGI app, make sure to set ``app.config['BEANCOUNT_FILES']``.\nTo start a simple server::\n\n    from fava.application import app\n    app.config['BEANCOUNT_FILES'] = ['/path/to/file.beancount']\n    app.run('localhost', 5000)\n\nAttributes:\n    app: An instance of :class:`flask.Flask`, this is Fava's WSGI application.\n\n\"\"\"\nfrom __future__ import annotations\n\nimport datetime\nimport functools\nimport threading\nfrom io import BytesIO\nfrom typing import Any\n\nimport flask\nimport markdown2  # type: ignore\nimport werkzeug.urls\nfrom beancount import __version__ as beancount_version\nfrom beancount.core.account import ACCOUNT_RE\nfrom beancount.utils.text_utils import replace_numbers\nfrom flask import abort\nfrom flask import Flask\nfrom flask import redirect\nfrom flask import render_template\nfrom flask import render_template_string\nfrom flask import request\nfrom flask import send_file\nfrom flask.wrappers import Response\nfrom flask_babel import Babel  # type: ignore\nfrom flask_babel import get_translations\nfrom werkzeug.utils import secure_filename\n\nfrom fava import __version__ as fava_version\nfrom fava import LANGUAGES\nfrom fava import template_filters\nfrom fava.context import g\nfrom fava.core import FavaLedger\nfrom fava.core.charts import FavaJSONEncoder\nfrom fava.core.documents import is_document_or_import_file\nfrom fava.help import HELP_PAGES\nfrom fava.helpers import FavaAPIException\nfrom fava.json_api import json_api\nfrom fava.serialisation import serialise\nfrom fava.util import next_key\nfrom fava.util import resource_path\nfrom fava.util import send_file_inline\nfrom fava.util import setup_logging\nfrom fava.util import slugify\nfrom fava.util.date import Interval\nfrom fava.util.excel import HAVE_EXCEL\n\n\nSTATIC_FOLDER = resource_path(\"static\")\nsetup_logging()\napp = Flask(  # pylint: disable=invalid-name\n    __name__,\n    template_folder=str(resource_path(\"templates\")),\n    static_folder=str(STATIC_FOLDER),\n)\napp.register_blueprint(json_api, url_prefix=\"/<bfile>/api\")\n\napp.json_encoder = FavaJSONEncoder  # type: ignore\njinja_extensions = app.jinja_options.setdefault(\"extensions\", [])\njinja_extensions.append(\"jinja2.ext.do\")\njinja_extensions.append(\"jinja2.ext.loopcontrols\")\napp.jinja_env.trim_blocks = True\napp.jinja_env.lstrip_blocks = True\n\napp.config[\"HAVE_EXCEL\"] = HAVE_EXCEL\napp.config[\"ACCOUNT_RE\"] = ACCOUNT_RE\n\nREPORTS = [\n    \"balance_sheet\",\n    \"commodities\",\n    \"documents\",\n    \"events\",\n    \"editor\",\n    \"errors\",\n    \"holdings\",\n    \"import\",\n    \"income_statement\",\n    \"journal\",\n    \"options\",\n    \"query\",\n    \"statistics\",\n    \"trial_balance\",\n]\n\n\nLOAD_FILE_LOCK = threading.Lock()\n\n\ndef ledger_slug(ledger: FavaLedger) -> str:\n    \"\"\"Generate URL slug for a ledger.\"\"\"\n    title_slug = slugify(ledger.options[\"title\"])\n    return title_slug or slugify(ledger.beancount_file_path)\n\n\ndef update_ledger_slugs(ledgers: list[FavaLedger]) -> None:\n    \"\"\"Update the dictionary mapping URL slugs to ledgers.\"\"\"\n    ledgers_by_slug: dict[str, FavaLedger] = {}\n    for ledger in ledgers:\n        slug = ledger_slug(ledger)\n        unique_key = next_key(slug, ledgers_by_slug)\n        ledgers_by_slug[unique_key] = ledger\n    app.config[\"LEDGERS\"] = ledgers_by_slug\n\n\ndef _load_file() -> None:\n    \"\"\"Load Beancount files.\n\n    This is run automatically on the first request.\n    \"\"\"\n    ledgers = [\n        FavaLedger(filepath) for filepath in app.config[\"BEANCOUNT_FILES\"]\n    ]\n    update_ledger_slugs(ledgers)\n\n\ndef get_locale() -> str | None:\n    \"\"\"Get locale.\n\n    Returns:\n        The locale that should be used for Babel. If not given as an option to\n        Fava, guess from browser.\n    \"\"\"\n    lang = g.ledger.fava_options.language\n    if lang is not None:\n        return lang\n    return request.accept_languages.best_match([\"en\"] + LANGUAGES)\n\n\nBABEL = Babel(app)\nBABEL.localeselector(get_locale)\n\n\nfor function in template_filters.FILTERS:\n    app.add_template_filter(function)  # type: ignore\napp.add_template_filter(serialise)\n\n\n@app.url_defaults\ndef _inject_filters(endpoint: str, values: dict[str, str | None]) -> None:\n    if \"bfile\" not in values and app.url_map.is_endpoint_expecting(\n        endpoint, \"bfile\"\n    ):\n        values[\"bfile\"] = g.beancount_file_slug\n    if endpoint in [\"static\", \"index\"]:\n        return\n    for name in [\"conversion\", \"interval\", \"account\", \"filter\", \"time\"]:\n        if name not in values:\n            values[name] = request.args.get(name)\n\n\ndef static_url(filename: str) -> str:\n    \"\"\"Return a static url with an mtime query string for cache busting.\"\"\"\n    file_path = STATIC_FOLDER / filename\n    try:\n        mtime = int(file_path.stat().st_mtime)\n    except FileNotFoundError:\n        mtime = 0\n    return url_for(\"static\", filename=filename, mtime=mtime)\n\n\nCACHED_URL_FOR = functools.lru_cache(2048)(flask.url_for)\n\n\ndef url_for(endpoint: str, **values: str | int) -> str:\n    \"\"\"A wrapper around flask.url_for that uses a cache.\"\"\"\n    _inject_filters(endpoint, values)\n    return CACHED_URL_FOR(endpoint, **values)\n\n\ndef url_for_source(**kwargs: str) -> str:\n    \"\"\"URL to source file (possibly link to external editor).\"\"\"\n    if g.ledger.fava_options.use_external_editor:\n        return (\n            f\"beancount://{kwargs.get('file_path')}\"\n            + f\"?lineno={kwargs.get('line', 1)}\"\n        )\n    return url_for(\"report\", report_name=\"editor\", **kwargs)\n\n\ndef translations() -> Any:\n    \"\"\"Get translations catalog.\"\"\"\n    # pylint: disable=protected-access\n    return get_translations()._catalog\n\n\napp.add_template_global(static_url, \"static_url\")\napp.add_template_global(datetime.date.today, \"today\")\napp.add_template_global(url_for, \"url_for\")\napp.add_template_global(url_for_source, \"url_for_source\")\napp.add_template_global(translations, \"translations\")\n\n\n@app.context_processor\ndef template_context() -> dict[str, FavaLedger]:\n    \"\"\"Inject variables into the template context.\"\"\"\n    return dict(ledger=g.ledger)\n\n\n@app.before_request\ndef _perform_global_filters() -> None:\n    if request.endpoint in (\"json_api.get_changed\", \"json_api.get_errors\"):\n        return\n    ledger = getattr(g, \"ledger\", None)\n    if ledger:\n        # check (and possibly reload) source file\n        if request.blueprint != \"json_api\":\n            ledger.changed()\n\n        g.filtered = ledger.get_filtered(\n            account=request.args.get(\"account\"),\n            filter=request.args.get(\"filter\"),\n            time=request.args.get(\"time\"),\n        )\n\n\n@app.after_request\ndef _incognito(\n    response: werkzeug.wrappers.Response,\n) -> werkzeug.wrappers.Response:\n    \"\"\"Replace all numbers with 'X'.\"\"\"\n    if app.config.get(\"INCOGNITO\") and response.content_type.startswith(\n        \"text/html\"\n    ):\n        is_editor = (\n            request.endpoint == \"report\"\n            and request.view_args is not None\n            and request.view_args[\"report_name\"] == \"editor\"\n        )\n        if not is_editor:\n            original_text = response.get_data(as_text=True)\n            response.set_data(replace_numbers(original_text))\n    return response\n\n\n@app.url_value_preprocessor\ndef _pull_beancount_file(_: str | None, values: dict[str, str] | None) -> None:\n    g.beancount_file_slug = values.pop(\"bfile\", None) if values else None\n    with LOAD_FILE_LOCK:\n        if not app.config.get(\"LEDGERS\"):\n            _load_file()\n    if g.beancount_file_slug:\n        if g.beancount_file_slug not in app.config[\"LEDGERS\"]:\n            if not any(\n                g.beancount_file_slug == ledger_slug(ledger)\n                for ledger in app.config[\"LEDGERS\"].values()\n            ):\n                abort(404)\n            # one of the file slugs changed, update the mapping\n            update_ledger_slugs(app.config[\"LEDGERS\"].values())\n        g.ledger = app.config[\"LEDGERS\"][g.beancount_file_slug]\n        g.conversion = request.args.get(\"conversion\", \"at_cost\")\n        g.interval = Interval.get(request.args.get(\"interval\", \"month\"))\n\n\n@app.errorhandler(FavaAPIException)\ndef fava_api_exception(error: FavaAPIException) -> str:\n    \"\"\"Handle API errors.\"\"\"\n    return render_template(\n        \"_layout.html\", page_title=\"Error\", content=error.message\n    )\n\n\n@app.route(\"/\")\n@app.route(\"/<bfile>/\")\ndef index() -> werkzeug.wrappers.Response:\n    \"\"\"Redirect to the Income Statement (of the given or first file).\"\"\"\n    if not g.beancount_file_slug:\n        g.beancount_file_slug = next(iter(app.config[\"LEDGERS\"]))\n    index_url = url_for(\"index\")\n    default_path = app.config[\"LEDGERS\"][\n        g.beancount_file_slug\n    ].fava_options.default_page\n    return redirect(f\"{index_url}{default_path}\")\n\n\n@app.route(\"/<bfile>/account/<name>/\")\n@app.route(\"/<bfile>/account/<name>/<subreport>/\")\ndef account(name: str, subreport: str = \"journal\") -> str:\n    \"\"\"The account report.\"\"\"\n    if subreport in [\"journal\", \"balances\", \"changes\"]:\n        return render_template(\n            \"account.html\", account_name=name, subreport=subreport\n        )\n    return abort(404)\n\n\n@app.route(\"/<bfile>/document/\", methods=[\"GET\"])\ndef document() -> Response:\n    \"\"\"Download a document.\"\"\"\n    filename = request.args.get(\"filename\")\n    if filename is None:\n        return abort(404)\n    if is_document_or_import_file(filename, g.ledger):\n        return send_file_inline(filename)\n    return abort(404)\n\n\n@app.route(\"/<bfile>/statement/\", methods=[\"GET\"])\ndef statement() -> Response:\n    \"\"\"Download a statement file.\"\"\"\n    entry_hash = request.args.get(\"entry_hash\", \"\")\n    key = request.args.get(\"key\", \"\")\n    document_path = g.ledger.statement_path(entry_hash, key)\n    return send_file_inline(document_path)\n\n\n@app.route(\"/<bfile>/holdings/by_<aggregation_key>/\")\ndef holdings_by(aggregation_key: str) -> str:\n    \"\"\"The holdings report.\"\"\"\n    if aggregation_key in [\"account\", \"currency\", \"cost_currency\"]:\n        return render_template(\n            \"_layout.html\",\n            active_page=\"holdings\",\n            aggregation_key=aggregation_key,\n        )\n    return abort(404)\n\n\n@app.route(\"/<bfile>/<report_name>/\")\ndef report(report_name: str) -> str:\n    \"\"\"Endpoint for most reports.\"\"\"\n    if report_name in REPORTS:\n        return render_template(\"_layout.html\", active_page=report_name)\n    return abort(404)\n\n\n@app.route(\"/<bfile>/extension/<report_name>/\")\ndef extension_report(report_name: str) -> str:\n    \"\"\"Endpoint for extension reports.\"\"\"\n    try:\n        template, extension = g.ledger.extensions.template_and_extension(\n            report_name\n        )\n        content = render_template_string(template, extension=extension)\n        return render_template(\n            \"_layout.html\", content=content, page_title=extension.report_title\n        )\n    except LookupError:\n        return abort(404)\n\n\n@app.route(\"/<bfile>/download-query/query_result.<result_format>\")\ndef download_query(result_format: str) -> Any:\n    \"\"\"Download a query result.\"\"\"\n    name, data = g.ledger.query_shell.query_to_file(\n        g.filtered.entries, request.args.get(\"query_string\", \"\"), result_format\n    )\n\n    filename = f\"{secure_filename(name.strip())}.{result_format}\"\n    return send_file(data, as_attachment=True, download_name=filename)\n\n\n@app.route(\"/<bfile>/download-journal/\")\ndef download_journal() -> Any:\n    \"\"\"Download a Journal file.\"\"\"\n    now = datetime.datetime.now().replace(microsecond=0)\n    filename = f\"journal_{now.isoformat()}.beancount\"\n    data = BytesIO(bytes(render_template(\"beancount_file\"), \"utf8\"))\n    return send_file(data, as_attachment=True, download_name=filename)\n\n\n@app.route(\"/<bfile>/help/\", defaults={\"page_slug\": \"_index\"})\n@app.route(\"/<bfile>/help/<string:page_slug>\")\ndef help_page(page_slug: str) -> str:\n    \"\"\"Fava's included documentation.\"\"\"\n    if page_slug not in HELP_PAGES:\n        abort(404)\n    html = markdown2.markdown_path(\n        (resource_path(\"help\") / (page_slug + \".md\")),\n        extras=[\"fenced-code-blocks\", \"tables\", \"header-ids\"],\n    )\n    return render_template(\n        \"_layout.html\",\n        active_page=\"help\",\n        page_slug=page_slug,\n        help_html=render_template_string(\n            html,\n            beancount_version=beancount_version,\n            fava_version=fava_version,\n        ),\n        HELP_PAGES=HELP_PAGES,\n    )\n\n\n@app.route(\"/jump\")\ndef jump() -> werkzeug.wrappers.Response:\n    \"\"\"Redirect back to the referer, replacing some parameters.\n\n    This is useful for sidebar links, e.g. a link ``/jump?time=year``\n    would set the time filter to `year` on the current page.\n\n    When accessing ``/jump?param1=abc`` from\n    ``/example/page?param1=123&param2=456``, this view should redirect to\n    ``/example/page?param1=abc&param2=456``.\n\n    \"\"\"\n    url = werkzeug.urls.url_parse(request.referrer)\n    qs_dict = url.decode_query()\n    for key, values in request.args.lists():\n        if values == [\"\"]:\n            try:\n                del qs_dict[key]\n            except KeyError:\n                pass\n        else:\n            qs_dict.setlist(key, values)\n\n    redirect_url = url.replace(\n        query=werkzeug.urls.url_encode(qs_dict, sort=True)\n    )\n    return redirect(werkzeug.urls.url_unparse(redirect_url))\n", "patch": "@@ -35,6 +35,7 @@\n from flask.wrappers import Response\n from flask_babel import Babel  # type: ignore\n from flask_babel import get_translations\n+from markupsafe import Markup\n from werkzeug.utils import secure_filename\n \n from fava import __version__ as fava_version\n@@ -384,10 +385,12 @@ def help_page(page_slug: str) -> str:\n         \"_layout.html\",\n         active_page=\"help\",\n         page_slug=page_slug,\n-        help_html=render_template_string(\n-            html,\n-            beancount_version=beancount_version,\n-            fava_version=fava_version,\n+        help_html=Markup(\n+            render_template_string(\n+                html,\n+                beancount_version=beancount_version,\n+                fava_version=fava_version,\n+            )\n         ),\n         HELP_PAGES=HELP_PAGES,\n     )", "file_path": "files/2022_7/30", "file_language": "py", "file_name": "src/fava/application.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 0, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.flask.security.audit.render-template-string.render-template-string                      \n          Found a template created with string formatting. This is susceptible to server-side template\n          injection and cross-site scripting attacks.                                                 \n          Details: https://sg.run/8yjE                                                                \n\n          387\u2506 help_html=render_template_string(\n          388\u2506     html,\n          389\u2506     beancount_version=beancount_version,\n          390\u2506     fava_version=fava_version,          391\u2506 ),"]]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/beancount/fava/raw/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711/src%2Ffava%2Fcore%2Ffile.py", "code": "\"\"\"Reading/writing Beancount files.\"\"\"\nfrom __future__ import annotations\n\nimport datetime\nimport re\nimport threading\nfrom codecs import decode\nfrom codecs import encode\nfrom hashlib import sha256\nfrom operator import attrgetter\nfrom typing import Generator\nfrom typing import TYPE_CHECKING\n\nfrom beancount.core.data import Balance\nfrom beancount.core.data import Directive\nfrom beancount.core.data import Entries\nfrom beancount.core.data import SORT_ORDER\nfrom beancount.core.data import Transaction\nfrom beancount.core.flags import FLAG_CONVERSIONS\nfrom beancount.core.flags import FLAG_MERGING\nfrom beancount.core.flags import FLAG_PADDING\nfrom beancount.core.flags import FLAG_SUMMARIZE\nfrom beancount.core.flags import FLAG_TRANSFER\nfrom beancount.parser.printer import format_entry  # type: ignore\nfrom markupsafe import Markup\n\nfrom fava.core._compat import FLAG_RETURNS\nfrom fava.core._compat import FLAG_UNREALIZED\nfrom fava.core.accounts import get_entry_accounts\nfrom fava.core.fava_options import InsertEntryOption\nfrom fava.core.misc import align\nfrom fava.core.module_base import FavaModule\nfrom fava.helpers import FavaAPIException\nfrom fava.util import next_key\n\nif TYPE_CHECKING:  # pragma: no cover\n    from fava.core import FavaLedger\n\n#: The flags to exclude when rendering entries.\nEXCL_FLAGS = {\n    FLAG_PADDING,  # P\n    FLAG_SUMMARIZE,  # S\n    FLAG_TRANSFER,  # T\n    FLAG_CONVERSIONS,  # C\n    FLAG_UNREALIZED,  # U\n    FLAG_RETURNS,  # R\n    FLAG_MERGING,  # M\n}\n\n\ndef sha256_str(val: str) -> str:\n    \"\"\"Hash a string.\"\"\"\n    return sha256(encode(val, encoding=\"utf-8\")).hexdigest()\n\n\nclass FileModule(FavaModule):\n    \"\"\"Functions related to reading/writing to Beancount files.\"\"\"\n\n    def __init__(self, ledger: FavaLedger) -> None:\n        super().__init__(ledger)\n        self.lock = threading.Lock()\n\n    def get_source(self, path: str) -> tuple[str, str]:\n        \"\"\"Get source files.\n\n        Args:\n            path: The path of the file.\n\n        Returns:\n            A string with the file contents and the `sha256sum` of the file.\n\n        Raises:\n            FavaAPIException: If the file at `path` is not one of the\n                source files.\n        \"\"\"\n        if path not in self.ledger.options[\"include\"]:\n            raise FavaAPIException(\"Trying to read a non-source file\")\n\n        with open(path, mode=\"rb\") as file:\n            contents = file.read()\n\n        sha256sum = sha256(contents).hexdigest()\n        source = decode(contents)\n\n        return source, sha256sum\n\n    def set_source(self, path: str, source: str, sha256sum: str) -> str:\n        \"\"\"Write to source file.\n\n        Args:\n            path: The path of the file.\n            source: A string with the file contents.\n            sha256sum: Hash of the file.\n\n        Returns:\n            The `sha256sum` of the updated file.\n\n        Raises:\n            FavaAPIException: If the file at `path` is not one of the\n                source files or if the file was changed externally.\n        \"\"\"\n        with self.lock:\n            _, original_sha256sum = self.get_source(path)\n            if original_sha256sum != sha256sum:\n                raise FavaAPIException(\"The file changed externally.\")\n\n            contents = encode(source, encoding=\"utf-8\")\n            with open(path, \"w+b\") as file:\n                file.write(contents)\n\n            self.ledger.extensions.after_write_source(path, source)\n            self.ledger.load_file()\n\n            return sha256(contents).hexdigest()\n\n    def insert_metadata(\n        self, entry_hash: str, basekey: str, value: str\n    ) -> None:\n        \"\"\"Insert metadata into a file at lineno.\n\n        Also, prevent duplicate keys.\n        \"\"\"\n        with self.lock:\n            self.ledger.changed()\n            entry: Directive = self.ledger.get_entry(entry_hash)\n            key = next_key(basekey, entry.meta)\n            indent = self.ledger.fava_options.indent\n            insert_metadata_in_file(\n                entry.meta[\"filename\"],\n                entry.meta[\"lineno\"],\n                indent,\n                key,\n                value,\n            )\n            self.ledger.extensions.after_insert_metadata(entry, key, value)\n\n    def save_entry_slice(\n        self, entry_hash: str, source_slice: str, sha256sum: str\n    ) -> str:\n        \"\"\"Save slice of the source file for an entry.\n\n        Args:\n            entry_hash: An entry.\n            source_slice: The lines that the entry should be replaced with.\n            sha256sum: The sha256sum of the current lines of the entry.\n\n        Returns:\n            The `sha256sum` of the new lines of the entry.\n        Raises:\n            FavaAPIException: If the entry is not found or the file changed.\n        \"\"\"\n        with self.lock:\n            entry = self.ledger.get_entry(entry_hash)\n            ret = save_entry_slice(entry, source_slice, sha256sum)\n            self.ledger.extensions.after_entry_modified(entry, source_slice)\n            return ret\n\n    def insert_entries(self, entries: Entries) -> None:\n        \"\"\"Insert entries.\n\n        Args:\n            entries: A list of entries.\n        \"\"\"\n        with self.lock:\n            self.ledger.changed()\n            fava_options = self.ledger.fava_options\n            for entry in sorted(entries, key=incomplete_sortkey):\n                insert_options = fava_options.insert_entry\n                currency_column = fava_options.currency_column\n                indent = fava_options.indent\n                fava_options.insert_entry = insert_entry(\n                    entry,\n                    self.ledger.beancount_file_path,\n                    insert_options,\n                    currency_column,\n                    indent,\n                )\n                self.ledger.extensions.after_insert_entry(entry)\n\n    def render_entries(\n        self, entries: Entries\n    ) -> Generator[Markup, None, None]:\n        \"\"\"Return entries in Beancount format.\n\n        Only renders :class:`.Balance` and :class:`.Transaction`.\n\n        Args:\n            entries: A list of entries.\n\n        Yields:\n            The entries rendered in Beancount format.\n        \"\"\"\n        indent = self.ledger.fava_options.indent\n        for entry in entries:\n            if isinstance(entry, (Balance, Transaction)):\n                if isinstance(entry, Transaction) and entry.flag in EXCL_FLAGS:\n                    continue\n                try:\n                    yield Markup(get_entry_slice(entry)[0] + \"\\n\")\n                except (KeyError, FileNotFoundError):\n                    yield Markup(\n                        _format_entry(\n                            entry,\n                            self.ledger.fava_options.currency_column,\n                            indent,\n                        )\n                    )\n\n\ndef incomplete_sortkey(entry: Directive) -> tuple[datetime.date, int]:\n    \"\"\"Sortkey for entries that might have incomplete metadata.\"\"\"\n    return (entry.date, SORT_ORDER.get(type(entry), 0))\n\n\ndef insert_metadata_in_file(\n    filename: str, lineno: int, indent: int, key: str, value: str\n) -> None:\n    \"\"\"Inserts the specified metadata in the file below lineno, taking into\n    account the whitespace in front of the line that lineno.\"\"\"\n    with open(filename, encoding=\"utf-8\") as file:\n        contents = file.readlines()\n\n    contents.insert(lineno, f'{\" \" * indent}{key}: \"{value}\"\\n')\n\n    with open(filename, \"w\", encoding=\"utf-8\") as file:\n        file.write(\"\".join(contents))\n\n\ndef find_entry_lines(lines: list[str], lineno: int) -> list[str]:\n    \"\"\"Lines of entry starting at lineno.\n\n    Args:\n        lines: A list of lines.\n        lineno: The 0-based line-index to start at.\n    \"\"\"\n    entry_lines = [lines[lineno]]\n    while True:\n        lineno += 1\n        try:\n            line = lines[lineno]\n        except IndexError:\n            return entry_lines\n        if not line.strip() or re.match(r\"\\S\", line[0]):\n            return entry_lines\n        entry_lines.append(line)\n\n\ndef get_entry_slice(entry: Directive) -> tuple[str, str]:\n    \"\"\"Get slice of the source file for an entry.\n\n    Args:\n        entry: An entry.\n\n    Returns:\n        A string containing the lines of the entry and the `sha256sum` of\n        these lines.\n    \"\"\"\n    with open(entry.meta[\"filename\"], encoding=\"utf-8\") as file:\n        lines = file.readlines()\n\n    entry_lines = find_entry_lines(lines, entry.meta[\"lineno\"] - 1)\n    entry_source = \"\".join(entry_lines).rstrip(\"\\n\")\n\n    return entry_source, sha256_str(entry_source)\n\n\ndef save_entry_slice(\n    entry: Directive, source_slice: str, sha256sum: str\n) -> str:\n    \"\"\"Save slice of the source file for an entry.\n\n    Args:\n        entry: An entry.\n        source_slice: The lines that the entry should be replaced with.\n        sha256sum: The sha256sum of the current lines of the entry.\n\n    Returns:\n        The `sha256sum` of the new lines of the entry.\n\n    Raises:\n        FavaAPIException: If the file at `path` is not one of the\n            source files.\n    \"\"\"\n\n    with open(entry.meta[\"filename\"], encoding=\"utf-8\") as file:\n        lines = file.readlines()\n\n    first_entry_line = entry.meta[\"lineno\"] - 1\n    entry_lines = find_entry_lines(lines, first_entry_line)\n    entry_source = \"\".join(entry_lines).rstrip(\"\\n\")\n    if sha256_str(entry_source) != sha256sum:\n        raise FavaAPIException(\"The file changed externally.\")\n\n    lines = (\n        lines[:first_entry_line]\n        + [source_slice + \"\\n\"]\n        + lines[first_entry_line + len(entry_lines) :]\n    )\n    with open(entry.meta[\"filename\"], \"w\", encoding=\"utf-8\") as file:\n        file.writelines(lines)\n\n    return sha256_str(source_slice)\n\n\ndef insert_entry(\n    entry: Directive,\n    default_filename: str,\n    insert_options: list[InsertEntryOption],\n    currency_column: int,\n    indent: int,\n) -> list[InsertEntryOption]:\n    \"\"\"Insert an entry.\n\n    Args:\n        entry: An entry.\n        default_filename: The default file to insert into if no option matches.\n        insert_options: Insert options.\n        currency_column: The column to align currencies at.\n        indent: Number of indent spaces.\n\n    Returns:\n        A list of updated insert options.\n    \"\"\"\n    filename, lineno = find_insert_position(\n        entry, insert_options, default_filename\n    )\n    content = _format_entry(entry, currency_column, indent)\n\n    with open(filename, encoding=\"utf-8\") as file:\n        contents = file.readlines()\n\n    if lineno is None:\n        # Appending\n        contents += \"\\n\" + content\n    else:\n        contents.insert(lineno, content + \"\\n\")\n\n    with open(filename, \"w\", encoding=\"utf-8\") as file:\n        file.writelines(contents)\n\n    if lineno is None:\n        return insert_options\n\n    added_lines = content.count(\"\\n\") + 1\n    return [\n        option._replace(lineno=option.lineno + added_lines)\n        if option.filename == filename and option.lineno > lineno\n        else option\n        for option in insert_options\n    ]\n\n\ndef _format_entry(entry: Directive, currency_column: int, indent: int) -> str:\n    \"\"\"Wrapper that strips unnecessary whitespace from format_entry.\"\"\"\n    meta = {\n        key: entry.meta[key] for key in entry.meta if not key.startswith(\"_\")\n    }\n    entry = entry._replace(meta=meta)\n    string = align(format_entry(entry, prefix=\" \" * indent), currency_column)\n    string = string.replace(\"<class 'beancount.core.number.MISSING'>\", \"\")\n    return \"\\n\".join(line.rstrip() for line in string.split(\"\\n\"))\n\n\ndef find_insert_position(\n    entry: Directive,\n    insert_options: list[InsertEntryOption],\n    default_filename: str,\n) -> tuple[str, int | None]:\n    \"\"\"Find insert position for an entry.\n\n    Args:\n        entry: An entry.\n        insert_options: A list of InsertOption.\n        default_filename: The default file to insert into if no option matches.\n\n    Returns:\n        A tuple of the filename and the line number.\n    \"\"\"\n\n    # Get the list of accounts that should be considered for the entry.\n    # For transactions, we want the reversed list of posting accounts.\n    accounts = get_entry_accounts(entry)\n\n    # Make no assumptions about the order of insert_options entries and instead\n    # sort them ourselves (by descending dates)\n    insert_options = sorted(\n        insert_options, key=attrgetter(\"date\"), reverse=True\n    )\n\n    for account in accounts:\n        for insert_option in insert_options:\n            # Only consider InsertOptions before the entry date.\n            if insert_option.date >= entry.date:\n                continue\n            if insert_option.re.match(account):\n                return (insert_option.filename, insert_option.lineno - 1)\n\n    return (default_filename, None)\n", "code_before": "\"\"\"Reading/writing Beancount files.\"\"\"\nfrom __future__ import annotations\n\nimport datetime\nimport re\nimport threading\nfrom codecs import decode\nfrom codecs import encode\nfrom hashlib import sha256\nfrom operator import attrgetter\nfrom typing import Generator\nfrom typing import TYPE_CHECKING\n\nfrom beancount.core.data import Balance\nfrom beancount.core.data import Directive\nfrom beancount.core.data import Entries\nfrom beancount.core.data import SORT_ORDER\nfrom beancount.core.data import Transaction\nfrom beancount.core.flags import FLAG_CONVERSIONS\nfrom beancount.core.flags import FLAG_MERGING\nfrom beancount.core.flags import FLAG_PADDING\nfrom beancount.core.flags import FLAG_SUMMARIZE\nfrom beancount.core.flags import FLAG_TRANSFER\nfrom beancount.parser.printer import format_entry  # type: ignore\n\nfrom fava.core._compat import FLAG_RETURNS\nfrom fava.core._compat import FLAG_UNREALIZED\nfrom fava.core.accounts import get_entry_accounts\nfrom fava.core.fava_options import InsertEntryOption\nfrom fava.core.misc import align\nfrom fava.core.module_base import FavaModule\nfrom fava.helpers import FavaAPIException\nfrom fava.util import next_key\n\nif TYPE_CHECKING:  # pragma: no cover\n    from fava.core import FavaLedger\n\n#: The flags to exclude when rendering entries.\nEXCL_FLAGS = {\n    FLAG_PADDING,  # P\n    FLAG_SUMMARIZE,  # S\n    FLAG_TRANSFER,  # T\n    FLAG_CONVERSIONS,  # C\n    FLAG_UNREALIZED,  # U\n    FLAG_RETURNS,  # R\n    FLAG_MERGING,  # M\n}\n\n\ndef sha256_str(val: str) -> str:\n    \"\"\"Hash a string.\"\"\"\n    return sha256(encode(val, encoding=\"utf-8\")).hexdigest()\n\n\nclass FileModule(FavaModule):\n    \"\"\"Functions related to reading/writing to Beancount files.\"\"\"\n\n    def __init__(self, ledger: FavaLedger) -> None:\n        super().__init__(ledger)\n        self.lock = threading.Lock()\n\n    def get_source(self, path: str) -> tuple[str, str]:\n        \"\"\"Get source files.\n\n        Args:\n            path: The path of the file.\n\n        Returns:\n            A string with the file contents and the `sha256sum` of the file.\n\n        Raises:\n            FavaAPIException: If the file at `path` is not one of the\n                source files.\n        \"\"\"\n        if path not in self.ledger.options[\"include\"]:\n            raise FavaAPIException(\"Trying to read a non-source file\")\n\n        with open(path, mode=\"rb\") as file:\n            contents = file.read()\n\n        sha256sum = sha256(contents).hexdigest()\n        source = decode(contents)\n\n        return source, sha256sum\n\n    def set_source(self, path: str, source: str, sha256sum: str) -> str:\n        \"\"\"Write to source file.\n\n        Args:\n            path: The path of the file.\n            source: A string with the file contents.\n            sha256sum: Hash of the file.\n\n        Returns:\n            The `sha256sum` of the updated file.\n\n        Raises:\n            FavaAPIException: If the file at `path` is not one of the\n                source files or if the file was changed externally.\n        \"\"\"\n        with self.lock:\n            _, original_sha256sum = self.get_source(path)\n            if original_sha256sum != sha256sum:\n                raise FavaAPIException(\"The file changed externally.\")\n\n            contents = encode(source, encoding=\"utf-8\")\n            with open(path, \"w+b\") as file:\n                file.write(contents)\n\n            self.ledger.extensions.after_write_source(path, source)\n            self.ledger.load_file()\n\n            return sha256(contents).hexdigest()\n\n    def insert_metadata(\n        self, entry_hash: str, basekey: str, value: str\n    ) -> None:\n        \"\"\"Insert metadata into a file at lineno.\n\n        Also, prevent duplicate keys.\n        \"\"\"\n        with self.lock:\n            self.ledger.changed()\n            entry: Directive = self.ledger.get_entry(entry_hash)\n            key = next_key(basekey, entry.meta)\n            indent = self.ledger.fava_options.indent\n            insert_metadata_in_file(\n                entry.meta[\"filename\"],\n                entry.meta[\"lineno\"],\n                indent,\n                key,\n                value,\n            )\n            self.ledger.extensions.after_insert_metadata(entry, key, value)\n\n    def save_entry_slice(\n        self, entry_hash: str, source_slice: str, sha256sum: str\n    ) -> str:\n        \"\"\"Save slice of the source file for an entry.\n\n        Args:\n            entry_hash: An entry.\n            source_slice: The lines that the entry should be replaced with.\n            sha256sum: The sha256sum of the current lines of the entry.\n\n        Returns:\n            The `sha256sum` of the new lines of the entry.\n        Raises:\n            FavaAPIException: If the entry is not found or the file changed.\n        \"\"\"\n        with self.lock:\n            entry = self.ledger.get_entry(entry_hash)\n            ret = save_entry_slice(entry, source_slice, sha256sum)\n            self.ledger.extensions.after_entry_modified(entry, source_slice)\n            return ret\n\n    def insert_entries(self, entries: Entries) -> None:\n        \"\"\"Insert entries.\n\n        Args:\n            entries: A list of entries.\n        \"\"\"\n        with self.lock:\n            self.ledger.changed()\n            fava_options = self.ledger.fava_options\n            for entry in sorted(entries, key=incomplete_sortkey):\n                insert_options = fava_options.insert_entry\n                currency_column = fava_options.currency_column\n                indent = fava_options.indent\n                fava_options.insert_entry = insert_entry(\n                    entry,\n                    self.ledger.beancount_file_path,\n                    insert_options,\n                    currency_column,\n                    indent,\n                )\n                self.ledger.extensions.after_insert_entry(entry)\n\n    def render_entries(self, entries: Entries) -> Generator[str, None, None]:\n        \"\"\"Return entries in Beancount format.\n\n        Only renders :class:`.Balance` and :class:`.Transaction`.\n\n        Args:\n            entries: A list of entries.\n\n        Yields:\n            The entries rendered in Beancount format.\n        \"\"\"\n        indent = self.ledger.fava_options.indent\n        for entry in entries:\n            if isinstance(entry, (Balance, Transaction)):\n                if isinstance(entry, Transaction) and entry.flag in EXCL_FLAGS:\n                    continue\n                try:\n                    yield get_entry_slice(entry)[0] + \"\\n\"\n                except (KeyError, FileNotFoundError):\n                    yield _format_entry(\n                        entry,\n                        self.ledger.fava_options.currency_column,\n                        indent,\n                    )\n\n\ndef incomplete_sortkey(entry: Directive) -> tuple[datetime.date, int]:\n    \"\"\"Sortkey for entries that might have incomplete metadata.\"\"\"\n    return (entry.date, SORT_ORDER.get(type(entry), 0))\n\n\ndef insert_metadata_in_file(\n    filename: str, lineno: int, indent: int, key: str, value: str\n) -> None:\n    \"\"\"Inserts the specified metadata in the file below lineno, taking into\n    account the whitespace in front of the line that lineno.\"\"\"\n    with open(filename, encoding=\"utf-8\") as file:\n        contents = file.readlines()\n\n    contents.insert(lineno, f'{\" \" * indent}{key}: \"{value}\"\\n')\n\n    with open(filename, \"w\", encoding=\"utf-8\") as file:\n        file.write(\"\".join(contents))\n\n\ndef find_entry_lines(lines: list[str], lineno: int) -> list[str]:\n    \"\"\"Lines of entry starting at lineno.\n\n    Args:\n        lines: A list of lines.\n        lineno: The 0-based line-index to start at.\n    \"\"\"\n    entry_lines = [lines[lineno]]\n    while True:\n        lineno += 1\n        try:\n            line = lines[lineno]\n        except IndexError:\n            return entry_lines\n        if not line.strip() or re.match(r\"\\S\", line[0]):\n            return entry_lines\n        entry_lines.append(line)\n\n\ndef get_entry_slice(entry: Directive) -> tuple[str, str]:\n    \"\"\"Get slice of the source file for an entry.\n\n    Args:\n        entry: An entry.\n\n    Returns:\n        A string containing the lines of the entry and the `sha256sum` of\n        these lines.\n    \"\"\"\n    with open(entry.meta[\"filename\"], encoding=\"utf-8\") as file:\n        lines = file.readlines()\n\n    entry_lines = find_entry_lines(lines, entry.meta[\"lineno\"] - 1)\n    entry_source = \"\".join(entry_lines).rstrip(\"\\n\")\n\n    return entry_source, sha256_str(entry_source)\n\n\ndef save_entry_slice(\n    entry: Directive, source_slice: str, sha256sum: str\n) -> str:\n    \"\"\"Save slice of the source file for an entry.\n\n    Args:\n        entry: An entry.\n        source_slice: The lines that the entry should be replaced with.\n        sha256sum: The sha256sum of the current lines of the entry.\n\n    Returns:\n        The `sha256sum` of the new lines of the entry.\n\n    Raises:\n        FavaAPIException: If the file at `path` is not one of the\n            source files.\n    \"\"\"\n\n    with open(entry.meta[\"filename\"], encoding=\"utf-8\") as file:\n        lines = file.readlines()\n\n    first_entry_line = entry.meta[\"lineno\"] - 1\n    entry_lines = find_entry_lines(lines, first_entry_line)\n    entry_source = \"\".join(entry_lines).rstrip(\"\\n\")\n    if sha256_str(entry_source) != sha256sum:\n        raise FavaAPIException(\"The file changed externally.\")\n\n    lines = (\n        lines[:first_entry_line]\n        + [source_slice + \"\\n\"]\n        + lines[first_entry_line + len(entry_lines) :]\n    )\n    with open(entry.meta[\"filename\"], \"w\", encoding=\"utf-8\") as file:\n        file.writelines(lines)\n\n    return sha256_str(source_slice)\n\n\ndef insert_entry(\n    entry: Directive,\n    default_filename: str,\n    insert_options: list[InsertEntryOption],\n    currency_column: int,\n    indent: int,\n) -> list[InsertEntryOption]:\n    \"\"\"Insert an entry.\n\n    Args:\n        entry: An entry.\n        default_filename: The default file to insert into if no option matches.\n        insert_options: Insert options.\n        currency_column: The column to align currencies at.\n        indent: Number of indent spaces.\n\n    Returns:\n        A list of updated insert options.\n    \"\"\"\n    filename, lineno = find_insert_position(\n        entry, insert_options, default_filename\n    )\n    content = _format_entry(entry, currency_column, indent)\n\n    with open(filename, encoding=\"utf-8\") as file:\n        contents = file.readlines()\n\n    if lineno is None:\n        # Appending\n        contents += \"\\n\" + content\n    else:\n        contents.insert(lineno, content + \"\\n\")\n\n    with open(filename, \"w\", encoding=\"utf-8\") as file:\n        file.writelines(contents)\n\n    if lineno is None:\n        return insert_options\n\n    added_lines = content.count(\"\\n\") + 1\n    return [\n        option._replace(lineno=option.lineno + added_lines)\n        if option.filename == filename and option.lineno > lineno\n        else option\n        for option in insert_options\n    ]\n\n\ndef _format_entry(entry: Directive, currency_column: int, indent: int) -> str:\n    \"\"\"Wrapper that strips unnecessary whitespace from format_entry.\"\"\"\n    meta = {\n        key: entry.meta[key] for key in entry.meta if not key.startswith(\"_\")\n    }\n    entry = entry._replace(meta=meta)\n    string = align(format_entry(entry, prefix=\" \" * indent), currency_column)\n    string = string.replace(\"<class 'beancount.core.number.MISSING'>\", \"\")\n    return \"\\n\".join(line.rstrip() for line in string.split(\"\\n\"))\n\n\ndef find_insert_position(\n    entry: Directive,\n    insert_options: list[InsertEntryOption],\n    default_filename: str,\n) -> tuple[str, int | None]:\n    \"\"\"Find insert position for an entry.\n\n    Args:\n        entry: An entry.\n        insert_options: A list of InsertOption.\n        default_filename: The default file to insert into if no option matches.\n\n    Returns:\n        A tuple of the filename and the line number.\n    \"\"\"\n\n    # Get the list of accounts that should be considered for the entry.\n    # For transactions, we want the reversed list of posting accounts.\n    accounts = get_entry_accounts(entry)\n\n    # Make no assumptions about the order of insert_options entries and instead\n    # sort them ourselves (by descending dates)\n    insert_options = sorted(\n        insert_options, key=attrgetter(\"date\"), reverse=True\n    )\n\n    for account in accounts:\n        for insert_option in insert_options:\n            # Only consider InsertOptions before the entry date.\n            if insert_option.date >= entry.date:\n                continue\n            if insert_option.re.match(account):\n                return (insert_option.filename, insert_option.lineno - 1)\n\n    return (default_filename, None)\n", "patch": "@@ -22,6 +22,7 @@\n from beancount.core.flags import FLAG_SUMMARIZE\n from beancount.core.flags import FLAG_TRANSFER\n from beancount.parser.printer import format_entry  # type: ignore\n+from markupsafe import Markup\n \n from fava.core._compat import FLAG_RETURNS\n from fava.core._compat import FLAG_UNREALIZED\n@@ -176,7 +177,9 @@ def insert_entries(self, entries: Entries) -> None:\n                 )\n                 self.ledger.extensions.after_insert_entry(entry)\n \n-    def render_entries(self, entries: Entries) -> Generator[str, None, None]:\n+    def render_entries(\n+        self, entries: Entries\n+    ) -> Generator[Markup, None, None]:\n         \"\"\"Return entries in Beancount format.\n \n         Only renders :class:`.Balance` and :class:`.Transaction`.\n@@ -193,12 +196,14 @@ def render_entries(self, entries: Entries) -> Generator[str, None, None]:\n                 if isinstance(entry, Transaction) and entry.flag in EXCL_FLAGS:\n                     continue\n                 try:\n-                    yield get_entry_slice(entry)[0] + \"\\n\"\n+                    yield Markup(get_entry_slice(entry)[0] + \"\\n\")\n                 except (KeyError, FileNotFoundError):\n-                    yield _format_entry(\n-                        entry,\n-                        self.ledger.fava_options.currency_column,\n-                        indent,\n+                    yield Markup(\n+                        _format_entry(\n+                            entry,\n+                            self.ledger.fava_options.currency_column,\n+                            indent,\n+                        )\n                     )\n \n ", "file_path": "files/2022_7/31", "file_language": "py", "file_name": "src/fava/core/file.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/beancount/fava/raw/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711/src%2Ffava%2Ftemplate_filters.py", "code": "\"\"\"Template filters for Fava.\n\nAll functions in this module will be automatically added as template filters.\n\"\"\"\nfrom __future__ import annotations\n\nimport datetime\nimport os\nimport re\nimport unicodedata\nfrom typing import Any\nfrom typing import MutableMapping\nfrom typing import TypeVar\n\nfrom beancount.core import compare\nfrom beancount.core import realization\nfrom beancount.core.account import ACCOUNT_RE\nfrom beancount.core.data import Directive\nfrom beancount.core.inventory import Inventory\nfrom beancount.core.number import Decimal\nfrom beancount.core.number import ZERO\nfrom flask import url_for\nfrom markupsafe import Markup\n\nfrom fava.context import g\nfrom fava.core.conversion import cost\nfrom fava.core.conversion import cost_or_value as cost_or_value_without_context\nfrom fava.core.conversion import units\nfrom fava.core.tree import TreeNode\nfrom fava.util.date import Interval\n\nMappingValue = TypeVar(\"MappingValue\")\n\n\ndef remove_keys(\n    _dict: MutableMapping[str, MappingValue] | None, keys: list[str]\n) -> MutableMapping[str, MappingValue]:\n    \"\"\"Remove keys from a dictionary.\"\"\"\n    if not _dict:\n        return {}\n    new = dict(_dict)\n    for key in keys:\n        try:\n            del new[key]\n        except KeyError:\n            pass\n    return new\n\n\ndef cost_or_value(\n    inventory: Inventory, date: datetime.date | None = None\n) -> Any:\n    \"\"\"Get the cost or value of an inventory.\"\"\"\n    return cost_or_value_without_context(\n        inventory, g.conversion, g.ledger.price_map, date\n    )\n\n\ndef format_currency(\n    value: Decimal,\n    currency: str | None = None,\n    show_if_zero: bool = False,\n    invert: bool = False,\n) -> str:\n    \"\"\"Format a value using the derived precision for a specified currency.\"\"\"\n    if not value and not show_if_zero:\n        return \"\"\n    if value == ZERO:\n        return g.ledger.format_decimal(ZERO, currency)\n    if invert:\n        value = -value\n    return g.ledger.format_decimal(value, currency)\n\n\ndef format_date(date: datetime.date) -> str:\n    \"\"\"Format a date according to the current interval.\"\"\"\n    if g.interval is Interval.YEAR:\n        return date.strftime(\"%Y\")\n    if g.interval is Interval.QUARTER:\n        return f\"{date.year}Q{(date.month - 1) // 3 + 1}\"\n    if g.interval is Interval.WEEK:\n        return date.strftime(\"%YW%W\")\n    if g.interval is Interval.DAY:\n        return date.strftime(\"%Y-%m-%d\")\n    assert g.interval is Interval.MONTH\n    return date.strftime(\"%b %Y\")\n\n\ndef hash_entry(entry: Directive) -> str:\n    \"\"\"Hash an entry.\"\"\"\n    return compare.hash_entry(entry)\n\n\ndef balance_children(account: realization.RealAccount) -> Inventory:\n    \"\"\"Compute the total balance of an account.\"\"\"\n    return realization.compute_balance(account)\n\n\ndef get_or_create(\n    account: realization.RealAccount, account_name: str\n) -> realization.RealAccount:\n    \"\"\"Get or create a child account.\"\"\"\n    if account.account == account_name:\n        return account\n    return realization.get_or_create(account, account_name)\n\n\nFLAGS_TO_TYPES = {\"*\": \"cleared\", \"!\": \"pending\"}\n\n\ndef flag_to_type(flag: str) -> str:\n    \"\"\"Names for entry flags.\"\"\"\n    return FLAGS_TO_TYPES.get(flag, \"other\")\n\n\ndef should_show(account: TreeNode) -> bool:\n    \"\"\"Determine whether the account should be shown.\"\"\"\n    if not account.balance_children.is_empty() or any(\n        should_show(a) for a in account.children\n    ):\n        return True\n    ledger = g.ledger\n    filtered = g.filtered\n    if account.name not in ledger.accounts:\n        return False\n    fava_options = ledger.fava_options\n    if not fava_options.show_closed_accounts and filtered.account_is_closed(\n        account.name\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_balance\n        and account.balance.is_empty()\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_transactions\n        and not account.has_txns\n    ):\n        return False\n    return True\n\n\ndef basename(file_path: str) -> str:\n    \"\"\"Return the basename of a filepath.\"\"\"\n    return unicodedata.normalize(\"NFC\", os.path.basename(file_path))\n\n\ndef format_errormsg(message: str) -> Markup:\n    \"\"\"Match account names in error messages and insert HTML links for them.\"\"\"\n    match = re.search(ACCOUNT_RE, message)\n    if not match:\n        return Markup(message)\n    account = match.group()\n    url = url_for(\"account\", name=account)\n    return Markup(\n        message.replace(account, f'<a href=\"{url}\">{account}</a>')\n        .replace(\"for '\", \"for \")\n        .replace(\"': \", \": \")\n    )\n\n\ndef collapse_account(account_name: str) -> bool:\n    \"\"\"Return true if account should be collapsed.\"\"\"\n    collapse_patterns = g.ledger.fava_options.collapse_pattern\n    return any(pattern.match(account_name) for pattern in collapse_patterns)\n\n\nFILTERS = [\n    balance_children,\n    basename,\n    collapse_account,\n    cost,\n    cost_or_value,\n    cost_or_value,\n    flag_to_type,\n    format_currency,\n    format_date,\n    format_errormsg,\n    get_or_create,\n    hash_entry,\n    remove_keys,\n    should_show,\n    units,\n]\n", "code_before": "\"\"\"Template filters for Fava.\n\nAll functions in this module will be automatically added as template filters.\n\"\"\"\nfrom __future__ import annotations\n\nimport datetime\nimport os\nimport re\nimport unicodedata\nfrom typing import Any\nfrom typing import MutableMapping\nfrom typing import TypeVar\n\nimport flask\nfrom beancount.core import compare\nfrom beancount.core import realization\nfrom beancount.core.account import ACCOUNT_RE\nfrom beancount.core.data import Directive\nfrom beancount.core.inventory import Inventory\nfrom beancount.core.number import Decimal\nfrom beancount.core.number import ZERO\n\nfrom fava.context import g\nfrom fava.core.conversion import cost\nfrom fava.core.conversion import cost_or_value as cost_or_value_without_context\nfrom fava.core.conversion import units\nfrom fava.core.tree import TreeNode\nfrom fava.util.date import Interval\n\nMappingValue = TypeVar(\"MappingValue\")\n\n\ndef remove_keys(\n    _dict: MutableMapping[str, MappingValue] | None, keys: list[str]\n) -> MutableMapping[str, MappingValue]:\n    \"\"\"Remove keys from a dictionary.\"\"\"\n    if not _dict:\n        return {}\n    new = dict(_dict)\n    for key in keys:\n        try:\n            del new[key]\n        except KeyError:\n            pass\n    return new\n\n\ndef cost_or_value(\n    inventory: Inventory, date: datetime.date | None = None\n) -> Any:\n    \"\"\"Get the cost or value of an inventory.\"\"\"\n    return cost_or_value_without_context(\n        inventory, g.conversion, g.ledger.price_map, date\n    )\n\n\ndef format_currency(\n    value: Decimal,\n    currency: str | None = None,\n    show_if_zero: bool = False,\n    invert: bool = False,\n) -> str:\n    \"\"\"Format a value using the derived precision for a specified currency.\"\"\"\n    if not value and not show_if_zero:\n        return \"\"\n    if value == ZERO:\n        return g.ledger.format_decimal(ZERO, currency)\n    if invert:\n        value = -value\n    return g.ledger.format_decimal(value, currency)\n\n\ndef format_date(date: datetime.date) -> str:\n    \"\"\"Format a date according to the current interval.\"\"\"\n    if g.interval is Interval.YEAR:\n        return date.strftime(\"%Y\")\n    if g.interval is Interval.QUARTER:\n        return f\"{date.year}Q{(date.month - 1) // 3 + 1}\"\n    if g.interval is Interval.WEEK:\n        return date.strftime(\"%YW%W\")\n    if g.interval is Interval.DAY:\n        return date.strftime(\"%Y-%m-%d\")\n    assert g.interval is Interval.MONTH\n    return date.strftime(\"%b %Y\")\n\n\ndef hash_entry(entry: Directive) -> str:\n    \"\"\"Hash an entry.\"\"\"\n    return compare.hash_entry(entry)\n\n\ndef balance_children(account: realization.RealAccount) -> Inventory:\n    \"\"\"Compute the total balance of an account.\"\"\"\n    return realization.compute_balance(account)\n\n\ndef get_or_create(\n    account: realization.RealAccount, account_name: str\n) -> realization.RealAccount:\n    \"\"\"Get or create a child account.\"\"\"\n    if account.account == account_name:\n        return account\n    return realization.get_or_create(account, account_name)\n\n\nFLAGS_TO_TYPES = {\"*\": \"cleared\", \"!\": \"pending\"}\n\n\ndef flag_to_type(flag: str) -> str:\n    \"\"\"Names for entry flags.\"\"\"\n    return FLAGS_TO_TYPES.get(flag, \"other\")\n\n\ndef should_show(account: TreeNode) -> bool:\n    \"\"\"Determine whether the account should be shown.\"\"\"\n    if not account.balance_children.is_empty() or any(\n        should_show(a) for a in account.children\n    ):\n        return True\n    ledger = g.ledger\n    filtered = g.filtered\n    if account.name not in ledger.accounts:\n        return False\n    fava_options = ledger.fava_options\n    if not fava_options.show_closed_accounts and filtered.account_is_closed(\n        account.name\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_balance\n        and account.balance.is_empty()\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_transactions\n        and not account.has_txns\n    ):\n        return False\n    return True\n\n\ndef basename(file_path: str) -> str:\n    \"\"\"Return the basename of a filepath.\"\"\"\n    return unicodedata.normalize(\"NFC\", os.path.basename(file_path))\n\n\ndef format_errormsg(message: str) -> str:\n    \"\"\"Match account names in error messages and insert HTML links for them.\"\"\"\n    match = re.search(ACCOUNT_RE, message)\n    if not match:\n        return message\n    account = match.group()\n    url = flask.url_for(\"account\", name=account)\n    return (\n        message.replace(account, f'<a href=\"{url}\">{account}</a>')\n        .replace(\"for '\", \"for \")\n        .replace(\"': \", \": \")\n    )\n\n\ndef collapse_account(account_name: str) -> bool:\n    \"\"\"Return true if account should be collapsed.\"\"\"\n    collapse_patterns = g.ledger.fava_options.collapse_pattern\n    return any(pattern.match(account_name) for pattern in collapse_patterns)\n\n\nFILTERS = [\n    balance_children,\n    basename,\n    collapse_account,\n    cost,\n    cost_or_value,\n    cost_or_value,\n    flag_to_type,\n    format_currency,\n    format_date,\n    format_errormsg,\n    get_or_create,\n    hash_entry,\n    remove_keys,\n    should_show,\n    units,\n]\n", "patch": "@@ -12,14 +12,15 @@\n from typing import MutableMapping\n from typing import TypeVar\n \n-import flask\n from beancount.core import compare\n from beancount.core import realization\n from beancount.core.account import ACCOUNT_RE\n from beancount.core.data import Directive\n from beancount.core.inventory import Inventory\n from beancount.core.number import Decimal\n from beancount.core.number import ZERO\n+from flask import url_for\n+from markupsafe import Markup\n \n from fava.context import g\n from fava.core.conversion import cost\n@@ -145,14 +146,14 @@ def basename(file_path: str) -> str:\n     return unicodedata.normalize(\"NFC\", os.path.basename(file_path))\n \n \n-def format_errormsg(message: str) -> str:\n+def format_errormsg(message: str) -> Markup:\n     \"\"\"Match account names in error messages and insert HTML links for them.\"\"\"\n     match = re.search(ACCOUNT_RE, message)\n     if not match:\n-        return message\n+        return Markup(message)\n     account = match.group()\n-    url = flask.url_for(\"account\", name=account)\n-    return (\n+    url = url_for(\"account\", name=account)\n+    return Markup(\n         message.replace(account, f'<a href=\"{url}\">{account}</a>')\n         .replace(\"for '\", \"for \")\n         .replace(\"': \", \": \")", "file_path": "files/2022_7/32", "file_language": "py", "file_name": "src/fava/template_filters.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def remove_keys(\n    _dict: MutableMapping[str, MappingValue] | None, keys: list[str]\n) -> MutableMapping[str, MappingValue]:\n    \"\"\"Remove keys from a dictionary.\"\"\"\n    if not _dict:\n        return {}\n    new = dict(_dict)\n    for key in keys:\n        try:\n            del new[key]\n        except KeyError:\n            pass\n    return new", "target": 0}, {"function": "def cost_or_value(\n    inventory: Inventory, date: datetime.date | None = None\n) -> Any:\n    \"\"\"Get the cost or value of an inventory.\"\"\"\n    return cost_or_value_without_context(\n        inventory, g.conversion, g.ledger.price_map, date\n    )", "target": 0}, {"function": "def format_currency(\n    value: Decimal,\n    currency: str | None = None,\n    show_if_zero: bool = False,\n    invert: bool = False,\n) -> str:\n    \"\"\"Format a value using the derived precision for a specified currency.\"\"\"\n    if not value and not show_if_zero:\n        return \"\"\n    if value == ZERO:\n        return g.ledger.format_decimal(ZERO, currency)\n    if invert:\n        value = -value\n    return g.ledger.format_decimal(value, currency)", "target": 0}, {"function": "def format_date(date: datetime.date) -> str:\n    \"\"\"Format a date according to the current interval.\"\"\"\n    if g.interval is Interval.YEAR:\n        return date.strftime(\"%Y\")\n    if g.interval is Interval.QUARTER:\n        return f\"{date.year}Q{(date.month - 1) // 3 + 1}\"\n    if g.interval is Interval.WEEK:\n        return date.strftime(\"%YW%W\")\n    if g.interval is Interval.DAY:\n        return date.strftime(\"%Y-%m-%d\")\n    assert g.interval is Interval.MONTH\n    return date.strftime(\"%b %Y\")", "target": 0}, {"function": "def hash_entry(entry: Directive) -> str:\n    \"\"\"Hash an entry.\"\"\"\n    return compare.hash_entry(entry)", "target": 0}, {"function": "def balance_children(account: realization.RealAccount) -> Inventory:\n    \"\"\"Compute the total balance of an account.\"\"\"\n    return realization.compute_balance(account)", "target": 0}, {"function": "def get_or_create(\n    account: realization.RealAccount, account_name: str\n) -> realization.RealAccount:\n    \"\"\"Get or create a child account.\"\"\"\n    if account.account == account_name:\n        return account\n    return realization.get_or_create(account, account_name)", "target": 0}, {"function": "def flag_to_type(flag: str) -> str:\n    \"\"\"Names for entry flags.\"\"\"\n    return FLAGS_TO_TYPES.get(flag, \"other\")", "target": 0}, {"function": "def should_show(account: TreeNode) -> bool:\n    \"\"\"Determine whether the account should be shown.\"\"\"\n    if not account.balance_children.is_empty() or any(\n        should_show(a) for a in account.children\n    ):\n        return True\n    ledger = g.ledger\n    filtered = g.filtered\n    if account.name not in ledger.accounts:\n        return False\n    fava_options = ledger.fava_options\n    if not fava_options.show_closed_accounts and filtered.account_is_closed(\n        account.name\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_balance\n        and account.balance.is_empty()\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_transactions\n        and not account.has_txns\n    ):\n        return False\n    return True", "target": 0}, {"function": "def basename(file_path: str) -> str:\n    \"\"\"Return the basename of a filepath.\"\"\"\n    return unicodedata.normalize(\"NFC\", os.path.basename(file_path))", "target": 0}, {"function": "def format_errormsg(message: str) -> str:\n    \"\"\"Match account names in error messages and insert HTML links for them.\"\"\"\n    match = re.search(ACCOUNT_RE, message)\n    if not match:\n        return message\n    account = match.group()\n    url = flask.url_for(\"account\", name=account)\n    return (\n        message.replace(account, f'<a href=\"{url}\">{account}</a>')\n        .replace(\"for '\", \"for \")\n        .replace(\"': \", \": \")\n    )", "target": 0}, {"function": "def collapse_account(account_name: str) -> bool:\n    \"\"\"Return true if account should be collapsed.\"\"\"\n    collapse_patterns = g.ledger.fava_options.collapse_pattern\n    return any(pattern.match(account_name) for pattern in collapse_patterns)", "target": 0}], "function_after": [{"function": "def remove_keys(\n    _dict: MutableMapping[str, MappingValue] | None, keys: list[str]\n) -> MutableMapping[str, MappingValue]:\n    \"\"\"Remove keys from a dictionary.\"\"\"\n    if not _dict:\n        return {}\n    new = dict(_dict)\n    for key in keys:\n        try:\n            del new[key]\n        except KeyError:\n            pass\n    return new", "target": 0}, {"function": "def cost_or_value(\n    inventory: Inventory, date: datetime.date | None = None\n) -> Any:\n    \"\"\"Get the cost or value of an inventory.\"\"\"\n    return cost_or_value_without_context(\n        inventory, g.conversion, g.ledger.price_map, date\n    )", "target": 0}, {"function": "def format_currency(\n    value: Decimal,\n    currency: str | None = None,\n    show_if_zero: bool = False,\n    invert: bool = False,\n) -> str:\n    \"\"\"Format a value using the derived precision for a specified currency.\"\"\"\n    if not value and not show_if_zero:\n        return \"\"\n    if value == ZERO:\n        return g.ledger.format_decimal(ZERO, currency)\n    if invert:\n        value = -value\n    return g.ledger.format_decimal(value, currency)", "target": 0}, {"function": "def format_date(date: datetime.date) -> str:\n    \"\"\"Format a date according to the current interval.\"\"\"\n    if g.interval is Interval.YEAR:\n        return date.strftime(\"%Y\")\n    if g.interval is Interval.QUARTER:\n        return f\"{date.year}Q{(date.month - 1) // 3 + 1}\"\n    if g.interval is Interval.WEEK:\n        return date.strftime(\"%YW%W\")\n    if g.interval is Interval.DAY:\n        return date.strftime(\"%Y-%m-%d\")\n    assert g.interval is Interval.MONTH\n    return date.strftime(\"%b %Y\")", "target": 0}, {"function": "def hash_entry(entry: Directive) -> str:\n    \"\"\"Hash an entry.\"\"\"\n    return compare.hash_entry(entry)", "target": 0}, {"function": "def balance_children(account: realization.RealAccount) -> Inventory:\n    \"\"\"Compute the total balance of an account.\"\"\"\n    return realization.compute_balance(account)", "target": 0}, {"function": "def get_or_create(\n    account: realization.RealAccount, account_name: str\n) -> realization.RealAccount:\n    \"\"\"Get or create a child account.\"\"\"\n    if account.account == account_name:\n        return account\n    return realization.get_or_create(account, account_name)", "target": 0}, {"function": "def flag_to_type(flag: str) -> str:\n    \"\"\"Names for entry flags.\"\"\"\n    return FLAGS_TO_TYPES.get(flag, \"other\")", "target": 0}, {"function": "def should_show(account: TreeNode) -> bool:\n    \"\"\"Determine whether the account should be shown.\"\"\"\n    if not account.balance_children.is_empty() or any(\n        should_show(a) for a in account.children\n    ):\n        return True\n    ledger = g.ledger\n    filtered = g.filtered\n    if account.name not in ledger.accounts:\n        return False\n    fava_options = ledger.fava_options\n    if not fava_options.show_closed_accounts and filtered.account_is_closed(\n        account.name\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_balance\n        and account.balance.is_empty()\n    ):\n        return False\n    if (\n        not fava_options.show_accounts_with_zero_transactions\n        and not account.has_txns\n    ):\n        return False\n    return True", "target": 0}, {"function": "def basename(file_path: str) -> str:\n    \"\"\"Return the basename of a filepath.\"\"\"\n    return unicodedata.normalize(\"NFC\", os.path.basename(file_path))", "target": 0}, {"function": "def format_errormsg(message: str) -> Markup:\n    \"\"\"Match account names in error messages and insert HTML links for them.\"\"\"\n    match = re.search(ACCOUNT_RE, message)\n    if not match:\n        return Markup(message)\n    account = match.group()\n    url = url_for(\"account\", name=account)\n    return Markup(\n        message.replace(account, f'<a href=\"{url}\">{account}</a>')\n        .replace(\"for '\", \"for \")\n        .replace(\"': \", \": \")\n    )", "target": 0}, {"function": "def collapse_account(account_name: str) -> bool:\n    \"\"\"Return true if account should be collapsed.\"\"\"\n    collapse_patterns = g.ledger.fava_options.collapse_pattern\n    return any(pattern.match(account_name) for pattern in collapse_patterns)", "target": 0}]}, {"raw_url": "https://github.com/beancount/fava/raw/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711/src%2Ffava%2Ftemplates%2F_layout.html", "code": "{% import \"_charts.html\" as charts with context %}\n{% import \"_globals.html\" as globals with context %}\n{% set page_title = globals.all_pages[active_page].0 if not page_title else page_title %}\n{% set short_title = page_title if not short_title else short_title %}\n{% if not request.args.get('partial') %}\n<!doctype html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"shortcut icon\" href=\"{{ static_url('favicon.ico') }}\">\n    <link rel=\"stylesheet\" href=\"{{ static_url('app.css') }}\">\n    <title>{{ short_title }} - {{ ledger.options.title }}</title>\n    <script type=\"module\" src=\"{{ static_url('app.js') }}\"></script>\n  </head>\n  <body>\n    <header>\n      <svg class=\"fava-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"25\" viewBox=\"0 0 24 27\">\n        <path fill=\"#FFF\" d=\"M14 17.854c0 1.537-.498 2.86-1.493 3.97-.995 1.11-2.288 1.796-3.88 2.057v2.64c0 .14-.044.26-.134.35-.09.09-.205.14-.345.14H6.122c-.13 0-.242-.04-.337-.14-.095-.09-.143-.21-.143-.34v-2.64c-.66-.09-1.298-.24-1.913-.46-.62-.22-1.13-.44-1.53-.67-.4-.22-.77-.46-1.11-.72-.34-.26-.58-.45-.7-.57-.13-.12-.21-.21-.26-.27-.17-.21-.18-.42-.03-.62l1.54-2.03c.07-.1.18-.16.34-.18.15-.02.27.03.36.14l.03.03c1.13 1 2.34 1.63 3.64 1.89.37.08.74.12 1.11.12.81 0 1.52-.21 2.14-.64.61-.43.92-1.04.92-1.83 0-.28-.08-.55-.23-.8-.15-.25-.32-.46-.51-.63-.19-.17-.48-.36-.88-.56-.4-.21-.73-.37-.99-.48-.26-.12-.66-.28-1.2-.49l-.93-.38c-.23-.09-.54-.22-.93-.4-.39-.17-.7-.33-.94-.46s-.52-.31-.85-.53c-.33-.22-.6-.43-.8-.64-.21-.202-.42-.45-.65-.74-.23-.28-.41-.572-.53-.87-.13-.295-.23-.63-.32-1-.06-.4-.1-.79-.1-1.2 0-1.39.49-2.6 1.47-3.65S4.07 3.5 5.64 3.2V.48c0-.13.05-.243.143-.34.097-.09.21-.14.34-.14H8.15c.14 0 .254.045.344.136.09.09.135.206.135.346v2.652c.57.06 1.12.176 1.65.346.53.17.97.34 1.3.505.33.166.65.354.95.565.3.21.49.357.58.437.09.08.16.15.22.21.17.182.19.373.07.574l-1.21 2.2c-.08.15-.2.23-.35.24-.14.04-.28 0-.41-.1-.03-.03-.1-.09-.22-.18s-.31-.22-.59-.4c-.28-.17-.57-.33-.88-.48-.31-.14-.69-.27-1.12-.39-.44-.11-.86-.17-1.28-.17-.95 0-1.73.22-2.33.65-.6.44-.9.99-.9 1.68 0 .26.04.5.13.72.08.22.23.43.44.63s.41.36.59.5.464.29.84.47c.374.18.677.31.907.41.23.09.58.23 1.05.41.53.2.94.36 1.22.48s.66.29 1.14.53c.48.24.86.45 1.13.64.28.19.59.44.93.76.35.31.61.63.8.95.19.33.345.71.475 1.16.13.44.192.92.192 1.42z\"/>\n        <path fill=\"#A6C4DA\" d=\"M10 17.854c0 1.537.498 2.86 1.493 3.97.995 1.11 2.288 1.796 3.88 2.057v2.64c0 .14.044.26.134.35.09.09.205.14.345.14h2.026c.13 0 .242-.04.337-.14.095-.09.143-.21.143-.34v-2.64c.66-.09 1.298-.24 1.913-.46.62-.22 1.13-.44 1.53-.67.4-.22.77-.46 1.11-.72.34-.26.58-.45.7-.57.13-.12.21-.21.26-.27.17-.21.18-.42.03-.62l-1.54-2.03c-.07-.1-.18-.16-.34-.18-.15-.02-.27.03-.36.14l-.03.03c-1.13 1-2.34 1.63-3.64 1.89-.37.08-.74.12-1.11.12-.81 0-1.52-.21-2.14-.64-.61-.43-.92-1.04-.92-1.83 0-.28.08-.55.23-.8.15-.25.32-.46.51-.63.19-.17.48-.36.88-.56.4-.21.73-.37.99-.48.26-.12.66-.28 1.2-.49l.93-.38c.23-.09.54-.22.93-.4.39-.17.7-.33.94-.46s.52-.31.85-.53c.33-.22.6-.43.8-.64.21-.202.42-.45.65-.74.23-.28.41-.572.53-.87.13-.295.23-.63.32-1s.13-.762.13-1.174c0-1.382-.49-2.6-1.47-3.642s-2.27-1.74-3.84-2.04V.49c0-.13-.05-.245-.14-.34-.14-.1-.25-.15-.38-.15h-2.03c-.14 0-.254.045-.344.136-.09.09-.135.206-.135.346v2.652c-.57.06-1.122.176-1.657.346-.535.17-.97.34-1.306.505-.335.166-.652.354-.953.565-.3.21-.495.357-.585.437-.09.08-.166.15-.226.21-.17.182-.195.373-.075.574l1.215 2.2c.08.15.195.23.345.24.14.04.28 0 .41-.1.03-.03.1-.09.22-.18s.31-.22.59-.4c.27-.17.56-.33.87-.48.31-.14.68-.27 1.12-.39.43-.11.86-.17 1.28-.17.95 0 1.72.22 2.32.65.6.44.9.99.9 1.68 0 .26-.04.5-.13.72-.09.22-.24.43-.45.63-.21.2-.41.36-.6.5s-.47.29-.84.47c-.38.18-.68.31-.91.41-.23.09-.58.23-1.05.41-.53.2-.94.36-1.22.48s-.66.29-1.14.53c-.48.24-.86.45-1.14.64s-.58.44-.93.76c-.34.31-.61.63-.79.95-.19.33-.35.71-.48 1.16-.13.44-.2.92-.2 1.42z\"/>\n      </svg>\n      <h1>\n        {{ ledger.options.title or 'fava' }}{{ ' \u25be' if config['LEDGERS']|length > 1 else '' }}<strong class=\"page-title\">{{ page_title }}</strong>\n        <button type=button id=\"reload-page\" class=\"reload-page hidden\" data-keyboard-shortcut=\"r\">&#8635;</button>\n        {% if config['LEDGERS']|length > 1 %}\n        <div class=\"beancount-files\">\n          <ul>\n            {% for file_slug, file_ledger in config['LEDGERS'].items() %}\n            <li>\n              <a{% if file_slug == g.beancount_file_slug %} class=\"active\"{% endif %} href=\"{{ url_for('report', report_name='income_statement', bfile=file_slug) }}\" data-remote>{{ file_ledger.options.title or 'fava' }}</a>\n            </li>\n            {% endfor %}\n          </ul>\n        </div>{% endif %}\n      </h1>\n      <svelte-component type=\"filter-form\"></svelte-component>\n    </header>\n    <button id=\"aside-button\" class=\"aside-button\" type=\"button\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"32px\" width=\"32px\" version=\"1.0\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"2\"/><circle cx=\"12\" cy=\"5\" r=\"2\"/><circle cx=\"12\" cy=\"19\" r=\"2\"/></svg>\n    </button>\n    <aside>{% include \"_aside.html\" %}</aside>\n    <article>\n      {%- endif %}\n      <svelte-component type=\"charts\"></svelte-component>\n      {% block content %}\n      {% if content %}\n      {{ content }}\n      {% else %}\n      {% include active_page + '.html' %}\n      {% endif %}\n      {% endblock %}\n      <script type=\"application/json\" id=\"chart-data\">{{ charts.chart_data|tojson }}</script>\n      <script type=\"application/json\" id=\"page-title\">{{ {\n        'documentTitle': '{} - {}'.format(short_title, ledger.options.title),\n        'pageTitle': page_title,\n      }|tojson }}</script>\n      <script type=\"application/json\" id=\"ledger-data\">{{ {\n        'accounts': ledger.attributes.accounts,\n        'account_details': ledger.accounts,\n        'baseURL': url_for('index'),\n        'currencies': ledger.attributes.currencies,\n        'errors': ledger.errors|length,\n        'favaOptions': ledger.fava_options,\n        'incognito': config.get('INCOGNITO', False),\n        'have_excel': config.get('HAVE_EXCEL', False),\n        'links': ledger.attributes.links,\n        'options': ledger.options,\n        'payees': ledger.attributes.payees,\n        'precisions': ledger.format_decimal.precisions,\n        'tags': ledger.attributes.tags,\n        'years': ledger.attributes.years,\n      }|tojson }}</script>\n      {%- if not request.args.get('partial') %}\n    </article>\n    <svelte-component type=\"modals\"></svelte-component>\n    <script type=\"application/json\" id=\"translations\">{{ translations()|tojson }}</script>\n  </body>\n</html>\n{%- endif %}\n", "code_before": "{% import \"_charts.html\" as charts with context %}\n{% import \"_globals.html\" as globals with context %}\n{% set page_title = globals.all_pages[active_page].0 if not page_title else page_title %}\n{% set short_title = page_title if not short_title else short_title %}\n{% if not request.args.get('partial') %}\n<!doctype html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"shortcut icon\" href=\"{{ static_url('favicon.ico') }}\">\n    <link rel=\"stylesheet\" href=\"{{ static_url('app.css') }}\">\n    <title>{{ short_title }} - {{ ledger.options.title }}</title>\n    <script type=\"module\" src=\"{{ static_url('app.js') }}\"></script>\n  </head>\n  <body>\n    <header>\n      <svg class=\"fava-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"25\" viewBox=\"0 0 24 27\">\n        <path fill=\"#FFF\" d=\"M14 17.854c0 1.537-.498 2.86-1.493 3.97-.995 1.11-2.288 1.796-3.88 2.057v2.64c0 .14-.044.26-.134.35-.09.09-.205.14-.345.14H6.122c-.13 0-.242-.04-.337-.14-.095-.09-.143-.21-.143-.34v-2.64c-.66-.09-1.298-.24-1.913-.46-.62-.22-1.13-.44-1.53-.67-.4-.22-.77-.46-1.11-.72-.34-.26-.58-.45-.7-.57-.13-.12-.21-.21-.26-.27-.17-.21-.18-.42-.03-.62l1.54-2.03c.07-.1.18-.16.34-.18.15-.02.27.03.36.14l.03.03c1.13 1 2.34 1.63 3.64 1.89.37.08.74.12 1.11.12.81 0 1.52-.21 2.14-.64.61-.43.92-1.04.92-1.83 0-.28-.08-.55-.23-.8-.15-.25-.32-.46-.51-.63-.19-.17-.48-.36-.88-.56-.4-.21-.73-.37-.99-.48-.26-.12-.66-.28-1.2-.49l-.93-.38c-.23-.09-.54-.22-.93-.4-.39-.17-.7-.33-.94-.46s-.52-.31-.85-.53c-.33-.22-.6-.43-.8-.64-.21-.202-.42-.45-.65-.74-.23-.28-.41-.572-.53-.87-.13-.295-.23-.63-.32-1-.06-.4-.1-.79-.1-1.2 0-1.39.49-2.6 1.47-3.65S4.07 3.5 5.64 3.2V.48c0-.13.05-.243.143-.34.097-.09.21-.14.34-.14H8.15c.14 0 .254.045.344.136.09.09.135.206.135.346v2.652c.57.06 1.12.176 1.65.346.53.17.97.34 1.3.505.33.166.65.354.95.565.3.21.49.357.58.437.09.08.16.15.22.21.17.182.19.373.07.574l-1.21 2.2c-.08.15-.2.23-.35.24-.14.04-.28 0-.41-.1-.03-.03-.1-.09-.22-.18s-.31-.22-.59-.4c-.28-.17-.57-.33-.88-.48-.31-.14-.69-.27-1.12-.39-.44-.11-.86-.17-1.28-.17-.95 0-1.73.22-2.33.65-.6.44-.9.99-.9 1.68 0 .26.04.5.13.72.08.22.23.43.44.63s.41.36.59.5.464.29.84.47c.374.18.677.31.907.41.23.09.58.23 1.05.41.53.2.94.36 1.22.48s.66.29 1.14.53c.48.24.86.45 1.13.64.28.19.59.44.93.76.35.31.61.63.8.95.19.33.345.71.475 1.16.13.44.192.92.192 1.42z\"/>\n        <path fill=\"#A6C4DA\" d=\"M10 17.854c0 1.537.498 2.86 1.493 3.97.995 1.11 2.288 1.796 3.88 2.057v2.64c0 .14.044.26.134.35.09.09.205.14.345.14h2.026c.13 0 .242-.04.337-.14.095-.09.143-.21.143-.34v-2.64c.66-.09 1.298-.24 1.913-.46.62-.22 1.13-.44 1.53-.67.4-.22.77-.46 1.11-.72.34-.26.58-.45.7-.57.13-.12.21-.21.26-.27.17-.21.18-.42.03-.62l-1.54-2.03c-.07-.1-.18-.16-.34-.18-.15-.02-.27.03-.36.14l-.03.03c-1.13 1-2.34 1.63-3.64 1.89-.37.08-.74.12-1.11.12-.81 0-1.52-.21-2.14-.64-.61-.43-.92-1.04-.92-1.83 0-.28.08-.55.23-.8.15-.25.32-.46.51-.63.19-.17.48-.36.88-.56.4-.21.73-.37.99-.48.26-.12.66-.28 1.2-.49l.93-.38c.23-.09.54-.22.93-.4.39-.17.7-.33.94-.46s.52-.31.85-.53c.33-.22.6-.43.8-.64.21-.202.42-.45.65-.74.23-.28.41-.572.53-.87.13-.295.23-.63.32-1s.13-.762.13-1.174c0-1.382-.49-2.6-1.47-3.642s-2.27-1.74-3.84-2.04V.49c0-.13-.05-.245-.14-.34-.14-.1-.25-.15-.38-.15h-2.03c-.14 0-.254.045-.344.136-.09.09-.135.206-.135.346v2.652c-.57.06-1.122.176-1.657.346-.535.17-.97.34-1.306.505-.335.166-.652.354-.953.565-.3.21-.495.357-.585.437-.09.08-.166.15-.226.21-.17.182-.195.373-.075.574l1.215 2.2c.08.15.195.23.345.24.14.04.28 0 .41-.1.03-.03.1-.09.22-.18s.31-.22.59-.4c.27-.17.56-.33.87-.48.31-.14.68-.27 1.12-.39.43-.11.86-.17 1.28-.17.95 0 1.72.22 2.32.65.6.44.9.99.9 1.68 0 .26-.04.5-.13.72-.09.22-.24.43-.45.63-.21.2-.41.36-.6.5s-.47.29-.84.47c-.38.18-.68.31-.91.41-.23.09-.58.23-1.05.41-.53.2-.94.36-1.22.48s-.66.29-1.14.53c-.48.24-.86.45-1.14.64s-.58.44-.93.76c-.34.31-.61.63-.79.95-.19.33-.35.71-.48 1.16-.13.44-.2.92-.2 1.42z\"/>\n      </svg>\n      <h1>\n        {{ ledger.options.title or 'fava' }}{{ ' \u25be' if config['LEDGERS']|length > 1 else '' }}<strong class=\"page-title\">{{ page_title }}</strong>\n        <button type=button id=\"reload-page\" class=\"reload-page hidden\" data-keyboard-shortcut=\"r\">&#8635;</button>\n        {% if config['LEDGERS']|length > 1 %}\n        <div class=\"beancount-files\">\n          <ul>\n            {% for file_slug, file_ledger in config['LEDGERS'].items() %}\n            <li>\n              <a{% if file_slug == g.beancount_file_slug %} class=\"active\"{% endif %} href=\"{{ url_for('report', report_name='income_statement', bfile=file_slug) }}\" data-remote>{{ file_ledger.options.title or 'fava' }}</a>\n            </li>\n            {% endfor %}\n          </ul>\n        </div>{% endif %}\n      </h1>\n      <svelte-component type=\"filter-form\"></svelte-component>\n    </header>\n    <button id=\"aside-button\" class=\"aside-button\" type=\"button\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"32px\" width=\"32px\" version=\"1.0\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"2\"/><circle cx=\"12\" cy=\"5\" r=\"2\"/><circle cx=\"12\" cy=\"19\" r=\"2\"/></svg>\n    </button>\n    <aside>{% include \"_aside.html\" %}</aside>\n    <article>\n      {%- endif %}\n      <svelte-component type=\"charts\"></svelte-component>\n      {% block content %}\n      {% if content %}\n      {{ content|safe }}\n      {% else %}\n      {% include active_page + '.html' %}\n      {% endif %}\n      {% endblock %}\n      <script type=\"application/json\" id=\"chart-data\">{{ charts.chart_data|tojson }}</script>\n      <script type=\"application/json\" id=\"page-title\">{{ {\n        'documentTitle': '{} - {}'.format(short_title, ledger.options.title),\n        'pageTitle': page_title,\n      }|tojson }}</script>\n      <script type=\"application/json\" id=\"ledger-data\">{{ {\n        'accounts': ledger.attributes.accounts,\n        'account_details': ledger.accounts,\n        'baseURL': url_for('index'),\n        'currencies': ledger.attributes.currencies,\n        'errors': ledger.errors|length,\n        'favaOptions': ledger.fava_options,\n        'incognito': config.get('INCOGNITO', False),\n        'have_excel': config.get('HAVE_EXCEL', False),\n        'links': ledger.attributes.links,\n        'options': ledger.options,\n        'payees': ledger.attributes.payees,\n        'precisions': ledger.format_decimal.precisions,\n        'tags': ledger.attributes.tags,\n        'years': ledger.attributes.years,\n      }|tojson }}</script>\n      {%- if not request.args.get('partial') %}\n    </article>\n    <svelte-component type=\"modals\"></svelte-component>\n    <script type=\"application/json\" id=\"translations\">{{ translations()|tojson }}</script>\n  </body>\n</html>\n{%- endif %}\n", "patch": "@@ -43,7 +43,7 @@ <h1>\n       <svelte-component type=\"charts\"></svelte-component>\n       {% block content %}\n       {% if content %}\n-      {{ content|safe }}\n+      {{ content }}\n       {% else %}\n       {% include active_page + '.html' %}\n       {% endif %}", "file_path": "files/2022_7/33", "file_language": "html", "file_name": "src/fava/templates/_layout.html", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711/src%2Ffava%2Ftemplates%2Ferrors.html", "code": "{% if ledger.errors %}\n<table is=\"sortable-table\" class=\"errors\">\n  <thead>\n    <tr>\n      <th data-sort=\"string\" data-order=\"asc\">{{ _('File') }}</th>\n      <th data-sort=\"num\">{{ _('Line') }}</th>\n      <th data-sort=\"string\">{{ _('Error') }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    {% for error in ledger.errors %}\n    <tr>\n      {% with link=url_for_source(file_path=error.source['filename'], line=error.source['lineno']) %}\n      <td><a class=\"source\" href=\"{{ link }}\" title=\"{{ _('Show source %(file)s:%(lineno)s', file=error.source['filename'], lineno=error.source['lineno']) }}\">{{ error.source['filename'] }}</a></td>\n      <td class=\"num\"><a class=\"source\" href=\"{{ link }}\" title=\"{{ _('Show source %(file)s:%(lineno)s', file=error.source['filename'], lineno=error.source['lineno']) }}\">{{ error.source['lineno'] }}</a></td>\n      <td class=\"pre\">{{ error.message|format_errormsg }}</td>\n      {% endwith %}\n    </tr>\n    {% endfor %}\n  </tbody>\n</table>\n{% else %}\n<p>\n{{ _('No errors.') }}\n</p>\n{% endif %}\n", "code_before": "{% if ledger.errors %}\n<table is=\"sortable-table\" class=\"errors\">\n  <thead>\n    <tr>\n      <th data-sort=\"string\" data-order=\"asc\">{{ _('File') }}</th>\n      <th data-sort=\"num\">{{ _('Line') }}</th>\n      <th data-sort=\"string\">{{ _('Error') }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    {% for error in ledger.errors %}\n    <tr>\n      {% with link=url_for_source(file_path=error.source['filename'], line=error.source['lineno']) %}\n      <td><a class=\"source\" href=\"{{ link }}\" title=\"{{ _('Show source %(file)s:%(lineno)s', file=error.source['filename'], lineno=error.source['lineno']) }}\">{{ error.source['filename'] }}</a></td>\n      <td class=\"num\"><a class=\"source\" href=\"{{ link }}\" title=\"{{ _('Show source %(file)s:%(lineno)s', file=error.source['filename'], lineno=error.source['lineno']) }}\">{{ error.source['lineno'] }}</a></td>\n      <td class=\"pre\">{{ error.message|format_errormsg|safe }}</td>\n      {% endwith %}\n    </tr>\n    {% endfor %}\n  </tbody>\n</table>\n{% else %}\n<p>\n{{ _('No errors.') }}\n</p>\n{% endif %}\n", "patch": "@@ -13,7 +13,7 @@\n       {% with link=url_for_source(file_path=error.source['filename'], line=error.source['lineno']) %}\n       <td><a class=\"source\" href=\"{{ link }}\" title=\"{{ _('Show source %(file)s:%(lineno)s', file=error.source['filename'], lineno=error.source['lineno']) }}\">{{ error.source['filename'] }}</a></td>\n       <td class=\"num\"><a class=\"source\" href=\"{{ link }}\" title=\"{{ _('Show source %(file)s:%(lineno)s', file=error.source['filename'], lineno=error.source['lineno']) }}\">{{ error.source['lineno'] }}</a></td>\n-      <td class=\"pre\">{{ error.message|format_errormsg|safe }}</td>\n+      <td class=\"pre\">{{ error.message|format_errormsg }}</td>\n       {% endwith %}\n     </tr>\n     {% endfor %}", "file_path": "files/2022_7/34", "file_language": "html", "file_name": "src/fava/templates/errors.html", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711/src%2Ffava%2Ftemplates%2Fhelp.html", "code": "<div class=\"help\">\n  <div class=\"help-sidebar\">\n    <h3>{{ _('Help pages') }}</h3>\n    <ul>\n      {% for slug, title in HELP_PAGES|dictsort %}\n        <li>\n          <a href=\"{{ url_for('help_page', page_slug=slug) }}\"{% if slug == page_slug %} class=\"selected\"{% endif %}>\n            {{ title }}\n          </a>\n        </li>\n      {% endfor %}\n    </ul>\n  </div>\n  <div class=\"help-text\">\n    {{ help_html }}\n  </div>\n</div>\n", "code_before": "<div class=\"help\">\n  <div class=\"help-sidebar\">\n    <h3>{{ _('Help pages') }}</h3>\n    <ul>\n      {% for slug, title in HELP_PAGES|dictsort %}\n        <li>\n          <a href=\"{{ url_for('help_page', page_slug=slug) }}\"{% if slug == page_slug %} class=\"selected\"{% endif %}>\n            {{ title }}\n          </a>\n        </li>\n      {% endfor %}\n    </ul>\n  </div>\n  <div class=\"help-text\">\n    {{ help_html|safe }}\n  </div>\n</div>\n", "patch": "@@ -12,6 +12,6 @@ <h3>{{ _('Help pages') }}</h3>\n     </ul>\n   </div>\n   <div class=\"help-text\">\n-    {{ help_html|safe }}\n+    {{ help_html }}\n   </div>\n </div>", "file_path": "files/2022_7/35", "file_language": "html", "file_name": "src/fava/templates/help.html", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
