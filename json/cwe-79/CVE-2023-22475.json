{"index": 10464, "cve_id": "CVE-2023-22475", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Canarytokens is an open source tool which helps track activity and actions on your network. A Cross-Site Scripting vulnerability was identified in the history page of triggered Canarytokens prior to sha-fb61290. An attacker who discovers an HTTP-based Canarytoken (a URL) can use this to execute Javascript in the Canarytoken's trigger history page (domain: canarytokens.org) when the history page is later visited by the Canarytoken's creator. This vulnerability could be used to disable or delete the affected Canarytoken, or view its activation history. It might also be used as a stepping stone towards revealing more information about the Canarytoken's creator to the attacker. For example, an attacker could recover the email address tied to the Canarytoken, or place Javascript on the history page that redirect the creator towards an attacker-controlled Canarytoken to show the creator's network location. This vulnerability is similar to CVE-2022-31113, but affected parameters reported differently from the Canarytoken trigger request. An attacker could only act on the discovered Canarytoken. This issue did not expose other Canarytokens or other Canarytoken creators. Canarytokens Docker images sha-fb61290 and later contain a patch for this issue.", "cvss": "6.1", "publish_date": "January 6, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "fb612906f2217bbb8863199694891d16e20bad3e", "commit_message": "Use an autoescaped env for history page (#170)\n\nThis fixes a recently reported XSS in the canarytokens history page.", "commit_date": "2023-01-04T11:55:43Z", "project": "thinkst/canarytokens", "url": "https://api.github.com/repos/thinkst/canarytokens/commits/fb612906f2217bbb8863199694891d16e20bad3e", "html_url": "https://github.com/thinkst/canarytokens/commit/fb612906f2217bbb8863199694891d16e20bad3e", "windows_before": [{"commit_id": "10b9a1344a47c50c510767455ece985ee91284ef", "commit_date": "Thu Dec 15 14:06:22 2022 +0200", "commit_message": "T5182 email block list (#168)", "files_name": ["block_user.py", "httpd_site.py", "queries.py", "redismanager.py", "templates/generate_new.html", "templates/static/styles.css"]}, {"commit_id": "037ce4c2159965a72aa8264a294864738e7c3daa", "commit_date": "Mon Dec 12 16:50:16 2022 +0200", "commit_message": "Add request headers and GET/POST arguments to webhook (#167)", "files_name": ["channel.py", "channel_http.py", "channel_output_webhook.py"]}, {"commit_id": "a85fe582c5a376d100d80fb06181ec68e059e197", "commit_date": "Tue Dec 6 18:18:49 2022 +0200", "commit_message": "Add Google Chat webhook formatting (#165)", "files_name": ["channel.py", "channel_output_webhook.py", "queries.py", "templates/generate_new.html"]}, {"commit_id": "c88bb29cb52d3edc6da92beb74e0b2ed022a66c7", "commit_date": "Mon Dec 5 21:39:20 2022 +0200", "commit_message": "fix email banner link (#164)", "files_name": ["templates/emails/notification.html"]}, {"commit_id": "bd56d94be3f2f89fa89203d576fa5a8b6608c605", "commit_date": "Thu Nov 24 20:43:41 2022 +0200", "commit_message": "Report Generic Data in email alert (#162)", "files_name": ["channel.py", "channel_output_email.py", "templates/emails/notification.html"]}, {"commit_id": "afe47c013c0ec2c61b719ca56cf7a916541e92e0", "commit_date": "Wed Nov 16 17:09:15 2022 +0530", "commit_message": "Fix CN typo", "files_name": ["channel_input_mtls.py"]}, {"commit_id": "ced19661e04e3e5dca600cdc0389f0439de355f0", "commit_date": "Mon Nov 14 13:07:43 2022 +0000", "commit_message": "chore(ci): fix ci", "files_name": [".github/workflows/fix-typos.yml"]}, {"commit_id": "b56c16ec5f5ac4d75548a4633fa23338a73e193e", "commit_date": "Wed Nov 9 17:52:48 2022 +0530", "commit_message": "Exclude CA data from Kubeconfig, enable TLS skip", "files_name": ["kubeconfig.py"]}, {"commit_id": "569c39aaec419d67ff19d471c6aea6aa5fd4f3b5", "commit_date": "Wed Nov 9 17:50:34 2022 +0530", "commit_message": "Some parameter fixes for certificate generation", "files_name": ["channel_input_mtls.py"]}, {"commit_id": "119d44b524a127061d8e3e0dc9248ce02a46ffa0", "commit_date": "Fri Oct 21 13:50:23 2022 +0200", "commit_message": "[create-pull-request] automated change (#157)", "files_name": ["templates/error_http.html", "templates/generate.html", "templates/generate_new.html"]}, {"commit_id": "180195d640f9402b8282c9a0c34ef74bba24482f", "commit_date": "Fri Oct 21 13:47:31 2022 +0200", "commit_message": "Fix permission", "files_name": [".github/workflows/fix-typos.yml"]}, {"commit_id": "1c3e10d2e7b1f4de14f6b921334dde83c69e1244", "commit_date": "Fri Oct 21 13:44:20 2022 +0200", "commit_message": "Add scope to token for spell checking", "files_name": [".github/workflows/fix-typos.yml"]}, {"commit_id": "3c3e5293006fe45f2f9b4319646e69e09c7499e1", "commit_date": "Fri Oct 21 10:21:30 2022 +0100", "commit_message": "chore(ci): fix typos (#156)", "files_name": [".github/workflows/fix-typos.yml"]}, {"commit_id": "abfb739aa7ade84640ec35fc6f3aeca47aba5b03", "commit_date": "Thu Oct 13 08:39:57 2022 +0200", "commit_message": "Fix typo in generate page", "files_name": ["templates/generate_new.html"]}, {"commit_id": "ad23a4b0d6c1cc79a1a7cc6a0229c55b5af5c7c2", "commit_date": "Fri Sep 9 15:44:23 2022 +0200", "commit_message": "Handle CMD Token DNS spam better (#150)", "files_name": ["channel.py", "channel_dns.py", "channel_output_email.py", "exception.py", "redismanager.py", "settings.py"]}, {"commit_id": "a9ca9ecf076b225d3b0e4201d4b34feddbf9b506", "commit_date": "Wed Sep 7 18:21:13 2022 +0200", "commit_message": "Rename terms to legal", "files_name": ["httpd_site.py", "templates/error_http.html", "templates/generate_new.html", "templates/history.html", "templates/legal.html", "templates/manage_new.html"]}, {"commit_id": "3f0cae52d4de6670109d2d80139e5007f50bf5db", "commit_date": "Wed Sep 7 14:34:59 2022 +0200", "commit_message": "Fix terms wording", "files_name": ["templates/terms.html"]}, {"commit_id": "fdb496d496632c07e228a8b63701d6b5f5a5c1ae", "commit_date": "Wed Sep 7 14:07:08 2022 +0200", "commit_message": "Add missing render variable to terms", "files_name": ["httpd_site.py"]}, {"commit_id": "29bf5eb8f526c6389b84885e2262e657a88b8e9b", "commit_date": "Wed Sep 7 13:49:49 2022 +0300", "commit_message": "Add an acceptance use policy document for Canarytokens.org", "files_name": ["httpd_site.py", "templates/error_http.html", "templates/generate_new.html", "templates/history.html", "templates/manage_new.html", "templates/terms.html"]}, {"commit_id": "983d0309af46235f2004db538bd8b1148cae55b2", "commit_date": "Tue Sep 6 18:00:23 2022 +0200", "commit_message": "Merge branch 'dev'", "files_name": ["500d98ac05b054657b98af4ba9068e95bb269432 - Tue Sep 6 08:42:34 2022 -0600 : Fix regex to remove spaces", "msreg.py"]}, {"commit_id": "f116c673b06bb3c63879ba7fa33bf703b334b5a3", "commit_date": "Mon Sep 5 18:44:23 2022 -0600", "commit_message": "Undo testing commenting out", "files_name": ["msreg.py"]}, {"commit_id": "93ab63d53f920c77d21278849fe3d7db1f783ad1", "commit_date": "Mon Sep 5 18:43:13 2022 -0600", "commit_message": "Fix escaping on the MonitorProcess key", "files_name": ["msreg.py"]}, {"commit_id": "8be42188ff6e208430179e82b239c9301b394908", "commit_date": "Tue Sep 6 00:05:47 2022 +0200", "commit_message": "Bump css", "files_name": ["templates/generate_new.html"]}, {"commit_id": "7f7616be40fae1e8a6a58946ec13c1cd86ee5046", "commit_date": "Tue Sep 6 00:01:08 2022 +0200", "commit_message": "Add msreg icon", "files_name": ["templates/generate_new.html", "templates/static/msreg.png", "templates/static/styles.css", "templates/static/styles.min.css"]}, {"commit_id": "11c66dc89947485f504be1e6e93da271abfbdb2b", "commit_date": "Mon Sep 5 23:36:33 2022 +0200", "commit_message": "Fix spelling error", "files_name": ["templates/emails/notification.html"]}, {"commit_id": "eb01491ea981a1b0c91dd6d540125f2d2f8eee69", "commit_date": "Mon Sep 5 23:29:05 2022 +0200", "commit_message": "Fix cmd details", "files_name": ["channel.py", "httpd_site.py", "templates/history.html"]}, {"commit_id": "03d23408eb4367bebfacc08139e8803c3466eb70", "commit_date": "Fri Sep 2 10:58:04 2022 -0600", "commit_message": "Adding more robustness for non-ascii env variables", "files_name": ["channel_dns.py", "msreg.py"]}, {"commit_id": "1aa1c4b455fdce82e0f6f83bea80fdf78e002540", "commit_date": "Fri Sep 2 10:35:37 2022 -0600", "commit_message": "Fix ugly HTML in memo", "files_name": ["httpd_site.py"]}, {"commit_id": "befc2bf252e99f34b0f76d759cdcf5856beb85e2", "commit_date": "Fri Sep 2 09:43:50 2022 -0600", "commit_message": "Formatting improvements for the sensitive cmd exec alerts", "files_name": ["channel_output_email.py", "httpd_site.py", "templates/emails/notification.html", "templates/history.html"]}, {"commit_id": "18874f9d758d52f0d17ea8d0734918c3b75a2535", "commit_date": "Thu Sep 1 18:48:53 2022 -0600", "commit_message": "Fixing additional report for registry token", "files_name": ["channel_dns.py"]}, {"commit_id": "7d32f4497acea771074e5a2efd4066f7bb83b61f", "commit_date": "Thu Sep 1 15:51:16 2022 -0600", "commit_message": "Rearrange order per mh", "files_name": ["templates/generate_new.html"]}, {"commit_id": "900225170b764ed1e51394d0800693cb214ab01f", "commit_date": "Thu Sep 1 15:43:28 2022 -0600", "commit_message": "More wording tweaks per mh", "files_name": ["msreg.py", "templates/generate_new.html"]}, {"commit_id": "a5801aaa4cf9906a30891f5c76ad147911780913", "commit_date": "Thu Sep 1 15:09:42 2022 -0600", "commit_message": "Fixing small capitalization issues in the generate script", "files_name": ["templates/generate_new.html"]}, {"commit_id": "cbe2232ed0a4aa73844fc0e2127242a8c243d21d", "commit_date": "Thu Sep 1 15:06:26 2022 -0600", "commit_message": "Making fixes recommended by Jay to handle weird usernames", "files_name": ["channel_dns.py", "httpd_site.py", "msreg.py"]}, {"commit_id": "3d8649889d2c35ae9624c2fe1c73ac51afc636ab", "commit_date": "Thu Sep 1 16:44:26 2022 -0400", "commit_message": "fix capitalization of GitHub (#129)", "files_name": ["LICENSE"]}, {"commit_id": "f34c8fb4a6ac678778e7d8eac433da6527b7e3e5", "commit_date": "Thu Sep 1 16:52:24 2022 +0200", "commit_message": "Update ubuntu image version in build", "files_name": [".github/workflows/build_docker.yml"]}, {"commit_id": "a3301e00923e5c407fb607824323ee523899733a", "commit_date": "Wed Aug 31 20:06:52 2022 -0600", "commit_message": "Removed completed TODO comment", "files_name": ["msreg.py"]}, {"commit_id": "8738f7163cca6d0c62974430ec64608f044da81a", "commit_date": "Wed Aug 31 16:21:04 2022 -0600", "commit_message": "Adding .exe if needed", "files_name": ["msreg.py"]}, {"commit_id": "af564e06d596cbf962c42033e8295f25547c9725", "commit_date": "Wed Aug 31 16:19:32 2022 -0600", "commit_message": "Adding more slashes", "files_name": ["msreg.py"]}, {"commit_id": "8e94bfdad6f7b295ebdf8e70149f116569698e7c", "commit_date": "Wed Aug 31 16:15:25 2022 -0600", "commit_message": "Adding slashes", "files_name": ["httpd_site.py", "msreg.py"]}, {"commit_id": "a1b0891d61301912f93f56ffac8657e024ddf787", "commit_date": "Wed Aug 31 16:05:37 2022 -0600", "commit_message": "Added processing for process name", "files_name": ["canarydrop.py", "httpd_site.py"]}, {"commit_id": "5918a21a5cb31e17ea34fe1015fc609d10e68579", "commit_date": "Wed Aug 31 15:48:47 2022 -0600", "commit_message": "Fixed issues with msreg", "files_name": ["msreg.py", "templates/generate_new.html"]}, {"commit_id": "5701b7b985a3120d8add15e5f3a54ee28b945074", "commit_date": "Wed Aug 31 15:22:57 2022 -0600", "commit_message": "Fix missing paren in msreg", "files_name": ["msreg.py"]}, {"commit_id": "8e4ddd17edd521a791239d4377edaeb5fd1f9ce9", "commit_date": "Wed Aug 31 15:19:11 2022 -0600", "commit_message": "Added template reg file generation", "files_name": ["msreg.py"]}, {"commit_id": "4a66f3c750adb96444a3941bad597ea26def8450", "commit_date": "Wed Aug 31 14:58:58 2022 -0600", "commit_message": "Added callback for cmd file download", "files_name": ["templates/generate_new.html"]}, {"commit_id": "ebb3abfe637edbab0603680f9b48b18cc75186b2", "commit_date": "Wed Aug 31 14:55:18 2022 -0600", "commit_message": "Added cmd execution callback", "files_name": ["httpd_site.py"]}, {"commit_id": "7b2904376d2e965485b3f9f9ac58db8406da4d7e", "commit_date": "Wed Aug 31 14:42:09 2022 -0600", "commit_message": "Added initial framework for sensitive process execution token", "files_name": ["channel_dns.py", "httpd_site.py", "msreg.py", "templates/generate_new.html"]}, {"commit_id": "7292970e2cbe2f4e8de2c659f22a204281175839", "commit_date": "Wed Aug 31 13:53:32 2022 -0600", "commit_message": "Added new token type to generate_new.html", "files_name": ["templates/generate_new.html"]}, {"commit_id": "299e3ecef45e303e52d3d4e9693fbb4c3a2c9361", "commit_date": "Fri Aug 5 22:47:08 2022 +0100", "commit_message": "Update manage_new.html", "files_name": ["templates/manage_new.html"]}, {"commit_id": "dea5e1f604fd937d30f9f0846f618ddb898629d7", "commit_date": "Fri Aug 5 22:46:42 2022 +0100", "commit_message": "Update history.html", "files_name": ["templates/history.html"]}], "windows_after": [{"commit_id": "91a1a98b6b815e502a44e3dbb26d7033f0472786", "commit_date": "Fri Jan 6 13:23:05 2023 +0200", "commit_message": "Update robots.txt to prevent indexing of tokens", "files_name": ["templates/robots.txt"]}, {"commit_id": "48f06f10376a946a10d96bf16bac43be6d93ab96", "commit_date": "Fri Jan 6 13:30:43 2023 +0200", "commit_message": "Add a security.txt", "files_name": ["httpd_site.py", "templates/security.txt"]}, {"commit_id": "caa98c6bcce7671855964a8d1bf5dffb43d7c9e1", "commit_date": "Tue Jan 10 15:41:45 2023 +0200", "commit_message": "update security.txt (#173)", "files_name": ["SECURITY.md", "templates/security.txt"]}, {"commit_id": "c8f85d5a04348e931f5bfd0e9e2fadb1119b388c", "commit_date": "Sun Jan 15 15:24:37 2023 +0000", "commit_message": "Update SECURITY.md", "files_name": ["SECURITY.md"]}, {"commit_id": "26f7c0d354d16105429330d2963761d36c9aa615", "commit_date": "Sun Jan 15 15:25:52 2023 +0000", "commit_message": "Update security.txt", "files_name": ["templates/security.txt"]}, {"commit_id": "86e62d0062873b64a47e4fe381301eb46f8f3de9", "commit_date": "Fri Jan 20 23:15:51 2023 +0200", "commit_message": "T5173 azure api keys (#172)", "files_name": [".github/workflows/build_docker.yml", "canarydrop.py", "channel_http.py", "httpd_site.py", "queries.py", "settings.py", "templates/generate_new.html", "templates/history.html", "templates/manage_new.html", "templates/static/azure-id.png", "templates/static/styles.css", "templates/static/styles.min.css"]}, {"commit_id": "23b0450dd059b71253e0e4359a6edf3fe824da54", "commit_date": "Fri Jan 20 23:17:52 2023 +0200", "commit_message": "Fix the build targets", "files_name": [".github/workflows/build_docker.yml"]}, {"commit_id": "141207defba30811102708f04431f3ef401738c2", "commit_date": "Wed Jan 25 10:46:04 2023 +0200", "commit_message": "Fix the aws key credentials file (#177)", "files_name": ["httpd_site.py"]}, {"commit_id": "69a769763f2f6793bca80a7d0453b30220a4f2b0", "commit_date": "Fri Jan 27 08:43:44 2023 +0200", "commit_message": "Revert \"T5173 azure api keys (#172)\"", "files_name": ["canarydrop.py", "channel_http.py", "httpd_site.py", "queries.py", "settings.py", "templates/generate_new.html", "templates/history.html", "templates/manage_new.html", "templates/static/azure-id.png", "templates/static/styles.css", "templates/static/styles.min.css"]}, {"commit_id": "9c7b81e186a0a09b987fc4b7925e52500fb76600", "commit_date": "Fri Jan 27 08:42:50 2023 +0200", "commit_message": "Remove unneeded MySQL error log line", "files_name": ["channel_input_mysql.py"]}, {"commit_id": "18d09e457d8e0d80e9128fa713542b23a6eaf887", "commit_date": "Mon Dec 5 13:10:51 2022 -0700", "commit_message": "Add Credit Card token support", "files_name": ["canarydrop.py", "cctoken.py", "channel.py", "channel_http.py", "channel_output_email.py", "datagen.py", "extendtoken.py", "httpd_site.py", "settings.py", "templates/emails/notification.html", "templates/generate_new.html", "templates/history.html", "templates/static/cc-background-AMEX.png", "templates/static/copy-icon.svg", "templates/static/credit-card.png", "templates/static/styles.css", "templates/static/styles.min.css"]}, {"commit_id": "f23a9cf0f7fd4840a2362759617e73a97d04b461", "commit_date": "Mon Jan 16 17:07:48 2023 +0300", "commit_message": "Add banner on Canarytokens.org footer section", "files_name": ["templates/emails/notification.html", "templates/generate_new.html", "templates/history.html", "templates/legal.html", "templates/manage_new.html", "templates/static/styles.css", "templates/static/styles.min.css", "templates/static/thinkst-canary-banner-hi-res-2.png", "templates/static/thinkst-canary-banner-hi-res.png", "templates/static/thinkst-canary-banner-mailer-2.png", "templates/static/thinkst-canary-banner-mailer.png", "templates/static/thinkst-canary-banner-mobile-2.png", "templates/static/thinkst-canary-banner-mobile.png"]}, {"commit_id": "3887cf9df4de965b56d3faeda5e32482e4b8895f", "commit_date": "Fri Jan 27 11:26:56 2023 +0200", "commit_message": "Implement canarytokens search by token name", "files_name": ["templates/generate_new.html", "templates/static/canarytokens-done.png", "templates/static/copy-hover.svg", "templates/static/copy-inactive.svg", "templates/static/idea.svg", "templates/static/styles.css", "templates/static/styles.min.css"]}, {"commit_id": "1ccfe645bfe7d090e679bc2d417e0f740031d393", "commit_date": "Mon Feb 13 08:36:28 2023 +0200", "commit_message": "T5173 azure api keys (#185)", "files_name": ["canarydrop.py", "channel_http.py", "httpd_site.py", "queries.py", "settings.py", "templates/generate_new.html", "templates/history.html", "templates/manage_new.html", "templates/static/azure-id.png", "templates/static/download.svg", "templates/static/styles.css", "templates/static/styles.min.css"]}, {"commit_id": "d497e9d33522dd227d62b26abbfb829016e2d691", "commit_date": "Mon Feb 13 13:38:26 2023 +0200", "commit_message": "Fix json formatting (#187)", "files_name": ["httpd_site.py", "templates/generate_new.html", "templates/manage_new.html"]}, {"commit_id": "bb8f092ce25c45f8c86d583d6116b03a8aa0561d", "commit_date": "Thu Feb 16 15:32:33 2023 +0200", "commit_message": "Add ARM Docker image builds", "files_name": [".github/workflows/build_docker.yml"]}, {"commit_id": "e24ee13dddfc077e13e71ead3aa78fa5eb9f3934", "commit_date": "Fri Feb 17 07:55:37 2023 +0200", "commit_message": "Fixing actions variable", "files_name": [".github/workflows/build_docker.yml"]}, {"commit_id": "11886c68876a13c1f30cfe2545caad5c42309214", "commit_date": "Tue Feb 21 15:00:43 2023 +0200", "commit_message": "Make email send async (#190)", "files_name": ["channel_output_email.py"]}, {"commit_id": "364759f0910b195d057866031bd864086a35bc8f", "commit_date": "Tue Feb 21 16:18:47 2023 +0200", "commit_message": "Revert \"Make email send async (#190)\" (#191)", "files_name": ["channel_output_email.py"]}, {"commit_id": "ba3cf3e7a13517583d75eac40713beed1748d7c9", "commit_date": "Tue Feb 21 16:24:34 2023 +0200", "commit_message": "Revert arm build (#192)", "files_name": [".github/workflows/build_docker.yml"]}, {"commit_id": "fba67dcfe684ffad5fbeeb4ae6e2fe43afef33b6", "commit_date": "Tue Feb 21 16:49:01 2023 +0200", "commit_message": "Reduced the timeout of the connect call to mailgun (#193)", "files_name": ["channel_output_email.py"]}, {"commit_id": "91ac69a4709b75ec106915b3896c73fe7120b9cc", "commit_date": "Fri Feb 24 15:50:40 2023 +0200", "commit_message": "Bring back the ARM build", "files_name": [".github/workflows/build_docker.yml"]}, {"commit_id": "c0e21930bd4d6ff3f4032544f31877e6ef95e0e3", "commit_date": "Mon Feb 27 20:34:40 2023 +0530", "commit_message": "better error message (#198)", "files_name": ["channel_input_mysql.py"]}, {"commit_id": "b605657510eae45ce5920879ac867d8032349691", "commit_date": "Tue Feb 28 08:48:33 2023 +0200", "commit_message": "Fix 2XX responses that are != 200 being treated as failures (#197)", "files_name": ["channel_output_webhook.py"]}, {"commit_id": "4564f88a590ec898e0737d4244ff998c6b5d109b", "commit_date": "Tue Feb 28 00:05:33 2023 -0700", "commit_message": "Allow for token_id to be in GET arguments  (#186)", "files_name": ["channel_http.py"]}, {"commit_id": "6dfc747473661fbedf1dd9234add11bd2cc622fd", "commit_date": "Tue Mar 7 08:01:41 2023 +0200", "commit_message": "Handle Extend errors as one", "files_name": ["httpd_site.py"]}, {"commit_id": "3454dddfa3cd71e206d22ac96dc3d5aeacc01dcf", "commit_date": "Tue Mar 14 20:31:28 2023 +0000", "commit_message": "Delete fix-typos.yml", "files_name": [".github/workflows/fix-typos.yml"]}, {"commit_id": "5f71d491d1f36306bfd91318f12ed9cf829439d9", "commit_date": "Thu Mar 16 17:16:28 2023 +0200", "commit_message": "Add User-Agent header to webhook test request (#203)", "files_name": ["queries.py"]}, {"commit_id": "251befd2f7be96023363d51f544b9c614c462002", "commit_date": "Thu Apr 13 15:44:03 2023 +0100", "commit_message": "chore(typos): fix typos (#204)", "files_name": ["aws-token-infra/lambdas/APITokensSafetyNet/lambda_function.py", "templates/manage_new.html"]}, {"commit_id": "a83b897fda73bc0209200bceec5761a9ced89bae", "commit_date": "Tue May 2 13:52:27 2023 +0200", "commit_message": "Remove invalid CSS (#213)", "files_name": ["templates/manage_new.html"]}, {"commit_id": "b05791309f8ecde20e6c38d1590093de832f626a", "commit_date": "Fri May 5 12:46:22 2023 +0200", "commit_message": "Fix typo (#215)", "files_name": ["templates/generate_new.html"]}, {"commit_id": "d2767e18c77ce931dae45188ee00d27a29076f63", "commit_date": "Fri May 19 08:09:26 2023 -0700", "commit_message": "Correct \"cute\" spelling for the correct one instead", "files_name": ["templates/generate_new.html"]}, {"commit_id": "6674f13cd32cb9554b99364b2758c450e4980c83", "commit_date": "Fri Jun 16 08:21:33 2023 +0200", "commit_message": "fix incident sorting (#220)", "files_name": ["httpd_site.py", "templates/history.html"]}, {"commit_id": "201823979efd0c9ead73184a8da81f3928a55cdf", "commit_date": "Wed Jun 21 17:03:20 2023 +0200", "commit_message": "Update the Safety Net lambda to report failures", "files_name": ["aws-token-infra/awsid.tf", "aws-token-infra/lambdas/APITokensSafetyNet/lambda_function.py", "aws-token-infra/lambdas/APITokensSafetyNet/lambda_function_payload.zip", "aws-token-infra/lambdas/CreateUserAPITokens/lambda_function_payload.zip", "aws-token-infra/lambdas/ProcessUserAPITokensLogs/lambda_function_payload.zip"]}, {"commit_id": "066be9cc78f3a498c57ab67cf9c7223752901d77", "commit_date": "Wed Jun 21 21:31:02 2023 +0200", "commit_message": "Bug fixes for AWS safety net", "files_name": ["aws-token-infra/lambdas/APITokensSafetyNet/lambda_function.py", "aws-token-infra/lambdas/APITokensSafetyNet/lambda_function_payload.zip"]}, {"commit_id": "85f3616adb2724e4f033c976869444430088f9af", "commit_date": "Thu Jun 22 15:03:12 2023 +0200", "commit_message": "Increase the SafetyNet timeout", "files_name": ["aws-token-infra/lambdas/APITokensSafetyNet/lambda_function.py"]}, {"commit_id": "a6ebc04064a1e743f51e0db474868fbd52f97043", "commit_date": "Mon Aug 29 14:11:35 2022 +0200", "commit_message": "update html for py3 rework.", "files_name": ["templates/emails/notification.html", "templates/generate.html", "templates/generate_new.html", "templates/history.html", "templates/manage_new.html"]}, {"commit_id": "a2853d3712bb65a6756e6199ada7240a12c7fa73", "commit_date": "Tue Aug 30 10:55:20 2022 +0200", "commit_message": "rm v2 .py files", "files_name": ["authenticode.py", "caa_monkeypatch.py", "canarydrop.py", "cctoken.py"]}], "parents": [{"commit_id_before": "10b9a1344a47c50c510767455ece985ee91284ef", "url_before": "https://api.github.com/repos/thinkst/canarytokens/commits/10b9a1344a47c50c510767455ece985ee91284ef", "html_url_before": "https://github.com/thinkst/canarytokens/commit/10b9a1344a47c50c510767455ece985ee91284ef"}], "details": [{"raw_url": "https://github.com/thinkst/canarytokens/raw/fb612906f2217bbb8863199694891d16e20bad3e/httpd_site.py", "code": "import base64\nimport simplejson\nimport cgi\n\nfrom twisted.web import server, resource\nfrom twisted.application import internet\nfrom twisted.web.server import Site, GzipEncoderFactory\nimport twisted.web.resource\nfrom twisted.web.resource import Resource, EncodingResourceWrapper, \\\n                                 ForbiddenResource, NoResource\n\nfrom twisted.web.static import File, DirectoryLister, Data\n\nfrom twisted.web.util import Redirect\nfrom twisted.logger import Logger\nlog = Logger()\nfrom jinja2 import Environment, FileSystemLoader\nimport pyqrcode\n\n\nfrom tokens import Canarytoken\nfrom canarydrop import Canarydrop\nfrom queries import is_valid_email, save_canarydrop, save_imgur_token, get_canarydrop,\\\n                    create_linkedin_account, create_bitcoin_account,\\\n                    get_linkedin_account, get_bitcoin_account, \\\n                    save_clonedsite_token, get_all_canary_sites, get_canary_google_api_key,\\\n                    is_webhook_valid, get_aws_keys, get_all_canary_domains, is_email_blocked\n\nfrom exception import NoCanarytokenPresent\nfrom ziplib import make_canary_zip\nfrom msword import make_canary_msword\nfrom pdfgen import make_canary_pdf\nfrom msexcel import make_canary_msexcel\nfrom kubeconfig import get_kubeconfig\nfrom mysql import make_canary_mysql_dump\nfrom authenticode import make_canary_authenticode_binary\nfrom msreg import make_canary_msreg\nimport settings\nimport datetime\nimport tempfile\nimport hashlib\nimport os\nfrom cStringIO import StringIO\nimport csv\nimport wireguard as wg\n\nunsafe_env = Environment(loader=FileSystemLoader('templates'),\n                  extensions=['jinja2.ext.loopcontrols'])\nenv = Environment(loader=FileSystemLoader('templates'),\n                  extensions=['jinja2.ext.loopcontrols'],\n                  autoescape=True)\n\nwith open('/srv/templates/error_http.html', 'r') as f:\n    twisted.web.resource.ErrorPage.template = f.read()\n\nclass GeneratorPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        template = unsafe_env.get_template('generate_new.html')\n        sites_len = len(get_all_canary_sites())\n        now = datetime.datetime.now()\n        return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { 'Error': None,\n                     'Error_Message': None,\n                     'Url': \"\",\n                     'Url_components': None,\n                     'Token': \"\",\n                     'Email': \"\",\n                     'Hostname': \"\",\n                     'Auth': ''}\n\n        try:\n            try:\n                token_type = request.args.get('type', None)[0]\n                if token_type not in ['web',\n                                      'dns',\n                                      'cmd',\n                                      'web_image',\n                                      'ms_word',\n                                      'ms_excel',\n                                      'adobe_pdf',\n                                      'wireguard',\n                                      'windows_dir',\n                                      'clonedsite',\n                                      'qr_code',\n                                      'svn',\n                                      'smtp',\n                                      'sql_server',\n                                      'my_sql',\n                                      'aws_keys',\n                                      'signed_exe',\n                                      'fast_redirect',\n                                      'slow_redirect',\n                                      'kubeconfig',\n                                      'log4shell']:\n                    raise Exception()\n            except:\n                raise Exception('Unknown type')\n\n            try:\n                email = request.args.get('email', None)[0]\n                webhook = request.args.get('webhook', None)[0]\n                if not email and not webhook:\n                    response['Error'] = 1\n                    response['Error_Message'] = 'No email/webhook supplied'\n                    raise Exception('No email/webhook supplied')\n            except IndexError:\n                response['Error'] = 1\n                response['Error_Message'] = 'No email supplied'\n                raise Exception('No email supplied')\n            try:\n                memo  = ''.join(request.args.get('memo', None))\n                if not memo:\n                    response['Error'] = 2\n                    response['Error_Message'] = 'No memo supplied'\n                    raise Exception('No memo supplied')\n            except TypeError:\n                response['Error'] = 2\n                response['Error_Message'] = 'No memo supplied'\n                raise Exception('No memo supplied')\n\n            if webhook and not is_webhook_valid(webhook):\n                response['Error'] = 3\n                response['Error_Message'] = 'Invalid webhook supplied. Confirm you can POST to this URL.'\n                raise Exception('Invalid webhook supplied. Confirm you can POST to this URL.')\n\n            if email:\n                if not is_valid_email(email):\n                    response['Error'] = 5\n                    response['Error_Message'] = 'Invalid email supplied'\n                    raise Exception('Invalid email supplied')\n                if is_email_blocked(email):\n                    response['Error'] = 6\n                    response['Error_Message'] = 'Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal'\n                    raise Exception('Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal')\n\n            alert_email_enabled = False if not email else True\n            alert_webhook_enabled = False if not webhook else True\n\n            if token_type != 'kubeconfig':\n                canarytoken = Canarytoken()\n            else:\n                kubeconfig = get_kubeconfig()\n                if kubeconfig is not None:\n                    canarytoken = Canarytoken(value=kubeconfig[0])\n                else:\n                    raise Exception('Kubeconfig was not generated.')\n\n            if token_type == \"web\":\n                #always enable the browser scanner by default\n                browser_scanner = True\n            else:\n                browser_scanner = False\n\n            canarydrop = Canarydrop(type=token_type,generate=True,\n                                  alert_email_enabled=alert_email_enabled,\n                                  alert_email_recipient=email,\n                                  alert_webhook_enabled=alert_webhook_enabled,\n                                  alert_webhook_url=webhook,\n                                  canarytoken=canarytoken.value(),\n                                  memo=memo,\n                                  browser_scanner_enabled=browser_scanner)\n\n            if settings.TWILIO_ENABLED:\n                try:\n                    if not request.args['mobile'][0]:\n                        raise KeyError\n\n                    canarydrop['alert_sms_recipient'] = request.args['mobile'][0]\n                    canarydrop['alert_sms_enabled'] = True\n                except KeyError:\n                    canarydrop['alert_sms_recipient'] = ''\n                    canarydrop['alert_sms_enabled'] = False\n\n            save_canarydrop(canarydrop)\n\n            if token_type != \"kubeconfig\":\n                response['Url'] = canarydrop.get_url()\n                response['Hostname'] = canarydrop.get_hostname()\n                response['Url_components'] = list(canarydrop.get_url_components())\n\n            response['Token'] = canarytoken.value()\n            response['Auth'] = canarydrop['auth']\n            response['Email'] = email\n            save_canarydrop(canarydrop)\n\n\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': canarytoken.value()}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                canarydrop['clonedsite'] = clonedsite\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                pass\n\n            try:\n                procname = request.args['cmd_process'][0]\n                if not procname:\n                    raise KeyError\n\n                canarydrop['cmd_process'] = procname\n                canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                save_canarydrop(canarydrop)\n            except (IndexError, KeyError):\n                pass\n\n\n            try:\n                if not request.args.get('type', None)[0] == 'qr_code':\n                    raise Exception()\n                response['qrcode_png'] = canarydrop.get_qrcode_data_uri_png()\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'aws_keys':\n                    raise Exception()\n                keys = get_aws_keys(token=canarytoken.value(), server=get_all_canary_domains()[0])\n                if not keys:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve AWS API keys. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['aws_access_key_id'] = keys[0]\n                response['aws_secret_access_key'] = keys[1]\n                response['region'] = keys[2]\n                response['output'] = keys[3]\n                canarydrop['aws_access_key_id'] = keys[0]\n                canarydrop['aws_secret_access_key'] = keys[1]\n                canarydrop['region'] = keys[2]\n                canarydrop['output'] = keys[3]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'kubeconfig':\n                    raise Exception()\n                if kubeconfig is None:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve the kubeconfig. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['kubeconfig'] = kubeconfig[1]\n                canarydrop['kubeconfig'] = kubeconfig[1]\n                canarydrop['generate'] = False\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'web_image':\n                    raise Exception()\n\n                if not settings.WEB_IMAGE_UPLOAD_PATH:\n                    raise Exception(\"Image upload not supported, set CANARY_WEB_IMAGE_UPLOAD_PATH in frontend.env.\")\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )\n\n                filename = fields['web_image'].filename\n                filebody = fields['web_image'].value\n\n                if not filename.lower().endswith(('.png','.gif','.jpg')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded image must be a PNG, GIF or JPG.'\n                    raise Exception('Uploaded image must be a PNG, GIF or JPG')\n                ext = filename.lower()[-4:]\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                #create a random local filename\n                r = hashlib.md5(os.urandom(32)).hexdigest()\n                filepath = os.path.join(settings.WEB_IMAGE_UPLOAD_PATH,\n                                    r[:2],\n                                    r[2:])+ext\n                if not os.path.exists(os.path.dirname(filepath)):\n                    try:\n                        os.makedirs(os.path.dirname(filepath))\n                    except OSError as exc: # Guard against race condition\n                        if exc.errno != errno.EEXIST:\n                            raise\n\n                with open(filepath, \"w\") as f:\n                    f.write(filebody)\n\n                canarydrop['web_image_enabled'] = True\n                canarydrop['web_image_path'] = filepath\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'signed_exe':\n                    raise Exception()\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )#hacky way to parse out file contents and filenames\n                filename = fields['signed_exe'].filename\n                filebody = fields['signed_exe'].value\n\n                if not filename.lower().endswith(('exe','dll')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded authenticode file must be an exe or dll.'\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE/(1024*1024))) + 'MB.'\n                    raise Exception('File too large')\n\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                response['file_name'] = filename\n                response['file_contents'] = \"data:octet/stream;base64,\"+base64.b64encode(signed_contents)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'fast_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'slow_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            if token_type == 'wireguard':\n                canarydrop['wg_key'] = wg.generateCanarytokenPrivateKey(canarydrop[\"canarytoken\"])\n                save_canarydrop(canarydrop)\n                response['wg_conf'] = canarydrop.get_wg_conf()\n                response['qr_code'] = canarydrop.get_wg_qrcode()\n\n        except Exception as e:\n            if response['Error'] is None:\n                response['Error'] = 255\n                log.error('Unexpected error: {err}'.format(err=e))\n\n        return simplejson.dumps(response)\n\nclass DownloadPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            auth   = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'zip':\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.zip'\\\n                                  .format(token=token))\n                return make_canary_zip(hostname=\n                            canarydrop.get_hostname(with_random=False))\n            elif fmt == 'msword':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".wordprocessingml.document\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.docx'\\\n                                  .format(token=token))\n                return make_canary_msword(url=canarydrop.get_url())\n            elif fmt == 'msexcel':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".spreadsheetml.sheet\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.xlsx'\\\n                                  .format(token=token))\n                return make_canary_msexcel(url=canarydrop.get_url())\n            elif fmt == 'cmd':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\", 'attachment; filename={token}.reg'.format(token=token))\n                return make_canary_msreg(url=canarydrop.get_hostname(), process_name=canarydrop['cmd_process'])\n            elif fmt == 'pdf':\n                request.setHeader(\"Content-Type\", \"application/pdf\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.pdf'\\\n                                  .format(token=token))\n                return make_canary_pdf(hostname=canarydrop.get_hostname(nxdomain=True, with_random=False))\n            elif fmt == 'awskeys':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=credentials')\n                text=\"[default]\\naws_access_key={id}\\naws_secret_access_key={k}\\nregion={r}\\noutput={o}\"\\\n                        .format(id=canarydrop['aws_access_key_id'], k=canarydrop['aws_secret_access_key'], r=canarydrop['region'], o=canarydrop['output'])\n                return text\n            elif fmt == 'kubeconfig':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=kubeconfig')\n                return base64.b64decode(canarydrop['kubeconfig']).encode('utf-8')\n            elif fmt == 'slackapi':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=slack_creds')\n                text=\"# Slack API key\\nslack_api_key = {key}\".format(key=canarydrop['slack_api_key'])\n                return text\n            elif fmt == 'incidentlist_json':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.json'\\\n                                  .format(token=token))\n                return simplejson.dumps(canarydrop['triggered_list'], indent=4)\n            elif fmt == 'incidentlist_csv':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.csv'\\\n                                  .format(token=token))\n                csvOutput = StringIO()\n                incident_list = canarydrop['triggered_list']\n\n                writer = csv.writer(csvOutput)\n\n                details = set()\n                for key in incident_list:\n                    for element in incident_list[key].keys():\n                        details.add(element)\n                details = list(details)\n\n                headers = [\"Timestamp\"] + details\n                writer.writerow(headers)\n\n                for key in incident_list:\n                    items = []\n                    for item in details:\n                        items.append(incident_list[key].get(item, 'N/A'))\n                    data = [datetime.datetime.fromtimestamp(float(key)).strftime('%Y-%m-%d %H:%M:%S.%s')] + items\n                    writer.writerow(data)\n\n                return csvOutput.getvalue()\n            elif fmt == \"my_sql\":\n                encoded   = request.args.get('encoded', \"true\")[0] == \"true\"\n\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_mysql_dump.sql.gz'\\\n                                  .format(token=token))\n                return make_canary_mysql_dump(canarydrop=canarydrop, encoded=encoded)\n\n        except Exception as e:\n            log.error('Unexpected error in download: {err}'.format(err=e))\n\n        return NoResource().render(request)\n\n    def render_POST(self, request):\n        try:\n            fields = cgi.FieldStorage(\n                fp = request.content,\n                headers = request.getAllHeaders(),\n                environ = {'REQUEST_METHOD':'POST',\n                'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                }\n            )#hacky way to parse out file contents and filenames\n\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            if fmt not in ['authenticode']:\n                raise Exception('Unsupported token type for POST.')\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'authenticode':\n                filename = fields['file_for_signing'].filename\n                filebody = fields['file_for_signing'].value\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                if not filename.lower().endswith(('exe','dll')):\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                request.setHeader(\"Content-Type\", \"octet/stream\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={filename}.signed'\\\n                                  .format(filename=filename))\n                return signed_contents\n\n\n        except Exception as e:\n            log.error('Unexpected error in POST download: {err}'.format(err=e))\n            template = unsafe_env.get_template('error.html')\n            return template.render(error=e.message).encode('utf8')\n\n        return NoResource().render(request)\n\nclass ManagePage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        try:\n            canarydrop['type']\n            template = unsafe_env.get_template('manage_new.html')\n        except KeyError:\n            template = unsafe_env.get_template('manage.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n    def render_POST(self, request):\n        try:\n            try:\n                token = request.args.get('token', None)[0]\n                auth  = request.args.get('auth',  None)[0]\n\n                canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n                if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                    raise NoCanarytokenPresent()\n\n            except (IndexError, TypeError, NoCanarytokenPresent):\n                return NoResource().render(request)\n\n            try:\n                email_enable_status = request.args.get('email_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                email_enable_status = False\n\n            try:\n                webhook_enable_status = request.args.get('webhook_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                webhook_enable_status = False\n\n            try:\n                sms_enable_status = request.args.get('sms_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                sms_enable_status = False\n\n            try:\n                web_image_status = request.args.get('web_image_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                web_image_status = False\n\n            try:\n                token_fmt = request.args.get('fmt', None)[0]\n            except (TypeError, IndexError):\n                token_fmt = ''\n\n            canarydrop['alert_email_enabled'] = email_enable_status\n            canarydrop['alert_webhook_enabled'] = webhook_enable_status\n            canarydrop['alert_sms_enabled']   = sms_enable_status\n            canarydrop['web_image_enabled']   = web_image_status\n\n            save_canarydrop(canarydrop=canarydrop)\n\n            g_api_key = get_canary_google_api_key()\n            template = unsafe_env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, saved=True,\n                                        settings=settings, API_KEY=g_api_key).encode('utf8')\n\n        except Exception as e:\n            import traceback\n            log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n            template = unsafe_env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, error=e,\n                                        settings=settings).encode('utf8')\n\nclass HistoryPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S.%f (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n            if canarydrop.get('memo'):\n                canarydrop['memo'] = unicode(canarydrop['memo'], \"utf8\")\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        template = env.get_template('history.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n\nclass LimitedFile(File):\n    def directoryListing(self):\n        dl = DirectoryLister(self.path,\n                               [],\n                               self.contentTypes,\n                               self.contentEncodings,\n                               self.defaultType)\n        dl.template = \"\"\n        return dl\n\nclass SettingsPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { }\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth',  None)[0]\n            setting = request.args.get('setting',  None)[0]\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if setting not in ['clonedsite', 'email_enable', 'webhook_enable',\n                               'sms_enable', 'browser_scanner_enable', 'web_image_enable']:\n                raise NoCanarytokenPresent()\n\n        except (IndexError, TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n\n        if setting == 'clonedsite':\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': token}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                return NoResource().render(request)\n        elif setting == \"email_enable\":\n            canarydrop['alert_email_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"webhook_enable\":\n            canarydrop['alert_webhook_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"sms_enable\":\n            canarydrop['alert_sms_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"browser_scanner_enable\":\n            canarydrop['browser_scanner_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"web_image_enable\":\n            canarydrop['web_image_enabled'] = request.args['value'][0] == \"on\"\n\n        save_canarydrop(canarydrop=canarydrop)\n        response['result'] = 'success'\n\n        return simplejson.dumps(response)\n\nclass AUP(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        now = datetime.datetime.now()\n        template = unsafe_env.get_template('legal.html')\n        return template.render(now=now).encode('utf8')\n\nclass CanarytokensHttpd():\n    def __init__(self, port=80):\n        self.port = port\n\n        root = Resource()\n        root.putChild(\"\", Redirect(\"generate\"))\n        root.putChild(\"generate\", GeneratorPage())\n        root.putChild(\"manage\", ManagePage())\n        root.putChild(\"download\", DownloadPage())\n        root.putChild(\"settings\", SettingsPage())\n        root.putChild(\"history\", HistoryPage())\n        root.putChild(\"resources\", LimitedFile(\"/srv/templates/static\"))\n        root.putChild(\"legal\", AUP())\n\n        with open('/srv/templates/robots.txt', 'r') as f:\n            root.putChild(\"robots.txt\", Data(f.read(), \"text/plain\"))\n\n        wrapped = EncodingResourceWrapper(root, [GzipEncoderFactory()])\n        site = server.Site(wrapped)\n        if settings.DEBUG:\n            site.displayTracebacks = settings.DEBUG\n        else:\n            site.displayTracebacks = False\n        self.service = internet.TCPServer(self.port, site)\n        return None\n", "code_before": "import base64\nimport simplejson\nimport cgi\n\nfrom twisted.web import server, resource\nfrom twisted.application import internet\nfrom twisted.web.server import Site, GzipEncoderFactory\nimport twisted.web.resource\nfrom twisted.web.resource import Resource, EncodingResourceWrapper, \\\n                                 ForbiddenResource, NoResource\n\nfrom twisted.web.static import File, DirectoryLister, Data\n\nfrom twisted.web.util import Redirect\nfrom twisted.logger import Logger\nlog = Logger()\nfrom jinja2 import Environment, FileSystemLoader\nimport pyqrcode\n\n\nfrom tokens import Canarytoken\nfrom canarydrop import Canarydrop\nfrom queries import is_valid_email, save_canarydrop, save_imgur_token, get_canarydrop,\\\n                    create_linkedin_account, create_bitcoin_account,\\\n                    get_linkedin_account, get_bitcoin_account, \\\n                    save_clonedsite_token, get_all_canary_sites, get_canary_google_api_key,\\\n                    is_webhook_valid, get_aws_keys, get_all_canary_domains, is_email_blocked\n\nfrom exception import NoCanarytokenPresent\nfrom ziplib import make_canary_zip\nfrom msword import make_canary_msword\nfrom pdfgen import make_canary_pdf\nfrom msexcel import make_canary_msexcel\nfrom kubeconfig import get_kubeconfig\nfrom mysql import make_canary_mysql_dump\nfrom authenticode import make_canary_authenticode_binary\nfrom msreg import make_canary_msreg\nimport settings\nimport datetime\nimport tempfile\nimport hashlib\nimport os\nfrom cStringIO import StringIO\nimport csv\nimport wireguard as wg\n\nenv = Environment(loader=FileSystemLoader('templates'),\n                  extensions=['jinja2.ext.loopcontrols'])\n\nwith open('/srv/templates/error_http.html', 'r') as f:\n    twisted.web.resource.ErrorPage.template = f.read()\n\nclass GeneratorPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        template = env.get_template('generate_new.html')\n        sites_len = len(get_all_canary_sites())\n        now = datetime.datetime.now()\n        return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { 'Error': None,\n                     'Error_Message': None,\n                     'Url': \"\",\n                     'Url_components': None,\n                     'Token': \"\",\n                     'Email': \"\",\n                     'Hostname': \"\",\n                     'Auth': ''}\n\n        try:\n            try:\n                token_type = request.args.get('type', None)[0]\n                if token_type not in ['web',\n                                      'dns',\n                                      'cmd',\n                                      'web_image',\n                                      'ms_word',\n                                      'ms_excel',\n                                      'adobe_pdf',\n                                      'wireguard',\n                                      'windows_dir',\n                                      'clonedsite',\n                                      'qr_code',\n                                      'svn',\n                                      'smtp',\n                                      'sql_server',\n                                      'my_sql',\n                                      'aws_keys',\n                                      'signed_exe',\n                                      'fast_redirect',\n                                      'slow_redirect',\n                                      'kubeconfig',\n                                      'log4shell']:\n                    raise Exception()\n            except:\n                raise Exception('Unknown type')\n\n            try:\n                email = request.args.get('email', None)[0]\n                webhook = request.args.get('webhook', None)[0]\n                if not email and not webhook:\n                    response['Error'] = 1\n                    response['Error_Message'] = 'No email/webhook supplied'\n                    raise Exception('No email/webhook supplied')\n            except IndexError:\n                response['Error'] = 1\n                response['Error_Message'] = 'No email supplied'\n                raise Exception('No email supplied')\n            try:\n                memo  = ''.join(request.args.get('memo', None))\n                if not memo:\n                    response['Error'] = 2\n                    response['Error_Message'] = 'No memo supplied'\n                    raise Exception('No memo supplied')\n            except TypeError:\n                response['Error'] = 2\n                response['Error_Message'] = 'No memo supplied'\n                raise Exception('No memo supplied')\n\n            if webhook and not is_webhook_valid(webhook):\n                response['Error'] = 3\n                response['Error_Message'] = 'Invalid webhook supplied. Confirm you can POST to this URL.'\n                raise Exception('Invalid webhook supplied. Confirm you can POST to this URL.')\n\n            if email:\n                if not is_valid_email(email):\n                    response['Error'] = 5\n                    response['Error_Message'] = 'Invalid email supplied'\n                    raise Exception('Invalid email supplied')\n                if is_email_blocked(email):\n                    response['Error'] = 6\n                    response['Error_Message'] = 'Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal'\n                    raise Exception('Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal')\n\n            alert_email_enabled = False if not email else True\n            alert_webhook_enabled = False if not webhook else True\n\n            if token_type != 'kubeconfig':\n                canarytoken = Canarytoken()\n            else:\n                kubeconfig = get_kubeconfig()\n                if kubeconfig is not None:\n                    canarytoken = Canarytoken(value=kubeconfig[0])\n                else:\n                    raise Exception('Kubeconfig was not generated.')\n\n            if token_type == \"web\":\n                #always enable the browser scanner by default\n                browser_scanner = True\n            else:\n                browser_scanner = False\n\n            canarydrop = Canarydrop(type=token_type,generate=True,\n                                  alert_email_enabled=alert_email_enabled,\n                                  alert_email_recipient=email,\n                                  alert_webhook_enabled=alert_webhook_enabled,\n                                  alert_webhook_url=webhook,\n                                  canarytoken=canarytoken.value(),\n                                  memo=memo,\n                                  browser_scanner_enabled=browser_scanner)\n\n            if settings.TWILIO_ENABLED:\n                try:\n                    if not request.args['mobile'][0]:\n                        raise KeyError\n\n                    canarydrop['alert_sms_recipient'] = request.args['mobile'][0]\n                    canarydrop['alert_sms_enabled'] = True\n                except KeyError:\n                    canarydrop['alert_sms_recipient'] = ''\n                    canarydrop['alert_sms_enabled'] = False\n\n            save_canarydrop(canarydrop)\n\n            if token_type != \"kubeconfig\":\n                response['Url'] = canarydrop.get_url()\n                response['Hostname'] = canarydrop.get_hostname()\n                response['Url_components'] = list(canarydrop.get_url_components())\n\n            response['Token'] = canarytoken.value()\n            response['Auth'] = canarydrop['auth']\n            response['Email'] = email\n            save_canarydrop(canarydrop)\n\n\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': canarytoken.value()}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                canarydrop['clonedsite'] = clonedsite\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                pass\n\n            try:\n                procname = request.args['cmd_process'][0]\n                if not procname:\n                    raise KeyError\n                \n                canarydrop['cmd_process'] = procname\n                canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                save_canarydrop(canarydrop)\n            except (IndexError, KeyError):\n                pass\n\n\n            try:\n                if not request.args.get('type', None)[0] == 'qr_code':\n                    raise Exception()\n                response['qrcode_png'] = canarydrop.get_qrcode_data_uri_png()\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'aws_keys':\n                    raise Exception()\n                keys = get_aws_keys(token=canarytoken.value(), server=get_all_canary_domains()[0])\n                if not keys:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve AWS API keys. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['aws_access_key_id'] = keys[0]\n                response['aws_secret_access_key'] = keys[1]\n                response['region'] = keys[2]\n                response['output'] = keys[3]\n                canarydrop['aws_access_key_id'] = keys[0]\n                canarydrop['aws_secret_access_key'] = keys[1]\n                canarydrop['region'] = keys[2]\n                canarydrop['output'] = keys[3]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'kubeconfig':\n                    raise Exception()\n                if kubeconfig is None:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve the kubeconfig. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['kubeconfig'] = kubeconfig[1]\n                canarydrop['kubeconfig'] = kubeconfig[1]\n                canarydrop['generate'] = False\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'web_image':\n                    raise Exception()\n\n                if not settings.WEB_IMAGE_UPLOAD_PATH:\n                    raise Exception(\"Image upload not supported, set CANARY_WEB_IMAGE_UPLOAD_PATH in frontend.env.\")\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )\n\n                filename = fields['web_image'].filename\n                filebody = fields['web_image'].value\n\n                if not filename.lower().endswith(('.png','.gif','.jpg')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded image must be a PNG, GIF or JPG.'\n                    raise Exception('Uploaded image must be a PNG, GIF or JPG')\n                ext = filename.lower()[-4:]\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                #create a random local filename\n                r = hashlib.md5(os.urandom(32)).hexdigest()\n                filepath = os.path.join(settings.WEB_IMAGE_UPLOAD_PATH,\n                                    r[:2],\n                                    r[2:])+ext\n                if not os.path.exists(os.path.dirname(filepath)):\n                    try:\n                        os.makedirs(os.path.dirname(filepath))\n                    except OSError as exc: # Guard against race condition\n                        if exc.errno != errno.EEXIST:\n                            raise\n\n                with open(filepath, \"w\") as f:\n                    f.write(filebody)\n\n                canarydrop['web_image_enabled'] = True\n                canarydrop['web_image_path'] = filepath\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'signed_exe':\n                    raise Exception()\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )#hacky way to parse out file contents and filenames\n                filename = fields['signed_exe'].filename\n                filebody = fields['signed_exe'].value\n\n                if not filename.lower().endswith(('exe','dll')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded authenticode file must be an exe or dll.'\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE/(1024*1024))) + 'MB.'\n                    raise Exception('File too large')\n\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                response['file_name'] = filename\n                response['file_contents'] = \"data:octet/stream;base64,\"+base64.b64encode(signed_contents)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'fast_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'slow_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            if token_type == 'wireguard':\n                canarydrop['wg_key'] = wg.generateCanarytokenPrivateKey(canarydrop[\"canarytoken\"])\n                save_canarydrop(canarydrop)\n                response['wg_conf'] = canarydrop.get_wg_conf()\n                response['qr_code'] = canarydrop.get_wg_qrcode()\n\n        except Exception as e:\n            if response['Error'] is None:\n                response['Error'] = 255\n                log.error('Unexpected error: {err}'.format(err=e))\n\n        return simplejson.dumps(response)\n\nclass DownloadPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            auth   = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'zip':\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.zip'\\\n                                  .format(token=token))\n                return make_canary_zip(hostname=\n                            canarydrop.get_hostname(with_random=False))\n            elif fmt == 'msword':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".wordprocessingml.document\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.docx'\\\n                                  .format(token=token))\n                return make_canary_msword(url=canarydrop.get_url())\n            elif fmt == 'msexcel':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".spreadsheetml.sheet\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.xlsx'\\\n                                  .format(token=token))\n                return make_canary_msexcel(url=canarydrop.get_url())\n            elif fmt == 'cmd':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\", 'attachment; filename={token}.reg'.format(token=token))\n                return make_canary_msreg(url=canarydrop.get_hostname(), process_name=canarydrop['cmd_process'])\n            elif fmt == 'pdf':\n                request.setHeader(\"Content-Type\", \"application/pdf\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.pdf'\\\n                                  .format(token=token))\n                return make_canary_pdf(hostname=canarydrop.get_hostname(nxdomain=True, with_random=False))\n            elif fmt == 'awskeys':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=credentials')\n                text=\"[default]\\naws_access_key={id}\\naws_secret_access_key={k}\\nregion={r}\\noutput={o}\"\\\n                        .format(id=canarydrop['aws_access_key_id'], k=canarydrop['aws_secret_access_key'], r=canarydrop['region'], o=canarydrop['output'])\n                return text\n            elif fmt == 'kubeconfig':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=kubeconfig')\n                return base64.b64decode(canarydrop['kubeconfig']).encode('utf-8')\n            elif fmt == 'slackapi':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=slack_creds')\n                text=\"# Slack API key\\nslack_api_key = {key}\".format(key=canarydrop['slack_api_key'])\n                return text\n            elif fmt == 'incidentlist_json':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.json'\\\n                                  .format(token=token))\n                return simplejson.dumps(canarydrop['triggered_list'], indent=4)\n            elif fmt == 'incidentlist_csv':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.csv'\\\n                                  .format(token=token))\n                csvOutput = StringIO()\n                incident_list = canarydrop['triggered_list']\n\n                writer = csv.writer(csvOutput)\n\n                details = set()\n                for key in incident_list:\n                    for element in incident_list[key].keys():\n                        details.add(element)\n                details = list(details)\n\n                headers = [\"Timestamp\"] + details\n                writer.writerow(headers)\n\n                for key in incident_list:\n                    items = []\n                    for item in details:\n                        items.append(incident_list[key].get(item, 'N/A'))\n                    data = [datetime.datetime.fromtimestamp(float(key)).strftime('%Y-%m-%d %H:%M:%S.%s')] + items\n                    writer.writerow(data)\n\n                return csvOutput.getvalue()\n            elif fmt == \"my_sql\":\n                encoded   = request.args.get('encoded', \"true\")[0] == \"true\"\n\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_mysql_dump.sql.gz'\\\n                                  .format(token=token))\n                return make_canary_mysql_dump(canarydrop=canarydrop, encoded=encoded)\n\n        except Exception as e:\n            log.error('Unexpected error in download: {err}'.format(err=e))\n\n        return NoResource().render(request)\n\n    def render_POST(self, request):\n        try:\n            fields = cgi.FieldStorage(\n                fp = request.content,\n                headers = request.getAllHeaders(),\n                environ = {'REQUEST_METHOD':'POST',\n                'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                }\n            )#hacky way to parse out file contents and filenames\n\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            if fmt not in ['authenticode']:\n                raise Exception('Unsupported token type for POST.')\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'authenticode':\n                filename = fields['file_for_signing'].filename\n                filebody = fields['file_for_signing'].value\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                if not filename.lower().endswith(('exe','dll')):\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                request.setHeader(\"Content-Type\", \"octet/stream\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={filename}.signed'\\\n                                  .format(filename=filename))\n                return signed_contents\n\n\n        except Exception as e:\n            log.error('Unexpected error in POST download: {err}'.format(err=e))\n            template = env.get_template('error.html')\n            return template.render(error=e.message).encode('utf8')\n\n        return NoResource().render(request)\n\nclass ManagePage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        try:\n            canarydrop['type']\n            template = env.get_template('manage_new.html')\n        except KeyError:\n            template = env.get_template('manage.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n    def render_POST(self, request):\n        try:\n            try:\n                token = request.args.get('token', None)[0]\n                auth  = request.args.get('auth',  None)[0]\n\n                canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n                if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                    raise NoCanarytokenPresent()\n\n            except (IndexError, TypeError, NoCanarytokenPresent):\n                return NoResource().render(request)\n\n            try:\n                email_enable_status = request.args.get('email_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                email_enable_status = False\n\n            try:\n                webhook_enable_status = request.args.get('webhook_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                webhook_enable_status = False\n\n            try:\n                sms_enable_status = request.args.get('sms_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                sms_enable_status = False\n\n            try:\n                web_image_status = request.args.get('web_image_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                web_image_status = False\n\n            try:\n                token_fmt = request.args.get('fmt', None)[0]\n            except (TypeError, IndexError):\n                token_fmt = ''\n\n            canarydrop['alert_email_enabled'] = email_enable_status\n            canarydrop['alert_webhook_enabled'] = webhook_enable_status\n            canarydrop['alert_sms_enabled']   = sms_enable_status\n            canarydrop['web_image_enabled']   = web_image_status\n\n            save_canarydrop(canarydrop=canarydrop)\n\n            g_api_key = get_canary_google_api_key()\n            template = env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, saved=True,\n                                        settings=settings, API_KEY=g_api_key).encode('utf8')\n\n        except Exception as e:\n            import traceback\n            log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n            template = env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, error=e,\n                                        settings=settings).encode('utf8')\n\nclass HistoryPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S.%f (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n            if canarydrop.get('memo'):\n                canarydrop['memo'] = unicode(canarydrop['memo'], \"utf8\")\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        template = env.get_template('history.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n\nclass LimitedFile(File):\n    def directoryListing(self):\n        dl = DirectoryLister(self.path,\n                               [],\n                               self.contentTypes,\n                               self.contentEncodings,\n                               self.defaultType)\n        dl.template = \"\"\n        return dl\n\nclass SettingsPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { }\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth',  None)[0]\n            setting = request.args.get('setting',  None)[0]\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if setting not in ['clonedsite', 'email_enable', 'webhook_enable',\n                               'sms_enable', 'browser_scanner_enable', 'web_image_enable']:\n                raise NoCanarytokenPresent()\n\n        except (IndexError, TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n\n        if setting == 'clonedsite':\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': token}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                return NoResource().render(request)\n        elif setting == \"email_enable\":\n            canarydrop['alert_email_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"webhook_enable\":\n            canarydrop['alert_webhook_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"sms_enable\":\n            canarydrop['alert_sms_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"browser_scanner_enable\":\n            canarydrop['browser_scanner_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"web_image_enable\":\n            canarydrop['web_image_enabled'] = request.args['value'][0] == \"on\"\n\n        save_canarydrop(canarydrop=canarydrop)\n        response['result'] = 'success'\n\n        return simplejson.dumps(response)\n\nclass AUP(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        now = datetime.datetime.now()\n        template = env.get_template('legal.html')\n        return template.render(now=now).encode('utf8')\n\nclass CanarytokensHttpd():\n    def __init__(self, port=80):\n        self.port = port\n\n        root = Resource()\n        root.putChild(\"\", Redirect(\"generate\"))\n        root.putChild(\"generate\", GeneratorPage())\n        root.putChild(\"manage\", ManagePage())\n        root.putChild(\"download\", DownloadPage())\n        root.putChild(\"settings\", SettingsPage())\n        root.putChild(\"history\", HistoryPage())\n        root.putChild(\"resources\", LimitedFile(\"/srv/templates/static\"))\n        root.putChild(\"legal\", AUP())\n\n        with open('/srv/templates/robots.txt', 'r') as f:\n            root.putChild(\"robots.txt\", Data(f.read(), \"text/plain\"))\n\n        wrapped = EncodingResourceWrapper(root, [GzipEncoderFactory()])\n        site = server.Site(wrapped)\n        if settings.DEBUG:\n            site.displayTracebacks = settings.DEBUG\n        else:\n            site.displayTracebacks = False\n        self.service = internet.TCPServer(self.port, site)\n        return None\n", "patch": "@@ -44,8 +44,11 @@\n import csv\n import wireguard as wg\n \n-env = Environment(loader=FileSystemLoader('templates'),\n+unsafe_env = Environment(loader=FileSystemLoader('templates'),\n                   extensions=['jinja2.ext.loopcontrols'])\n+env = Environment(loader=FileSystemLoader('templates'),\n+                  extensions=['jinja2.ext.loopcontrols'],\n+                  autoescape=True)\n \n with open('/srv/templates/error_http.html', 'r') as f:\n     twisted.web.resource.ErrorPage.template = f.read()\n@@ -59,7 +62,7 @@ def getChild(self, name, request):\n         return Resource.getChild(self, name, request)\n \n     def render_GET(self, request):\n-        template = env.get_template('generate_new.html')\n+        template = unsafe_env.get_template('generate_new.html')\n         sites_len = len(get_all_canary_sites())\n         now = datetime.datetime.now()\n         return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n@@ -211,7 +214,7 @@ def render_POST(self, request):\n                 procname = request.args['cmd_process'][0]\n                 if not procname:\n                     raise KeyError\n-                \n+\n                 canarydrop['cmd_process'] = procname\n                 canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                 save_canarydrop(canarydrop)\n@@ -537,7 +540,7 @@ def render_POST(self, request):\n \n         except Exception as e:\n             log.error('Unexpected error in POST download: {err}'.format(err=e))\n-            template = env.get_template('error.html')\n+            template = unsafe_env.get_template('error.html')\n             return template.render(error=e.message).encode('utf8')\n \n         return NoResource().render(request)\n@@ -570,9 +573,9 @@ def render_GET(self, request):\n         now = datetime.datetime.now()\n         try:\n             canarydrop['type']\n-            template = env.get_template('manage_new.html')\n+            template = unsafe_env.get_template('manage_new.html')\n         except KeyError:\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n         return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n \n     def render_POST(self, request):\n@@ -621,14 +624,14 @@ def render_POST(self, request):\n             save_canarydrop(canarydrop=canarydrop)\n \n             g_api_key = get_canary_google_api_key()\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n             return template.render(canarydrop=canarydrop, saved=True,\n                                         settings=settings, API_KEY=g_api_key).encode('utf8')\n \n         except Exception as e:\n             import traceback\n             log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n             return template.render(canarydrop=canarydrop, error=e,\n                                         settings=settings).encode('utf8')\n \n@@ -741,7 +744,7 @@ def getChild(self, name, request):\n \n     def render_GET(self, request):\n         now = datetime.datetime.now()\n-        template = env.get_template('legal.html')\n+        template = unsafe_env.get_template('legal.html')\n         return template.render(now=now).encode('utf8')\n \n class CanarytokensHttpd():", "file_path": "files/2023_1/1909", "file_language": "py", "file_name": "httpd_site.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2                     \n          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which   \n          opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the   \n          Flask method 'render_template()' and templates with a '.html' extension in order to prevent\n          XSS.                                                                                       \n          Details: https://sg.run/RoKe                                                               \n          745\u2506 return template.render(now=now).encode('utf8')", "       python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2                     \n          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which   \n          opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the   \n          Flask method 'render_template()' and templates with a '.html' extension in order to prevent\n          XSS.                                                                                       \n          Details: https://sg.run/RoKe                                                               \n\n          632\u2506 return template.render(canarydrop=canarydrop, error=e,\n          633\u2506                             settings=settings).encode('utf8')", "       python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2                     \n          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which   \n          opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the   \n          Flask method 'render_template()' and templates with a '.html' extension in order to prevent\n          XSS.                                                                                       \n          Details: https://sg.run/RoKe                                                               \n\n          625\u2506 return template.render(canarydrop=canarydrop, saved=True,\n          626\u2506                             settings=settings, API_KEY=g_api_key).encode('utf8')", "       python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2                     \n          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which   \n          opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the   \n          Flask method 'render_template()' and templates with a '.html' extension in order to prevent\n          XSS.                                                                                       \n          Details: https://sg.run/RoKe                                                               \n\n          541\u2506 return template.render(error=e.message).encode('utf8')", "       python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2                     \n          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which   \n          opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the   \n          Flask method 'render_template()' and templates with a '.html' extension in order to prevent\n          XSS.                                                                                       \n          Details: https://sg.run/RoKe                                                               \n\n           65\u2506 return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')", "       python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2                     \n          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which   \n          opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the   \n          Flask method 'render_template()' and templates with a '.html' extension in order to prevent\n          XSS.                                                                                       \n          Details: https://sg.run/RoKe                                                               \n\n           47\u2506 env = Environment(loader=FileSystemLoader('templates'),\n           48\u2506                   extensions=['jinja2.ext.loopcontrols'])"]]}, "target": 1, "function_before": [{"function": "class GeneratorPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        template = env.get_template('generate_new.html')\n        sites_len = len(get_all_canary_sites())\n        now = datetime.datetime.now()\n        return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { 'Error': None,\n                     'Error_Message': None,\n                     'Url': \"\",\n                     'Url_components': None,\n                     'Token': \"\",\n                     'Email': \"\",\n                     'Hostname': \"\",\n                     'Auth': ''}\n\n        try:\n            try:\n                token_type = request.args.get('type', None)[0]\n                if token_type not in ['web',\n                                      'dns',\n                                      'cmd',\n                                      'web_image',\n                                      'ms_word',\n                                      'ms_excel',\n                                      'adobe_pdf',\n                                      'wireguard',\n                                      'windows_dir',\n                                      'clonedsite',\n                                      'qr_code',\n                                      'svn',\n                                      'smtp',\n                                      'sql_server',\n                                      'my_sql',\n                                      'aws_keys',\n                                      'signed_exe',\n                                      'fast_redirect',\n                                      'slow_redirect',\n                                      'kubeconfig',\n                                      'log4shell']:\n                    raise Exception()\n            except:\n                raise Exception('Unknown type')\n\n            try:\n                email = request.args.get('email', None)[0]\n                webhook = request.args.get('webhook', None)[0]\n                if not email and not webhook:\n                    response['Error'] = 1\n                    response['Error_Message'] = 'No email/webhook supplied'\n                    raise Exception('No email/webhook supplied')\n            except IndexError:\n                response['Error'] = 1\n                response['Error_Message'] = 'No email supplied'\n                raise Exception('No email supplied')\n            try:\n                memo  = ''.join(request.args.get('memo', None))\n                if not memo:\n                    response['Error'] = 2\n                    response['Error_Message'] = 'No memo supplied'\n                    raise Exception('No memo supplied')\n            except TypeError:\n                response['Error'] = 2\n                response['Error_Message'] = 'No memo supplied'\n                raise Exception('No memo supplied')\n\n            if webhook and not is_webhook_valid(webhook):\n                response['Error'] = 3\n                response['Error_Message'] = 'Invalid webhook supplied. Confirm you can POST to this URL.'\n                raise Exception('Invalid webhook supplied. Confirm you can POST to this URL.')\n\n            if email:\n                if not is_valid_email(email):\n                    response['Error'] = 5\n                    response['Error_Message'] = 'Invalid email supplied'\n                    raise Exception('Invalid email supplied')\n                if is_email_blocked(email):\n                    response['Error'] = 6\n                    response['Error_Message'] = 'Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal'\n                    raise Exception('Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal')\n\n            alert_email_enabled = False if not email else True\n            alert_webhook_enabled = False if not webhook else True\n\n            if token_type != 'kubeconfig':\n                canarytoken = Canarytoken()\n            else:\n                kubeconfig = get_kubeconfig()\n                if kubeconfig is not None:\n                    canarytoken = Canarytoken(value=kubeconfig[0])\n                else:\n                    raise Exception('Kubeconfig was not generated.')\n\n            if token_type == \"web\":\n                #always enable the browser scanner by default\n                browser_scanner = True\n            else:\n                browser_scanner = False\n\n            canarydrop = Canarydrop(type=token_type,generate=True,\n                                  alert_email_enabled=alert_email_enabled,\n                                  alert_email_recipient=email,\n                                  alert_webhook_enabled=alert_webhook_enabled,\n                                  alert_webhook_url=webhook,\n                                  canarytoken=canarytoken.value(),\n                                  memo=memo,\n                                  browser_scanner_enabled=browser_scanner)\n\n            if settings.TWILIO_ENABLED:\n                try:\n                    if not request.args['mobile'][0]:\n                        raise KeyError\n\n                    canarydrop['alert_sms_recipient'] = request.args['mobile'][0]\n                    canarydrop['alert_sms_enabled'] = True\n                except KeyError:\n                    canarydrop['alert_sms_recipient'] = ''\n                    canarydrop['alert_sms_enabled'] = False\n\n            save_canarydrop(canarydrop)\n\n            if token_type != \"kubeconfig\":\n                response['Url'] = canarydrop.get_url()\n                response['Hostname'] = canarydrop.get_hostname()\n                response['Url_components'] = list(canarydrop.get_url_components())\n\n            response['Token'] = canarytoken.value()\n            response['Auth'] = canarydrop['auth']\n            response['Email'] = email\n            save_canarydrop(canarydrop)\n\n\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': canarytoken.value()}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                canarydrop['clonedsite'] = clonedsite\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                pass\n\n            try:\n                procname = request.args['cmd_process'][0]\n                if not procname:\n                    raise KeyError\n                \n                canarydrop['cmd_process'] = procname\n                canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                save_canarydrop(canarydrop)\n            except (IndexError, KeyError):\n                pass\n\n\n            try:\n                if not request.args.get('type', None)[0] == 'qr_code':\n                    raise Exception()\n                response['qrcode_png'] = canarydrop.get_qrcode_data_uri_png()\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'aws_keys':\n                    raise Exception()\n                keys = get_aws_keys(token=canarytoken.value(), server=get_all_canary_domains()[0])\n                if not keys:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve AWS API keys. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['aws_access_key_id'] = keys[0]\n                response['aws_secret_access_key'] = keys[1]\n                response['region'] = keys[2]\n                response['output'] = keys[3]\n                canarydrop['aws_access_key_id'] = keys[0]\n                canarydrop['aws_secret_access_key'] = keys[1]\n                canarydrop['region'] = keys[2]\n                canarydrop['output'] = keys[3]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'kubeconfig':\n                    raise Exception()\n                if kubeconfig is None:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve the kubeconfig. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['kubeconfig'] = kubeconfig[1]\n                canarydrop['kubeconfig'] = kubeconfig[1]\n                canarydrop['generate'] = False\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'web_image':\n                    raise Exception()\n\n                if not settings.WEB_IMAGE_UPLOAD_PATH:\n                    raise Exception(\"Image upload not supported, set CANARY_WEB_IMAGE_UPLOAD_PATH in frontend.env.\")\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )\n\n                filename = fields['web_image'].filename\n                filebody = fields['web_image'].value\n\n                if not filename.lower().endswith(('.png','.gif','.jpg')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded image must be a PNG, GIF or JPG.'\n                    raise Exception('Uploaded image must be a PNG, GIF or JPG')\n                ext = filename.lower()[-4:]\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                #create a random local filename\n                r = hashlib.md5(os.urandom(32)).hexdigest()\n                filepath = os.path.join(settings.WEB_IMAGE_UPLOAD_PATH,\n                                    r[:2],\n                                    r[2:])+ext\n                if not os.path.exists(os.path.dirname(filepath)):\n                    try:\n                        os.makedirs(os.path.dirname(filepath))\n                    except OSError as exc: # Guard against race condition\n                        if exc.errno != errno.EEXIST:\n                            raise\n\n                with open(filepath, \"w\") as f:\n                    f.write(filebody)\n\n                canarydrop['web_image_enabled'] = True\n                canarydrop['web_image_path'] = filepath\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'signed_exe':\n                    raise Exception()\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )#hacky way to parse out file contents and filenames\n                filename = fields['signed_exe'].filename\n                filebody = fields['signed_exe'].value\n\n                if not filename.lower().endswith(('exe','dll')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded authenticode file must be an exe or dll.'\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE/(1024*1024))) + 'MB.'\n                    raise Exception('File too large')\n\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                response['file_name'] = filename\n                response['file_contents'] = \"data:octet/stream;base64,\"+base64.b64encode(signed_contents)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'fast_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'slow_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            if token_type == 'wireguard':\n                canarydrop['wg_key'] = wg.generateCanarytokenPrivateKey(canarydrop[\"canarytoken\"])\n                save_canarydrop(canarydrop)\n                response['wg_conf'] = canarydrop.get_wg_conf()\n                response['qr_code'] = canarydrop.get_wg_qrcode()\n\n        except Exception as e:\n            if response['Error'] is None:\n                response['Error'] = 255\n                log.error('Unexpected error: {err}'.format(err=e))\n\n        return simplejson.dumps(response)", "target": 1, "line": "@@  -59,7 +62,7  @@ def getChild(self, name, request):\n         return Resource.getChild(self, name, request)\n \n     def render_GET(self, request):\n-        template = env.get_template('generate_new.html')\n+        template = unsafe_env.get_template('generate_new.html')\n         sites_len = len(get_all_canary_sites())\n         now = datetime.datetime.now()\n         return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n@@  -211,7 +214,7  @@ def render_POST(self, request):\n                 procname = request.args['cmd_process'][0]\n                 if not procname:\n                     raise KeyError\n-                \n+\n                 canarydrop['cmd_process'] = procname\n                 canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                 save_canarydrop(canarydrop)\n"}, {"function": "class DownloadPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            auth   = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'zip':\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.zip'\\\n                                  .format(token=token))\n                return make_canary_zip(hostname=\n                            canarydrop.get_hostname(with_random=False))\n            elif fmt == 'msword':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".wordprocessingml.document\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.docx'\\\n                                  .format(token=token))\n                return make_canary_msword(url=canarydrop.get_url())\n            elif fmt == 'msexcel':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".spreadsheetml.sheet\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.xlsx'\\\n                                  .format(token=token))\n                return make_canary_msexcel(url=canarydrop.get_url())\n            elif fmt == 'cmd':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\", 'attachment; filename={token}.reg'.format(token=token))\n                return make_canary_msreg(url=canarydrop.get_hostname(), process_name=canarydrop['cmd_process'])\n            elif fmt == 'pdf':\n                request.setHeader(\"Content-Type\", \"application/pdf\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.pdf'\\\n                                  .format(token=token))\n                return make_canary_pdf(hostname=canarydrop.get_hostname(nxdomain=True, with_random=False))\n            elif fmt == 'awskeys':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=credentials')\n                text=\"[default]\\naws_access_key={id}\\naws_secret_access_key={k}\\nregion={r}\\noutput={o}\"\\\n                        .format(id=canarydrop['aws_access_key_id'], k=canarydrop['aws_secret_access_key'], r=canarydrop['region'], o=canarydrop['output'])\n                return text\n            elif fmt == 'kubeconfig':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=kubeconfig')\n                return base64.b64decode(canarydrop['kubeconfig']).encode('utf-8')\n            elif fmt == 'slackapi':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=slack_creds')\n                text=\"# Slack API key\\nslack_api_key = {key}\".format(key=canarydrop['slack_api_key'])\n                return text\n            elif fmt == 'incidentlist_json':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.json'\\\n                                  .format(token=token))\n                return simplejson.dumps(canarydrop['triggered_list'], indent=4)\n            elif fmt == 'incidentlist_csv':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.csv'\\\n                                  .format(token=token))\n                csvOutput = StringIO()\n                incident_list = canarydrop['triggered_list']\n\n                writer = csv.writer(csvOutput)\n\n                details = set()\n                for key in incident_list:\n                    for element in incident_list[key].keys():\n                        details.add(element)\n                details = list(details)\n\n                headers = [\"Timestamp\"] + details\n                writer.writerow(headers)\n\n                for key in incident_list:\n                    items = []\n                    for item in details:\n                        items.append(incident_list[key].get(item, 'N/A'))\n                    data = [datetime.datetime.fromtimestamp(float(key)).strftime('%Y-%m-%d %H:%M:%S.%s')] + items\n                    writer.writerow(data)\n\n                return csvOutput.getvalue()\n            elif fmt == \"my_sql\":\n                encoded   = request.args.get('encoded', \"true\")[0] == \"true\"\n\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_mysql_dump.sql.gz'\\\n                                  .format(token=token))\n                return make_canary_mysql_dump(canarydrop=canarydrop, encoded=encoded)\n\n        except Exception as e:\n            log.error('Unexpected error in download: {err}'.format(err=e))\n\n        return NoResource().render(request)\n\n    def render_POST(self, request):\n        try:\n            fields = cgi.FieldStorage(\n                fp = request.content,\n                headers = request.getAllHeaders(),\n                environ = {'REQUEST_METHOD':'POST',\n                'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                }\n            )#hacky way to parse out file contents and filenames\n\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            if fmt not in ['authenticode']:\n                raise Exception('Unsupported token type for POST.')\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'authenticode':\n                filename = fields['file_for_signing'].filename\n                filebody = fields['file_for_signing'].value\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                if not filename.lower().endswith(('exe','dll')):\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                request.setHeader(\"Content-Type\", \"octet/stream\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={filename}.signed'\\\n                                  .format(filename=filename))\n                return signed_contents\n\n\n        except Exception as e:\n            log.error('Unexpected error in POST download: {err}'.format(err=e))\n            template = env.get_template('error.html')\n            return template.render(error=e.message).encode('utf8')\n\n        return NoResource().render(request)", "target": 1, "line": "@@  -537,7 +540,7  @@ def render_POST(self, request):\n \n         except Exception as e:\n             log.error('Unexpected error in POST download: {err}'.format(err=e))\n-            template = env.get_template('error.html')\n+            template = unsafe_env.get_template('error.html')\n             return template.render(error=e.message).encode('utf8')\n \n         return NoResource().render(request)\n"}, {"function": "class ManagePage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        try:\n            canarydrop['type']\n            template = env.get_template('manage_new.html')\n        except KeyError:\n            template = env.get_template('manage.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n    def render_POST(self, request):\n        try:\n            try:\n                token = request.args.get('token', None)[0]\n                auth  = request.args.get('auth',  None)[0]\n\n                canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n                if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                    raise NoCanarytokenPresent()\n\n            except (IndexError, TypeError, NoCanarytokenPresent):\n                return NoResource().render(request)\n\n            try:\n                email_enable_status = request.args.get('email_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                email_enable_status = False\n\n            try:\n                webhook_enable_status = request.args.get('webhook_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                webhook_enable_status = False\n\n            try:\n                sms_enable_status = request.args.get('sms_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                sms_enable_status = False\n\n            try:\n                web_image_status = request.args.get('web_image_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                web_image_status = False\n\n            try:\n                token_fmt = request.args.get('fmt', None)[0]\n            except (TypeError, IndexError):\n                token_fmt = ''\n\n            canarydrop['alert_email_enabled'] = email_enable_status\n            canarydrop['alert_webhook_enabled'] = webhook_enable_status\n            canarydrop['alert_sms_enabled']   = sms_enable_status\n            canarydrop['web_image_enabled']   = web_image_status\n\n            save_canarydrop(canarydrop=canarydrop)\n\n            g_api_key = get_canary_google_api_key()\n            template = env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, saved=True,\n                                        settings=settings, API_KEY=g_api_key).encode('utf8')\n\n        except Exception as e:\n            import traceback\n            log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n            template = env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, error=e,\n                                        settings=settings).encode('utf8')", "target": 1, "line": "@@  -570,9 +573,9  @@ def render_GET(self, request):\n         now = datetime.datetime.now()\n         try:\n             canarydrop['type']\n-            template = env.get_template('manage_new.html')\n+            template = unsafe_env.get_template('manage_new.html')\n         except KeyError:\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n         return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n \n     def render_POST(self, request):\n@@  -621,14 +624,14  @@ def render_POST(self, request):\n             save_canarydrop(canarydrop=canarydrop)\n \n             g_api_key = get_canary_google_api_key()\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n             return template.render(canarydrop=canarydrop, saved=True,\n                                         settings=settings, API_KEY=g_api_key).encode('utf8')\n \n         except Exception as e:\n             import traceback\n             log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n             return template.render(canarydrop=canarydrop, error=e,\n                                         settings=settings).encode('utf8')\n \n"}, {"function": "class HistoryPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S.%f (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n            if canarydrop.get('memo'):\n                canarydrop['memo'] = unicode(canarydrop['memo'], \"utf8\")\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        template = env.get_template('history.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')", "target": 1, "line": "@@  -621,14 +624,14  @@ def render_POST(self, request):\n             save_canarydrop(canarydrop=canarydrop)\n \n             g_api_key = get_canary_google_api_key()\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n             return template.render(canarydrop=canarydrop, saved=True,\n                                         settings=settings, API_KEY=g_api_key).encode('utf8')\n \n         except Exception as e:\n             import traceback\n             log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n-            template = env.get_template('manage.html')\n+            template = unsafe_env.get_template('manage.html')\n             return template.render(canarydrop=canarydrop, error=e,\n                                         settings=settings).encode('utf8')\n \n"}, {"function": "class LimitedFile(File):\n    def directoryListing(self):\n        dl = DirectoryLister(self.path,\n                               [],\n                               self.contentTypes,\n                               self.contentEncodings,\n                               self.defaultType)\n        dl.template = \"\"\n        return dl", "target": 0}, {"function": "class SettingsPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { }\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth',  None)[0]\n            setting = request.args.get('setting',  None)[0]\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if setting not in ['clonedsite', 'email_enable', 'webhook_enable',\n                               'sms_enable', 'browser_scanner_enable', 'web_image_enable']:\n                raise NoCanarytokenPresent()\n\n        except (IndexError, TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n\n        if setting == 'clonedsite':\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': token}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                return NoResource().render(request)\n        elif setting == \"email_enable\":\n            canarydrop['alert_email_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"webhook_enable\":\n            canarydrop['alert_webhook_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"sms_enable\":\n            canarydrop['alert_sms_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"browser_scanner_enable\":\n            canarydrop['browser_scanner_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"web_image_enable\":\n            canarydrop['web_image_enabled'] = request.args['value'][0] == \"on\"\n\n        save_canarydrop(canarydrop=canarydrop)\n        response['result'] = 'success'\n\n        return simplejson.dumps(response)", "target": 0}, {"function": "class AUP(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        now = datetime.datetime.now()\n        template = env.get_template('legal.html')\n        return template.render(now=now).encode('utf8')", "target": 1, "line": "@@  -741,7 +744,7  @@ def getChild(self, name, request):\n \n     def render_GET(self, request):\n         now = datetime.datetime.now()\n-        template = env.get_template('legal.html')\n+        template = unsafe_env.get_template('legal.html')\n         return template.render(now=now).encode('utf8')\n \n class CanarytokensHttpd():"}, {"function": "class CanarytokensHttpd():\n    def __init__(self, port=80):\n        self.port = port\n\n        root = Resource()\n        root.putChild(\"\", Redirect(\"generate\"))\n        root.putChild(\"generate\", GeneratorPage())\n        root.putChild(\"manage\", ManagePage())\n        root.putChild(\"download\", DownloadPage())\n        root.putChild(\"settings\", SettingsPage())\n        root.putChild(\"history\", HistoryPage())\n        root.putChild(\"resources\", LimitedFile(\"/srv/templates/static\"))\n        root.putChild(\"legal\", AUP())\n\n        with open('/srv/templates/robots.txt', 'r') as f:\n            root.putChild(\"robots.txt\", Data(f.read(), \"text/plain\"))\n\n        wrapped = EncodingResourceWrapper(root, [GzipEncoderFactory()])\n        site = server.Site(wrapped)\n        if settings.DEBUG:\n            site.displayTracebacks = settings.DEBUG\n        else:\n            site.displayTracebacks = False\n        self.service = internet.TCPServer(self.port, site)\n        return None", "target": 1, "line": "@@  -741,7 +744,7  @@ def getChild(self, name, request):\n \n     def render_GET(self, request):\n         now = datetime.datetime.now()\n-        template = env.get_template('legal.html')\n+        template = unsafe_env.get_template('legal.html')\n         return template.render(now=now).encode('utf8')\n \n class CanarytokensHttpd():"}], "function_after": [{"function": "class GeneratorPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        template = unsafe_env.get_template('generate_new.html')\n        sites_len = len(get_all_canary_sites())\n        now = datetime.datetime.now()\n        return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { 'Error': None,\n                     'Error_Message': None,\n                     'Url': \"\",\n                     'Url_components': None,\n                     'Token': \"\",\n                     'Email': \"\",\n                     'Hostname': \"\",\n                     'Auth': ''}\n\n        try:\n            try:\n                token_type = request.args.get('type', None)[0]\n                if token_type not in ['web',\n                                      'dns',\n                                      'cmd',\n                                      'web_image',\n                                      'ms_word',\n                                      'ms_excel',\n                                      'adobe_pdf',\n                                      'wireguard',\n                                      'windows_dir',\n                                      'clonedsite',\n                                      'qr_code',\n                                      'svn',\n                                      'smtp',\n                                      'sql_server',\n                                      'my_sql',\n                                      'aws_keys',\n                                      'signed_exe',\n                                      'fast_redirect',\n                                      'slow_redirect',\n                                      'kubeconfig',\n                                      'log4shell']:\n                    raise Exception()\n            except:\n                raise Exception('Unknown type')\n\n            try:\n                email = request.args.get('email', None)[0]\n                webhook = request.args.get('webhook', None)[0]\n                if not email and not webhook:\n                    response['Error'] = 1\n                    response['Error_Message'] = 'No email/webhook supplied'\n                    raise Exception('No email/webhook supplied')\n            except IndexError:\n                response['Error'] = 1\n                response['Error_Message'] = 'No email supplied'\n                raise Exception('No email supplied')\n            try:\n                memo  = ''.join(request.args.get('memo', None))\n                if not memo:\n                    response['Error'] = 2\n                    response['Error_Message'] = 'No memo supplied'\n                    raise Exception('No memo supplied')\n            except TypeError:\n                response['Error'] = 2\n                response['Error_Message'] = 'No memo supplied'\n                raise Exception('No memo supplied')\n\n            if webhook and not is_webhook_valid(webhook):\n                response['Error'] = 3\n                response['Error_Message'] = 'Invalid webhook supplied. Confirm you can POST to this URL.'\n                raise Exception('Invalid webhook supplied. Confirm you can POST to this URL.')\n\n            if email:\n                if not is_valid_email(email):\n                    response['Error'] = 5\n                    response['Error_Message'] = 'Invalid email supplied'\n                    raise Exception('Invalid email supplied')\n                if is_email_blocked(email):\n                    response['Error'] = 6\n                    response['Error_Message'] = 'Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal'\n                    raise Exception('Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal')\n\n            alert_email_enabled = False if not email else True\n            alert_webhook_enabled = False if not webhook else True\n\n            if token_type != 'kubeconfig':\n                canarytoken = Canarytoken()\n            else:\n                kubeconfig = get_kubeconfig()\n                if kubeconfig is not None:\n                    canarytoken = Canarytoken(value=kubeconfig[0])\n                else:\n                    raise Exception('Kubeconfig was not generated.')\n\n            if token_type == \"web\":\n                #always enable the browser scanner by default\n                browser_scanner = True\n            else:\n                browser_scanner = False\n\n            canarydrop = Canarydrop(type=token_type,generate=True,\n                                  alert_email_enabled=alert_email_enabled,\n                                  alert_email_recipient=email,\n                                  alert_webhook_enabled=alert_webhook_enabled,\n                                  alert_webhook_url=webhook,\n                                  canarytoken=canarytoken.value(),\n                                  memo=memo,\n                                  browser_scanner_enabled=browser_scanner)\n\n            if settings.TWILIO_ENABLED:\n                try:\n                    if not request.args['mobile'][0]:\n                        raise KeyError\n\n                    canarydrop['alert_sms_recipient'] = request.args['mobile'][0]\n                    canarydrop['alert_sms_enabled'] = True\n                except KeyError:\n                    canarydrop['alert_sms_recipient'] = ''\n                    canarydrop['alert_sms_enabled'] = False\n\n            save_canarydrop(canarydrop)\n\n            if token_type != \"kubeconfig\":\n                response['Url'] = canarydrop.get_url()\n                response['Hostname'] = canarydrop.get_hostname()\n                response['Url_components'] = list(canarydrop.get_url_components())\n\n            response['Token'] = canarytoken.value()\n            response['Auth'] = canarydrop['auth']\n            response['Email'] = email\n            save_canarydrop(canarydrop)\n\n\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': canarytoken.value()}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                canarydrop['clonedsite'] = clonedsite\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                pass\n\n            try:\n                procname = request.args['cmd_process'][0]\n                if not procname:\n                    raise KeyError\n\n                canarydrop['cmd_process'] = procname\n                canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                save_canarydrop(canarydrop)\n            except (IndexError, KeyError):\n                pass\n\n\n            try:\n                if not request.args.get('type', None)[0] == 'qr_code':\n                    raise Exception()\n                response['qrcode_png'] = canarydrop.get_qrcode_data_uri_png()\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'aws_keys':\n                    raise Exception()\n                keys = get_aws_keys(token=canarytoken.value(), server=get_all_canary_domains()[0])\n                if not keys:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve AWS API keys. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['aws_access_key_id'] = keys[0]\n                response['aws_secret_access_key'] = keys[1]\n                response['region'] = keys[2]\n                response['output'] = keys[3]\n                canarydrop['aws_access_key_id'] = keys[0]\n                canarydrop['aws_secret_access_key'] = keys[1]\n                canarydrop['region'] = keys[2]\n                canarydrop['output'] = keys[3]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'kubeconfig':\n                    raise Exception()\n                if kubeconfig is None:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve the kubeconfig. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['kubeconfig'] = kubeconfig[1]\n                canarydrop['kubeconfig'] = kubeconfig[1]\n                canarydrop['generate'] = False\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'web_image':\n                    raise Exception()\n\n                if not settings.WEB_IMAGE_UPLOAD_PATH:\n                    raise Exception(\"Image upload not supported, set CANARY_WEB_IMAGE_UPLOAD_PATH in frontend.env.\")\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )\n\n                filename = fields['web_image'].filename\n                filebody = fields['web_image'].value\n\n                if not filename.lower().endswith(('.png','.gif','.jpg')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded image must be a PNG, GIF or JPG.'\n                    raise Exception('Uploaded image must be a PNG, GIF or JPG')\n                ext = filename.lower()[-4:]\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                #create a random local filename\n                r = hashlib.md5(os.urandom(32)).hexdigest()\n                filepath = os.path.join(settings.WEB_IMAGE_UPLOAD_PATH,\n                                    r[:2],\n                                    r[2:])+ext\n                if not os.path.exists(os.path.dirname(filepath)):\n                    try:\n                        os.makedirs(os.path.dirname(filepath))\n                    except OSError as exc: # Guard against race condition\n                        if exc.errno != errno.EEXIST:\n                            raise\n\n                with open(filepath, \"w\") as f:\n                    f.write(filebody)\n\n                canarydrop['web_image_enabled'] = True\n                canarydrop['web_image_path'] = filepath\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'signed_exe':\n                    raise Exception()\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )#hacky way to parse out file contents and filenames\n                filename = fields['signed_exe'].filename\n                filebody = fields['signed_exe'].value\n\n                if not filename.lower().endswith(('exe','dll')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded authenticode file must be an exe or dll.'\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE/(1024*1024))) + 'MB.'\n                    raise Exception('File too large')\n\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                response['file_name'] = filename\n                response['file_contents'] = \"data:octet/stream;base64,\"+base64.b64encode(signed_contents)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'fast_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'slow_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            if token_type == 'wireguard':\n                canarydrop['wg_key'] = wg.generateCanarytokenPrivateKey(canarydrop[\"canarytoken\"])\n                save_canarydrop(canarydrop)\n                response['wg_conf'] = canarydrop.get_wg_conf()\n                response['qr_code'] = canarydrop.get_wg_qrcode()\n\n        except Exception as e:\n            if response['Error'] is None:\n                response['Error'] = 255\n                log.error('Unexpected error: {err}'.format(err=e))\n\n        return simplejson.dumps(response)", "target": 0}, {"function": "class DownloadPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            auth   = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'zip':\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.zip'\\\n                                  .format(token=token))\n                return make_canary_zip(hostname=\n                            canarydrop.get_hostname(with_random=False))\n            elif fmt == 'msword':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".wordprocessingml.document\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.docx'\\\n                                  .format(token=token))\n                return make_canary_msword(url=canarydrop.get_url())\n            elif fmt == 'msexcel':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".spreadsheetml.sheet\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.xlsx'\\\n                                  .format(token=token))\n                return make_canary_msexcel(url=canarydrop.get_url())\n            elif fmt == 'cmd':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\", 'attachment; filename={token}.reg'.format(token=token))\n                return make_canary_msreg(url=canarydrop.get_hostname(), process_name=canarydrop['cmd_process'])\n            elif fmt == 'pdf':\n                request.setHeader(\"Content-Type\", \"application/pdf\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.pdf'\\\n                                  .format(token=token))\n                return make_canary_pdf(hostname=canarydrop.get_hostname(nxdomain=True, with_random=False))\n            elif fmt == 'awskeys':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=credentials')\n                text=\"[default]\\naws_access_key={id}\\naws_secret_access_key={k}\\nregion={r}\\noutput={o}\"\\\n                        .format(id=canarydrop['aws_access_key_id'], k=canarydrop['aws_secret_access_key'], r=canarydrop['region'], o=canarydrop['output'])\n                return text\n            elif fmt == 'kubeconfig':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=kubeconfig')\n                return base64.b64decode(canarydrop['kubeconfig']).encode('utf-8')\n            elif fmt == 'slackapi':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=slack_creds')\n                text=\"# Slack API key\\nslack_api_key = {key}\".format(key=canarydrop['slack_api_key'])\n                return text\n            elif fmt == 'incidentlist_json':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.json'\\\n                                  .format(token=token))\n                return simplejson.dumps(canarydrop['triggered_list'], indent=4)\n            elif fmt == 'incidentlist_csv':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.csv'\\\n                                  .format(token=token))\n                csvOutput = StringIO()\n                incident_list = canarydrop['triggered_list']\n\n                writer = csv.writer(csvOutput)\n\n                details = set()\n                for key in incident_list:\n                    for element in incident_list[key].keys():\n                        details.add(element)\n                details = list(details)\n\n                headers = [\"Timestamp\"] + details\n                writer.writerow(headers)\n\n                for key in incident_list:\n                    items = []\n                    for item in details:\n                        items.append(incident_list[key].get(item, 'N/A'))\n                    data = [datetime.datetime.fromtimestamp(float(key)).strftime('%Y-%m-%d %H:%M:%S.%s')] + items\n                    writer.writerow(data)\n\n                return csvOutput.getvalue()\n            elif fmt == \"my_sql\":\n                encoded   = request.args.get('encoded', \"true\")[0] == \"true\"\n\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_mysql_dump.sql.gz'\\\n                                  .format(token=token))\n                return make_canary_mysql_dump(canarydrop=canarydrop, encoded=encoded)\n\n        except Exception as e:\n            log.error('Unexpected error in download: {err}'.format(err=e))\n\n        return NoResource().render(request)\n\n    def render_POST(self, request):\n        try:\n            fields = cgi.FieldStorage(\n                fp = request.content,\n                headers = request.getAllHeaders(),\n                environ = {'REQUEST_METHOD':'POST',\n                'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                }\n            )#hacky way to parse out file contents and filenames\n\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            if fmt not in ['authenticode']:\n                raise Exception('Unsupported token type for POST.')\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'authenticode':\n                filename = fields['file_for_signing'].filename\n                filebody = fields['file_for_signing'].value\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                if not filename.lower().endswith(('exe','dll')):\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                request.setHeader(\"Content-Type\", \"octet/stream\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={filename}.signed'\\\n                                  .format(filename=filename))\n                return signed_contents\n\n\n        except Exception as e:\n            log.error('Unexpected error in POST download: {err}'.format(err=e))\n            template = unsafe_env.get_template('error.html')\n            return template.render(error=e.message).encode('utf8')\n\n        return NoResource().render(request)", "target": 0}, {"function": "class ManagePage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        try:\n            canarydrop['type']\n            template = unsafe_env.get_template('manage_new.html')\n        except KeyError:\n            template = unsafe_env.get_template('manage.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n    def render_POST(self, request):\n        try:\n            try:\n                token = request.args.get('token', None)[0]\n                auth  = request.args.get('auth',  None)[0]\n\n                canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n                if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                    raise NoCanarytokenPresent()\n\n            except (IndexError, TypeError, NoCanarytokenPresent):\n                return NoResource().render(request)\n\n            try:\n                email_enable_status = request.args.get('email_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                email_enable_status = False\n\n            try:\n                webhook_enable_status = request.args.get('webhook_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                webhook_enable_status = False\n\n            try:\n                sms_enable_status = request.args.get('sms_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                sms_enable_status = False\n\n            try:\n                web_image_status = request.args.get('web_image_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                web_image_status = False\n\n            try:\n                token_fmt = request.args.get('fmt', None)[0]\n            except (TypeError, IndexError):\n                token_fmt = ''\n\n            canarydrop['alert_email_enabled'] = email_enable_status\n            canarydrop['alert_webhook_enabled'] = webhook_enable_status\n            canarydrop['alert_sms_enabled']   = sms_enable_status\n            canarydrop['web_image_enabled']   = web_image_status\n\n            save_canarydrop(canarydrop=canarydrop)\n\n            g_api_key = get_canary_google_api_key()\n            template = unsafe_env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, saved=True,\n                                        settings=settings, API_KEY=g_api_key).encode('utf8')\n\n        except Exception as e:\n            import traceback\n            log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n            template = unsafe_env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, error=e,\n                                        settings=settings).encode('utf8')", "target": 0}, {"function": "class HistoryPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S.%f (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n            if canarydrop.get('memo'):\n                canarydrop['memo'] = unicode(canarydrop['memo'], \"utf8\")\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        template = env.get_template('history.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')", "target": 0}, {"function": "class LimitedFile(File):\n    def directoryListing(self):\n        dl = DirectoryLister(self.path,\n                               [],\n                               self.contentTypes,\n                               self.contentEncodings,\n                               self.defaultType)\n        dl.template = \"\"\n        return dl", "target": 0}, {"function": "class SettingsPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { }\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth',  None)[0]\n            setting = request.args.get('setting',  None)[0]\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if setting not in ['clonedsite', 'email_enable', 'webhook_enable',\n                               'sms_enable', 'browser_scanner_enable', 'web_image_enable']:\n                raise NoCanarytokenPresent()\n\n        except (IndexError, TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n\n        if setting == 'clonedsite':\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': token}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                return NoResource().render(request)\n        elif setting == \"email_enable\":\n            canarydrop['alert_email_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"webhook_enable\":\n            canarydrop['alert_webhook_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"sms_enable\":\n            canarydrop['alert_sms_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"browser_scanner_enable\":\n            canarydrop['browser_scanner_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"web_image_enable\":\n            canarydrop['web_image_enabled'] = request.args['value'][0] == \"on\"\n\n        save_canarydrop(canarydrop=canarydrop)\n        response['result'] = 'success'\n\n        return simplejson.dumps(response)", "target": 0}, {"function": "class AUP(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        now = datetime.datetime.now()\n        template = unsafe_env.get_template('legal.html')\n        return template.render(now=now).encode('utf8')", "target": 0}, {"function": "class CanarytokensHttpd():\n    def __init__(self, port=80):\n        self.port = port\n\n        root = Resource()\n        root.putChild(\"\", Redirect(\"generate\"))\n        root.putChild(\"generate\", GeneratorPage())\n        root.putChild(\"manage\", ManagePage())\n        root.putChild(\"download\", DownloadPage())\n        root.putChild(\"settings\", SettingsPage())\n        root.putChild(\"history\", HistoryPage())\n        root.putChild(\"resources\", LimitedFile(\"/srv/templates/static\"))\n        root.putChild(\"legal\", AUP())\n\n        with open('/srv/templates/robots.txt', 'r') as f:\n            root.putChild(\"robots.txt\", Data(f.read(), \"text/plain\"))\n\n        wrapped = EncodingResourceWrapper(root, [GzipEncoderFactory()])\n        site = server.Site(wrapped)\n        if settings.DEBUG:\n            site.displayTracebacks = settings.DEBUG\n        else:\n            site.displayTracebacks = False\n        self.service = internet.TCPServer(self.port, site)\n        return None", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
