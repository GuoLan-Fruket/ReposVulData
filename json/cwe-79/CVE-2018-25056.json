{"index": 9805, "cve_id": "CVE-2018-25056", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "A vulnerability, which was classified as problematic, was found in yolapi. Affected is the function render_description of the file yolapi/pypi/metadata.py. The manipulation of the argument text leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is a0fe129055a99f429133a5c40cb13b44611ff796. It is recommended to apply a patch to fix this issue. VDB-216966 is the identifier assigned to this vulnerability.", "cvss": "6.1", "publish_date": "December 28, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "a0fe129055a99f429133a5c40cb13b44611ff796", "commit_message": "Sanitize HTML to avoid XSS attacks", "commit_date": "2018-12-07T13:02:13Z", "project": "yola/yolapi", "url": "https://api.github.com/repos/yola/yolapi/commits/a0fe129055a99f429133a5c40cb13b44611ff796", "html_url": "https://github.com/yola/yolapi/commit/a0fe129055a99f429133a5c40cb13b44611ff796", "windows_before": [{"commit_id": "ed255d2ecad518145fe95832a6499484d9248bbc", "commit_date": "Fri Dec 7 14:43:51 2018 +0200", "commit_message": "Add a fallback branch, to fail more gracefully", "files_name": ["yolapi/pypi/metadata.py"]}, {"commit_id": "0d980de0614efc24d845eb8999c81fbbe0f654d3", "commit_date": "Fri Dec 7 14:43:25 2018 +0200", "commit_message": "Shorten line with an import from", "files_name": ["yolapi/pypi/metadata.py"]}, {"commit_id": "86e936acaf35c638bd1ae6cbc9d5583c5855ffa5", "commit_date": "Fri Dec 7 14:29:46 2018 +0200", "commit_message": "Missed a requirement - we're directly importing markdown", "files_name": ["requirements.txt"]}, {"commit_id": "1f404b1dff1ec3236defa0475fc032a929e351e2", "commit_date": "Thu Dec 6 16:41:30 2018 +0200", "commit_message": "Update to the latest Django 1.11", "files_name": ["requirements.txt"]}, {"commit_id": "c1d2f14897e611be0cf2d702a52602a62d5afbe5", "commit_date": "Thu Dec 6 16:39:23 2018 +0200", "commit_message": "Use except...as... syntax", "files_name": ["yolapi/importer/tasks.py", "yolapi/importer/views.py", "yolapi/pypi/models.py", "yolapi/pypi/upload.py", "yolapi/pypi/views.py"]}, {"commit_id": "d450cf056105c0270e19362fc47cad4a22ad909f", "commit_date": "Thu Dec 6 16:38:08 2018 +0200", "commit_message": "twine corrected the protcol_version typo", "files_name": ["yolapi/pypi/upload.py"]}, {"commit_id": "79bfb3b399135f3c87a3d23b3a7eb72cc864c683", "commit_date": "Thu Dec 6 16:34:33 2018 +0200", "commit_message": "Render Markdown Descriptions", "files_name": ["requirements.txt", "yolapi/pypi/metadata.py", "yolapi/pypi/views.py"]}, {"commit_id": "53467d7f32dfaec6b47a5caa7db7c6954ae32f67", "commit_date": "Thu Dec 6 15:55:35 2018 +0200", "commit_message": "Break HTML rendering into a separate function", "files_name": ["yolapi/pypi/metadata.py", "yolapi/pypi/views.py"]}, {"commit_id": "3ec5cf41c26eead296e809a5b7e4abfca8fb38b7", "commit_date": "Thu Dec 6 15:45:54 2018 +0200", "commit_message": "Work with a dict, it's simpler", "files_name": ["yolapi/pypi/views.py"]}, {"commit_id": "537b8a0e3ba7181bc991d51ed79c925fcca17548", "commit_date": "Thu Aug 23 12:27:33 2018 -0400", "commit_message": "Merge pull request #56 from yola/update-celery-to-fix-kombu-compatibility-bug", "files_name": ["bf453164f81c812d5cc0bdd529b3b67671e1dd7e - Thu Aug 23 10:50:50 2018 -0400 : upgrade celery to version compatible with kombu 4.2.x", "requirements.txt"]}, {"commit_id": "1f00aabb953cd63df3fe9b4d35bab02256fb235c", "commit_date": "Thu May 10 23:06:40 2018 +0300", "commit_message": "Merge pull request #54 from yola/add-real-metadata-2.1", "files_name": ["ee15b059d76c8e8659c2cf9aaf6d8caff225750e - Thu May 10 21:17:50 2018 +0300 : Add sorting for new fields", "yolapi/pypi/metadata.py"]}, {"commit_id": "6930ca2e681f5f778be2f4063d47e2b4eeb3f6b8", "commit_date": "Fri May 4 10:27:08 2018 +0300", "commit_message": "Add new fields from metadata 2.1", "files_name": ["yolapi/pypi/metadata.py"]}, {"commit_id": "6f836fb34392675bf86380c42b51d40f0b26660f", "commit_date": "Thu Apr 26 10:56:28 2018 +0300", "commit_message": "Merge pull request #53 from yola/add-metadata-2.1", "files_name": ["78cbeddf8f0e5d2f401bc6e42b24b186bef769f3 - Thu Apr 26 10:27:36 2018 +0300 : Add metadata version 2.1", "yolapi/pypi/metadata.py"]}, {"commit_id": "4147f8ead45b079548d7895d677f2a9e34ce2f92", "commit_date": "Wed Oct 11 17:18:44 2017 +0200", "commit_message": "Merge pull request #50 from yola/fix-systemd-jobs", "files_name": ["e7495c96ce39e9eb04166ffe707e707619e7a793 - Wed Oct 11 17:11:14 2017 +0200 : We can't just run the celery binary directly", "deploy/templates/systemd/yolapi-beat.service.template", "deploy/templates/systemd/yolapi-worker.service.template", "deploy/templates/upstart/yolapi-beat.conf.template", "deploy/templates/upstart/yolapi-worker.conf.template"]}, {"commit_id": "074798554e7fc0fe810c58fc44840a1784e22002", "commit_date": "Wed Sep 27 17:15:26 2017 +0300", "commit_message": "Merge pull request #49 from yola/update_sysd", "files_name": ["db64e809306454676258ff6962567bfcbdda0e1b - Wed Sep 27 15:48:12 2017 +0300 : add restart to sys.d", "deploy/templates/systemd/yolapi-beat.service.template", "deploy/templates/systemd/yolapi-worker.service.template"]}, {"commit_id": "9cc64b659b9d2736249d5f31e41f21e04a273de0", "commit_date": "Tue Sep 19 11:10:31 2017 -0700", "commit_message": "Merge pull request #48 from yola/s3-download", "files_name": ["07ee900da14782813c4afbdac20ae9c9b782fce9 - Mon Sep 18 14:50:00 2017 -0700 : Specify filename when syncing from S3", "yolapi/sync/tasks.py"]}, {"commit_id": "365c7682425685f4e5ae9107d1027f41971e444c", "commit_date": "Mon Sep 18 22:57:11 2017 +0300", "commit_message": "Merge pull request #47 from yola/fix-deploy", "files_name": ["08a676dde4aad4d87a47a2447bac195dcefbd441 - Mon Sep 18 22:29:46 2017 +0300 : Fix deploy hook for new version of yodeploy", "deploy/hooks.py"]}, {"commit_id": "a150dc21b6583224331942bd047922cc3df192f1", "commit_date": "Mon Sep 18 22:23:01 2017 +0300", "commit_message": "Merge pull request #46 from yola/fix-deploy", "files_name": ["6c5cfdee5c714785aff15f144361e51d474bb364 - Mon Sep 18 22:16:03 2017 +0300 : Bump yodeploy version", "deploy/requirements.txt"]}, {"commit_id": "f724e61208da39f7ce9a26b3918329883c689187", "commit_date": "Wed Sep 13 21:52:21 2017 +0300", "commit_message": "Merge pull request #44 from yola/enable-migrations", "files_name": ["797cb5597e21a4ca9390810e226098a6e28dfa3e - Wed Sep 13 21:45:49 2017 +0300 : Enable migrations on deploy", "deploy/hooks.py"]}, {"commit_id": "3f8e99d73fd391e2b79283791a6d9d98d92f6336", "commit_date": "Wed Sep 13 21:37:59 2017 +0300", "commit_message": "Merge pull request #43 from yola/fix-service-configs", "files_name": ["3629567e2a3700b3f6aba2e44f914d7407d8dae6 - Wed Sep 13 21:24:29 2017 +0300 : Fix beat service configs", "deploy/templates/systemd/yolapi-beat.service.template", "deploy/templates/upstart/yolapi-beat.conf.template"]}, {"commit_id": "f24711a7b6bdf6f90b8e19a6787b2467f84959a2", "commit_date": "Wed Sep 13 21:22:06 2017 +0300", "commit_message": "Merge pull request #42 from yola/fix-upstart-beat-service-name", "files_name": ["534c1949ab2e079d0aa4caaf646e7260e9969e46 - Wed Sep 13 21:20:31 2017 +0300 : Fix upstart beat service name", "deploy/templates/upstart/yolapi-beat.conf.template"]}, {"commit_id": "2d465267a1570f50d5f3cf5952e65ba90693333a", "commit_date": "Wed Sep 13 20:53:08 2017 +0300", "commit_message": "Merge pull request #40 from yola/django-celery-upgrade", "files_name": ["30a29551ffeab063937ad19edb2d33e3c6f63374 - Tue Sep 12 11:25:21 2017 +0300 : Upgrade Django to 1.11 and Celery to 4.1", "deploy/configuration/yolapi-default.py", "deploy/hooks.py", "deploy/templates/systemd/yolapi-beat.service.template", "deploy/templates/systemd/yolapi-worker.service.template", "deploy/templates/upstart/yolapi-beat.conf.template", "deploy/templates/upstart/yolapi-worker.conf.template", "requirements.txt", "yolapi/importer/tasks.py", "yolapi/importer/templates/importer/index.html", "yolapi/importer/urls.py", "yolapi/importer/views.py", "yolapi/manage.py", "yolapi/pypi/fields.py", "yolapi/pypi/management/commands/orphans.py", "yolapi/pypi/migrations/0001_initial.py", "yolapi/pypi/migrations/0002_migrate_from_djangopypi.py", "yolapi/pypi/migrations/0003_add_package_normalized_name.py", "yolapi/pypi/migrations/0004_set_package_normalized_name.py", "yolapi/pypi/migrations/0005_set_package_normalized_name_not_null.py", "yolapi/pypi/migrations/0006_re_canonicalize_names.py", "yolapi/pypi/migrations/0007_set_name_to_normalized_name.py", "yolapi/pypi/migrations/0008_remove_package_normalized_name.py", "yolapi/pypi/migrations/0009_auto__chg_field_package_name.py", "yolapi/pypi/models.py", "yolapi/pypi/simple/urls.py", "yolapi/pypi/simple/views.py", "yolapi/pypi/templates/pypi.simple/index.html", "yolapi/pypi/templates/pypi/index.html", "yolapi/pypi/templates/pypi/package.html", "yolapi/pypi/templates/pypi/release.html", "yolapi/pypi/urls.py", "yolapi/pypi/views.py", "yolapi/sync/__init__.py", "yolapi/sync/config.py", "yolapi/sync/tasks.py", "yolapi/templates/base.html", "yolapi/yolapi/__init__.py", "yolapi/yolapi/celery_setup.py", "yolapi/yolapi/settings.py", "yolapi/yolapi/urls.py"]}, {"commit_id": "488e85096cbfe87203e2159c8235047246148277", "commit_date": "Wed Jul 12 13:04:45 2017 -0400", "commit_message": "Merge pull request #38 from yola/store-only-canonicalized-package-name", "files_name": ["1b889a09b5146c4695c9bf67d6c3c293bb6c6385 - Mon Jul 10 10:33:19 2017 -0400 : give snitch the single quotes it loves so much", "yolapi/pypi/fields.py"]}, {"commit_id": "737955aa25ae5cfe4d6eaecbc74f165601cfa453", "commit_date": "Mon Jul 10 10:31:49 2017 -0400", "commit_message": "remove class level getters obsoleted by custom package name field", "files_name": ["yolapi/importer/tasks.py", "yolapi/pypi/models.py", "yolapi/pypi/simple/views.py", "yolapi/pypi/tests/test_models.py", "yolapi/pypi/upload.py", "yolapi/pypi/views.py", "yolapi/sync/tasks.py"]}, {"commit_id": "e959c981bc32a35022d73f6822e59baab5c54bec", "commit_date": "Mon Jul 10 10:15:34 2017 -0400", "commit_message": "use custom field type to handle package name normalization", "files_name": ["yolapi/pypi/fields.py", "yolapi/pypi/migrations/0009_auto__chg_field_package_name.py", "yolapi/pypi/models.py", "yolapi/pypi/tests/test_models.py"]}, {"commit_id": "beb3bd597eaae118719897a95b0e71aee4ad21c2", "commit_date": "Wed Jul 5 14:15:33 2017 -0400", "commit_message": "replace tabs with spaces", "files_name": ["yolapi/pypi/templates/pypi/index.html"]}, {"commit_id": "d4340cbc27e9e7dcd9c1218915381de7dfb5dfb1", "commit_date": "Wed Jul 5 14:05:25 2017 -0400", "commit_message": "cache latest release of a package to reduce number of database queries", "files_name": ["yolapi/pypi/templates/pypi/index.html"]}, {"commit_id": "ac0c8cbd9b8fbc40a86bf30831c3588a1b60a2eb", "commit_date": "Wed Jul 5 14:04:45 2017 -0400", "commit_message": "remove unneeded exists queries to reduce overall number of queries", "files_name": ["yolapi/pypi/models.py"]}, {"commit_id": "e2b3f14418c67e0ea61e5e97ae212dd0aff29d28", "commit_date": "Wed Jul 5 16:32:41 2017 -0400", "commit_message": "add Package.get_or_create helper to reduce boilerplate code", "files_name": ["yolapi/importer/tasks.py", "yolapi/pypi/models.py", "yolapi/pypi/tests/test_models.py", "yolapi/pypi/upload.py", "yolapi/sync/tasks.py"]}, {"commit_id": "7cc637e39ad1e9899f67061462abea05fda96227", "commit_date": "Wed Jul 5 14:23:24 2017 -0400", "commit_message": "remove Package.normalized_name field", "files_name": ["yolapi/pypi/migrations/0008_remove_package_normalized_name.py", "yolapi/pypi/models.py"]}, {"commit_id": "4ea41ae12fa88e910743567e8086fbc2ab562f12", "commit_date": "Wed Jul 5 13:26:30 2017 -0400", "commit_message": "use Package.get when getting package so normalized name is used for lookup", "files_name": ["yolapi/importer/tasks.py", "yolapi/pypi/simple/views.py", "yolapi/pypi/upload.py", "yolapi/pypi/views.py", "yolapi/sync/tasks.py"]}, {"commit_id": "ec54fb6c64ed0d30e6c1f30a4c9a59c6674db32a", "commit_date": "Wed Jul 5 10:12:27 2017 -0400", "commit_message": "remove usages of Package.normalized_name field. it will be removed.", "files_name": ["yolapi/pypi/models.py", "yolapi/pypi/tests/test_models.py"]}, {"commit_id": "a440a432b384dbd8bc3fe2ef290193017169dc49", "commit_date": "Fri Jun 30 15:54:05 2017 -0400", "commit_message": "update existing package names to normalized name values", "files_name": ["yolapi/pypi/migrations/0007_set_name_to_normalized_name.py"]}, {"commit_id": "b55a5bc39bcbcfbe6cb3502fcf8c59e6d521ccb3", "commit_date": "Mon Jun 5 13:53:21 2017 -0700", "commit_message": "Merge pull request #37 from yola/dont-build-eggs", "files_name": ["b2b4de8d575047d763928728dfa5e078f100a3ba - Fri Jun 2 15:45:23 2017 -0700 : Drop the egg builder", "deploy/configuration/yolapi-default.py", "yolapi/eggbuilder/__init__.py", "yolapi/eggbuilder/management/__init__.py", "yolapi/eggbuilder/management/commands/__init__.py", "yolapi/eggbuilder/management/commands/build_egg.py", "yolapi/eggbuilder/management/commands/build_eggs.py", "yolapi/eggbuilder/management/commands/delete_eggs.py", "yolapi/eggbuilder/tasks.py", "yolapi/yolapi/settings.py"]}, {"commit_id": "a24221403b7dff7ed95335c30f20511771473736", "commit_date": "Tue May 2 11:56:14 2017 -0700", "commit_message": "Merge pull request #36 from yola/pip", "files_name": ["eb4ae9bf7b5456c0788070e8aa10d8bdae4de2b1 - Mon May 1 17:18:02 2017 -0700 : Bump Django to 1.4.22"]}], "windows_after": [{"commit_id": "292a0f12181215715f0e584492ff0666cc07d428", "commit_date": "Fri Dec 7 15:44:29 2018 +0200", "commit_message": "The 8-space prefix was really a bug in our PKG-INFO parsing", "files_name": ["yolapi/importer/tasks.py", "yolapi/pypi/metadata.py", "yolapi/pypi/migrations/0002_imported_descriptions.py"]}, {"commit_id": "7ca320477de799dc97284756d6e8d4fb63699466", "commit_date": "Fri Dec 7 16:16:26 2018 +0200", "commit_message": "We don't need any CSRF tokens on upload", "files_name": ["yolapi/pypi/views.py"]}, {"commit_id": "dc561fe415fb94e720856b76c4d27b342737201d", "commit_date": "Fri Dec 7 16:20:52 2018 +0200", "commit_message": "Sort attrs for snitch", "files_name": ["yolapi/pypi/metadata.py"]}, {"commit_id": "e6e7b3fe97d7b150aee5db07c6992a2343c8a943", "commit_date": "Fri Dec 7 16:21:03 2018 +0200", "commit_message": "Fix the typo in our error, too", "files_name": ["yolapi/pypi/upload.py"]}, {"commit_id": "72cdf844b19e08af18cd5ebdc9bd9f9bd0a0d2ed", "commit_date": "Fri Dec 7 16:23:04 2018 +0200", "commit_message": "Fix some quotes, for snitch", "files_name": ["yolapi/pypi/metadata.py", "yolapi/pypi/upload.py"]}, {"commit_id": "655ecca93aa5b81a6320b8d071b707d046227bfe", "commit_date": "Fri Dec 7 16:23:57 2018 +0200", "commit_message": "Whitespace, for snitch", "files_name": ["yolapi/pypi/upload.py"]}, {"commit_id": "a1144d12e363b765b19c05edcf33a714fa4a276f", "commit_date": "Fri Dec 7 06:29:22 2018 -0800", "commit_message": "Merge pull request #57 from yola/markdown", "files_name": ["b09865333e8eec7c7a2f2cd2f0238762435f3c97 - Thu Sep 5 19:35:52 2019 +0300 : Expose Requires-Python metadata", "yolapi/pypi/models.py", "yolapi/pypi/templates/pypi.simple/package.html"]}, {"commit_id": "25551238bd2bb8056a02e0b6c92e04c1cd556e79", "commit_date": "Thu Sep 5 20:04:55 2019 +0300", "commit_message": "Upgrade libs. raven->sentry_sdk", "files_name": ["requirements.txt", "yolapi/yolapi/settings.py", "yolapi/yolapi/wsgi.py"]}, {"commit_id": "b9e03731503b0c1509a1ac472131f51e0706db91", "commit_date": "Thu Sep 5 21:58:34 2019 +0300", "commit_message": "Add hiredis to redis's extra", "files_name": ["requirements.txt"]}, {"commit_id": "4b97d0c61aec2e0fd61197637f9139e06186d054", "commit_date": "Thu Sep 5 22:10:07 2019 +0300", "commit_message": "Remove redis integration with senty cause redis uses only as celery broker", "files_name": ["yolapi/yolapi/settings.py"]}, {"commit_id": "c1163f28fa7ed2a25c541e97b14177429a39ae47", "commit_date": "Fri Sep 6 09:48:53 2019 +0300", "commit_message": "Merge pull request #59 from yola/add-requires-python", "files_name": ["d0e06303790e104e3c2680d91e0052fba5273889 - Fri Sep 6 09:49:04 2019 +0300 : Merge pull request #58 from yola/upgrade-libs", "b4d4300333f70b1783fcc02792007b2d79640412 - Mon Feb 24 18:44:43 2020 +0000 : Bump bleach from 3.1.0 to 3.1.1", "requirements.txt"]}, {"commit_id": "2eecfb3b40d6ebeab5b029fa3fbdc13cb138efed", "commit_date": "Mon Feb 24 13:40:25 2020 -0800", "commit_message": "Merge pull request #61 from yola/dependabot/pip/bleach-3.1.1", "files_name": ["c30464c987f894980bbdf376312627c928183c2a - Mon Feb 24 21:41:06 2020 +0000 : Bump django from 1.11.24 to 1.11.28", "requirements.txt"]}, {"commit_id": "062ce2bd35ddfe16c45933827fdf1317beee7e25", "commit_date": "Mon Feb 24 14:26:52 2020 -0800", "commit_message": "Merge pull request #60 from yola/dependabot/pip/django-1.11.28", "files_name": ["62e4df64733e818b413fad15d2be1d8d8f4232f4 - Mon Sep 14 17:50:31 2020 +0300 : Bump bleach from 3.1.1 to 3.1.4 (#63)", "requirements.txt"]}, {"commit_id": "519b340116ba8533a5a4f3742a47b7ad0aa26155", "commit_date": "Mon Sep 14 17:50:40 2020 +0300", "commit_message": "Bump django from 1.11.28 to 1.11.29 (#64)", "files_name": ["requirements.txt"]}, {"commit_id": "c567f36ff88c77c5c82668c2d3cfaa50d3d9c956", "commit_date": "Mon Sep 14 17:54:16 2020 +0300", "commit_message": "bump sentry (#65)", "files_name": ["requirements.txt"]}, {"commit_id": "c00e96151592abf9650e6dcb7bbed1e2e71516f5", "commit_date": "Wed Sep 15 13:57:15 2021 +0300", "commit_message": "boto->boto3 for s3 sync (#70)", "files_name": ["deploy/configuration/yolapi-default.py", "requirements.txt", "yolapi/sync/tasks.py", "yolapi/yolapi/settings.py"]}, {"commit_id": "b213a39a18fd0dbe5228091d658f71fc563d2b69", "commit_date": "Tue Sep 21 11:07:29 2021 +0300", "commit_message": "Reduce queries to Amazon S3 (#71)", "files_name": ["yolapi/sync/tasks.py"]}, {"commit_id": "a23e6b76a26579aabe37e3cdfb166e3cbf0513d8", "commit_date": "Wed Sep 22 10:38:58 2021 +0300", "commit_message": "Fix calculating header with md5 for s3 put object (#72)", "files_name": ["yolapi/sync/tasks.py"]}, {"commit_id": "2259e48058086c473949f4de6c8d43c30cd83ad9", "commit_date": "Wed Sep 22 10:39:06 2021 +0300", "commit_message": "Remove applied management command (#73)", "files_name": ["yolapi/sync/management/__init__.py", "yolapi/sync/management/commands/__init__.py", "yolapi/sync/management/commands/set_uploaded.py"]}, {"commit_id": "28ae109e65351b6e991ec71028487104279520e9", "commit_date": "Wed Sep 22 10:39:14 2021 +0300", "commit_message": "Remove unused upstart configuration (#74)", "files_name": ["deploy/templates/upstart/yolapi-beat.conf.template", "deploy/templates/upstart/yolapi-worker.conf.template"]}, {"commit_id": "4ee646e025f1ae9ae0699b45d16e8f76af841b9f", "commit_date": "Wed Sep 22 10:39:22 2021 +0300", "commit_message": "Upgrade libraries (#75)", "files_name": ["requirements.txt"]}, {"commit_id": "93f6789d175edabe18b7beb2d165106f9062c014", "commit_date": "Mon Jan 17 11:40:26 2022 +0200", "commit_message": "Migrate to Python 3 (#76)", "files_name": [".lintrc", "deploy/compat", "deploy/configuration/yolapi-default.py", "deploy/hooks.py", "deploy/requirements.txt", "deploy/templates/apache2/vhost.conf.template", "deploy/templates/systemd/yolapi-uwsgi.service.template", "deploy/templates/uwsgi/yolapi.ini.template", "yolapi/importer/tasks.py", "yolapi/pypi/management/commands/orphans.py", "yolapi/pypi/models.py", "yolapi/pypi/simple/tests/test_views.py", "yolapi/pypi/simple/views.py", "yolapi/pypi/upload.py", "yolapi/pypi/views.py", "yolapi/sync/tasks.py", "yolapi/yolapi/urls.py", "yolapi/yolapi/wsgi.py"]}], "parents": [{"commit_id_before": "ed255d2ecad518145fe95832a6499484d9248bbc", "url_before": "https://api.github.com/repos/yola/yolapi/commits/ed255d2ecad518145fe95832a6499484d9248bbc", "html_url_before": "https://github.com/yola/yolapi/commit/ed255d2ecad518145fe95832a6499484d9248bbc"}], "details": [{"raw_url": "https://github.com/yola/yolapi/raw/a0fe129055a99f429133a5c40cb13b44611ff796/requirements.txt", "code": "Django==1.11.17\nMarkdown==2.6.11\nPygments==2.2.0\nboto==2.48.0\nbleach==2.1.4\nbleach-whitelist==0.0.9\ncelery==4.1.1\ndjango-crispy-forms==1.6.1\ndjango-nose==1.4.5\ndocutils==0.14\npackaging==16.8\npy-gfm==0.1.4\npython-dateutil==2.6.1\nraven==6.1.0\nredis==2.10.6\nspec==1.4.1\nyoconfigurator==0.5.2\n", "code_before": "Django==1.11.17\nMarkdown==2.6.11\nPygments==2.2.0\nboto==2.48.0\ncelery==4.1.1\ndjango-crispy-forms==1.6.1\ndjango-nose==1.4.5\ndocutils==0.14\npackaging==16.8\npy-gfm==0.1.4\npython-dateutil==2.6.1\nraven==6.1.0\nredis==2.10.6\nspec==1.4.1\nyoconfigurator==0.5.2\n", "patch": "@@ -2,6 +2,8 @@ Django==1.11.17\n Markdown==2.6.11\n Pygments==2.2.0\n boto==2.48.0\n+bleach==2.1.4\n+bleach-whitelist==0.0.9\n celery==4.1.1\n django-crispy-forms==1.6.1\n django-nose==1.4.5", "file_path": "files/2022_12/434", "file_language": "txt", "file_name": "requirements.txt", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/yola/yolapi/raw/a0fe129055a99f429133a5c40cb13b44611ff796/yolapi%2Fpypi%2Fmetadata.py", "code": "import re\n\nfrom django.utils.html import format_html\nfrom django.utils.safestring import mark_safe\n\nimport bleach\nfrom bleach_whitelist import print_tags, print_attrs, all_styles\nfrom docutils.core import publish_parts\nfrom markdown import markdown\nfrom mdx_gfm import GithubFlavoredMarkdownExtension\n\n\ndef metadata_fields(metadata_version):\n    \"\"\"Return meta-data about the meta-data :)\"\"\"\n\n    if metadata_version not in ('1.0', '1.1', '1.2', '2.1'):\n        raise ValueError(\"Unknown Metadata-Version: %s\" % metadata_version)\n\n    required = set((\n        'Metadata-Version',\n        'Name',\n        'Summary',\n        'Version',\n    ))\n    fields = set((\n        'Author',\n        'Author-email',\n        'Description',\n        'Home-page',\n        'Keywords',\n        'License',\n    ))\n    multivalued = set((\n        'Platform',\n        'Supported-Platform',\n    ))\n    csv = set((\n        'Platform',\n        'Keywords',\n    ))\n    deprecated = set()\n\n    if metadata_version in ('1.0', '1.1'):\n        required.update((\n            'Author-email',\n            'License',\n        ))\n    if metadata_version in ('1.1', '1.2', '2.1'):\n        required.update((\n            'Download-URL',\n        ))\n        multivalued.update((\n            'Classifier',\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n    if metadata_version in ('1.2', '2.1'):\n        required.update((\n            'Requires-Python',\n        ))\n        deprecated.update((\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n        fields.update((\n            'Maintainer',\n            'Maintainer-email',\n        ))\n        multivalued.update((\n            'Obsoletes-Dist',\n            'Project-URL',\n            'Provides-Dist',\n            'Requires-Dist',\n            'Requires-External',\n        ))\n    if metadata_version in ('2.1',):\n        fields.update((\n            'Description-Content-Type',\n        ))\n        multivalued.update((\n            'Provides-Extra',\n        ))\n    fields.update(required, deprecated, multivalued)\n\n    return {\n        'fields': fields,\n        'required': required,\n        'multivalued': multivalued,\n        'csv': csv,\n        'deprecated': deprecated,\n    }\n\n\ndef display_sort(metadata):\n    \"\"\"Return an ordered list of key-value pairs, of a given metadata dict\"\"\"\n    key_order = (\n        'Name',\n        'Version',\n        'Summary',\n        'License',\n        'Home-page',\n        'Project-URL',\n        'Download-URL',\n        'Description',\n        'Description-Content-Type',\n        'Author',\n        'Author-email',\n        'Maintainer',\n        'Maintainer-email',\n        'Keywords',\n        'Classifier',\n        'Requires-Python',\n        'Requires-External',\n        'Requires-Dist',\n        'Requires',\n        'Provides-Dist',\n        'Provides',\n        'Provides-Extra',\n        'Obsoletes-Dist',\n        'Obsoletes',\n        'Platform',\n        'Supported-Platform',\n        'Metadata-Version',\n    )\n    indices = dict((key, i) for i, key in enumerate(key_order))\n\n    if isinstance(metadata, dict):\n        metadata = metadata.items()\n\n    return sorted(metadata, key=lambda row: (indices.get(row[0], 100), row))\n\n\ndef render_description(text, content_type):\n    \"\"\"Render Description field to HTML\"\"\"\n    if re.match(r'^.+(\\n {8}.*)+\\n?$', text):\n        text = re.sub(r'^ {8}', '', text, flags=re.MULTILINE)\n\n    if content_type == 'text/x-rst':\n        html = publish_parts(\n            text, writer_name='html',\n            settings_overrides={'syntax_highlight': 'short'})['html_body']\n    elif content_type == 'text/markdown':\n        html = markdown(text, extensions=[GithubFlavoredMarkdownExtension()])\n    else:\n        html = format_html('<pre>{}</pre>', text)\n\n    html = bleach.clean(\n        html, print_tags + ['a', 'cite', 'pre'], print_attrs, all_styles)\n\n    return mark_safe(html)\n", "code_before": "import re\n\nfrom django.utils.html import format_html\nfrom django.utils.safestring import mark_safe\n\nfrom docutils.core import publish_parts\nfrom markdown import markdown\nfrom mdx_gfm import GithubFlavoredMarkdownExtension\n\n\ndef metadata_fields(metadata_version):\n    \"\"\"Return meta-data about the meta-data :)\"\"\"\n\n    if metadata_version not in ('1.0', '1.1', '1.2', '2.1'):\n        raise ValueError(\"Unknown Metadata-Version: %s\" % metadata_version)\n\n    required = set((\n        'Metadata-Version',\n        'Name',\n        'Summary',\n        'Version',\n    ))\n    fields = set((\n        'Author',\n        'Author-email',\n        'Description',\n        'Home-page',\n        'Keywords',\n        'License',\n    ))\n    multivalued = set((\n        'Platform',\n        'Supported-Platform',\n    ))\n    csv = set((\n        'Platform',\n        'Keywords',\n    ))\n    deprecated = set()\n\n    if metadata_version in ('1.0', '1.1'):\n        required.update((\n            'Author-email',\n            'License',\n        ))\n    if metadata_version in ('1.1', '1.2', '2.1'):\n        required.update((\n            'Download-URL',\n        ))\n        multivalued.update((\n            'Classifier',\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n    if metadata_version in ('1.2', '2.1'):\n        required.update((\n            'Requires-Python',\n        ))\n        deprecated.update((\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n        fields.update((\n            'Maintainer',\n            'Maintainer-email',\n        ))\n        multivalued.update((\n            'Obsoletes-Dist',\n            'Project-URL',\n            'Provides-Dist',\n            'Requires-Dist',\n            'Requires-External',\n        ))\n    if metadata_version in ('2.1',):\n        fields.update((\n            'Description-Content-Type',\n        ))\n        multivalued.update((\n            'Provides-Extra',\n        ))\n    fields.update(required, deprecated, multivalued)\n\n    return {\n        'fields': fields,\n        'required': required,\n        'multivalued': multivalued,\n        'csv': csv,\n        'deprecated': deprecated,\n    }\n\n\ndef display_sort(metadata):\n    \"\"\"Return an ordered list of key-value pairs, of a given metadata dict\"\"\"\n    key_order = (\n        'Name',\n        'Version',\n        'Summary',\n        'License',\n        'Home-page',\n        'Project-URL',\n        'Download-URL',\n        'Description',\n        'Description-Content-Type',\n        'Author',\n        'Author-email',\n        'Maintainer',\n        'Maintainer-email',\n        'Keywords',\n        'Classifier',\n        'Requires-Python',\n        'Requires-External',\n        'Requires-Dist',\n        'Requires',\n        'Provides-Dist',\n        'Provides',\n        'Provides-Extra',\n        'Obsoletes-Dist',\n        'Obsoletes',\n        'Platform',\n        'Supported-Platform',\n        'Metadata-Version',\n    )\n    indices = dict((key, i) for i, key in enumerate(key_order))\n\n    if isinstance(metadata, dict):\n        metadata = metadata.items()\n\n    return sorted(metadata, key=lambda row: (indices.get(row[0], 100), row))\n\n\ndef render_description(text, content_type):\n    \"\"\"Render Description field to HTML\"\"\"\n    if re.match(r'^.+(\\n {8}.*)+\\n?$', text):\n        text = re.sub(r'^ {8}', '', text, flags=re.MULTILINE)\n\n    if content_type == 'text/x-rst':\n        html = publish_parts(\n            text, writer_name='html',\n            settings_overrides={'syntax_highlight': 'short'})['html_body']\n    elif content_type == 'text/markdown':\n        html = markdown(text, extensions=[GithubFlavoredMarkdownExtension()])\n    else:\n        html = format_html('<pre>{}</pre>', text)\n\n    return mark_safe(html)\n", "patch": "@@ -3,6 +3,8 @@\n from django.utils.html import format_html\n from django.utils.safestring import mark_safe\n \n+import bleach\n+from bleach_whitelist import print_tags, print_attrs, all_styles\n from docutils.core import publish_parts\n from markdown import markdown\n from mdx_gfm import GithubFlavoredMarkdownExtension\n@@ -144,4 +146,7 @@ def render_description(text, content_type):\n     else:\n         html = format_html('<pre>{}</pre>', text)\n \n+    html = bleach.clean(\n+        html, print_tags + ['a', 'cite', 'pre'], print_attrs, all_styles)\n+\n     return mark_safe(html)", "file_path": "files/2022_12/435", "file_language": "py", "file_name": "yolapi/pypi/metadata.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 1, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.django.security.audit.avoid-mark-safe.avoid-mark-safe                                   \n          'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and\n          could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to\n          build HTML for rendering instead.                                                           \n          Details: https://sg.run/yd0P                                                                \n          147\u2506 return mark_safe(html)"]]}, "target": 1, "function_before": [{"function": "def metadata_fields(metadata_version):\n    \"\"\"Return meta-data about the meta-data :)\"\"\"\n\n    if metadata_version not in ('1.0', '1.1', '1.2', '2.1'):\n        raise ValueError(\"Unknown Metadata-Version: %s\" % metadata_version)\n\n    required = set((\n        'Metadata-Version',\n        'Name',\n        'Summary',\n        'Version',\n    ))\n    fields = set((\n        'Author',\n        'Author-email',\n        'Description',\n        'Home-page',\n        'Keywords',\n        'License',\n    ))\n    multivalued = set((\n        'Platform',\n        'Supported-Platform',\n    ))\n    csv = set((\n        'Platform',\n        'Keywords',\n    ))\n    deprecated = set()\n\n    if metadata_version in ('1.0', '1.1'):\n        required.update((\n            'Author-email',\n            'License',\n        ))\n    if metadata_version in ('1.1', '1.2', '2.1'):\n        required.update((\n            'Download-URL',\n        ))\n        multivalued.update((\n            'Classifier',\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n    if metadata_version in ('1.2', '2.1'):\n        required.update((\n            'Requires-Python',\n        ))\n        deprecated.update((\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n        fields.update((\n            'Maintainer',\n            'Maintainer-email',\n        ))\n        multivalued.update((\n            'Obsoletes-Dist',\n            'Project-URL',\n            'Provides-Dist',\n            'Requires-Dist',\n            'Requires-External',\n        ))\n    if metadata_version in ('2.1',):\n        fields.update((\n            'Description-Content-Type',\n        ))\n        multivalued.update((\n            'Provides-Extra',\n        ))\n    fields.update(required, deprecated, multivalued)\n\n    return {\n        'fields': fields,\n        'required': required,\n        'multivalued': multivalued,\n        'csv': csv,\n        'deprecated': deprecated,\n    }", "target": 0}, {"function": "def display_sort(metadata):\n    \"\"\"Return an ordered list of key-value pairs, of a given metadata dict\"\"\"\n    key_order = (\n        'Name',\n        'Version',\n        'Summary',\n        'License',\n        'Home-page',\n        'Project-URL',\n        'Download-URL',\n        'Description',\n        'Description-Content-Type',\n        'Author',\n        'Author-email',\n        'Maintainer',\n        'Maintainer-email',\n        'Keywords',\n        'Classifier',\n        'Requires-Python',\n        'Requires-External',\n        'Requires-Dist',\n        'Requires',\n        'Provides-Dist',\n        'Provides',\n        'Provides-Extra',\n        'Obsoletes-Dist',\n        'Obsoletes',\n        'Platform',\n        'Supported-Platform',\n        'Metadata-Version',\n    )\n    indices = dict((key, i) for i, key in enumerate(key_order))\n\n    if isinstance(metadata, dict):\n        metadata = metadata.items()\n\n    return sorted(metadata, key=lambda row: (indices.get(row[0], 100), row))", "target": 0}, {"function": "def render_description(text, content_type):\n    \"\"\"Render Description field to HTML\"\"\"\n    if re.match(r'^.+(\\n {8}.*)+\\n?$', text):\n        text = re.sub(r'^ {8}', '', text, flags=re.MULTILINE)\n\n    if content_type == 'text/x-rst':\n        html = publish_parts(\n            text, writer_name='html',\n            settings_overrides={'syntax_highlight': 'short'})['html_body']\n    elif content_type == 'text/markdown':\n        html = markdown(text, extensions=[GithubFlavoredMarkdownExtension()])\n    else:\n        html = format_html('<pre>{}</pre>', text)\n\n    return mark_safe(html)", "target": 1, "line": "@@  -144,4 +146,7  @@ def render_description(text, content_type):\n     else:\n         html = format_html('<pre>{}</pre>', text)\n \n+    html = bleach.clean(\n+        html, print_tags + ['a', 'cite', 'pre'], print_attrs, all_styles)\n+\n     return mark_safe(html)"}], "function_after": [{"function": "def metadata_fields(metadata_version):\n    \"\"\"Return meta-data about the meta-data :)\"\"\"\n\n    if metadata_version not in ('1.0', '1.1', '1.2', '2.1'):\n        raise ValueError(\"Unknown Metadata-Version: %s\" % metadata_version)\n\n    required = set((\n        'Metadata-Version',\n        'Name',\n        'Summary',\n        'Version',\n    ))\n    fields = set((\n        'Author',\n        'Author-email',\n        'Description',\n        'Home-page',\n        'Keywords',\n        'License',\n    ))\n    multivalued = set((\n        'Platform',\n        'Supported-Platform',\n    ))\n    csv = set((\n        'Platform',\n        'Keywords',\n    ))\n    deprecated = set()\n\n    if metadata_version in ('1.0', '1.1'):\n        required.update((\n            'Author-email',\n            'License',\n        ))\n    if metadata_version in ('1.1', '1.2', '2.1'):\n        required.update((\n            'Download-URL',\n        ))\n        multivalued.update((\n            'Classifier',\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n    if metadata_version in ('1.2', '2.1'):\n        required.update((\n            'Requires-Python',\n        ))\n        deprecated.update((\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n        fields.update((\n            'Maintainer',\n            'Maintainer-email',\n        ))\n        multivalued.update((\n            'Obsoletes-Dist',\n            'Project-URL',\n            'Provides-Dist',\n            'Requires-Dist',\n            'Requires-External',\n        ))\n    if metadata_version in ('2.1',):\n        fields.update((\n            'Description-Content-Type',\n        ))\n        multivalued.update((\n            'Provides-Extra',\n        ))\n    fields.update(required, deprecated, multivalued)\n\n    return {\n        'fields': fields,\n        'required': required,\n        'multivalued': multivalued,\n        'csv': csv,\n        'deprecated': deprecated,\n    }", "target": 0}, {"function": "def display_sort(metadata):\n    \"\"\"Return an ordered list of key-value pairs, of a given metadata dict\"\"\"\n    key_order = (\n        'Name',\n        'Version',\n        'Summary',\n        'License',\n        'Home-page',\n        'Project-URL',\n        'Download-URL',\n        'Description',\n        'Description-Content-Type',\n        'Author',\n        'Author-email',\n        'Maintainer',\n        'Maintainer-email',\n        'Keywords',\n        'Classifier',\n        'Requires-Python',\n        'Requires-External',\n        'Requires-Dist',\n        'Requires',\n        'Provides-Dist',\n        'Provides',\n        'Provides-Extra',\n        'Obsoletes-Dist',\n        'Obsoletes',\n        'Platform',\n        'Supported-Platform',\n        'Metadata-Version',\n    )\n    indices = dict((key, i) for i, key in enumerate(key_order))\n\n    if isinstance(metadata, dict):\n        metadata = metadata.items()\n\n    return sorted(metadata, key=lambda row: (indices.get(row[0], 100), row))", "target": 0}, {"function": "def render_description(text, content_type):\n    \"\"\"Render Description field to HTML\"\"\"\n    if re.match(r'^.+(\\n {8}.*)+\\n?$', text):\n        text = re.sub(r'^ {8}', '', text, flags=re.MULTILINE)\n\n    if content_type == 'text/x-rst':\n        html = publish_parts(\n            text, writer_name='html',\n            settings_overrides={'syntax_highlight': 'short'})['html_body']\n    elif content_type == 'text/markdown':\n        html = markdown(text, extensions=[GithubFlavoredMarkdownExtension()])\n    else:\n        html = format_html('<pre>{}</pre>', text)\n\n    html = bleach.clean(\n        html, print_tags + ['a', 'cite', 'pre'], print_attrs, all_styles)\n\n    return mark_safe(html)", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
