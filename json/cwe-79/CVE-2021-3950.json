{"index": 6711, "cve_id": "CVE-2021-3950", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "cvss": "5.4", "publish_date": "November 19, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "04483bdac3b5196737516398b5ce0383875a5c60", "commit_message": "Add `att.full_clean()` before saving\n\nFix issue https://github.com/django-helpdesk/django-helpdesk/issues/983\r\nAlso, fix bug stored XSS disclosure: https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/", "commit_date": "2021-11-18T03:42:02Z", "project": "django-helpdesk/django-helpdesk", "url": "https://api.github.com/repos/django-helpdesk/django-helpdesk/commits/04483bdac3b5196737516398b5ce0383875a5c60", "html_url": "https://github.com/django-helpdesk/django-helpdesk/commit/04483bdac3b5196737516398b5ce0383875a5c60", "windows_before": [{"commit_id": "73787bd24580b039f540324631128d3d34fa2976", "commit_date": "Wed Nov 17 12:14:56 2021 -0500", "commit_message": "Merge pull request #981 from GibbsConsulting/master", "files_name": ["fedcca42adb7385e9c0f7d9cf7e3f0ca82607e46 - Fri Nov 12 11:56:22 2021 -0800 : Update tasks.py", "helpdesk/tasks.py"]}, {"commit_id": "91b37f6d73e31dc312c8e3a54b9578b0a0851624", "commit_date": "Fri Nov 12 12:02:19 2021 -0500", "commit_message": "Merge pull request #980 from noobpk/noobpk-fix-xss", "files_name": ["2c7065e0c4296e0c692fb4a7ee19c7357583af30 - Thu Nov 11 17:32:09 2021 +0700 : Add function `htmlEntities`", "helpdesk/templates/helpdesk/ticket_list.html"]}, {"commit_id": "e016e6699d5ab96682785a7f5c3b9c3e2003708e", "commit_date": "Wed Oct 20 08:11:08 2021 -0400", "commit_message": "fix minutes representation in models.py, see #978", "files_name": ["helpdesk/models.py"]}, {"commit_id": "3f245871ac91356fd91a4e2cea5048bcac1d833e", "commit_date": "Wed Oct 20 08:09:02 2021 -0400", "commit_message": "Merge pull request #978 from AmatorAVG/master", "files_name": ["5538985fe1321de79a24d8c1c625ebeba52dbd1d - Wed Oct 20 14:18:38 2021 +0700 : Update models.py", "helpdesk/models.py"]}, {"commit_id": "7a4046b237c4c9614cbf42e188d6c21478dba7ac", "commit_date": "Tue Oct 19 04:41:56 2021 -0400", "commit_message": "azure does not yet support python 3.10", "files_name": ["azure-pipelines.yml"]}, {"commit_id": "08c41b7206cf514b18fb151ad478e32fab949dfb", "commit_date": "Tue Oct 19 03:31:22 2021 -0400", "commit_message": "Really fix azure pipeline testing", "files_name": ["azure-pipelines.yml"]}, {"commit_id": "8e632830de6785ab3367bfee95df428d912ff815", "commit_date": "Tue Oct 19 02:54:52 2021 -0400", "commit_message": "Fix azure pipeline testing", "files_name": ["azure-pipelines.yml"]}, {"commit_id": "d0bbb6905a429a3c2086b19405220236317577b7", "commit_date": "Mon Oct 18 23:05:38 2021 -0400", "commit_message": "Merge fixes from branch '0.3'", "files_name": ["914e751a6de7c097ddf07b75e1f33fe359101cf6 - Mon Oct 18 23:05:03 2021 -0400 : Fix quicktest and update azure config", "azure-pipelines.yml", "quicktest.py"]}, {"commit_id": "e6d14b1d3d2e7e78a76641b376bd0d84fb023eee", "commit_date": "Mon Oct 18 22:31:43 2021 -0400", "commit_message": "Update README with azure build status", "files_name": ["README.rst", "azure-pipelines.yml"]}, {"commit_id": "5ca1f39c232da827c0670c2f763fa00afa074cb4", "commit_date": "Mon Oct 18 01:16:39 2021 -0400", "commit_message": "Update versions and copyrights to begin the 0.4 release dev cycle", "files_name": ["README.rst", "demo/setup.py", "docs/install.rst", "docs/license.rst", "docs/upgrade.rst", "setup.py"]}, {"commit_id": "266694509f7470566f0460fc82a9b7465f56f56c", "commit_date": "Mon Oct 18 01:02:55 2021 -0400", "commit_message": "Update CONTRIBUTING to reference the new 0.3 release branch", "files_name": ["CONTRIBUTING.rst"]}, {"commit_id": "ec96538a54d7e332563a8418533148f9bb79af0a", "commit_date": "Mon Oct 18 00:57:31 2021 -0400", "commit_message": "Set end date for official 0.2 support, update license copyright years", "files_name": ["LICENSE", "SECURITY.md", "demo/setup.py", "setup.py"]}, {"commit_id": "122d8f7b6a9e8be55ef42be66d90596626c78ea7", "commit_date": "Sun Oct 17 23:49:16 2021 -0400", "commit_message": "Update documentation for 0.3.0 release, restrict support to python 3.8+ because earlier pythons are no longer supported upstream anyway", "files_name": ["MANIFEST.in", "README.rst", "azure-pipelines.yml", "demo/README.rst", "demo/setup.py", "docs/install.rst", "docs/upgrade.rst", "setup.py"]}, {"commit_id": "0be0e279b78512beaf26219280f92d1d25a17b9c", "commit_date": "Sun Oct 17 23:34:23 2021 -0400", "commit_message": "Update azure pipelines config to test all versions of django supported", "files_name": ["azure-pipelines.yml", "constraints-Django22.txt", "constraints-Django32.txt"]}, {"commit_id": "751459e5c5efcd9d76e443d586bbc18d0d07f429", "commit_date": "Fri Oct 15 02:33:25 2021 -0400", "commit_message": "Set max 1 parallel", "files_name": ["azure-pipelines.yml"]}, {"commit_id": "2d839df7a0f2dfa06be498c1151040dfa5582e38", "commit_date": "Fri Oct 15 02:22:45 2021 -0400", "commit_message": "Parallel testing isn't free automatically so skip for now", "files_name": ["azure-pipelines.yml"]}, {"commit_id": "36e5370a7d9dca9b28f3d3480d90376e9c14be05", "commit_date": "Fri Oct 15 02:20:40 2021 -0400", "commit_message": "Set up CI with Azure Pipelines", "files_name": ["azure-pipelines.yml"]}, {"commit_id": "558318f35209b617461b0228f43f4b858a92db69", "commit_date": "Tue Oct 5 06:28:13 2021 -0400", "commit_message": "Remove old py2 import from setup", "files_name": ["setup.py"]}, {"commit_id": "aff67184d4f4ecb9ccf7045fcebe132c22a43c0d", "commit_date": "Tue Oct 5 06:25:42 2021 -0400", "commit_message": "Add attachment validator when uploading attachment to tickets", "files_name": ["Makefile", "demo/README.rst", "demo/demodesk/manage.py", "demo/setup.py", "helpdesk/forms.py", "helpdesk/migrations/0036_add_attachment_validator.py", "helpdesk/models.py", "helpdesk/validators.py", "helpdesk/views/staff.py", "setup.py"]}, {"commit_id": "a5f801bb526a18e9cbcea7de422b4c3c56540d3c", "commit_date": "Mon Oct 4 23:13:38 2021 -0400", "commit_message": "use csrf tokens in all forms", "files_name": ["helpdesk/templates/helpdesk/ticket_desc_table.html", "helpdesk/views/staff.py"]}, {"commit_id": "02bdaea76a535ae994e2057f0b8890a5e355b498", "commit_date": "Mon Sep 27 23:19:06 2021 -0400", "commit_message": "Add security warning to comments of demodesk about using secure cookies", "files_name": ["demo/demodesk/config/settings.py"]}, {"commit_id": "166d552fba626c562394f6b5555c2121ab510a47", "commit_date": "Mon Sep 27 22:12:32 2021 -0400", "commit_message": "Turn on secure cookie support if the server os environment expects to use secure connections", "files_name": ["helpdesk/settings.py"]}, {"commit_id": "e8efa4d2631df59914eab5deedddd663ae3b0bc4", "commit_date": "Mon Sep 27 18:59:31 2021 -0400", "commit_message": "Merge remote-tracking branch 'upstream/master'", "files_name": ["3216ff0c55abfe7c6022cfc88daac9b1d8dff562 - Thu Sep 23 10:19:52 2021 -0400 : Merge pull request #974 from passiv/master", "6a0b367171d9fad4557bdf06def065512a5c7b26 - Thu Sep 23 10:07:12 2021 -0300 : fix: strip extraneous whitespace characters that are returned in the Message-ID and In-Reply-To fields from some email providers", "helpdesk/email.py"]}, {"commit_id": "66ed61ee6abf6a93f9fde2dc59a7b2e6f328e1db", "commit_date": "Fri Sep 17 10:09:20 2021 -0400", "commit_message": "Set default autofield to be compatible for django 3.2", "files_name": ["demo/demodesk/config/settings.py", "demo/manage.py", "demo/setup.py", "helpdesk/apps.py", "setup.py"]}, {"commit_id": "f53ee1366db1c98cc30140f1f3450751b3b9b4aa", "commit_date": "Fri Sep 17 07:57:08 2021 -0400", "commit_message": "Create SECURITY.md", "files_name": ["SECURITY.md"]}, {"commit_id": "fc9002b2ac443e712b1fc76267877e3372809bd4", "commit_date": "Wed Sep 15 17:16:30 2021 -0400", "commit_message": "Merge pull request #972 from auto-mat/kb-items-dashboard", "files_name": ["247fd2e26d52352fcec80f34a8ac5666891a64a6 - Tue Sep 14 21:59:25 2021 +0200 : Don't show kbitems on dashboard if there are no unassigned tickets in them", "helpdesk/templates/helpdesk/include/unassigned.html"]}, {"commit_id": "fe171240927fad1196d698bb0c958c9a48a16797", "commit_date": "Tue Sep 14 02:15:54 2021 -0400", "commit_message": "Merge pull request #970 from auto-mat/kb-base-iframe", "files_name": ["650665b21e590201c3a30b528b3da4d477d87bb5 - Mon Sep 13 23:55:49 2021 +0200 : Fix wording of iframe ticket creation buttons", "helpdesk/templates/helpdesk/kb_category_base.html"]}, {"commit_id": "92caf5f284ceaf1b8eee6d1e7db844109340073f", "commit_date": "Mon Sep 13 23:42:03 2021 +0200", "commit_message": "Change ; to & when separating query params", "files_name": ["helpdesk/templates/helpdesk/kb_category_base.html"]}, {"commit_id": "00edddbaad1170fb1ccf6dcd198011e22af6c891", "commit_date": "Fri Aug 20 02:12:55 2021 -0400", "commit_message": "Update docs to recommend using django 3.2 LTS", "files_name": ["README.rst", "docs/install.rst"]}, {"commit_id": "15593339934336fe32f96e5514b8369e5827beda", "commit_date": "Fri Aug 20 02:05:21 2021 -0400", "commit_message": "Fix some docs and migrations in prep for 0.3 release, see #878", "files_name": ["demo/demodesk/config/settings.py", "docs/index.rst", "docs/install.rst", "docs/upgrade.rst", "helpdesk/migrations/0035_alter_email_on_ticket_change.py", "requirements-no-pinax.txt", "requirements.txt"]}, {"commit_id": "8a40ceedddb6c03c37ea156acae833051a232b8b", "commit_date": "Thu Aug 19 16:09:35 2021 -0400", "commit_message": "Merge pull request #967 from auto-mat/iframe-defaults-fix", "files_name": ["a9e5cfa52def60b236b17db8a71e6a920c75d86b - Thu Aug 19 22:00:18 2021 +0200 : Fix hidden field query args", "helpdesk/forms.py"]}, {"commit_id": "b708b786d435ff2f738d862b9f977f21765ddca6", "commit_date": "Thu Aug 19 22:00:06 2021 +0200", "commit_message": "Add failing test for hidden field query args", "files_name": ["helpdesk/tests/test_ticket_submission.py"]}, {"commit_id": "f4b7e899fa106cd2941aa8a1f2465993fe00600b", "commit_date": "Thu Aug 19 20:45:51 2021 +0200", "commit_message": "Change query arg delimiter from ; to &", "files_name": ["docs/integration.rst", "helpdesk/templates/helpdesk/kb_category_base.html", "helpdesk/tests/test_kb.py"]}, {"commit_id": "610460dfd610bd1fe6c5cf486e6a4aa956dd8c99", "commit_date": "Thu Aug 19 14:04:26 2021 -0400", "commit_message": "Merge pull request #965 from auto-mat/large-desk-performance", "files_name": ["9c6e8574cc157bbdd4a0a23e13e5dbc7bf5b31d5 - Thu Aug 5 14:16:14 2021 -0400 : Merge pull request #964 from regiov/pinax-remove", "9fd5d466e59af45b51cdbe990defec8e8cbfcffc - Thu Aug 5 13:19:03 2021 -0400 : Merge pull request #963 from koriaf/dev-subject-length", "563b28ed1425996748501df74526fdc86b3fb25e - Wed Aug 4 11:19:14 2021 -0300 : Merge branch 'master' into pinax-remove", "4f5e9d6006a77bb68abaae9fab1d991188a7e643 - Wed Aug 4 10:38:28 2021 -0300 : Included settings to disable teams", "quicktest.py"]}, {"commit_id": "f6fe738b58a0dce4b41e95a5e6576723bc3bc6a0", "commit_date": "Wed Aug 4 10:26:32 2021 -0300", "commit_message": "Disabled optional apps related to teams", "files_name": ["quicktest.py"]}, {"commit_id": "86c4ceb1a8f6e7778bfcf6a23838c3f1f8f78954", "commit_date": "Thu Jul 29 13:14:42 2021 +0200", "commit_message": "fix(emails): Avoid 'value too long for type character varying(200) ' error when incoming message has too long subject", "files_name": ["helpdesk/models.py", "helpdesk/tests/test_files/blank-body-with-attachment.eml", "helpdesk/tests/test_get_email.py"]}, {"commit_id": "63bb949d63001bdcface90cc866d3cfda57b3712", "commit_date": "Wed Jul 7 20:40:34 2021 +0200", "commit_message": "Don't use redis cache at all for ticket querysets as this breaks pagination", "files_name": ["helpdesk/query.py", "helpdesk/views/staff.py"]}, {"commit_id": "f840136e1ecbfeb2161aaa5a4e9c3ccd0a809010", "commit_date": "Wed Jul 7 20:38:20 2021 +0200", "commit_message": "Don't crash if use email is None", "files_name": ["helpdesk/views/staff.py"]}, {"commit_id": "df05ce2b1f13e2bc2eb4fe55033e0a69e41349f6", "commit_date": "Sun May 16 03:25:14 2021 -0400", "commit_message": "Test against Django 3.2", "files_name": [".travis.yml"]}, {"commit_id": "a8ae89ce232b902ad94861e054125fe633b9c40e", "commit_date": "Tue Apr 20 10:44:28 2021 -0400", "commit_message": "Merge pull request #959 from koriaf/master", "files_name": ["3285d5e1a81bd194a8e4eb8f5a6cf41a0fb54fe4 - Thu Apr 15 10:39:55 2021 +0200 : feat(emails): Do not auto-reply on auto-replies and add auto-reply header for auto-replies and fix headers propagation for our email messages", "helpdesk/email.py", "helpdesk/models.py", "helpdesk/templated_email.py"]}, {"commit_id": "fe9ff2fdc4a0164f18a6d438b7db234dedf395dd", "commit_date": "Mon Apr 19 23:44:03 2021 -0400", "commit_message": "Merge pull request #950 from koriaf/dev-pep8-stuff", "files_name": ["81fae1aefee17e965989926d05f669215b9bb9e6 - Mon Apr 19 23:38:57 2021 -0400 : Merge pull request #958 from koriaf/master", "2b4c82fd1bc4dcc8bf640f6941d400cfc20d504f - Tue Apr 13 14:04:08 2021 +0200 : fix(email): Add ability to attach full first email text to avoid losing forwards, and to save .eml files for any incoming mesages, plus fix tests and some minor bugs", "docs/settings.rst", "helpdesk/.flake8", "helpdesk/email.py", "helpdesk/settings.py", "helpdesk/templates/helpdesk/ticket.html", "helpdesk/templates/helpdesk/ticket_desc_table.html", "helpdesk/tests/test_files/forwarded-message.eml", "helpdesk/tests/test_get_email.py"]}, {"commit_id": "012ba4f42d55282e81419735f15fd81fd44f50b8", "commit_date": "Fri Mar 26 03:48:10 2021 -0400", "commit_message": "Update email.py", "files_name": ["helpdesk/email.py"]}, {"commit_id": "0bdaa87a5874d60b19996068121d1f1de5972018", "commit_date": "Mon Mar 8 13:10:00 2021 -0500", "commit_message": "Merge pull request #951 from passiv/master", "files_name": []}], "windows_after": [{"commit_id": "b78f89c3ef58810f20227f93376df6d120b072b7", "commit_date": "Thu Nov 18 02:55:39 2021 -0500", "commit_message": "Merge pull request #984 from noobpk/noobpk-patch-validators", "files_name": ["44abb197120a843cce5b5fe8276e4a44b8bb2f48 - Fri Nov 19 00:30:20 2021 -0500 : Backport #980, #981, #984 to 0.3", "helpdesk/lib.py", "helpdesk/tasks.py", "helpdesk/templates/helpdesk/ticket_list.html"]}, {"commit_id": "96338bd73fd0d6756a4fb9eb73350ce4fc6f6647", "commit_date": "Fri Nov 19 00:34:21 2021 -0500", "commit_message": "Bump version to 0.3.1", "files_name": ["demo/setup.py", "setup.py"]}, {"commit_id": "ffcc83f91df2e41898ad194cf42499798e292945", "commit_date": "Fri Nov 19 00:37:23 2021 -0500", "commit_message": "Sync master with 0.3", "files_name": ["c54b89f1430c7f2b3d44be46e0f3390f0c64cf7a - Fri Nov 19 13:00:03 2021 +0700 : Add URL schemes that are allowed within links Fix bug Stored XSS via markdown Disclosure: https://huntr.dev/bounties/be7f211d-4bfd-44fd-91e8-682329906fbd/", "helpdesk/models.py", "helpdesk/settings.py"]}, {"commit_id": "4a2ca815fd1788b6e4852d8324035b88f9276454", "commit_date": "Fri Nov 19 15:24:40 2021 +0700", "commit_message": "update pattern fix issue multi-line in text can be bypass", "files_name": ["helpdesk/models.py"]}, {"commit_id": "7097c9c4c0b255ec1f10f3ea14fa2b9c47f6c706", "commit_date": "Fri Nov 19 18:54:34 2021 +0700", "commit_message": "Update pattern and code check", "files_name": ["helpdesk/models.py"]}, {"commit_id": "a22eb0673fe0b7784f99c6b5fd343b64a6700f06", "commit_date": "Fri Nov 19 23:11:33 2021 +0700", "commit_message": "Update pattern", "files_name": ["helpdesk/models.py"]}, {"commit_id": "f73651f8f9808fe740b5bbbe589fb8dc5a14413d", "commit_date": "Sun Nov 21 23:16:16 2021 -0500", "commit_message": "Merge pull request #985 from noobpk/noobpk-fix-xss-markdown", "files_name": ["0d79b6266d583d0d809a6fff3c10097dd28f468e - Sun Nov 21 23:25:54 2021 -0500 : Backport patch for #985", "helpdesk/models.py", "helpdesk/settings.py"]}, {"commit_id": "e7de309159dad498bbb1d8dcf2c24986860772b6", "commit_date": "Sun Nov 21 23:36:17 2021 -0500", "commit_message": "Update CONTRIBUTING for the new branch naming scheme", "files_name": ["CONTRIBUTING.rst"]}, {"commit_id": "94902ec44fc93d1e9fd2858cc2327902d028137a", "commit_date": "Sun Nov 21 23:37:25 2021 -0500", "commit_message": "Bump version to 0.3.2 for bugfix", "files_name": ["demo/setup.py", "setup.py"]}, {"commit_id": "dee21a7727f4f10f2ebfa85be6d4d697a57b1bc4", "commit_date": "Sun Nov 21 23:40:20 2021 -0500", "commit_message": "Merge in 0.3.2 bugfix release", "files_name": ["916ffe750cb1a29b5f95da105358b6be8285f877 - Sun Nov 21 23:52:46 2021 -0500 : Update azure pipelines for new branch names", "azure-pipelines.yml"]}, {"commit_id": "345a713777d7a7c559610f72db1ae22d6187f985", "commit_date": "Fri Dec 31 14:59:37 2021 -0800", "commit_message": "updated validate_file_extension() to look for defined VALID_EXTENTIONS in settings.py so its configurable", "files_name": ["helpdesk/validators.py"]}, {"commit_id": "ae73fec2a0a5a024028d218db00e9cdb488c2a5e", "commit_date": "Fri Dec 31 22:21:28 2021 -0500", "commit_message": "Spellchecking in validators.py", "files_name": ["helpdesk/validators.py"]}, {"commit_id": "09494e961ea00b2715c97c415e3bf8edeff4a975", "commit_date": "Fri Dec 31 22:22:45 2021 -0500", "commit_message": "Merge pull request #987 from wheelert/email-attachment-settings", "files_name": ["3695cfa19dd860ab1b6f38486b5d1ff0ade3c52f - Tue Jan 4 11:47:31 2022 -0500 : Remove comma in staff.py to address #988", "helpdesk/views/staff.py"]}, {"commit_id": "7ac8d20cbefcaae9e627fde65897161fada0c6c7", "commit_date": "Wed Jan 26 14:26:52 2022 -0500", "commit_message": "Fix Javascript typo", "files_name": ["helpdesk/templates/helpdesk/ticket.html"]}, {"commit_id": "e6fddd154e2cbb93500feede45914aadb32a93dc", "commit_date": "Wed Jan 26 19:07:15 2022 -0500", "commit_message": "Merge pull request #989 from jrenaut/patch-1", "files_name": ["a2782c07f46c9e241fd1ca9fefd1c47e8523ed5b - Thu Jan 27 09:51:00 2022 +0100 : Show active page in sidebar depending on the request path url", "helpdesk/templates/helpdesk/navigation-sidebar.html"]}, {"commit_id": "17a1e064e6a5aa2919a426f6c0bd72b87efcfcd3", "commit_date": "Thu Jan 27 10:27:49 2022 +0100", "commit_message": "Undo PR #989", "files_name": ["helpdesk/templates/helpdesk/ticket.html"]}, {"commit_id": "2a8c1511ef04d1e795eb54e820a6dd19d6558023", "commit_date": "Thu Jan 27 07:56:15 2022 -0500", "commit_message": "Merge pull request #990 from auto-mat/preset", "files_name": ["075cdd4cdb93b3462ed11e7ecc27ffb5a4ecceaf - Thu Jan 27 07:58:48 2022 -0500 : Merge pull request #991 from Benbb96/active-sidebar", "e0c075454399ca719a53c7029363860f92c8b3d4 - Wed Feb 9 05:15:14 2022 -0500 : Update to fontawesome 5.15.4", "helpdesk/static/helpdesk/vendor/fontawesome-free/attribution.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/all.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/all.min.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/brands.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/brands.min.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/fontawesome.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/fontawesome.min.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/regular.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/regular.min.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/solid.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/solid.min.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/svg-with-js.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/svg-with-js.min.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/v4-shims.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/css/v4-shims.min.css", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/all.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/all.min.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/brands.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/brands.min.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/conflict-detection.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/conflict-detection.min.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/fontawesome.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/fontawesome.min.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/regular.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/regular.min.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/solid.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/solid.min.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/v4-shims.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/js/v4-shims.min.js", "helpdesk/static/helpdesk/vendor/fontawesome-free/less/_icons.less", "helpdesk/static/helpdesk/vendor/fontawesome-free/less/_variables.less", "helpdesk/static/helpdesk/vendor/fontawesome-free/less/brands.less", "helpdesk/static/helpdesk/vendor/fontawesome-free/less/fontawesome.less", "helpdesk/static/helpdesk/vendor/fontawesome-free/less/regular.less", "helpdesk/static/helpdesk/vendor/fontawesome-free/less/solid.less", "helpdesk/static/helpdesk/vendor/fontawesome-free/less/v4-shims.less", "helpdesk/static/helpdesk/vendor/fontawesome-free/metadata/icons.json", "helpdesk/static/helpdesk/vendor/fontawesome-free/metadata/icons.yml", "helpdesk/static/helpdesk/vendor/fontawesome-free/scss/_icons.scss", "helpdesk/static/helpdesk/vendor/fontawesome-free/scss/_variables.scss", "helpdesk/static/helpdesk/vendor/fontawesome-free/scss/brands.scss", "helpdesk/static/helpdesk/vendor/fontawesome-free/scss/fontawesome.scss", "helpdesk/static/helpdesk/vendor/fontawesome-free/scss/regular.scss", "helpdesk/static/helpdesk/vendor/fontawesome-free/scss/solid.scss", "helpdesk/static/helpdesk/vendor/fontawesome-free/scss/v4-shims.scss", "helpdesk/static/helpdesk/vendor/fontawesome-free/sprites/brands.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/sprites/regular.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/sprites/solid.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/500px.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/accessible-icon.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/accusoft.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/acquisitions-incorporated.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/adn.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/adversal.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/affiliatetheme.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/airbnb.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/algolia.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/alipay.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/amazon-pay.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/amazon.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/amilia.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/android.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/angellist.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/angrycreative.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/angular.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/app-store-ios.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/app-store.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/apper.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/apple-pay.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/apple.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/artstation.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/asymmetrik.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/atlassian.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/audible.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/autoprefixer.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/avianex.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/aviato.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/aws.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bandcamp.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/battle-net.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/behance-square.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/behance.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bimobject.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bitbucket.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bitcoin.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bity.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/black-tie.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/blackberry.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/blogger-b.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/blogger.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bluetooth-b.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bluetooth.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/bootstrap.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/btc.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/buffer.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/buromobelexperte.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/buy-n-large.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/buysellads.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/canadian-maple-leaf.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-amazon-pay.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-amex.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-apple-pay.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-diners-club.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-discover.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-jcb.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-mastercard.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-paypal.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-stripe.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cc-visa.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/centercode.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/centos.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/chrome.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/chromecast.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cloudflare.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cloudscale.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cloudsmith.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cloudversify.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/codepen.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/codiepie.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/confluence.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/connectdevelop.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/contao.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cotton-bureau.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/cpanel.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-by.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-nc-eu.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-nc-jp.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-nc.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-nd.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-pd-alt.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-pd.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-remix.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-sa.svg", "helpdesk/static/helpdesk/vendor/fontawesome-free/svgs/brands/creative-commons-sampling-plus.svg"]}], "parents": [{"commit_id_before": "2c7065e0c4296e0c692fb4a7ee19c7357583af30", "url_before": "https://api.github.com/repos/django-helpdesk/django-helpdesk/commits/2c7065e0c4296e0c692fb4a7ee19c7357583af30", "html_url_before": "https://github.com/django-helpdesk/django-helpdesk/commit/2c7065e0c4296e0c692fb4a7ee19c7357583af30"}], "details": [{"raw_url": "https://github.com/django-helpdesk/django-helpdesk/raw/04483bdac3b5196737516398b5ce0383875a5c60/helpdesk%2Flib.py", "code": "\"\"\"\ndjango-helpdesk - A Django powered ticket tracker for small enterprise.\n\n(c) Copyright 2008 Jutda. All Rights Reserved. See LICENSE for details.\n\nlib.py - Common functions (eg multipart e-mail)\n\"\"\"\n\nimport logging\nimport mimetypes\n\nfrom django.conf import settings\nfrom django.utils.encoding import smart_text\n\nfrom helpdesk.models import FollowUpAttachment\n\n\nlogger = logging.getLogger('helpdesk')\n\n\ndef ticket_template_context(ticket):\n    context = {}\n\n    for field in ('title', 'created', 'modified', 'submitter_email',\n                  'status', 'get_status_display', 'on_hold', 'description',\n                  'resolution', 'priority', 'get_priority_display',\n                  'last_escalation', 'ticket', 'ticket_for_url', 'merged_to',\n                  'get_status', 'ticket_url', 'staff_url', '_get_assigned_to'\n                  ):\n        attr = getattr(ticket, field, None)\n        if callable(attr):\n            context[field] = '%s' % attr()\n        else:\n            context[field] = attr\n    context['assigned_to'] = context['_get_assigned_to']\n\n    return context\n\n\ndef queue_template_context(queue):\n    context = {}\n\n    for field in ('title', 'slug', 'email_address', 'from_address', 'locale'):\n        attr = getattr(queue, field, None)\n        if callable(attr):\n            context[field] = attr()\n        else:\n            context[field] = attr\n\n    return context\n\n\ndef safe_template_context(ticket):\n    \"\"\"\n    Return a dictionary that can be used as a template context to render\n    comments and other details with ticket or queue parameters. Note that\n    we don't just provide the Ticket & Queue objects to the template as\n    they could reveal confidential information. Just imagine these two options:\n        * {{ ticket.queue.email_box_password }}\n        * {{ ticket.assigned_to.password }}\n\n    Ouch!\n\n    The downside to this is that if we make changes to the model, we will also\n    have to update this code. Perhaps we can find a better way in the future.\n    \"\"\"\n\n    context = {\n        'queue': queue_template_context(ticket.queue),\n        'ticket': ticket_template_context(ticket),\n    }\n    context['ticket']['queue'] = context['queue']\n\n    return context\n\n\ndef text_is_spam(text, request):\n    # Based on a blog post by 'sciyoshi':\n    # http://sciyoshi.com/blog/2008/aug/27/using-akismet-djangos-new-comments-framework/\n    # This will return 'True' is the given text is deemed to be spam, or\n    # False if it is not spam. If it cannot be checked for some reason, we\n    # assume it isn't spam.\n    from django.contrib.sites.models import Site\n    from django.core.exceptions import ImproperlyConfigured\n    try:\n        from akismet import Akismet\n    except ImportError:\n        return False\n    try:\n        site = Site.objects.get_current()\n    except ImproperlyConfigured:\n        site = Site(domain='configure-django-sites.com')\n\n    # see https://akismet.readthedocs.io/en/latest/overview.html#using-akismet\n\n    apikey = None\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        apikey = settings.TYPEPAD_ANTISPAM_API_KEY\n    elif hasattr(settings, 'PYTHON_AKISMET_API_KEY'):\n        # new env var expected by python-akismet package\n        apikey = settings.PYTHON_AKISMET_API_KEY\n    elif hasattr(settings, 'AKISMET_API_KEY'):\n        # deprecated, but kept for backward compatibility\n        apikey = settings.AKISMET_API_KEY\n    else:\n        return False\n\n    ak = Akismet(\n        blog_url='http://%s/' % site.domain,\n        key=apikey,\n    )\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        ak.baseurl = 'api.antispam.typepad.com/1.1/'\n\n    if ak.verify_key():\n        ak_data = {\n            'user_ip': request.META.get('REMOTE_ADDR', '127.0.0.1'),\n            'user_agent': request.META.get('HTTP_USER_AGENT', ''),\n            'referrer': request.META.get('HTTP_REFERER', ''),\n            'comment_type': 'comment',\n            'comment_author': '',\n        }\n\n        return ak.comment_check(smart_text(text), data=ak_data)\n\n    return False\n\n\ndef process_attachments(followup, attached_files):\n    max_email_attachment_size = getattr(settings, 'HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE', 512000)\n    attachments = []\n\n    for attached in attached_files:\n\n        if attached.size:\n            filename = smart_text(attached.name)\n            att = FollowUpAttachment(\n                followup=followup,\n                file=attached,\n                filename=filename,\n                mime_type=attached.content_type or\n                mimetypes.guess_type(filename, strict=False)[0] or\n                'application/octet-stream',\n                size=attached.size,\n            )\n            att.full_clean()\n            att.save()\n\n            if attached.size < max_email_attachment_size:\n                # Only files smaller than 512kb (or as defined in\n                # settings.HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE) are sent via email.\n                attachments.append([filename, att.file])\n\n    return attachments\n\n\ndef format_time_spent(time_spent):\n    \"\"\"Format time_spent attribute to \"[H]HHh:MMm\" text string to be allign in\n    all graphical outputs\n    \"\"\"\n\n    if time_spent:\n        time_spent = \"{0:02d}h:{1:02d}m\".format(\n            time_spent.seconds // 3600,\n            time_spent.seconds // 60\n        )\n    else:\n        time_spent = \"\"\n    return time_spent\n", "code_before": "\"\"\"\ndjango-helpdesk - A Django powered ticket tracker for small enterprise.\n\n(c) Copyright 2008 Jutda. All Rights Reserved. See LICENSE for details.\n\nlib.py - Common functions (eg multipart e-mail)\n\"\"\"\n\nimport logging\nimport mimetypes\n\nfrom django.conf import settings\nfrom django.utils.encoding import smart_text\n\nfrom helpdesk.models import FollowUpAttachment\n\n\nlogger = logging.getLogger('helpdesk')\n\n\ndef ticket_template_context(ticket):\n    context = {}\n\n    for field in ('title', 'created', 'modified', 'submitter_email',\n                  'status', 'get_status_display', 'on_hold', 'description',\n                  'resolution', 'priority', 'get_priority_display',\n                  'last_escalation', 'ticket', 'ticket_for_url', 'merged_to',\n                  'get_status', 'ticket_url', 'staff_url', '_get_assigned_to'\n                  ):\n        attr = getattr(ticket, field, None)\n        if callable(attr):\n            context[field] = '%s' % attr()\n        else:\n            context[field] = attr\n    context['assigned_to'] = context['_get_assigned_to']\n\n    return context\n\n\ndef queue_template_context(queue):\n    context = {}\n\n    for field in ('title', 'slug', 'email_address', 'from_address', 'locale'):\n        attr = getattr(queue, field, None)\n        if callable(attr):\n            context[field] = attr()\n        else:\n            context[field] = attr\n\n    return context\n\n\ndef safe_template_context(ticket):\n    \"\"\"\n    Return a dictionary that can be used as a template context to render\n    comments and other details with ticket or queue parameters. Note that\n    we don't just provide the Ticket & Queue objects to the template as\n    they could reveal confidential information. Just imagine these two options:\n        * {{ ticket.queue.email_box_password }}\n        * {{ ticket.assigned_to.password }}\n\n    Ouch!\n\n    The downside to this is that if we make changes to the model, we will also\n    have to update this code. Perhaps we can find a better way in the future.\n    \"\"\"\n\n    context = {\n        'queue': queue_template_context(ticket.queue),\n        'ticket': ticket_template_context(ticket),\n    }\n    context['ticket']['queue'] = context['queue']\n\n    return context\n\n\ndef text_is_spam(text, request):\n    # Based on a blog post by 'sciyoshi':\n    # http://sciyoshi.com/blog/2008/aug/27/using-akismet-djangos-new-comments-framework/\n    # This will return 'True' is the given text is deemed to be spam, or\n    # False if it is not spam. If it cannot be checked for some reason, we\n    # assume it isn't spam.\n    from django.contrib.sites.models import Site\n    from django.core.exceptions import ImproperlyConfigured\n    try:\n        from akismet import Akismet\n    except ImportError:\n        return False\n    try:\n        site = Site.objects.get_current()\n    except ImproperlyConfigured:\n        site = Site(domain='configure-django-sites.com')\n\n    # see https://akismet.readthedocs.io/en/latest/overview.html#using-akismet\n\n    apikey = None\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        apikey = settings.TYPEPAD_ANTISPAM_API_KEY\n    elif hasattr(settings, 'PYTHON_AKISMET_API_KEY'):\n        # new env var expected by python-akismet package\n        apikey = settings.PYTHON_AKISMET_API_KEY\n    elif hasattr(settings, 'AKISMET_API_KEY'):\n        # deprecated, but kept for backward compatibility\n        apikey = settings.AKISMET_API_KEY\n    else:\n        return False\n\n    ak = Akismet(\n        blog_url='http://%s/' % site.domain,\n        key=apikey,\n    )\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        ak.baseurl = 'api.antispam.typepad.com/1.1/'\n\n    if ak.verify_key():\n        ak_data = {\n            'user_ip': request.META.get('REMOTE_ADDR', '127.0.0.1'),\n            'user_agent': request.META.get('HTTP_USER_AGENT', ''),\n            'referrer': request.META.get('HTTP_REFERER', ''),\n            'comment_type': 'comment',\n            'comment_author': '',\n        }\n\n        return ak.comment_check(smart_text(text), data=ak_data)\n\n    return False\n\n\ndef process_attachments(followup, attached_files):\n    max_email_attachment_size = getattr(settings, 'HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE', 512000)\n    attachments = []\n\n    for attached in attached_files:\n\n        if attached.size:\n            filename = smart_text(attached.name)\n            att = FollowUpAttachment(\n                followup=followup,\n                file=attached,\n                filename=filename,\n                mime_type=attached.content_type or\n                mimetypes.guess_type(filename, strict=False)[0] or\n                'application/octet-stream',\n                size=attached.size,\n            )\n            att.save()\n\n            if attached.size < max_email_attachment_size:\n                # Only files smaller than 512kb (or as defined in\n                # settings.HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE) are sent via email.\n                attachments.append([filename, att.file])\n\n    return attachments\n\n\ndef format_time_spent(time_spent):\n    \"\"\"Format time_spent attribute to \"[H]HHh:MMm\" text string to be allign in\n    all graphical outputs\n    \"\"\"\n\n    if time_spent:\n        time_spent = \"{0:02d}h:{1:02d}m\".format(\n            time_spent.seconds // 3600,\n            time_spent.seconds // 60\n        )\n    else:\n        time_spent = \"\"\n    return time_spent\n", "patch": "@@ -145,6 +145,7 @@ def process_attachments(followup, attached_files):\n                 'application/octet-stream',\n                 size=attached.size,\n             )\n+            att.full_clean()\n             att.save()\n \n             if attached.size < max_email_attachment_size:", "file_path": "files/2021_11/87", "file_language": "py", "file_name": "helpdesk/lib.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def ticket_template_context(ticket):\n    context = {}\n\n    for field in ('title', 'created', 'modified', 'submitter_email',\n                  'status', 'get_status_display', 'on_hold', 'description',\n                  'resolution', 'priority', 'get_priority_display',\n                  'last_escalation', 'ticket', 'ticket_for_url', 'merged_to',\n                  'get_status', 'ticket_url', 'staff_url', '_get_assigned_to'\n                  ):\n        attr = getattr(ticket, field, None)\n        if callable(attr):\n            context[field] = '%s' % attr()\n        else:\n            context[field] = attr\n    context['assigned_to'] = context['_get_assigned_to']\n\n    return context", "target": 0}, {"function": "def queue_template_context(queue):\n    context = {}\n\n    for field in ('title', 'slug', 'email_address', 'from_address', 'locale'):\n        attr = getattr(queue, field, None)\n        if callable(attr):\n            context[field] = attr()\n        else:\n            context[field] = attr\n\n    return context", "target": 0}, {"function": "def safe_template_context(ticket):\n    \"\"\"\n    Return a dictionary that can be used as a template context to render\n    comments and other details with ticket or queue parameters. Note that\n    we don't just provide the Ticket & Queue objects to the template as\n    they could reveal confidential information. Just imagine these two options:\n        * {{ ticket.queue.email_box_password }}\n        * {{ ticket.assigned_to.password }}\n\n    Ouch!\n\n    The downside to this is that if we make changes to the model, we will also\n    have to update this code. Perhaps we can find a better way in the future.\n    \"\"\"\n\n    context = {\n        'queue': queue_template_context(ticket.queue),\n        'ticket': ticket_template_context(ticket),\n    }\n    context['ticket']['queue'] = context['queue']\n\n    return context", "target": 0}, {"function": "def text_is_spam(text, request):\n    # Based on a blog post by 'sciyoshi':\n    # http://sciyoshi.com/blog/2008/aug/27/using-akismet-djangos-new-comments-framework/\n    # This will return 'True' is the given text is deemed to be spam, or\n    # False if it is not spam. If it cannot be checked for some reason, we\n    # assume it isn't spam.\n    from django.contrib.sites.models import Site\n    from django.core.exceptions import ImproperlyConfigured\n    try:\n        from akismet import Akismet\n    except ImportError:\n        return False\n    try:\n        site = Site.objects.get_current()\n    except ImproperlyConfigured:\n        site = Site(domain='configure-django-sites.com')\n\n    # see https://akismet.readthedocs.io/en/latest/overview.html#using-akismet\n\n    apikey = None\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        apikey = settings.TYPEPAD_ANTISPAM_API_KEY\n    elif hasattr(settings, 'PYTHON_AKISMET_API_KEY'):\n        # new env var expected by python-akismet package\n        apikey = settings.PYTHON_AKISMET_API_KEY\n    elif hasattr(settings, 'AKISMET_API_KEY'):\n        # deprecated, but kept for backward compatibility\n        apikey = settings.AKISMET_API_KEY\n    else:\n        return False\n\n    ak = Akismet(\n        blog_url='http://%s/' % site.domain,\n        key=apikey,\n    )\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        ak.baseurl = 'api.antispam.typepad.com/1.1/'\n\n    if ak.verify_key():\n        ak_data = {\n            'user_ip': request.META.get('REMOTE_ADDR', '127.0.0.1'),\n            'user_agent': request.META.get('HTTP_USER_AGENT', ''),\n            'referrer': request.META.get('HTTP_REFERER', ''),\n            'comment_type': 'comment',\n            'comment_author': '',\n        }\n\n        return ak.comment_check(smart_text(text), data=ak_data)\n\n    return False", "target": 0}, {"function": "def process_attachments(followup, attached_files):\n    max_email_attachment_size = getattr(settings, 'HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE', 512000)\n    attachments = []\n\n    for attached in attached_files:\n\n        if attached.size:\n            filename = smart_text(attached.name)\n            att = FollowUpAttachment(\n                followup=followup,\n                file=attached,\n                filename=filename,\n                mime_type=attached.content_type or\n                mimetypes.guess_type(filename, strict=False)[0] or\n                'application/octet-stream',\n                size=attached.size,\n            )\n            att.save()\n\n            if attached.size < max_email_attachment_size:\n                # Only files smaller than 512kb (or as defined in\n                # settings.HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE) are sent via email.\n                attachments.append([filename, att.file])\n\n    return attachments", "target": 0}, {"function": "def format_time_spent(time_spent):\n    \"\"\"Format time_spent attribute to \"[H]HHh:MMm\" text string to be allign in\n    all graphical outputs\n    \"\"\"\n\n    if time_spent:\n        time_spent = \"{0:02d}h:{1:02d}m\".format(\n            time_spent.seconds // 3600,\n            time_spent.seconds // 60\n        )\n    else:\n        time_spent = \"\"\n    return time_spent", "target": 0}], "function_after": [{"function": "def ticket_template_context(ticket):\n    context = {}\n\n    for field in ('title', 'created', 'modified', 'submitter_email',\n                  'status', 'get_status_display', 'on_hold', 'description',\n                  'resolution', 'priority', 'get_priority_display',\n                  'last_escalation', 'ticket', 'ticket_for_url', 'merged_to',\n                  'get_status', 'ticket_url', 'staff_url', '_get_assigned_to'\n                  ):\n        attr = getattr(ticket, field, None)\n        if callable(attr):\n            context[field] = '%s' % attr()\n        else:\n            context[field] = attr\n    context['assigned_to'] = context['_get_assigned_to']\n\n    return context", "target": 0}, {"function": "def queue_template_context(queue):\n    context = {}\n\n    for field in ('title', 'slug', 'email_address', 'from_address', 'locale'):\n        attr = getattr(queue, field, None)\n        if callable(attr):\n            context[field] = attr()\n        else:\n            context[field] = attr\n\n    return context", "target": 0}, {"function": "def safe_template_context(ticket):\n    \"\"\"\n    Return a dictionary that can be used as a template context to render\n    comments and other details with ticket or queue parameters. Note that\n    we don't just provide the Ticket & Queue objects to the template as\n    they could reveal confidential information. Just imagine these two options:\n        * {{ ticket.queue.email_box_password }}\n        * {{ ticket.assigned_to.password }}\n\n    Ouch!\n\n    The downside to this is that if we make changes to the model, we will also\n    have to update this code. Perhaps we can find a better way in the future.\n    \"\"\"\n\n    context = {\n        'queue': queue_template_context(ticket.queue),\n        'ticket': ticket_template_context(ticket),\n    }\n    context['ticket']['queue'] = context['queue']\n\n    return context", "target": 0}, {"function": "def text_is_spam(text, request):\n    # Based on a blog post by 'sciyoshi':\n    # http://sciyoshi.com/blog/2008/aug/27/using-akismet-djangos-new-comments-framework/\n    # This will return 'True' is the given text is deemed to be spam, or\n    # False if it is not spam. If it cannot be checked for some reason, we\n    # assume it isn't spam.\n    from django.contrib.sites.models import Site\n    from django.core.exceptions import ImproperlyConfigured\n    try:\n        from akismet import Akismet\n    except ImportError:\n        return False\n    try:\n        site = Site.objects.get_current()\n    except ImproperlyConfigured:\n        site = Site(domain='configure-django-sites.com')\n\n    # see https://akismet.readthedocs.io/en/latest/overview.html#using-akismet\n\n    apikey = None\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        apikey = settings.TYPEPAD_ANTISPAM_API_KEY\n    elif hasattr(settings, 'PYTHON_AKISMET_API_KEY'):\n        # new env var expected by python-akismet package\n        apikey = settings.PYTHON_AKISMET_API_KEY\n    elif hasattr(settings, 'AKISMET_API_KEY'):\n        # deprecated, but kept for backward compatibility\n        apikey = settings.AKISMET_API_KEY\n    else:\n        return False\n\n    ak = Akismet(\n        blog_url='http://%s/' % site.domain,\n        key=apikey,\n    )\n\n    if hasattr(settings, 'TYPEPAD_ANTISPAM_API_KEY'):\n        ak.baseurl = 'api.antispam.typepad.com/1.1/'\n\n    if ak.verify_key():\n        ak_data = {\n            'user_ip': request.META.get('REMOTE_ADDR', '127.0.0.1'),\n            'user_agent': request.META.get('HTTP_USER_AGENT', ''),\n            'referrer': request.META.get('HTTP_REFERER', ''),\n            'comment_type': 'comment',\n            'comment_author': '',\n        }\n\n        return ak.comment_check(smart_text(text), data=ak_data)\n\n    return False", "target": 0}, {"function": "def process_attachments(followup, attached_files):\n    max_email_attachment_size = getattr(settings, 'HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE', 512000)\n    attachments = []\n\n    for attached in attached_files:\n\n        if attached.size:\n            filename = smart_text(attached.name)\n            att = FollowUpAttachment(\n                followup=followup,\n                file=attached,\n                filename=filename,\n                mime_type=attached.content_type or\n                mimetypes.guess_type(filename, strict=False)[0] or\n                'application/octet-stream',\n                size=attached.size,\n            )\n            att.full_clean()\n            att.save()\n\n            if attached.size < max_email_attachment_size:\n                # Only files smaller than 512kb (or as defined in\n                # settings.HELPDESK_MAX_EMAIL_ATTACHMENT_SIZE) are sent via email.\n                attachments.append([filename, att.file])\n\n    return attachments", "target": 0}, {"function": "def format_time_spent(time_spent):\n    \"\"\"Format time_spent attribute to \"[H]HHh:MMm\" text string to be allign in\n    all graphical outputs\n    \"\"\"\n\n    if time_spent:\n        time_spent = \"{0:02d}h:{1:02d}m\".format(\n            time_spent.seconds // 3600,\n            time_spent.seconds // 60\n        )\n    else:\n        time_spent = \"\"\n    return time_spent", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
