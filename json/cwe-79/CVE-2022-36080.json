{"index": 9125, "cve_id": "CVE-2022-36080", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Wikmd is a file based wiki that uses markdown. Prior to version 1.7.1, an attacker could capture user's session cookies or execute malicious Javascript when a victim edits a markdown file. Version 1.7.1 fixes this issue.", "cvss": "6.1", "publish_date": "September 7, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "259412c47d64d5b85980f95345179fbf05927798", "commit_message": "Merge pull request from GHSA-9m4m-6gqx-gfj3\n\nSECURITY PATCH: prevent XSS by cleaning html code", "commit_date": "2022-09-04T07:54:03Z", "project": "linbreux/wikmd", "url": "https://api.github.com/repos/Linbreux/wikmd/commits/259412c47d64d5b85980f95345179fbf05927798", "html_url": "https://github.com/Linbreux/wikmd/commit/259412c47d64d5b85980f95345179fbf05927798", "windows_before": [{"commit_id": "e6457dc73778e61ffdf5d2f70425982bbba31c2e", "commit_date": "Sat Sep 3 22:04:24 2022 +0000", "commit_message": "Bump jinja2 from 2.11.2 to 2.11.3", "files_name": ["requirements.txt"]}, {"commit_id": "495d06fceb2e73f734f93ade8bc412f9cd5ebb0f", "commit_date": "Sat Sep 3 19:45:36 2022 +0200", "commit_message": "Merge pull request #60 from kura/issue-58", "files_name": ["0788dc3348201f116de4e28c6dcfd7513df5d83f - Sat Sep 3 19:40:18 2022 +0200 : Merge pull request #57 from potatoes1286/patch-1", "605c9762a6ab04aeea04951de4df4a74446b8422 - Sat Sep 3 16:44:40 2022 +0100 : Fixes #58", "knowledge_graph.py"]}, {"commit_id": "2117a5f463d04f5379b571e9b2eb32afcdfc7f0b", "commit_date": "Fri Sep 2 20:41:25 2022 -0400", "commit_message": "Add solutions for potentially obscure install issue", "files_name": ["docs/installation/regular_install.md"]}, {"commit_id": "171cdea18abc00a9574723fec7f47ecd3251fbea", "commit_date": "Thu Aug 25 20:27:54 2022 +0200", "commit_message": "Merge pull request #56 from kura/fix-missing-dir", "files_name": ["adb2feba5c57debbbd39b9d6d8009ccf124cd743 - Thu Aug 25 19:01:07 2022 +0100 : Add empty js directory. Fixes #55", "static/js/.empty"]}, {"commit_id": "ea0c46802ed8381634664aca7c6e4aee40fb574e", "commit_date": "Thu Aug 25 19:15:37 2022 +0200", "commit_message": "remove local filepond and use deps", "files_name": ["static/css/filepond.css", "static/js/filepond.js", "templates/new.html", "web_dependencies.py", "wiki/Features.md"]}, {"commit_id": "3a0f8fc7c2dcd5b46d8733145c60896570707403", "commit_date": "Thu Aug 25 18:53:44 2022 +0200", "commit_message": "Merge pull request #54 from Oliver-Hanikel/local-mode", "files_name": ["c754c0c262d28e63ab9f086dbf535d735a376a93 - Thu Aug 25 18:49:25 2022 +0200 : add idna to requirements.txt", "requirements.txt"]}, {"commit_id": "409cc62bd8e3c031be844e16531b07c393a814e1", "commit_date": "Thu Aug 25 18:40:06 2022 +0200", "commit_message": "downgrade requests to older version to support python 3.6", "files_name": ["requirements.txt"]}, {"commit_id": "9bca3b11f7d505a730ee3e8c4b196ecb36a83def", "commit_date": "Thu Aug 25 00:01:04 2022 +0200", "commit_message": "fix a bug, where an unset LOCAL_MODE envvar would crash", "files_name": ["config.py"]}, {"commit_id": "0d1a81cc4ec910d093a848e883e3cf3be153795c", "commit_date": "Fri Aug 19 16:52:02 2022 +0200", "commit_message": "add local mode to \"environment variables.md\"", "files_name": ["docs/environment variables.md"]}, {"commit_id": "573ee081db752578d41609ca4e261de449ec76b1", "commit_date": "Fri Aug 19 16:35:36 2022 +0200", "commit_message": "add local mode", "files_name": ["config.py", "docs/yaml-configuration.md", "requirements.txt", "templates/base.html", "templates/knowledge-graph.html", "templates/new.html", "web_dependencies.py", "wiki.py", "wikmd-config.yaml"]}, {"commit_id": "d3822face22874ac2287b3a52f4bd1faaf209a0a", "commit_date": "Fri Jun 10 15:56:10 2022 +0200", "commit_message": "update images", "files_name": ["README.md", "docs/Screenshots.md", "docs/images/black.png", "docs/images/editor.png", "docs/images/file_upload.png", "docs/images/graph.png", "docs/images/homepage.png", "docs/images/lightmode.png", "docs/images/list.png", "docs/images/password_protect.png"]}, {"commit_id": "228eb0f8bf9ec6f18d55f8370d544188cc2b126d", "commit_date": "Thu Jun 9 23:16:55 2022 +0200", "commit_message": "Merge pull request #48 from Linbreux/feature_password_protect_edit", "files_name": ["0d9c368e5e16c6a7328847e2cd5457649cc54549 - Thu Jun 9 23:12:30 2022 +0200 : update features", "docs/index.md"]}, {"commit_id": "55009b81a06bc44f8ef3f268fa55d7f953b269f7", "commit_date": "Thu Jun 9 23:10:59 2022 +0200", "commit_message": "Merge branch 'main' into feature_password_protect_edit", "files_name": ["c747631cde7134f378c677184329ace98318dd5c - Thu Jun 9 23:09:15 2022 +0200 : add single password with basic sessions for mod actions", "config.py", "docs/environment variables.md", "docs/yaml-configuration.md", "templates/login.html", "wiki.py", "wikmd-config.yaml"]}, {"commit_id": "d2fede875e022fbc551f9b4f50831c2cbe7eb4c0", "commit_date": "Thu Jun 9 20:43:28 2022 +0200", "commit_message": "Merge pull request #47 from artivis/fix/docker-ci", "files_name": ["688c5dea93fc1ffcace0b58e1a959e7d0f243bfb - Thu Jun 9 11:51:48 2022 -0400 : fix docker ci", ".github/workflows/docker.yml"]}, {"commit_id": "b65261756f5bfddfd5c30b2440201db295a1e6e9", "commit_date": "Thu Jun 9 09:58:20 2022 +0200", "commit_message": "Merge pull request #46 from artivis/patch-1", "files_name": ["5f0b961d78826e85a362457aa276c3d953968573 - Thu Jun 9 09:55:17 2022 +0200 : Merge branch 'main' of github.com:Linbreux/wikmd into main", "4c659cad28f8b96c02ffcc7c615b85083aaa1ab8 - Thu Jun 9 09:54:50 2022 +0200 : fix error at init git #44", "git_manager.py"]}, {"commit_id": "ffdd3f5ab9a5bb2c6912d7ce3ddb7126e1a574ab", "commit_date": "Wed Jun 8 12:19:07 2022 -0400", "commit_message": "fix docker image tagging", "files_name": [".github/workflows/docker.yml"]}, {"commit_id": "e5143a5a3808b3f8e55fbd0d6141e99b42e2f1d0", "commit_date": "Wed Jun 8 15:52:05 2022 +0200", "commit_message": "Update docker.yml", "files_name": [".github/workflows/docker.yml"]}, {"commit_id": "605ae8d1f28e905328e8bc47dcd74cb6d997e27b", "commit_date": "Wed Jun 8 15:40:52 2022 +0200", "commit_message": "Merge pull request #45 from artivis/fix/docker", "files_name": ["e90c2d457eb003f753234a374099baf635d176f2 - Wed Jun 8 15:39:52 2022 +0200 : fix little typo in README", "docker/README.md"]}, {"commit_id": "ac753640dada195a5adf847b717c5e8876a5d218", "commit_date": "Mon Jun 6 18:42:57 2022 -0400", "commit_message": "add docker image ci", "files_name": [".github/workflows/docker.yml"]}, {"commit_id": "5ffe7b4d0c1b69bc9cf08d3d0c37a03244a91509", "commit_date": "Mon Jun 6 18:42:44 2022 -0400", "commit_message": "fixes docker image", "files_name": ["docker/Dockerfile", "docker/Dockerfile.aarch64", "docker/Dockerfile.armhf", "docker/README.md", "docker/root/etc/cont-init.d/30-config", "docker/root/etc/services.d/wikmd/run"]}, {"commit_id": "6339804eb54c39c5c1d590a3eae5d50b569d07a0", "commit_date": "Mon Jun 6 10:40:24 2022 +0200", "commit_message": "Update docker.md", "files_name": ["docs/installation/docker.md"]}, {"commit_id": "9c58b09e1c49d3c85bf9a6db8da2615972a1cd2c", "commit_date": "Mon Jun 6 10:39:37 2022 +0200", "commit_message": "Update README.md", "files_name": ["docker/README.md"]}, {"commit_id": "7bfffcec719c92a07bcc6e654cde7e125f43bb33", "commit_date": "Sun Jun 5 20:18:42 2022 +0200", "commit_message": "Delete docker.yml", "files_name": [".github/workflows/docker.yml"]}, {"commit_id": "96604990fd27b748bdbccfac7b4b260dd72f4586", "commit_date": "Sun Jun 5 20:08:24 2022 +0200", "commit_message": "Update docker.yml", "files_name": [".github/workflows/docker.yml"]}, {"commit_id": "843b4bf1cde512da038f57d0e604fbed3f83a9e5", "commit_date": "Sun Jun 5 20:04:54 2022 +0200", "commit_message": "Create docker.yml", "files_name": [".github/workflows/docker.yml"]}, {"commit_id": "44b6b287ba932b41247f6a8b2cd225ba51c73643", "commit_date": "Sun Jun 5 11:33:42 2022 +0200", "commit_message": "change permission docker", "files_name": ["docker/root/etc/cont-init.d/30-config"]}, {"commit_id": "f2b235c29ae3d48a0696d2291484f40fbf25c237", "commit_date": "Thu May 12 23:09:20 2022 +0200", "commit_message": "make sure docker runs correct - git is not yet supported in docker", "files_name": ["config.py", "docker/root/etc/services.d/wikmd/run"]}, {"commit_id": "2fd06139673b099fcbca1727e320294c872cf2d3", "commit_date": "Wed May 4 20:31:13 2022 +0200", "commit_message": "update docker systemd", "files_name": ["docker/root/etc/services.d/wikmd/run"]}, {"commit_id": "a800818aae0e2b57900b988811232a18f249feb1", "commit_date": "Fri Apr 15 14:31:04 2022 +0200", "commit_message": "Merge branch 'main' of github.com:Linbreux/wikmd into main", "files_name": ["04bd51d89c2fe69d8608f03b2b314761fc6a9915 - Fri Apr 15 14:30:45 2022 +0200 : add documentation about systemd service", "docs/installation/regular_install.md"]}, {"commit_id": "1f4de2d7712e00ba464651300da2b0f1513775ec", "commit_date": "Sat Apr 9 20:39:27 2022 +0200", "commit_message": "Merge pull request #38 from Mik3Rizzo/config-refactoring", "files_name": ["b033ed8bfddab86a1085212d060e2ee51d9b4c44 - Sat Apr 9 20:37:43 2022 +0200 : Merge branch 'main' into config-refactoring", "4ee2779440e9b925ddd8809a1799b4f74f63c772 - Fri Apr 8 18:55:18 2022 +0200 : Updated docs", "docs/environment variables.md"]}, {"commit_id": "125b8c10939742e4d65bdf6c2424301a774e63cc", "commit_date": "Fri Apr 8 16:20:10 2022 +0200", "commit_message": "Merge pull request #37 from Linbreux/gitmanager_folder_create", "files_name": ["9ce195768bbc26b30bd22b1916a9aba5ce60cb65 - Fri Apr 8 15:03:19 2022 +0200 : Creates a folder if it does not exist", "git_manager.py"]}, {"commit_id": "82e1ad92592c71ab881d8776e3acadea3d2cf016", "commit_date": "Tue Apr 5 07:31:24 2022 +0200", "commit_message": "Merge pull request #35 from Mik3Rizzo/main", "files_name": ["b4d392b8d98e5b18f5849b483f3594a853e39c8b - Tue Apr 5 01:47:02 2022 +0200 : Updated docs", "docs/environment variables.md", "docs/yaml-configuration.md"]}, {"commit_id": "f20c1d79236c0a19bf7f207c069579b17262d05e", "commit_date": "Tue Apr 5 01:28:50 2022 +0200", "commit_message": "'knowledge_graph' now uses WikmdConfig. Small refactoring.", "files_name": ["knowledge_graph.py"]}, {"commit_id": "f942e92257d85bc984dce6e1597effede7041682", "commit_date": "Tue Apr 5 01:21:47 2022 +0200", "commit_message": "Env. vars take precedence on yaml config file.", "files_name": ["config.py"]}, {"commit_id": "926f6d6d1182db50e00c16068c1ce26161554b5a", "commit_date": "Tue Apr 5 01:12:57 2022 +0200", "commit_message": "Added config parameters 'git_user', 'git_email', 'main_branch_name' both in yaml and with env. vars.", "files_name": ["config.py", "git_manager.py", "wikmd-config.yaml"]}, {"commit_id": "7d216a3e15f803525c74fac5d431a550d1ab70e8", "commit_date": "Tue Apr 5 00:54:19 2022 +0200", "commit_message": "Created WikmdConfig class and refactored the code to use it", "files_name": ["config.py", "git_manager.py", "wiki.py"]}, {"commit_id": "290e8dcc62937b1e0297bfe8f47f587a24c47014", "commit_date": "Tue Apr 5 00:26:54 2022 +0200", "commit_message": "FIX: renamed 'page_name' to 'page' to prevent exception during page delete.", "files_name": ["wiki.py"]}, {"commit_id": "deafcf190fceff5cae430451692f45bc37700d9a", "commit_date": "Mon Apr 4 20:04:10 2022 +0200", "commit_message": "Merge pull request #29 from Mik3Rizzo/main", "files_name": ["454721dec0a4308484fe100bd7d2bd9a7b0871f7 - Mon Apr 4 20:01:11 2022 +0200 : Merge branch 'main' into main", "d225f90b93fd898522cacad37087e6e0edc4e2c0 - Mon Apr 4 19:58:58 2022 +0200 : add docs", "docs/Customization.md", "docs/connect_git_and_online_repo.md", "docs/images/github_create_notes.png"]}, {"commit_id": "d74aec45c78b8856075a82d6e3b4e9dd40245fdd", "commit_date": "Mon Apr 4 19:38:45 2022 +0200", "commit_message": "revert", "files_name": [".gitignore", "wikmd-config.yaml"]}, {"commit_id": "7facf56e38b887bdc9f0404e5c3df66b61f990c9", "commit_date": "Mon Apr 4 19:35:11 2022 +0200", "commit_message": "rm cahced wikmd-config.yml", "files_name": ["wikmd-config.yaml"]}, {"commit_id": "7012767f1091bece8623d2056aad7c9deff35ea0", "commit_date": "Mon Apr 4 19:23:40 2022 +0200", "commit_message": "add files to gitignore and remove temps", "files_name": [".gitignore", "temp/Features.md", "temp/How to use the wiki.md", "temp/Markdown cheatsheet.md", "temp/Using the version control system.md", "temp/homepage.md", "temp/img/.gitignore"]}, {"commit_id": "da698169fa7ff1e7e7e145be1d43f2e6def6873a", "commit_date": "Mon Apr 4 19:08:52 2022 +0200", "commit_message": "increase performence by putting git_sync in a thread", "files_name": ["wiki.py"]}, {"commit_id": "34935c94e25652074a8aedb30e2e2a781da0fcef", "commit_date": "Mon Apr 4 18:09:24 2022 +0200", "commit_message": "Refactoring: created new 'utils.py' file with general useful methods", "files_name": ["git_manager.py", "utils.py"]}, {"commit_id": "822ebac5423d7d71c703adb94123003a75a4d8f4", "commit_date": "Mon Apr 4 18:04:13 2022 +0200", "commit_message": "FIX: changed from 'git checkout' to 'git branch -M'; blank remote repos should finally work", "files_name": []}], "windows_after": [{"commit_id": "8d1f94ec86b5b6c3df8ef10051facfb511a78450", "commit_date": "Sun Sep 4 13:53:10 2022 +0200", "commit_message": "Merge pull request from GHSA-w4cf-92x9-v8w2", "files_name": ["66fe81a02916d5ad0ac14da1dd72e61bae06c958 - Sun Sep 4 14:04:56 2022 +0200 : small fix for simplicity", "wiki.py"]}, {"commit_id": "fbb4654626e284012cfdd62a86f719bcef62f256", "commit_date": "Sat Sep 3 14:35:57 2022 +0100", "commit_message": "Add caching to wiki entries and homepage", "files_name": ["TODO.md", "cache.py", "config.py", "docs/environment variables.md", "requirements.txt", "wiki.py", "wikmd-config.yaml"]}, {"commit_id": "e7ba284ddb6d8e65de7a559535fada8beafb18fe", "commit_date": "Sun Sep 4 14:15:52 2022 -0400", "commit_message": "Added solution for missing python deps when running as service", "files_name": ["docs/installation/regular_install.md"]}, {"commit_id": "334e1d4afb2e7e128876940fbcc42949fbc69309", "commit_date": "Mon Sep 5 09:08:02 2022 +0200", "commit_message": "Merge pull request #63 from potatoes1286/patch-2", "files_name": ["5ecdacde761ee5b061bacce7ea5be217f122b74f - Mon Sep 5 13:04:58 2022 +0200 : Merge pull request #59 from kura/caching", "c2e177066edb7b72ebafaa9a1ce3c88fdb35c8ca - Mon Sep 5 23:24:45 2022 +0100 : Create a fresh new cache each time wikmd is started/restarted", "cache.py"]}, {"commit_id": "7322b04f3205fe3aa868dfc710cb6e44adb3e487", "commit_date": "Tue Sep 6 18:54:47 2022 +0200", "commit_message": "Merge pull request #64 from kura/fix-delete-cache-on-start", "files_name": ["69b78e085075acb6ec765bef2d7086b163946aa8 - Tue Sep 6 21:07:02 2022 +0000 : Initial Whoosh search work (#61)", "TODO.md", "config.py", "docs/environment variables.md", "git_manager.py", "knowledge_graph.py", "requirements.txt", "search.py", "templates/base.html", "templates/search.html", "tests/test_basics.py", "tests/test_search.py", "wiki.py", "wikmd-config.yaml"]}, {"commit_id": "984ae3fd80cd44687068584ee15f2f59e7dc91d9", "commit_date": "Wed Sep 7 11:37:29 2022 +0100", "commit_message": "Fixes/changes for #65", "files_name": ["git_manager.py", "search.py", "tests/test_search.py"]}, {"commit_id": "970b5000eaf7b412b142a7ee57a7c8e722c12d09", "commit_date": "Wed Sep 7 18:27:43 2022 +0200", "commit_message": "Merge pull request #66 from kura/fix-search-abspath", "files_name": ["2efc04f2c93a6bba1717426c04f958964b6951eb - Wed Sep 7 23:27:46 2022 +0200 : fix the armhf and aarch64 Docker images no longer building due to the lxml dependency", "docker/Dockerfile.aarch64", "docker/Dockerfile.armhf"]}, {"commit_id": "b695438e6020851cfece693e3c952cfffa584b19", "commit_date": "Thu Sep 8 20:19:38 2022 +0200", "commit_message": "Merge pull request #67 from Oliver-Hanikel/fix-docker-arm", "files_name": ["26ae98c96c611a35509987e0141032d022b339f8 - Sat Sep 10 23:17:38 2022 +0200 : use secrets instead of random for generating session tokens", "wiki.py"]}, {"commit_id": "5f9c8c459868365745cb3fdb8ff03b7090f958c3", "commit_date": "Sun Sep 11 13:00:10 2022 +0100", "commit_message": "Remove the search term escaping to improve search functionality. This will allow search to now correctly split terms, as well as allow using + to force AND in the search query. i.e. 'hi+hello' means AND(Term(Hi), Term(Hello)), by default a space means OR, i.e. 'hi hello' OR(Term(hi), Term(hello))", "files_name": ["wiki.py"]}, {"commit_id": "11723c218b3fc0ea80b7a001f3bf471f7cb83576", "commit_date": "Sun Sep 11 15:02:16 2022 +0200", "commit_message": "fix some spelling and grammar", "files_name": ["docs/Using the wiki.md", "docs/environment variables.md", "docs/installation/regular_install.md", "tests/test_basics.py", "utils.py", "wiki/How to use the wiki.md", "wiki/homepage.md"]}, {"commit_id": "08df95258d2185017eea09a2cb7d87e685a3182b", "commit_date": "Sun Sep 11 15:38:19 2022 +0200", "commit_message": "fix some issues with the code:  - use os.path.join and f-strings instead of concatenating strings  - remove unneeded imports  - create the upload folder if it does not exist  - remove unneeded statements in knowledge-graph.html  - make list_files.html more readable  - close a tags in list_files.html and search.html  - new.html    - use navigator.clipboard.writeText instead of document.execCommand since it is deprecated    - create the message texts more idiomatically", "files_name": ["knowledge_graph.py", "search.py", "templates/knowledge-graph.html", "templates/list_files.html", "templates/new.html", "templates/search.html", "wiki.py"]}, {"commit_id": "7c235492c6235af698990c0d36a5e5f567832f20", "commit_date": "Sun Sep 11 14:11:38 2022 +0100", "commit_message": "Add pagination to search results", "files_name": ["search.py", "templates/search.html", "tests/test_search.py", "wiki.py"]}, {"commit_id": "0ebf41d875e42e1f6cb98c62ba9a94b5c6aa55f5", "commit_date": "Sun Sep 11 19:47:41 2022 +0200", "commit_message": "Merge pull request #71 from Oliver-Hanikel/secure-token-generation", "files_name": ["1b0e6e4e93eef2558228b43878e7dc73c66ad063 - Sun Sep 11 20:11:36 2022 +0200 : Merge pull request #72 from kura/fix-remove-re-escape-from-search-term", "e49da69f6e5d75843ba6fc8770a9b9046b92633c - Sun Sep 11 20:24:47 2022 +0200 : Merge pull request #73 from kura/feature-search-pagination", "0020ecedfc9ea94a8fed3677b7d7083619771895 - Sun Sep 11 20:31:09 2022 +0200 : Merge pull request #74 from Oliver-Hanikel/small-code-improvements", "7f0e7d0d10df3be641b133c4f40fee2a8d3f9e7b - Mon Sep 12 01:20:24 2022 +0200 : delete unused images on startup and enforce allowed image types on the client side", "cleanup.py", "config.py", "templates/new.html", "web_dependencies.py", "wiki.py", "wikmd-config.yaml"]}, {"commit_id": "fc3ecd78f57cbd856f3adcd632d86660bdfd0a2c", "commit_date": "Mon Sep 12 18:50:14 2022 +0200", "commit_message": "add ImageManager currently it can save, delete and cleanup images. Images now also get cached indefinitely on the client side", "files_name": ["cleanup.py", "config.py", "image_manager.py", "wiki.py"]}, {"commit_id": "962e59eff57d7dd93cdfd331e5802cf2f548b336", "commit_date": "Tue Sep 13 12:54:38 2022 +0200", "commit_message": "add the option to optimize images and add code formatting to the copy prompt on new.html", "files_name": ["config.py", "docs/environment variables.md", "docs/yaml-configuration.md", "image_manager.py", "templates/new.html", "wiki.py", "wikmd-config.yaml"]}, {"commit_id": "68264b908fae0fd7fbabe423e553b6087c5de4af", "commit_date": "Wed Sep 14 11:53:47 2022 +0200", "commit_message": "add webp detection log message and fix a bug", "files_name": ["image_manager.py"]}, {"commit_id": "4b6f0f06bb832514326bb46c029bea18a0ae98c1", "commit_date": "Thu Sep 15 18:46:56 2022 +0200", "commit_message": "Merge pull request #75 from Oliver-Hanikel/image-improvements", "files_name": ["cbd07c8370b958a7fcfc4ab59adaabae1838a04a - Mon Sep 19 20:07:44 2022 +0100 : Change dark mode toggle to use a return path as a request argument rather than using the Referer header. Fixes #76", "templates/base.html", "wiki.py"]}, {"commit_id": "04482d30fe502d96fee440423a4c823bd683dd3f", "commit_date": "Tue Sep 20 20:09:43 2022 +0200", "commit_message": "Merge pull request #77 from kura/fix-76", "files_name": ["8c3f1fd38c06304c914b1fcb0b8d49c5a3e01566 - Thu Sep 29 18:18:01 2022 +0200 : fix the directory traversal vulnerabilities as described in #80", "image_manager.py", "wiki.py"]}, {"commit_id": "ea77b808e80c04971cb4ae5a21335b45934c0401", "commit_date": "Mon Oct 3 09:13:17 2022 +0200", "commit_message": "Merge pull request #82 from Oliver-Hanikel/directory-traversal-fix", "files_name": ["c1001fea690fde9e3b0425d158b8193369c94d94 - Fri Nov 25 14:18:42 2022 +0100 : Merge https://github.com/linbreux/wikmd", "5c08138cdf47316be12592ec066c2faa93f2030c - Fri Nov 25 14:24:37 2022 +0100 : Added copy-paste functionality for all pre-blocks", "templates/base.html"]}, {"commit_id": "3b0dff58c6827f1318c81c97d4434a86ce266a33", "commit_date": "Fri Nov 25 14:26:59 2022 +0100", "commit_message": "Added web dependencies", "files_name": ["static/js/copypaste.js", "web_dependencies.py"]}, {"commit_id": "fa3c887cbf521fa29dab3d24b49431c580da7af7", "commit_date": "Fri Nov 25 14:34:18 2022 +0100", "commit_message": "Apparently, external source also needs to be specified", "files_name": ["web_dependencies.py"]}, {"commit_id": "7f79ed24cd629862cdddce0d531234ff899b79cb", "commit_date": "Fri Nov 25 14:37:56 2022 +0100", "commit_message": "Using hard link to local js asset", "files_name": ["templates/base.html", "web_dependencies.py"]}, {"commit_id": "e990b66d046c5fc587477f431cb45127388b333a", "commit_date": "Fri Nov 25 14:56:58 2022 +0100", "commit_message": "Sorted things out with web dependencies", "files_name": ["templates/base.html", "templates/content.html", "web_dependencies.py"]}, {"commit_id": "9633df21df8f7dcc10e3c9df0332dd14458feef5", "commit_date": "Mon Dec 19 16:46:22 2022 +0100", "commit_message": "Updated wiki css", "files_name": ["static/css/wiki.css"]}, {"commit_id": "4ac5f97ac1c6734d2b395e038af36baa9eb920e5", "commit_date": "Mon Dec 19 16:59:35 2022 +0100", "commit_message": "Trying relative position", "files_name": ["static/css/wiki.css"]}, {"commit_id": "cacb0917853c39d21c4dca9bd9a38324a9c4c27f", "commit_date": "Mon Dec 19 17:10:39 2022 +0100", "commit_message": "Updated styling of pre-blocks and copy button", "files_name": ["static/css/wiki.css", "static/js/copypaste.js"]}, {"commit_id": "f945aeddb87d045734a836e31944186ba3ef7972", "commit_date": "Mon Dec 19 17:22:52 2022 +0100", "commit_message": "Added a button tooltip", "files_name": ["static/js/copypaste.js"]}, {"commit_id": "a5439f1166b1e081ffcdc7272bc82ec75bb505cf", "commit_date": "Mon Dec 19 17:26:25 2022 +0100", "commit_message": "Added word-wrapping to pre tags", "files_name": ["static/css/wiki.css"]}, {"commit_id": "885273bf3726a4febe8cb566bf74739250e3ff89", "commit_date": "Tue Jan 3 10:17:36 2023 +0100", "commit_message": "Merge pull request #88 from reactorcoremeltdown/main", "files_name": ["925be59e4f4492dbc788c05d2a422407eebd2b08 - Thu Jan 5 20:11:13 2023 +0000 : change the copy icon to something a little more modern", "static/css/wiki.css", "static/images/file-copy-white.svg", "static/images/file-copy.svg", "static/js/copypaste.js", "templates/content.html"]}, {"commit_id": "b1e60e34d3af6674140405a677d2d8934703a593", "commit_date": "Thu Jan 5 21:16:20 2023 +0100", "commit_message": "Drop python 3.6 support and add 3.9", "files_name": [".github/workflows/main.yml"]}, {"commit_id": "4cc67973d1c6bb3623d8b2c59675038012495ce9", "commit_date": "Tue Jan 10 23:10:33 2023 +0000", "commit_message": "WIP: drawio integration", "files_name": ["plugins/draw.py", "plugins/load_plugins.py", "static/js/drawio.js", "templates/content.html", "wiki.py"]}, {"commit_id": "c3419ee7281992ef2d9d7a4c5a5b3bbd7d49385d", "commit_date": "Tue Jan 10 23:37:09 2023 +0000", "commit_message": "add config to hide folder", "files_name": ["config.py", "wiki.py", "wikmd-config.yaml"]}, {"commit_id": "ba7121bf9c6e71a2bb314d967ce958c29b70174e", "commit_date": "Tue Jan 10 23:37:43 2023 +0000", "commit_message": "fMerge branch 'main' of https://github.com/Linbreux/wikmd into main", "files_name": ["156478f0b18b002bbcbdc2126e239b438660672b - Wed Jan 11 20:35:31 2023 +0000 : clean up the code and add some plugin functions", "__init__.py", "plugins/__init__.py", "plugins/draw/__init__.py", "plugins/draw/default_draw", "plugins/draw/draw.py", "plugins/load_plugins.py", "static/js/drawio.js", "templates/content.html", "wiki.py"]}, {"commit_id": "e7dd41c77c7b10448e7c653cd6d8d471690f8fcc", "commit_date": "Wed Jan 11 20:35:48 2023 +0000", "commit_message": "Merge branch 'main' into drawio_integration", "files_name": ["a14508b91c5b11b85c7429dc534319e5fe4917e6 - Wed Jan 11 20:52:13 2023 +0000 : add plugins in config", "config.py", "plugins/draw/drawings/.gitignore", "wiki.py", "wikmd-config.yaml"]}], "parents": [{"commit_id_before": "2640ada5aca49c7e7181c7c324d0ab516424ee86", "url_before": "https://api.github.com/repos/Linbreux/wikmd/commits/2640ada5aca49c7e7181c7c324d0ab516424ee86", "html_url_before": "https://github.com/Linbreux/wikmd/commit/2640ada5aca49c7e7181c7c324d0ab516424ee86"}, {"commit_id_before": "05390965e9b9b64ae379f1ffd6b679b4a97be4a2", "url_before": "https://api.github.com/repos/Linbreux/wikmd/commits/05390965e9b9b64ae379f1ffd6b679b4a97be4a2", "html_url_before": "https://github.com/Linbreux/wikmd/commit/05390965e9b9b64ae379f1ffd6b679b4a97be4a2"}], "details": [{"raw_url": "https://github.com/Linbreux/wikmd/raw/259412c47d64d5b85980f95345179fbf05927798/requirements.txt", "code": "click==7.1.2\nFlask==1.1.2\ngitdb==4.0.5\nGitPython==3.1.11\nitsdangerous==1.1.0\nJinja2==2.11.3\nMarkdown==3.3.3\nMarkupSafe==1.1.1\npandoc-eqnos==2.4.0\npandoc-fignos==2.4.0\npandoc-secnos==2.2.2\npandoc-tablenos==2.3.0\npandoc-xnos==2.5.0\npandocfilters==1.4.3\npsutil==5.7.3\npypandoc==1.5\nPyYAML==6.0\nrequests==2.27.1\nsmmap==3.0.4\nWerkzeug==1.0.1\nidna==3.3\nlxml==4.9.1\n", "code_before": "click==7.1.2\nFlask==1.1.2\ngitdb==4.0.5\nGitPython==3.1.11\nitsdangerous==1.1.0\nJinja2==2.11.2\nMarkdown==3.3.3\nMarkupSafe==1.1.1\npandoc-eqnos==2.4.0\npandoc-fignos==2.4.0\npandoc-secnos==2.2.2\npandoc-tablenos==2.3.0\npandoc-xnos==2.5.0\npandocfilters==1.4.3\npsutil==5.7.3\npypandoc==1.5\nPyYAML==6.0\nrequests==2.27.1\nsmmap==3.0.4\nWerkzeug==1.0.1\nidna==3.3\nlxml==4.9.1\n", "patch": "@@ -19,3 +19,4 @@ requests==2.27.1\n smmap==3.0.4\n Werkzeug==1.0.1\n idna==3.3\n+lxml==4.9.1", "file_path": "files/2022_9/1100", "file_language": "txt", "file_name": "requirements.txt", "outdated_file_modify": 1, "outdated_file_before": 1, "outdated_file_after": 0}, {"raw_url": "https://github.com/Linbreux/wikmd/raw/259412c47d64d5b85980f95345179fbf05927798/wiki.py", "code": "import os\nfrom shutil import ExecError\nimport time\nimport re\nimport logging\nimport uuid\nfrom lxml.html.clean import clean_html\nimport pypandoc\nimport knowledge_graph\nimport random\nimport string\n\nfrom flask import Flask, render_template, request, redirect, url_for, send_from_directory, make_response\nfrom werkzeug.utils import secure_filename\nfrom random import randint\nfrom threading import Thread\nfrom hashlib import sha256\n\nfrom config import WikmdConfig\nfrom git_manager import WikiRepoManager\nfrom web_dependencies import get_web_deps\n\n\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}\n\nSESSIONS = []\n\ncfg = WikmdConfig()\nUPLOAD_FOLDER = f\"{cfg.wiki_directory}/{cfg.images_route}\"\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n# console logger\napp.logger.setLevel(logging.INFO)\n\n# file logger\nlogger = logging.getLogger('werkzeug')\nlogger.setLevel(logging.ERROR)\n\nwrm = WikiRepoManager(flask_app=app)\n\nSYSTEM_SETTINGS = {\n    \"darktheme\": False,\n    \"listsortMTime\": False,\n    \"web_deps\": get_web_deps(cfg.local_mode, app.logger)\n}\n\ndef save(page_name):\n    \"\"\"\n    Function that saves a *.md page.\n    :param page_name: name of the page\n    \"\"\"\n    content = request.form['CT']\n    app.logger.info(f\"Saving >>> '{page_name}' ...\")\n\n    try:\n        filename = os.path.join(cfg.wiki_directory, page_name + '.md')\n        dirname = os.path.dirname(filename)\n        if not os.path.exists(dirname):\n            os.makedirs(dirname)\n        with open(filename, 'w') as f:\n            f.write(content)\n    except Exception as e:\n        app.logger.error(f\"Error while saving '{page_name}' >>> {str(e)}\")\n\n\ndef search():\n    \"\"\"\n    Function that searches for a term and shows the results.\n    \"\"\"\n    search_term = request.form['ss']\n    escaped_search_term = re.escape(search_term)\n    found = []\n\n    app.logger.info(f\"Searching >>> '{search_term}' ...\")\n\n    for root, subfolder, files in os.walk(cfg.wiki_directory):\n        for item in files:\n            path = os.path.join(root, item)\n            if os.path.join(cfg.wiki_directory, '.git') in str(path):\n                # We don't want to search there\n                app.logger.debug(f\"Skipping {path} is git file\")\n                continue\n            if os.path.join(cfg.wiki_directory, cfg.images_route) in str(path):\n                # Nothing interesting there too\n                continue\n            with open(root + '/' + item, encoding=\"utf8\", errors='ignore') as f:\n                fin = f.read()\n                try:\n                    if (re.search(escaped_search_term, root + '/' + item, re.IGNORECASE) or\n                            re.search(escaped_search_term, fin, re.IGNORECASE) is not None):\n                        # Stripping 'wiki/' part of path before serving as a search result\n                        folder = root[len(cfg.wiki_directory + \"/\"):]\n                        if folder == \"\":\n                            url = os.path.splitext(\n                                root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n                        else:\n                            url = \"/\" + \\\n                                  os.path.splitext(\n                                      root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n\n                        info = {'doc': item,\n                                'url': url,\n                                'folder': folder,\n                                'folder_url': root[len(cfg.wiki_directory + \"/\"):]}\n                        found.append(info)\n                        app.logger.info(f\"Found '{search_term}' in '{item}'\")\n                except Exception as e:\n                    app.logger.error(f\"Error while searching >>> {str(e)}\")\n\n    return render_template('search.html', zoekterm=found, system=SYSTEM_SETTINGS)\n\n\ndef fetch_page_name() -> str:\n    page_name = request.form['PN']\n    if page_name[-4:] == \"{id}\":\n        page_name = f\"{page_name[:-4]}{uuid.uuid4().hex}\"\n    return page_name\n\n\n@app.route('/list/', methods=['GET'])\ndef list_full_wiki():\n    return list_wiki(\"\")\n\n\n@app.route('/list/<path:folderpath>/', methods=['GET'])\ndef list_wiki(folderpath):\n    folder_list = []\n    app.logger.info(\"Showing >>> 'all files'\")\n    for root, subfolder, files in os.walk(os.path.join(cfg.wiki_directory, folderpath)):\n        if root[-1] == '/':\n            root = root[:-1]\n        for item in files:\n            path = os.path.join(root, item)\n            mtime = os.path.getmtime(os.path.join(root, item))\n            if os.path.join(cfg.wiki_directory, '.git') in str(path):\n                # We don't want to search there\n                app.logger.debug(f\"skipping {path}: is git file\")\n                continue\n            if os.path.join(cfg.wiki_directory, cfg.images_route) in str(path):\n                # Nothing interesting there too\n                continue\n\n            folder = root[len(cfg.wiki_directory + \"/\"):]\n            if folder == \"\":\n                if item == cfg.homepage:\n                    continue\n                url = os.path.splitext(\n                    root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n            else:\n                url = \"/\" + \\\n                    os.path.splitext(\n                        root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n\n            info = {'doc': item,\n                    'url': url,\n                    'folder': folder,\n                    'folder_url': folder,\n                    'mtime': mtime,\n                    }\n            folder_list.append(info)\n\n    if SYSTEM_SETTINGS['listsortMTime']:\n        folder_list.sort(key=lambda x: x[\"mtime\"], reverse=True)\n    else:\n        folder_list.sort(key=lambda x: (str(x[\"url\"]).casefold()))\n\n    return render_template('list_files.html', list=folder_list, folder=folderpath, system=SYSTEM_SETTINGS)\n\n\n@app.route('/<path:file_page>', methods=['POST', 'GET'])\ndef file_page(file_page):\n    if request.method == 'POST':\n        return search()\n    else:\n        html = \"\"\n        mod = \"\"\n        folder = \"\"\n\n        if \"favicon\" not in file_page:  # if the GET request is not for the favicon\n            try:\n                md_file_path = os.path.join(cfg.wiki_directory, file_page + \".md\")\n                # latex = pypandoc.convert_file(\"wiki/\" + file_page + \".md\", \"tex\", format=\"md\")\n                # html = pypandoc.convert_text(latex,\"html5\",format='tex', extra_args=[\"--mathjax\"])\n\n                app.logger.info(f\"Converting to HTML with pandoc >>> '{md_file_path}' ...\")\n                html = pypandoc.convert_file(md_file_path, \"html5\",\n                                             format='md', extra_args=[\"--mathjax\"], filters=['pandoc-xnos'])\n                html = clean_html(html)\n                mod = \"Last modified: %s\" % time.ctime(os.path.getmtime(md_file_path))\n                folder = file_page.split(\"/\")\n                file_page = folder[-1:][0]\n                folder = folder[:-1]\n                folder = \"/\".join(folder)\n                app.logger.info(f\"Showing HTML page >>> '{file_page}'\")\n            except Exception as a:\n                app.logger.info(a)\n\n        return render_template('content.html', title=file_page, folder=folder, info=html, modif=mod,\n                               system=SYSTEM_SETTINGS)\n\n\n@app.route('/', methods=['POST', 'GET'])\ndef index():\n    if request.method == 'POST':\n        return search()\n    else:\n        html = \"\"\n        app.logger.info(\"Showing HTML page >>> 'homepage'\")\n        try:\n            app.logger.info(\"Converting to HTML with pandoc >>> 'homepage' ...\")\n            html = pypandoc.convert_file(\n                os.path.join(cfg.wiki_directory, cfg.homepage), \"html5\", format='md', extra_args=[\"--mathjax\"],\n                filters=['pandoc-xnos'])\n            html = clean_html(html)\n\n        except Exception as e:\n            app.logger.error(f\"Conversion to HTML failed >>> {str(e)}\")\n\n        return render_template('index.html', homepage=html, system=SYSTEM_SETTINGS)\n\n\n@app.route('/add_new', methods=['POST', 'GET'])\ndef add_new():\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return login(\"/add_new\")\n    if request.method == 'POST':\n        page_name = fetch_page_name()\n        save(page_name)\n        git_sync_thread = Thread(target=wrm.git_sync, args=(page_name, \"Add\"))\n        git_sync_thread.start()\n\n        return redirect(url_for(\"file_page\", file_page=page_name))\n    else:\n        return render_template('new.html', upload_path=cfg.images_route, system=SYSTEM_SETTINGS)\n\n\n@app.route('/edit/homepage', methods=['POST', 'GET'])\ndef edit_homepage():\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return login(\"/edit/homepage\")\n\n    if request.method == 'POST':\n        page_name = fetch_page_name()\n        save(page_name)\n        git_sync_thread = Thread(target=wrm.git_sync, args=(page_name, \"Edit\"))\n        git_sync_thread.start()\n\n        return redirect(url_for(\"file_page\", file_page=page_name))\n    else:\n\n        with open(os.path.join(cfg.wiki_directory, cfg.homepage), 'r', encoding=\"utf-8\", errors='ignore') as f:\n\n            content = f.read()\n        return render_template(\"new.html\", content=content, title=cfg.homepage_title, upload_path=cfg.images_route,\n                               system=SYSTEM_SETTINGS)\n\n\n@app.route('/remove/<path:page>', methods=['GET'])\ndef remove(page):\n    app.logger.info(request.cookies.get('session_wikmd'))\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return redirect(url_for(\"file_page\", file_page=page))\n\n    filename = os.path.join(cfg.wiki_directory, page + '.md')\n    os.remove(filename)\n    git_sync_thread = Thread(target=wrm.git_sync, args=(page, \"Remove\"))\n    git_sync_thread.start()\n    return redirect(\"/\")\n\n\n@app.route('/edit/<path:page>', methods=['POST', 'GET'])\ndef edit(page):\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return login(page)\n    filename = os.path.join(cfg.wiki_directory, page + '.md')\n    if request.method == 'POST':\n        page_name = fetch_page_name()\n        if page_name != page:\n            os.remove(filename)\n\n        save(page_name)\n        git_sync_thread = Thread(target=wrm.git_sync, args=(page_name, \"Edit\"))\n        git_sync_thread.start()\n\n        return redirect(url_for(\"file_page\", file_page=page_name))\n    else:\n        with open(filename, 'r', encoding=\"utf-8\", errors='ignore') as f:\n            content = f.read()\n        return render_template(\"new.html\", content=content, title=page, upload_path=cfg.images_route,\n                               system=SYSTEM_SETTINGS)\n\n\n@app.route('/' + cfg.images_route, methods=['POST', 'DELETE'])\ndef upload_file():\n    app.logger.info(f\"Uploading new image ...\")\n    # Upload image when POST\n    if request.method == \"POST\":\n        file_names = []\n        for key in request.files:\n            file = request.files[key]\n            filename = secure_filename(file.filename)\n            # bug found by cat-0\n            while filename in os.listdir(os.path.join(cfg.wiki_directory, cfg.images_route)):\n                app.logger.info(\n                    \"There is a duplicate, solving this by extending the filename...\")\n                filename, file_extension = os.path.splitext(filename)\n                filename = filename + str(randint(1, 9999999)) + file_extension\n\n            file_names.append(filename)\n            try:\n                app.logger.info(f\"Saving image >>> '{filename}' ...\")\n                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            except Exception as e:\n                app.logger.error(f\"Error while saving image >>> {str(e)}\")\n        return filename\n\n    # DELETE when DELETE\n    if request.method == \"DELETE\":\n        # request data is in format \"b'nameoffile.png\" decode by utf-8\n        filename = request.data.decode(\"utf-8\")\n        try:\n            app.logger.info(f\"Removing >>> '{str(filename)}' ...\")\n            os.remove((os.path.join(app.config['UPLOAD_FOLDER'], filename)))\n        except Exception as e:\n            app.logger.error(f\"Could not remove {str(filename)}\")\n        return 'OK'\n\n\n@app.route('/knowledge-graph', methods=['GET'])\ndef graph():\n    global links\n    links = knowledge_graph.find_links()\n    return render_template(\"knowledge-graph.html\", links=links, system=SYSTEM_SETTINGS)\n\n\n@app.route('/login', methods=['GET','POST'])\ndef login(page):\n    if request.method == \"POST\":\n        password = request.form[\"password\"]\n        sha_string = sha256(password.encode('utf-8')).hexdigest()\n        if sha_string == cfg.password_in_sha_256.lower():\n            app.logger.info(\"User successfully logged in\")\n            resp = make_response(redirect(page))\n            session = ''.join(random.choice(string.ascii_lowercase) for i in range(231))\n            resp.set_cookie(\"session_wikmd\",session)\n            SESSIONS.append(session)\n            return resp\n        else:\n            app.logger.info(\"Login failed!\")\n    else:\n        app.logger.info(\"Display login page\")\n    return render_template(\"login.html\", system=SYSTEM_SETTINGS)\n\n# Translate id to page path\n\n\n@app.route('/nav/<path:id>/', methods=['GET'])\ndef nav_id_to_page(id):\n    for i in links:\n        if i[\"id\"] == int(id):\n            return redirect(\"/\"+i[\"path\"])\n    return redirect(\"/\")\n\n\n@app.route('/' + cfg.images_route + '/<path:filename>')\ndef display_image(filename):\n    # print('display_image filename: ' + filename)\n    return send_from_directory(UPLOAD_FOLDER, filename, as_attachment=False)\n\n\n@app.route('/toggle-darktheme/', methods=['GET'])\ndef toggle_darktheme():\n    SYSTEM_SETTINGS['darktheme'] = not SYSTEM_SETTINGS['darktheme']\n    return redirect(request.referrer)  # redirect to the same page URL\n\n\n@app.route('/toggle-sorting/', methods=['GET'])\ndef toggle_sort():\n    SYSTEM_SETTINGS['listsortMTime'] = not SYSTEM_SETTINGS['listsortMTime']\n    return redirect(\"/list\")\n\n\ndef run_wiki():\n    \"\"\"\n    Function that runs the wiki as a Flask app.\n    \"\"\"\n    if int(cfg.wikmd_logging) == 1:\n        logging.basicConfig(filename=cfg.wikmd_logging_file, level=logging.INFO)\n\n    app.run(host=cfg.wikmd_host, port=cfg.wikmd_port, debug=True, use_reloader=False)\n\n\nif __name__ == '__main__':\n    run_wiki()\n", "code_before": "import os\nfrom shutil import ExecError\nimport time\nimport re\nimport logging\nimport uuid\nfrom lxml.html.clean import clean_html\nimport pypandoc\nimport knowledge_graph\nimport random\nimport string\n\nfrom flask import Flask, render_template, request, redirect, url_for, send_from_directory, make_response\nfrom werkzeug.utils import secure_filename\nfrom random import randint\nfrom threading import Thread\nfrom hashlib import sha256\n\nfrom config import WikmdConfig\nfrom git_manager import WikiRepoManager\nfrom web_dependencies import get_web_deps\n\n\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}\n\nSESSIONS = []\n\ncfg = WikmdConfig()\nUPLOAD_FOLDER = f\"{cfg.wiki_directory}/{cfg.images_route}\"\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n# console logger\napp.logger.setLevel(logging.INFO)\n\n# file logger\nlogger = logging.getLogger('werkzeug')\nlogger.setLevel(logging.ERROR)\n\nwrm = WikiRepoManager(flask_app=app)\n\nSYSTEM_SETTINGS = {\n    \"darktheme\": False,\n    \"listsortMTime\": False,\n    \"web_deps\": get_web_deps(cfg.local_mode, app.logger)\n}\n\ndef save(page_name):\n    \"\"\"\n    Function that saves a *.md page.\n    :param page_name: name of the page\n    \"\"\"\n    content = request.form['CT']\n    app.logger.info(f\"Saving >>> '{page_name}' ...\")\n\n    try:\n        filename = os.path.join(cfg.wiki_directory, page_name + '.md')\n        dirname = os.path.dirname(filename)\n        if not os.path.exists(dirname):\n            os.makedirs(dirname)\n        with open(filename, 'w') as f:\n            f.write(content)\n    except Exception as e:\n        app.logger.error(f\"Error while saving '{page_name}' >>> {str(e)}\")\n\n\ndef search():\n    \"\"\"\n    Function that searches for a term and shows the results.\n    \"\"\"\n    search_term = request.form['ss']\n    escaped_search_term = re.escape(search_term)\n    found = []\n\n    app.logger.info(f\"Searching >>> '{search_term}' ...\")\n\n    for root, subfolder, files in os.walk(cfg.wiki_directory):\n        for item in files:\n            path = os.path.join(root, item)\n            if os.path.join(cfg.wiki_directory, '.git') in str(path):\n                # We don't want to search there\n                app.logger.debug(f\"Skipping {path} is git file\")\n                continue\n            if os.path.join(cfg.wiki_directory, cfg.images_route) in str(path):\n                # Nothing interesting there too\n                continue\n            with open(root + '/' + item, encoding=\"utf8\", errors='ignore') as f:\n                fin = f.read()\n                try:\n                    if (re.search(escaped_search_term, root + '/' + item, re.IGNORECASE) or\n                            re.search(escaped_search_term, fin, re.IGNORECASE) is not None):\n                        # Stripping 'wiki/' part of path before serving as a search result\n                        folder = root[len(cfg.wiki_directory + \"/\"):]\n                        if folder == \"\":\n                            url = os.path.splitext(\n                                root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n                        else:\n                            url = \"/\" + \\\n                                  os.path.splitext(\n                                      root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n\n                        info = {'doc': item,\n                                'url': url,\n                                'folder': folder,\n                                'folder_url': root[len(cfg.wiki_directory + \"/\"):]}\n                        found.append(info)\n                        app.logger.info(f\"Found '{search_term}' in '{item}'\")\n                except Exception as e:\n                    app.logger.error(f\"Error while searching >>> {str(e)}\")\n\n    return render_template('search.html', zoekterm=found, system=SYSTEM_SETTINGS)\n\n\ndef fetch_page_name() -> str:\n    page_name = request.form['PN']\n    if page_name[-4:] == \"{id}\":\n        page_name = f\"{page_name[:-4]}{uuid.uuid4().hex}\"\n    return page_name\n\n\n@app.route('/list/', methods=['GET'])\ndef list_full_wiki():\n    return list_wiki(\"\")\n\n\n@app.route('/list/<path:folderpath>/', methods=['GET'])\ndef list_wiki(folderpath):\n    folder_list = []\n    app.logger.info(\"Showing >>> 'all files'\")\n    for root, subfolder, files in os.walk(os.path.join(cfg.wiki_directory, folderpath)):\n        if root[-1] == '/':\n            root = root[:-1]\n        for item in files:\n            path = os.path.join(root, item)\n            mtime = os.path.getmtime(os.path.join(root, item))\n            if os.path.join(cfg.wiki_directory, '.git') in str(path):\n                # We don't want to search there\n                app.logger.debug(f\"skipping {path}: is git file\")\n                continue\n            if os.path.join(cfg.wiki_directory, cfg.images_route) in str(path):\n                # Nothing interesting there too\n                continue\n\n            folder = root[len(cfg.wiki_directory + \"/\"):]\n            if folder == \"\":\n                if item == cfg.homepage:\n                    continue\n                url = os.path.splitext(\n                    root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n            else:\n                url = \"/\" + \\\n                    os.path.splitext(\n                        root[len(cfg.wiki_directory + \"/\"):] + \"/\" + item)[0]\n\n            info = {'doc': item,\n                    'url': url,\n                    'folder': folder,\n                    'folder_url': folder,\n                    'mtime': mtime,\n                    }\n            folder_list.append(info)\n\n    if SYSTEM_SETTINGS['listsortMTime']:\n        folder_list.sort(key=lambda x: x[\"mtime\"], reverse=True)\n    else:\n        folder_list.sort(key=lambda x: (str(x[\"url\"]).casefold()))\n\n    return render_template('list_files.html', list=folder_list, folder=folderpath, system=SYSTEM_SETTINGS)\n\n\n@app.route('/<path:file_page>', methods=['POST', 'GET'])\ndef file_page(file_page):\n    if request.method == 'POST':\n        return search()\n    else:\n        html = \"\"\n        mod = \"\"\n        folder = \"\"\n\n        if \"favicon\" not in file_page:  # if the GET request is not for the favicon\n            try:\n                md_file_path = os.path.join(cfg.wiki_directory, file_page + \".md\")\n                # latex = pypandoc.convert_file(\"wiki/\" + file_page + \".md\", \"tex\", format=\"md\")\n                # html = pypandoc.convert_text(latex,\"html5\",format='tex', extra_args=[\"--mathjax\"])\n\n                app.logger.info(f\"Converting to HTML with pandoc >>> '{md_file_path}' ...\")\n                html = pypandoc.convert_file(md_file_path, \"html5\",\n                                             format='md', extra_args=[\"--mathjax\"], filters=['pandoc-xnos'])\n                html = clean_html(html)\n                mod = \"Last modified: %s\" % time.ctime(os.path.getmtime(md_file_path))\n                folder = file_page.split(\"/\")\n                file_page = folder[-1:][0]\n                folder = folder[:-1]\n                folder = \"/\".join(folder)\n                app.logger.info(f\"Showing HTML page >>> '{file_page}'\")\n            except Exception as a:\n                app.logger.info(a)\n\n        return render_template('content.html', title=file_page, folder=folder, info=html, modif=mod,\n                               system=SYSTEM_SETTINGS)\n\n\n@app.route('/', methods=['POST', 'GET'])\ndef index():\n    if request.method == 'POST':\n        return search()\n    else:\n        html = \"\"\n        app.logger.info(\"Showing HTML page >>> 'homepage'\")\n        try:\n            app.logger.info(\"Converting to HTML with pandoc >>> 'homepage' ...\")\n            html = pypandoc.convert_file(\n                os.path.join(cfg.wiki_directory, cfg.homepage), \"html5\", format='md', extra_args=[\"--mathjax\"],\n                filters=['pandoc-xnos'])\n            html = clean_html(html)\n\n        except Exception as e:\n            app.logger.error(f\"Conversion to HTML failed >>> {str(e)}\")\n\n        return render_template('index.html', homepage=html, system=SYSTEM_SETTINGS)\n\n\n@app.route('/add_new', methods=['POST', 'GET'])\ndef add_new():\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return login(\"/add_new\")\n    if request.method == 'POST':\n        page_name = fetch_page_name()\n        save(page_name)\n        git_sync_thread = Thread(target=wrm.git_sync, args=(page_name, \"Add\"))\n        git_sync_thread.start()\n\n        return redirect(url_for(\"file_page\", file_page=page_name))\n    else:\n        return render_template('new.html', upload_path=cfg.images_route, system=SYSTEM_SETTINGS)\n\n\n@app.route('/edit/homepage', methods=['POST', 'GET'])\ndef edit_homepage():\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return login(\"/edit/homepage\")\n\n    if request.method == 'POST':\n        page_name = fetch_page_name()\n        save(page_name)\n        git_sync_thread = Thread(target=wrm.git_sync, args=(page_name, \"Edit\"))\n        git_sync_thread.start()\n\n        return redirect(url_for(\"file_page\", file_page=page_name))\n    else:\n\n        with open(os.path.join(cfg.wiki_directory, cfg.homepage), 'r', encoding=\"utf-8\", errors='ignore') as f:\n\n            content = f.read()\n        return render_template(\"new.html\", content=content, title=cfg.homepage_title, upload_path=cfg.images_route,\n                               system=SYSTEM_SETTINGS)\n\n\n@app.route('/remove/<path:page>', methods=['GET'])\ndef remove(page):\n    app.logger.info(request.cookies.get('session_wikmd'))\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return redirect(url_for(\"file_page\", file_page=page))\n\n    filename = os.path.join(cfg.wiki_directory, page + '.md')\n    os.remove(filename)\n    git_sync_thread = Thread(target=wrm.git_sync, args=(page, \"Remove\"))\n    git_sync_thread.start()\n    return redirect(\"/\")\n\n\n@app.route('/edit/<path:page>', methods=['POST', 'GET'])\ndef edit(page):\n    if(bool(cfg.protect_edit_by_password) and (request.cookies.get('session_wikmd') not in SESSIONS)):\n        return login(page)\n    filename = os.path.join(cfg.wiki_directory, page + '.md')\n    if request.method == 'POST':\n        page_name = fetch_page_name()\n        if page_name != page:\n            os.remove(filename)\n\n        save(page_name)\n        git_sync_thread = Thread(target=wrm.git_sync, args=(page_name, \"Edit\"))\n        git_sync_thread.start()\n\n        return redirect(url_for(\"file_page\", file_page=page_name))\n    else:\n        with open(filename, 'r', encoding=\"utf-8\", errors='ignore') as f:\n            content = f.read()\n        return render_template(\"new.html\", content=content, title=page, upload_path=cfg.images_route,\n                               system=SYSTEM_SETTINGS)\n\n\n@app.route('/' + cfg.images_route, methods=['POST', 'DELETE'])\ndef upload_file():\n    app.logger.info(f\"Uploading new image ...\")\n    # Upload image when POST\n    if request.method == \"POST\":\n        file_names = []\n        for key in request.files:\n            file = request.files[key]\n            filename = secure_filename(file.filename)\n            # bug found by cat-0\n            while filename in os.listdir(os.path.join(cfg.wiki_directory, cfg.images_route)):\n                app.logger.info(\n                    \"There is a duplicate, solving this by extending the filename...\")\n                filename, file_extension = os.path.splitext(filename)\n                filename = filename + str(randint(1, 9999999)) + file_extension\n\n            file_names.append(filename)\n            try:\n                app.logger.info(f\"Saving image >>> '{filename}' ...\")\n                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            except Exception as e:\n                app.logger.error(f\"Error while saving image >>> {str(e)}\")\n        return filename\n\n    # DELETE when DELETE\n    if request.method == \"DELETE\":\n        # request data is in format \"b'nameoffile.png\" decode by utf-8\n        filename = request.data.decode(\"utf-8\")\n        try:\n            app.logger.info(f\"Removing >>> '{str(filename)}' ...\")\n            os.remove((os.path.join(app.config['UPLOAD_FOLDER'], filename)))\n        except Exception as e:\n            app.logger.error(f\"Could not remove {str(filename)}\")\n        return 'OK'\n\n\n@app.route('/knowledge-graph', methods=['GET'])\ndef graph():\n    global links\n    links = knowledge_graph.find_links()\n    return render_template(\"knowledge-graph.html\", links=links, system=SYSTEM_SETTINGS)\n\n\n@app.route('/login', methods=['GET','POST'])\ndef login(page):\n    if request.method == \"POST\":\n        password = request.form[\"password\"]\n        sha_string = sha256(password.encode('utf-8')).hexdigest()\n        if sha_string == cfg.password_in_sha_256.lower():\n            app.logger.info(\"User successfully logged in\")\n            resp = make_response(redirect(page))\n            session = ''.join(random.choice(string.ascii_lowercase) for i in range(231))\n            resp.set_cookie(\"session_wikmd\",session)\n            SESSIONS.append(session)\n            return resp\n        else:\n            app.logger.info(\"Login failed!\")\n    else:\n        app.logger.info(\"Display login page\")\n    return render_template(\"login.html\", system=SYSTEM_SETTINGS)\n\n# Translate id to page path\n\n\n@app.route('/nav/<path:id>/', methods=['GET'])\ndef nav_id_to_page(id):\n    for i in links:\n        if i[\"id\"] == int(id):\n            return redirect(\"/\"+i[\"path\"])\n    return redirect(\"/\")\n\n\n@app.route('/' + cfg.images_route + '/<path:filename>')\ndef display_image(filename):\n    # print('display_image filename: ' + filename)\n    return send_from_directory(UPLOAD_FOLDER, filename, as_attachment=False)\n\n\n@app.route('/toggle-darktheme/', methods=['GET'])\ndef toggle_darktheme():\n    SYSTEM_SETTINGS['darktheme'] = not SYSTEM_SETTINGS['darktheme']\n    return redirect(request.referrer)  # redirect to the same page URL\n\n\n@app.route('/toggle-sorting/', methods=['GET'])\ndef toggle_sort():\n    SYSTEM_SETTINGS['listsortMTime'] = not SYSTEM_SETTINGS['listsortMTime']\n    return redirect(\"/list\")\n\n\ndef run_wiki():\n    \"\"\"\n    Function that runs the wiki as a Flask app.\n    \"\"\"\n    if int(cfg.wikmd_logging) == 1:\n        logging.basicConfig(filename=cfg.wikmd_logging_file, level=logging.INFO)\n\n    app.run(host=cfg.wikmd_host, port=cfg.wikmd_port, debug=True, use_reloader=False)\n\n\nif __name__ == '__main__':\n    run_wiki()\n", "patch": "@@ -4,6 +4,7 @@\n import re\n import logging\n import uuid\n+from lxml.html.clean import clean_html\n import pypandoc\n import knowledge_graph\n import random\n@@ -186,7 +187,7 @@ def file_page(file_page):\n                 app.logger.info(f\"Converting to HTML with pandoc >>> '{md_file_path}' ...\")\n                 html = pypandoc.convert_file(md_file_path, \"html5\",\n                                              format='md', extra_args=[\"--mathjax\"], filters=['pandoc-xnos'])\n-\n+                html = clean_html(html)\n                 mod = \"Last modified: %s\" % time.ctime(os.path.getmtime(md_file_path))\n                 folder = file_page.split(\"/\")\n                 file_page = folder[-1:][0]\n@@ -212,6 +213,7 @@ def index():\n             html = pypandoc.convert_file(\n                 os.path.join(cfg.wiki_directory, cfg.homepage), \"html5\", format='md', extra_args=[\"--mathjax\"],\n                 filters=['pandoc-xnos'])\n+            html = clean_html(html)\n \n         except Exception as e:\n             app.logger.error(f\"Conversion to HTML failed >>> {str(e)}\")", "file_path": "files/2022_9/1101", "file_language": "py", "file_name": "wiki.py", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 1, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
