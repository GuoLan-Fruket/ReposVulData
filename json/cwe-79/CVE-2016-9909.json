{"index": 1556, "cve_id": "CVE-2016-9909", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "The serializer in html5lib before 0.99999999 might allow remote attackers to conduct cross-site scripting (XSS) attacks by leveraging mishandling of the < (less than) character in attribute values.", "cvss": "6.1", "publish_date": "February 22, 2017", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7", "commit_message": "Fix #11, #12: quote attributes that need escaping in legacy browsers\n\nThese are mostly out of the market now, so this isn't massively\nneeded any more; nevertheless, avoiding XSS as much as possible is\ninevitably desirable.\n\nThis alters the API so that quote_attr_values is now a ternary\nsetting, choosing between legacy-safe behaviour, spec behaviour, and\nalways quoting.", "commit_date": "2016-05-11T23:55:45Z", "project": "html5lib/html5lib-python", "url": "https://api.github.com/repos/html5lib/html5lib-python/commits/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7", "html_url": "https://github.com/html5lib/html5lib-python/commit/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7", "windows_before": [{"commit_id": "4768c64cd71f9bd7c4c58ca55775269926ab4031", "commit_date": "Fri Jul 19 23:10:35 2013 +0100", "commit_message": "Update characters that need be quoted in attributes in the serializer per spec", "files_name": ["html5lib/serializer/htmlserializer.py", "html5lib/tests/serializer-testdata/core.test"]}, {"commit_id": "6bd01d06612877c2e763646f1c32823ad053a2e5", "commit_date": "Wed May 11 15:03:36 2016 -0700", "commit_message": "Get rid of unittest from test_serializer.py", "files_name": ["html5lib/tests/test_serializer.py"]}, {"commit_id": "2bd05f7ed32ae8cecffd79ff8ad14ccc3bb04c3c", "commit_date": "Sun May 8 18:48:47 2016 +0100", "commit_message": "Lint serializer test input; fix broken examples", "files_name": ["html5lib/filters/lint.py", "html5lib/tests/serializer-testdata/core.test", "html5lib/tests/serializer-testdata/optionaltags.test", "html5lib/tests/test_serializer.py"]}, {"commit_id": "acf03505187dbdf57a26873aadf2c729003e7b46", "commit_date": "Sun May 8 18:15:23 2016 +0100", "commit_message": "Remove unused XHTML serializer expectations", "files_name": ["html5lib/tests/serializer-testdata/core.test", "html5lib/tests/serializer-testdata/injectmeta.test", "html5lib/tests/serializer-testdata/options.test"]}, {"commit_id": "b7a37d296562392170a406cf611adaf2821c9390", "commit_date": "Sun May 8 18:12:26 2016 +0100", "commit_message": "Reindent serializer testdata", "files_name": ["html5lib/tests/serializer-testdata/core.test", "html5lib/tests/serializer-testdata/injectmeta.test", "html5lib/tests/serializer-testdata/optionaltags.test", "html5lib/tests/serializer-testdata/options.test", "html5lib/tests/serializer-testdata/whitespace.test"]}, {"commit_id": "c6bdc743a4305af0f9e88921a03e993b9cbaf45b", "commit_date": "Sun May 8 18:02:40 2016 +0100", "commit_message": "Move the serializer testdata to html5lib-python as impl specific", "files_name": ["html5lib/tests/serializer-testdata/core.test", "html5lib/tests/serializer-testdata/injectmeta.test", "html5lib/tests/serializer-testdata/optionaltags.test", "html5lib/tests/serializer-testdata/options.test", "html5lib/tests/serializer-testdata/whitespace.test", "html5lib/tests/support.py", "html5lib/tests/test_serializer.py"]}, {"commit_id": "b48d0c19b59b7bd23a7a0740b47ca55c44ebbe5e", "commit_date": "Wed May 11 10:03:00 2016 -0700", "commit_message": "Merge pull request #249 from gsnedders/lxml-ascii-2", "files_name": ["06e1a37f75b3ee50fc01fbed4f58185197df4f38 - Mon May 9 22:00:19 2016 -0700 : Emphasise major changes in changelog, add lxml fix and noscript.", "CHANGES.rst"]}, {"commit_id": "816eaf4eca9112e850a3be77ee0033e73bbb2099", "commit_date": "Sun May 8 00:15:16 2016 +0100", "commit_message": "lxml should only ever return an ASCII string as a str", "files_name": ["html5lib/treewalkers/lxmletree.py"]}, {"commit_id": "84e880226765fc99fa9687285e82d79f7354316c", "commit_date": "Wed May 11 08:59:37 2016 -0700", "commit_message": "Merge pull request #243 from gsnedders/noscript", "files_name": ["482370391e4786bb36ae413deaa0f55e77563bd8 - Sun May 8 02:53:52 2016 +0400 : Scripting parameter for parse.py (#1)", ".pytest.expect", "parse.py"]}, {"commit_id": "7f2fe0054a31d6097be71fa6ee667a6c8e8f10db", "commit_date": "Thu Apr 21 14:41:59 2016 +0300", "commit_message": "Implement InHeadNoscript context", "files_name": [".pytest.expect", "html5lib/constants.py", "html5lib/html5parser.py", "html5lib/tests/tree_construction.py"]}, {"commit_id": "323830cbcb7697cb0fff5cd688c3113dcf404fce", "commit_date": "Tue May 10 23:00:19 2016 -0700", "commit_message": "Merge pull request #250 from gsnedders/test-update-20160510", "files_name": ["2f04a38038a23ef4f8123481fecae86d31ed6e3b - Tue May 10 09:49:51 2016 -0700 : Update tests", ".pytest.expect", "html5lib/tests/testdata"]}, {"commit_id": "5be0383a3ef064e6d4723870962a7955b2ce37eb", "commit_date": "Tue May 10 22:42:23 2016 -0700", "commit_message": "Merge pull request #251 from gsnedders/fix_test_warnings", "files_name": ["366ed48da6d6550661cb6d9dcd8d4d1a0b44c645 - Tue May 10 10:58:37 2016 -0700 : Change py.test config.", "pytest.ini"]}, {"commit_id": "645ce08f27069c5cad6e68e727f3effd96aaf1b7", "commit_date": "Tue May 10 10:56:09 2016 -0700", "commit_message": "Avoid TestData throwing a warning in test_encoding.py", "files_name": ["html5lib/tests/test_encoding.py"]}, {"commit_id": "176651a317828293f3b266fccf9ee8ec4e478b68", "commit_date": "Mon May 9 22:03:15 2016 -0700", "commit_message": "Merge pull request #248 from gsnedders/phase_memo", "files_name": ["bf3e733bbafd5a9d5dfb12c86459a82e68be97fe - Sun May 8 17:57:41 2016 +0100 : Apply memoization to getPhases; this provides a decent perf gain", "html5lib/html5parser.py", "html5lib/utils.py"]}, {"commit_id": "911cf452fc02c9c9e70a2af80ef7ce3c5092309f", "commit_date": "Thu May 5 00:33:24 2016 +0100", "commit_message": "Merge pull request #241 from gsnedders/encoding_tests", "files_name": ["b0ae0c2aaa5c2d74602a9dc576f10753f1383882 - Wed May 4 00:06:48 2016 +0100 : Ensure we only ever reparse *once*", "html5lib/html5parser.py"]}, {"commit_id": "1d9f391f6f92677c29803272d9a3e27831a84814", "commit_date": "Wed May 4 00:06:24 2016 +0100", "commit_message": "Fix changing encoding to actually change encoding; add test for it", "files_name": ["html5lib/inputstream.py", "html5lib/tests/test_encoding.py"]}, {"commit_id": "c5a800779b5af3d46aa4dbc69a171fdc47906005", "commit_date": "Wed May 4 00:05:51 2016 +0100", "commit_message": "Add a better test for encoding prescan length", "files_name": ["html5lib/tests/test_encoding.py"]}, {"commit_id": "9dc49f695ac409c186db51eb06c932aebd4416cf", "commit_date": "Thu May 5 00:12:11 2016 +0100", "commit_message": "Merge pull request #240 from gsnedders/tree_types", "files_name": ["68d6f3466092c608091c03b5cba7e8f7afd7c245 - Tue May 3 20:19:12 2016 +0100 : Remove last remanent of unittest from test_treewalkers.py", "html5lib/tests/test_treewalkers.py"]}, {"commit_id": "a75b120409f1440b3603c3ed8643d1bdc1f9ed3c", "commit_date": "Tue May 3 20:08:37 2016 +0100", "commit_message": "Fix new flake8 warning (\"not x in\" v. \"x not in\")", "files_name": ["html5lib/tests/test_treewalkers.py"]}, {"commit_id": "8ddd3b983c270cee4f733f4662065495b5f963dc", "commit_date": "Tue May 3 19:58:05 2016 +0100", "commit_message": "Generate tokenizer tests from testdata files", "files_name": [".pytest.expect", "html5lib/tests/conftest.py", "html5lib/tests/tokenizer.py"]}, {"commit_id": "7556f22800c5ee2df3261a6b950d1f1b221d592c", "commit_date": "Tue May 3 18:58:04 2016 +0100", "commit_message": "Move tree construction treewalker tests to tree_construction.py", "files_name": [".pytest.expect", "html5lib/tests/test_treewalkers.py", "html5lib/tests/tree_construction.py"]}, {"commit_id": "bd2f09ce9ae9a94d102432c4b9b21dbdde584a1e", "commit_date": "Tue May 3 16:53:16 2016 +0200", "commit_message": "Prepare tree construction tests for moving treewalker tests over", "files_name": [".pytest.expect", "html5lib/tests/tree_construction.py"]}, {"commit_id": "0cb9e89af8a22a83f2f6c1933a9f4be3ef113067", "commit_date": "Tue May 3 16:42:10 2016 +0200", "commit_message": "Split out each tree construction test into its own collector", "files_name": ["html5lib/tests/tree_construction.py"]}, {"commit_id": "06fade8759f3175af9e37bafb638de42c731025f", "commit_date": "Tue May 3 16:13:26 2016 +0200", "commit_message": "Move to a single definition of treeTypes for all tests", "files_name": ["html5lib/tests/support.py", "html5lib/tests/test_treewalkers.py", "html5lib/tests/tree_construction.py"]}, {"commit_id": "b5b91cc747f380a04700e4f160730546f51b2ccc", "commit_date": "Tue May 3 21:26:30 2016 +0100", "commit_message": "Merge pull request #238 from gsnedders/inputstream_update", "files_name": ["9ba3b280d8548862703076bbbc2b5377718d4c83 - Tue May 3 15:05:06 2016 +0200 : Increase encoding pre-scan length to 1024, per spec from 2011(!)", "html5lib/inputstream.py"]}, {"commit_id": "04ff4c12f4098c9f1260d50e4c613864a5f8c054", "commit_date": "Tue May 3 14:59:05 2016 +0200", "commit_message": "assert that after assigning self.charEncoding it's not None", "files_name": ["html5lib/inputstream.py"]}, {"commit_id": "3b7e01718dea309f5bb028032412939f2f41bb09", "commit_date": "Mon Apr 25 02:14:42 2016 +0100", "commit_message": "Merge pull request #235 from gsnedders/pytest_expect_11", "files_name": ["b65ae3f3b707e31b790c67134370444d39e33999 - Mon Apr 25 02:00:39 2016 +0100 : Update pytest-expect to 1.1 and its human readable format", ".pytest.expect", "requirements-test.txt", "tox.ini"]}, {"commit_id": "a3bb980ac783db9810427897204cec7ae0e1b12f", "commit_date": "Mon Apr 25 01:43:23 2016 +0100", "commit_message": "Merge pull request #220 from gsnedders/codecov", "files_name": ["66a3f42444cb1d4d2cfa32f6d1d69243baa6a9fa - Sun Dec 13 23:25:04 2015 +0000 : Add codecov.", ".coveragerc", ".travis.yml", "requirements-install.sh"]}, {"commit_id": "77c63f989391a21e2d6e0272a5e4f5282f2f74c6", "commit_date": "Sun Dec 13 23:22:57 2015 +0000", "commit_message": "Run flake8 in all builds on Travis.", "files_name": [".travis.yml", "flake8-run.sh"]}, {"commit_id": "91876a7fef4f1cbbbcff5a6700d6878cb2479edf", "commit_date": "Mon Apr 25 01:11:11 2016 +0100", "commit_message": "Merge pull request #234 from gsnedders/pep345_python_impl_setup", "files_name": ["b67c90d5b71ec1cca334d8a0918b8a1cf5373b4e - Mon Apr 25 00:01:40 2016 +0100 : Use the platform.python_implementation because it's the most compat", "setup.py"]}, {"commit_id": "d999875dad8e6c6ac10ba27c4dfaba60ca471515", "commit_date": "Thu Mar 24 13:59:51 2016 +0000", "commit_message": "Merge pull request #227 from paradoxxxzero/master", "files_name": ["5dac3aca16f49eccfc2c04911ea4e67be90a5710 - Wed Mar 2 15:30:10 2016 +0100 : Fix python implementation marker for setuptools 2.20", "setup.py"]}, {"commit_id": "4205423e3fed5029ba018a5a3cbd681a0d22fc23", "commit_date": "Tue Mar 15 15:54:22 2016 +0000", "commit_message": "Merge pull request #229 from gsnedders/drop-py32", "files_name": ["5efd7d64452a79d87b5ebc31c37badf04ad2e48c - Tue Mar 15 15:07:56 2016 +0000 : Drop Python 3.2 support.", ".travis.yml", "CHANGES.rst", "README.rst", "setup.py", "tox.ini"]}, {"commit_id": "f796cca5f9ddaaf1e1a8b872f68455551cd3ae2d", "commit_date": "Wed Jan 13 00:02:24 2016 +0100", "commit_message": "Merge pull request #221 from gsnedders/svg_check_endtag", "files_name": ["a2cdaf5de7375328a1f4f18ae6af15a925870886 - Wed Dec 16 00:46:48 2015 +0000 : Fix #144: avoid bogus parse error on camel-case foreign elements", "html5lib/html5parser.py"]}, {"commit_id": "73215c58a17534742c247474c456db6e9ded2b3e", "commit_date": "Tue Jan 12 23:38:35 2016 +0100", "commit_message": "Merge pull request #222 from gsnedders/lint_fixes", "files_name": ["ca6591cca342065305949189f5adbc741f76fe9b - Wed Dec 16 03:55:12 2015 +0000 : Make sure lint is testing everything treewalkers can do.", "html5lib/filters/lint.py"]}, {"commit_id": "c335295f6b9d0b0710b86d94f79494cc676deb70", "commit_date": "Wed Dec 16 02:57:59 2015 +0000", "commit_message": "Drop tree walker doctype correct flag, whatever that once was!", "files_name": ["html5lib/treewalkers/_base.py"]}, {"commit_id": "7f8bd13cc2d6e334d898c64afecf4b1bf64c5f93", "commit_date": "Wed Dec 16 02:55:32 2015 +0000", "commit_message": "Drop end tag tree walker's data (always empty now)", "files_name": ["html5lib/tests/test_treewalkers.py", "html5lib/treewalkers/_base.py"]}, {"commit_id": "dc879ffaab0455e8974ceaac40b727e5a04c1175", "commit_date": "Wed Dec 16 02:55:06 2015 +0000", "commit_message": "Don't allow ParseError/SerializerError tokens, whatever they are!", "files_name": ["html5lib/filters/lint.py"]}, {"commit_id": "5336ebea678f099f5def28ffe3924c41c6de782d", "commit_date": "Wed Dec 16 02:54:53 2015 +0000", "commit_message": "Lint that comments are text_type", "files_name": ["html5lib/filters/lint.py"]}, {"commit_id": "22c2b1ac0fc9eb73aefde898f7b9c948e34dc041", "commit_date": "Wed Dec 16 02:52:28 2015 +0000", "commit_message": "Get rid of LintError and just use asserts", "files_name": ["html5lib/filters/lint.py"]}, {"commit_id": "e0ea89948b80a300825b039fcfcda8ec4a13d513", "commit_date": "Wed Dec 16 02:39:38 2015 +0000", "commit_message": "Drop all the to_text magic in treewalkers._base", "files_name": ["html5lib/treewalkers/_base.py"]}, {"commit_id": "9eff304ce8a230ecfe84a4c4fcb61b887bfcc551", "commit_date": "Wed Dec 16 02:35:13 2015 +0000", "commit_message": "Allow None as a doctype tagname in lint", "files_name": ["html5lib/filters/lint.py"]}, {"commit_id": "2a5d7af11230225200cdaf101bb36980a8fd3f8e", "commit_date": "Wed Dec 16 02:34:39 2015 +0000", "commit_message": "Make sure we have the unicode from of text in lxml fragment root", "files_name": ["html5lib/treewalkers/lxmletree.py"]}, {"commit_id": "fb9e1776a565ca157c33e4301891a58dee4337c4", "commit_date": "Wed Dec 16 02:27:56 2015 +0000", "commit_message": "Remove runtime type checks from treewalkers._base", "files_name": ["html5lib/treewalkers/_base.py"]}, {"commit_id": "5bd341350b22a78295c9b2883b568774d15fadef", "commit_date": "Wed Dec 16 02:26:44 2015 +0000", "commit_message": "Use lint filter to ensure validity of treewalkers", "files_name": ["html5lib/tests/test_treewalkers.py"]}, {"commit_id": "66ef02658ba79d5cffc65d71468da3b3d0b6398e", "commit_date": "Wed Dec 16 02:22:22 2015 +0000", "commit_message": "Teach lint & treewalkers that elements are only void in HTML ns", "files_name": ["html5lib/filters/lint.py", "html5lib/treewalkers/_base.py", "html5lib/treewalkers/genshistream.py"]}, {"commit_id": "270a2ca14fafc989f8f1bd4f79db2f4bd9f4d1fc", "commit_date": "Wed Dec 16 02:05:55 2015 +0000", "commit_message": "Don't let the lxml treewalker walk above the fragment root", "files_name": []}], "windows_after": [{"commit_id": "f6741ea29de3c03a89736898a29bc84c2c05ebab", "commit_date": "Tue May 17 23:08:20 2016 +0100", "commit_message": "Merge pull request #95 from gsnedders/escape-characters-serializer", "files_name": ["4aa79f113e7486c7ec5d15a6e1777bfe546d3259 - Sat May 17 21:48:32 2014 +0100 : Fix optionaltags filter to not error when filtering nothing.", "html5lib/filters/optionaltags.py", "html5lib/tests/test_optionaltags_filter.py"]}, {"commit_id": "a2917e950df0a06b0c46c3ac7f84c3c797af0e43", "commit_date": "Mon May 19 15:48:16 2014 +0100", "commit_message": "Fix #72: rewrite the sanitizer to be a treewalker filter only.", "files_name": ["CHANGES.rst", "html5lib/filters/sanitizer.py", "html5lib/sanitizer.py", "html5lib/tests/test_sanitizer.py", "parse.py"]}, {"commit_id": "75cf69711f9706b84ce6259f81c6640089e78a5f", "commit_date": "Sun May 8 19:13:08 2016 +0100", "commit_message": "Reintroduce the old sanitizer testsuite from html5lib-tests", "files_name": ["html5lib/serializer/htmlserializer.py", "html5lib/tests/conftest.py", "html5lib/tests/sanitizer-testdata/tests1.dat", "html5lib/tests/sanitizer.py"]}, {"commit_id": "57dfcaebfc5de050e5a10192c2fee6bf1a6f082a", "commit_date": "Mon May 16 01:34:11 2016 -0700", "commit_message": "Make the serializer behave like a normal func with unknown kwargs", "files_name": ["html5lib/serializer/htmlserializer.py", "html5lib/tests/test_serializer.py"]}, {"commit_id": "8cb66f2af376193e20a8728efb04e05260ae1ee9", "commit_date": "Wed May 18 17:59:27 2016 +0100", "commit_message": "Merge pull request #110 from gsnedders/sanitizer-fixes-72", "files_name": ["3065630b2c43eeaf8d5d12fea930847e3e508350 - Fri May 20 16:19:02 2016 +0100 : Get rid of last remenents of our usage of the stdlib unittest", "html5lib/tests/test_encoding.py", "html5lib/tests/test_parser2.py", "html5lib/tests/test_stream.py", "html5lib/tests/test_whitespace_filter.py"]}, {"commit_id": "1df7e5f6ec91584f43b5067d18732673f842f587", "commit_date": "Fri May 20 16:24:56 2016 +0100", "commit_message": "Cleanup test_parser2.py a bit", "files_name": ["html5lib/tests/test_parser2.py"]}, {"commit_id": "c8fafd435c6f51f1e8fa90169ef13f45b7148754", "commit_date": "Fri May 20 21:09:35 2016 +0100", "commit_message": "Merge pull request #253 from gsnedders/unittest-be-gone", "files_name": ["c64bfca788e2f858d336105eb7da18399a7894c6 - Thu Dec 3 18:21:33 2015 +0000 : Get rid of mutable default arguments", "html5lib/html5parser.py", "html5lib/treebuilders/etree_lxml.py"]}, {"commit_id": "c1c16ceed7ff484b6ce056b0a377404aa06e01f7", "commit_date": "Fri Dec 4 02:14:15 2015 +0000", "commit_message": "Avoid noisiness from pylint and the parser's set patterns", "files_name": ["html5lib/html5parser.py"]}, {"commit_id": "2c3b64b0b9cbd7ffcd67f3ddae93a0a8d75af908", "commit_date": "Fri May 20 17:23:40 2016 +0100", "commit_message": "add pep8/flake8 config to get something useful happening with them", "files_name": ["flake8-run.sh", "html5lib/filters/sanitizer.py", "html5lib/ihatexml.py", "html5lib/inputstream.py", "html5lib/tests/test_sanitizer.py", "setup.cfg"]}, {"commit_id": "823864882ee969ebb7c16986a80388d5785cb9ea", "commit_date": "Fri May 20 17:37:55 2016 +0100", "commit_message": "Fix all the files outside of html5lib to flake8 cleanly", "files_name": ["flake8-run.sh", "parse.py", "setup.py", "utils/entities.py", "utils/spider.py"]}, {"commit_id": "de6bcf22e8171e06b0e07558b699075f1b970dd0", "commit_date": "Fri May 20 18:12:08 2016 +0100", "commit_message": "Fix incorrectly hidden flake8 errors", "files_name": ["html5lib/tests/support.py", "html5lib/tests/test_encoding.py", "html5lib/tests/test_parser2.py", "html5lib/tests/test_stream.py", "html5lib/tests/test_treeadapters.py", "html5lib/tokenizer.py", "html5lib/treeadapters/__init__.py"]}, {"commit_id": "0bd31c4251889a4216b8ac3a59e5833534643e48", "commit_date": "Fri May 20 18:58:42 2016 +0100", "commit_message": "Get rid of type()-based type-check", "files_name": ["html5lib/utils.py"]}, {"commit_id": "d440a830fb75beafed838327c21e9a8a773c9743", "commit_date": "Fri May 20 19:16:57 2016 +0100", "commit_message": "Silence pytest unused-variable warnings", "files_name": ["html5lib/ihatexml.py", "html5lib/inputstream.py", "html5lib/serializer/htmlserializer.py", "html5lib/tests/test_encoding.py", "html5lib/tests/test_serializer.py", "html5lib/tests/test_treewalkers.py", "html5lib/tokenizer.py", "html5lib/treebuilders/dom.py", "html5lib/treebuilders/etree.py", "html5lib/treewalkers/etree.py", "html5lib/treewalkers/genshistream.py"]}, {"commit_id": "5c1d8e2743383b3875ef840cc0ab842dbc1e7618", "commit_date": "Fri May 20 19:21:57 2016 +0100", "commit_message": "Remove duplicate entry from constants.replacementCharacters", "files_name": ["html5lib/constants.py"]}, {"commit_id": "1b86ccbeec08069d1a40cd22d0dcc8492bdd789a", "commit_date": "Fri May 20 19:23:44 2016 +0100", "commit_message": "Remove gratuitious argument in sanitizer", "files_name": ["html5lib/filters/sanitizer.py"]}, {"commit_id": "82d623bc8287d00db13ca98bf9e6d7a1921c6a56", "commit_date": "Fri May 20 19:39:29 2016 +0100", "commit_message": "Silence redefined-variable-type", "files_name": ["html5lib/html5parser.py", "html5lib/tokenizer.py", "html5lib/treewalkers/lxmletree.py"]}, {"commit_id": "a017b8881f42b2ab21a2f47af993ba6d58b25ca2", "commit_date": "Fri May 20 19:59:08 2016 +0100", "commit_message": "Silence unused-argument", "files_name": ["html5lib/html5parser.py", "html5lib/ihatexml.py", "html5lib/inputstream.py", "html5lib/serializer/htmlserializer.py", "html5lib/tests/test_sanitizer.py", "html5lib/tests/test_stream.py", "html5lib/tests/tokenizer.py", "html5lib/treebuilders/etree_lxml.py"]}, {"commit_id": "e5d395c28c7357ace9352fd162f8efe1d8ac8143", "commit_date": "Fri May 20 20:25:29 2016 +0100", "commit_message": "Silence wrong-import-position", "files_name": ["html5lib/serializer/htmlserializer.py", "html5lib/tests/support.py", "html5lib/tests/test_encoding.py", "html5lib/tests/test_serializer.py", "html5lib/tokenizer.py", "html5lib/trie/__init__.py"]}, {"commit_id": "b64df28cfb9e721ec3450e514ef8866001314eec", "commit_date": "Fri May 20 20:29:15 2016 +0100", "commit_message": "Change which way around we overwrite this for clarity's sake", "files_name": ["html5lib/html5parser.py"]}, {"commit_id": "df0b2ba4ddb78384e0b35be9f31a3848f21a2464", "commit_date": "Fri May 20 20:33:43 2016 +0100", "commit_message": "Remove unused import", "files_name": ["html5lib/inputstream.py"]}, {"commit_id": "742715d5948456adc6bff21fce88e6b0858364d6", "commit_date": "Fri May 20 22:18:52 2016 +0100", "commit_message": "Fix invalid_unicode_re on platforms supporting lone surrogates", "files_name": ["html5lib/inputstream.py", "html5lib/tests/test_stream.py"]}, {"commit_id": "cd74ec7a49943ab858fc120c19642e6181b58667", "commit_date": "Fri May 20 22:19:31 2016 +0100", "commit_message": "Fix comment", "files_name": ["html5lib/inputstream.py"]}, {"commit_id": "15e126fcba9948779f662d5382e5665f6355e629", "commit_date": "Fri May 20 22:27:49 2016 +0100", "commit_message": "Silence eval-used", "files_name": ["html5lib/inputstream.py", "html5lib/tests/test_stream.py", "html5lib/utils.py"]}, {"commit_id": "bfc278ae93cbe56e619d3fc3e0a82f9346584104", "commit_date": "Fri May 20 22:45:00 2016 +0100", "commit_message": "Silence bare-except", "files_name": ["html5lib/inputstream.py", "html5lib/utils.py"]}, {"commit_id": "b46fcdf6faf27bdfc99c47b3c2b9129606c02728", "commit_date": "Fri May 20 22:48:21 2016 +0100", "commit_message": "Silence too-many-nested-blocks", "files_name": ["html5lib/serializer/htmlserializer.py"]}, {"commit_id": "6945bc480d1813f4cfccf135d7f38aadaaad8161", "commit_date": "Fri May 20 22:48:31 2016 +0100", "commit_message": "Silence not-callable", "files_name": ["html5lib/treebuilders/_base.py"]}, {"commit_id": "0c290e06f8eb34786b1c0b6acd14ed1f555ae27f", "commit_date": "Fri May 20 22:50:45 2016 +0100", "commit_message": "Kill long-dead finalText code", "files_name": ["html5lib/treebuilders/etree_lxml.py"]}, {"commit_id": "da099dce1bb72428336e643f54ff1a8934f9804d", "commit_date": "Fri May 20 22:59:19 2016 +0100", "commit_message": "Silence a buggily output non-parent-init-called", "files_name": ["html5lib/treebuilders/etree_lxml.py"]}, {"commit_id": "97427de90dd2a9ebf12cc1e36858eea931deab60", "commit_date": "Fri May 20 23:00:36 2016 +0100", "commit_message": "Fix indentation", "files_name": ["html5lib/treebuilders/etree_lxml.py"]}, {"commit_id": "2afe09bcbcc728e98ec8da39b68ea65f4c270fdb", "commit_date": "Fri May 20 23:05:48 2016 +0100", "commit_message": "Make this in practice unreachable code work on Py2", "files_name": ["html5lib/trie/_base.py"]}, {"commit_id": "c0df867ebdeda6adc6dca9ff796eccf64e3ebda0", "commit_date": "Fri May 20 23:07:38 2016 +0100", "commit_message": "Silence arguments-differ", "files_name": ["html5lib/trie/_base.py"]}, {"commit_id": "5dce4f27289090ed4662aee8881782a2efbcd20c", "commit_date": "Fri May 20 23:19:55 2016 +0100", "commit_message": "Silence protected-access", "files_name": ["html5lib/treebuilders/dom.py", "html5lib/treebuilders/etree.py", "html5lib/treebuilders/etree_lxml.py"]}, {"commit_id": "a2b8c110cd0c5c7d60573f2a86d951cabefc516b", "commit_date": "Fri Dec 4 02:13:53 2015 +0000", "commit_message": "Add prospector/pylint config for the sake of Landscape.", "files_name": [".prospector.yaml", ".pylintrc"]}, {"commit_id": "cc99095be76c9ec68696aab812e2b68fd7f533de", "commit_date": "Sat May 21 00:42:45 2016 +0100", "commit_message": "Merge pull request #218 from gsnedders/prospector", "files_name": ["3d0eaea85bc00a739e3910ef03316d4312ad84de - Sat Dec 12 11:23:36 2015 +0200 : drop usage of charade now chardet is maintained again", "CHANGES.rst", "README.rst", "debug-info.py", "html5lib/inputstream.py", "html5lib/tests/test_encoding.py", "requirements-optional.txt", "setup.py"]}, {"commit_id": "a8a10d6306277a941c10eee76579c1fc162b6f8c", "commit_date": "Sat Dec 12 11:23:36 2015 +0200", "commit_message": "use find_packages for simplicity in setup.py", "files_name": ["setup.py"]}, {"commit_id": "5a62f05bff5081b9d9985fe81d8b2dd18ad63445", "commit_date": "Sat Dec 12 11:23:36 2015 +0200", "commit_message": "Import things from os.path to make setup.py more readable", "files_name": ["setup.py"]}, {"commit_id": "143b0d418d48ea2e5838e5c57a55f5e193de8fb5", "commit_date": "Sun May 22 02:38:06 2016 +0100", "commit_message": "Merge pull request #252 from gsnedders/drop_charade", "files_name": ["2812e44c3cb44bdb2cf24ad26b11ead425fb5c76 - Sat May 7 22:58:28 2016 +0100 : Make DOM treebuilder's AttrList return a MutableMapping", "html5lib/treebuilders/dom.py"]}, {"commit_id": "29f0512e4cf4a4fb63b5e7c90ca3e53150a59743", "commit_date": "Sat Oct 26 13:17:09 2013 +0530", "commit_message": "Speed up unnecessarily slow and obtuse dict comparison", "files_name": ["html5lib/html5parser.py"]}, {"commit_id": "0a885c655192dca52484c83ea607f94720525da1", "commit_date": "Sat May 7 21:07:47 2016 +0100", "commit_message": "Clean up the constants imports in html5parser", "files_name": ["html5lib/html5parser.py"]}, {"commit_id": "a137d14bfd8c6aca007d9dd3118b18e91ccf7fa5", "commit_date": "Sat Oct 26 14:57:42 2013 +0530", "commit_message": "Preserve attribute order when parsing", "files_name": ["README.rst", "html5lib/constants.py", "html5lib/html5parser.py", "html5lib/tests/test_parser2.py", "html5lib/utils.py"]}], "parents": [{"commit_id_before": "4768c64cd71f9bd7c4c58ca55775269926ab4031", "url_before": "https://api.github.com/repos/html5lib/html5lib-python/commits/4768c64cd71f9bd7c4c58ca55775269926ab4031", "html_url_before": "https://github.com/html5lib/html5lib-python/commit/4768c64cd71f9bd7c4c58ca55775269926ab4031"}], "details": [{"raw_url": "https://github.com/html5lib/html5lib-python/raw/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7/CHANGES.rst", "code": "Change Log\n----------\n\n0.99999999/1.0b9\n~~~~~~~~~~~~~~~~\n\nReleased on XXX\n\n* **Added ordereddict as a mandatory dependency on Python 2.6.**\n\n* Added ``lxml``, ``genshi``, ``datrie``, ``charade``, and ``all``\n  extras that will do the right thing based on the specific\n  interpreter implementation.\n\n* Now requires the ``mock`` package for the testsuite.\n\n* Cease supporting DATrie under PyPy.\n\n* **Remove ``PullDOM`` support, as this hasn't ever been properly\n  tested, doesn't entirely work, and as far as I can tell is\n  completely unused by anyone.**\n\n* Move testsuite to ``py.test``.\n\n* **Fix #124: move to webencodings for decoding the input byte stream;\n  this makes html5lib compliant with the Encoding Standard, and\n  introduces a required dependency on webencodings.**\n\n* **Cease supporting Python 3.2 (in both CPython and PyPy forms).**\n\n* **Fix comments containing double-dash with lxml 3.5 and above.**\n\n* **Use scripting disabled by default (as we don't implement\n  scripting).**\n\n* **Fix #11, avoiding the XSS bug potentially caused by serializer\n  allowing attribute values to be escaped out of in old browser versions,\n  changing the quote_attr_values option on serializer to take one of\n  three values, \"always\" (the old True value), \"legacy\" (the new option,\n  and the new default), and \"spec\" (the old False value, and the old\n  default).**\n\n\n0.9999999/1.0b8\n~~~~~~~~~~~~~~~\n\nReleased on September 10, 2015\n\n* Fix #195: fix the sanitizer to drop broken URLs (it threw an\n  exception between 0.9999 and 0.999999).\n\n\n0.999999/1.0b7\n~~~~~~~~~~~~~~\n\nReleased on July 7, 2015\n\n* Fix #189: fix the sanitizer to allow relative URLs again (as it did\n  prior to 0.9999/1.0b5).\n\n\n0.99999/1.0b6\n~~~~~~~~~~~~~\n\nReleased on April 30, 2015\n\n* Fix #188: fix the sanitizer to not throw an exception when sanitizing\n  bogus data URLs.\n\n\n0.9999/1.0b5\n~~~~~~~~~~~~\n\nReleased on April 29, 2015\n\n* Fix #153: Sanitizer fails to treat some attributes as URLs. Despite how\n  this sounds, this has no known security implications.  No known version\n  of IE (5.5 to current), Firefox (3 to current), Safari (6 to current),\n  Chrome (1 to current), or Opera (12 to current) will run any script\n  provided in these attributes.\n\n* Pass error message to the ParseError exception in strict parsing mode.\n\n* Allow data URIs in the sanitizer, with a whitelist of content-types.\n\n* Add support for Python implementations that don't support lone\n  surrogates (read: Jython). Fixes #2.\n\n* Remove localization of error messages. This functionality was totally\n  unused (and untested that everything was localizable), so we may as\n  well follow numerous browsers in not supporting translating technical\n  strings.\n\n* Expose treewalkers.pprint as a public API.\n\n* Add a documentEncoding property to HTML5Parser, fix #121.\n\n\n0.999\n~~~~~\n\nReleased on December 23, 2013\n\n* Fix #127: add work-around for CPython issue #20007: .read(0) on\n  http.client.HTTPResponse drops the rest of the content.\n\n* Fix #115: lxml treewalker can now deal with fragments containing, at\n  their root level, text nodes with non-ASCII characters on Python 2.\n\n\n0.99\n~~~~\n\nReleased on September 10, 2013\n\n* No library changes from 1.0b3; released as 0.99 as pip has changed\n  behaviour from 1.4 to avoid installing pre-release versions per\n  PEP 440.\n\n\n1.0b3\n~~~~~\n\nReleased on July 24, 2013\n\n* Removed ``RecursiveTreeWalker`` from ``treewalkers._base``. Any\n  implementation using it should be moved to\n  ``NonRecursiveTreeWalker``, as everything bundled with html5lib has\n  for years.\n\n* Fix #67 so that ``BufferedStream`` to correctly returns a bytes\n  object, thereby fixing any case where html5lib is passed a\n  non-seekable RawIOBase-like object.\n\n\n1.0b2\n~~~~~\n\nReleased on June 27, 2013\n\n* Removed reordering of attributes within the serializer. There is now\n  an ``alphabetical_attributes`` option which preserves the previous\n  behaviour through a new filter. This allows attribute order to be\n  preserved through html5lib if the tree builder preserves order.\n\n* Removed ``dom2sax`` from DOM treebuilders. It has been replaced by\n  ``treeadapters.sax.to_sax`` which is generic and supports any\n  treewalker; it also resolves all known bugs with ``dom2sax``.\n\n* Fix treewalker assertions on hitting bytes strings on\n  Python 2. Previous to 1.0b1, treewalkers coped with mixed\n  bytes/unicode data on Python 2; this reintroduces this prior\n  behaviour on Python 2. Behaviour is unchanged on Python 3.\n\n\n1.0b1\n~~~~~\n\nReleased on May 17, 2013\n\n* Implementation updated to implement the `HTML specification\n  <http://www.whatwg.org/specs/web-apps/current-work/>`_ as of 5th May\n  2013 (`SVN <http://svn.whatwg.org/webapps/>`_ revision r7867).\n\n* Python 3.2+ supported in a single codebase using the ``six`` library.\n\n* Removed support for Python 2.5 and older.\n\n* Removed the deprecated Beautiful Soup 3 treebuilder.\n  ``beautifulsoup4`` can use ``html5lib`` as a parser instead. Note that\n  since it doesn't support namespaces, foreign content like SVG and\n  MathML is parsed incorrectly.\n\n* Removed ``simpletree`` from the package. The default tree builder is\n  now ``etree`` (using the ``xml.etree.cElementTree`` implementation if\n  available, and ``xml.etree.ElementTree`` otherwise).\n\n* Removed the ``XHTMLSerializer`` as it never actually guaranteed its\n  output was well-formed XML, and hence provided little of use.\n\n* Removed default DOM treebuilder, so ``html5lib.treebuilders.dom`` is no\n  longer supported. ``html5lib.treebuilders.getTreeBuilder(\"dom\")`` will\n  return the default DOM treebuilder, which uses ``xml.dom.minidom``.\n\n* Optional heuristic character encoding detection now based on\n  ``charade`` for Python 2.6 - 3.3 compatibility.\n\n* Optional ``Genshi`` treewalker support fixed.\n\n* Many bugfixes, including:\n\n  * #33: null in attribute value breaks XML AttValue;\n\n  * #4: nested, indirect descendant, <button> causes infinite loop;\n\n  * `Google Code 215\n    <http://code.google.com/p/html5lib/issues/detail?id=215>`_: Properly\n    detect seekable streams;\n\n  * `Google Code 206\n    <http://code.google.com/p/html5lib/issues/detail?id=206>`_: add\n    support for <video preload=...>, <audio preload=...>;\n\n  * `Google Code 205\n    <http://code.google.com/p/html5lib/issues/detail?id=205>`_: add\n    support for <video poster=...>;\n\n  * `Google Code 202\n    <http://code.google.com/p/html5lib/issues/detail?id=202>`_: Unicode\n    file breaks InputStream.\n\n* Source code is now mostly PEP 8 compliant.\n\n* Test harness has been improved and now depends on ``nose``.\n\n* Documentation updated and moved to http://html5lib.readthedocs.org/.\n\n\n0.95\n~~~~\n\nReleased on February 11, 2012\n\n\n0.90\n~~~~\n\nReleased on January 17, 2010\n\n\n0.11.1\n~~~~~~\n\nReleased on June 12, 2008\n\n\n0.11\n~~~~\n\nReleased on June 10, 2008\n\n\n0.10\n~~~~\n\nReleased on October 7, 2007\n\n\n0.9\n~~~\n\nReleased on March 11, 2007\n\n\n0.2\n~~~\n\nReleased on January 8, 2007\n", "code_before": "Change Log\n----------\n\n0.99999999/1.0b9\n~~~~~~~~~~~~~~~~\n\nReleased on XXX\n\n* **Added ordereddict as a mandatory dependency on Python 2.6.**\n\n* Added ``lxml``, ``genshi``, ``datrie``, ``charade``, and ``all``\n  extras that will do the right thing based on the specific\n  interpreter implementation.\n\n* Now requires the ``mock`` package for the testsuite.\n\n* Cease supporting DATrie under PyPy.\n\n* **Remove ``PullDOM`` support, as this hasn't ever been properly\n  tested, doesn't entirely work, and as far as I can tell is\n  completely unused by anyone.**\n\n* Move testsuite to ``py.test``.\n\n* **Fix #124: move to webencodings for decoding the input byte stream;\n  this makes html5lib compliant with the Encoding Standard, and\n  introduces a required dependency on webencodings.**\n\n* **Cease supporting Python 3.2 (in both CPython and PyPy forms).**\n\n* **Fix comments containing double-dash with lxml 3.5 and above.**\n\n* **Use scripting disabled by default (as we don't implement\n  scripting).**\n\n\n0.9999999/1.0b8\n~~~~~~~~~~~~~~~\n\nReleased on September 10, 2015\n\n* Fix #195: fix the sanitizer to drop broken URLs (it threw an\n  exception between 0.9999 and 0.999999).\n\n\n0.999999/1.0b7\n~~~~~~~~~~~~~~\n\nReleased on July 7, 2015\n\n* Fix #189: fix the sanitizer to allow relative URLs again (as it did\n  prior to 0.9999/1.0b5).\n\n\n0.99999/1.0b6\n~~~~~~~~~~~~~\n\nReleased on April 30, 2015\n\n* Fix #188: fix the sanitizer to not throw an exception when sanitizing\n  bogus data URLs.\n\n\n0.9999/1.0b5\n~~~~~~~~~~~~\n\nReleased on April 29, 2015\n\n* Fix #153: Sanitizer fails to treat some attributes as URLs. Despite how\n  this sounds, this has no known security implications.  No known version\n  of IE (5.5 to current), Firefox (3 to current), Safari (6 to current),\n  Chrome (1 to current), or Opera (12 to current) will run any script\n  provided in these attributes.\n\n* Pass error message to the ParseError exception in strict parsing mode.\n\n* Allow data URIs in the sanitizer, with a whitelist of content-types.\n\n* Add support for Python implementations that don't support lone\n  surrogates (read: Jython). Fixes #2.\n\n* Remove localization of error messages. This functionality was totally\n  unused (and untested that everything was localizable), so we may as\n  well follow numerous browsers in not supporting translating technical\n  strings.\n\n* Expose treewalkers.pprint as a public API.\n\n* Add a documentEncoding property to HTML5Parser, fix #121.\n\n\n0.999\n~~~~~\n\nReleased on December 23, 2013\n\n* Fix #127: add work-around for CPython issue #20007: .read(0) on\n  http.client.HTTPResponse drops the rest of the content.\n\n* Fix #115: lxml treewalker can now deal with fragments containing, at\n  their root level, text nodes with non-ASCII characters on Python 2.\n\n\n0.99\n~~~~\n\nReleased on September 10, 2013\n\n* No library changes from 1.0b3; released as 0.99 as pip has changed\n  behaviour from 1.4 to avoid installing pre-release versions per\n  PEP 440.\n\n\n1.0b3\n~~~~~\n\nReleased on July 24, 2013\n\n* Removed ``RecursiveTreeWalker`` from ``treewalkers._base``. Any\n  implementation using it should be moved to\n  ``NonRecursiveTreeWalker``, as everything bundled with html5lib has\n  for years.\n\n* Fix #67 so that ``BufferedStream`` to correctly returns a bytes\n  object, thereby fixing any case where html5lib is passed a\n  non-seekable RawIOBase-like object.\n\n\n1.0b2\n~~~~~\n\nReleased on June 27, 2013\n\n* Removed reordering of attributes within the serializer. There is now\n  an ``alphabetical_attributes`` option which preserves the previous\n  behaviour through a new filter. This allows attribute order to be\n  preserved through html5lib if the tree builder preserves order.\n\n* Removed ``dom2sax`` from DOM treebuilders. It has been replaced by\n  ``treeadapters.sax.to_sax`` which is generic and supports any\n  treewalker; it also resolves all known bugs with ``dom2sax``.\n\n* Fix treewalker assertions on hitting bytes strings on\n  Python 2. Previous to 1.0b1, treewalkers coped with mixed\n  bytes/unicode data on Python 2; this reintroduces this prior\n  behaviour on Python 2. Behaviour is unchanged on Python 3.\n\n\n1.0b1\n~~~~~\n\nReleased on May 17, 2013\n\n* Implementation updated to implement the `HTML specification\n  <http://www.whatwg.org/specs/web-apps/current-work/>`_ as of 5th May\n  2013 (`SVN <http://svn.whatwg.org/webapps/>`_ revision r7867).\n\n* Python 3.2+ supported in a single codebase using the ``six`` library.\n\n* Removed support for Python 2.5 and older.\n\n* Removed the deprecated Beautiful Soup 3 treebuilder.\n  ``beautifulsoup4`` can use ``html5lib`` as a parser instead. Note that\n  since it doesn't support namespaces, foreign content like SVG and\n  MathML is parsed incorrectly.\n\n* Removed ``simpletree`` from the package. The default tree builder is\n  now ``etree`` (using the ``xml.etree.cElementTree`` implementation if\n  available, and ``xml.etree.ElementTree`` otherwise).\n\n* Removed the ``XHTMLSerializer`` as it never actually guaranteed its\n  output was well-formed XML, and hence provided little of use.\n\n* Removed default DOM treebuilder, so ``html5lib.treebuilders.dom`` is no\n  longer supported. ``html5lib.treebuilders.getTreeBuilder(\"dom\")`` will\n  return the default DOM treebuilder, which uses ``xml.dom.minidom``.\n\n* Optional heuristic character encoding detection now based on\n  ``charade`` for Python 2.6 - 3.3 compatibility.\n\n* Optional ``Genshi`` treewalker support fixed.\n\n* Many bugfixes, including:\n\n  * #33: null in attribute value breaks XML AttValue;\n\n  * #4: nested, indirect descendant, <button> causes infinite loop;\n\n  * `Google Code 215\n    <http://code.google.com/p/html5lib/issues/detail?id=215>`_: Properly\n    detect seekable streams;\n\n  * `Google Code 206\n    <http://code.google.com/p/html5lib/issues/detail?id=206>`_: add\n    support for <video preload=...>, <audio preload=...>;\n\n  * `Google Code 205\n    <http://code.google.com/p/html5lib/issues/detail?id=205>`_: add\n    support for <video poster=...>;\n\n  * `Google Code 202\n    <http://code.google.com/p/html5lib/issues/detail?id=202>`_: Unicode\n    file breaks InputStream.\n\n* Source code is now mostly PEP 8 compliant.\n\n* Test harness has been improved and now depends on ``nose``.\n\n* Documentation updated and moved to http://html5lib.readthedocs.org/.\n\n\n0.95\n~~~~\n\nReleased on February 11, 2012\n\n\n0.90\n~~~~\n\nReleased on January 17, 2010\n\n\n0.11.1\n~~~~~~\n\nReleased on June 12, 2008\n\n\n0.11\n~~~~\n\nReleased on June 10, 2008\n\n\n0.10\n~~~~\n\nReleased on October 7, 2007\n\n\n0.9\n~~~\n\nReleased on March 11, 2007\n\n\n0.2\n~~~\n\nReleased on January 8, 2007\n", "patch": "@@ -33,6 +33,13 @@ Released on XXX\n * **Use scripting disabled by default (as we don't implement\n   scripting).**\n \n+* **Fix #11, avoiding the XSS bug potentially caused by serializer\n+  allowing attribute values to be escaped out of in old browser versions,\n+  changing the quote_attr_values option on serializer to take one of\n+  three values, \"always\" (the old True value), \"legacy\" (the new option,\n+  and the new default), and \"spec\" (the old False value, and the old\n+  default).**\n+\n \n 0.9999999/1.0b8\n ~~~~~~~~~~~~~~~", "file_path": "files/2017_2/27", "file_language": "rst", "file_name": "CHANGES.rst", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/html5lib/html5lib-python/raw/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7/html5lib%2Fserializer%2Fhtmlserializer.py", "code": "from __future__ import absolute_import, division, unicode_literals\nfrom six import text_type\n\nimport re\n\nfrom ..constants import voidElements, booleanAttributes, spaceCharacters\nfrom ..constants import rcdataElements, entities, xmlEntities\nfrom .. import utils\nfrom xml.sax.saxutils import escape\n\nspaceCharacters = \"\".join(spaceCharacters)\n\nquoteAttributeSpecChars = spaceCharacters + \"\\\"'=<>`\"\nquoteAttributeSpec = re.compile(\"[\" + quoteAttributeSpecChars + \"]\")\nquoteAttributeLegacy = re.compile(\"[\" + quoteAttributeSpecChars +\n                                  \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\"\n                                  \"\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\"\n                                  \"\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n                                  \"\\x20\\x2f\\x60\\xa0\\u1680\\u180e\\u180f\\u2000\"\n                                  \"\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\"\n                                  \"\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\"\n                                  \"\\u3000]\")\n\ntry:\n    from codecs import register_error, xmlcharrefreplace_errors\nexcept ImportError:\n    unicode_encode_errors = \"strict\"\nelse:\n    unicode_encode_errors = \"htmlentityreplace\"\n\n    encode_entity_map = {}\n    is_ucs4 = len(\"\\U0010FFFF\") == 1\n    for k, v in list(entities.items()):\n        # skip multi-character entities\n        if ((is_ucs4 and len(v) > 1) or\n                (not is_ucs4 and len(v) > 2)):\n            continue\n        if v != \"&\":\n            if len(v) == 2:\n                v = utils.surrogatePairToCodepoint(v)\n            else:\n                v = ord(v)\n            if v not in encode_entity_map or k.islower():\n                # prefer &lt; over &LT; and similarly for &amp;, &gt;, etc.\n                encode_entity_map[v] = k\n\n    def htmlentityreplace_errors(exc):\n        if isinstance(exc, (UnicodeEncodeError, UnicodeTranslateError)):\n            res = []\n            codepoints = []\n            skip = False\n            for i, c in enumerate(exc.object[exc.start:exc.end]):\n                if skip:\n                    skip = False\n                    continue\n                index = i + exc.start\n                if utils.isSurrogatePair(exc.object[index:min([exc.end, index + 2])]):\n                    codepoint = utils.surrogatePairToCodepoint(exc.object[index:index + 2])\n                    skip = True\n                else:\n                    codepoint = ord(c)\n                codepoints.append(codepoint)\n            for cp in codepoints:\n                e = encode_entity_map.get(cp)\n                if e:\n                    res.append(\"&\")\n                    res.append(e)\n                    if not e.endswith(\";\"):\n                        res.append(\";\")\n                else:\n                    res.append(\"&#x%s;\" % (hex(cp)[2:]))\n            return (\"\".join(res), exc.end)\n        else:\n            return xmlcharrefreplace_errors(exc)\n\n    register_error(unicode_encode_errors, htmlentityreplace_errors)\n\n    del register_error\n\n\nclass HTMLSerializer(object):\n\n    # attribute quoting options\n    quote_attr_values = \"legacy\"  # be secure by default\n    quote_char = '\"'\n    use_best_quote_char = True\n\n    # tag syntax options\n    omit_optional_tags = True\n    minimize_boolean_attributes = True\n    use_trailing_solidus = False\n    space_before_trailing_solidus = True\n\n    # escaping options\n    escape_lt_in_attrs = False\n    escape_rcdata = False\n    resolve_entities = True\n\n    # miscellaneous options\n    alphabetical_attributes = False\n    inject_meta_charset = True\n    strip_whitespace = False\n    sanitize = False\n\n    options = (\"quote_attr_values\", \"quote_char\", \"use_best_quote_char\",\n               \"omit_optional_tags\", \"minimize_boolean_attributes\",\n               \"use_trailing_solidus\", \"space_before_trailing_solidus\",\n               \"escape_lt_in_attrs\", \"escape_rcdata\", \"resolve_entities\",\n               \"alphabetical_attributes\", \"inject_meta_charset\",\n               \"strip_whitespace\", \"sanitize\")\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize HTMLSerializer.\n\n        Keyword options (default given first unless specified) include:\n\n        inject_meta_charset=True|False\n          Whether it insert a meta element to define the character set of the\n          document.\n        quote_attr_values=\"legacy\"|\"spec\"|\"always\"\n          Whether to quote attribute values that don't require quoting\n          per legacy browser behaviour, when required by the standard, or always.\n        quote_char=u'\"'|u\"'\"\n          Use given quote character for attribute quoting. Default is to\n          use double quote unless attribute value contains a double quote,\n          in which case single quotes are used instead.\n        escape_lt_in_attrs=False|True\n          Whether to escape < in attribute values.\n        escape_rcdata=False|True\n          Whether to escape characters that need to be escaped within normal\n          elements within rcdata elements such as style.\n        resolve_entities=True|False\n          Whether to resolve named character entities that appear in the\n          source tree. The XML predefined entities &lt; &gt; &amp; &quot; &apos;\n          are unaffected by this setting.\n        strip_whitespace=False|True\n          Whether to remove semantically meaningless whitespace. (This\n          compresses all whitespace to a single space except within pre.)\n        minimize_boolean_attributes=True|False\n          Shortens boolean attributes to give just the attribute value,\n          for example <input disabled=\"disabled\"> becomes <input disabled>.\n        use_trailing_solidus=False|True\n          Includes a close-tag slash at the end of the start tag of void\n          elements (empty elements whose end tag is forbidden). E.g. <hr/>.\n        space_before_trailing_solidus=True|False\n          Places a space immediately before the closing slash in a tag\n          using a trailing solidus. E.g. <hr />. Requires use_trailing_solidus.\n        sanitize=False|True\n          Strip all unsafe or unknown constructs from output.\n          See `html5lib user documentation`_\n        omit_optional_tags=True|False\n          Omit start/end tags that are optional.\n        alphabetical_attributes=False|True\n          Reorder attributes to be in alphabetical order.\n\n        .. _html5lib user documentation: http://code.google.com/p/html5lib/wiki/UserDocumentation\n        \"\"\"\n        if 'quote_char' in kwargs:\n            self.use_best_quote_char = False\n        for attr in self.options:\n            setattr(self, attr, kwargs.get(attr, getattr(self, attr)))\n        self.errors = []\n        self.strict = False\n\n    def encode(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, unicode_encode_errors)\n        else:\n            return string\n\n    def encodeStrict(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, \"strict\")\n        else:\n            return string\n\n    def serialize(self, treewalker, encoding=None):\n        self.encoding = encoding\n        in_cdata = False\n        self.errors = []\n\n        if encoding and self.inject_meta_charset:\n            from ..filters.inject_meta_charset import Filter\n            treewalker = Filter(treewalker, encoding)\n        # WhitespaceFilter should be used before OptionalTagFilter\n        # for maximum efficiently of this latter filter\n        if self.strip_whitespace:\n            from ..filters.whitespace import Filter\n            treewalker = Filter(treewalker)\n        if self.sanitize:\n            from ..filters.sanitizer import Filter\n            treewalker = Filter(treewalker)\n        if self.omit_optional_tags:\n            from ..filters.optionaltags import Filter\n            treewalker = Filter(treewalker)\n        # Alphabetical attributes must be last, as other filters\n        # could add attributes and alter the order\n        if self.alphabetical_attributes:\n            from ..filters.alphabeticalattributes import Filter\n            treewalker = Filter(treewalker)\n\n        for token in treewalker:\n            type = token[\"type\"]\n            if type == \"Doctype\":\n                doctype = \"<!DOCTYPE %s\" % token[\"name\"]\n\n                if token[\"publicId\"]:\n                    doctype += ' PUBLIC \"%s\"' % token[\"publicId\"]\n                elif token[\"systemId\"]:\n                    doctype += \" SYSTEM\"\n                if token[\"systemId\"]:\n                    if token[\"systemId\"].find('\"') >= 0:\n                        if token[\"systemId\"].find(\"'\") >= 0:\n                            self.serializeError(\"System identifer contains both single and double quote characters\")\n                        quote_char = \"'\"\n                    else:\n                        quote_char = '\"'\n                    doctype += \" %s%s%s\" % (quote_char, token[\"systemId\"], quote_char)\n\n                doctype += \">\"\n                yield self.encodeStrict(doctype)\n\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                if type == \"SpaceCharacters\" or in_cdata:\n                    if in_cdata and token[\"data\"].find(\"</\") >= 0:\n                        self.serializeError(\"Unexpected </ in CDATA\")\n                    yield self.encode(token[\"data\"])\n                else:\n                    yield self.encode(escape(token[\"data\"]))\n\n            elif type in (\"StartTag\", \"EmptyTag\"):\n                name = token[\"name\"]\n                yield self.encodeStrict(\"<%s\" % name)\n                if name in rcdataElements and not self.escape_rcdata:\n                    in_cdata = True\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                for (attr_namespace, attr_name), attr_value in token[\"data\"].items():\n                    # TODO: Add namespace support here\n                    k = attr_name\n                    v = attr_value\n                    yield self.encodeStrict(' ')\n\n                    yield self.encodeStrict(k)\n                    if not self.minimize_boolean_attributes or \\\n                        (k not in booleanAttributes.get(name, tuple()) and\n                         k not in booleanAttributes.get(\"\", tuple())):\n                        yield self.encodeStrict(\"=\")\n                        if self.quote_attr_values == \"always\" or len(v) == 0:\n                            quote_attr = True\n                        elif self.quote_attr_values == \"spec\":\n                            quote_attr = quoteAttributeSpec.search(v) is not None\n                        elif self.quote_attr_values == \"legacy\":\n                            quote_attr = quoteAttributeLegacy.search(v) is not None\n                        else:\n                            raise ValueError(\"quote_attr_values must be one of: \"\n                                             \"'always', 'spec', or 'legacy'\")\n                        v = v.replace(\"&\", \"&amp;\")\n                        if self.escape_lt_in_attrs:\n                            v = v.replace(\"<\", \"&lt;\")\n                        if quote_attr:\n                            quote_char = self.quote_char\n                            if self.use_best_quote_char:\n                                if \"'\" in v and '\"' not in v:\n                                    quote_char = '\"'\n                                elif '\"' in v and \"'\" not in v:\n                                    quote_char = \"'\"\n                            if quote_char == \"'\":\n                                v = v.replace(\"'\", \"&#39;\")\n                            else:\n                                v = v.replace('\"', \"&quot;\")\n                            yield self.encodeStrict(quote_char)\n                            yield self.encode(v)\n                            yield self.encodeStrict(quote_char)\n                        else:\n                            yield self.encode(v)\n                if name in voidElements and self.use_trailing_solidus:\n                    if self.space_before_trailing_solidus:\n                        yield self.encodeStrict(\" /\")\n                    else:\n                        yield self.encodeStrict(\"/\")\n                yield self.encode(\">\")\n\n            elif type == \"EndTag\":\n                name = token[\"name\"]\n                if name in rcdataElements:\n                    in_cdata = False\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                yield self.encodeStrict(\"</%s>\" % name)\n\n            elif type == \"Comment\":\n                data = token[\"data\"]\n                if data.find(\"--\") >= 0:\n                    self.serializeError(\"Comment contains --\")\n                yield self.encodeStrict(\"<!--%s-->\" % token[\"data\"])\n\n            elif type == \"Entity\":\n                name = token[\"name\"]\n                key = name + \";\"\n                if key not in entities:\n                    self.serializeError(\"Entity %s not recognized\" % name)\n                if self.resolve_entities and key not in xmlEntities:\n                    data = entities[key]\n                else:\n                    data = \"&%s;\" % name\n                yield self.encodeStrict(data)\n\n            else:\n                self.serializeError(token[\"data\"])\n\n    def render(self, treewalker, encoding=None):\n        if encoding:\n            return b\"\".join(list(self.serialize(treewalker, encoding)))\n        else:\n            return \"\".join(list(self.serialize(treewalker)))\n\n    def serializeError(self, data=\"XXX ERROR MESSAGE NEEDED\"):\n        # XXX The idea is to make data mandatory.\n        self.errors.append(data)\n        if self.strict:\n            raise SerializeError\n\n\ndef SerializeError(Exception):\n    \"\"\"Error in serialized tree\"\"\"\n    pass\n", "code_before": "from __future__ import absolute_import, division, unicode_literals\nfrom six import text_type\n\nimport re\n\nfrom ..constants import voidElements, booleanAttributes, spaceCharacters\nfrom ..constants import rcdataElements, entities, xmlEntities\nfrom .. import utils\nfrom xml.sax.saxutils import escape\n\nspaceCharacters = \"\".join(spaceCharacters)\n\nquoteAttributeSpec = re.compile(\"[\" + spaceCharacters + \"\\\"'=<>`]\")\n\ntry:\n    from codecs import register_error, xmlcharrefreplace_errors\nexcept ImportError:\n    unicode_encode_errors = \"strict\"\nelse:\n    unicode_encode_errors = \"htmlentityreplace\"\n\n    encode_entity_map = {}\n    is_ucs4 = len(\"\\U0010FFFF\") == 1\n    for k, v in list(entities.items()):\n        # skip multi-character entities\n        if ((is_ucs4 and len(v) > 1) or\n                (not is_ucs4 and len(v) > 2)):\n            continue\n        if v != \"&\":\n            if len(v) == 2:\n                v = utils.surrogatePairToCodepoint(v)\n            else:\n                v = ord(v)\n            if v not in encode_entity_map or k.islower():\n                # prefer &lt; over &LT; and similarly for &amp;, &gt;, etc.\n                encode_entity_map[v] = k\n\n    def htmlentityreplace_errors(exc):\n        if isinstance(exc, (UnicodeEncodeError, UnicodeTranslateError)):\n            res = []\n            codepoints = []\n            skip = False\n            for i, c in enumerate(exc.object[exc.start:exc.end]):\n                if skip:\n                    skip = False\n                    continue\n                index = i + exc.start\n                if utils.isSurrogatePair(exc.object[index:min([exc.end, index + 2])]):\n                    codepoint = utils.surrogatePairToCodepoint(exc.object[index:index + 2])\n                    skip = True\n                else:\n                    codepoint = ord(c)\n                codepoints.append(codepoint)\n            for cp in codepoints:\n                e = encode_entity_map.get(cp)\n                if e:\n                    res.append(\"&\")\n                    res.append(e)\n                    if not e.endswith(\";\"):\n                        res.append(\";\")\n                else:\n                    res.append(\"&#x%s;\" % (hex(cp)[2:]))\n            return (\"\".join(res), exc.end)\n        else:\n            return xmlcharrefreplace_errors(exc)\n\n    register_error(unicode_encode_errors, htmlentityreplace_errors)\n\n    del register_error\n\n\nclass HTMLSerializer(object):\n\n    # attribute quoting options\n    quote_attr_values = False\n    quote_char = '\"'\n    use_best_quote_char = True\n\n    # tag syntax options\n    omit_optional_tags = True\n    minimize_boolean_attributes = True\n    use_trailing_solidus = False\n    space_before_trailing_solidus = True\n\n    # escaping options\n    escape_lt_in_attrs = False\n    escape_rcdata = False\n    resolve_entities = True\n\n    # miscellaneous options\n    alphabetical_attributes = False\n    inject_meta_charset = True\n    strip_whitespace = False\n    sanitize = False\n\n    options = (\"quote_attr_values\", \"quote_char\", \"use_best_quote_char\",\n               \"omit_optional_tags\", \"minimize_boolean_attributes\",\n               \"use_trailing_solidus\", \"space_before_trailing_solidus\",\n               \"escape_lt_in_attrs\", \"escape_rcdata\", \"resolve_entities\",\n               \"alphabetical_attributes\", \"inject_meta_charset\",\n               \"strip_whitespace\", \"sanitize\")\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize HTMLSerializer.\n\n        Keyword options (default given first unless specified) include:\n\n        inject_meta_charset=True|False\n          Whether it insert a meta element to define the character set of the\n          document.\n        quote_attr_values=True|False\n          Whether to quote attribute values that don't require quoting\n          per HTML5 parsing rules.\n        quote_char=u'\"'|u\"'\"\n          Use given quote character for attribute quoting. Default is to\n          use double quote unless attribute value contains a double quote,\n          in which case single quotes are used instead.\n        escape_lt_in_attrs=False|True\n          Whether to escape < in attribute values.\n        escape_rcdata=False|True\n          Whether to escape characters that need to be escaped within normal\n          elements within rcdata elements such as style.\n        resolve_entities=True|False\n          Whether to resolve named character entities that appear in the\n          source tree. The XML predefined entities &lt; &gt; &amp; &quot; &apos;\n          are unaffected by this setting.\n        strip_whitespace=False|True\n          Whether to remove semantically meaningless whitespace. (This\n          compresses all whitespace to a single space except within pre.)\n        minimize_boolean_attributes=True|False\n          Shortens boolean attributes to give just the attribute value,\n          for example <input disabled=\"disabled\"> becomes <input disabled>.\n        use_trailing_solidus=False|True\n          Includes a close-tag slash at the end of the start tag of void\n          elements (empty elements whose end tag is forbidden). E.g. <hr/>.\n        space_before_trailing_solidus=True|False\n          Places a space immediately before the closing slash in a tag\n          using a trailing solidus. E.g. <hr />. Requires use_trailing_solidus.\n        sanitize=False|True\n          Strip all unsafe or unknown constructs from output.\n          See `html5lib user documentation`_\n        omit_optional_tags=True|False\n          Omit start/end tags that are optional.\n        alphabetical_attributes=False|True\n          Reorder attributes to be in alphabetical order.\n\n        .. _html5lib user documentation: http://code.google.com/p/html5lib/wiki/UserDocumentation\n        \"\"\"\n        if 'quote_char' in kwargs:\n            self.use_best_quote_char = False\n        for attr in self.options:\n            setattr(self, attr, kwargs.get(attr, getattr(self, attr)))\n        self.errors = []\n        self.strict = False\n\n    def encode(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, unicode_encode_errors)\n        else:\n            return string\n\n    def encodeStrict(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, \"strict\")\n        else:\n            return string\n\n    def serialize(self, treewalker, encoding=None):\n        self.encoding = encoding\n        in_cdata = False\n        self.errors = []\n\n        if encoding and self.inject_meta_charset:\n            from ..filters.inject_meta_charset import Filter\n            treewalker = Filter(treewalker, encoding)\n        # WhitespaceFilter should be used before OptionalTagFilter\n        # for maximum efficiently of this latter filter\n        if self.strip_whitespace:\n            from ..filters.whitespace import Filter\n            treewalker = Filter(treewalker)\n        if self.sanitize:\n            from ..filters.sanitizer import Filter\n            treewalker = Filter(treewalker)\n        if self.omit_optional_tags:\n            from ..filters.optionaltags import Filter\n            treewalker = Filter(treewalker)\n        # Alphabetical attributes must be last, as other filters\n        # could add attributes and alter the order\n        if self.alphabetical_attributes:\n            from ..filters.alphabeticalattributes import Filter\n            treewalker = Filter(treewalker)\n\n        for token in treewalker:\n            type = token[\"type\"]\n            if type == \"Doctype\":\n                doctype = \"<!DOCTYPE %s\" % token[\"name\"]\n\n                if token[\"publicId\"]:\n                    doctype += ' PUBLIC \"%s\"' % token[\"publicId\"]\n                elif token[\"systemId\"]:\n                    doctype += \" SYSTEM\"\n                if token[\"systemId\"]:\n                    if token[\"systemId\"].find('\"') >= 0:\n                        if token[\"systemId\"].find(\"'\") >= 0:\n                            self.serializeError(\"System identifer contains both single and double quote characters\")\n                        quote_char = \"'\"\n                    else:\n                        quote_char = '\"'\n                    doctype += \" %s%s%s\" % (quote_char, token[\"systemId\"], quote_char)\n\n                doctype += \">\"\n                yield self.encodeStrict(doctype)\n\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                if type == \"SpaceCharacters\" or in_cdata:\n                    if in_cdata and token[\"data\"].find(\"</\") >= 0:\n                        self.serializeError(\"Unexpected </ in CDATA\")\n                    yield self.encode(token[\"data\"])\n                else:\n                    yield self.encode(escape(token[\"data\"]))\n\n            elif type in (\"StartTag\", \"EmptyTag\"):\n                name = token[\"name\"]\n                yield self.encodeStrict(\"<%s\" % name)\n                if name in rcdataElements and not self.escape_rcdata:\n                    in_cdata = True\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                for (attr_namespace, attr_name), attr_value in token[\"data\"].items():\n                    # TODO: Add namespace support here\n                    k = attr_name\n                    v = attr_value\n                    yield self.encodeStrict(' ')\n\n                    yield self.encodeStrict(k)\n                    if not self.minimize_boolean_attributes or \\\n                        (k not in booleanAttributes.get(name, tuple()) and\n                         k not in booleanAttributes.get(\"\", tuple())):\n                        yield self.encodeStrict(\"=\")\n                        if self.quote_attr_values:\n                            quote_attr = True\n                        else:\n                            quote_attr = len(v) == 0 or quoteAttributeSpec.search(v)\n                        v = v.replace(\"&\", \"&amp;\")\n                        if self.escape_lt_in_attrs:\n                            v = v.replace(\"<\", \"&lt;\")\n                        if quote_attr:\n                            quote_char = self.quote_char\n                            if self.use_best_quote_char:\n                                if \"'\" in v and '\"' not in v:\n                                    quote_char = '\"'\n                                elif '\"' in v and \"'\" not in v:\n                                    quote_char = \"'\"\n                            if quote_char == \"'\":\n                                v = v.replace(\"'\", \"&#39;\")\n                            else:\n                                v = v.replace('\"', \"&quot;\")\n                            yield self.encodeStrict(quote_char)\n                            yield self.encode(v)\n                            yield self.encodeStrict(quote_char)\n                        else:\n                            yield self.encode(v)\n                if name in voidElements and self.use_trailing_solidus:\n                    if self.space_before_trailing_solidus:\n                        yield self.encodeStrict(\" /\")\n                    else:\n                        yield self.encodeStrict(\"/\")\n                yield self.encode(\">\")\n\n            elif type == \"EndTag\":\n                name = token[\"name\"]\n                if name in rcdataElements:\n                    in_cdata = False\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                yield self.encodeStrict(\"</%s>\" % name)\n\n            elif type == \"Comment\":\n                data = token[\"data\"]\n                if data.find(\"--\") >= 0:\n                    self.serializeError(\"Comment contains --\")\n                yield self.encodeStrict(\"<!--%s-->\" % token[\"data\"])\n\n            elif type == \"Entity\":\n                name = token[\"name\"]\n                key = name + \";\"\n                if key not in entities:\n                    self.serializeError(\"Entity %s not recognized\" % name)\n                if self.resolve_entities and key not in xmlEntities:\n                    data = entities[key]\n                else:\n                    data = \"&%s;\" % name\n                yield self.encodeStrict(data)\n\n            else:\n                self.serializeError(token[\"data\"])\n\n    def render(self, treewalker, encoding=None):\n        if encoding:\n            return b\"\".join(list(self.serialize(treewalker, encoding)))\n        else:\n            return \"\".join(list(self.serialize(treewalker)))\n\n    def serializeError(self, data=\"XXX ERROR MESSAGE NEEDED\"):\n        # XXX The idea is to make data mandatory.\n        self.errors.append(data)\n        if self.strict:\n            raise SerializeError\n\n\ndef SerializeError(Exception):\n    \"\"\"Error in serialized tree\"\"\"\n    pass\n", "patch": "@@ -10,7 +10,16 @@\n \n spaceCharacters = \"\".join(spaceCharacters)\n \n-quoteAttributeSpec = re.compile(\"[\" + spaceCharacters + \"\\\"'=<>`]\")\n+quoteAttributeSpecChars = spaceCharacters + \"\\\"'=<>`\"\n+quoteAttributeSpec = re.compile(\"[\" + quoteAttributeSpecChars + \"]\")\n+quoteAttributeLegacy = re.compile(\"[\" + quoteAttributeSpecChars +\n+                                  \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\"\n+                                  \"\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\"\n+                                  \"\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n+                                  \"\\x20\\x2f\\x60\\xa0\\u1680\\u180e\\u180f\\u2000\"\n+                                  \"\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\"\n+                                  \"\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\"\n+                                  \"\\u3000]\")\n \n try:\n     from codecs import register_error, xmlcharrefreplace_errors\n@@ -72,7 +81,7 @@ def htmlentityreplace_errors(exc):\n class HTMLSerializer(object):\n \n     # attribute quoting options\n-    quote_attr_values = False\n+    quote_attr_values = \"legacy\"  # be secure by default\n     quote_char = '\"'\n     use_best_quote_char = True\n \n@@ -108,9 +117,9 @@ def __init__(self, **kwargs):\n         inject_meta_charset=True|False\n           Whether it insert a meta element to define the character set of the\n           document.\n-        quote_attr_values=True|False\n+        quote_attr_values=\"legacy\"|\"spec\"|\"always\"\n           Whether to quote attribute values that don't require quoting\n-          per HTML5 parsing rules.\n+          per legacy browser behaviour, when required by the standard, or always.\n         quote_char=u'\"'|u\"'\"\n           Use given quote character for attribute quoting. Default is to\n           use double quote unless attribute value contains a double quote,\n@@ -239,10 +248,15 @@ def serialize(self, treewalker, encoding=None):\n                         (k not in booleanAttributes.get(name, tuple()) and\n                          k not in booleanAttributes.get(\"\", tuple())):\n                         yield self.encodeStrict(\"=\")\n-                        if self.quote_attr_values:\n+                        if self.quote_attr_values == \"always\" or len(v) == 0:\n                             quote_attr = True\n+                        elif self.quote_attr_values == \"spec\":\n+                            quote_attr = quoteAttributeSpec.search(v) is not None\n+                        elif self.quote_attr_values == \"legacy\":\n+                            quote_attr = quoteAttributeLegacy.search(v) is not None\n                         else:\n-                            quote_attr = len(v) == 0 or quoteAttributeSpec.search(v)\n+                            raise ValueError(\"quote_attr_values must be one of: \"\n+                                             \"'always', 'spec', or 'legacy'\")\n                         v = v.replace(\"&\", \"&amp;\")\n                         if self.escape_lt_in_attrs:\n                             v = v.replace(\"<\", \"&lt;\")", "file_path": "files/2017_2/28", "file_language": "py", "file_name": "html5lib/serializer/htmlserializer.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [true, ["/data/rdhu/other/Static/tmp/2017_2_28.py:13: High: compile\nquoteAttributeSpec = re.compile(\"[\" + spaceCharacters + \"\\\"'=<>`]\")\nArgument 1 to this function call should be checked to ensure that it does not\ncome from an untrusted source without first verifying that it contains nothing\ndangerous."]], "semgrep": [false, []]}, "target": 1, "function_before": [{"function": "class HTMLSerializer(object):\n\n    # attribute quoting options\n    quote_attr_values = False\n    quote_char = '\"'\n    use_best_quote_char = True\n\n    # tag syntax options\n    omit_optional_tags = True\n    minimize_boolean_attributes = True\n    use_trailing_solidus = False\n    space_before_trailing_solidus = True\n\n    # escaping options\n    escape_lt_in_attrs = False\n    escape_rcdata = False\n    resolve_entities = True\n\n    # miscellaneous options\n    alphabetical_attributes = False\n    inject_meta_charset = True\n    strip_whitespace = False\n    sanitize = False\n\n    options = (\"quote_attr_values\", \"quote_char\", \"use_best_quote_char\",\n               \"omit_optional_tags\", \"minimize_boolean_attributes\",\n               \"use_trailing_solidus\", \"space_before_trailing_solidus\",\n               \"escape_lt_in_attrs\", \"escape_rcdata\", \"resolve_entities\",\n               \"alphabetical_attributes\", \"inject_meta_charset\",\n               \"strip_whitespace\", \"sanitize\")\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize HTMLSerializer.\n\n        Keyword options (default given first unless specified) include:\n\n        inject_meta_charset=True|False\n          Whether it insert a meta element to define the character set of the\n          document.\n        quote_attr_values=True|False\n          Whether to quote attribute values that don't require quoting\n          per HTML5 parsing rules.\n        quote_char=u'\"'|u\"'\"\n          Use given quote character for attribute quoting. Default is to\n          use double quote unless attribute value contains a double quote,\n          in which case single quotes are used instead.\n        escape_lt_in_attrs=False|True\n          Whether to escape < in attribute values.\n        escape_rcdata=False|True\n          Whether to escape characters that need to be escaped within normal\n          elements within rcdata elements such as style.\n        resolve_entities=True|False\n          Whether to resolve named character entities that appear in the\n          source tree. The XML predefined entities &lt; &gt; &amp; &quot; &apos;\n          are unaffected by this setting.\n        strip_whitespace=False|True\n          Whether to remove semantically meaningless whitespace. (This\n          compresses all whitespace to a single space except within pre.)\n        minimize_boolean_attributes=True|False\n          Shortens boolean attributes to give just the attribute value,\n          for example <input disabled=\"disabled\"> becomes <input disabled>.\n        use_trailing_solidus=False|True\n          Includes a close-tag slash at the end of the start tag of void\n          elements (empty elements whose end tag is forbidden). E.g. <hr/>.\n        space_before_trailing_solidus=True|False\n          Places a space immediately before the closing slash in a tag\n          using a trailing solidus. E.g. <hr />. Requires use_trailing_solidus.\n        sanitize=False|True\n          Strip all unsafe or unknown constructs from output.\n          See `html5lib user documentation`_\n        omit_optional_tags=True|False\n          Omit start/end tags that are optional.\n        alphabetical_attributes=False|True\n          Reorder attributes to be in alphabetical order.\n\n        .. _html5lib user documentation: http://code.google.com/p/html5lib/wiki/UserDocumentation\n        \"\"\"\n        if 'quote_char' in kwargs:\n            self.use_best_quote_char = False\n        for attr in self.options:\n            setattr(self, attr, kwargs.get(attr, getattr(self, attr)))\n        self.errors = []\n        self.strict = False\n\n    def encode(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, unicode_encode_errors)\n        else:\n            return string\n\n    def encodeStrict(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, \"strict\")\n        else:\n            return string\n\n    def serialize(self, treewalker, encoding=None):\n        self.encoding = encoding\n        in_cdata = False\n        self.errors = []\n\n        if encoding and self.inject_meta_charset:\n            from ..filters.inject_meta_charset import Filter\n            treewalker = Filter(treewalker, encoding)\n        # WhitespaceFilter should be used before OptionalTagFilter\n        # for maximum efficiently of this latter filter\n        if self.strip_whitespace:\n            from ..filters.whitespace import Filter\n            treewalker = Filter(treewalker)\n        if self.sanitize:\n            from ..filters.sanitizer import Filter\n            treewalker = Filter(treewalker)\n        if self.omit_optional_tags:\n            from ..filters.optionaltags import Filter\n            treewalker = Filter(treewalker)\n        # Alphabetical attributes must be last, as other filters\n        # could add attributes and alter the order\n        if self.alphabetical_attributes:\n            from ..filters.alphabeticalattributes import Filter\n            treewalker = Filter(treewalker)\n\n        for token in treewalker:\n            type = token[\"type\"]\n            if type == \"Doctype\":\n                doctype = \"<!DOCTYPE %s\" % token[\"name\"]\n\n                if token[\"publicId\"]:\n                    doctype += ' PUBLIC \"%s\"' % token[\"publicId\"]\n                elif token[\"systemId\"]:\n                    doctype += \" SYSTEM\"\n                if token[\"systemId\"]:\n                    if token[\"systemId\"].find('\"') >= 0:\n                        if token[\"systemId\"].find(\"'\") >= 0:\n                            self.serializeError(\"System identifer contains both single and double quote characters\")\n                        quote_char = \"'\"\n                    else:\n                        quote_char = '\"'\n                    doctype += \" %s%s%s\" % (quote_char, token[\"systemId\"], quote_char)\n\n                doctype += \">\"\n                yield self.encodeStrict(doctype)\n\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                if type == \"SpaceCharacters\" or in_cdata:\n                    if in_cdata and token[\"data\"].find(\"</\") >= 0:\n                        self.serializeError(\"Unexpected </ in CDATA\")\n                    yield self.encode(token[\"data\"])\n                else:\n                    yield self.encode(escape(token[\"data\"]))\n\n            elif type in (\"StartTag\", \"EmptyTag\"):\n                name = token[\"name\"]\n                yield self.encodeStrict(\"<%s\" % name)\n                if name in rcdataElements and not self.escape_rcdata:\n                    in_cdata = True\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                for (attr_namespace, attr_name), attr_value in token[\"data\"].items():\n                    # TODO: Add namespace support here\n                    k = attr_name\n                    v = attr_value\n                    yield self.encodeStrict(' ')\n\n                    yield self.encodeStrict(k)\n                    if not self.minimize_boolean_attributes or \\\n                        (k not in booleanAttributes.get(name, tuple()) and\n                         k not in booleanAttributes.get(\"\", tuple())):\n                        yield self.encodeStrict(\"=\")\n                        if self.quote_attr_values:\n                            quote_attr = True\n                        else:\n                            quote_attr = len(v) == 0 or quoteAttributeSpec.search(v)\n                        v = v.replace(\"&\", \"&amp;\")\n                        if self.escape_lt_in_attrs:\n                            v = v.replace(\"<\", \"&lt;\")\n                        if quote_attr:\n                            quote_char = self.quote_char\n                            if self.use_best_quote_char:\n                                if \"'\" in v and '\"' not in v:\n                                    quote_char = '\"'\n                                elif '\"' in v and \"'\" not in v:\n                                    quote_char = \"'\"\n                            if quote_char == \"'\":\n                                v = v.replace(\"'\", \"&#39;\")\n                            else:\n                                v = v.replace('\"', \"&quot;\")\n                            yield self.encodeStrict(quote_char)\n                            yield self.encode(v)\n                            yield self.encodeStrict(quote_char)\n                        else:\n                            yield self.encode(v)\n                if name in voidElements and self.use_trailing_solidus:\n                    if self.space_before_trailing_solidus:\n                        yield self.encodeStrict(\" /\")\n                    else:\n                        yield self.encodeStrict(\"/\")\n                yield self.encode(\">\")\n\n            elif type == \"EndTag\":\n                name = token[\"name\"]\n                if name in rcdataElements:\n                    in_cdata = False\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                yield self.encodeStrict(\"</%s>\" % name)\n\n            elif type == \"Comment\":\n                data = token[\"data\"]\n                if data.find(\"--\") >= 0:\n                    self.serializeError(\"Comment contains --\")\n                yield self.encodeStrict(\"<!--%s-->\" % token[\"data\"])\n\n            elif type == \"Entity\":\n                name = token[\"name\"]\n                key = name + \";\"\n                if key not in entities:\n                    self.serializeError(\"Entity %s not recognized\" % name)\n                if self.resolve_entities and key not in xmlEntities:\n                    data = entities[key]\n                else:\n                    data = \"&%s;\" % name\n                yield self.encodeStrict(data)\n\n            else:\n                self.serializeError(token[\"data\"])\n\n    def render(self, treewalker, encoding=None):\n        if encoding:\n            return b\"\".join(list(self.serialize(treewalker, encoding)))\n        else:\n            return \"\".join(list(self.serialize(treewalker)))\n\n    def serializeError(self, data=\"XXX ERROR MESSAGE NEEDED\"):\n        # XXX The idea is to make data mandatory.\n        self.errors.append(data)\n        if self.strict:\n            raise SerializeError", "target": 1, "line": "@@  -72,7 +81,7  @@ def htmlentityreplace_errors(exc):\n class HTMLSerializer(object):\n \n     # attribute quoting options\n-    quote_attr_values = False\n+    quote_attr_values = \"legacy\"  # be secure by default\n     quote_char = '\"'\n     use_best_quote_char = True\n \n@@  -108,9 +117,9  @@ def __init__(self, **kwargs):\n         inject_meta_charset=True|False\n           Whether it insert a meta element to define the character set of the\n           document.\n-        quote_attr_values=True|False\n+        quote_attr_values=\"legacy\"|\"spec\"|\"always\"\n           Whether to quote attribute values that don't require quoting\n-          per HTML5 parsing rules.\n+          per legacy browser behaviour, when required by the standard, or always.\n         quote_char=u'\"'|u\"'\"\n           Use given quote character for attribute quoting. Default is to\n           use double quote unless attribute value contains a double quote,\n@@  -239,10 +248,15  @@ def serialize(self, treewalker, encoding=None):\n                         (k not in booleanAttributes.get(name, tuple()) and\n                          k not in booleanAttributes.get(\"\", tuple())):\n                         yield self.encodeStrict(\"=\")\n-                        if self.quote_attr_values:\n+                        if self.quote_attr_values == \"always\" or len(v) == 0:\n                             quote_attr = True\n+                        elif self.quote_attr_values == \"spec\":\n+                            quote_attr = quoteAttributeSpec.search(v) is not None\n+                        elif self.quote_attr_values == \"legacy\":\n+                            quote_attr = quoteAttributeLegacy.search(v) is not None\n                         else:\n-                            quote_attr = len(v) == 0 or quoteAttributeSpec.search(v)\n+                            raise ValueError(\"quote_attr_values must be one of: \"\n+                                             \"'always', 'spec', or 'legacy'\")\n                         v = v.replace(\"&\", \"&amp;\")\n                         if self.escape_lt_in_attrs:\n                             v = v.replace(\"<\", \"&lt;\")"}, {"function": "def SerializeError(Exception):\n    \"\"\"Error in serialized tree\"\"\"\n    pass", "target": 0}], "function_after": [{"function": "class HTMLSerializer(object):\n\n    # attribute quoting options\n    quote_attr_values = \"legacy\"  # be secure by default\n    quote_char = '\"'\n    use_best_quote_char = True\n\n    # tag syntax options\n    omit_optional_tags = True\n    minimize_boolean_attributes = True\n    use_trailing_solidus = False\n    space_before_trailing_solidus = True\n\n    # escaping options\n    escape_lt_in_attrs = False\n    escape_rcdata = False\n    resolve_entities = True\n\n    # miscellaneous options\n    alphabetical_attributes = False\n    inject_meta_charset = True\n    strip_whitespace = False\n    sanitize = False\n\n    options = (\"quote_attr_values\", \"quote_char\", \"use_best_quote_char\",\n               \"omit_optional_tags\", \"minimize_boolean_attributes\",\n               \"use_trailing_solidus\", \"space_before_trailing_solidus\",\n               \"escape_lt_in_attrs\", \"escape_rcdata\", \"resolve_entities\",\n               \"alphabetical_attributes\", \"inject_meta_charset\",\n               \"strip_whitespace\", \"sanitize\")\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize HTMLSerializer.\n\n        Keyword options (default given first unless specified) include:\n\n        inject_meta_charset=True|False\n          Whether it insert a meta element to define the character set of the\n          document.\n        quote_attr_values=\"legacy\"|\"spec\"|\"always\"\n          Whether to quote attribute values that don't require quoting\n          per legacy browser behaviour, when required by the standard, or always.\n        quote_char=u'\"'|u\"'\"\n          Use given quote character for attribute quoting. Default is to\n          use double quote unless attribute value contains a double quote,\n          in which case single quotes are used instead.\n        escape_lt_in_attrs=False|True\n          Whether to escape < in attribute values.\n        escape_rcdata=False|True\n          Whether to escape characters that need to be escaped within normal\n          elements within rcdata elements such as style.\n        resolve_entities=True|False\n          Whether to resolve named character entities that appear in the\n          source tree. The XML predefined entities &lt; &gt; &amp; &quot; &apos;\n          are unaffected by this setting.\n        strip_whitespace=False|True\n          Whether to remove semantically meaningless whitespace. (This\n          compresses all whitespace to a single space except within pre.)\n        minimize_boolean_attributes=True|False\n          Shortens boolean attributes to give just the attribute value,\n          for example <input disabled=\"disabled\"> becomes <input disabled>.\n        use_trailing_solidus=False|True\n          Includes a close-tag slash at the end of the start tag of void\n          elements (empty elements whose end tag is forbidden). E.g. <hr/>.\n        space_before_trailing_solidus=True|False\n          Places a space immediately before the closing slash in a tag\n          using a trailing solidus. E.g. <hr />. Requires use_trailing_solidus.\n        sanitize=False|True\n          Strip all unsafe or unknown constructs from output.\n          See `html5lib user documentation`_\n        omit_optional_tags=True|False\n          Omit start/end tags that are optional.\n        alphabetical_attributes=False|True\n          Reorder attributes to be in alphabetical order.\n\n        .. _html5lib user documentation: http://code.google.com/p/html5lib/wiki/UserDocumentation\n        \"\"\"\n        if 'quote_char' in kwargs:\n            self.use_best_quote_char = False\n        for attr in self.options:\n            setattr(self, attr, kwargs.get(attr, getattr(self, attr)))\n        self.errors = []\n        self.strict = False\n\n    def encode(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, unicode_encode_errors)\n        else:\n            return string\n\n    def encodeStrict(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, \"strict\")\n        else:\n            return string\n\n    def serialize(self, treewalker, encoding=None):\n        self.encoding = encoding\n        in_cdata = False\n        self.errors = []\n\n        if encoding and self.inject_meta_charset:\n            from ..filters.inject_meta_charset import Filter\n            treewalker = Filter(treewalker, encoding)\n        # WhitespaceFilter should be used before OptionalTagFilter\n        # for maximum efficiently of this latter filter\n        if self.strip_whitespace:\n            from ..filters.whitespace import Filter\n            treewalker = Filter(treewalker)\n        if self.sanitize:\n            from ..filters.sanitizer import Filter\n            treewalker = Filter(treewalker)\n        if self.omit_optional_tags:\n            from ..filters.optionaltags import Filter\n            treewalker = Filter(treewalker)\n        # Alphabetical attributes must be last, as other filters\n        # could add attributes and alter the order\n        if self.alphabetical_attributes:\n            from ..filters.alphabeticalattributes import Filter\n            treewalker = Filter(treewalker)\n\n        for token in treewalker:\n            type = token[\"type\"]\n            if type == \"Doctype\":\n                doctype = \"<!DOCTYPE %s\" % token[\"name\"]\n\n                if token[\"publicId\"]:\n                    doctype += ' PUBLIC \"%s\"' % token[\"publicId\"]\n                elif token[\"systemId\"]:\n                    doctype += \" SYSTEM\"\n                if token[\"systemId\"]:\n                    if token[\"systemId\"].find('\"') >= 0:\n                        if token[\"systemId\"].find(\"'\") >= 0:\n                            self.serializeError(\"System identifer contains both single and double quote characters\")\n                        quote_char = \"'\"\n                    else:\n                        quote_char = '\"'\n                    doctype += \" %s%s%s\" % (quote_char, token[\"systemId\"], quote_char)\n\n                doctype += \">\"\n                yield self.encodeStrict(doctype)\n\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                if type == \"SpaceCharacters\" or in_cdata:\n                    if in_cdata and token[\"data\"].find(\"</\") >= 0:\n                        self.serializeError(\"Unexpected </ in CDATA\")\n                    yield self.encode(token[\"data\"])\n                else:\n                    yield self.encode(escape(token[\"data\"]))\n\n            elif type in (\"StartTag\", \"EmptyTag\"):\n                name = token[\"name\"]\n                yield self.encodeStrict(\"<%s\" % name)\n                if name in rcdataElements and not self.escape_rcdata:\n                    in_cdata = True\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                for (attr_namespace, attr_name), attr_value in token[\"data\"].items():\n                    # TODO: Add namespace support here\n                    k = attr_name\n                    v = attr_value\n                    yield self.encodeStrict(' ')\n\n                    yield self.encodeStrict(k)\n                    if not self.minimize_boolean_attributes or \\\n                        (k not in booleanAttributes.get(name, tuple()) and\n                         k not in booleanAttributes.get(\"\", tuple())):\n                        yield self.encodeStrict(\"=\")\n                        if self.quote_attr_values == \"always\" or len(v) == 0:\n                            quote_attr = True\n                        elif self.quote_attr_values == \"spec\":\n                            quote_attr = quoteAttributeSpec.search(v) is not None\n                        elif self.quote_attr_values == \"legacy\":\n                            quote_attr = quoteAttributeLegacy.search(v) is not None\n                        else:\n                            raise ValueError(\"quote_attr_values must be one of: \"\n                                             \"'always', 'spec', or 'legacy'\")\n                        v = v.replace(\"&\", \"&amp;\")\n                        if self.escape_lt_in_attrs:\n                            v = v.replace(\"<\", \"&lt;\")\n                        if quote_attr:\n                            quote_char = self.quote_char\n                            if self.use_best_quote_char:\n                                if \"'\" in v and '\"' not in v:\n                                    quote_char = '\"'\n                                elif '\"' in v and \"'\" not in v:\n                                    quote_char = \"'\"\n                            if quote_char == \"'\":\n                                v = v.replace(\"'\", \"&#39;\")\n                            else:\n                                v = v.replace('\"', \"&quot;\")\n                            yield self.encodeStrict(quote_char)\n                            yield self.encode(v)\n                            yield self.encodeStrict(quote_char)\n                        else:\n                            yield self.encode(v)\n                if name in voidElements and self.use_trailing_solidus:\n                    if self.space_before_trailing_solidus:\n                        yield self.encodeStrict(\" /\")\n                    else:\n                        yield self.encodeStrict(\"/\")\n                yield self.encode(\">\")\n\n            elif type == \"EndTag\":\n                name = token[\"name\"]\n                if name in rcdataElements:\n                    in_cdata = False\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                yield self.encodeStrict(\"</%s>\" % name)\n\n            elif type == \"Comment\":\n                data = token[\"data\"]\n                if data.find(\"--\") >= 0:\n                    self.serializeError(\"Comment contains --\")\n                yield self.encodeStrict(\"<!--%s-->\" % token[\"data\"])\n\n            elif type == \"Entity\":\n                name = token[\"name\"]\n                key = name + \";\"\n                if key not in entities:\n                    self.serializeError(\"Entity %s not recognized\" % name)\n                if self.resolve_entities and key not in xmlEntities:\n                    data = entities[key]\n                else:\n                    data = \"&%s;\" % name\n                yield self.encodeStrict(data)\n\n            else:\n                self.serializeError(token[\"data\"])\n\n    def render(self, treewalker, encoding=None):\n        if encoding:\n            return b\"\".join(list(self.serialize(treewalker, encoding)))\n        else:\n            return \"\".join(list(self.serialize(treewalker)))\n\n    def serializeError(self, data=\"XXX ERROR MESSAGE NEEDED\"):\n        # XXX The idea is to make data mandatory.\n        self.errors.append(data)\n        if self.strict:\n            raise SerializeError", "target": 0}, {"function": "def SerializeError(Exception):\n    \"\"\"Error in serialized tree\"\"\"\n    pass", "target": 0}]}, {"raw_url": "https://github.com/html5lib/html5lib-python/raw/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7/html5lib%2Ftests%2Fserializer-testdata%2Fcore.test", "code": "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test \\\"with\\\" &amp;quot;'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test \\\"with\\\" &quot;\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value escaping\"\n        },\n        {\n            \"expected\": [\n                \"<span title=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo<bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo<bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with <)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo=bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo=bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with =)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo>bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo>bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with >)\"\n        },\n        {\n            \"expected\": [\n                \"<span title='foo\\\"bar'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\\"bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with \\\")\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar&quot;baz\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\\\"baz\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with both \\\" and ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with space)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\tbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\tbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with tab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\nbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\nbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with LF)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\rbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\rbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with CR)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\u000bbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\u000bbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with linetab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\fbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\fbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with form feed)\"\n        },\n        {\n            \"expected\": [\n                \"<img>\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"void element (as EmptyTag token)\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE foo>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"foo\"\n                ]\n            ],\n            \"description\": \"doctype in error\"\n        },\n        {\n            \"expected\": [\n                \"a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"character data\",\n            \"options\": {\n                \"encoding\": \"utf-8\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a<b>c&d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\"\n                ]\n            ],\n            \"description\": \"doctype\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\",\n                    \"http://www.w3.org/TR/html4/strict.dtd\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE without system identifer\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE html SYSTEM \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"html\",\n                    \"\",\n                    \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\"\n                ]\n            ],\n            \"description\": \"IBM DOCTYPE without public identifer\"\n        }\n    ]\n}\n", "code_before": "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test \\\"with\\\" &amp;quot;'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test \\\"with\\\" &quot;\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value escaping\"\n        },\n        {\n            \"expected\": [\n                \"<span title=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo<bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo<bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with <)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo=bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo=bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with =)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo>bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo>bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with >)\"\n        },\n        {\n            \"expected\": [\n                \"<span title='foo\\\"bar'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\\"bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with \\\")\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar&quot;baz\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\\\"baz\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with both \\\" and ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with space)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\tbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\tbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with tab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\nbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\nbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with LF)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\rbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\rbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with CR)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=foo\\u000bbar>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\u000bbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with linetab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\fbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\fbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with form feed)\"\n        },\n        {\n            \"expected\": [\n                \"<img>\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"void element (as EmptyTag token)\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE foo>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"foo\"\n                ]\n            ],\n            \"description\": \"doctype in error\"\n        },\n        {\n            \"expected\": [\n                \"a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"character data\",\n            \"options\": {\n                \"encoding\": \"utf-8\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a<b>c&d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\"\n                ]\n            ],\n            \"description\": \"doctype\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\",\n                    \"http://www.w3.org/TR/html4/strict.dtd\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE without system identifer\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE html SYSTEM \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"html\",\n                    \"\",\n                    \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\"\n                ]\n            ],\n            \"description\": \"IBM DOCTYPE without public identifer\"\n        }\n    ]\n}\n", "patch": "@@ -242,7 +242,7 @@\n         },\n         {\n             \"expected\": [\n-                \"<span title=foo\\u000bbar>\"\n+                \"<span title=\\\"foo\\u000bbar\\\">\"\n             ],\n             \"input\": [\n                 [", "file_path": "files/2017_2/29", "file_language": "test", "file_name": "html5lib/tests/serializer-testdata/core.test", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0}, {"raw_url": "https://github.com/html5lib/html5lib-python/raw/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7/html5lib%2Ftests%2Fserializer-testdata%2Foptions.test", "code": "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test &#39;with&#39; quote_char'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test 'with' quote_char\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_char=\\\"'\\\"\",\n            \"options\": {\n                \"quote_char\": \"'\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<button disabled>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"button\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"disabled\",\n                            \"value\": \"disabled\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values='always'\",\n            \"options\": {\n                \"quote_attr_values\": \"always\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values='always' with irrelevant\",\n            \"options\": {\n                \"quote_attr_values\": \"always\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div class=\\\"foo\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"class\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"non-minimized quote_attr_values='always'\",\n            \"options\": {\n                \"quote_attr_values\": \"always\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div class=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"class\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"non-minimized quote_attr_values='legacy'\",\n            \"options\": {\n                \"quote_attr_values\": \"legacy\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div class=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"class\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"non-minimized quote_attr_values='spec'\",\n            \"options\": {\n                \"quote_attr_values\": \"spec\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<img />\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with non-void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=\\\"\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false with empty value\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<a title=\\\"a&lt;b>c&amp;d\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"a\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"a<b>c&d\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"escape less than signs in attribute values\",\n            \"options\": {\n                \"escape_lt_in_attrs\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\",\n            \"options\": {\n                \"escape_rcdata\": true\n            }\n        }\n    ]\n}", "code_before": "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test &#39;with&#39; quote_char'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test 'with' quote_char\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_char=\\\"'\\\"\",\n            \"options\": {\n                \"quote_char\": \"'\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<button disabled>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"button\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"disabled\",\n                            \"value\": \"disabled\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values=true\",\n            \"options\": {\n                \"quote_attr_values\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values=true with irrelevant\",\n            \"options\": {\n                \"quote_attr_values\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<img />\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with non-void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=\\\"\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false with empty value\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<a title=\\\"a&lt;b>c&amp;d\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"a\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"a<b>c&d\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"escape less than signs in attribute values\",\n            \"options\": {\n                \"escape_lt_in_attrs\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\",\n            \"options\": {\n                \"escape_rcdata\": true\n            }\n        }\n    ]\n}", "patch": "@@ -41,9 +41,9 @@\n                     ]\n                 ]\n             ],\n-            \"description\": \"quote_attr_values=true\",\n+            \"description\": \"quote_attr_values='always'\",\n             \"options\": {\n-                \"quote_attr_values\": true\n+                \"quote_attr_values\": \"always\"\n             }\n         },\n         {\n@@ -64,9 +64,78 @@\n                     ]\n                 ]\n             ],\n-            \"description\": \"quote_attr_values=true with irrelevant\",\n+            \"description\": \"quote_attr_values='always' with irrelevant\",\n             \"options\": {\n-                \"quote_attr_values\": true\n+                \"quote_attr_values\": \"always\"\n+            }\n+        },\n+        {\n+            \"expected\": [\n+                \"<div class=\\\"foo\\\">\"\n+            ],\n+            \"input\": [\n+                [\n+                    \"StartTag\",\n+                    \"http://www.w3.org/1999/xhtml\",\n+                    \"div\",\n+                    [\n+                        {\n+                            \"namespace\": null,\n+                            \"name\": \"class\",\n+                            \"value\": \"foo\"\n+                        }\n+                    ]\n+                ]\n+            ],\n+            \"description\": \"non-minimized quote_attr_values='always'\",\n+            \"options\": {\n+                \"quote_attr_values\": \"always\"\n+            }\n+        },\n+        {\n+            \"expected\": [\n+                \"<div class=foo>\"\n+            ],\n+            \"input\": [\n+                [\n+                    \"StartTag\",\n+                    \"http://www.w3.org/1999/xhtml\",\n+                    \"div\",\n+                    [\n+                        {\n+                            \"namespace\": null,\n+                            \"name\": \"class\",\n+                            \"value\": \"foo\"\n+                        }\n+                    ]\n+                ]\n+            ],\n+            \"description\": \"non-minimized quote_attr_values='legacy'\",\n+            \"options\": {\n+                \"quote_attr_values\": \"legacy\"\n+            }\n+        },\n+        {\n+            \"expected\": [\n+                \"<div class=foo>\"\n+            ],\n+            \"input\": [\n+                [\n+                    \"StartTag\",\n+                    \"http://www.w3.org/1999/xhtml\",\n+                    \"div\",\n+                    [\n+                        {\n+                            \"namespace\": null,\n+                            \"name\": \"class\",\n+                            \"value\": \"foo\"\n+                        }\n+                    ]\n+                ]\n+            ],\n+            \"description\": \"non-minimized quote_attr_values='spec'\",\n+            \"options\": {\n+                \"quote_attr_values\": \"spec\"\n             }\n         },\n         {", "file_path": "files/2017_2/30", "file_language": "test", "file_name": "html5lib/tests/serializer-testdata/options.test", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/html5lib/html5lib-python/raw/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7/html5lib%2Ftests%2Ftest_serializer.py", "code": "from __future__ import absolute_import, division, unicode_literals\n\nimport os\nimport json\n\nimport pytest\n\nfrom .support import get_data_files\n\nfrom html5lib import constants\nfrom html5lib.filters.lint import Filter as Lint\nfrom html5lib.serializer import HTMLSerializer, serialize\nfrom html5lib.treewalkers._base import TreeWalker\n\noptionals_loaded = []\n\ntry:\n    from lxml import etree\n    optionals_loaded.append(\"lxml\")\nexcept ImportError:\n    pass\n\ndefault_namespace = constants.namespaces[\"html\"]\n\n\nclass JsonWalker(TreeWalker):\n    def __iter__(self):\n        for token in self.tree:\n            type = token[0]\n            if type == \"StartTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:4]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:3]\n                yield self.startTag(namespace, name, self._convertAttrib(attrib))\n            elif type == \"EndTag\":\n                if len(token) == 3:\n                    namespace, name = token[1:3]\n                else:\n                    namespace = default_namespace\n                    name = token[1]\n                yield self.endTag(namespace, name)\n            elif type == \"EmptyTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:]\n                for token in self.emptyTag(namespace, name, self._convertAttrib(attrib)):\n                    yield token\n            elif type == \"Comment\":\n                yield self.comment(token[1])\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                for token in self.text(token[1]):\n                    yield token\n            elif type == \"Doctype\":\n                if len(token) == 4:\n                    yield self.doctype(token[1], token[2], token[3])\n                elif len(token) == 3:\n                    yield self.doctype(token[1], token[2])\n                else:\n                    yield self.doctype(token[1])\n            else:\n                raise ValueError(\"Unknown token type: \" + type)\n\n    def _convertAttrib(self, attribs):\n        \"\"\"html5lib tree-walkers use a dict of (namespace, name): value for\n        attributes, but JSON cannot represent this. Convert from the format\n        in the serializer tests (a list of dicts with \"namespace\", \"name\",\n        and \"value\" as keys) to html5lib's tree-walker format.\"\"\"\n        attrs = {}\n        for attrib in attribs:\n            name = (attrib[\"namespace\"], attrib[\"name\"])\n            assert(name not in attrs)\n            attrs[name] = attrib[\"value\"]\n        return attrs\n\n\ndef serialize_html(input, options):\n    options = dict([(str(k), v) for k, v in options.items()])\n    stream = Lint(JsonWalker(input), False)\n    serializer = HTMLSerializer(alphabetical_attributes=True, **options)\n    return serializer.render(stream, options.get(\"encoding\", None))\n\n\ndef runSerializerTest(input, expected, options):\n    encoding = options.get(\"encoding\", None)\n\n    if encoding:\n        expected = list(map(lambda x: x.encode(encoding), expected))\n\n    result = serialize_html(input, options)\n    if len(expected) == 1:\n        assert expected[0] == result, \"Expected:\\n%s\\nActual:\\n%s\\nOptions:\\n%s\" % (expected[0], result, str(options))\n    elif result not in expected:\n        assert False, \"Expected: %s, Received: %s\" % (expected, result)\n\n\ndef throwsWithLatin1(input):\n    with pytest.raises(UnicodeEncodeError):\n        serialize_html(input, {\"encoding\": \"iso-8859-1\"})\n\n\ndef testDoctypeName():\n    throwsWithLatin1([[\"Doctype\", \"\\u0101\"]])\n\n\ndef testDoctypePublicId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"\\u0101\"]])\n\n\ndef testDoctypeSystemId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"potato\", \"\\u0101\"]])\n\n\ndef testCdataCharacters():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"style\", {}], [\"Characters\", \"\\u0101\"]],\n                      [\"<style>&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testCharacters():\n    runSerializerTest([[\"Characters\", \"\\u0101\"]],\n                      [\"&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testStartTagName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\", []]])\n\n\ndef testAttributeName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\", [{\"namespace\": None, \"name\": \"\\u0101\", \"value\": \"potato\"}]]])\n\n\ndef testAttributeValue():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n                        [{\"namespace\": None, \"name\": \"potato\", \"value\": \"\\u0101\"}]]],\n                      [\"<span potato=&amacr;>\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testEndTagName():\n    throwsWithLatin1([[\"EndTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\"]])\n\n\ndef testComment():\n    throwsWithLatin1([[\"Comment\", \"\\u0101\"]])\n\n\n@pytest.mark.parametrize(\"c\", list(\"\\t\\n\\u000C\\x20\\r\\\"'=<>`\"))\ndef testSpecQuoteAttribute(c):\n    input_ = [[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n               [{\"namespace\": None, \"name\": \"foo\", \"value\": c}]]]\n    if c == '\"':\n        output_ = [\"<span foo='%s'>\" % c]\n    else:\n        output_ = ['<span foo=\"%s\">' % c]\n    options_ = {\"quote_attr_values\": \"spec\"}\n    runSerializerTest(input_, output_, options_)\n\n\n@pytest.mark.parametrize(\"c\", list(\"\\t\\n\\u000C\\x20\\r\\\"'=<>`\"\n                                   \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\"\n                                   \"\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\"\n                                   \"\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n                                   \"\\x20\\x2f\\x60\\xa0\\u1680\\u180e\\u180f\\u2000\"\n                                   \"\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\"\n                                   \"\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\"\n                                   \"\\u3000\"))\ndef testLegacyQuoteAttribute(c):\n    input_ = [[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n               [{\"namespace\": None, \"name\": \"foo\", \"value\": c}]]]\n    if c == '\"':\n        output_ = [\"<span foo='%s'>\" % c]\n    else:\n        output_ = ['<span foo=\"%s\">' % c]\n    options_ = {\"quote_attr_values\": \"legacy\"}\n    runSerializerTest(input_, output_, options_)\n\n\n@pytest.fixture\ndef lxml_parser():\n    return etree.XMLParser(resolve_entities=False)\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityReplacement(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>\\u03B2</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityXML(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityNoResolve(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False,\n                                  resolve_entities=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n\n\ndef test_serializer():\n    for filename in get_data_files('serializer-testdata', '*.test', os.path.dirname(__file__)):\n        with open(filename) as fp:\n            tests = json.load(fp)\n            for index, test in enumerate(tests['tests']):\n                yield runSerializerTest, test[\"input\"], test[\"expected\"], test.get(\"options\", {})\n", "code_before": "from __future__ import absolute_import, division, unicode_literals\n\nimport os\nimport json\n\nimport pytest\n\nfrom .support import get_data_files\n\nfrom html5lib import constants\nfrom html5lib.filters.lint import Filter as Lint\nfrom html5lib.serializer import HTMLSerializer, serialize\nfrom html5lib.treewalkers._base import TreeWalker\n\noptionals_loaded = []\n\ntry:\n    from lxml import etree\n    optionals_loaded.append(\"lxml\")\nexcept ImportError:\n    pass\n\ndefault_namespace = constants.namespaces[\"html\"]\n\n\nclass JsonWalker(TreeWalker):\n    def __iter__(self):\n        for token in self.tree:\n            type = token[0]\n            if type == \"StartTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:4]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:3]\n                yield self.startTag(namespace, name, self._convertAttrib(attrib))\n            elif type == \"EndTag\":\n                if len(token) == 3:\n                    namespace, name = token[1:3]\n                else:\n                    namespace = default_namespace\n                    name = token[1]\n                yield self.endTag(namespace, name)\n            elif type == \"EmptyTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:]\n                for token in self.emptyTag(namespace, name, self._convertAttrib(attrib)):\n                    yield token\n            elif type == \"Comment\":\n                yield self.comment(token[1])\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                for token in self.text(token[1]):\n                    yield token\n            elif type == \"Doctype\":\n                if len(token) == 4:\n                    yield self.doctype(token[1], token[2], token[3])\n                elif len(token) == 3:\n                    yield self.doctype(token[1], token[2])\n                else:\n                    yield self.doctype(token[1])\n            else:\n                raise ValueError(\"Unknown token type: \" + type)\n\n    def _convertAttrib(self, attribs):\n        \"\"\"html5lib tree-walkers use a dict of (namespace, name): value for\n        attributes, but JSON cannot represent this. Convert from the format\n        in the serializer tests (a list of dicts with \"namespace\", \"name\",\n        and \"value\" as keys) to html5lib's tree-walker format.\"\"\"\n        attrs = {}\n        for attrib in attribs:\n            name = (attrib[\"namespace\"], attrib[\"name\"])\n            assert(name not in attrs)\n            attrs[name] = attrib[\"value\"]\n        return attrs\n\n\ndef serialize_html(input, options):\n    options = dict([(str(k), v) for k, v in options.items()])\n    stream = Lint(JsonWalker(input), False)\n    serializer = HTMLSerializer(alphabetical_attributes=True, **options)\n    return serializer.render(stream, options.get(\"encoding\", None))\n\n\ndef runSerializerTest(input, expected, options):\n    encoding = options.get(\"encoding\", None)\n\n    if encoding:\n        expected = list(map(lambda x: x.encode(encoding), expected))\n\n    result = serialize_html(input, options)\n    if len(expected) == 1:\n        assert expected[0] == result, \"Expected:\\n%s\\nActual:\\n%s\\nOptions:\\n%s\" % (expected[0], result, str(options))\n    elif result not in expected:\n        assert False, \"Expected: %s, Received: %s\" % (expected, result)\n\n\ndef throwsWithLatin1(input):\n    with pytest.raises(UnicodeEncodeError):\n        serialize_html(input, {\"encoding\": \"iso-8859-1\"})\n\n\ndef testDoctypeName():\n    throwsWithLatin1([[\"Doctype\", \"\\u0101\"]])\n\n\ndef testDoctypePublicId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"\\u0101\"]])\n\n\ndef testDoctypeSystemId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"potato\", \"\\u0101\"]])\n\n\ndef testCdataCharacters():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"style\", {}], [\"Characters\", \"\\u0101\"]],\n                      [\"<style>&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testCharacters():\n    runSerializerTest([[\"Characters\", \"\\u0101\"]],\n                      [\"&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testStartTagName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\", []]])\n\n\ndef testAttributeName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\", [{\"namespace\": None, \"name\": \"\\u0101\", \"value\": \"potato\"}]]])\n\n\ndef testAttributeValue():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n                        [{\"namespace\": None, \"name\": \"potato\", \"value\": \"\\u0101\"}]]],\n                      [\"<span potato=&amacr;>\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testEndTagName():\n    throwsWithLatin1([[\"EndTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\"]])\n\n\ndef testComment():\n    throwsWithLatin1([[\"Comment\", \"\\u0101\"]])\n\n\n@pytest.fixture\ndef lxml_parser():\n    return etree.XMLParser(resolve_entities=False)\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityReplacement(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>\\u03B2</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityXML(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityNoResolve(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False,\n                                  resolve_entities=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n\n\ndef test_serializer():\n    for filename in get_data_files('serializer-testdata', '*.test', os.path.dirname(__file__)):\n        with open(filename) as fp:\n            tests = json.load(fp)\n            for index, test in enumerate(tests['tests']):\n                yield runSerializerTest, test[\"input\"], test[\"expected\"], test.get(\"options\", {})\n", "patch": "@@ -146,6 +146,37 @@ def testComment():\n     throwsWithLatin1([[\"Comment\", \"\\u0101\"]])\n \n \n+@pytest.mark.parametrize(\"c\", list(\"\\t\\n\\u000C\\x20\\r\\\"'=<>`\"))\n+def testSpecQuoteAttribute(c):\n+    input_ = [[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n+               [{\"namespace\": None, \"name\": \"foo\", \"value\": c}]]]\n+    if c == '\"':\n+        output_ = [\"<span foo='%s'>\" % c]\n+    else:\n+        output_ = ['<span foo=\"%s\">' % c]\n+    options_ = {\"quote_attr_values\": \"spec\"}\n+    runSerializerTest(input_, output_, options_)\n+\n+\n+@pytest.mark.parametrize(\"c\", list(\"\\t\\n\\u000C\\x20\\r\\\"'=<>`\"\n+                                   \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\"\n+                                   \"\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\"\n+                                   \"\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n+                                   \"\\x20\\x2f\\x60\\xa0\\u1680\\u180e\\u180f\\u2000\"\n+                                   \"\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\"\n+                                   \"\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\"\n+                                   \"\\u3000\"))\n+def testLegacyQuoteAttribute(c):\n+    input_ = [[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n+               [{\"namespace\": None, \"name\": \"foo\", \"value\": c}]]]\n+    if c == '\"':\n+        output_ = [\"<span foo='%s'>\" % c]\n+    else:\n+        output_ = ['<span foo=\"%s\">' % c]\n+    options_ = {\"quote_attr_values\": \"legacy\"}\n+    runSerializerTest(input_, output_, options_)\n+\n+\n @pytest.fixture\n def lxml_parser():\n     return etree.XMLParser(resolve_entities=False)", "file_path": "files/2017_2/31", "file_language": "py", "file_name": "html5lib/tests/test_serializer.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class JsonWalker(TreeWalker):\n    def __iter__(self):\n        for token in self.tree:\n            type = token[0]\n            if type == \"StartTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:4]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:3]\n                yield self.startTag(namespace, name, self._convertAttrib(attrib))\n            elif type == \"EndTag\":\n                if len(token) == 3:\n                    namespace, name = token[1:3]\n                else:\n                    namespace = default_namespace\n                    name = token[1]\n                yield self.endTag(namespace, name)\n            elif type == \"EmptyTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:]\n                for token in self.emptyTag(namespace, name, self._convertAttrib(attrib)):\n                    yield token\n            elif type == \"Comment\":\n                yield self.comment(token[1])\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                for token in self.text(token[1]):\n                    yield token\n            elif type == \"Doctype\":\n                if len(token) == 4:\n                    yield self.doctype(token[1], token[2], token[3])\n                elif len(token) == 3:\n                    yield self.doctype(token[1], token[2])\n                else:\n                    yield self.doctype(token[1])\n            else:\n                raise ValueError(\"Unknown token type: \" + type)\n\n    def _convertAttrib(self, attribs):\n        \"\"\"html5lib tree-walkers use a dict of (namespace, name): value for\n        attributes, but JSON cannot represent this. Convert from the format\n        in the serializer tests (a list of dicts with \"namespace\", \"name\",\n        and \"value\" as keys) to html5lib's tree-walker format.\"\"\"\n        attrs = {}\n        for attrib in attribs:\n            name = (attrib[\"namespace\"], attrib[\"name\"])\n            assert(name not in attrs)\n            attrs[name] = attrib[\"value\"]\n        return attrs", "target": 0}, {"function": "def serialize_html(input, options):\n    options = dict([(str(k), v) for k, v in options.items()])\n    stream = Lint(JsonWalker(input), False)\n    serializer = HTMLSerializer(alphabetical_attributes=True, **options)\n    return serializer.render(stream, options.get(\"encoding\", None))", "target": 0}, {"function": "def runSerializerTest(input, expected, options):\n    encoding = options.get(\"encoding\", None)\n\n    if encoding:\n        expected = list(map(lambda x: x.encode(encoding), expected))\n\n    result = serialize_html(input, options)\n    if len(expected) == 1:\n        assert expected[0] == result, \"Expected:\\n%s\\nActual:\\n%s\\nOptions:\\n%s\" % (expected[0], result, str(options))\n    elif result not in expected:\n        assert False, \"Expected: %s, Received: %s\" % (expected, result)", "target": 0}, {"function": "def throwsWithLatin1(input):\n    with pytest.raises(UnicodeEncodeError):\n        serialize_html(input, {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testDoctypeName():\n    throwsWithLatin1([[\"Doctype\", \"\\u0101\"]])", "target": 0}, {"function": "def testDoctypePublicId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"\\u0101\"]])", "target": 0}, {"function": "def testDoctypeSystemId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"potato\", \"\\u0101\"]])", "target": 0}, {"function": "def testCdataCharacters():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"style\", {}], [\"Characters\", \"\\u0101\"]],\n                      [\"<style>&amacr;\"], {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testCharacters():\n    runSerializerTest([[\"Characters\", \"\\u0101\"]],\n                      [\"&amacr;\"], {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testStartTagName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\", []]])", "target": 0}, {"function": "def testAttributeName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\", [{\"namespace\": None, \"name\": \"\\u0101\", \"value\": \"potato\"}]]])", "target": 0}, {"function": "def testAttributeValue():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n                        [{\"namespace\": None, \"name\": \"potato\", \"value\": \"\\u0101\"}]]],\n                      [\"<span potato=&amacr;>\"], {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testEndTagName():\n    throwsWithLatin1([[\"EndTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\"]])", "target": 0}, {"function": "def testComment():\n    throwsWithLatin1([[\"Comment\", \"\\u0101\"]])", "target": 0}, {"function": "def test_serializer():\n    for filename in get_data_files('serializer-testdata', '*.test', os.path.dirname(__file__)):\n        with open(filename) as fp:\n            tests = json.load(fp)\n            for index, test in enumerate(tests['tests']):\n                yield runSerializerTest, test[\"input\"], test[\"expected\"], test.get(\"options\", {})", "target": 0}], "function_after": [{"function": "class JsonWalker(TreeWalker):\n    def __iter__(self):\n        for token in self.tree:\n            type = token[0]\n            if type == \"StartTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:4]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:3]\n                yield self.startTag(namespace, name, self._convertAttrib(attrib))\n            elif type == \"EndTag\":\n                if len(token) == 3:\n                    namespace, name = token[1:3]\n                else:\n                    namespace = default_namespace\n                    name = token[1]\n                yield self.endTag(namespace, name)\n            elif type == \"EmptyTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:]\n                for token in self.emptyTag(namespace, name, self._convertAttrib(attrib)):\n                    yield token\n            elif type == \"Comment\":\n                yield self.comment(token[1])\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                for token in self.text(token[1]):\n                    yield token\n            elif type == \"Doctype\":\n                if len(token) == 4:\n                    yield self.doctype(token[1], token[2], token[3])\n                elif len(token) == 3:\n                    yield self.doctype(token[1], token[2])\n                else:\n                    yield self.doctype(token[1])\n            else:\n                raise ValueError(\"Unknown token type: \" + type)\n\n    def _convertAttrib(self, attribs):\n        \"\"\"html5lib tree-walkers use a dict of (namespace, name): value for\n        attributes, but JSON cannot represent this. Convert from the format\n        in the serializer tests (a list of dicts with \"namespace\", \"name\",\n        and \"value\" as keys) to html5lib's tree-walker format.\"\"\"\n        attrs = {}\n        for attrib in attribs:\n            name = (attrib[\"namespace\"], attrib[\"name\"])\n            assert(name not in attrs)\n            attrs[name] = attrib[\"value\"]\n        return attrs", "target": 0}, {"function": "def serialize_html(input, options):\n    options = dict([(str(k), v) for k, v in options.items()])\n    stream = Lint(JsonWalker(input), False)\n    serializer = HTMLSerializer(alphabetical_attributes=True, **options)\n    return serializer.render(stream, options.get(\"encoding\", None))", "target": 0}, {"function": "def runSerializerTest(input, expected, options):\n    encoding = options.get(\"encoding\", None)\n\n    if encoding:\n        expected = list(map(lambda x: x.encode(encoding), expected))\n\n    result = serialize_html(input, options)\n    if len(expected) == 1:\n        assert expected[0] == result, \"Expected:\\n%s\\nActual:\\n%s\\nOptions:\\n%s\" % (expected[0], result, str(options))\n    elif result not in expected:\n        assert False, \"Expected: %s, Received: %s\" % (expected, result)", "target": 0}, {"function": "def throwsWithLatin1(input):\n    with pytest.raises(UnicodeEncodeError):\n        serialize_html(input, {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testDoctypeName():\n    throwsWithLatin1([[\"Doctype\", \"\\u0101\"]])", "target": 0}, {"function": "def testDoctypePublicId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"\\u0101\"]])", "target": 0}, {"function": "def testDoctypeSystemId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"potato\", \"\\u0101\"]])", "target": 0}, {"function": "def testCdataCharacters():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"style\", {}], [\"Characters\", \"\\u0101\"]],\n                      [\"<style>&amacr;\"], {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testCharacters():\n    runSerializerTest([[\"Characters\", \"\\u0101\"]],\n                      [\"&amacr;\"], {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testStartTagName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\", []]])", "target": 0}, {"function": "def testAttributeName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\", [{\"namespace\": None, \"name\": \"\\u0101\", \"value\": \"potato\"}]]])", "target": 0}, {"function": "def testAttributeValue():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n                        [{\"namespace\": None, \"name\": \"potato\", \"value\": \"\\u0101\"}]]],\n                      [\"<span potato=&amacr;>\"], {\"encoding\": \"iso-8859-1\"})", "target": 0}, {"function": "def testEndTagName():\n    throwsWithLatin1([[\"EndTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\"]])", "target": 0}, {"function": "def testComment():\n    throwsWithLatin1([[\"Comment\", \"\\u0101\"]])", "target": 0}, {"function": "def test_serializer():\n    for filename in get_data_files('serializer-testdata', '*.test', os.path.dirname(__file__)):\n        with open(filename) as fp:\n            tests = json.load(fp)\n            for index, test in enumerate(tests['tests']):\n                yield runSerializerTest, test[\"input\"], test[\"expected\"], test.get(\"options\", {})", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
