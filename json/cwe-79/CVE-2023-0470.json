{"index": 10183, "cve_id": "CVE-2023-0470", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Cross-site Scripting (XSS) - Stored in GitHub repository modoboa/modoboa prior to 2.0.4.", "cvss": "5.4", "publish_date": "January 26, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "354ab6884019009249097a7f3a1881d81ecd2fd2", "commit_message": "Merge pull request #2757 from modoboa/fix/xss_issue_domain_form\n\nFixed XSS issue in domain creation form.", "commit_date": "2023-01-24T15:47:35Z", "project": "modoboa/modoboa", "url": "https://api.github.com/repos/modoboa/modoboa/commits/354ab6884019009249097a7f3a1881d81ecd2fd2", "html_url": "https://github.com/modoboa/modoboa/commit/354ab6884019009249097a7f3a1881d81ecd2fd2", "windows_before": [{"commit_id": "df25a9f0f30116384a9752005416b75917e12594", "commit_date": "Mon Jan 23 11:56:27 2023 +0100", "commit_message": "Fixed unit test", "files_name": ["modoboa/limits/tests/test_user_limits.py"]}, {"commit_id": "38d778cc71e370216e067d054ce0169ad83078c8", "commit_date": "Mon Jan 23 11:43:13 2023 +0100", "commit_message": "Force DELETE method for remove permission view.", "files_name": ["modoboa/admin/templates/admin/domain_detail.html", "modoboa/admin/views/identity.py"]}, {"commit_id": "7b7b6bac27556fcec32c18e0d7541a8b5a5ebb99", "commit_date": "Mon Jan 23 11:22:03 2023 +0100", "commit_message": "Fixed issue while displaying confirm message before deletion.", "files_name": ["modoboa/admin/static/admin/js/admin.js"]}, {"commit_id": "c1db80fa696c7b91fbd49aaaa09f9b8d5147bc1b", "commit_date": "Mon Jan 23 11:14:21 2023 +0100", "commit_message": "Fixed XSS issue in domain creation form.", "files_name": ["modoboa/admin/static/admin/js/admin.js", "modoboa/admin/templates/admin/domains.html", "modoboa/static/js/global.js"]}, {"commit_id": "8313dba88f2da6bfa4534d0f29c9814e70fa1720", "commit_date": "Fri Jan 20 16:07:56 2023 +0100", "commit_message": "Merge pull request #2750 from modoboa/dependabot/pip/dnspython-2.3.0", "files_name": ["d4b7bddc50927601bd820d311ab3f577a77c0214 - Fri Jan 20 16:04:08 2023 +0100 : Ensure DELETE method for delete alias view", "modoboa/admin/views/alias.py"]}, {"commit_id": "66e180305020388b7a7ab09ff52e18b12cf8c973", "commit_date": "Thu Jan 19 17:55:46 2023 +0100", "commit_message": "Merge pull request #2753 from modoboa/fix/delete_account_post", "files_name": ["7f0573e917227686d2cc127be1364e2908740807 - Thu Jan 19 16:00:59 2023 +0100 : Enforce POST method for account delete view", "modoboa/admin/views/identity.py"]}, {"commit_id": "8e14ac93669df4f35fcdebd55dc9d2f0fed3ed48", "commit_date": "Thu Jan 19 09:05:00 2023 +0100", "commit_message": "Merge pull request #2752 from modoboa/fix/delete_domain_post", "files_name": ["a6096f5a2c28fcdee6c0894cef89db0bd364f84e - Wed Jan 18 10:45:48 2023 +0100 : Fixed wrong import", "modoboa/admin/views/domain.py"]}, {"commit_id": "23b036c2efe87c9eb2876b49fa9d112ed7a3e4c9", "commit_date": "Wed Jan 18 10:39:26 2023 +0100", "commit_message": "Enforce POST methods for delete domain view.", "files_name": ["modoboa/admin/views/domain.py"]}, {"commit_id": "30e9549c9052235aa7df9f3c1136c60e17d7a795", "commit_date": "Tue Jan 17 10:07:57 2023 +0100", "commit_message": "Update SECURITY.md", "files_name": ["SECURITY.md"]}, {"commit_id": "1a47e095448d5e1f1d9bc2479a5367d2050ffe6c", "commit_date": "Tue Jan 17 09:35:46 2023 +0100", "commit_message": "Create SECURITY.md", "files_name": ["SECURITY.md"]}, {"commit_id": "1899f1fc17d0db36f60c9fbcbe9a7ea00b81a792", "commit_date": "Mon Jan 16 12:01:00 2023 +0000", "commit_message": "Bump dnspython from 2.2.1 to 2.3.0", "files_name": ["requirements.txt"]}, {"commit_id": "7a85b4bd1b8459d4612d6d6a8e6b6c54643ca63e", "commit_date": "Wed Jan 11 13:45:36 2023 +0100", "commit_message": "Merge pull request #2743 from modoboa/dependabot/npm_and_yarn/frontend/json5-1.0.2", "files_name": ["eb6c9c6c4054d26efe346bfaeb4808356959d7ea - Wed Jan 11 13:45:18 2023 +0100 : Merge pull request #2745 from modoboa/dependabot/npm_and_yarn/frontend/luxon-1.28.1", "6596340287dc0650f344c97cb898a6ed35b9080e - Wed Jan 11 11:21:10 2023 +0000 : Bump json5 from 1.0.1 to 1.0.2 in /frontend", "frontend/yarn.lock"]}, {"commit_id": "7669097d9118a862eef9a74810a7db3a4ed1c91b", "commit_date": "Wed Jan 11 11:20:55 2023 +0000", "commit_message": "Bump luxon from 1.28.0 to 1.28.1 in /frontend", "files_name": ["frontend/package.json", "frontend/yarn.lock"]}, {"commit_id": "3714c002c99f6aaa192a1a00eb607c71e05f190d", "commit_date": "Wed Jan 11 12:20:01 2023 +0100", "commit_message": "Merge pull request #2746 from modoboa/dependabot/pip/django-phonenumber-field-phonenumbers--7.0.2", "files_name": ["0006f4a821ecf0033c4733735163e15a8a862b38 - Wed Jan 11 12:18:57 2023 +0100 : Merge pull request #2706 from modoboa/password-recovery-new-admin", "c545489726388e470de4e77a2f9420f4d189b7b7 - Wed Jan 11 11:41:44 2023 +0100 : Fixed unit test", "modoboa/core/api/v2/serializers.py", "modoboa/core/api/v2/views.py"]}, {"commit_id": "b8bb5f35ff5bbe68343ccb686f58a0a02e9fc7f9", "commit_date": "Wed Jan 11 11:03:36 2023 +0100", "commit_message": "Remove useless test", "files_name": ["modoboa/core/api/v2/views.py"]}, {"commit_id": "f91edc84b03b33233a2ddfa391ec7331c68a43d8", "commit_date": "Wed Jan 11 10:55:06 2023 +0100", "commit_message": "Few updates", "files_name": ["frontend/src/views/Login.vue", "frontend/src/views/user/PasswordRecoveryChangeForm.vue", "frontend/src/views/user/PasswordRecoverySmsTotpForm.vue", "modoboa/core/api/v2/serializers.py"]}, {"commit_id": "1307ec41e25587b3703500d3a39a6a0da04ed58f", "commit_date": "Tue Jan 10 16:22:30 2023 +0100", "commit_message": "Merge pull request #2717 from nicosqc/docs-migration-patch", "files_name": ["05a975e10e1d43b3f14b08db0f35907e14bda9c2 - Tue Jan 10 12:00:51 2023 +0000 : Bump django-phonenumber-field[phonenumbers] from 7.0.1 to 7.0.2", "requirements.txt"]}, {"commit_id": "21bf16317c4acece6c498365d1229e4dab65031f", "commit_date": "Tue Jan 3 12:27:06 2023 +0100", "commit_message": "docs: run bash explicitly with sudo -i", "files_name": ["doc/installation.rst", "doc/moving.rst", "doc/upgrade.rst"]}, {"commit_id": "391180090dc9d198b76efb88c257358bdde7de76", "commit_date": "Thu Dec 29 19:03:28 2022 +0100", "commit_message": "Improved UI", "files_name": ["frontend/src/views/user/PasswordRecoveryChangeForm.vue", "frontend/src/views/user/PasswordRecoverySmsTotpForm.vue", "modoboa/core/api/v2/serializers.py", "modoboa/core/api/v2/tests.py", "modoboa/core/api/v2/views.py"]}, {"commit_id": "cc89b23d2e97f4636d8db1f82b222bfd0c9d67ad", "commit_date": "Thu Dec 29 12:38:20 2022 +0100", "commit_message": "Increase coverage", "files_name": ["modoboa/core/api/v2/tests.py"]}, {"commit_id": "c216dd4283d1f29c6f0b02cec097424a008c670b", "commit_date": "Wed Dec 28 18:53:26 2022 +0100", "commit_message": "Merge branch 'master' into password-recovery-new-admin", "files_name": ["01461751531e950936e1891156d1ffe0236caee4 - Wed Dec 28 18:42:58 2022 +0100 : Refactoring, better tests", "frontend/src/api/auth.js", "frontend/src/views/user/PasswordRecoveryChangeForm.vue", "frontend/src/views/user/PasswordRecoveryForm.vue", "frontend/src/views/user/PasswordRecoverySmsTotpForm.vue", "modoboa/core/api/v2/serializers.py", "modoboa/core/api/v2/tests.py", "modoboa/core/api/v2/urls.py", "modoboa/core/api/v2/views.py", "modoboa/lib/tests/__init__.py"]}, {"commit_id": "572e32f868c24c2f08c0d387620c58ef42ebb714", "commit_date": "Wed Dec 7 15:13:44 2022 +0100", "commit_message": "Merge pull request #2707 from modoboa/dependabot/pip/django-phonenumber-field-phonenumbers--7.0.1", "files_name": ["6025bef69ec43891694552aa0f3e45a2f40987a3 - Wed Dec 7 15:13:21 2022 +0100 : Merge pull request #2705 from modoboa/dependabot/pip/testfixtures-7.0.4", "91e779b4e03156be19cb4e5f604ab5b644579ca8 - Tue Dec 6 12:00:36 2022 +0000 : Bump django-phonenumber-field[phonenumbers] from 7.0.0 to 7.0.1", "requirements.txt"]}, {"commit_id": "9ad9bf9ce4940deef0199e814766845ebbae8251", "commit_date": "Mon Dec 5 17:41:41 2022 +0100", "commit_message": "fix spelling", "files_name": ["modoboa/core/api/v2/serializers.py"]}, {"commit_id": "39af0485f80752fc53348b89ae3f6d594e21f96f", "commit_date": "Mon Dec 5 16:57:38 2022 +0100", "commit_message": "Imported to main repo", "files_name": ["doc/configuration.rst", "doc/upgrade.rst", "frontend/src/api/auth.js", "frontend/src/plugins/vee-validate.js", "frontend/src/router/index.js", "frontend/src/views/Login.vue", "frontend/src/views/user/PasswordRecoveryChangeForm.vue", "frontend/src/views/user/PasswordRecoveryForm.vue", "frontend/src/views/user/PasswordRecoverySmsTotpForm.vue", "modoboa/core/api/v2/serializers.py", "modoboa/core/api/v2/tests.py", "modoboa/core/api/v2/urls.py", "modoboa/core/api/v2/views.py", "modoboa/core/commands/templates/settings.py.tpl", "modoboa/core/context_processors.py", "modoboa/core/templates/core/dashboard.html", "modoboa/templates/nlayout.html", "modoboa/templates/registration/password_reset_email_v2.html", "test_project/test_project/settings.py"]}, {"commit_id": "3bc148343a0f6225211a097d1f858c9eb42d328e", "commit_date": "Mon Dec 5 12:00:33 2022 +0000", "commit_message": "Bump testfixtures from 7.0.3 to 7.0.4", "files_name": ["test-requirements.txt"]}, {"commit_id": "e6d9833012930ec472af5f313dce9077adbaa02f", "commit_date": "Wed Nov 16 11:23:46 2022 +0100", "commit_message": "Merge pull request #2695 from modoboa/dependabot/npm_and_yarn/frontend/loader-utils-1.4.2", "files_name": ["8a732bfd39ef7b96a6912ed8b419125d99f00b0e - Wed Nov 16 11:23:32 2022 +0100 : Merge pull request #2663 from modoboa/dependabot/pip/gevent-22.10.2", "d818c369e2d65d845b73813aac9cab94a905a8eb - Wed Nov 16 09:48:44 2022 +0000 : Bump gevent from 22.10.1 to 22.10.2", "requirements.txt"]}, {"commit_id": "dd93bcf0c886b1943fb89c2c11a3a4b9550f69c5", "commit_date": "Wed Nov 16 09:48:34 2022 +0000", "commit_message": "Bump loader-utils from 1.4.1 to 1.4.2 in /frontend", "files_name": ["frontend/yarn.lock"]}, {"commit_id": "0f6794b092645d48f6cd23e679791772ae677553", "commit_date": "Wed Nov 16 10:47:30 2022 +0100", "commit_message": "Removed sub-dependency.", "files_name": ["requirements.txt"]}, {"commit_id": "f7f4e22cfff99eb99b84f93f13418566651f806b", "commit_date": "Wed Nov 16 09:38:48 2022 +0100", "commit_message": "Merge pull request #2692 from modoboa/fix/alarms_performance", "files_name": ["72b76b3d207cf16d3d8abe18d80840972bea4b72 - Tue Nov 15 16:25:21 2022 +0100 : Improved performance of API alarms endpoint.", "frontend/src/api/alarms.js", "frontend/src/components/alarms/AlarmList.vue", "modoboa/admin/api/v2/viewsets.py", "modoboa/admin/models/base.py"]}, {"commit_id": "8e088d3a0e916b0080e9013f73f9188b768c45f6", "commit_date": "Tue Nov 15 10:35:13 2022 +0100", "commit_message": "Merge pull request #2538 from saaditDE/patch-1", "files_name": ["7f320cf9734f91194d91a7fcdb58fc1767327e5a - Tue Nov 15 10:33:05 2022 +0100 : Merge pull request #2691 from modoboa/dependabot/pip/django-reversion-5.0.4", "e71ab498d20360bcdae591418157cc97ce6de983 - Tue Nov 15 10:32:50 2022 +0100 : Merge pull request #2687 from modoboa/dependabot/pip/django-otp-1.1.4", "4b397b1d09846e3a6ab4bf0114affb8457d6a275 - Mon Nov 14 14:53:12 2022 +0000 : Bump django-reversion from 5.0.3 to 5.0.4", "requirements.txt"]}, {"commit_id": "c52a55ba59ab6f6480d9cba01be2fb5e5bdb6746", "commit_date": "Mon Nov 14 14:53:11 2022 +0000", "commit_message": "Bump django-otp from 1.1.3 to 1.1.4", "files_name": ["requirements.txt"]}, {"commit_id": "f964934ef163652911d7e5c2b96f5fb0a262edf8", "commit_date": "Mon Nov 14 15:52:20 2022 +0100", "commit_message": "Merge pull request #2677 from whyscream/replace-py-dateutil-dependency", "files_name": ["0e34568347a2f10ca9ead082100723a6d4d86a7a - Thu Nov 10 09:25:32 2022 +0100 : Merge pull request #2685 from modoboa/dependabot/npm_and_yarn/frontend/loader-utils-1.4.1", "d6489804da3a1f7306d741630ee6cb4cad685cd0 - Wed Nov 9 17:40:35 2022 +0000 : Bump loader-utils from 1.4.0 to 1.4.1 in /frontend", "frontend/yarn.lock"]}, {"commit_id": "f0db03131fd7a6d14b40ab001ea60a1df09a8b95", "commit_date": "Sat Nov 5 00:41:44 2022 +0100", "commit_message": "Run tests with python 3.10", "files_name": [".github/workflows/modoboa.yml", "tox.ini"]}, {"commit_id": "5918cd650e98fdf7b58b66d834eb24150ae2bd6b", "commit_date": "Sat Nov 5 00:40:28 2022 +0100", "commit_message": "Replace py-dateutil with python-dateutil", "files_name": ["requirements.txt"]}, {"commit_id": "aca159a1b433cbd55898eb5081fa751723d46681", "commit_date": "Thu Nov 3 13:48:19 2022 +0100", "commit_message": "Merge pull request #2671 from modoboa/dependabot/pip/testfixtures-7.0.3", "files_name": ["e8136d65be3cdbfbf4f1ecc038c109609bb88398 - Thu Nov 3 12:00:48 2022 +0000 : Bump testfixtures from 7.0.0 to 7.0.3", "test-requirements.txt"]}, {"commit_id": "e97f902857a04371867f25ed397953963b302042", "commit_date": "Fri Oct 28 09:02:22 2022 +0200", "commit_message": "Merge pull request #2661 from Spitfireap/fix-stats-new-interface", "files_name": ["cfe1bb2dd4fee13980863a3cdd487626b68793b9 - Thu Oct 27 21:58:41 2022 +0200 : Removed empty color", "frontend/src/components/tools/TimeSerieChart.vue"]}, {"commit_id": "f309c67f6d5c5ab7631a27101b65f9c9a5a14f14", "commit_date": "Thu Oct 27 16:54:43 2022 +0200", "commit_message": "Updated frontend translation files", "files_name": ["frontend/locale/en/LC_MESSAGES/app.po", "frontend/locale/fr/LC_MESSAGES/app.po", "frontend/src/translations.json"]}, {"commit_id": "e367ed649c8f8adb96de9108e1fcd8f51a00c62b", "commit_date": "Wed Oct 26 16:49:42 2022 +0200", "commit_message": "Merge pull request #2616 from Spitfireap/fixed_dns_status", "files_name": ["d9a71d6cb09ca0335f19face972a311276aa0702 - Wed Oct 26 15:49:19 2022 +0200 : Merge pull request #2643 from modoboa/translations_modoboa-locale-en-lc-messages-django-po--master_sv", "07005d9d41ca2b57cf21a63b6241e34d74136f8a - Wed Oct 26 15:48:31 2022 +0200 : Merge pull request #2642 from modoboa/translations_modoboa-locale-en-lc-messages-djangojs-po--master_sv", "45f217a28df76b1e4f34b3a0e6c0d8a580064d64 - Wed Oct 26 15:43:27 2022 +0200 : Merge pull request #2646 from modoboa/dependabot/pip/gevent-22.10.1", "930289d612b41b65159f5a45a3c8ebf31721c015 - Wed Oct 26 15:43:06 2022 +0200 : Merge pull request #2653 from modoboa/dependabot/pip/djangorestframework-simplejwt-5.2.2", "5c6d3bf1172d3ea2d7d9503f61eff57fc6277c52 - Fri Oct 21 12:00:46 2022 +0000 : Bump djangorestframework-simplejwt from 5.2.1 to 5.2.2", "requirements.txt"]}, {"commit_id": "9a0b93605da86f6f23745dbc7f035913345a068f", "commit_date": "Mon Oct 17 12:01:26 2022 +0000", "commit_message": "Bump gevent from 22.8.0 to 22.10.1", "files_name": ["requirements.txt"]}, {"commit_id": "988115e66abe845c6d14d3e0b1909eb3ae5737a0", "commit_date": "Sat Oct 15 20:21:19 2022 +0000", "commit_message": "Apply translations in sv", "files_name": ["modoboa/locale/sv/LC_MESSAGES/django.po"]}, {"commit_id": "a062a518ba1911422fee73f816cee46e070fd0cf", "commit_date": "Sat Oct 15 20:15:56 2022 +0000", "commit_message": "Apply translations in sv", "files_name": []}], "windows_after": [{"commit_id": "717be47c5f18de37645b870b6ad00fccdd9c2206", "commit_date": "Wed Jan 25 14:09:50 2023 +0100", "commit_message": "Merge pull request #2761 from modoboa/feature/information_page_v2", "files_name": ["5aa1886ad34397761a82adab630161a12470025f - Wed Jan 25 17:20:20 2023 +0100 : Added locking mechanism to logparser command", "modoboa/core/commands/templates/settings.py.tpl", "modoboa/maillog/management/commands/logparser.py", "modoboa/maillog/tests/test_views.py", "test_project/test_project/settings.py"]}, {"commit_id": "718ee4370701c715a62edab3b206ed1b469f73d4", "commit_date": "Wed Jan 25 17:46:28 2023 +0100", "commit_message": "Merge pull request #2762 from modoboa/fix/logparser_lock", "files_name": ["eef9ab72b5305578a3ad7a7463bd284aa645e98b - Thu Jan 26 10:41:15 2023 +0100 : Avoid XSS issues while deleting account and looking at logs.", "modoboa/admin/static/admin/js/admin.js", "modoboa/core/templates/core/logs_page.html", "modoboa/static/js/autocompleter.js"]}, {"commit_id": "003096076e34eecc1b8fda74ee2623318e8c7f40", "commit_date": "Thu Jan 26 20:30:09 2023 +0100", "commit_message": "Merge pull request #2763 from modoboa/fix/xss_fixes", "files_name": ["955b5016fbea3a6ff817fff18fcca611a328969f - Fri Jan 27 15:14:59 2023 +0100 : Api throttling", "modoboa/core/api/v2/views.py", "modoboa/core/commands/templates/settings.py.tpl", "test_project/test_project/settings.py"]}, {"commit_id": "0d2f3d05a36da20b88bc02d30e2d0bfd1722abb8", "commit_date": "Fri Jan 27 16:27:52 2023 +0100", "commit_message": "Added throttling to v2 api routes", "files_name": ["modoboa/admin/api/v2/viewsets.py", "modoboa/core/api/v2/views.py", "modoboa/core/commands/templates/settings.py.tpl", "modoboa/dnstools/api/v2/viewsets.py", "modoboa/lib/throttle.py", "modoboa/maillog/api/v2/viewsets.py", "modoboa/parameters/api/v2/viewsets.py", "modoboa/transport/api/v2/viewsets.py", "test_project/test_project/settings.py"]}, {"commit_id": "2e9f43d3a77d7412974be71c632e257daa36834a", "commit_date": "Fri Jan 27 16:55:45 2023 +0100", "commit_message": "Improved custom throttling", "files_name": ["modoboa/core/commands/templates/settings.py.tpl", "modoboa/lib/throttle.py", "test_project/test_project/settings.py"]}, {"commit_id": "126f3a7ea5ce31844090a586d20e765f9bc269bd", "commit_date": "Fri Jan 27 17:15:42 2023 +0100", "commit_message": "Tried to create test", "files_name": ["modoboa/admin/api/v2/tests.py", "modoboa/lib/throttle.py", "test_project/test_project/settings.py"]}, {"commit_id": "bde07163b0bcbb40eda9955abc7c42d650aa7732", "commit_date": "Fri Jan 27 17:41:32 2023 +0100", "commit_message": "Fixed default throttle class", "files_name": ["modoboa/admin/api/v2/viewsets.py", "modoboa/core/api/v2/views.py", "modoboa/core/commands/templates/settings.py.tpl", "modoboa/dnstools/api/v2/viewsets.py", "modoboa/lib/throttle.py", "modoboa/maillog/api/v2/viewsets.py", "modoboa/parameters/api/v2/viewsets.py", "modoboa/transport/api/v2/viewsets.py", "test_project/test_project/settings.py"]}, {"commit_id": "cbfac68b975b5ee156996e5b4911289ef893bab5", "commit_date": "Fri Jan 27 22:03:09 2023 +0100", "commit_message": "Make throttling more strict", "files_name": ["modoboa/admin/api/v1/viewsets.py", "modoboa/admin/api/v2/viewsets.py", "modoboa/core/api/v1/viewsets.py", "modoboa/core/api/v2/views.py", "modoboa/core/api/v2/viewsets.py", "modoboa/core/commands/templates/settings.py.tpl", "modoboa/dnstools/api/v2/viewsets.py", "modoboa/lib/throttle.py", "modoboa/limits/api/v1/viewsets.py", "modoboa/maillog/api/v2/viewsets.py", "modoboa/parameters/api/v2/viewsets.py", "modoboa/relaydomains/api/v1/viewsets.py", "modoboa/transport/api/v2/viewsets.py"]}, {"commit_id": "033d874b7b80a0bd0e632885d024e190c0b8ce28", "commit_date": "Tue Jan 31 10:33:51 2023 +0100", "commit_message": "Updated documentation", "files_name": ["doc/upgrade.rst", "modoboa/core/commands/templates/settings.py.tpl"]}, {"commit_id": "bee1342f4d9ee2db481b43d971256c65e39bfbcf", "commit_date": "Wed Feb 1 12:16:44 2023 +0100", "commit_message": "fix", "files_name": ["modoboa/admin/api/v2/viewsets.py", "modoboa/core/api/v2/views.py", "modoboa/core/api/v2/viewsets.py", "modoboa/core/commands/templates/settings.py.tpl", "modoboa/lib/throttle.py", "modoboa/relaydomains/api/v1/viewsets.py", "test_project/test_project/settings.py"]}, {"commit_id": "ba8f3c5ec6280c0ea3cacedbb5245438a2810904", "commit_date": "Wed Feb 1 13:53:17 2023 +0100", "commit_message": "fixed typo.", "files_name": ["modoboa/admin/static/admin/js/admin.js"]}, {"commit_id": "b707ae292c9b98dc63e763f1652f9621d72cbcb7", "commit_date": "Wed Feb 1 14:09:28 2023 +0100", "commit_message": "use of url for the throttle scope of ddos", "files_name": ["modoboa/admin/api/v2/tests.py", "modoboa/lib/throttle.py", "modoboa/limits/api/v1/viewsets.py", "modoboa/relaydomains/api/v1/viewsets.py"]}, {"commit_id": "cdcfb8e9791a629de92d64e2e5e891a64b796a01", "commit_date": "Wed Feb 1 15:45:15 2023 +0100", "commit_message": "Improved error messages", "files_name": ["modoboa/admin/models/domain.py", "modoboa/admin/models/mailbox.py"]}, {"commit_id": "f7d3439e60bf130c8825c260bf6914c4f29ac750", "commit_date": "Wed Feb 1 18:51:30 2023 +0100", "commit_message": "Fixed tests", "files_name": ["modoboa/admin/tests/test_import_.py"]}, {"commit_id": "de0f6bf1588be2f2f925a29a305a465840308a82", "commit_date": "Thu Feb 2 09:02:41 2023 +0100", "commit_message": "Merge pull request #2773 from modoboa/fix/better_error_messages", "files_name": ["fdbf30bf4ce4084ee83a077db14faa8642942d13 - Mon Feb 6 10:48:06 2023 +0100 : better throttling, doc updated", "doc/upgrade.rst", "modoboa/core/api/v2/views.py", "modoboa/core/api/v2/viewsets.py", "modoboa/core/commands/templates/settings.py.tpl", "modoboa/lib/throttle.py"]}, {"commit_id": "4c5a9e278d5376abc506fa07d5e653571cb7c0d5", "commit_date": "Mon Feb 6 10:56:12 2023 +0100", "commit_message": "Merge branch 'master' into api-throttling", "files_name": ["5cf2976013790fadbf2b0dd33262cfb07b1c14d0 - Mon Feb 6 11:09:35 2023 +0100 : Added comment", "modoboa/lib/throttle.py"]}, {"commit_id": "8c0fb3d4fff31bc0e2a3162327415d1ae889db82", "commit_date": "Tue Feb 7 12:47:58 2023 +0100", "commit_message": "Better throttle, attempt to have proper UX", "files_name": ["frontend/src/App.vue", "frontend/src/api/repository.js", "modoboa/admin/api/v1/viewsets.py", "modoboa/admin/api/v2/viewsets.py", "modoboa/core/api/v1/viewsets.py", "modoboa/core/api/v2/views.py", "modoboa/core/api/v2/viewsets.py", "modoboa/dnstools/api/v2/viewsets.py", "modoboa/lib/throttle.py", "modoboa/limits/api/v1/viewsets.py", "modoboa/maillog/api/v2/viewsets.py", "modoboa/parameters/api/v2/viewsets.py", "modoboa/relaydomains/api/v1/viewsets.py", "modoboa/transport/api/v2/viewsets.py"]}, {"commit_id": "9713f5fefb388e02c0350cbae53b1e1f8383e900", "commit_date": "Wed Feb 8 12:00:34 2023 +0000", "commit_message": "Bump testfixtures from 7.0.4 to 7.1.0", "files_name": ["test-requirements.txt"]}, {"commit_id": "b79dffada8faf312b775d980c127ac402bc2864e", "commit_date": "Wed Feb 8 14:08:16 2023 +0100", "commit_message": "fixed test", "files_name": ["frontend/src/api/repository.js", "frontend/src/views/Login.vue", "modoboa/admin/api/v1/viewsets.py", "modoboa/admin/api/v2/viewsets.py", "modoboa/core/api/v1/viewsets.py", "modoboa/core/api/v2/viewsets.py", "modoboa/lib/throttle.py", "modoboa/parameters/api/v2/viewsets.py", "modoboa/relaydomains/api/v1/viewsets.py", "test_project/test_project/settings.py"]}, {"commit_id": "650e4d026286c8de8ee9c936b56be5f8a3fa9bc5", "commit_date": "Wed Feb 8 14:33:46 2023 +0100", "commit_message": "Merge pull request #2778 from modoboa/dependabot/pip/testfixtures-7.1.0", "files_name": ["2fd15745c903c81d19bd8bb8c006a0bb8e60420c - Thu Feb 9 10:45:20 2023 +0100 : Fixed UX", "frontend/src/api/repository.js", "frontend/src/views/Login.vue", "frontend/src/views/user/PasswordRecoveryChangeForm.vue", "frontend/src/views/user/PasswordRecoveryForm.vue", "frontend/src/views/user/PasswordRecoverySmsTotpForm.vue"]}, {"commit_id": "d0ec656f091df3b46f071b1649eb278d4e913e7b", "commit_date": "Thu Feb 9 10:52:25 2023 +0100", "commit_message": "fixed typo", "files_name": ["frontend/src/views/user/PasswordRecoveryChangeForm.vue", "frontend/src/views/user/PasswordRecoveryForm.vue", "frontend/src/views/user/PasswordRecoverySmsTotpForm.vue"]}, {"commit_id": "47d17ac6643f870719691073956a26e4be0a4806", "commit_date": "Fri Feb 10 18:51:30 2023 +0100", "commit_message": "Merge pull request #2767 from modoboa/api-throttling", "files_name": ["a08bf131710e983188d25024287a4bb80e26e729 - Fri Feb 10 18:58:18 2023 +0100 : Fixed formating issues.", "modoboa/lib/throttle.py", "modoboa/limits/api/v1/viewsets.py"]}, {"commit_id": "4f709852e60ebaae9828450ef351777cafe27a07", "commit_date": "Sat Feb 11 16:10:55 2023 +0100", "commit_message": "Updated doc", "files_name": ["doc/upgrade.rst"]}, {"commit_id": "5e7087c3351b88af816ef41a99e7ccc045fe7185", "commit_date": "Sat Feb 11 16:36:03 2023 +0100", "commit_message": "fix documentation formating, use of a symbolic link for frontend deployment", "files_name": ["doc/rest_api.rst", "doc/upgrade.rst", "modoboa/core/commands/deploy.py"]}, {"commit_id": "30a8a59906ee727c3e99322f7aeaf280a211bafa", "commit_date": "Sat Feb 11 16:41:44 2023 +0100", "commit_message": "Fixed default new-admin url", "files_name": ["modoboa/core/commands/templates/settings.py.tpl", "modoboa/core/context_processors.py", "test_project/test_project/settings.py"]}, {"commit_id": "39ce201984bbbdc647301156457635fa3fec09c4", "commit_date": "Wed Feb 15 18:04:04 2023 +0100", "commit_message": "Do not export internal aliases", "files_name": ["modoboa/admin/management/commands/subcommands/_export.py"]}, {"commit_id": "0f8105985b89f626bb43e6f0fa27db51d184a807", "commit_date": "Thu Feb 16 14:49:47 2023 +0100", "commit_message": "removed symbolic link use", "files_name": ["doc/upgrade.rst", "modoboa/core/commands/deploy.py"]}, {"commit_id": "3145f10bd4e4e8826268eec3ed47bdf1990d0254", "commit_date": "Thu Feb 16 15:31:42 2023 +0100", "commit_message": "Make the new admin available with docker compose", "files_name": ["Dockerfile.dev", "doc/contributing/getting_started.rst", "docker-compose.yml", "frontend/vue.config.js"]}, {"commit_id": "6197543bd3554e7edca7e77ca9a62da1d2d49e3e", "commit_date": "Thu Feb 16 15:54:20 2023 +0100", "commit_message": "New docker directory", "files_name": ["docker/Dockerfile.admin.dev", "docker/Dockerfile.dev"]}], "parents": [{"commit_id_before": "883cb4c7607b08a660afb911f507b099053797ec", "url_before": "https://api.github.com/repos/modoboa/modoboa/commits/883cb4c7607b08a660afb911f507b099053797ec", "html_url_before": "https://github.com/modoboa/modoboa/commit/883cb4c7607b08a660afb911f507b099053797ec"}, {"commit_id_before": "7b7b6bac27556fcec32c18e0d7541a8b5a5ebb99", "url_before": "https://api.github.com/repos/modoboa/modoboa/commits/7b7b6bac27556fcec32c18e0d7541a8b5a5ebb99", "html_url_before": "https://github.com/modoboa/modoboa/commit/7b7b6bac27556fcec32c18e0d7541a8b5a5ebb99"}], "details": [{"raw_url": "https://github.com/modoboa/modoboa/raw/354ab6884019009249097a7f3a1881d81ecd2fd2/modoboa%2Fadmin%2Fstatic%2Fadmin%2Fjs%2Fadmin.js", "code": "/**\n * Creates an instance of Admin.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class contains utility methods used by the admin\n * application.\n */\n\n/* global $ gettext Listing */\n\nvar Admin = function(options) {\n    Listing.call(this, options);\n};\n\nAdmin.prototype = {\n    defaults: {\n        deflocation: \"list/\",\n        squery: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.list_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n    },\n\n    /**\n     * Callback used when the initial content of the listing is\n     * received.\n     *\n     * @this Admin\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if (data.rows) {\n            $(\"#objects_table tbody\").html(data.rows);\n        } else {\n            $(\"#objects_table tbody\").html(\"\");\n        }\n        this.update_listing(data);\n        if (data.length === 0) {\n            this.get_load_page_args();\n            this.end_of_list_reached();\n        }\n    },\n\n    /**\n     * Children must override this method.\n     */\n    listen: function() {\n    },\n\n    /**\n     * Load a new page using an AJAX request.\n     *\n     * @this Admin\n     * @param {Object} e - event object\n     */\n    page_loader: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        if ($link.hasClass(\"navigation\")) {\n            $(\".sidebar li.active\").removeClass(\"active\");\n            $link.parent().addClass(\"active\");\n        }\n        this.navobj.baseurl($link.attr(\"href\")).update();\n    },\n\n    importform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            if ($(\"#id_sourcefile\").val() === \"\") {\n                return;\n            }\n            $(\"#import_status\").css(\"display\", \"block\");\n            $(\"#import_result\").html(\"\").removeClass(\"alert alert-danger\");\n            $(\"#importform\").submit();\n        });\n    },\n\n    importdone: function(status, msg) {\n        $(\"#import_status\").css(\"display\", \"none\");\n        if (status === \"ok\") {\n            $(\"#modalbox\").modal('hide');\n            this.reload_listing(msg);\n        } else {\n            $(\"#import_result\").addClass(\"alert alert-danger\");\n            $(\"#import_result\").html(msg);\n            this.importform_cb();\n        }\n    },\n\n    exportform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            $(\"#exportform\").submit();\n            $(\"#modalbox\").modal('hide');\n        });\n    },\n\n    reload_listing: function(data) {\n        this.navobj.update(true);\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    }\n};\n\nAdmin.prototype = $.extend({}, Listing.prototype, Admin.prototype);\n\n/**\n * Creates an instance of Domains.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to domains management.\n */\nvar Domains = function(options) {\n    Admin.call(this, options);\n};\n\nDomains.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"domfilter\", \"srvfilter\");\n        this.options.eor_message = gettext(\"No more domain to show\");\n        this.register_tag_handler(\"dom\");\n        this.register_tag_handler(\"srv\", this.srv_tag_handler);\n    },\n\n    /**\n     * Custom callbacks declaration.\n     */\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n    },\n\n    /**\n     * Initialize the domain links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_domain_links: function(data) {\n        var deloptions = (data.handle_mailboxes) ?\n            {keepdir: gettext(\"Do not delete domain directory\")} : {};\n        var warnmsg = (data.auto_account_removal && data.auto_account_removal === \"yes\")\n            ? gettext(\"This operation will remove ALL data associated to this domain.\")\n            : gettext(\"This operation will remove all data associated to this domain, excepting accounts.\");\n\n        $(\"a[name=deldomain]\").confirm({\n            question: function() { return htmlEncode(this.$element.attr('title')); },\n            method: \"POST\",\n            warning: warnmsg,\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domain_listing_refresh');\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"domain\";\n            this.options.eor_message = gettext(\"No more domain to show\");\n        } else if (this.navobj.getbaseurl() === \"quota\") {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        } else {\n            args.objtype = \"log\";\n            this.options.eor_message = gettext(\"No more log to show\");\n        }\n        return args;\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"domains\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_domain_links(data);\n    },\n\n    srv_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined && $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"domfilter\", \"relaydomain\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=dom]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"relaydomain\", \"dom\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_domain_links(data);\n    },\n\n    change_inputs_state: function(value) {\n        $(\"#id_dom_admin_username\").attr(\"disabled\", value);\n        $(\"input[name=with_mailbox]\").attr(\"disabled\", value);\n        $(\"input[name=create_aliases]\").attr(\"disabled\", value);\n    },\n\n    create_dom_admin_changed: function(e) {\n        var $target = $(e.target);\n        this.change_inputs_state(($target.val() === \"True\") ? false : true);\n    },\n\n    withMailboxChanged: function(e) {\n        var $target = $(e.target);\n        $(\"input[name=create_aliases]\").attr(\n            \"disabled\", $target.val() === \"False\");\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    toggleDKIMFields: function (value) {\n        if (value) {\n            $('#id_dkim_key_selector').parents(\".form-group\").show();\n            $('#id_dkim_key_length').parents(\".form-group\").show();\n        } else {\n            $('#id_dkim_key_selector').parents(\".form-group\").hide();\n            $('#id_dkim_key_length').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Initialize the main form contained in the domain edition modal.\n     *\n     * @this Domains\n     */\n    generalform_init: function() {\n        $('input:text:visible:first').focus();\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $('#id_enable_dkim').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.toggleDKIMFields($this.prop('checked'));\n        }, this));\n        this.toggleDKIMFields($('#id_enable_dkim').prop('checked'));\n    },\n\n    optionsform_init: function() {\n        $(\"input[name=create_dom_admin]\").click(\n            $.proxy(this.create_dom_admin_changed, this));\n        $(\"input[name=with_mailbox]\").click(\n            $.proxy(this.withMailboxChanged, this));\n        this.change_inputs_state(\n            $(\"input[name=create_dom_admin]:checked\").val() === \"True\" ? false : true\n        );\n        this.optionsform_prefill();\n    },\n\n    optionsform_prefill: function() {\n        var $span = $(\"#id_dom_admin_username\").next(\"span\");\n        $span.html(\"@\" + htmlEncode($(\"#id_name\").val()));\n    },\n\n    domadminsform_init: function() {\n        $(\"a[name=removeperm]\").click(function(e) {\n            var $tr = $(this).parents('tr');\n            simple_ajax_request.apply(this, [e, {\n                ok_cb: function(resp) {\n                    $tr.remove();\n                    if (!$(\"#domadmins\").find(\"tr\").length) {\n                        $(\"#admins\").html('<div class=\"alert alert-info\">'\n                            + gettext(\"No domain administrator defined\") + \"</div>\");\n                    }\n                }\n            }]);\n        });\n    },\n\n    newdomain_cb: function() {\n        this.generalform_init();\n        this.optionsform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"domform\",\n            transition_callbacks: {\n                \"options\": this.optionsform_prefill\n            },\n            error_callbacks: {\n                \"options\": $.proxy(this.optionsform_init, this)\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domwizard_init');\n    },\n\n    domainform_cb: function() {\n        this.generalform_init();\n        this.domadminsform_init();\n        $(\".submit\").one('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"domform\",\n                error_cb: $.proxy(this.domainform_cb, this),\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n        $(document).trigger('domform_init');\n    }\n};\n\nDomains.prototype = $.extend({}, Admin.prototype, Domains.prototype);\n\n/**\n * Creates an instance of Identities.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to identities management.\n */\nvar Identities = function(options) {\n    Admin.call(this, options);\n};\n\nIdentities.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"idtfilter\", \"grpfilter\");\n        this.options.eor_message = gettext(\"No more identity to show\");\n        this.domain_list = [];\n        this.register_tag_handler(\"idt\");\n        this.register_tag_handler(\"grp\", this.grp_tag_handler);\n    },\n\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n        $(document).on(\"click\", \"a.ajaxcall\", $.proxy(this.send_call, this));\n    },\n\n    /**\n     * Send an ajax call.\n     */\n    send_call: function(evt) {\n        var $link = get_target(evt, \"a\");\n        var $this = this;\n        var method = $link.attr(\"data-call_method\");\n\n        if (method === undefined) {\n            method = \"GET\";\n        }\n        evt.preventDefault();\n        $.ajax({\n            url: $link.attr(\"href\"),\n            type: method,\n            dataType: \"json\"\n        }).done(function(data) {\n            $this.reload_listing(data.respmsg);\n        });\n    },\n\n    /**\n     * Initialize the links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_identity_links: function(data) {\n        var deloptions = {};\n\n        if (data.handle_mailboxes) {\n            deloptions = {keepdir: gettext(\"Do not delete mailbox directory\")};\n        }\n\n        $(\"a[name=delaccount]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"POST\",\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(\"a[name=delalias]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"DELETE\",\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"identity\";\n            this.options.eor_message = gettext(\"No more identity to show\");\n        } else {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        }\n        return args;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_identity_links(data);\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"identities\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_identity_links(data);\n    },\n\n    grp_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined &&\n            $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"idtfilter\", \"account\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=idt]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"account\", \"idt\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Retrieve a list of domain from the server.\n     *\n     * @this Identities\n     * @return {Array} a list of domain names\n     */\n    get_domain_list: function() {\n        if (!this.domain_list.length) {\n            $.ajax({\n                url: this.options.domain_list_url,\n                dataType: \"json\",\n                async: false\n            }).done($.proxy(function(data) {\n                this.domain_list = data;\n            }, this));\n        }\n        return this.domain_list;\n    },\n\n    simpleuser_mode: function() {\n        var $username = $('#id_username');\n        var $email = $('#id_email');\n\n        $username.change(function (evt) {\n            $email.val($(this).val());\n            $email.change();\n        });\n        $username.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#id_email\").addClass(\"disabled\")\n            .attr(\"readonly\", \"\")\n            .autocompleter(\"unbind\");\n        this.toggle_master_user();\n    },\n\n    normal_mode: function(group) {\n        $(\"#id_email\").removeClass(\"disabled\")\n            .attr(\"readonly\", null)\n            .autocompleter(\"listen\");\n        this.toggle_master_user(group);\n    },\n\n    /**\n     * Hide or show the master user checkbox according to desired role.\n     *\n     * @param {string} group - The desired role (or group)\n     */\n    toggle_master_user: function(group) {\n        var $target = $(\"#id_master_user\").parents(\".form-group\");\n        if (group !== \"SuperAdmins\") {\n            $target.hide();\n        } else {\n            $target.show();\n        }\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    togglePasswordInputs: function(value) {\n        if (value) {\n            $('#id_password1').parents(\".form-group\").show();\n            $('#id_password2').parents(\".form-group\").show();\n        } else {\n            $('#id_password1').parents(\".form-group\").hide();\n            $('#id_password2').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Callback to watch for username change.\n     *\n     */\n    emailChanged: function(event) {\n        var $target = get_target(event);\n        var $username = $('#id_username');\n\n        if ($target.val() !== this.originalEmail) {\n            $('#id_create_alias_with_old_address').parents(\".form-group\").show();\n        }\n        if ($username.val() !== $target.val()) {\n            $username.val($target.val());\n        }\n    },\n\n    generalform_init: function(notrigger) {\n        var $role = $('#id_role');\n\n        $role.change($.proxy(function(e) {\n            var $this = $(e.target);\n            var value = $this.val();\n            var email = $('#id_email').val();\n\n            if (value === 'SimpleUsers' || email !== '') {\n                this.simpleuser_mode();\n            } else {\n                this.normal_mode(value);\n            }\n        }, this));\n        $('#id_random_password').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.togglePasswordInputs(!$this.prop('checked'));\n        }, this));\n        this.toggle_master_user($role.val());\n        $('#id_create_alias_with_old_address').parents('.form-group').hide();\n        if (notrigger !== undefined && notrigger) {\n            return;\n        }\n        $role.trigger(\"change\");\n    },\n\n    mailform_init: function() {\n        var $email = $('#id_email');\n\n        this.originalEmail = $email.val();\n        $email.change($.proxy(this.emailChanged, this));\n        $(\"#id_aliases\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#original_senderaddress\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $email.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        if ($(\"#id_role\").length) {\n            $(\"#id_role\").trigger(\"change\");\n        } else {\n            this.simpleuser_mode();\n        }\n        $(\"#id_domains\").autocompleter({\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_domains\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        activate_widget.call($(\"#id_quota_act\"));\n    },\n\n    accountform_init: function() {\n        this.generalform_init(true);\n        this.mailform_init();\n    },\n\n    mailform_prefill: function() {\n        var $role = $(\"#id_role\");\n        if (!$role.length || $role.val() === \"\" || $role.val() === \"SimpleUsers\") {\n            $(\"#id_email\").val($(\"#id_username\").val());\n        }\n    },\n\n    newaccount_cb: function() {\n        this.accountform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"newaccount_form\",\n            transition_callbacks: {\n                mail: this.mailform_prefill\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    editaccount_cb: function() {\n        this.accountform_init();\n        $('.submit').on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"accountform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    },\n\n    aliasform_cb: function() {\n        $(\"#id_random_address\").click(function(evt) {\n            if ($(this).prop(\"checked\")) {\n                $(\"#id_address\").parents(\".form-group\").hide();\n                $(\"#id_domain\").parents(\".form-group\").show();\n            } else {\n                $(\"#id_address\").parents(\".form-group\").show();\n                $(\"#id_domain\").parents(\".form-group\").hide();\n            }\n        });\n        $(\"#id_address\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_recipients\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#id_expire_at\").datetimepicker({\n            format: 'YYYY-MM-DD HH:mm:ss'\n        });\n        $(\".submit\").on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"aliasform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    }\n\n};\n\nIdentities.prototype = $.extend({}, Admin.prototype, Identities.prototype);\n", "code_before": "/**\n * Creates an instance of Admin.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class contains utility methods used by the admin\n * application.\n */\n\n/* global $ gettext Listing */\n\nvar Admin = function(options) {\n    Listing.call(this, options);\n};\n\nAdmin.prototype = {\n    defaults: {\n        deflocation: \"list/\",\n        squery: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.list_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n    },\n\n    /**\n     * Callback used when the initial content of the listing is\n     * received.\n     *\n     * @this Admin\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if (data.rows) {\n            $(\"#objects_table tbody\").html(data.rows);\n        } else {\n            $(\"#objects_table tbody\").html(\"\");\n        }\n        this.update_listing(data);\n        if (data.length === 0) {\n            this.get_load_page_args();\n            this.end_of_list_reached();\n        }\n    },\n\n    /**\n     * Children must override this method.\n     */\n    listen: function() {\n    },\n\n    /**\n     * Load a new page using an AJAX request.\n     *\n     * @this Admin\n     * @param {Object} e - event object\n     */\n    page_loader: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        if ($link.hasClass(\"navigation\")) {\n            $(\".sidebar li.active\").removeClass(\"active\");\n            $link.parent().addClass(\"active\");\n        }\n        this.navobj.baseurl($link.attr(\"href\")).update();\n    },\n\n    importform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            if ($(\"#id_sourcefile\").val() === \"\") {\n                return;\n            }\n            $(\"#import_status\").css(\"display\", \"block\");\n            $(\"#import_result\").html(\"\").removeClass(\"alert alert-danger\");\n            $(\"#importform\").submit();\n        });\n    },\n\n    importdone: function(status, msg) {\n        $(\"#import_status\").css(\"display\", \"none\");\n        if (status === \"ok\") {\n            $(\"#modalbox\").modal('hide');\n            this.reload_listing(msg);\n        } else {\n            $(\"#import_result\").addClass(\"alert alert-danger\");\n            $(\"#import_result\").html(msg);\n            this.importform_cb();\n        }\n    },\n\n    exportform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            $(\"#exportform\").submit();\n            $(\"#modalbox\").modal('hide');\n        });\n    },\n\n    reload_listing: function(data) {\n        this.navobj.update(true);\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    }\n};\n\nAdmin.prototype = $.extend({}, Listing.prototype, Admin.prototype);\n\n/**\n * Creates an instance of Domains.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to domains management.\n */\nvar Domains = function(options) {\n    Admin.call(this, options);\n};\n\nDomains.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"domfilter\", \"srvfilter\");\n        this.options.eor_message = gettext(\"No more domain to show\");\n        this.register_tag_handler(\"dom\");\n        this.register_tag_handler(\"srv\", this.srv_tag_handler);\n    },\n\n    /**\n     * Custom callbacks declaration.\n     */\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n    },\n\n    /**\n     * Initialize the domain links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_domain_links: function(data) {\n        var deloptions = (data.handle_mailboxes) ?\n            {keepdir: gettext(\"Do not delete domain directory\")} : {};\n        var warnmsg = (data.auto_account_removal && data.auto_account_removal === \"yes\")\n            ? gettext(\"This operation will remove ALL data associated to this domain.\")\n            : gettext(\"This operation will remove all data associated to this domain, excepting accounts.\");\n\n        $(\"a[name=deldomain]\").confirm({\n            question: function() { return htmlEncode(this.$element.attr('title')); },\n            method: \"POST\",\n            warning: warnmsg,\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domain_listing_refresh');\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"domain\";\n            this.options.eor_message = gettext(\"No more domain to show\");\n        } else if (this.navobj.getbaseurl() === \"quota\") {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        } else {\n            args.objtype = \"log\";\n            this.options.eor_message = gettext(\"No more log to show\");\n        }\n        return args;\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"domains\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_domain_links(data);\n    },\n\n    srv_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined && $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"domfilter\", \"relaydomain\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=dom]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"relaydomain\", \"dom\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_domain_links(data);\n    },\n\n    change_inputs_state: function(value) {\n        $(\"#id_dom_admin_username\").attr(\"disabled\", value);\n        $(\"input[name=with_mailbox]\").attr(\"disabled\", value);\n        $(\"input[name=create_aliases]\").attr(\"disabled\", value);\n    },\n\n    create_dom_admin_changed: function(e) {\n        var $target = $(e.target);\n        this.change_inputs_state(($target.val() === \"True\") ? false : true);\n    },\n\n    withMailboxChanged: function(e) {\n        var $target = $(e.target);\n        $(\"input[name=create_aliases]\").attr(\n            \"disabled\", $target.val() === \"False\");\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    toggleDKIMFields: function (value) {\n        if (value) {\n            $('#id_dkim_key_selector').parents(\".form-group\").show();\n            $('#id_dkim_key_length').parents(\".form-group\").show();\n        } else {\n            $('#id_dkim_key_selector').parents(\".form-group\").hide();\n            $('#id_dkim_key_length').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Initialize the main form contained in the domain edition modal.\n     *\n     * @this Domains\n     */\n    generalform_init: function() {\n        $('input:text:visible:first').focus();\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $('#id_enable_dkim').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.toggleDKIMFields($this.prop('checked'));\n        }, this));\n        this.toggleDKIMFields($('#id_enable_dkim').prop('checked'));\n    },\n\n    optionsform_init: function() {\n        $(\"input[name=create_dom_admin]\").click(\n            $.proxy(this.create_dom_admin_changed, this));\n        $(\"input[name=with_mailbox]\").click(\n            $.proxy(this.withMailboxChanged, this));\n        this.change_inputs_state(\n            $(\"input[name=create_dom_admin]:checked\").val() === \"True\" ? false : true\n        );\n        this.optionsform_prefill();\n    },\n\n    optionsform_prefill: function() {\n        var $span = $(\"#id_dom_admin_username\").next(\"span\");\n        $span.html(\"@\" + htmlEncode($(\"#id_name\").val()));\n    },\n\n    domadminsform_init: function() {\n        $(\"a[name=removeperm]\").click(function(e) {\n            var $tr = $(this).parents('tr');\n            simple_ajax_request.apply(this, [e, {\n                ok_cb: function(resp) {\n                    $tr.remove();\n                    if (!$(\"#domadmins\").find(\"tr\").length) {\n                        $(\"#admins\").html('<div class=\"alert alert-info\">'\n                            + gettext(\"No domain administrator defined\") + \"</div>\");\n                    }\n                }\n            }]);\n        });\n    },\n\n    newdomain_cb: function() {\n        this.generalform_init();\n        this.optionsform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"domform\",\n            transition_callbacks: {\n                \"options\": this.optionsform_prefill\n            },\n            error_callbacks: {\n                \"options\": $.proxy(this.optionsform_init, this)\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domwizard_init');\n    },\n\n    domainform_cb: function() {\n        this.generalform_init();\n        this.domadminsform_init();\n        $(\".submit\").one('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"domform\",\n                error_cb: $.proxy(this.domainform_cb, this),\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n        $(document).trigger('domform_init');\n    }\n};\n\nDomains.prototype = $.extend({}, Admin.prototype, Domains.prototype);\n\n/**\n * Creates an instance of Identities.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to identities management.\n */\nvar Identities = function(options) {\n    Admin.call(this, options);\n};\n\nIdentities.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"idtfilter\", \"grpfilter\");\n        this.options.eor_message = gettext(\"No more identity to show\");\n        this.domain_list = [];\n        this.register_tag_handler(\"idt\");\n        this.register_tag_handler(\"grp\", this.grp_tag_handler);\n    },\n\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n        $(document).on(\"click\", \"a.ajaxcall\", $.proxy(this.send_call, this));\n    },\n\n    /**\n     * Send an ajax call.\n     */\n    send_call: function(evt) {\n        var $link = get_target(evt, \"a\");\n        var $this = this;\n        var method = $link.attr(\"data-call_method\");\n\n        if (method === undefined) {\n            method = \"GET\";\n        }\n        evt.preventDefault();\n        $.ajax({\n            url: $link.attr(\"href\"),\n            type: method,\n            dataType: \"json\"\n        }).done(function(data) {\n            $this.reload_listing(data.respmsg);\n        });\n    },\n\n    /**\n     * Initialize the links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_identity_links: function(data) {\n        var deloptions = {};\n\n        if (data.handle_mailboxes) {\n            deloptions = {keepdir: gettext(\"Do not delete mailbox directory\")};\n        }\n\n        $(\"a[name=delaccount]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"POST\",\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(\"a[name=delalias]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"DELETE\",\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"identity\";\n            this.options.eor_message = gettext(\"No more identity to show\");\n        } else {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        }\n        return args;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_identity_links(data);\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"identities\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_identity_links(data);\n    },\n\n    grp_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined &&\n            $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"idtfilter\", \"account\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=idt]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"account\", \"idt\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Retrieve a list of domain from the server.\n     *\n     * @this Identities\n     * @return {Array} a list of domain names\n     */\n    get_domain_list: function() {\n        if (!this.domain_list.length) {\n            $.ajax({\n                url: this.options.domain_list_url,\n                dataType: \"json\",\n                async: false\n            }).done($.proxy(function(data) {\n                this.domain_list = data;\n            }, this));\n        }\n        return this.domain_list;\n    },\n\n    simpleuser_mode: function() {\n        var $username = $('#id_username');\n        var $email = $('#id_email');\n\n        $username.change(function (evt) {\n            $email.val($(this).val());\n            $email.change();\n        });\n        $username.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#id_email\").addClass(\"disabled\")\n            .attr(\"readonly\", \"\")\n            .autocompleter(\"unbind\");\n        this.toggle_master_user();\n    },\n\n    normal_mode: function(group) {\n        $(\"#id_email\").removeClass(\"disabled\")\n            .attr(\"readonly\", null)\n            .autocompleter(\"listen\");\n        this.toggle_master_user(group);\n    },\n\n    /**\n     * Hide or show the master user checkbox according to desired role.\n     *\n     * @param {string} group - The desired role (or group)\n     */\n    toggle_master_user: function(group) {\n        var $target = $(\"#id_master_user\").parents(\".form-group\");\n        if (group !== \"SuperAdmins\") {\n            $target.hide();\n        } else {\n            $target.show();\n        }\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    togglePasswordInputs: function(value) {\n        if (value) {\n            $('#id_password1').parents(\".form-group\").show();\n            $('#id_password2').parents(\".form-group\").show();\n        } else {\n            $('#id_password1').parents(\".form-group\").hide();\n            $('#id_password2').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Callback to watch for username change.\n     *\n     */\n    emailChanged: function(event) {\n        var $target = get_target(event);\n        var $username = $('#id_username');\n\n        if ($target.val() !== this.originalEmail) {\n            $('#id_create_alias_with_old_address').parents(\".form-group\").show();\n        }\n        if ($username.val() !== $target.val()) {\n            $username.val($target.val());\n        }\n    },\n\n    generalform_init: function(notrigger) {\n        var $role = $('#id_role');\n\n        $role.change($.proxy(function(e) {\n            var $this = $(e.target);\n            var value = $this.val();\n            var email = $('#id_email').val();\n\n            if (value === 'SimpleUsers' || email !== '') {\n                this.simpleuser_mode();\n            } else {\n                this.normal_mode(value);\n            }\n        }, this));\n        $('#id_random_password').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.togglePasswordInputs(!$this.prop('checked'));\n        }, this));\n        this.toggle_master_user($role.val());\n        $('#id_create_alias_with_old_address').parents('.form-group').hide();\n        if (notrigger !== undefined && notrigger) {\n            return;\n        }\n        $role.trigger(\"change\");\n    },\n\n    mailform_init: function() {\n        var $email = $('#id_email');\n\n        this.originalEmail = $email.val();\n        $email.change($.proxy(this.emailChanged, this));\n        $(\"#id_aliases\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#original_senderaddress\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $email.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        if ($(\"#id_role\").length) {\n            $(\"#id_role\").trigger(\"change\");\n        } else {\n            this.simpleuser_mode();\n        }\n        $(\"#id_domains\").autocompleter({\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_domains\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        activate_widget.call($(\"#id_quota_act\"));\n    },\n\n    accountform_init: function() {\n        this.generalform_init(true);\n        this.mailform_init();\n    },\n\n    mailform_prefill: function() {\n        var $role = $(\"#id_role\");\n        if (!$role.length || $role.val() === \"\" || $role.val() === \"SimpleUsers\") {\n            $(\"#id_email\").val($(\"#id_username\").val());\n        }\n    },\n\n    newaccount_cb: function() {\n        this.accountform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"newaccount_form\",\n            transition_callbacks: {\n                mail: this.mailform_prefill\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    editaccount_cb: function() {\n        this.accountform_init();\n        $('.submit').on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"accountform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    },\n\n    aliasform_cb: function() {\n        $(\"#id_random_address\").click(function(evt) {\n            if ($(this).prop(\"checked\")) {\n                $(\"#id_address\").parents(\".form-group\").hide();\n                $(\"#id_domain\").parents(\".form-group\").show();\n            } else {\n                $(\"#id_address\").parents(\".form-group\").show();\n                $(\"#id_domain\").parents(\".form-group\").hide();\n            }\n        });\n        $(\"#id_address\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_recipients\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#id_expire_at\").datetimepicker({\n            format: 'YYYY-MM-DD HH:mm:ss'\n        });\n        $(\".submit\").on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"aliasform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    }\n\n};\n\nIdentities.prototype = $.extend({}, Admin.prototype, Identities.prototype);\n", "patch": "@@ -152,7 +152,7 @@ Domains.prototype = {\n             : gettext(\"This operation will remove all data associated to this domain, excepting accounts.\");\n \n         $(\"a[name=deldomain]\").confirm({\n-            question: function() { return this.$element.attr('title'); },\n+            question: function() { return htmlEncode(this.$element.attr('title')); },\n             method: \"POST\",\n             warning: warnmsg,\n             checkboxes: deloptions,\n@@ -295,7 +295,7 @@ Domains.prototype = {\n \n     optionsform_prefill: function() {\n         var $span = $(\"#id_dom_admin_username\").next(\"span\");\n-        $span.html(\"@\" + $(\"#id_name\").val());\n+        $span.html(\"@\" + htmlEncode($(\"#id_name\").val()));\n     },\n \n     domadminsform_init: function() {", "file_path": "files/2023_1/222", "file_language": "js", "file_name": "modoboa/admin/static/admin/js/admin.js", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/modoboa/modoboa/raw/354ab6884019009249097a7f3a1881d81ecd2fd2/modoboa%2Fadmin%2Ftemplates%2Fadmin%2Fdomains.html", "code": "{% extends \"admin/listing.html\" %}\n\n{% load i18n admin_tags lib_tags static%}\n\n{% block pagetitle %}{% trans \"Domains\" %}{% endblock %}\n\n{% block extra_css %}\n  {{ block.super }}\n  {% extra_static_content \"domains\" \"css\" user %}\n{% endblock %}\n\n{% block extra_js %}\n  {{ block.super }}\n  <script src=\"{% static 'transport/js/transport.js' %}\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\n  $(document).ready(function() {\n      admin = new Domains({\n          load_page_url: \"{% url 'admin:domain_page' %}\"\n      });\n  });\n  </script>\n{% extra_static_content \"domains\" \"js\" user %}\n{% endblock %}\n\n{% block toolbar_right %}\n  {% if perms.admin.add_domain %}\n    <a href=\"{% url 'admin:domain_add' %}\" class=\"btn btn-primary\" data-toggle=\"ajaxmodal\" modalcb=\"admin.newdomain_cb\">\n      <span class=\"fa fa-plus\"></span> {% trans \"Add\" %}\n    </a>\n  {% endif %}\n{% endblock %}\n\n{% block actions %}{% domains_menu \"domains\" user %}{% endblock %}\n", "code_before": "{% extends \"admin/listing.html\" %}\n\n{% load i18n admin_tags lib_tags static%}\n\n{% block pagetitle %}{% trans \"Domains\" %}{% endblock %}\n\n{% block extra_css %}\n  {{ block.super }}\n  {% extra_static_content \"domains\" \"css\" user %}\n{% endblock %}\n\n{% block extra_js %}\n  {{ block.super }}\n  <script src=\"{% static 'transport/js/transport.js' %}\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\n  $(document).ready(function() {\n      admin = new Domains({\n          load_page_url: \"{% url 'admin:domain_page' %}\"\n      });\n  });\n  </script>\n{% extra_static_content \"domains\" \"js\" user %}\n{% endblock %}\n\n{% block toolbar_right %}\n  {% if perms.admin.add_domain %}\n    <a href=\"{% url 'admin:domain_add' %}\" class=\"btn btn-primary\" data-toggle=\"ajaxmodal\" modalcb=\"admin.newdomain_cb\">\n      <span class=\"fa fa-plus\"></span> {% trans \"Add\" %}\n    </a>\n  {% endif %}\n{% endblock %}\n\n{% block actions %}{% domains_menu \"domains\" user %}{% endblock %}\n", "patch": "@@ -13,11 +13,11 @@\n   {{ block.super }}\n   <script src=\"{% static 'transport/js/transport.js' %}\" type=\"text/javascript\"></script>\n   <script type=\"text/javascript\">\n-   $(document).ready(function() {\n-       admin = new Domains({\n-           load_page_url: \"{% url 'admin:domain_page' %}\"\n-       });\n-   });\n+  $(document).ready(function() {\n+      admin = new Domains({\n+          load_page_url: \"{% url 'admin:domain_page' %}\"\n+      });\n+  });\n   </script>\n {% extra_static_content \"domains\" \"js\" user %}\n {% endblock %}", "file_path": "files/2023_1/223", "file_language": "html", "file_name": "modoboa/admin/templates/admin/domains.html", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/modoboa/modoboa/raw/354ab6884019009249097a7f3a1881d81ecd2fd2/modoboa%2Fstatic%2Fjs%2Fglobal.js", "code": "/*\n * Global javascript utilities\n */\n\n/* global $ */\n\nvar static_url = \"\";\n\n/*\n * A simple function to initialize the value of the global variable\n * 'media_url' (corresponding to django's MEDIA_URL variable).\n */\nfunction set_static_url(url) {\n    static_url = url;\n}\n\n/*\n * Shortcut function that construct an url from the media_url and the\n * given value.\n */\nfunction get_static_url(value) {\n    return static_url + value;\n}\n\n/**\n * Open a modal box and load its content using an AJAX request.\n *\n * @param {Object} e - event object\n */\nfunction modalbox(e, css, defhref, defcb, defclosecb) {\n    e.preventDefault();\n    var $this = $(this);\n    var href = (defhref !== undefined) ? defhref : $this.attr('href');\n    var modalcb = (defcb !== undefined) ? defcb : $this.attr('modalcb');\n    var closecb = (defclosecb !== undefined) ? defclosecb : $this.attr(\"closecb\");\n\n    if (href.indexOf('#') === 0) {\n        $(href).modal('open');\n        return;\n    }\n    if ($(\"#modalbox\").length) {\n        return;\n    }\n    $.ajax({\n        type: \"GET\",\n        url: href\n    }).done(function(data) {\n        var $div = $('<div />', {\n            id: \"modalbox\", 'class': \"modal fade\", role: \"modal\",\n            html: data, 'aria-hidden': true\n        });\n\n        $div.modal({show: false});\n        $div.one('shown.bs.modal', function() {\n            if ($(\".selectpicker\").length) {\n                $(\".selectpicker\").selectize();\n            }\n            $(\".help\").popover({\n                container: \"#modalbox\",\n                trigger: \"hover\"\n            }).click(function(e) {e.preventDefault();});\n            if (modalcb !== undefined) {\n                if (typeof modalcb === \"function\") modalcb(); else eval(modalcb + '()');\n            }\n        }).on('hidden.bs.modal', function(e) {\n            var $target = $(e.target);\n\n            if (!$target.is($(this))) {\n                return;\n            }\n            $(\"#modalbox\").remove();\n            if (closecb !== undefined) {\n                if (typeof closecb === \"function\") closecb(); else eval(closecb + '()');\n            }\n        });\n        $div.modal('show');\n\n        if (css !== undefined) {\n            $div.css(css);\n        }\n    });\n}\n\nfunction modalbox_autowidth(e) {\n    modalbox.apply(this, [e]);\n}\n\n/*\n * Simple shorcut do create a bootstrap alert box (error mode)\n */\nfunction build_alert_box(msg, level) {\n    return $('<div class=\"alert alert-' + level + '\"> \\\n<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>' + msg + \"</div>\");\n}\n\nfunction build_error_alert(msg) {\n    return build_alert_box(msg, 'danger');\n}\n\nfunction build_success_alert(msg) {\n    return build_alert_box(msg, 'success');\n}\n\n\n/*\n * '.keys()' method support for old browsers :p\n */\nif (!Object.keys) {\n    Object.keys = function (obj) {\n        var keys = [],\n            k;\n        for (k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n}\n\n/*\n * Clean all errors in a given form.\n */\nfunction clean_form_errors(formid) {\n    $(\"#\" + formid + \" div.has-error\").removeClass(\"has-error\");\n    $(\"#\" + formid + \" span.help-block\").remove();\n}\n\nfunction display_field_error($field, error) {\n    var spanid = $field.attr('id') + \"-error\";\n    var $span = $(\"#\" + spanid);\n\n    if (!$field.parents(\".form-group\").hasClass(\"has-error\")) {\n        $field.parents(\".form-group\").addClass(\"has-error\");\n    }\n    if (!$span.length) {\n        $span = $(\"<span />\", {\n            class: \"help-block\",\n            html: error,\n            id: spanid\n        });\n        $field.parents(\".form-group\").append($span);\n    } else {\n        $span.html(error);\n    }\n}\n\n/*\n * Display validation errors for a given form.\n */\nfunction display_form_errors(formid, data) {\n    clean_form_errors(formid);\n    $.each(data.form_errors, function(id, value) {\n        var fullid = \"id_\" + (data.prefix ? data.prefix + \"-\" : \"\") + id;\n        var $widget = $(\"#\" + formid + \" #\" + fullid);\n        var error = value.join(' ');\n\n        display_field_error($widget, error);\n    });\n}\n\n/*\n * Simple function that sends a form using an 'ajax' post request.\n *\n * The function is intended to be used in a modal environment.\n */\nfunction simple_ajax_form_post(e, options) {\n    e.preventDefault();\n    var $form = (options.formid !== undefined) ? $(\"#\" + options.formid) : $(\"form\");\n    var defaults = {reload_on_success: true, reload_mode: 'full', modal: true};\n    var opts = $.extend({}, defaults, options);\n    var args = $form.serialize();\n\n    if (options.extradata !== undefined) {\n        args += \"&\" + options.extradata;\n    }\n    $.ajax({\n        type: \"POST\",\n        global: false,\n        url: $form.attr(\"action\"),\n        data: args\n    }).done(function(data) {\n        if (opts.modal) {\n            $(\"#modalbox\").modal('hide');\n        }\n        if (opts.success_cb !== undefined) {\n            opts.success_cb(data);\n            return;\n        }\n        if (opts.reload_on_success) {\n            if (opts.reload_mode === 'full') {\n                window.location.reload();\n            } else {\n                histomanager.update(true);\n            }\n        }\n        if (data && data.message) {\n            $(\"body\").notify('success', data.message, 2000);\n        }\n    }).fail(function(jqxhr) {\n        var data = $.parseJSON(jqxhr.responseText);\n        if (data.form_errors) {\n            display_form_errors(options.formid, data);\n        } else {\n            if (opts.modal) {\n                $('.modal-body').prepend(build_error_alert(data));\n            } else {\n                $('body').notify('error', data);\n            }\n        }\n        if (opts.error_cb) {\n            opts.error_cb(data);\n        }\n    });\n}\n\n/*\n * The following code prevents a bug under IE7 because fullpath is\n * returned instead of a relative one. (even if mootools uses\n * getAttribute(\"href\", 2), this is not working for AJAX requests)\n */\nfunction gethref(obj) {\n    var url = $(obj).attr(\"href\");\n    var re = new RegExp(\"^(https?):\");\n    var scheme = re.exec(url);\n\n    if (scheme !== null) {\n        var baseurl = scheme[0] + \"://\" + location.host + location.pathname;\n        return url.replace(baseurl, \"\");\n    }\n    return url;\n}\n\n/*\n * Extract the current URL parameters into a dictionnary.\n *\n * Ref:\n * http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction parse_qs(raw) {\n    if (raw === \"\") { return {}; }\n    var res = {};\n\n    for (var i = 0; i < raw.length; i++) {\n        var p = raw[i].split('=');\n\n        if (p.length !== 2) { continue; }\n        res[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return res;\n}\n\n/*\n * Extract a specific URL parameter using its name.\n *\n * Ref: http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction get_parameter_by_name(url, name, dont_replace_plus) {\n    name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(url);\n\n    if (results === null) {\n        return \"\";\n    }\n\n    var result = results[1];\n    if (dont_replace_plus === undefined || !dont_replace_plus) {\n        result = result.replace(\"/\\+/g\", \"\");\n    }\n    return decodeURIComponent(result);\n}\n\n/**\n * Return the target associated to an event object. You will generally\n * use this function within a click event handler configured on a <a/>\n * tag containg an image. (because e.target will often point to the\n * image...)\n *\n * @param {Object} e - event object\n * @param {string} tag - desired tag\n */\nfunction get_target(e, tag) {\n    var $target = $(e.target);\n\n    if (tag === undefined || $target.is(tag)) {\n        return $target;\n    }\n    return $target.parent();\n}\n\n/**\n * Send a simple AJAX request.\n */\nfunction simple_ajax_request(e, uoptions) {\n    var $this = $(this);\n    var defaults = {};\n    var options = $.extend({}, defaults, uoptions);\n\n    if (e !== undefined) { e.preventDefault(); }\n    $.ajax({\n        url: $this.attr(\"href\"),\n        dataType: 'json'\n    }).done(function(data) {\n        if (options.ok_cb) { options.ok_cb(data); }\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    });\n}\n\n/*\n * Simple function that redirect ajax requests to the login page if\n * the status code received with a response is equal to 278.\n */\nfunction ajax_login_redirect(xhr) {\n    if (xhr.status !== 278) {\n        return;\n    }\n    var params = \"?next=\" + window.location.pathname;\n\n    window.location.href =\n        xhr.getResponseHeader(\"Location\").replace(/\\?.*$/, params);\n}\n\nfunction activate_widget(e) {\n    var $this = $(this);\n    var widget_id = $this.attr(\"id\").substr(0, $this.attr(\"id\").length - 4);\n    var $widget = $('#' + widget_id);\n\n    if ($this.prop(\"checked\")) {\n        $widget.attr('disabled', true);\n    } else {\n        $widget.attr('disabled', false);\n    }\n}\n\n/*\n * Default error handler for AJAX requests.\n */\nfunction defaultAjaxErrorHandler(event, jqxhr, settings) {\n    var data;\n\n    try {\n        data = $.parseJSON(jqxhr.responseText);\n    } catch (x) {\n        data = gettext(\"Internal error\");\n    }\n    $('body').notify('error', data);\n}\n\n/**\n * An equivalent of python .format() method.\n */\nString.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/\\{\\{|\\}\\}|\\{(\\d+)\\}/g, function (m, n) {\n        if (m === \"{{\") { return \"{\"; }\n        if (m === \"}}\") { return \"}\"; }\n        return args[n];\n    });\n};\n\n/**\n * Simple HTML escape function\n */\nfunction htmlEncode(str) {\n    return String(str).replace(/[^\\w. ]/gi, function(c) {\n        return '&#'+c.charCodeAt(0)+';';\n    });\n}\n\n$(document).ready(function() {\n    $(document).ajaxSuccess(function(e, xhr, settings) { ajax_login_redirect(xhr); });\n    $(document).ajaxError(defaultAjaxErrorHandler);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal\"]', modalbox);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal-autowidth\"]', modalbox_autowidth);\n    $(document).on('click', '.activator', activate_widget);\n    $(\".help\").popover({trigger: 'hover'}).click(function(e) { e.preventDefault(); });\n});\n", "code_before": "/*\n * Global javascript utilities\n */\n\n/* global $ */\n\nvar static_url = \"\";\n\n/*\n * A simple function to initialize the value of the global variable\n * 'media_url' (corresponding to django's MEDIA_URL variable).\n */\nfunction set_static_url(url) {\n    static_url = url;\n}\n\n/*\n * Shortcut function that construct an url from the media_url and the\n * given value.\n */\nfunction get_static_url(value) {\n    return static_url + value;\n}\n\n/**\n * Open a modal box and load its content using an AJAX request.\n *\n * @param {Object} e - event object\n */\nfunction modalbox(e, css, defhref, defcb, defclosecb) {\n    e.preventDefault();\n    var $this = $(this);\n    var href = (defhref !== undefined) ? defhref : $this.attr('href');\n    var modalcb = (defcb !== undefined) ? defcb : $this.attr('modalcb');\n    var closecb = (defclosecb !== undefined) ? defclosecb : $this.attr(\"closecb\");\n\n    if (href.indexOf('#') === 0) {\n        $(href).modal('open');\n        return;\n    }\n    if ($(\"#modalbox\").length) {\n        return;\n    }\n    $.ajax({\n        type: \"GET\",\n        url: href\n    }).done(function(data) {\n        var $div = $('<div />', {\n            id: \"modalbox\", 'class': \"modal fade\", role: \"modal\",\n            html: data, 'aria-hidden': true\n        });\n\n        $div.modal({show: false});\n        $div.one('shown.bs.modal', function() {\n            if ($(\".selectpicker\").length) {\n                $(\".selectpicker\").selectize();\n            }\n            $(\".help\").popover({\n                container: \"#modalbox\",\n                trigger: \"hover\"\n            }).click(function(e) {e.preventDefault();});\n            if (modalcb !== undefined) {\n                if (typeof modalcb === \"function\") modalcb(); else eval(modalcb + '()');\n            }\n        }).on('hidden.bs.modal', function(e) {\n            var $target = $(e.target);\n\n            if (!$target.is($(this))) {\n                return;\n            }\n            $(\"#modalbox\").remove();\n            if (closecb !== undefined) {\n                if (typeof closecb === \"function\") closecb(); else eval(closecb + '()');\n            }\n        });\n        $div.modal('show');\n\n        if (css !== undefined) {\n            $div.css(css);\n        }\n    });\n}\n\nfunction modalbox_autowidth(e) {\n    modalbox.apply(this, [e]);\n}\n\n/*\n * Simple shorcut do create a bootstrap alert box (error mode)\n */\nfunction build_alert_box(msg, level) {\n    return $('<div class=\"alert alert-' + level + '\"> \\\n<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>' + msg + \"</div>\");\n}\n\nfunction build_error_alert(msg) {\n    return build_alert_box(msg, 'danger');\n}\n\nfunction build_success_alert(msg) {\n    return build_alert_box(msg, 'success');\n}\n\n\n/*\n * '.keys()' method support for old browsers :p\n */\nif (!Object.keys) {\n    Object.keys = function (obj) {\n        var keys = [],\n            k;\n        for (k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n}\n\n/*\n * Clean all errors in a given form.\n */\nfunction clean_form_errors(formid) {\n    $(\"#\" + formid + \" div.has-error\").removeClass(\"has-error\");\n    $(\"#\" + formid + \" span.help-block\").remove();\n}\n\nfunction display_field_error($field, error) {\n    var spanid = $field.attr('id') + \"-error\";\n    var $span = $(\"#\" + spanid);\n\n    if (!$field.parents(\".form-group\").hasClass(\"has-error\")) {\n        $field.parents(\".form-group\").addClass(\"has-error\");\n    }\n    if (!$span.length) {\n        $span = $(\"<span />\", {\n            class: \"help-block\",\n            html: error,\n            id: spanid\n        });\n        $field.parents(\".form-group\").append($span);\n    } else {\n        $span.html(error);\n    }\n}\n\n/*\n * Display validation errors for a given form.\n */\nfunction display_form_errors(formid, data) {\n    clean_form_errors(formid);\n    $.each(data.form_errors, function(id, value) {\n        var fullid = \"id_\" + (data.prefix ? data.prefix + \"-\" : \"\") + id;\n        var $widget = $(\"#\" + formid + \" #\" + fullid);\n        var error = value.join(' ');\n\n        display_field_error($widget, error);\n    });\n}\n\n/*\n * Simple function that sends a form using an 'ajax' post request.\n *\n * The function is intended to be used in a modal environment.\n */\nfunction simple_ajax_form_post(e, options) {\n    e.preventDefault();\n    var $form = (options.formid !== undefined) ? $(\"#\" + options.formid) : $(\"form\");\n    var defaults = {reload_on_success: true, reload_mode: 'full', modal: true};\n    var opts = $.extend({}, defaults, options);\n    var args = $form.serialize();\n\n    if (options.extradata !== undefined) {\n        args += \"&\" + options.extradata;\n    }\n    $.ajax({\n        type: \"POST\",\n        global: false,\n        url: $form.attr(\"action\"),\n        data: args\n    }).done(function(data) {\n        if (opts.modal) {\n            $(\"#modalbox\").modal('hide');\n        }\n        if (opts.success_cb !== undefined) {\n            opts.success_cb(data);\n            return;\n        }\n        if (opts.reload_on_success) {\n            if (opts.reload_mode === 'full') {\n                window.location.reload();\n            } else {\n                histomanager.update(true);\n            }\n        }\n        if (data && data.message) {\n            $(\"body\").notify('success', data.message, 2000);\n        }\n    }).fail(function(jqxhr) {\n        var data = $.parseJSON(jqxhr.responseText);\n        if (data.form_errors) {\n            display_form_errors(options.formid, data);\n        } else {\n            if (opts.modal) {\n                $('.modal-body').prepend(build_error_alert(data));\n            } else {\n                $('body').notify('error', data);\n            }\n        }\n        if (opts.error_cb) {\n            opts.error_cb(data);\n        }\n    });\n}\n\n/*\n * The following code prevents a bug under IE7 because fullpath is\n * returned instead of a relative one. (even if mootools uses\n * getAttribute(\"href\", 2), this is not working for AJAX requests)\n */\nfunction gethref(obj) {\n    var url = $(obj).attr(\"href\");\n    var re = new RegExp(\"^(https?):\");\n    var scheme = re.exec(url);\n\n    if (scheme !== null) {\n        var baseurl = scheme[0] + \"://\" + location.host + location.pathname;\n        return url.replace(baseurl, \"\");\n    }\n    return url;\n}\n\n/*\n * Extract the current URL parameters into a dictionnary.\n *\n * Ref:\n * http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction parse_qs(raw) {\n    if (raw === \"\") { return {}; }\n    var res = {};\n\n    for (var i = 0; i < raw.length; i++) {\n        var p = raw[i].split('=');\n\n        if (p.length !== 2) { continue; }\n        res[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return res;\n}\n\n/*\n * Extract a specific URL parameter using its name.\n *\n * Ref: http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction get_parameter_by_name(url, name, dont_replace_plus) {\n    name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(url);\n\n    if (results === null) {\n        return \"\";\n    }\n\n    var result = results[1];\n    if (dont_replace_plus === undefined || !dont_replace_plus) {\n        result = result.replace(\"/\\+/g\", \"\");\n    }\n    return decodeURIComponent(result);\n}\n\n/**\n * Return the target associated to an event object. You will generally\n * use this function within a click event handler configured on a <a/>\n * tag containg an image. (because e.target will often point to the\n * image...)\n *\n * @param {Object} e - event object\n * @param {string} tag - desired tag\n */\nfunction get_target(e, tag) {\n    var $target = $(e.target);\n\n    if (tag === undefined || $target.is(tag)) {\n        return $target;\n    }\n    return $target.parent();\n}\n\n/**\n * Send a simple AJAX request.\n */\nfunction simple_ajax_request(e, uoptions) {\n    var $this = $(this);\n    var defaults = {};\n    var options = $.extend({}, defaults, uoptions);\n\n    if (e !== undefined) { e.preventDefault(); }\n    $.ajax({\n        url: $this.attr(\"href\"),\n        dataType: 'json'\n    }).done(function(data) {\n        if (options.ok_cb) { options.ok_cb(data); }\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    });\n}\n\n/*\n * Simple function that redirect ajax requests to the login page if\n * the status code received with a response is equal to 278.\n */\nfunction ajax_login_redirect(xhr) {\n    if (xhr.status !== 278) {\n        return;\n    }\n    var params = \"?next=\" + window.location.pathname;\n\n    window.location.href =\n        xhr.getResponseHeader(\"Location\").replace(/\\?.*$/, params);\n}\n\nfunction activate_widget(e) {\n    var $this = $(this);\n    var widget_id = $this.attr(\"id\").substr(0, $this.attr(\"id\").length - 4);\n    var $widget = $('#' + widget_id);\n\n    if ($this.prop(\"checked\")) {\n        $widget.attr('disabled', true);\n    } else {\n        $widget.attr('disabled', false);\n    }\n}\n\n/*\n * Default error handler for AJAX requests.\n */\nfunction defaultAjaxErrorHandler(event, jqxhr, settings) {\n    var data;\n\n    try {\n        data = $.parseJSON(jqxhr.responseText);\n    } catch (x) {\n        data = gettext(\"Internal error\");\n    }\n    $('body').notify('error', data);\n}\n\n/**\n * An equivalent of python .format() method.\n */\nString.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/\\{\\{|\\}\\}|\\{(\\d+)\\}/g, function (m, n) {\n        if (m === \"{{\") { return \"{\"; }\n        if (m === \"}}\") { return \"}\"; }\n        return args[n];\n    });\n};\n\n/**\n * Simple HTML escape function\n */\nfunction htmlEncode(str) {\n    return String(str).replace(/[^\\w. ]/gi, function(c) {\n        return '&#'+c.charCodeAt(0)+';';\n    });\n}\n\n$(document).ready(function() {\n    $(document).ajaxSuccess(function(e, xhr, settings) { ajax_login_redirect(xhr); });\n    $(document).ajaxError(defaultAjaxErrorHandler);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal\"]', modalbox);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal-autowidth\"]', modalbox_autowidth);\n    $(document).on('click', '.activator', activate_widget);\n    $(\".help\").popover({trigger: 'hover'}).click(function(e) { e.preventDefault(); });\n});\n", "patch": "@@ -361,6 +361,15 @@ String.prototype.format = function() {\n     });\n };\n \n+/**\n+ * Simple HTML escape function\n+ */\n+function htmlEncode(str) {\n+    return String(str).replace(/[^\\w. ]/gi, function(c) {\n+        return '&#'+c.charCodeAt(0)+';';\n+    });\n+}\n+\n $(document).ready(function() {\n     $(document).ajaxSuccess(function(e, xhr, settings) { ajax_login_redirect(xhr); });\n     $(document).ajaxError(defaultAjaxErrorHandler);", "file_path": "files/2023_1/224", "file_language": "js", "file_name": "modoboa/static/js/global.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
