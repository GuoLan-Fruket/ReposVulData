{"index": 3482, "cve_id": "CVE-2019-10904", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Roundup 1.6 allows XSS via the URI because frontends/roundup.cgi and roundup/cgi/wsgi_handler.py mishandle 404 errors.", "cvss": "6.1", "publish_date": "April 6, 2019", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "a2edc3cba0b5d34005114f6da0251bd9ac2837df", "commit_message": "Fix fix XSS issue in wsgi and cgi when handing url not found/404. issue2551035", "commit_date": "2019-03-22T22:16:11Z", "project": "roundup-tracker/roundup", "url": "https://api.github.com/repos/roundup-tracker/roundup/commits/a2edc3cba0b5d34005114f6da0251bd9ac2837df", "html_url": "https://github.com/roundup-tracker/roundup/commit/a2edc3cba0b5d34005114f6da0251bd9ac2837df", "windows_before": [{"commit_id": "911b8909824802abcf10f4bf13e9e194e5fe40ce", "commit_date": "Fri Mar 22 14:43:21 2019 +0100", "commit_message": "Document searching and @verbose attribute", "files_name": ["doc/rest.txt"]}, {"commit_id": "4aedcb09806b042c29948e98647ba29880c6d996", "commit_date": "Fri Mar 22 14:12:57 2019 +0100", "commit_message": "Display content property starting with verbose=3", "files_name": ["roundup/rest.py"]}, {"commit_id": "4207fc864ecf6146623e313e17cc8553be9070cf", "commit_date": "Fri Mar 22 14:03:37 2019 +0100", "commit_message": "Better display for Link/Multilink and content", "files_name": ["roundup/rest.py"]}, {"commit_id": "846e1c9d2d14bdecd83582819eb5be19a6554bc2", "commit_date": "Fri Mar 22 11:23:02 2019 +0100", "commit_message": "First attempt at REST-API documentation", "files_name": ["doc/rest.txt", "roundup/rest.py"]}, {"commit_id": "00bdfe17a3619e9bd2c354f044a8e07cecb3835a", "commit_date": "Fri Mar 22 09:56:10 2019 +0100", "commit_message": "Make Searching work in REST API", "files_name": ["roundup/rest.py"]}, {"commit_id": "8d8b961d9873fd9d5a4a5ed5a2c02b9325b9371c", "commit_date": "Thu Mar 21 11:23:09 2019 +0100", "commit_message": "Fix hardcoded /data", "files_name": ["roundup/rest.py"]}, {"commit_id": "5afa9e7e4a5beac930a806539a7fea8d8bc80ff2", "commit_date": "Tue Mar 19 22:01:13 2019 -0400", "commit_message": "Add missing caveat about the BinaryFieldStorage class.", "files_name": ["roundup/cgi/client.py"]}, {"commit_id": "2f582cdb40b5c0e64544a3c0749dc5250ce7ed51", "commit_date": "Tue Mar 19 21:58:49 2019 -0400", "commit_message": "Implement different workaround for https://bugs.python.org/issue27777 suggested by jsm/Joseph Myers.", "files_name": ["roundup/cgi/client.py", "test/rest_common.py"]}, {"commit_id": "5897cbb45890f0a9c470b3f5ed5e6413be01d4f1", "commit_date": "Mon Mar 18 21:42:33 2019 -0400", "commit_message": "Merge in non-conflicting changes from ba67e397f063 including workaround for:    https://bugs.python.org/issue27777", "files_name": ["d4f6b8445956f710b3e1868c6dec6fd6597896b7 - Sun Mar 17 21:47:45 2019 -0400 : merge patch for fixing CSVExport function tests. Problem caused by unstable ordering of the nosy list", "2759f04e181d84410fd51b090da8ac5ec91d6f32 - Sun Mar 17 19:28:26 2019 -0400 : Fix string/bytes issues under python 3.", "roundup/cgi/client.py", "roundup/rest.py", "test/rest_common.py", "test/test_CaseInsensitiveDict.py"]}, {"commit_id": "67f82b526aef1d01dd5d2760504c6b4d3c11e45d", "commit_date": "Sun Mar 17 19:00:43 2019 -0400", "commit_message": "python2/python3 normalization. When exporting CSV, sort lists as they are ordered differently in python3 vs python2. Also python 3 list element order seems to not be stable/repeatable between runs. Sometimes the tests would pass sometimes they wouldn't.", "files_name": ["roundup/cgi/actions.py", "test/test_cgi.py"]}, {"commit_id": "fbd88956045e7d2f5f5eddd5b5f02c4a3e22d2cf", "commit_date": "Sun Mar 17 16:41:49 2019 +0000", "commit_message": "Fix REST tests for Python 3.", "files_name": ["test/rest_common.py"]}, {"commit_id": "54bbccedcbea335211d5bb67271b928ecc1a0d82", "commit_date": "Sun Mar 17 16:25:36 2019 +0000", "commit_message": "Fix Python 3 issues in REST code.", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "e6eba23d1e9ac46323230b5c1e324e4a0d3338dc", "commit_date": "Fri Mar 15 20:29:00 2019 -0400", "commit_message": "assert_ is depricated. Replacing with assertTrue to reduce logs in travisci.", "files_name": ["test/db_test_base.py", "test/test_actions.py", "test/test_cgi.py", "test/test_hyperdbvals.py", "test/test_indexer.py", "test/test_mailgw.py", "test/test_multipart.py", "test/test_schema.py", "test/test_security.py", "test/test_templating.py"]}, {"commit_id": "673cc07aca0404cfef660b89e75c25e1ed2159f4", "commit_date": "Fri Mar 15 17:27:31 2019 -0400", "commit_message": "Python3: fix crash bug when importing binary file (like jpeg). The hyperdb content property inteprets the file as text and raises an error if the UTF-8 decode fails. To fix, read file as binary/byte and do conversion (ignoring errors) at the import level not the hyperdb level.", "files_name": ["roundup/hyperdb.py"]}, {"commit_id": "b002ab2a86afdd8cf643a50f636650d12257da9b", "commit_date": "Sun Mar 10 19:56:35 2019 -0400", "commit_message": "Trying to make StringIO handle unicode and pass it through to FieldStorage to eliminate the error:", "files_name": ["test/rest_common.py"]}, {"commit_id": "c4ca84cb19b80dbf24beec5656cba595d61a6c28", "commit_date": "Sun Mar 10 19:30:03 2019 -0400", "commit_message": "Python 3 compatibility encode repr when caclulating etag.", "files_name": ["roundup/rest.py"]}, {"commit_id": "7a4ed5d38b02e2dbf6046182e6417f94eab497b8", "commit_date": "Sun Mar 10 18:09:35 2019 -0400", "commit_message": "Make print into function call for python3 compatibility.", "files_name": ["test/rest_common.py"]}, {"commit_id": "04113327e526b4bcc44f5ca5a2d4fc1ceecf89a9", "commit_date": "Sun Mar 10 17:57:26 2019 -0400", "commit_message": "Make exception raising work on python 3.", "files_name": ["roundup/rest.py"]}, {"commit_id": "9db8a65bdfb2cc696aed76438cd3c5a5983c6b83", "commit_date": "Sun Mar 10 17:35:25 2019 -0400", "commit_message": "Added support for accepting application/json payload in addition to the existing application/x-www-form-urlencoded.", "files_name": ["CHANGES.txt", "roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "82049a9353466f14af8595703945f1c8517b4d67", "commit_date": "Sun Mar 10 12:18:11 2019 -0400", "commit_message": "Move mysql grant after the manipulation on the db. This verifies the db is up.", "files_name": [".travis.yml"]}, {"commit_id": "859724684ff206e0b3ce3cf7f2e5b24aee473d38", "commit_date": "Sun Mar 10 11:18:32 2019 -0400", "commit_message": "Remove other python versions to reduce cycle time while trying to fix this.", "files_name": [".travis.yml"]}, {"commit_id": "6d6e1b1ffd138c342dbda9f4ce7ebb864ae21bcf", "commit_date": "Sun Mar 10 11:01:27 2019 -0400", "commit_message": "trying to fix OperationalError(2006) problem in travis", "files_name": [".travis.yml"]}, {"commit_id": "d072e0b538095122d195e4c5fb46360a54b67417", "commit_date": "Sat Mar 9 11:06:10 2019 -0500", "commit_message": "Add support for prev/next/self links when returning paginated results.", "files_name": ["CHANGES.txt", "roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "a1f4472185f27f60c75ce53bf9c1b48a53169164", "commit_date": "Fri Mar 8 22:30:11 2019 -0500", "commit_message": "Allow client to access read only/protected properties like creator, actor, creation and creator.", "files_name": ["roundup/rest.py"]}, {"commit_id": "b6727d247d6a9a0761722552da4beee01bab752e", "commit_date": "Fri Mar 8 21:32:57 2019 -0500", "commit_message": "Add two isoformat() methods. One for Date and one for Interval.", "files_name": ["roundup/date.py"]}, {"commit_id": "a58f8c0f260429bdc1dd27c3b45aec9e5ef9a627", "commit_date": "Thu Mar 7 18:08:32 2019 -0500", "commit_message": "Make pretty print mode the default. Turn off using pretty=false. This makes use by humans (e.g. in browser) or printing when debugging easier. With gzip and other compression the extra whitespace is not a major issue.", "files_name": ["roundup/rest.py"]}, {"commit_id": "2221bf9d03f8990d974a54463c955eb0e0df69bb", "commit_date": "Thu Mar 7 15:32:25 2019 +0100", "commit_message": "website: bump copyright to 2019", "files_name": ["website/www/conf.py"]}, {"commit_id": "49382e4e365809ec6d5e0b803c463db09a5dd37e", "commit_date": "Thu Mar 7 09:00:10 2019 +0100", "commit_message": "website: improve sf login instructions", "files_name": ["website/README.txt"]}, {"commit_id": "cc9198a3bf1c0ea30fb4aa5520c9ed00015b467e", "commit_date": "Fri Mar 1 23:24:40 2019 -0500", "commit_message": "Initial implementation of function to return data for / and /data endpoints under /rest/.", "files_name": ["roundup/rest.py"]}, {"commit_id": "6f9cc5c69ea42972da45b3bc551887e00e5acded", "commit_date": "Fri Mar 1 23:16:13 2019 -0500", "commit_message": "Add simple support for xml output if the third party dict2xml.py module  https://pypi.org/project/dict2xml/ is installed.", "files_name": ["CHANGES.txt", "roundup/rest.py"]}, {"commit_id": "7c78778ba8b7ca15dad5efa9c1b7099dc0767078", "commit_date": "Fri Mar 1 22:57:07 2019 -0500", "commit_message": "Add etag support to rest interface to prevent multiple users from overwriting other users changes.", "files_name": ["roundup/cgi/exceptions.py", "roundup/password.py", "roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "02fae16e43a5190c1364a9f660d43042ddd9ffb7", "commit_date": "Wed Feb 27 21:47:39 2019 -0500", "commit_message": "issue2551023: Fix CSRF headers for use with wsgi and cgi. The env variable array used - separators rather than _. Compare: HTTP_X-REQUESTED-WITH to HTTP_X_REQUESTED_WITH. The last is correct. Also fix roundup-server to produce the latter form. (Patch by C\u00e9dric Krier)", "files_name": ["CHANGES.txt", "roundup/cgi/client.py", "roundup/scripts/roundup_server.py", "test/test_cgi.py"]}, {"commit_id": "23f821a3169a11e7884bc544be2bb510b43d15c0", "commit_date": "Sun Feb 24 22:49:30 2019 -0500", "commit_message": "use config file setting for creating tracker uri", "files_name": ["test/rest_common.py"]}, {"commit_id": "17f561fce389bf3fb697ba8121fc7f00382e09e4", "commit_date": "Sun Feb 24 21:46:24 2019 -0500", "commit_message": "Make @Routing.route('/') decoration work. This decoration matches 'rest/' (note trailing /). Make sure that a path reduced to \"rest\" is rewritten to \"rest/\" so we can handle the root of the rest tree.", "files_name": ["roundup/rest.py"]}, {"commit_id": "373b17481173b9d8a312ab62d1c44b4c8778e786", "commit_date": "Sun Feb 24 21:42:25 2019 -0500", "commit_message": "Fix path of links in /rest/summary.", "files_name": ["roundup/rest.py"]}, {"commit_id": "657c66d89a5125034e18733c9e833e88a73f222f", "commit_date": "Sun Feb 24 21:34:17 2019 -0500", "commit_message": "Do not honor the X-HTTP-Method-Override if the original method used was GET. GET's are supposed to be a safe operation. Require a non-GET method (POST is suggested) in order for the override to occur.", "files_name": ["roundup/rest.py"]}, {"commit_id": "189296f4448cd2a93814c95025ab0521456124b0", "commit_date": "Sat Feb 16 16:12:37 2019 -0500", "commit_message": "Make sure a commentis a comment.", "files_name": ["roundup/rest.py"]}, {"commit_id": "65e7fe07bba641d5100da0cfe1099d322d266045", "commit_date": "Sat Feb 16 15:37:14 2019 -0500", "commit_message": "The access check on properties for an instance of a class (e.g. .../user/1) was not correct. As a result the access rights on the class not the access right to an instance of a class were checked. This fixes the code so the instance rights are checked the same as calling: .../user/1/roles would.", "files_name": ["CHANGES.txt", "roundup/rest.py"]}, {"commit_id": "43632c250206ac5b5a4ab6fba6f26654f38d0ceb", "commit_date": "Sat Feb 16 15:29:18 2019 -0500", "commit_message": "Original code supported setting accept type to json (or other supported type) by including an extension in the url. So .../issue.json would return json and .../issue.xml would return xml response (if xml response were supported). This code strips the extension from the uri one it has been processed.", "files_name": ["CHANGES.txt", "roundup/rest.py"]}, {"commit_id": "7067f741acc25d111649e24e4522fe38612c5171", "commit_date": "Sat Feb 16 15:24:53 2019 -0500", "commit_message": "Original code generated url's using a harcoded protocol and took the hostname from the hostname used to access the tracker. This patch uses the canonical path from config.ini for generating all links.", "files_name": ["CHANGES.txt", "roundup/rest.py"]}, {"commit_id": "a6b7ce74196cba29e33b630fc18905c46bf11c7b", "commit_date": "Sat Feb 16 15:21:47 2019 -0500", "commit_message": "merge from upsteam", "files_name": ["c89eb718ce35b400c5d86592cb1f1525b7cebb7c - Sat Feb 16 15:17:21 2019 -0500 : issue2550833 enhance the export csv action to include the keys for liked items rather than id's. So for nosy list display usernames and not numbers.", "CHANGES.txt", "roundup/cgi/actions.py", "roundup/cgi/client.py", "test/test_cgi.py"]}, {"commit_id": "a1f45114e47e0ab0c3133781eb26b85a7a6f2b51", "commit_date": "Sat Feb 16 17:48:36 2019 +0000", "commit_message": "Support non-ASCII prefixes in instance config for finding static files (issue2551022).", "files_name": ["CHANGES.txt", "roundup/cgi/client.py"]}, {"commit_id": "683bebda590ba76b072cc577a691259366463866", "commit_date": "Wed Feb 13 06:32:47 2019 -0500", "commit_message": "update http://issues.roundup-tracker.org to https://isues.... for the website.  So it will roll out whenever the next website update is done.", "files_name": ["website/README.txt", "website/issues/config.ini", "website/wiki/wiki/data/plugin/theme/roundup.py", "website/www/contents.txt"]}, {"commit_id": "e1a0a8bca7ebc2bc5f30ff8f46a5e656f2025ce6", "commit_date": "Tue Feb 12 21:38:08 2019 -0500", "commit_message": "merge change of http://issues.roundup-tracker.org to https://issues.... in docs", "files_name": ["d3620b1b3a22030b8c86023ef4cf359d9d713527 - Tue Feb 12 21:31:41 2019 -0500 : Changed references to http://issues.roundup-tracker.org to https now that the site is TLS enabled.", "doc/FAQ.txt", "doc/conf.py", "doc/developers.txt", "doc/installation.txt", "doc/mysql.txt", "doc/user_guide.txt"]}, {"commit_id": "85388e871a8cae9b7fc30834973fc03683118e54", "commit_date": "Sun Feb 10 14:10:55 2019 +0000", "commit_message": "Fix CSV export with WSGI and Python 3 (issue2551019).", "files_name": ["roundup/cgi/wsgi_handler.py"]}, {"commit_id": "e4f7fa2307f878977d4c58277fe40dd8a8dfcc28", "commit_date": "Fri Feb 8 19:39:17 2019 -0500", "commit_message": "Path to support OPTIONS verb when using rest interface via roundup-server. Also make sure rest interface doesn't hang when processing OPTIONS, DELETE, PATCH which don't have a payload by creating a CONTENT_LENGTH of 0 if these verbs are used and CONTENT_LENGTH is missing.", "files_name": ["CHANGES.txt", "roundup/cgi/client.py", "roundup/scripts/roundup_server.py"]}, {"commit_id": "db26b4e5cef4e14b31ebb7cdedf483b8261d51ca", "commit_date": "Wed Jan 30 18:11:02 2019 +0100", "commit_message": "Merge REST API changes", "files_name": ["a911acdcbadbbe19a88ee2a4c9eb632a6344748e - Wed Jan 30 14:24:25 2019 +0100 : Add changelog, acknowledgements", "CHANGES.txt", "doc/acknowledgements.txt"]}, {"commit_id": "75bde450601edc7bb259c0a13ab0af6ecc947212", "commit_date": "Wed Jan 30 14:12:27 2019 +0100", "commit_message": "Fix actions", "files_name": ["roundup/actions.py", "roundup/rest.py", "roundup/xmlrpc.py"]}], "windows_after": [{"commit_id": "e475009ee55fe54b60d8882824947c1dbffef895", "commit_date": "Fri Mar 22 23:59:02 2019 -0400", "commit_message": "Handle LoginError in rest code. Stop standard \"an error occurred check server log for details\" error message from making it to the user.", "files_name": ["roundup/cgi/client.py"]}, {"commit_id": "9136511a50b28a2fc59ae78ab3085c49e29ba513", "commit_date": "Sat Mar 23 00:02:03 2019 -0400", "commit_message": "Prevent env['CONTENT_TYPE'] from being None. FieldStorage's content header parser can handle empty string or missing value but can't handle None.", "files_name": ["roundup/scripts/roundup_server.py"]}, {"commit_id": "c111f2da76f6a0d9642412ddfdc4d2359ec18a02", "commit_date": "Sat Mar 23 00:13:08 2019 -0400", "commit_message": "A fix for https://issues.roundup-tracker.org/issue2551034 REST etag ordering.", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "1f9e8f510110dc0f0dfdaf819e39d70b33d5d57e", "commit_date": "Sun Mar 24 12:51:24 2019 -0400", "commit_message": "Try to fix mysql crash on close by rolling back mysqlclient. The version was incremented from 1.3.13 to 1.3.14.", "files_name": ["roundup/rest.py"]}, {"commit_id": "b8013f0458bec1072ec4c30e95905856c2ae1d69", "commit_date": "Sun Mar 24 12:52:03 2019 -0400", "commit_message": "Try to fix mysql crash on close by rolling back mysqlclient. The version was incremented from 1.3.13 to 1.3.14.", "files_name": [".travis.yml"]}, {"commit_id": "5b8d7336d37850a7baf47dae6068343a93b464d6", "commit_date": "Sun Mar 24 21:49:17 2019 +0000", "commit_message": "Adjust make_file override to use binary files only when needed.", "files_name": ["roundup/cgi/client.py"]}, {"commit_id": "da15bf49c1129307382aa070af4898b49285c7f1", "commit_date": "Mon Mar 25 19:46:20 2019 +0100", "commit_message": "Fix tests for latest REST changes", "files_name": ["test/rest_common.py"]}, {"commit_id": "e39a831943b2655288d5dd2de15b2345b0903365", "commit_date": "Mon Mar 25 19:47:29 2019 +0100", "commit_message": "Merged", "files_name": ["14f6d2ce5fb4f860b59f38e95421e5fbb2100283 - Mon Mar 25 21:23:52 2019 +0100 : REST: Use If-Match header for incoming requests", "doc/rest.txt", "roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "73ae5a51cb8f7be3415ac4cc0a2b23b2de0d55a9", "commit_date": "Mon Mar 25 19:45:08 2019 -0400", "commit_message": "issue2551018 add new nosy_filter parameter to nosymessage. Function passed as nosy_filter can rewrite the nosy message body before it's sent. Tom Ekberg tekberg did the work.", "files_name": ["CHANGES.txt", "roundup/roundupdb.py", "test/test_mailgw.py"]}, {"commit_id": "9d212bbc536452903247dc09c67f48e92c4d4704", "commit_date": "Tue Mar 26 17:31:28 2019 -0400", "commit_message": "issue2551026: template variable not defined even though it is. Fix issue where variables defined in TAL expression are not available in the scope of the definition. (Tom Ekberg (tekberg))", "files_name": ["CHANGES.txt", "roundup/cgi/PageTemplates/PythonExpr.py", "test/test_pythonexpr.py"]}, {"commit_id": "e636710a87ca61ff919981aa6955ad196a4754ea", "commit_date": "Tue Mar 26 23:29:35 2019 -0400", "commit_message": "Add support for @verbose=2 to a GET on a collection object. Using this will return the label prop for each item returned by the get. Also added an example of using this to doc/rest.txt.", "files_name": ["doc/rest.txt", "roundup/rest.py"]}, {"commit_id": "f80c62d0a5c1af4b55a7648f5e6df942a64ffb8c", "commit_date": "Thu Mar 28 12:21:40 2019 +0100", "commit_message": "REST: Add key lookup", "files_name": ["doc/rest.txt", "roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "1fecc6aa044914210d035d3399e7655855c8d15e", "commit_date": "Thu Mar 28 18:21:29 2019 +0100", "commit_message": "REST: Bug-fixes", "files_name": ["roundup/rest.py"]}, {"commit_id": "372fa7f5f0908a212a1fc3eb88c7d4e194baff16", "commit_date": "Fri Mar 29 23:57:13 2019 -0400", "commit_message": "Refactored REST code that formats an item for display. A GET on /class_name or /class_name/item_id use the same back end code. So both now support use of @fields (or @attrs) as a comma (or colon) separated list of property names to display.", "files_name": ["roundup/rest.py"]}, {"commit_id": "29d93743bc50e2c12897c7e75113df59db9436be", "commit_date": "Sat Mar 30 00:19:37 2019 -0400", "commit_message": "Handle bad property name in @fields/@attrs. Raise exception and provide useful message.", "files_name": ["roundup/rest.py"]}, {"commit_id": "d0cee934121623bd776c790d091daf3cf24688bb", "commit_date": "Sat Mar 30 16:13:50 2019 -0400", "commit_message": "Fix parse of @fields/@attrs with : as separator. Add tests @verbose and @fields.", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "4c02f7fe1bdb43112b6ee46eadbdaa832e9aa6b7", "commit_date": "Sat Mar 30 16:19:00 2019 -0400", "commit_message": "Try to fix sphinx install failures under python 3.6 and 3.7 by pinning to version 1.8.5. New release of sphinx 2.0 on 28march2019.", "files_name": [".travis.yml"]}, {"commit_id": "660015a4983df6f1b53a3572282bdc657b81af98", "commit_date": "Sat Mar 30 21:15:33 2019 -0400", "commit_message": "When we generate links from URL's in messages, we add rel=\"nofollow\" to combat link spam.  This change turns that into rel=\"nofollow noopener\". This prevents the page at the end of the link from having access to the roundup window that displays the link. Details on the issue are are at:", "files_name": ["CHANGES.txt", "roundup/cgi/templating.py", "test/test_templating.py"]}, {"commit_id": "5f2fb5a172dfc7329a64f9b77f5e5e2839f9e7a8", "commit_date": "Sun Mar 31 21:23:33 2019 -0400", "commit_message": "Set up basic framework for handling versioning of interface.", "files_name": ["roundup/rest.py"]}, {"commit_id": "47f6c88cb7613b2189dfee285df6cc730b3c326d", "commit_date": "Sun Mar 31 21:46:23 2019 -0400", "commit_message": "Move @apiver version extraction code after the input is parsed for json. Otherwise json input causes issues.", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "a40108efc7dd479dd1d005dc7162b220df53f1b9", "commit_date": "Sun Mar 31 22:36:41 2019 -0400", "commit_message": "Move definition/initialization of api_version into the class and out of dispatch. Tests were failing because of this since the tests don't all run through dispatch.", "files_name": ["roundup/rest.py"]}, {"commit_id": "377d1e84b6b88f0f94495f21f50a2c75215dd0b9", "commit_date": "Mon Apr 1 21:53:30 2019 -0400", "commit_message": "Add docs on how to add new rest endpoints.", "files_name": ["doc/rest.txt"]}, {"commit_id": "1372db1614167b6504ebdbbc1f6560f333ec7478", "commit_date": "Wed Apr 3 12:08:18 2019 +0200", "commit_message": "Fix encoding for incoming json requests", "files_name": ["roundup/rest.py"]}, {"commit_id": "ef3cd0685d2a0ddf3b74c82bebfc4641b7debce3", "commit_date": "Wed Apr 3 07:04:29 2019 -0400", "commit_message": "Added a few comments and a test that fails with the pre-patched code and uses POST.", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "4573029740d53fc1197da9571f94edaa08fd7f1e", "commit_date": "Fri Apr 5 19:35:32 2019 -0400", "commit_message": "Add error handling. @apiver was being processed as a search field. Change code to ignore since I can't delete the key from FieldStorage. Trap KeyError and report error to client if a filter field name is invalid. Make error more descriptive in another place where field is invalid.", "files_name": ["roundup/rest.py"]}, {"commit_id": "1367a89d7fd1bcb466f71c27880ce08900c45506", "commit_date": "Sat Apr 6 09:56:06 2019 -0400", "commit_message": "newest psycopg2 release removed the psycopg1 interface we used. Pin library version to last one where psycopg1 existed.", "files_name": [".travis.yml"]}, {"commit_id": "026d3a68b57b890a9f71f5b383b571cda705c552", "commit_date": "Sat Apr 6 09:56:37 2019 -0400", "commit_message": "See if we can ignore some items in codecov that we don't care about testing.", "files_name": [".codecov.yml"]}, {"commit_id": "72b3a45779bcb39e307b6dd90391be1607894560", "commit_date": "Sat Apr 6 10:20:19 2019 -0400", "commit_message": "Exclude cgi/TAL/DummyEngine.py as it looks like a test harness.", "files_name": [".codecov.yml"]}, {"commit_id": "b2caa0b91e524a3cb9a86ca288b67adfb50ed817", "commit_date": "Sun Apr 7 20:17:52 2019 -0400", "commit_message": "Update docs. Correct errors reported by setup.py build_docs.  Add rest interface and link to rest doc to features page. Add link to xmlrpc doc to features page. Add rest doc to index. Update rest doc, hopefully clarify confusing use of parameters in patch action section. Fix code examples in \"Adding new rest endpoints\" section. Fix example adding import of exception.", "files_name": ["doc/features.txt", "doc/index.txt", "doc/rest.txt"]}, {"commit_id": "c095571e7f9f93abd6df2557abcb66d93869acf9", "commit_date": "Sun Apr 7 20:27:25 2019 -0400", "commit_message": "Add CSRF protection to rest code path. Follow same model as for xmlrpc.  The original rest code was developed before the CSRF code was added to xmlrpc.", "files_name": ["roundup/cgi/client.py"]}, {"commit_id": "e81058c36311beaf393e13bd3059a0d2e736ef5d", "commit_date": "Mon Apr 8 19:38:06 2019 -0400", "commit_message": "Properly handle mapping of KeyError to AttributeError in __getattr__ Update doc indicating same mapping in __setattr__.", "files_name": ["roundup/hyperdb.py"]}, {"commit_id": "c8d710800a84bcc86c1a233e1a6ada95d56a9568", "commit_date": "Mon Apr 8 20:00:01 2019 -0400", "commit_message": "Update rest.txt example to include headers required for CSRF validation. Update config doc: X-Requested-With is used with rest as well as xmlrpc.", "files_name": ["doc/rest.txt", "roundup/configuration.py"]}, {"commit_id": "39f8efa3622710ed6cd2b9cd4f7737eebb077d5e", "commit_date": "Mon Apr 8 21:46:21 2019 -0400", "commit_message": "Adding tests for csrf protection for rest. Also test disabling of pretty printing.", "files_name": ["test/mocknull.py", "test/test_cgi.py"]}, {"commit_id": "84c4881f70e47e9d99fc1238c178cc4621d95de2", "commit_date": "Mon Apr 8 22:45:47 2019 -0400", "commit_message": "Change output comparison from strings to comparison on python dicts. String representation of the json data had fields in different order causing failure for python3 compared to python2.", "files_name": ["test/test_cgi.py"]}, {"commit_id": "1eea6953e3d2ce49a90905e8c2bcaf6c7bb58dcf", "commit_date": "Wed Apr 10 17:46:51 2019 -0400", "commit_message": "Change pretty url parameter to @pretty to stop collision with field name.", "files_name": ["roundup/rest.py"]}, {"commit_id": "ef38353fbf2ad633d45a050eaaf26cd6e79cfcdc", "commit_date": "Wed Apr 10 17:56:08 2019 -0400", "commit_message": "Fix OPTIONS responses:", "files_name": ["roundup/rest.py"]}, {"commit_id": "d17fe4554d0954a3659b3efa68f689a9b5967bc3", "commit_date": "Wed Apr 10 18:04:36 2019 -0400", "commit_message": "Add test for @pretty=false format change.", "files_name": ["test/test_cgi.py"]}, {"commit_id": "5d5a3008b7e7a31f6ceccb841df1800267704cd5", "commit_date": "Wed Apr 10 22:43:16 2019 -0400", "commit_message": "Anydbm back end didn't list creator or actor as protected properties.", "files_name": ["CHANGES.txt", "roundup/backends/back_anydbm.py"]}, {"commit_id": "43040dd83e87bcf8d5572764fbce15b1c7bd2a44", "commit_date": "Thu Apr 11 20:54:39 2019 -0400", "commit_message": "Method PUT: ignore specification of protected properties which can not   be set. Filtering them out of the payload list. This lets the result   of a get using:", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "03db880cbab9218e070fbfe4a182abb410422d6a", "commit_date": "Thu Apr 11 21:46:51 2019 -0400", "commit_message": "Add more tests including call to patch an attribute with add and replace; patch a bogus property, delete a bogus property", "files_name": ["test/rest_common.py"]}, {"commit_id": "0180c3276a7cc3c87ce493880e06f117c29f879c", "commit_date": "Sat Apr 13 12:16:15 2019 -0400", "commit_message": "Change some 400 errors to 405 (method not allowed) errors where user is tryng to delete or modify a read only attribute/resource.", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "f071de46ee1f9dc05db247216812935303319843", "commit_date": "Sat Apr 13 12:45:36 2019 -0400", "commit_message": "Add another test case: change protected attribute using patch_attribute.", "files_name": ["test/rest_common.py"]}, {"commit_id": "9e3b79ee94b5146e5e188f148bd01861d39f42f6", "commit_date": "Sat Apr 13 13:53:24 2019 -0400", "commit_message": "Fix issue2551041 - change permission check from \"Create User\" to \"Register User\" in page.html for the responsive and devel templates. (reporter C\u00e9dric Krier)", "files_name": ["CHANGES.txt", "share/roundup/templates/devel/html/page.html", "share/roundup/templates/responsive/html/page.html"]}, {"commit_id": "20f935999ffcfe4a547e9cb213177c94ed970d54", "commit_date": "Sun Apr 14 21:07:11 2019 -0400", "commit_message": "Add support for making an idempotent POST. This allows retrying a POST that was interrupted. It involves creating a post once only (poe) url /rest/data/<class>/@poe/<random_token>. This url acts the same as a post to /rest/data/<class>. However once the @poe url is used, it can't be used for a second POST.", "files_name": ["doc/rest.txt", "roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "99798ecb5ee7b15a43c0cac7ca2c9c32236d092d", "commit_date": "Mon Apr 15 21:41:06 2019 -0400", "commit_message": "Added some more rest testing and make sure api version is valid.", "files_name": ["roundup/rest.py", "test/rest_common.py"]}, {"commit_id": "ad58feea86ea10437e2426072155bdb92efff9f0", "commit_date": "Wed Apr 17 20:35:56 2019 -0400", "commit_message": "Fix exception handling code for case where port already in use. Change e[0] to e.args[0] (old style to new style reference??)  Also wrap call to config.get_server in try/except block and print any exception to disable traceback.", "files_name": ["roundup/scripts/roundup_server.py"]}, {"commit_id": "694bf16edfc853ca91dd3a93e0bf70fd2a5ecc7e", "commit_date": "Sun Apr 21 21:00:06 2019 -0400", "commit_message": "A basic set of tests for admin.py. Triggered by https://issues.roundup-tracker.org/issue2551042", "files_name": ["test/test_admin.py"]}, {"commit_id": "b7baa2d06b683066ba7936db8817071cd44cd186", "commit_date": "Wed Apr 24 17:50:55 2019 -0400", "commit_message": "Documentation additions by Tom Ekberg to add example of performing silent submit. Light editing by John Rouillard.", "files_name": ["doc/customizing.txt"]}, {"commit_id": "bd3337ce64b4ff86d1638af9ac097adea06b1bdf", "commit_date": "Sun Apr 28 18:28:44 2019 -0400", "commit_message": "issue2551042 - add extra \\ to \\w in raw string url_to_regex. Not sure why this is needed. Maybe something changed in how raw strings are interpreted? Without patch causes crash:", "files_name": [".travis.yml", "roundup/rest.py"]}, {"commit_id": "398cba89ee55668c7b6b84db04c7ad060bc8c5f9", "commit_date": "Sun Apr 28 18:44:05 2019 -0400", "commit_message": "3.7 not available in our travis setup. Reverting request for it.", "files_name": [".travis.yml"]}, {"commit_id": "490b715c03e8edf9d0f0d27d7acb56632b9a9f14", "commit_date": "Sat May 11 17:24:58 2019 -0400", "commit_message": "issue2550949: Rate limit password guesses/login attempts.", "files_name": ["CHANGES.txt", "roundup/cgi/actions.py", "roundup/configuration.py", "roundup/rate_limit.py", "test/test_actions.py"]}, {"commit_id": "bc26aa037c79a6314aa28236c7a9f1d043889c4e", "commit_date": "Sat May 11 17:50:00 2019 -0400", "commit_message": "Change access to config from dict to property. This makes doing the mock for testing easier and unbreaks the changes to the tests that I did earlier.", "files_name": ["roundup/cgi/actions.py", "test/test_actions.py"]}, {"commit_id": "37b4121da0cb462d598f1873061e45d5af5dee93", "commit_date": "Sat May 11 18:23:49 2019 -0400", "commit_message": "Added Otk support to db_test_base to make test_cgi work. I think this completes the broken tests from the rate limiting code.", "files_name": ["test/db_test_base.py"]}, {"commit_id": "44fbc81007bfdcaa5eb43df60c5f5fc7c81ec672", "commit_date": "Sat May 11 20:53:06 2019 -0400", "commit_message": "Deactivate failing test till I can get somebody to look at it.  I want the code coverage stats to look at for my changes and I can't get that while tests are failing.", "files_name": ["test/test_cgi.py"]}], "parents": [{"commit_id_before": "911b8909824802abcf10f4bf13e9e194e5fe40ce", "url_before": "https://api.github.com/repos/roundup-tracker/roundup/commits/911b8909824802abcf10f4bf13e9e194e5fe40ce", "html_url_before": "https://github.com/roundup-tracker/roundup/commit/911b8909824802abcf10f4bf13e9e194e5fe40ce"}], "details": [{"raw_url": "https://github.com/roundup-tracker/roundup/raw/a2edc3cba0b5d34005114f6da0251bd9ac2837df/frontends%2Froundup.cgi", "code": "#!/usr/bin/env python\n#\n# Copyright (c) 2001 Bizar Software Pty Ltd (http://www.bizarsoftware.com.au/)\n# This module is free software, and you may redistribute it and/or modify\n# under the same terms as Python, so long as this copyright message and\n# disclaimer are retained in their original form.\n#\n# IN NO EVENT SHALL BIZAR SOFTWARE PTY LTD BE LIABLE TO ANY PARTY FOR\n# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING\n# OUT OF THE USE OF THIS CODE, EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n# BIZAR SOFTWARE PTY LTD SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS ON AN \"AS IS\"\n# BASIS, AND THERE IS NO OBLIGATION WHATSOEVER TO PROVIDE MAINTENANCE,\n# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\n# python version check\nfrom __future__ import print_function\nfrom roundup import version_check\nfrom roundup.i18n import _\nfrom roundup.anypy.strings import s2b, StringIO\nimport sys, time\n\n#\n##  Configuration\n#\n\n# Configuration can also be provided through the OS environment (or via\n# the Apache \"SetEnv\" configuration directive). If the variables\n# documented below are set, they _override_ any configuation defaults\n# given in this file. \n\n# TRACKER_HOMES is a list of trackers, in the form\n# \"NAME=DIR<sep>NAME2=DIR2<sep>...\", where <sep> is the directory path\n# separator (\";\" on Windows, \":\" on Unix). \n\n# Make sure the NAME part doesn't include any url-unsafe characters like \n# spaces, as these confuse the cookie handling in browsers like IE.\n\n# ROUNDUP_LOG is the name of the logfile; if it's empty or does not exist,\n# logging is turned off (unless you changed the default below). \n\n# DEBUG_TO_CLIENT specifies whether debugging goes to the HTTP server (via\n# stderr) or to the web client (via cgitb).\nDEBUG_TO_CLIENT = False\n\n# This indicates where the Roundup tracker lives\nTRACKER_HOMES = {\n#    'example': '/path/to/example',\n}\n\n# Where to log debugging information to. Use an instance of DevNull if you\n# don't want to log anywhere.\nclass DevNull:\n    def write(self, info):\n        pass\n    def close(self):\n        pass\n    def flush(self):\n        pass\n#LOG = open('/var/log/roundup.cgi.log', 'a')\nLOG = DevNull()\n\n#\n##  end configuration\n#\n\n\n#\n# Set up the error handler\n# \ntry:\n    import traceback, cgi\n    from roundup.cgi import cgitb\nexcept:\n    print(\"Content-Type: text/plain\\n\")\n    print(_(\"Failed to import cgitb!\\n\\n\"))\n    s = StringIO()\n    traceback.print_exc(None, s)\n    print(s.getvalue())\n\n\n#\n# Check environment for config items\n#\ndef checkconfig():\n    import os\n    global TRACKER_HOMES, LOG\n\n    # see if there's an environment var. ROUNDUP_INSTANCE_HOMES is the\n    # old name for it.\n    if 'ROUNDUP_INSTANCE_HOMES' in os.environ:\n        homes = os.environ.get('ROUNDUP_INSTANCE_HOMES')\n    else:\n        homes = os.environ.get('TRACKER_HOMES', '')\n    if homes:\n        TRACKER_HOMES = {}\n        for home in homes.split(os.pathsep):\n            try:\n                name, dir = home.split('=', 1)\n            except ValueError:\n                # ignore invalid definitions\n                continue\n            if name and dir:\n                TRACKER_HOMES[name] = dir\n                \n    logname = os.environ.get('ROUNDUP_LOG', '')\n    if logname:\n        LOG = open(logname, 'a')\n\n    # ROUNDUP_DEBUG is checked directly in \"roundup.cgi.client\"\n\n\n#\n# Provide interface to CGI HTTP response handling\n#\nclass RequestWrapper:\n    '''Used to make the CGI server look like a BaseHTTPRequestHandler\n    '''\n    def __init__(self, wfile):\n        self.rfile = sys.stdin\n        self.wfile = wfile\n    def write(self, data):\n        self.wfile.write(data)\n    def send_response(self, code):\n        self.write(s2b('Status: %s\\r\\n'%code))\n    def send_header(self, keyword, value):\n        self.write(s2b(\"%s: %s\\r\\n\" % (keyword, value)))\n    def end_headers(self):\n        self.write(b\"\\r\\n\")\n    def start_response(self, headers, response):\n        self.send_response(response)\n        for key, value in headers:\n            self.send_header(key, value)\n        self.end_headers()\n\n#\n# Main CGI handler\n#\ndef main(out, err):\n    import os\n    import roundup.instance\n    path = os.environ.get('PATH_INFO', '/').split('/')\n    request = RequestWrapper(out)\n    request.path = os.environ.get('PATH_INFO', '/')\n    tracker = path[1]\n    os.environ['TRACKER_NAME'] = tracker\n    os.environ['PATH_INFO'] = '/'.join(path[2:])\n    if tracker in TRACKER_HOMES:\n        # redirect if we need a trailing '/'\n        if len(path) == 2:\n            request.send_response(301)\n            # redirect\n            if os.environ.get('HTTPS', '') == 'on':\n                protocol = 'https'\n            else:\n                protocol = 'http'\n            absolute_url = '%s://%s%s/'%(protocol, os.environ['HTTP_HOST'],\n                os.environ.get('REQUEST_URI', ''))\n            request.send_header('Location', absolute_url)\n            request.end_headers()\n            out.write(b'Moved Permanently')\n        else:\n            tracker_home = TRACKER_HOMES[tracker]\n            tracker = roundup.instance.open(tracker_home)\n            import roundup.cgi.client\n            if hasattr(tracker, 'Client'):\n                client = tracker.Client(tracker, request, os.environ)\n            else:\n                client = roundup.cgi.client.Client(tracker, request, os.environ)\n            try:\n                client.main()\n            except roundup.cgi.client.Unauthorised:\n                request.send_response(403)\n                request.send_header('Content-Type', 'text/html')\n                request.end_headers()\n                out.write(b'Unauthorised')\n            except roundup.cgi.client.NotFound:\n                request.send_response(404)\n                request.send_header('Content-Type', 'text/html')\n                request.end_headers()\n                out.write(s2b('Not found: %s'%cgi.escape(client.path)))\n\n    else:\n        from roundup.anypy import urllib_\n        request.send_response(200)\n        request.send_header('Content-Type', 'text/html')\n        request.end_headers()\n        w = request.write\n        w(s2b(_('<html><head><title>Roundup trackers index</title></head>\\n')))\n        w(s2b(_('<body><h1>Roundup trackers index</h1><ol>\\n')))\n        homes = sorted(TRACKER_HOMES.keys())\n        for tracker in homes:\n            w(s2b(_('<li><a href=\"%(tracker_url)s/index\">%(tracker_name)s</a>\\n')%{\n                'tracker_url': os.environ['SCRIPT_NAME']+'/'+\n                               urllib_.quote(tracker),\n                'tracker_name': cgi.escape(tracker)}))\n        w(s2b(_('</ol></body></html>')))\n\n#\n# Now do the actual CGI handling\n#\nout, err = sys.stdout, sys.stderr\ntry:\n    # force input/output to binary (important for file up/downloads)\n    if sys.platform == \"win32\":\n        import os, msvcrt\n        msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)\n        msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n    checkconfig()\n    sys.stdout = sys.stderr = LOG\n    if sys.version_info[0] > 2:\n        out_buf = out.buffer\n    else:\n        out_buf = out\n    main(out_buf, err)\nexcept SystemExit:\n    pass\nexcept:\n    sys.stdout, sys.stderr = out, err\n    out.write('Content-Type: text/html\\n\\n')\n    if DEBUG_TO_CLIENT:\n        cgitb.handler()\n    else:\n        out.write(cgitb.breaker())\n        ts = time.ctime()\n        out.write('''<p>%s: An error occurred. Please check\n            the server log for more information.</p>'''%ts)\n        print('EXCEPTION AT', ts, file=sys.stderr)\n        traceback.print_exc(0, sys.stderr)\n\nsys.stdout.flush()\nsys.stdout, sys.stderr = out, err\nLOG.close()\n\n# vim: set filetype=python ts=4 sw=4 et si\n", "code_before": "#!/usr/bin/env python\n#\n# Copyright (c) 2001 Bizar Software Pty Ltd (http://www.bizarsoftware.com.au/)\n# This module is free software, and you may redistribute it and/or modify\n# under the same terms as Python, so long as this copyright message and\n# disclaimer are retained in their original form.\n#\n# IN NO EVENT SHALL BIZAR SOFTWARE PTY LTD BE LIABLE TO ANY PARTY FOR\n# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING\n# OUT OF THE USE OF THIS CODE, EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n# BIZAR SOFTWARE PTY LTD SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS ON AN \"AS IS\"\n# BASIS, AND THERE IS NO OBLIGATION WHATSOEVER TO PROVIDE MAINTENANCE,\n# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\n# python version check\nfrom __future__ import print_function\nfrom roundup import version_check\nfrom roundup.i18n import _\nfrom roundup.anypy.strings import s2b, StringIO\nimport sys, time\n\n#\n##  Configuration\n#\n\n# Configuration can also be provided through the OS environment (or via\n# the Apache \"SetEnv\" configuration directive). If the variables\n# documented below are set, they _override_ any configuation defaults\n# given in this file. \n\n# TRACKER_HOMES is a list of trackers, in the form\n# \"NAME=DIR<sep>NAME2=DIR2<sep>...\", where <sep> is the directory path\n# separator (\";\" on Windows, \":\" on Unix). \n\n# Make sure the NAME part doesn't include any url-unsafe characters like \n# spaces, as these confuse the cookie handling in browsers like IE.\n\n# ROUNDUP_LOG is the name of the logfile; if it's empty or does not exist,\n# logging is turned off (unless you changed the default below). \n\n# DEBUG_TO_CLIENT specifies whether debugging goes to the HTTP server (via\n# stderr) or to the web client (via cgitb).\nDEBUG_TO_CLIENT = False\n\n# This indicates where the Roundup tracker lives\nTRACKER_HOMES = {\n#    'example': '/path/to/example',\n}\n\n# Where to log debugging information to. Use an instance of DevNull if you\n# don't want to log anywhere.\nclass DevNull:\n    def write(self, info):\n        pass\n    def close(self):\n        pass\n    def flush(self):\n        pass\n#LOG = open('/var/log/roundup.cgi.log', 'a')\nLOG = DevNull()\n\n#\n##  end configuration\n#\n\n\n#\n# Set up the error handler\n# \ntry:\n    import traceback, cgi\n    from roundup.cgi import cgitb\nexcept:\n    print(\"Content-Type: text/plain\\n\")\n    print(_(\"Failed to import cgitb!\\n\\n\"))\n    s = StringIO()\n    traceback.print_exc(None, s)\n    print(s.getvalue())\n\n\n#\n# Check environment for config items\n#\ndef checkconfig():\n    import os\n    global TRACKER_HOMES, LOG\n\n    # see if there's an environment var. ROUNDUP_INSTANCE_HOMES is the\n    # old name for it.\n    if 'ROUNDUP_INSTANCE_HOMES' in os.environ:\n        homes = os.environ.get('ROUNDUP_INSTANCE_HOMES')\n    else:\n        homes = os.environ.get('TRACKER_HOMES', '')\n    if homes:\n        TRACKER_HOMES = {}\n        for home in homes.split(os.pathsep):\n            try:\n                name, dir = home.split('=', 1)\n            except ValueError:\n                # ignore invalid definitions\n                continue\n            if name and dir:\n                TRACKER_HOMES[name] = dir\n                \n    logname = os.environ.get('ROUNDUP_LOG', '')\n    if logname:\n        LOG = open(logname, 'a')\n\n    # ROUNDUP_DEBUG is checked directly in \"roundup.cgi.client\"\n\n\n#\n# Provide interface to CGI HTTP response handling\n#\nclass RequestWrapper:\n    '''Used to make the CGI server look like a BaseHTTPRequestHandler\n    '''\n    def __init__(self, wfile):\n        self.rfile = sys.stdin\n        self.wfile = wfile\n    def write(self, data):\n        self.wfile.write(data)\n    def send_response(self, code):\n        self.write(s2b('Status: %s\\r\\n'%code))\n    def send_header(self, keyword, value):\n        self.write(s2b(\"%s: %s\\r\\n\" % (keyword, value)))\n    def end_headers(self):\n        self.write(b\"\\r\\n\")\n    def start_response(self, headers, response):\n        self.send_response(response)\n        for key, value in headers:\n            self.send_header(key, value)\n        self.end_headers()\n\n#\n# Main CGI handler\n#\ndef main(out, err):\n    import os\n    import roundup.instance\n    path = os.environ.get('PATH_INFO', '/').split('/')\n    request = RequestWrapper(out)\n    request.path = os.environ.get('PATH_INFO', '/')\n    tracker = path[1]\n    os.environ['TRACKER_NAME'] = tracker\n    os.environ['PATH_INFO'] = '/'.join(path[2:])\n    if tracker in TRACKER_HOMES:\n        # redirect if we need a trailing '/'\n        if len(path) == 2:\n            request.send_response(301)\n            # redirect\n            if os.environ.get('HTTPS', '') == 'on':\n                protocol = 'https'\n            else:\n                protocol = 'http'\n            absolute_url = '%s://%s%s/'%(protocol, os.environ['HTTP_HOST'],\n                os.environ.get('REQUEST_URI', ''))\n            request.send_header('Location', absolute_url)\n            request.end_headers()\n            out.write(b'Moved Permanently')\n        else:\n            tracker_home = TRACKER_HOMES[tracker]\n            tracker = roundup.instance.open(tracker_home)\n            import roundup.cgi.client\n            if hasattr(tracker, 'Client'):\n                client = tracker.Client(tracker, request, os.environ)\n            else:\n                client = roundup.cgi.client.Client(tracker, request, os.environ)\n            try:\n                client.main()\n            except roundup.cgi.client.Unauthorised:\n                request.send_response(403)\n                request.send_header('Content-Type', 'text/html')\n                request.end_headers()\n                out.write(b'Unauthorised')\n            except roundup.cgi.client.NotFound:\n                request.send_response(404)\n                request.send_header('Content-Type', 'text/html')\n                request.end_headers()\n                out.write(s2b('Not found: %s'%client.path))\n\n    else:\n        from roundup.anypy import urllib_\n        request.send_response(200)\n        request.send_header('Content-Type', 'text/html')\n        request.end_headers()\n        w = request.write\n        w(s2b(_('<html><head><title>Roundup trackers index</title></head>\\n')))\n        w(s2b(_('<body><h1>Roundup trackers index</h1><ol>\\n')))\n        homes = sorted(TRACKER_HOMES.keys())\n        for tracker in homes:\n            w(s2b(_('<li><a href=\"%(tracker_url)s/index\">%(tracker_name)s</a>\\n')%{\n                'tracker_url': os.environ['SCRIPT_NAME']+'/'+\n                               urllib_.quote(tracker),\n                'tracker_name': cgi.escape(tracker)}))\n        w(s2b(_('</ol></body></html>')))\n\n#\n# Now do the actual CGI handling\n#\nout, err = sys.stdout, sys.stderr\ntry:\n    # force input/output to binary (important for file up/downloads)\n    if sys.platform == \"win32\":\n        import os, msvcrt\n        msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)\n        msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n    checkconfig()\n    sys.stdout = sys.stderr = LOG\n    if sys.version_info[0] > 2:\n        out_buf = out.buffer\n    else:\n        out_buf = out\n    main(out_buf, err)\nexcept SystemExit:\n    pass\nexcept:\n    sys.stdout, sys.stderr = out, err\n    out.write('Content-Type: text/html\\n\\n')\n    if DEBUG_TO_CLIENT:\n        cgitb.handler()\n    else:\n        out.write(cgitb.breaker())\n        ts = time.ctime()\n        out.write('''<p>%s: An error occurred. Please check\n            the server log for more information.</p>'''%ts)\n        print('EXCEPTION AT', ts, file=sys.stderr)\n        traceback.print_exc(0, sys.stderr)\n\nsys.stdout.flush()\nsys.stdout, sys.stderr = out, err\nLOG.close()\n\n# vim: set filetype=python ts=4 sw=4 et si\n", "patch": "@@ -181,7 +181,7 @@ def main(out, err):\n                 request.send_response(404)\n                 request.send_header('Content-Type', 'text/html')\n                 request.end_headers()\n-                out.write(s2b('Not found: %s'%client.path))\n+                out.write(s2b('Not found: %s'%cgi.escape(client.path)))\n \n     else:\n         from roundup.anypy import urllib_", "file_path": "files/2019_4\\160", "file_language": "cgi", "file_name": "frontends/roundup.cgi", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/roundup-tracker/roundup/raw/a2edc3cba0b5d34005114f6da0251bd9ac2837df/roundup%2Fcgi%2Fwsgi_handler.py", "code": "# WSGI interface for Roundup Issue Tracker\n#\n# This module is free software, you may redistribute it\n# and/or modify under the same terms as Python.\n#\n\nimport os\nimport cgi\nimport weakref\n\nimport roundup.instance\nfrom roundup.cgi import TranslationService\nfrom roundup.anypy import http_\nfrom roundup.anypy.strings import s2b, bs2b\nBaseHTTPRequestHandler = http_.server.BaseHTTPRequestHandler\nDEFAULT_ERROR_MESSAGE = http_.server.DEFAULT_ERROR_MESSAGE\n\n\nclass Writer(object):\n    '''Perform a start_response if need be when we start writing.'''\n    def __init__(self, request):\n        self.request = request #weakref.ref(request)\n    def write(self, data):\n        f = self.request.get_wfile()\n        self.write = lambda data: f(bs2b(data))\n        return self.write(data)\n\nclass RequestDispatcher(object):\n    def __init__(self, home, debug=False, timing=False, lang=None):\n        assert os.path.isdir(home), '%r is not a directory'%(home,)\n        self.home = home\n        self.debug = debug\n        self.timing = timing\n        if lang:\n            self.translator = TranslationService.get_translation(lang,\n                tracker_home=home)\n        else:\n            self.translator = None\n\n    def __call__(self, environ, start_response):\n        \"\"\"Initialize with `apache.Request` object\"\"\"\n        self.environ = environ\n        request = RequestDispatcher(self.home, self.debug, self.timing)\n        request.__start_response = start_response\n\n        request.wfile = Writer(request)\n        request.__wfile = None\n\n        if environ ['REQUEST_METHOD'] == 'OPTIONS':\n            code = 501\n            message, explain = BaseHTTPRequestHandler.responses[code]\n            request.start_response([('Content-Type', 'text/html'),\n                ('Connection', 'close')], code)\n            request.wfile.write(s2b(DEFAULT_ERROR_MESSAGE % locals()))\n            return []\n\n        tracker = roundup.instance.open(self.home, not self.debug)\n\n        # need to strip the leading '/'\n        environ[\"PATH_INFO\"] = environ[\"PATH_INFO\"][1:]\n        if request.timing:\n            environ[\"CGI_SHOW_TIMING\"] = request.timing\n\n        form = cgi.FieldStorage(fp=environ['wsgi.input'], environ=environ)\n\n        client = tracker.Client(tracker, request, environ, form,\n            request.translator)\n        try:\n            client.main()\n        except roundup.cgi.client.NotFound:\n            request.start_response([('Content-Type', 'text/html')], 404)\n            request.wfile.write(s2b('Not found: %s'%cgi.escape(client.path)))\n\n        # all body data has been written using wfile\n        return []\n\n    def start_response(self, headers, response_code):\n        \"\"\"Set HTTP response code\"\"\"\n        message, explain = BaseHTTPRequestHandler.responses[response_code]\n        self.__wfile = self.__start_response('%d %s'%(response_code,\n            message), headers)\n\n    def get_wfile(self):\n        if self.__wfile is None:\n            raise ValueError('start_response() not called')\n        return self.__wfile\n\n", "code_before": "# WSGI interface for Roundup Issue Tracker\n#\n# This module is free software, you may redistribute it\n# and/or modify under the same terms as Python.\n#\n\nimport os\nimport cgi\nimport weakref\n\nimport roundup.instance\nfrom roundup.cgi import TranslationService\nfrom roundup.anypy import http_\nfrom roundup.anypy.strings import s2b, bs2b\nBaseHTTPRequestHandler = http_.server.BaseHTTPRequestHandler\nDEFAULT_ERROR_MESSAGE = http_.server.DEFAULT_ERROR_MESSAGE\n\n\nclass Writer(object):\n    '''Perform a start_response if need be when we start writing.'''\n    def __init__(self, request):\n        self.request = request #weakref.ref(request)\n    def write(self, data):\n        f = self.request.get_wfile()\n        self.write = lambda data: f(bs2b(data))\n        return self.write(data)\n\nclass RequestDispatcher(object):\n    def __init__(self, home, debug=False, timing=False, lang=None):\n        assert os.path.isdir(home), '%r is not a directory'%(home,)\n        self.home = home\n        self.debug = debug\n        self.timing = timing\n        if lang:\n            self.translator = TranslationService.get_translation(lang,\n                tracker_home=home)\n        else:\n            self.translator = None\n\n    def __call__(self, environ, start_response):\n        \"\"\"Initialize with `apache.Request` object\"\"\"\n        self.environ = environ\n        request = RequestDispatcher(self.home, self.debug, self.timing)\n        request.__start_response = start_response\n\n        request.wfile = Writer(request)\n        request.__wfile = None\n\n        if environ ['REQUEST_METHOD'] == 'OPTIONS':\n            code = 501\n            message, explain = BaseHTTPRequestHandler.responses[code]\n            request.start_response([('Content-Type', 'text/html'),\n                ('Connection', 'close')], code)\n            request.wfile.write(s2b(DEFAULT_ERROR_MESSAGE % locals()))\n            return []\n\n        tracker = roundup.instance.open(self.home, not self.debug)\n\n        # need to strip the leading '/'\n        environ[\"PATH_INFO\"] = environ[\"PATH_INFO\"][1:]\n        if request.timing:\n            environ[\"CGI_SHOW_TIMING\"] = request.timing\n\n        form = cgi.FieldStorage(fp=environ['wsgi.input'], environ=environ)\n\n        client = tracker.Client(tracker, request, environ, form,\n            request.translator)\n        try:\n            client.main()\n        except roundup.cgi.client.NotFound:\n            request.start_response([('Content-Type', 'text/html')], 404)\n            request.wfile.write(s2b('Not found: %s'%client.path))\n\n        # all body data has been written using wfile\n        return []\n\n    def start_response(self, headers, response_code):\n        \"\"\"Set HTTP response code\"\"\"\n        message, explain = BaseHTTPRequestHandler.responses[response_code]\n        self.__wfile = self.__start_response('%d %s'%(response_code,\n            message), headers)\n\n    def get_wfile(self):\n        if self.__wfile is None:\n            raise ValueError('start_response() not called')\n        return self.__wfile\n\n", "patch": "@@ -69,7 +69,7 @@ def __call__(self, environ, start_response):\n             client.main()\n         except roundup.cgi.client.NotFound:\n             request.start_response([('Content-Type', 'text/html')], 404)\n-            request.wfile.write(s2b('Not found: %s'%client.path))\n+            request.wfile.write(s2b('Not found: %s'%cgi.escape(client.path)))\n \n         # all body data has been written using wfile\n         return []", "file_path": "files/2019_4\\161", "file_language": "py", "file_name": "roundup/cgi/wsgi_handler.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
