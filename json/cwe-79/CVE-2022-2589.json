{"index": 8880, "cve_id": "CVE-2022-2589", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Cross-site Scripting (XSS) - Reflected in GitHub repository beancount/fava prior to 1.22.3.", "cvss": "6.5", "publish_date": "August 1, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "NONE", "A": "NONE", "commit_id": "68bbb6e39319deb35ab9f18d0b6aa9fa70472539", "commit_message": "create tooltip contents in a xss-safe way", "commit_date": "2022-07-30T08:02:45Z", "project": "beancount/fava", "url": "https://api.github.com/repos/beancount/fava/commits/68bbb6e39319deb35ab9f18d0b6aa9fa70472539", "html_url": "https://github.com/beancount/fava/commit/68bbb6e39319deb35ab9f18d0b6aa9fa70472539", "windows_before": [{"commit_id": "6aba5e77e1ee924c22a4271ea8d5368ddf33672f", "commit_date": "Sat Jul 30 09:48:24 2022 +0200", "commit_message": "lazily create tooltip and notification div", "files_name": ["frontend/src/charts/tooltip.ts", "frontend/src/notifications.ts"]}, {"commit_id": "5e185f5e6c452c394182dd7951a26cd77a118e08", "commit_date": "Sat Jul 30 09:21:16 2022 +0200", "commit_message": "temporarily disable sourcehut Arch build", "files_name": [".builds/archlinux.yml"]}, {"commit_id": "793cefabb88a95e6ead427ac3fa389b616034941", "commit_date": "Tue Jul 26 17:31:46 2022 +0200", "commit_message": "deps", "files_name": ["frontend/package-lock.json"]}, {"commit_id": "ac8b4ea86ef4bb8d3672099f595aa99cb343da47", "commit_date": "Wed Jul 27 22:19:26 2022 +0200", "commit_message": "manifest: remove some excludes", "files_name": ["MANIFEST.in"]}, {"commit_id": "e0eaf228561c569a57a9ae1b22ed57e371e7d019", "commit_date": "Mon Jul 25 20:15:18 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "545f91cc3c74fc79fe5454c113419744667d511f", "commit_date": "Sun Jul 24 11:51:58 2022 +0200", "commit_message": "help: add query chart example", "files_name": ["src/fava/help/features.md"]}, {"commit_id": "25631ce7e0b817e19f89313066d083cb7c301027", "commit_date": "Sun Jul 24 11:39:44 2022 +0200", "commit_message": "docs: add note that one should use recent deps", "files_name": ["docs/development.rst"]}, {"commit_id": "6a1a27716b3d3c4f2840dd4bf1b12c62318ec6fd", "commit_date": "Sun Jul 24 11:27:04 2022 +0200", "commit_message": "editor: indent with tab", "files_name": ["frontend/src/codemirror/setup.ts", "src/fava/help/features.md"]}, {"commit_id": "472f3f9ee70e9ece24581fa2a27caf3eae5ac87f", "commit_date": "Sun Jul 24 11:19:29 2022 +0200", "commit_message": "deps", "files_name": ["frontend/package-lock.json"]}, {"commit_id": "971ae3757daeae8b8b407c8a28072adcc40055cd", "commit_date": "Sun Jul 24 11:15:16 2022 +0200", "commit_message": "add unrealized profit and loss column in Holdings", "files_name": ["src/fava/templates/holdings.html"]}, {"commit_id": "fcb437273676089de935160507c0198a88df43f3", "commit_date": "Sun Jul 24 09:59:45 2022 +0200", "commit_message": "update translations", "files_name": ["src/fava/translations/bg/LC_MESSAGES/messages.po", "src/fava/translations/ca/LC_MESSAGES/messages.po", "src/fava/translations/de/LC_MESSAGES/messages.po", "src/fava/translations/es/LC_MESSAGES/messages.po", "src/fava/translations/fa/LC_MESSAGES/messages.po", "src/fava/translations/fr/LC_MESSAGES/messages.po", "src/fava/translations/nl/LC_MESSAGES/messages.po", "src/fava/translations/pt/LC_MESSAGES/messages.po", "src/fava/translations/ru/LC_MESSAGES/messages.po", "src/fava/translations/sk/LC_MESSAGES/messages.po", "src/fava/translations/sv/LC_MESSAGES/messages.po", "src/fava/translations/uk/LC_MESSAGES/messages.po", "src/fava/translations/zh/LC_MESSAGES/messages.po", "src/fava/translations/zh_Hant_TW/LC_MESSAGES/messages.po"]}, {"commit_id": "b8e87dedd7cf8fd75c58fb65551037d1347aa187", "commit_date": "Sun Jul 24 09:41:48 2022 +0200", "commit_message": "make some more strings translateable", "files_name": ["frontend/src/charts/HierarchyContainer.svelte", "frontend/src/journal/JournalFilters.svelte", "src/fava/templates/_charts.html", "src/fava/translations/babel.conf"]}, {"commit_id": "dc8e5e94f07f4ffac3c19f1d563815085dea140f", "commit_date": "Mon Jul 4 15:39:17 2022 +1000", "commit_message": "add conversion_currencies option", "files_name": ["frontend/src/stores/chart.ts", "frontend/src/stores/index.ts", "src/fava/core/fava_options.py", "src/fava/help/options.md", "tests/test_core_fava_options.py"]}, {"commit_id": "dccfb6a2f4567f35ce2e9a78e24f92ebf946bc9b", "commit_date": "Sat Jul 23 21:06:44 2022 +0200", "commit_message": "fix xss issue in query filter", "files_name": ["frontend/src/modals/EntryContext.svelte", "frontend/src/query/Query.svelte"]}, {"commit_id": "11e0ed360ac4b4a40eda35f6822b7e0ff128535e", "commit_date": "Fri Jul 22 19:36:44 2022 +0200", "commit_message": "fix #1453", "files_name": ["src/fava/templates/_charts.html"]}, {"commit_id": "d2ce787e2c8d1776dbfac742492a986c19a1cd2b", "commit_date": "Tue Jul 12 21:54:55 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json", "frontend/package.json", "frontend/tsconfig.json"]}, {"commit_id": "2cfe7232f9958caad9fbb9c45947c1f223556dcf", "commit_date": "Tue Jul 12 21:49:38 2022 +0200", "commit_message": "[pre-commit.ci] pre-commit autoupdate (#1450)", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "239061c02b0df8e1ed47d34c4a361dc84447452f", "commit_date": "Tue Jul 12 21:48:31 2022 +0200", "commit_message": "update translations", "files_name": ["src/fava/translations/bg/LC_MESSAGES/messages.po", "src/fava/translations/zh/LC_MESSAGES/messages.po", "src/fava/translations/zh_Hant_TW/LC_MESSAGES/messages.po"]}, {"commit_id": "9bb6366423f81dfb3ad997c75630807376a9a58c", "commit_date": "Wed Jul 6 21:36:31 2022 +0200", "commit_message": "fix: precision may be integer 0 (#1445)", "files_name": ["src/fava/core/commodities.py", "tests/__snapshots__/test_json_api.py-test_api_context", "tests/__snapshots__/test_json_api.py-test_api_context-2", "tests/data/long-example.beancount", "tests/test_core_commodities.py"]}, {"commit_id": "39cce56a301be3fed9455fdca6bd20e0dd5bd13d", "commit_date": "Mon Jul 4 20:21:26 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "51c504a4c01ede41cf896324955bb3bf756767f0", "commit_date": "Mon Jul 4 18:07:39 2022 +0200", "commit_message": "context: allow all types of entries", "files_name": ["frontend/src/api.ts", "frontend/src/entries.ts", "frontend/src/helpers.ts", "frontend/src/lib/validation.ts", "frontend/src/modals/EntryContext.svelte"]}, {"commit_id": "6956476f0662664d88dd25c9d04ed7650fe90404", "commit_date": "Mon Jul 4 17:58:57 2022 +0530", "commit_message": "Bugfix: Mark extension generated content as safe", "files_name": ["src/fava/application.py"]}, {"commit_id": "b100959cacbefbfbd180f3c1ee6ed4440311fdb5", "commit_date": "Sun Jul 3 18:04:39 2022 +0200", "commit_message": "changes", "files_name": ["CHANGES"]}, {"commit_id": "9d2d2ab4db4debb01a5b6b1a6d9591f14d71c581", "commit_date": "Sun Jul 3 11:39:31 2022 +0200", "commit_message": "translations", "files_name": ["src/fava/translations/bg/LC_MESSAGES/messages.po", "src/fava/translations/ca/LC_MESSAGES/messages.po", "src/fava/translations/de/LC_MESSAGES/messages.po", "src/fava/translations/es/LC_MESSAGES/messages.po", "src/fava/translations/fa/LC_MESSAGES/messages.po", "src/fava/translations/fr/LC_MESSAGES/messages.po", "src/fava/translations/nl/LC_MESSAGES/messages.po", "src/fava/translations/pt/LC_MESSAGES/messages.po", "src/fava/translations/ru/LC_MESSAGES/messages.po", "src/fava/translations/sk/LC_MESSAGES/messages.po", "src/fava/translations/sv/LC_MESSAGES/messages.po", "src/fava/translations/uk/LC_MESSAGES/messages.po", "src/fava/translations/zh/LC_MESSAGES/messages.po", "src/fava/translations/zh_Hant_TW/LC_MESSAGES/messages.po"]}, {"commit_id": "96c56e2ff25deea4c1681649ca316ed7dfdf3294", "commit_date": "Sun Jul 3 11:27:49 2022 +0200", "commit_message": "more direct imports and some typing", "files_name": ["contrib/scripts.py", "src/fava/application.py", "src/fava/context.py"]}, {"commit_id": "ca9e3882c7b5fbf5273ba52340b9fea6a99f3711", "commit_date": "Thu Jun 30 17:43:08 2022 +0200", "commit_message": "avoid use of |safe filter in templates", "files_name": ["src/fava/application.py", "src/fava/core/file.py", "src/fava/template_filters.py", "src/fava/templates/_layout.html", "src/fava/templates/errors.html", "src/fava/templates/help.html"]}, {"commit_id": "c9f3ee8cd35fb336a8c170187448d64b8f7aae92", "commit_date": "Sat Jul 2 14:31:33 2022 +0200", "commit_message": "fix: fava.core.commodities - remove unused func", "files_name": ["src/fava/core/commodities.py", "tests/test_core_commodities.py"]}, {"commit_id": "72580a65a05963b3460e51fdaf6aded5bd76b423", "commit_date": "Sat Jul 2 14:11:06 2022 +0200", "commit_message": "help: document commodity metadata", "files_name": ["src/fava/help/beancount_syntax.md"]}, {"commit_id": "051305b7e74bb3d31a8799b0586e37e68f58f0d3", "commit_date": "Sat Jul 2 14:06:39 2022 +0200", "commit_message": "frontend: also render numbers according to specified precision", "files_name": ["frontend/src/charts/Sunburst.svelte", "frontend/src/charts/Treemap.svelte", "frontend/src/charts/bar.ts", "frontend/src/charts/line.ts", "frontend/src/format.ts", "frontend/src/stores/index.ts", "src/fava/templates/_layout.html"]}, {"commit_id": "856ec68035b492e3325fb251e8c85a93dd0b711f", "commit_date": "Sat Jul 2 13:35:56 2022 +0200", "commit_message": "commodities: expose precisions on formatter", "files_name": ["src/fava/core/commodities.py", "src/fava/core/number.py", "tests/data/long-example.beancount", "tests/test_core_commodities.py", "tests/test_core_number.py"]}, {"commit_id": "7564872b283e9b832d75229518c002badafceae7", "commit_date": "Sat Jul 2 13:17:35 2022 +0200", "commit_message": "commodities: allow for precision to be specified explicitly", "files_name": ["src/fava/core/commodities.py", "src/fava/core/number.py", "tests/__snapshots__/test_json_api.py-test_api_context", "tests/__snapshots__/test_json_api.py-test_api_context-2", "tests/data/long-example.beancount", "tests/test_core_commodities.py", "tests/test_json_api.py"]}, {"commit_id": "f3b76022ca8389a222679d5b2989285b56aeb61c", "commit_date": "Sat Jul 2 13:03:58 2022 +0200", "commit_message": "fava.core: add module for commodities", "files_name": ["src/fava/core/__init__.py", "src/fava/core/commodities.py", "src/fava/templates/macros/_commodity_macros.html", "tests/test_core.py"]}, {"commit_id": "6ec42909454a882c70fec8097e72ff7071edd10c", "commit_date": "Sun Apr 10 12:19:26 2022 +1000", "commit_message": "Skip price entries in journal table", "files_name": ["src/fava/templates/_journal_table.html"]}, {"commit_id": "307ba72604e1a9c0a81b380657c252cc6cd4f876", "commit_date": "Sat Jul 2 11:39:41 2022 +0200", "commit_message": "tests: bump coverage requirement", "files_name": ["tox.ini"]}, {"commit_id": "6f4bcd5db8603a8baa4cdd190f22d62b0520db46", "commit_date": "Sat May 7 13:39:11 2022 +0200", "commit_message": "explicit filtered ledger", "files_name": ["src/fava/application.py", "src/fava/context.py", "src/fava/core/__init__.py", "src/fava/core/charts.py", "src/fava/core/query_shell.py", "src/fava/ext/portfolio_list/__init__.py", "src/fava/json_api.py", "src/fava/template_filters.py", "src/fava/templates/_charts.html", "src/fava/templates/_tree_table.html", "src/fava/templates/account.html"]}], "windows_after": [{"commit_id": "6aba5e77e1ee924c22a4271ea8d5368ddf33672f", "commit_date": "Sat Jul 30 09:48:24 2022 +0200", "commit_message": "lazily create tooltip and notification div", "files_name": ["frontend/src/charts/tooltip.ts", "frontend/src/notifications.ts"]}, {"commit_id": "d6afda1a7f597ed255b4001b725ef0304b2028b6", "commit_date": "Mon Aug 1 20:55:02 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "421b4c23c7f0b7d75a7f589f6c53891c1f7d954b", "commit_date": "Tue Aug 2 18:12:10 2022 +0200", "commit_message": "lint", "files_name": ["src/fava/application.py", "tests/test_application.py"]}, {"commit_id": "5585ecaa6db58ae2b34358a4ed7cf3d2f9649db6", "commit_date": "Thu Aug 4 18:18:13 2022 +0200", "commit_message": "Revert \"temporarily disable sourcehut Arch build\"", "files_name": [".builds/archlinux.yml"]}, {"commit_id": "dbd6fcb465ba06ed2adb65b20662ec0d46af95dd", "commit_date": "Wed Jul 27 17:46:59 2022 +0200", "commit_message": "simpler serialisation for tags and links", "files_name": ["frontend/src/entries.ts", "frontend/src/entry-forms/Transaction.svelte", "src/fava/serialisation.py", "tests/__snapshots__/test_json_api.py-test_api_context", "tests/test_json_api.py", "tests/test_serialisation.py"]}, {"commit_id": "7e3971195ccbb7978edb7d3df9c4ee09b5b68846", "commit_date": "Fri Aug 5 17:27:18 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json"]}, {"commit_id": "1bfa6cccf2cce6e0402b4e78bd52af247cde5539", "commit_date": "Fri Aug 5 16:29:19 2022 +0200", "commit_message": "fix Flask deprecation warnings; more direct imports", "files_name": ["pyproject.toml", "src/fava/application.py", "src/fava/core/__init__.py", "src/fava/core/_compat.py", "src/fava/core/charts.py", "src/fava/core/documents.py", "src/fava/core/extensions.py", "src/fava/core/ingest.py", "src/fava/core/tree.py", "src/fava/core/watcher.py", "src/fava/ext/auto_commit.py", "src/fava/json_api.py", "src/fava/serialisation.py", "src/fava/template_filters.py", "src/fava/util/__init__.py", "src/fava/util/typing.py", "tests/test_application.py", "tests/test_json_api.py"]}, {"commit_id": "bcf9fb115b300e510e2f09a17166bd29002a7780", "commit_date": "Fri Aug 5 17:14:05 2022 +0200", "commit_message": "remove deprecated FavaLedger attributes", "files_name": ["src/fava/core/__init__.py", "tests/test_core.py"]}, {"commit_id": "6f37698a597f2a54539312b1c18e8e5313877c57", "commit_date": "Fri Aug 5 17:16:29 2022 +0200", "commit_message": "ci: run old_deps in ci; increase min Beancount version", "files_name": [".github/workflows/test.yml", "setup.cfg", "tox.ini"]}, {"commit_id": "da9230b59d46fd4b4bfddf930ee128ae84d1bbaf", "commit_date": "Fri Aug 5 17:52:29 2022 +0200", "commit_message": "tests: add test for Pattern jsonification", "files_name": ["tests/test_core_fava_options.py"]}, {"commit_id": "c3ffeaea3d435d0c57a16643bce7dcef263504cf", "commit_date": "Wed Aug 17 20:00:38 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "contrib/scripts.py", "frontend/package-lock.json", "frontend/package.json"]}, {"commit_id": "7aac283c46bb2cec5a4e26c90eea9c25e3024c0a", "commit_date": "Sat Sep 3 08:59:46 2022 +0200", "commit_message": "query_shell: fix docstrings", "files_name": ["src/fava/core/query_shell.py"]}, {"commit_id": "ef471f37864c99b96555a384bfe9978dcaf349e1", "commit_date": "Sat Sep 3 10:04:22 2022 +0200", "commit_message": "account tree table: use time filter intervals", "files_name": ["src/fava/template_filters.py", "src/fava/templates/_tree_table.html", "src/fava/util/date.py", "tests/test_template_filters.py", "tests/test_util_date.py"]}, {"commit_id": "7b0a3040ca454a0da3a0eb2473b4aa710b35cb76", "commit_date": "Sat Sep 3 16:40:10 2022 +0200", "commit_message": "account tree table: use time filter intervals for table cells", "files_name": ["src/fava/templates/_tree_table.html"]}, {"commit_id": "507e0b41630130607abefcb891a725168ae84d1f", "commit_date": "Fri Sep 16 17:37:12 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json"]}, {"commit_id": "590a1c6c0eb92fbaedb090e949885afb199c9540", "commit_date": "Tue Sep 27 09:51:41 2022 +0200", "commit_message": "lint", "files_name": ["tests/test_template_tree_table.py", "tox.ini"]}, {"commit_id": "37eb212002d18eb27e259ff590b00562fa9aa745", "commit_date": "Tue Sep 27 10:35:41 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json"]}, {"commit_id": "e75d45f77f78603834621d8e414792bd081e559c", "commit_date": "Mon Sep 26 21:15:40 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "c45f37bc6a4d83c9069db35086d18e5593435b4d", "commit_date": "Wed Sep 28 16:35:37 2022 +0200", "commit_message": "respect default_page in ledger links", "files_name": ["src/fava/templates/_layout.html"]}, {"commit_id": "5cd321decdbb5378adfedfc08b5bc9ba010e0fe6", "commit_date": "Wed Sep 28 17:09:15 2022 +0200", "commit_message": "close #1455", "files_name": ["src/fava/templates/_journal_table.html"]}, {"commit_id": "c699a750460f81d7cff9b7f8a792fc100692dd33", "commit_date": "Mon Oct 10 21:49:52 2022 +0000", "commit_message": "[pre-commit.ci] pre-commit autoupdate", "files_name": [".pre-commit-config.yaml"]}, {"commit_id": "5bdd8633ca02242950f4347f5a81d148d6fe7934", "commit_date": "Mon Oct 10 21:04:37 2022 +0200", "commit_message": "deps", "files_name": [".pre-commit-config.yaml", "frontend/package-lock.json"]}, {"commit_id": "eac1323c55fe1a8e251d10de5b3f42608a238188", "commit_date": "Mon Oct 10 22:04:22 2022 +0200", "commit_message": "remove sourcehut builds", "files_name": [".builds/archlinux.yml", ".builds/debian.yml", "MANIFEST.in"]}, {"commit_id": "ed4a427a190cbdbf7ab4ec411728b8c498763b48", "commit_date": "Mon Oct 10 22:09:19 2022 +0200", "commit_message": "a11y", "files_name": ["frontend/css/base.css", "frontend/src/charts/BarChart.svelte", "frontend/src/charts/ChartSwitcher.svelte", "frontend/src/charts/Sunburst.svelte", "frontend/src/charts/Treemap.svelte", "frontend/src/charts/helpers.ts", "frontend/src/documents/Accounts.svelte", "frontend/src/editor/EditorMenu.svelte", "frontend/src/import/FileList.svelte"]}, {"commit_id": "35e9e62e90a7b06c031cec383bb2a4b6ce489f59", "commit_date": "Tue Oct 11 17:59:14 2022 +0200", "commit_message": "charts: minor refactors", "files_name": ["frontend/src/charts/Chart.svelte", "frontend/src/charts/ChartSwitcher.svelte", "frontend/src/charts/HierarchyContainer.svelte", "frontend/src/charts/Sunburst.svelte"]}, {"commit_id": "72c56f9736c181b5a67b64a6ebc637aedfe81eb8", "commit_date": "Tue Oct 11 23:15:28 2022 +0200", "commit_message": "router: refactor; mark some functions private", "files_name": ["frontend/src/editor/SourceEditor.svelte", "frontend/src/import/Import.svelte", "frontend/src/router.ts"]}, {"commit_id": "9b8f6f3ff185ab9d4ce66c1df5d3e65f5eda7467", "commit_date": "Wed Oct 12 18:34:09 2022 +0200", "commit_message": "editor: refactor menu into separate components", "files_name": ["frontend/src/editor/AppMenu.svelte", "frontend/src/editor/AppMenuItem.svelte", "frontend/src/editor/AppMenuSubItem.svelte", "frontend/src/editor/EditorMenu.svelte", "frontend/src/editor/Key.svelte"]}, {"commit_id": "cff82143d890e290d0c629b97b6d36d0ed1e8eb3", "commit_date": "Wed Oct 12 18:43:33 2022 +0200", "commit_message": "ensure all buttons have type", "files_name": ["frontend/src/charts/ChartSwitcher.svelte", "frontend/src/documents/Accounts.svelte", "frontend/src/editor/AppMenuSubItem.svelte", "frontend/src/editor/SaveButton.svelte", "frontend/src/entry-forms/AddMetadataButton.svelte", "frontend/src/entry-forms/EntryMetadata.svelte", "frontend/src/entry-forms/Posting.svelte", "frontend/src/entry-forms/Transaction.svelte", "frontend/src/import/FileList.svelte", "src/fava/templates/_layout.html"]}, {"commit_id": "9aead977e80cd4ea4be2e8624fedd378cb69df2e", "commit_date": "Wed Oct 12 20:24:35 2022 +0200", "commit_message": "ci: update gh actions", "files_name": [".github/workflows/publish.yml", ".github/workflows/test.yml"]}, {"commit_id": "6e5b98a1ceeb7fd6ec9f433b85f0a34b2a1eb499", "commit_date": "Wed Oct 12 20:17:44 2022 +0200", "commit_message": "lint with eslint-plugin-svelte", "files_name": ["frontend/.eslintrc.js", "frontend/package-lock.json", "frontend/package.json"]}, {"commit_id": "d4789f2b80ec539f843b43a83248ac9d4654e2fe", "commit_date": "Wed Oct 12 19:32:34 2022 +0200", "commit_message": "fixes for linting with eslint-plugin-svelte", "files_name": ["frontend/src/AutocompleteInput.svelte", "frontend/src/charts/BarChart.svelte", "frontend/src/charts/ConversionAndInterval.svelte", "frontend/src/charts/HierarchyContainer.svelte", "frontend/src/charts/Sunburst.svelte", "frontend/src/codemirror/setup.ts", "frontend/src/documents/DocumentPreview.svelte", "frontend/src/editor/DocumentPreviewEditor.svelte", "frontend/src/editor/Editor.svelte", "frontend/src/editor/SliceEditor.svelte", "frontend/src/editor/SourceEditor.svelte", "frontend/src/entry-forms/Transaction.svelte", "frontend/src/import/Extract.svelte", "frontend/src/modals/DocumentUpload.svelte", "frontend/src/query/Query.svelte", "frontend/src/sidebar/index.ts"]}, {"commit_id": "3b58bcdea699325115254bdce7f4b9b425e8b8e9", "commit_date": "Wed Oct 12 23:20:26 2022 +0200", "commit_message": "remove unused snapshots", "files_name": ["tests/__snapshots__/test_core_charts.py-test_interval_totals_children", "tests/__snapshots__/test_core_charts.py-test_interval_totals_children-2"]}, {"commit_id": "b72e61aeccaa8b45ebc53abaf8de3f3125bed2a4", "commit_date": "Wed Oct 12 23:02:36 2022 +0200", "commit_message": "ledger-data: test Python->JS roundtrip with snapshot", "files_name": ["frontend/src/codemirror/setup.ts", "frontend/src/documents/DocumentPreview.svelte", "frontend/src/editor/EditorMenu.svelte", "frontend/src/editor/SourceEditor.svelte", "frontend/src/format.ts", "frontend/src/helpers.ts", "frontend/src/main.ts"]}], "parents": [{"commit_id_before": "6aba5e77e1ee924c22a4271ea8d5368ddf33672f", "url_before": "https://api.github.com/repos/beancount/fava/commits/6aba5e77e1ee924c22a4271ea8d5368ddf33672f", "html_url_before": "https://github.com/beancount/fava/commit/6aba5e77e1ee924c22a4271ea8d5368ddf33672f"}], "details": [{"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fcharts%2FScatterPlot.svelte", "code": "<script lang=\"ts\">\n  import { extent } from \"d3-array\";\n  import { axisBottom, axisLeft } from \"d3-axis\";\n  import { quadtree } from \"d3-quadtree\";\n  import { scalePoint, scaleUtc } from \"d3-scale\";\n\n  import { day } from \"../format\";\n\n  import Axis from \"./Axis.svelte\";\n  import { scatterplotScale } from \"./helpers\";\n  import type { ScatterPlotDatum } from \"./scatterplot\";\n  import type { TooltipFindNode } from \"./tooltip\";\n  import { domHelpers, positionedTooltip } from \"./tooltip\";\n\n  export let data: ScatterPlotDatum[];\n  export let width: number;\n\n  const today = new Date();\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 30,\n    left: 70,\n  };\n  const height = 250;\n  $: innerWidth = width - margin.left - margin.right;\n  $: innerHeight = height - margin.top - margin.bottom;\n\n  // Scales\n  $: dateExtent = extent(data, (d) => d.date);\n  $: x = scaleUtc()\n    .domain(dateExtent[0] ? dateExtent : [0, 1])\n    .range([0, innerWidth]);\n  $: y = scalePoint()\n    .padding(1)\n    .domain(data.map((d) => d.type))\n    .range([innerHeight, 0]);\n\n  // Axes\n  $: xAxis = axisBottom(x).tickSizeOuter(0);\n  $: yAxis = axisLeft(y)\n    .tickPadding(6)\n    .tickSize(-innerWidth)\n    .tickFormat((d) => d);\n\n  /** Quadtree for hover. */\n  $: quad = quadtree(\n    data,\n    (d) => x(d.date),\n    (d) => y(d.type) ?? 0\n  );\n\n  function tooltipText(d: ScatterPlotDatum) {\n    return [domHelpers.t(d.description), domHelpers.em(day(d.date))];\n  }\n\n  const tooltipFindNode: TooltipFindNode = (xPos, yPos) => {\n    const d = quad.find(xPos, yPos);\n    return d && [x(d.date), y(d.type) ?? 0, tooltipText(d)];\n  };\n</script>\n\n<svg {width} {height}>\n  <g\n    use:positionedTooltip={tooltipFindNode}\n    transform={`translate(${margin.left},${margin.top})`}\n  >\n    <Axis x axis={xAxis} {innerHeight} />\n    <Axis y axis={yAxis} />\n    <g>\n      {#each data as dot}\n        <circle\n          r=\"5\"\n          fill={scatterplotScale(dot.type)}\n          cx={x(dot.date)}\n          cy={y(dot.type)}\n          class:desaturate={dot.date > today}\n        />\n      {/each}\n    </g>\n  </g>\n</svg>\n\n<style>\n  svg > g {\n    pointer-events: all;\n  }\n\n  .desaturate {\n    filter: saturate(50%);\n  }\n</style>\n", "code_before": "<script lang=\"ts\">\n  import { extent } from \"d3-array\";\n  import { axisBottom, axisLeft } from \"d3-axis\";\n  import { quadtree } from \"d3-quadtree\";\n  import { scalePoint, scaleUtc } from \"d3-scale\";\n\n  import { day } from \"../format\";\n\n  import Axis from \"./Axis.svelte\";\n  import { scatterplotScale } from \"./helpers\";\n  import type { ScatterPlotDatum } from \"./scatterplot\";\n  import type { TooltipFindNode } from \"./tooltip\";\n  import { positionedTooltip } from \"./tooltip\";\n\n  export let data: ScatterPlotDatum[];\n  export let width: number;\n\n  const today = new Date();\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 30,\n    left: 70,\n  };\n  const height = 250;\n  $: innerWidth = width - margin.left - margin.right;\n  $: innerHeight = height - margin.top - margin.bottom;\n\n  // Scales\n  $: dateExtent = extent(data, (d) => d.date);\n  $: x = scaleUtc()\n    .domain(dateExtent[0] ? dateExtent : [0, 1])\n    .range([0, innerWidth]);\n  $: y = scalePoint()\n    .padding(1)\n    .domain(data.map((d) => d.type))\n    .range([innerHeight, 0]);\n\n  // Axes\n  $: xAxis = axisBottom(x).tickSizeOuter(0);\n  $: yAxis = axisLeft(y)\n    .tickPadding(6)\n    .tickSize(-innerWidth)\n    .tickFormat((d) => d);\n\n  /** Quadtree for hover. */\n  $: quad = quadtree(\n    data,\n    (d) => x(d.date),\n    (d) => y(d.type) ?? 0\n  );\n\n  function tooltipText(d: ScatterPlotDatum) {\n    return `${d.description}<em>${day(d.date)}</em>`;\n  }\n\n  const tooltipFindNode: TooltipFindNode = (xPos, yPos) => {\n    const d = quad.find(xPos, yPos);\n    return d && [x(d.date), y(d.type) ?? 0, tooltipText(d)];\n  };\n</script>\n\n<svg {width} {height}>\n  <g\n    use:positionedTooltip={tooltipFindNode}\n    transform={`translate(${margin.left},${margin.top})`}\n  >\n    <Axis x axis={xAxis} {innerHeight} />\n    <Axis y axis={yAxis} />\n    <g>\n      {#each data as dot}\n        <circle\n          r=\"5\"\n          fill={scatterplotScale(dot.type)}\n          cx={x(dot.date)}\n          cy={y(dot.type)}\n          class:desaturate={dot.date > today}\n        />\n      {/each}\n    </g>\n  </g>\n</svg>\n\n<style>\n  svg > g {\n    pointer-events: all;\n  }\n\n  .desaturate {\n    filter: saturate(50%);\n  }\n</style>\n", "patch": "@@ -10,7 +10,7 @@\n   import { scatterplotScale } from \"./helpers\";\n   import type { ScatterPlotDatum } from \"./scatterplot\";\n   import type { TooltipFindNode } from \"./tooltip\";\n-  import { positionedTooltip } from \"./tooltip\";\n+  import { domHelpers, positionedTooltip } from \"./tooltip\";\n \n   export let data: ScatterPlotDatum[];\n   export let width: number;\n@@ -51,7 +51,7 @@\n   );\n \n   function tooltipText(d: ScatterPlotDatum) {\n-    return `${d.description}<em>${day(d.date)}</em>`;\n+    return [domHelpers.t(d.description), domHelpers.em(day(d.date))];\n   }\n \n   const tooltipFindNode: TooltipFindNode = (xPos, yPos) => {", "file_path": "files/2022_8/1660", "file_language": "svelte", "file_name": "frontend/src/charts/ScatterPlot.svelte", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fcharts%2FTreemap.svelte", "code": "<script lang=\"ts\">\n  import { treemap } from \"d3-hierarchy\";\n  import type { HierarchyRectangularNode } from \"d3-hierarchy\";\n\n  import { ctx, formatPercentage } from \"../format\";\n  import { urlForAccount } from \"../helpers\";\n  import router from \"../router\";\n\n  import { treemapScale } from \"./helpers\";\n  import type {\n    AccountHierarchyDatum,\n    AccountHierarchyNode,\n  } from \"./hierarchy\";\n  import { domHelpers, followingTooltip } from \"./tooltip\";\n\n  export let data: AccountHierarchyNode;\n  export let width: number;\n  export let currency: string;\n\n  $: height = Math.min(width / 2.5, 400);\n\n  const tree = treemap<AccountHierarchyDatum>().paddingInner(2).round(true);\n  $: root = tree.size([width, height])(data);\n  $: leaves = root.leaves().filter((d) => d.value);\n\n  function fill(d: AccountHierarchyNode) {\n    const node = d.data.dummy && d.parent ? d.parent : d;\n    if (node.depth === 1 || !node.parent) {\n      return $treemapScale(node.data.account);\n    }\n    return $treemapScale(node.parent.data.account);\n  }\n\n  function tooltipText(d: AccountHierarchyNode) {\n    const val = d.value ?? 0;\n    const rootValue = root.value || 1;\n\n    return [\n      domHelpers.t(\n        `${$ctx.amount(val, currency)} (${formatPercentage(val / rootValue)})`\n      ),\n      domHelpers.em(d.data.account),\n    ];\n  }\n\n  function setVisibility(\n    node: SVGTextElement,\n    param: HierarchyRectangularNode<AccountHierarchyDatum>\n  ) {\n    function update(d: HierarchyRectangularNode<AccountHierarchyDatum>) {\n      const length = node.getComputedTextLength();\n      node.style.visibility =\n        d.x1 - d.x0 > length + 4 && d.y1 - d.y0 > 14 ? \"visible\" : \"hidden\";\n    }\n    update(param);\n    return { update };\n  }\n</script>\n\n<svg {width} {height}>\n  {#each leaves as d}\n    <g\n      transform={`translate(${d.x0},${d.y0})`}\n      use:followingTooltip={() => tooltipText(d)}\n    >\n      <rect fill={fill(d)} width={d.x1 - d.x0} height={d.y1 - d.y0} />\n      <text\n        use:setVisibility={d}\n        on:click={() => router.navigate(urlForAccount(d.data.account))}\n        dy=\".5em\"\n        x={(d.x1 - d.x0) / 2}\n        y={(d.y1 - d.y0) / 2}\n        text-anchor=\"middle\"\n      >\n        {d.data.account.split(\":\").pop() || \"\"}\n      </text>\n    </g>\n  {/each}\n</svg>\n\n<style>\n  svg {\n    shape-rendering: crispedges;\n  }\n\n  text {\n    cursor: pointer;\n  }\n</style>\n", "code_before": "<script lang=\"ts\">\n  import { treemap } from \"d3-hierarchy\";\n  import type { HierarchyRectangularNode } from \"d3-hierarchy\";\n\n  import { ctx, formatPercentage } from \"../format\";\n  import { urlForAccount } from \"../helpers\";\n  import router from \"../router\";\n\n  import { treemapScale } from \"./helpers\";\n  import type {\n    AccountHierarchyDatum,\n    AccountHierarchyNode,\n  } from \"./hierarchy\";\n  import { followingTooltip } from \"./tooltip\";\n\n  export let data: AccountHierarchyNode;\n  export let width: number;\n  export let currency: string;\n\n  $: height = Math.min(width / 2.5, 400);\n\n  const tree = treemap<AccountHierarchyDatum>().paddingInner(2).round(true);\n  $: root = tree.size([width, height])(data);\n  $: leaves = root.leaves().filter((d) => d.value);\n\n  function fill(d: AccountHierarchyNode) {\n    const node = d.data.dummy && d.parent ? d.parent : d;\n    if (node.depth === 1 || !node.parent) {\n      return $treemapScale(node.data.account);\n    }\n    return $treemapScale(node.parent.data.account);\n  }\n\n  function tooltipText(d: AccountHierarchyNode) {\n    const val = d.value ?? 0;\n    const rootValue = root.value || 1;\n\n    return `${$ctx.amount(val, currency)} (${formatPercentage(\n      val / rootValue\n    )})<em>${d.data.account}</em>`;\n  }\n\n  function setVisibility(\n    node: SVGTextElement,\n    param: HierarchyRectangularNode<AccountHierarchyDatum>\n  ) {\n    function update(d: HierarchyRectangularNode<AccountHierarchyDatum>) {\n      const length = node.getComputedTextLength();\n      node.style.visibility =\n        d.x1 - d.x0 > length + 4 && d.y1 - d.y0 > 14 ? \"visible\" : \"hidden\";\n    }\n    update(param);\n    return { update };\n  }\n</script>\n\n<svg {width} {height}>\n  {#each leaves as d}\n    <g\n      transform={`translate(${d.x0},${d.y0})`}\n      use:followingTooltip={() => tooltipText(d)}\n    >\n      <rect fill={fill(d)} width={d.x1 - d.x0} height={d.y1 - d.y0} />\n      <text\n        use:setVisibility={d}\n        on:click={() => router.navigate(urlForAccount(d.data.account))}\n        dy=\".5em\"\n        x={(d.x1 - d.x0) / 2}\n        y={(d.y1 - d.y0) / 2}\n        text-anchor=\"middle\"\n      >\n        {d.data.account.split(\":\").pop() || \"\"}\n      </text>\n    </g>\n  {/each}\n</svg>\n\n<style>\n  svg {\n    shape-rendering: crispedges;\n  }\n\n  text {\n    cursor: pointer;\n  }\n</style>\n", "patch": "@@ -11,7 +11,7 @@\n     AccountHierarchyDatum,\n     AccountHierarchyNode,\n   } from \"./hierarchy\";\n-  import { followingTooltip } from \"./tooltip\";\n+  import { domHelpers, followingTooltip } from \"./tooltip\";\n \n   export let data: AccountHierarchyNode;\n   export let width: number;\n@@ -35,9 +35,12 @@\n     const val = d.value ?? 0;\n     const rootValue = root.value || 1;\n \n-    return `${$ctx.amount(val, currency)} (${formatPercentage(\n-      val / rootValue\n-    )})<em>${d.data.account}</em>`;\n+    return [\n+      domHelpers.t(\n+        `${$ctx.amount(val, currency)} (${formatPercentage(val / rootValue)})`\n+      ),\n+      domHelpers.em(d.data.account),\n+    ];\n   }\n \n   function setVisibility(", "file_path": "files/2022_8/1661", "file_language": "svelte", "file_name": "frontend/src/charts/Treemap.svelte", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fcharts%2Fbar.ts", "code": "import type { Series } from \"d3-shape\";\nimport { stack, stackOffsetDiverging } from \"d3-shape\";\n\nimport type { FormatterContext } from \"../format\";\nimport { ok } from \"../lib/result\";\nimport type { Result } from \"../lib/result\";\nimport { array, date, number, object, record } from \"../lib/validation\";\n\nimport type { ChartContext } from \"./context\";\nimport type { TooltipContent } from \"./tooltip\";\nimport { domHelpers } from \"./tooltip\";\n\nexport interface BarChartDatumValue {\n  currency: string;\n  value: number;\n  budget: number;\n}\n\n/** The data for the bars of one interval. */\nexport interface BarChartDatum {\n  /** The label of this interval. */\n  label: string;\n  /** The date of this interval. */\n  date: Date;\n  /** One value for each (operating) currency. */\n  values: BarChartDatumValue[];\n  /** The balances of the child accounts. */\n  account_balances: Record<string, Record<string, number>>;\n}\n\nexport interface BarChart {\n  type: \"barchart\";\n  data: {\n    /** All accounts that occur as some child account. */\n    accounts: string[];\n    /** The data for the (single) bars for all the intervals in this chart. */\n    bar_groups: BarChartDatum[];\n    /** For each currency, the stacks (one series per account) */\n    stacks: [currency: string, stacks: Series<BarChartDatum, string>[]][];\n    /** Whether this chart contains any stacks (or is just a single account). */\n    hasStackedData: boolean;\n  };\n  tooltipText: (\n    c: FormatterContext,\n    d: BarChartDatum,\n    e: string\n  ) => TooltipContent;\n}\n\nconst bar_validator = array(\n  object({\n    date,\n    budgets: record(number),\n    balance: record(number),\n    account_balances: record(record(number)),\n  })\n);\n\n/**\n * Try to parse a bar chart.\n */\nexport function bar(\n  json: unknown,\n  { currencies, dateFormat }: ChartContext\n): Result<BarChart, string> {\n  const res = bar_validator(json);\n  if (!res.success) {\n    return res;\n  }\n  const parsedData = res.value;\n  const bar_groups = parsedData.map((interval) => ({\n    values: currencies.map((currency) => ({\n      currency,\n      value: interval.balance[currency] ?? 0,\n      budget: interval.budgets[currency] ?? 0,\n    })),\n    date: interval.date,\n    label: dateFormat(interval.date),\n    account_balances: interval.account_balances,\n  }));\n  const accounts = Array.from(\n    new Set(parsedData.map((d) => [...Object.keys(d.account_balances)]).flat(2))\n  ).sort();\n  const hasStackedData = accounts.length > 1;\n\n  const stacks = currencies.map(\n    (currency): [string, Series<BarChartDatum, string>[]] => [\n      currency,\n      stack<BarChartDatum>()\n        .keys(accounts)\n        .value((obj, key) => obj.account_balances[key]?.[currency] ?? 0)\n        .offset(stackOffsetDiverging)(bar_groups),\n    ]\n  );\n\n  return ok({\n    type: \"barchart\" as const,\n    data: { accounts, bar_groups, stacks, hasStackedData },\n    tooltipText: (c, d, e) => {\n      const content: TooltipContent = [];\n      if (e === \"\") {\n        d.values.forEach((a) => {\n          content.push(\n            domHelpers.t(\n              a.budget\n                ? `${c.amount(a.value, a.currency)} / ${c.amount(\n                    a.budget,\n                    a.currency\n                  )}`\n                : c.amount(a.value, a.currency)\n            )\n          );\n          content.push(domHelpers.br());\n        });\n      } else {\n        content.push(domHelpers.em(e));\n        d.values.forEach((a) => {\n          const value = d.account_balances[e]?.[a.currency] ?? 0;\n          content.push(domHelpers.t(`${c.amount(value, a.currency)}`));\n          content.push(domHelpers.br());\n        });\n      }\n      content.push(domHelpers.em(d.label));\n      return content;\n    },\n  });\n}\n", "code_before": "import type { Series } from \"d3-shape\";\nimport { stack, stackOffsetDiverging } from \"d3-shape\";\n\nimport type { FormatterContext } from \"../format\";\nimport { ok } from \"../lib/result\";\nimport type { Result } from \"../lib/result\";\nimport { array, date, number, object, record } from \"../lib/validation\";\n\nimport type { ChartContext } from \"./context\";\n\nexport interface BarChartDatumValue {\n  currency: string;\n  value: number;\n  budget: number;\n}\n\n/** The data for the bars of one interval. */\nexport interface BarChartDatum {\n  /** The label of this interval. */\n  label: string;\n  /** The date of this interval. */\n  date: Date;\n  /** One value for each (operating) currency. */\n  values: BarChartDatumValue[];\n  /** The balances of the child accounts. */\n  account_balances: Record<string, Record<string, number>>;\n}\n\nexport interface BarChart {\n  type: \"barchart\";\n  data: {\n    /** All accounts that occur as some child account. */\n    accounts: string[];\n    /** The data for the (single) bars for all the intervals in this chart. */\n    bar_groups: BarChartDatum[];\n    /** For each currency, the stacks (one series per account) */\n    stacks: [currency: string, stacks: Series<BarChartDatum, string>[]][];\n    /** Whether this chart contains any stacks (or is just a single account). */\n    hasStackedData: boolean;\n  };\n  tooltipText: (c: FormatterContext, d: BarChartDatum, e: string) => string;\n}\n\nconst bar_validator = array(\n  object({\n    date,\n    budgets: record(number),\n    balance: record(number),\n    account_balances: record(record(number)),\n  })\n);\n\n/**\n * Try to parse a bar chart.\n */\nexport function bar(\n  json: unknown,\n  { currencies, dateFormat }: ChartContext\n): Result<BarChart, string> {\n  const res = bar_validator(json);\n  if (!res.success) {\n    return res;\n  }\n  const parsedData = res.value;\n  const bar_groups = parsedData.map((interval) => ({\n    values: currencies.map((currency) => ({\n      currency,\n      value: interval.balance[currency] ?? 0,\n      budget: interval.budgets[currency] ?? 0,\n    })),\n    date: interval.date,\n    label: dateFormat(interval.date),\n    account_balances: interval.account_balances,\n  }));\n  const accounts = Array.from(\n    new Set(parsedData.map((d) => [...Object.keys(d.account_balances)]).flat(2))\n  ).sort();\n  const hasStackedData = accounts.length > 1;\n\n  const stacks = currencies.map(\n    (currency): [string, Series<BarChartDatum, string>[]] => [\n      currency,\n      stack<BarChartDatum>()\n        .keys(accounts)\n        .value((obj, key) => obj.account_balances[key]?.[currency] ?? 0)\n        .offset(stackOffsetDiverging)(bar_groups),\n    ]\n  );\n\n  return ok({\n    type: \"barchart\" as const,\n    data: { accounts, bar_groups, stacks, hasStackedData },\n    tooltipText: (c, d, e) => {\n      let text = \"\";\n      if (e === \"\") {\n        d.values.forEach((a) => {\n          text += c.amount(a.value, a.currency);\n          if (a.budget) {\n            text += ` / ${c.amount(a.budget, a.currency)}`;\n          }\n          text += \"<br>\";\n        });\n      } else {\n        text += `<em>${e}</em>`;\n        d.values.forEach((a) => {\n          const value = d.account_balances[e]?.[a.currency] ?? 0;\n          text += `${c.amount(value, a.currency)}<br>`;\n        });\n      }\n      text += `<em>${d.label}</em>`;\n      return text;\n    },\n  });\n}\n", "patch": "@@ -7,6 +7,8 @@ import type { Result } from \"../lib/result\";\n import { array, date, number, object, record } from \"../lib/validation\";\n \n import type { ChartContext } from \"./context\";\n+import type { TooltipContent } from \"./tooltip\";\n+import { domHelpers } from \"./tooltip\";\n \n export interface BarChartDatumValue {\n   currency: string;\n@@ -38,7 +40,11 @@ export interface BarChart {\n     /** Whether this chart contains any stacks (or is just a single account). */\n     hasStackedData: boolean;\n   };\n-  tooltipText: (c: FormatterContext, d: BarChartDatum, e: string) => string;\n+  tooltipText: (\n+    c: FormatterContext,\n+    d: BarChartDatum,\n+    e: string\n+  ) => TooltipContent;\n }\n \n const bar_validator = array(\n@@ -91,24 +97,31 @@ export function bar(\n     type: \"barchart\" as const,\n     data: { accounts, bar_groups, stacks, hasStackedData },\n     tooltipText: (c, d, e) => {\n-      let text = \"\";\n+      const content: TooltipContent = [];\n       if (e === \"\") {\n         d.values.forEach((a) => {\n-          text += c.amount(a.value, a.currency);\n-          if (a.budget) {\n-            text += ` / ${c.amount(a.budget, a.currency)}`;\n-          }\n-          text += \"<br>\";\n+          content.push(\n+            domHelpers.t(\n+              a.budget\n+                ? `${c.amount(a.value, a.currency)} / ${c.amount(\n+                    a.budget,\n+                    a.currency\n+                  )}`\n+                : c.amount(a.value, a.currency)\n+            )\n+          );\n+          content.push(domHelpers.br());\n         });\n       } else {\n-        text += `<em>${e}</em>`;\n+        content.push(domHelpers.em(e));\n         d.values.forEach((a) => {\n           const value = d.account_balances[e]?.[a.currency] ?? 0;\n-          text += `${c.amount(value, a.currency)}<br>`;\n+          content.push(domHelpers.t(`${c.amount(value, a.currency)}`));\n+          content.push(domHelpers.br());\n         });\n       }\n-      text += `<em>${d.label}</em>`;\n-      return text;\n+      content.push(domHelpers.em(d.label));\n+      return content;\n     },\n   });\n }", "file_path": "files/2022_8/1662", "file_language": "ts", "file_name": "frontend/src/charts/bar.ts", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fcharts%2Fcontext.ts", "code": "import type { Readable } from \"svelte/store\";\nimport { derived } from \"svelte/store\";\n\nimport { currentDateFormat } from \"../format\";\nimport { conversion, currencies, operating_currency } from \"../stores\";\n\nexport type ChartContext = {\n  currencies: string[];\n  dateFormat: (date: Date) => string;\n};\n\n/**\n * The list of operating currencies, adding in the current conversion currency.\n */\nconst operatingCurrenciesWithConversion = derived(\n  [operating_currency, currencies, conversion],\n  ([operating_currency_val, currencies_val, conversion_val]) =>\n    currencies_val.includes(conversion_val) &&\n    !operating_currency_val.includes(conversion_val)\n      ? [...operating_currency_val, conversion_val]\n      : operating_currency_val\n);\n\nexport const chartContext: Readable<ChartContext> = derived(\n  [operatingCurrenciesWithConversion, currentDateFormat],\n  ([currencies_val, dateFormat]) => ({ currencies: currencies_val, dateFormat })\n);\n", "code_before": "import type { Readable } from \"svelte/store\";\nimport { derived } from \"svelte/store\";\n\nimport { currentDateFormat } from \"../format\";\nimport { conversion, operating_currency } from \"../stores\";\n\nexport type ChartContext = {\n  currencies: string[];\n  dateFormat: (date: Date) => string;\n};\n\n/**\n * The list of operating currencies, adding in the current conversion currency.\n */\nconst operatingCurrenciesWithConversion = derived(\n  [operating_currency, conversion],\n  ([operating_currency_val, conversion_val]) => {\n    if (\n      !conversion_val ||\n      [\"at_cost\", \"at_value\", \"units\"].includes(conversion_val) ||\n      operating_currency_val.includes(conversion_val)\n    ) {\n      return operating_currency_val;\n    }\n    return [...operating_currency_val, conversion_val];\n  }\n);\n\nexport const chartContext: Readable<ChartContext> = derived(\n  [operatingCurrenciesWithConversion, currentDateFormat],\n  ([currencies_val, dateFormat]) => ({ currencies: currencies_val, dateFormat })\n);\n", "patch": "@@ -2,7 +2,7 @@ import type { Readable } from \"svelte/store\";\n import { derived } from \"svelte/store\";\n \n import { currentDateFormat } from \"../format\";\n-import { conversion, operating_currency } from \"../stores\";\n+import { conversion, currencies, operating_currency } from \"../stores\";\n \n export type ChartContext = {\n   currencies: string[];\n@@ -13,17 +13,12 @@ export type ChartContext = {\n  * The list of operating currencies, adding in the current conversion currency.\n  */\n const operatingCurrenciesWithConversion = derived(\n-  [operating_currency, conversion],\n-  ([operating_currency_val, conversion_val]) => {\n-    if (\n-      !conversion_val ||\n-      [\"at_cost\", \"at_value\", \"units\"].includes(conversion_val) ||\n-      operating_currency_val.includes(conversion_val)\n-    ) {\n-      return operating_currency_val;\n-    }\n-    return [...operating_currency_val, conversion_val];\n-  }\n+  [operating_currency, currencies, conversion],\n+  ([operating_currency_val, currencies_val, conversion_val]) =>\n+    currencies_val.includes(conversion_val) &&\n+    !operating_currency_val.includes(conversion_val)\n+      ? [...operating_currency_val, conversion_val]\n+      : operating_currency_val\n );\n \n export const chartContext: Readable<ChartContext> = derived(", "file_path": "files/2022_8/1663", "file_language": "ts", "file_name": "frontend/src/charts/context.ts", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fcharts%2Fline.ts", "code": "import type { FormatterContext } from \"../format\";\nimport { day } from \"../format\";\nimport { ok } from \"../lib/result\";\nimport type { Result } from \"../lib/result\";\nimport {\n  array,\n  date,\n  number,\n  object,\n  record,\n  string,\n  tuple,\n} from \"../lib/validation\";\n\nimport type { TooltipContent } from \"./tooltip\";\nimport { domHelpers } from \"./tooltip\";\n\nexport interface LineChartDatum {\n  name: string;\n  date: Date;\n  value: number;\n}\n\nexport type LineChartData = {\n  name: string;\n  values: LineChartDatum[];\n};\n\nexport interface LineChart {\n  type: \"linechart\";\n  data: LineChartData[];\n  tooltipText: (c: FormatterContext, d: LineChartDatum) => TooltipContent;\n}\n\nconst balances_validator = array(object({ date, balance: record(number) }));\n\nexport function balances(json: unknown): Result<LineChart, string> {\n  const res = balances_validator(json);\n  if (!res.success) {\n    return res;\n  }\n  const parsedData = res.value;\n  const groups = new Map<string, LineChartDatum[]>();\n  for (const { date: date_, balance } of parsedData) {\n    Object.entries(balance).forEach(([currency, value]) => {\n      const group = groups.get(currency);\n      const datum = { date: date_, value, name: currency };\n      if (group) {\n        group.push(datum);\n      } else {\n        groups.set(currency, [datum]);\n      }\n    });\n  }\n  const data = [...groups.entries()].map(([name, values]) => ({\n    name,\n    values,\n  }));\n\n  return ok({\n    type: \"linechart\" as const,\n    data,\n    tooltipText: (c, d) => [\n      domHelpers.t(c.amount(d.value, d.name)),\n      domHelpers.em(day(d.date)),\n    ],\n  });\n}\n\nconst commodities_validator = object({\n  quote: string,\n  base: string,\n  prices: array(tuple([date, number])),\n});\n\nexport function commodities(\n  json: unknown,\n  _ctx: unknown,\n  label: string\n): Result<LineChart, string> {\n  const res = commodities_validator(json);\n  if (!res.success) {\n    return res;\n  }\n  const { base, quote, prices } = res.value;\n  const values = prices.map((d) => ({ name: label, date: d[0], value: d[1] }));\n  return ok({\n    type: \"linechart\" as const,\n    data: [{ name: label, values }],\n    tooltipText: (c, d) => [\n      domHelpers.t(`1 ${base} = ${c.amount(d.value, quote)}`),\n      domHelpers.em(day(d.date)),\n    ],\n  });\n}\n", "code_before": "import type { FormatterContext } from \"../format\";\nimport { day } from \"../format\";\nimport { ok } from \"../lib/result\";\nimport type { Result } from \"../lib/result\";\nimport {\n  array,\n  date,\n  number,\n  object,\n  record,\n  string,\n  tuple,\n} from \"../lib/validation\";\n\nexport interface LineChartDatum {\n  name: string;\n  date: Date;\n  value: number;\n}\n\nexport type LineChartData = {\n  name: string;\n  values: LineChartDatum[];\n};\n\nexport interface LineChart {\n  type: \"linechart\";\n  data: LineChartData[];\n  tooltipText: (c: FormatterContext, d: LineChartDatum) => string;\n}\n\nconst balances_validator = array(object({ date, balance: record(number) }));\n\nexport function balances(json: unknown): Result<LineChart, string> {\n  const res = balances_validator(json);\n  if (!res.success) {\n    return res;\n  }\n  const parsedData = res.value;\n  const groups = new Map<string, LineChartDatum[]>();\n  for (const { date: date_, balance } of parsedData) {\n    Object.entries(balance).forEach(([currency, value]) => {\n      const group = groups.get(currency);\n      const datum = { date: date_, value, name: currency };\n      if (group) {\n        group.push(datum);\n      } else {\n        groups.set(currency, [datum]);\n      }\n    });\n  }\n  const data = [...groups.entries()].map(([name, values]) => ({\n    name,\n    values,\n  }));\n\n  return ok({\n    type: \"linechart\" as const,\n    data,\n    tooltipText: (c, d) =>\n      `${c.amount(d.value, d.name)}<em>${day(d.date)}</em>`,\n  });\n}\n\nconst commodities_validator = object({\n  quote: string,\n  base: string,\n  prices: array(tuple([date, number])),\n});\n\nexport function commodities(\n  json: unknown,\n  _ctx: unknown,\n  label: string\n): Result<LineChart, string> {\n  const res = commodities_validator(json);\n  if (!res.success) {\n    return res;\n  }\n  const { base, quote, prices } = res.value;\n  const values = prices.map((d) => ({ name: label, date: d[0], value: d[1] }));\n  return ok({\n    type: \"linechart\" as const,\n    data: [{ name: label, values }],\n    tooltipText(c, d) {\n      return `1 ${base} = ${c.amount(d.value, quote)}<em>${day(d.date)}</em>`;\n    },\n  });\n}\n", "patch": "@@ -12,6 +12,9 @@ import {\n   tuple,\n } from \"../lib/validation\";\n \n+import type { TooltipContent } from \"./tooltip\";\n+import { domHelpers } from \"./tooltip\";\n+\n export interface LineChartDatum {\n   name: string;\n   date: Date;\n@@ -26,7 +29,7 @@ export type LineChartData = {\n export interface LineChart {\n   type: \"linechart\";\n   data: LineChartData[];\n-  tooltipText: (c: FormatterContext, d: LineChartDatum) => string;\n+  tooltipText: (c: FormatterContext, d: LineChartDatum) => TooltipContent;\n }\n \n const balances_validator = array(object({ date, balance: record(number) }));\n@@ -57,8 +60,10 @@ export function balances(json: unknown): Result<LineChart, string> {\n   return ok({\n     type: \"linechart\" as const,\n     data,\n-    tooltipText: (c, d) =>\n-      `${c.amount(d.value, d.name)}<em>${day(d.date)}</em>`,\n+    tooltipText: (c, d) => [\n+      domHelpers.t(c.amount(d.value, d.name)),\n+      domHelpers.em(day(d.date)),\n+    ],\n   });\n }\n \n@@ -82,8 +87,9 @@ export function commodities(\n   return ok({\n     type: \"linechart\" as const,\n     data: [{ name: label, values }],\n-    tooltipText(c, d) {\n-      return `1 ${base} = ${c.amount(d.value, quote)}<em>${day(d.date)}</em>`;\n-    },\n+    tooltipText: (c, d) => [\n+      domHelpers.t(`1 ${base} = ${c.amount(d.value, quote)}`),\n+      domHelpers.em(day(d.date)),\n+    ],\n   });\n }", "file_path": "files/2022_8/1664", "file_language": "ts", "file_name": "frontend/src/charts/line.ts", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fcharts%2Ftooltip.ts", "code": "import { pointer } from \"d3-selection\";\n\n/** The tooltip div, lazily created. */\nconst tooltip = (() => {\n  let value: HTMLDivElement | null = null;\n  return () => {\n    if (value === null) {\n      value = document.createElement(\"div\");\n      value.className = \"tooltip\";\n      document.body.appendChild(value);\n    }\n    return value;\n  };\n})();\n\n/** Hide the tooltip. */\nconst hide = (): void => {\n  const t = tooltip();\n  t.style.opacity = \"0\";\n};\n\n/** Some small utilities to create tooltip contents. */\nexport const domHelpers = {\n  br: () => document.createElement(\"br\"),\n  em: (content: string) => {\n    const em = document.createElement(\"em\");\n    em.textContent = content;\n    return em;\n  },\n  t: (text: string) => document.createTextNode(text),\n};\n\nexport type TooltipContent = (HTMLElement | Text)[];\n\n/**\n * Svelte action to have the given element act on mouse to show a tooltip.\n *\n * The tooltip will be positioned at the cursor and is given a tooltip getter\n * per <g> element.\n */\nexport function followingTooltip(\n  node: SVGElement,\n  text: () => TooltipContent\n): { destroy: () => void; update: (t: () => TooltipContent) => void } {\n  let getter = text;\n  /** Event listener to have the tooltip follow the mouse. */\n  function followMouse(event: MouseEvent): void {\n    const t = tooltip();\n    t.style.opacity = \"1\";\n    t.style.left = `${event.pageX}px`;\n    t.style.top = `${event.pageY - 15}px`;\n  }\n  node.addEventListener(\"mouseenter\", () => {\n    const t = tooltip();\n    t.replaceChildren(...getter());\n  });\n  node.addEventListener(\"mousemove\", followMouse);\n  node.addEventListener(\"mouseleave\", hide);\n\n  return {\n    destroy: hide,\n    update(t: () => TooltipContent): void {\n      getter = t;\n    },\n  };\n}\n\n/** A function to find the closest node and the content to show in the tooltip. */\nexport type TooltipFindNode = (\n  x: number,\n  y: number\n) => [number, number, TooltipContent] | undefined;\n\n/**\n * Svelte action to have the given <g> element act on mouse to show a tooltip.\n *\n * The parameter to the tooltip is a function that takes a position (relative\n * to the container) as input and should return the position of the tooltip,\n * i.e., the found node, again relative to the container and the desired\n * content of the tooltip.\n */\nexport function positionedTooltip(\n  node: SVGGElement,\n  find: TooltipFindNode\n): { destroy: () => void } {\n  function mousemove(event: MouseEvent): void {\n    const [xPointer, yPointer] = pointer(event);\n    const res = find(xPointer, yPointer);\n    const matrix = node.getScreenCTM();\n    if (res && matrix) {\n      const [x, y, content] = res;\n      const t = tooltip();\n      t.style.opacity = \"1\";\n      t.replaceChildren(...content);\n      t.style.left = `${window.scrollX + x + matrix.e}px`;\n      t.style.top = `${window.scrollY + y + matrix.f - 15}px`;\n    } else {\n      hide();\n    }\n  }\n  node.addEventListener(\"mousemove\", mousemove);\n  node.addEventListener(\"mouseleave\", hide);\n\n  return {\n    destroy: hide,\n  };\n}\n", "code_before": "import { pointer } from \"d3-selection\";\n\n/** The tooltip div, lazily created. */\nconst tooltip = (() => {\n  let value: HTMLDivElement | null = null;\n  return () => {\n    if (value === null) {\n      value = document.createElement(\"div\");\n      value.className = \"tooltip\";\n      document.body.appendChild(value);\n    }\n    return value;\n  };\n})();\n\n/** Hide the tooltip. */\nconst hide = (): void => {\n  const t = tooltip();\n  t.style.opacity = \"0\";\n};\n\n/**\n * Svelte action to have the given element act on mouse to show a tooltip.\n *\n * The tooltip will be positioned at the cursor and is given a tooltip getter\n * per <g> element.\n */\nexport function followingTooltip(\n  node: SVGElement,\n  text: () => string\n): { destroy: () => void; update: (t: () => string) => void } {\n  let getter = text;\n  /** Event listener to have the tooltip follow the mouse. */\n  function followMouse(event: MouseEvent): void {\n    const t = tooltip();\n    t.style.opacity = \"1\";\n    t.style.left = `${event.pageX}px`;\n    t.style.top = `${event.pageY - 15}px`;\n  }\n  node.addEventListener(\"mouseenter\", () => {\n    const t = tooltip();\n    t.innerHTML = getter();\n  });\n  node.addEventListener(\"mousemove\", followMouse);\n  node.addEventListener(\"mouseleave\", hide);\n\n  return {\n    destroy: hide,\n    update(t: () => string): void {\n      getter = t;\n    },\n  };\n}\n\n/** A function to find the closest node and the content to show in the tooltip. */\nexport type TooltipFindNode = (\n  x: number,\n  y: number\n) => [number, number, string] | undefined;\n\n/**\n * Svelte action to have the given <g> element act on mouse to show a tooltip.\n *\n * The parameter to the tooltip is a function that takes a position (relative\n * to the container) as input and should return the position of the tooltip,\n * i.e., the found node, again relative to the container and the desired\n * content of the tooltip.\n */\nexport function positionedTooltip(\n  node: SVGGElement,\n  find: TooltipFindNode\n): { destroy: () => void } {\n  function mousemove(event: MouseEvent): void {\n    const [xPointer, yPointer] = pointer(event);\n    const res = find(xPointer, yPointer);\n    const matrix = node.getScreenCTM();\n    if (res && matrix) {\n      const [x, y, content] = res;\n      const t = tooltip();\n      t.style.opacity = \"1\";\n      t.innerHTML = content;\n      t.style.left = `${window.scrollX + x + matrix.e}px`;\n      t.style.top = `${window.scrollY + y + matrix.f - 15}px`;\n    } else {\n      hide();\n    }\n  }\n  node.addEventListener(\"mousemove\", mousemove);\n  node.addEventListener(\"mouseleave\", hide);\n\n  return {\n    destroy: hide,\n  };\n}\n", "patch": "@@ -19,6 +19,19 @@ const hide = (): void => {\n   t.style.opacity = \"0\";\n };\n \n+/** Some small utilities to create tooltip contents. */\n+export const domHelpers = {\n+  br: () => document.createElement(\"br\"),\n+  em: (content: string) => {\n+    const em = document.createElement(\"em\");\n+    em.textContent = content;\n+    return em;\n+  },\n+  t: (text: string) => document.createTextNode(text),\n+};\n+\n+export type TooltipContent = (HTMLElement | Text)[];\n+\n /**\n  * Svelte action to have the given element act on mouse to show a tooltip.\n  *\n@@ -27,8 +40,8 @@ const hide = (): void => {\n  */\n export function followingTooltip(\n   node: SVGElement,\n-  text: () => string\n-): { destroy: () => void; update: (t: () => string) => void } {\n+  text: () => TooltipContent\n+): { destroy: () => void; update: (t: () => TooltipContent) => void } {\n   let getter = text;\n   /** Event listener to have the tooltip follow the mouse. */\n   function followMouse(event: MouseEvent): void {\n@@ -39,14 +52,14 @@ export function followingTooltip(\n   }\n   node.addEventListener(\"mouseenter\", () => {\n     const t = tooltip();\n-    t.innerHTML = getter();\n+    t.replaceChildren(...getter());\n   });\n   node.addEventListener(\"mousemove\", followMouse);\n   node.addEventListener(\"mouseleave\", hide);\n \n   return {\n     destroy: hide,\n-    update(t: () => string): void {\n+    update(t: () => TooltipContent): void {\n       getter = t;\n     },\n   };\n@@ -56,7 +69,7 @@ export function followingTooltip(\n export type TooltipFindNode = (\n   x: number,\n   y: number\n-) => [number, number, string] | undefined;\n+) => [number, number, TooltipContent] | undefined;\n \n /**\n  * Svelte action to have the given <g> element act on mouse to show a tooltip.\n@@ -78,7 +91,7 @@ export function positionedTooltip(\n       const [x, y, content] = res;\n       const t = tooltip();\n       t.style.opacity = \"1\";\n-      t.innerHTML = content;\n+      t.replaceChildren(...content);\n       t.style.left = `${window.scrollX + x + matrix.e}px`;\n       t.style.top = `${window.scrollY + y + matrix.f - 15}px`;\n     } else {", "file_path": "files/2022_8/1665", "file_language": "ts", "file_name": "frontend/src/charts/tooltip.ts", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 1}, {"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fkeyboard-shortcuts.ts", "code": "/**\n * Add a tooltip showing the keyboard shortcut over the target element.\n * @param target - The target element to show the tooltip on.\n * @returns A function to remove event handler.\n */\nfunction showTooltip(target: HTMLElement): () => void {\n  const tooltip = document.createElement(\"div\");\n  const isHidden = target.classList.contains(\"hidden\");\n  if (isHidden) {\n    target.classList.remove(\"hidden\");\n  }\n  tooltip.className = \"keyboard-tooltip\";\n  tooltip.textContent = target.getAttribute(\"data-key\") ?? \"\";\n  document.body.appendChild(tooltip);\n  const parentCoords = target.getBoundingClientRect();\n  // Padded 10px to the left if there is space or centered otherwise\n  const left =\n    parentCoords.left +\n    Math.min((target.offsetWidth - tooltip.offsetWidth) / 2, 10);\n  const top =\n    parentCoords.top + (target.offsetHeight - tooltip.offsetHeight) / 2;\n  tooltip.style.left = `${left}px`;\n  tooltip.style.top = `${top + window.pageYOffset}px`;\n  return (): void => {\n    tooltip.remove();\n    if (isHidden) {\n      target.classList.add(\"hidden\");\n    }\n  };\n}\n\n/**\n * Show all keyboard shortcut tooltips.\n */\nfunction showTooltips(): () => void {\n  const removes: (() => void)[] = [];\n  document.querySelectorAll(\"[data-key]\").forEach((el) => {\n    if (el instanceof HTMLElement) {\n      removes.push(showTooltip(el));\n    }\n  });\n  return (): void => {\n    removes.forEach((r) => r());\n  };\n}\n\n/**\n * Ignore events originating from editable elements.\n * @param element - The element to check.\n * @returns true if the element is one of input/select/textarea or a\n *          contentEditable element.\n */\nfunction isEditableElement(element: EventTarget | null): boolean {\n  return (\n    element instanceof HTMLElement &&\n    (element instanceof HTMLInputElement ||\n      element instanceof HTMLSelectElement ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable)\n  );\n}\n\n/** A handler function or an element to click. */\ntype KeyboardShortcutAction = ((event: KeyboardEvent) => void) | HTMLElement;\nconst keyboardShortcuts = new Map<string, KeyboardShortcutAction>();\n// The last typed character to check for sequences of two keys.\nlet lastChar = \"\";\n\n/**\n * Handle a `keydown` event on the document.\n *\n * Dispatch to the relevant handler.\n */\nfunction keydown(event: KeyboardEvent): void {\n  if (isEditableElement(event.target)) {\n    // ignore events in editable elements.\n    return;\n  }\n  let eventKey = event.key;\n  if (event.metaKey) {\n    eventKey = `Meta+${eventKey}`;\n  }\n  if (event.altKey) {\n    eventKey = `Alt+${eventKey}`;\n  }\n  if (event.ctrlKey) {\n    eventKey = `Control+${eventKey}`;\n  }\n  const lastTwoKeys = `${lastChar} ${eventKey}`;\n  const handler =\n    keyboardShortcuts.get(lastTwoKeys) ?? keyboardShortcuts.get(eventKey);\n  if (handler) {\n    if (handler instanceof HTMLInputElement) {\n      event.preventDefault();\n      handler.focus();\n    } else if (handler instanceof HTMLElement) {\n      handler.click();\n    } else {\n      handler(event);\n    }\n  }\n  if (event.key !== \"Alt\" && event.key !== \"Control\" && event.key !== \"Shift\") {\n    lastChar = eventKey;\n  }\n}\n\ndocument.addEventListener(\"keydown\", keydown);\n\n/** A type to specify a platform-dependent keyboard shortcut. */\nexport type KeySpec = string | { key: string; mac: string };\n\nconst currentPlatform: \"mac\" | \"key\" =\n  typeof navigator !== \"undefined\" && /Mac/.test(navigator.platform)\n    ? \"mac\"\n    : \"key\";\n\nexport const modKey = currentPlatform === \"mac\" ? \"Cmd\" : \"Ctrl\";\n\n/**\n * Get the keyboard key specifier string for the current platform.\n * @param keySpec - The key spec.\n */\nexport function getKeySpecKey(keySpec: KeySpec): string {\n  if (typeof keySpec === \"string\") {\n    return keySpec;\n  }\n  return currentPlatform === \"mac\" ? keySpec.mac : keySpec.key;\n}\n\n/**\n * Bind an event handler to a key.\n * @param key - The key to bind.\n * @param handler - The callback to run on key press.\n * @returns A function to unbind the keyboard handler.\n */\nexport function bindKey(\n  keySpec: KeySpec,\n  handler: KeyboardShortcutAction\n): () => void {\n  const key = getKeySpecKey(keySpec);\n  const sequence = key.split(\" \");\n  if (sequence.length > 2) {\n    // eslint-disable-next-line no-console\n    console.error(\"Only key sequences of length <=2 are supported: \", key);\n  }\n  if (keyboardShortcuts.has(key)) {\n    // eslint-disable-next-line no-console\n    console.warn(\"Duplicate keyboard shortcut: \", key, handler);\n  }\n  keyboardShortcuts.set(key, handler);\n  return (): void => {\n    keyboardShortcuts.delete(key);\n  };\n}\n\n/**\n * A svelte action to attach a global keyboard shortcut.\n *\n * This will attach a listener for the given key (or key sequence of length 2).\n * This listener will focus the given node if it is an <input> element and\n * trigger a click on it otherwise.\n */\nexport function keyboardShortcut(\n  node: HTMLElement,\n  key?: string\n): { destroy?: () => void } {\n  if (!key) {\n    return {};\n  }\n  node.setAttribute(\"data-key\", key);\n  const destroy = bindKey(key, node);\n\n  return { destroy };\n}\n\n/**\n * Register keyboard shortcuts for all newly added elements with a\n * `data-keyboard-shortcut` attribute.\n */\nexport function initCurrentKeyboardShortcuts(): void {\n  // clean up\n  for (const [key, action] of keyboardShortcuts.entries()) {\n    if (action instanceof HTMLElement && !document.contains(action)) {\n      keyboardShortcuts.delete(key);\n    }\n  }\n  document.querySelectorAll(\"[data-keyboard-shortcut]\").forEach((element) => {\n    const key = element.getAttribute(\"data-keyboard-shortcut\");\n    if (key && element instanceof HTMLElement) {\n      element.removeAttribute(\"data-keyboard-shortcut\");\n      element.setAttribute(\"data-key\", key);\n      bindKey(key, element);\n    }\n  });\n}\n\n/**\n * Register the keys to show/hide the tooltips\n */\nexport function initGlobalKeyboardShortcuts(): void {\n  bindKey(\"?\", () => {\n    const hide = showTooltips();\n    const once = () => {\n      hide();\n      document.removeEventListener(\"mousedown\", once);\n      document.removeEventListener(\"keydown\", once);\n    };\n    document.addEventListener(\"mousedown\", once);\n    document.addEventListener(\"keydown\", once);\n  });\n}\n", "code_before": "/**\n * Add a tooltip showing the keyboard shortcut over the target element.\n * @param target - The target element to show the tooltip on.\n * @returns A function to remove event handler.\n */\nfunction showTooltip(target: HTMLElement): () => void {\n  const tooltip = document.createElement(\"div\");\n  const isHidden = target.classList.contains(\"hidden\");\n  if (isHidden) {\n    target.classList.remove(\"hidden\");\n  }\n  tooltip.className = \"keyboard-tooltip\";\n  tooltip.innerHTML = target.getAttribute(\"data-key\") || \"\";\n  document.body.appendChild(tooltip);\n  const parentCoords = target.getBoundingClientRect();\n  // Padded 10px to the left if there is space or centered otherwise\n  const left =\n    parentCoords.left +\n    Math.min((target.offsetWidth - tooltip.offsetWidth) / 2, 10);\n  const top =\n    parentCoords.top + (target.offsetHeight - tooltip.offsetHeight) / 2;\n  tooltip.style.left = `${left}px`;\n  tooltip.style.top = `${top + window.pageYOffset}px`;\n  return (): void => {\n    tooltip.remove();\n    if (isHidden) {\n      target.classList.add(\"hidden\");\n    }\n  };\n}\n\n/**\n * Show all keyboard shortcut tooltips.\n */\nfunction showTooltips(): () => void {\n  const removes: (() => void)[] = [];\n  document.querySelectorAll(\"[data-key]\").forEach((el) => {\n    if (el instanceof HTMLElement) {\n      removes.push(showTooltip(el));\n    }\n  });\n  return (): void => {\n    removes.forEach((r) => r());\n  };\n}\n\n/**\n * Ignore events originating from editable elements.\n * @param element - The element to check.\n * @returns true if the element is one of input/select/textarea or a\n *          contentEditable element.\n */\nfunction isEditableElement(element: EventTarget | null): boolean {\n  return (\n    element instanceof HTMLElement &&\n    (element instanceof HTMLInputElement ||\n      element instanceof HTMLSelectElement ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable)\n  );\n}\n\n/** A handler function or an element to click. */\ntype KeyboardShortcutAction = ((event: KeyboardEvent) => void) | HTMLElement;\nconst keyboardShortcuts = new Map<string, KeyboardShortcutAction>();\n// The last typed character to check for sequences of two keys.\nlet lastChar = \"\";\n\n/**\n * Handle a `keydown` event on the document.\n *\n * Dispatch to the relevant handler.\n */\nfunction keydown(event: KeyboardEvent): void {\n  if (isEditableElement(event.target)) {\n    // ignore events in editable elements.\n    return;\n  }\n  let eventKey = event.key;\n  if (event.metaKey) {\n    eventKey = `Meta+${eventKey}`;\n  }\n  if (event.altKey) {\n    eventKey = `Alt+${eventKey}`;\n  }\n  if (event.ctrlKey) {\n    eventKey = `Control+${eventKey}`;\n  }\n  const lastTwoKeys = `${lastChar} ${eventKey}`;\n  const handler =\n    keyboardShortcuts.get(lastTwoKeys) ?? keyboardShortcuts.get(eventKey);\n  if (handler) {\n    if (handler instanceof HTMLInputElement) {\n      event.preventDefault();\n      handler.focus();\n    } else if (handler instanceof HTMLElement) {\n      handler.click();\n    } else {\n      handler(event);\n    }\n  }\n  if (event.key !== \"Alt\" && event.key !== \"Control\" && event.key !== \"Shift\") {\n    lastChar = eventKey;\n  }\n}\n\ndocument.addEventListener(\"keydown\", keydown);\n\n/** A type to specify a platform-dependent keyboard shortcut. */\nexport type KeySpec = string | { key: string; mac: string };\n\nconst currentPlatform: \"mac\" | \"key\" =\n  typeof navigator !== \"undefined\" && /Mac/.test(navigator.platform)\n    ? \"mac\"\n    : \"key\";\n\nexport const modKey = currentPlatform === \"mac\" ? \"Cmd\" : \"Ctrl\";\n\n/**\n * Get the keyboard key specifier string for the current platform.\n * @param keySpec - The key spec.\n */\nexport function getKeySpecKey(keySpec: KeySpec): string {\n  if (typeof keySpec === \"string\") {\n    return keySpec;\n  }\n  return currentPlatform === \"mac\" ? keySpec.mac : keySpec.key;\n}\n\n/**\n * Bind an event handler to a key.\n * @param key - The key to bind.\n * @param handler - The callback to run on key press.\n * @returns A function to unbind the keyboard handler.\n */\nexport function bindKey(\n  keySpec: KeySpec,\n  handler: KeyboardShortcutAction\n): () => void {\n  const key = getKeySpecKey(keySpec);\n  const sequence = key.split(\" \");\n  if (sequence.length > 2) {\n    // eslint-disable-next-line no-console\n    console.error(\"Only key sequences of length <=2 are supported: \", key);\n  }\n  if (keyboardShortcuts.has(key)) {\n    // eslint-disable-next-line no-console\n    console.warn(\"Duplicate keyboard shortcut: \", key, handler);\n  }\n  keyboardShortcuts.set(key, handler);\n  return (): void => {\n    keyboardShortcuts.delete(key);\n  };\n}\n\n/**\n * A svelte action to attach a global keyboard shortcut.\n *\n * This will attach a listener for the given key (or key sequence of length 2).\n * This listener will focus the given node if it is an <input> element and\n * trigger a click on it otherwise.\n */\nexport function keyboardShortcut(\n  node: HTMLElement,\n  key?: string\n): { destroy?: () => void } {\n  if (!key) {\n    return {};\n  }\n  node.setAttribute(\"data-key\", key);\n  const destroy = bindKey(key, node);\n\n  return { destroy };\n}\n\n/**\n * Register keyboard shortcuts for all newly added elements with a\n * `data-keyboard-shortcut` attribute.\n */\nexport function initCurrentKeyboardShortcuts(): void {\n  // clean up\n  for (const [key, action] of keyboardShortcuts.entries()) {\n    if (action instanceof HTMLElement && !document.contains(action)) {\n      keyboardShortcuts.delete(key);\n    }\n  }\n  document.querySelectorAll(\"[data-keyboard-shortcut]\").forEach((element) => {\n    const key = element.getAttribute(\"data-keyboard-shortcut\");\n    if (key && element instanceof HTMLElement) {\n      element.removeAttribute(\"data-keyboard-shortcut\");\n      element.setAttribute(\"data-key\", key);\n      bindKey(key, element);\n    }\n  });\n}\n\n/**\n * Register the keys to show/hide the tooltips\n */\nexport function initGlobalKeyboardShortcuts(): void {\n  bindKey(\"?\", () => {\n    const hide = showTooltips();\n    const once = () => {\n      hide();\n      document.removeEventListener(\"mousedown\", once);\n      document.removeEventListener(\"keydown\", once);\n    };\n    document.addEventListener(\"mousedown\", once);\n    document.addEventListener(\"keydown\", once);\n  });\n}\n", "patch": "@@ -10,7 +10,7 @@ function showTooltip(target: HTMLElement): () => void {\n     target.classList.remove(\"hidden\");\n   }\n   tooltip.className = \"keyboard-tooltip\";\n-  tooltip.innerHTML = target.getAttribute(\"data-key\") || \"\";\n+  tooltip.textContent = target.getAttribute(\"data-key\") ?? \"\";\n   document.body.appendChild(tooltip);\n   const parentCoords = target.getBoundingClientRect();\n   // Padded 10px to the left if there is space or centered otherwise", "file_path": "files/2022_8/1666", "file_language": "ts", "file_name": "frontend/src/keyboard-shortcuts.ts", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/beancount/fava/raw/68bbb6e39319deb35ab9f18d0b6aa9fa70472539/frontend%2Fsrc%2Fsidebar%2Findex.ts", "code": "/**\n * This script updates the links and error count in the sidebar as well as\n * toggling the sidebar on mobile.\n */\n\nimport { errorCount } from \"../stores\";\n\nexport function updateSidebar(): void {\n  document.querySelectorAll(\"aside a\").forEach((el) => {\n    el.classList.remove(\"selected\");\n    const href = el.getAttribute(\"href\");\n    if (\n      !el.hasAttribute(\"data-remote\") &&\n      href?.includes(window.location.pathname) &&\n      !el.matches(\".submenu a\")\n    ) {\n      el.classList.add(\"selected\");\n    }\n  });\n}\n\nexport function initSidebar(): void {\n  const errorCountEl = document.getElementById(\"error-count\");\n  if (errorCountEl instanceof HTMLLIElement) {\n    errorCount.subscribe((errorCount_val) => {\n      errorCountEl.classList.toggle(\"hidden\", errorCount_val === 0);\n      const span = errorCountEl.querySelector(\"span\");\n      if (span) {\n        span.textContent = `${errorCount_val}`;\n      }\n    });\n  }\n\n  const asideButton = document.getElementById(\"aside-button\");\n  if (asideButton instanceof HTMLButtonElement) {\n    asideButton.addEventListener(\"click\", () => {\n      document.querySelector(\"aside\")?.classList.toggle(\"active\");\n      asideButton.classList.toggle(\"active\");\n    });\n  }\n}\n", "code_before": "/**\n * This script updates the links and error count in the sidebar as well as\n * toggling the sidebar on mobile.\n */\n\nimport { errorCount } from \"../stores\";\n\nexport function updateSidebar(): void {\n  document.querySelectorAll(\"aside a\").forEach((el) => {\n    el.classList.remove(\"selected\");\n    const href = el.getAttribute(\"href\");\n    if (\n      !el.hasAttribute(\"data-remote\") &&\n      href?.includes(window.location.pathname) &&\n      !el.matches(\".submenu a\")\n    ) {\n      el.classList.add(\"selected\");\n    }\n  });\n}\n\nexport function initSidebar(): void {\n  const errorCountEl = document.getElementById(\"error-count\");\n  if (errorCountEl instanceof HTMLLIElement) {\n    errorCount.subscribe((errorCount_val) => {\n      errorCountEl.classList.toggle(\"hidden\", errorCount_val === 0);\n      const span = errorCountEl.querySelector(\"span\");\n      if (span) {\n        span.innerHTML = `${errorCount_val}`;\n      }\n    });\n  }\n\n  const asideButton = document.getElementById(\"aside-button\");\n  if (asideButton instanceof HTMLButtonElement) {\n    asideButton.addEventListener(\"click\", () => {\n      document.querySelector(\"aside\")?.classList.toggle(\"active\");\n      asideButton.classList.toggle(\"active\");\n    });\n  }\n}\n", "patch": "@@ -26,7 +26,7 @@ export function initSidebar(): void {\n       errorCountEl.classList.toggle(\"hidden\", errorCount_val === 0);\n       const span = errorCountEl.querySelector(\"span\");\n       if (span) {\n-        span.innerHTML = `${errorCount_val}`;\n+        span.textContent = `${errorCount_val}`;\n       }\n     });\n   }", "file_path": "files/2022_8/1667", "file_language": "ts", "file_name": "frontend/src/sidebar/index.ts", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
