{"index": 5713, "cve_id": "CVE-2020-36324", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Wikimedia Quarry analytics-quarry-web before 2020-12-15 allows Reflected XSS because app.py does not explicitly set the application/json content type.", "cvss": "6.1", "publish_date": "April 21, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "4b7e1d6a3a52ec6cf826a971135a38b0f74785d2", "commit_message": "SECURITY: Set correct Mime Type on /api/preferences\n\nPrevents a Reflected Cross-Site scripting (XSS) vulnerability\n\nBug: T270195\nChange-Id: I04bf53d2a939da369e54e91899615a3ffc3e5caf", "commit_date": "2020-12-15T17:37:39Z", "project": "wikimedia/analytics-quarry-web", "url": "https://api.github.com/repos/wikimedia/analytics-quarry-web/commits/4b7e1d6a3a52ec6cf826a971135a38b0f74785d2", "html_url": "https://github.com/wikimedia/analytics-quarry-web/commit/4b7e1d6a3a52ec6cf826a971135a38b0f74785d2", "windows_before": [{"commit_id": "085a51b2dee8b58882276d9fe090174252edb85e", "commit_date": "Mon Jan 13 15:17:39 2020 -0600", "commit_message": "SECURITY: Update mime and content types downloads", "files_name": ["quarry/web/output.py"]}, {"commit_id": "30762326e7069c888edd3ccc8239a113ce1d9a59", "commit_date": "Wed Jan 1 14:35:47 2020 +0800", "commit_message": "view.js: Fix getting the Query SQL when highlight is enabled", "files_name": ["quarry/web/static/js/query/view.js"]}, {"commit_id": "849e9421ef4942ca1af25ffb72ed9c5aef6c2c5b", "commit_date": "Wed Jan 1 14:19:56 2020 +0800", "commit_message": "view.{html,css}: Some design changes", "files_name": ["quarry/web/static/css/query/view.css", "quarry/web/templates/query/view.html"]}, {"commit_id": "d7ddab800c7b7109d7131fc5b676b346564c5397", "commit_date": "Wed Jan 1 14:02:14 2020 +0800", "commit_message": "view.html: Unbreak 500", "files_name": ["quarry/web/templates/query/view.html"]}, {"commit_id": "cd6963859b07ea539706ad2f9f9c322892fe92e8", "commit_date": "Mon Dec 30 19:54:26 2019 -0600", "commit_message": "Add a button to toggle syntax highlighting in Quarry", "files_name": ["quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html"]}, {"commit_id": "90a1befd42eb41970c704065a9f54e2e475d4172", "commit_date": "Sat Oct 19 17:33:54 2019 +0200", "commit_message": "query-status.html: fix compiled.js", "files_name": ["quarry/web/static/templates/compiled.js"]}, {"commit_id": "1f297c9931a56d74dc98837070b336dcf36794f0", "commit_date": "Thu Oct 17 20:21:53 2019 +0200", "commit_message": "query-status.html: hide Explain button until bug is solved", "files_name": ["quarry/web/static/templates/compiled.js", "quarry/web/static/templates/query-status.html"]}, {"commit_id": "2f7ee603e865769fe4e78f0292d925101cee23f2", "commit_date": "Fri Jun 28 13:38:41 2019 -0500", "commit_message": "queryrun.py: Default extra_info to {}", "files_name": ["quarry/web/models/queryrun.py"]}, {"commit_id": "5d6844ef5b4ae955ee0ffba0e5c2622927ed1621", "commit_date": "Fri Jun 21 22:33:46 2019 +0200", "commit_message": "base.css: revert font-size change", "files_name": ["quarry/web/static/css/base.css"]}, {"commit_id": "b303ce802f63df18a077c729e19d0d78d3091033", "commit_date": "Fri Jun 14 20:22:48 2019 +0000", "commit_message": "Merge \"Add flash messages, handle bad oauth-callback call\"", "files_name": ["29e39d686992ca48d973fc03ed2e073bac591e2e - Sun May 19 16:33:19 2019 +0200 : Add flash messages, handle bad oauth-callback call", "quarry/web/login.py", "quarry/web/static/css/base.css", "quarry/web/templates/base.html", "quarry/web/user.py"]}, {"commit_id": "cc0c0a71330b12dae88b8bc8bf4ae3fa85037eaa", "commit_date": "Fri May 24 14:33:18 2019 -0500", "commit_message": "output.py: Fix logic error in _inner_csv_injection_escape", "files_name": ["quarry/web/output.py"]}, {"commit_id": "ec58f563a19bf374a5add2a45f0eacd6e5a25cc8", "commit_date": "Sun May 12 17:52:48 2019 +0000", "commit_message": "Merge \"Create custom 50x error pages\"", "files_name": ["3e25078c3569140dd92f04340fd71cd96d34a419 - Sun May 12 15:34:04 2019 +0200 : app: handle bad qrun_id in run_status()", "quarry/web/app.py"]}, {"commit_id": "3776b5f906c05124feb897d304f01058d0deefc9", "commit_date": "Sun May 12 00:27:51 2019 +0200", "commit_message": "Create custom 50x error pages", "files_name": ["maintenance/generate_error_pages.sh", "quarry/web/static/error/500.html", "quarry/web/static/error/502.html", "quarry/web/static/error/error.html"]}, {"commit_id": "7a13ab4c68e16201f11cce664ddeaf64805f3c2b", "commit_date": "Sat May 11 20:49:31 2019 +0200", "commit_message": "templates: add target=\"_blank\" to external links", "files_name": ["quarry/web/templates/base.html", "quarry/web/templates/user.html"]}, {"commit_id": "4b3583c4cf7f45b7bac56b8df9dfd0799a12111a", "commit_date": "Sun Dec 2 14:51:38 2018 +0100", "commit_message": "SECURITY: escape CSV injections", "files_name": ["quarry/web/output.py"]}, {"commit_id": "8f72587ef17d11e9d8478b4f65f3b2f2b91b6174", "commit_date": "Wed Feb 20 10:40:52 2019 +0100", "commit_message": "view.css: Fixed problem with the display of certain letters", "files_name": ["quarry/web/static/css/query/view.css"]}, {"commit_id": "6bda39eb405f514ede5a8c783dfeef789699a54a", "commit_date": "Mon Feb 18 19:11:49 2019 +0100", "commit_message": "view.js: Show query run date above outputs section", "files_name": [".eslintrc.json", "quarry/web/app.py", "quarry/web/static/js/query/view.js"]}, {"commit_id": "16e67e07afee1ae80a9d1e325eee47deda46647b", "commit_date": "Thu Jan 24 22:40:05 2019 +0100", "commit_message": "vagrant: fix hostname config and enable services", "files_name": ["provision.bash", "quarry-celery-dev.service", "quarry-web-dev.service"]}, {"commit_id": "2a51a54c2044bf39800d45378c1dfd569b9fc75d", "commit_date": "Mon Dec 24 16:01:59 2018 -0500", "commit_message": "Fix grammar in user options file", "files_name": ["quarry/web/templates/user.html"]}, {"commit_id": "f9ad98521f9d66ed8921fe49c7eec44e613c5a39", "commit_date": "Wed Nov 7 23:09:06 2018 -0600", "commit_message": "Make surrogateescape the global default error handler for Unicode issues", "files_name": ["quarry/web/app.py", "quarry/web/output.py", "quarry/web/utils/monkey.py", "quarry/web/worker.py"]}, {"commit_id": "06a1f9f1b362c6dcce7a3fa08022c67cf8df7d7f", "commit_date": "Sun Dec 2 09:31:19 2018 +0000", "commit_message": "Merge \"health.py: initializes health endpoint\"", "files_name": ["879b25cbb6068104566e9f8374329b0488d0ec2a - Sun Nov 18 21:24:44 2018 +0700 : health.py: initializes health endpoint", "quarry/web/app.py", "quarry/web/health.py"]}, {"commit_id": "575fc1cc75bab7b481cb5f8956308fabc4fd6d9d", "commit_date": "Mon Nov 19 22:14:40 2018 +0700", "commit_message": "app.py: Handle meta endpoints when the specified id doesn't exist", "files_name": ["quarry/web/app.py"]}, {"commit_id": "4f0b83095c7e1d3504df48da69841a6ca58d4060", "commit_date": "Thu Nov 15 01:10:22 2018 +0100", "commit_message": "Add Execution time to recent queries table of Quarry", "files_name": ["quarry/web/models/queryrun.py", "quarry/web/templates/query/list.html"]}, {"commit_id": "ed511d14a94c7f92020caa6bf6c43afa524e21bc", "commit_date": "Mon Nov 12 20:21:35 2018 +0000", "commit_message": "Merge \"Handle bad output_result endpoint params\"", "files_name": ["410e6e0d77508e69f524b0ee00b9c177f29854cb - Sun Oct 21 21:20:37 2018 +0200 : Handle bad output_result endpoint params", "quarry/web/app.py", "quarry/web/static/js/query/view.js"]}, {"commit_id": "fef82ce9ee50951442659232f1c18f8f11d19908", "commit_date": "Mon Nov 12 20:15:29 2018 +0000", "commit_message": "Merge \"default_config.yaml: set default maintenance msg\"", "files_name": ["1fbe703b61686418f8f8bcf4a87249f12398745d - Sun Nov 11 15:00:46 2018 +0100 : default_config.yaml: set default maintenance msg", "quarry/default_config.yaml"]}, {"commit_id": "d52482678ad14b9ead6f63f1f52335c46c0bd562", "commit_date": "Sun Nov 11 14:48:50 2018 +0100", "commit_message": "view.css: add space between resultsets", "files_name": ["quarry/web/static/css/query/view.css"]}, {"commit_id": "8c065d0ca59883bf0b75bafca0e7770de22b4eaa", "commit_date": "Sun Nov 4 17:35:20 2018 +0000", "commit_message": "Merge \"app.py: Remove enforced DEBUG = True\"", "files_name": ["71643b6c9d2295b53cf7f89d1760a988d8e16d5c - Sun Nov 4 11:11:30 2018 -0600 : app.py: Remove enforced DEBUG = True", "quarry/web/app.py"]}, {"commit_id": "c10fc32ddec7c806fe0fbc682c506f55029f08e0", "commit_date": "Sun Nov 4 17:50:35 2018 +0100", "commit_message": "base.html: allow html in maintenance message", "files_name": ["quarry/web/templates/base.html"]}, {"commit_id": "99db770cd004329c74bb95ca93459c13fd0dd0b3", "commit_date": "Sun Oct 21 14:47:57 2018 +0200", "commit_message": "worker.py: fix running time calculation points", "files_name": ["quarry/web/worker.py"]}, {"commit_id": "c1dfde7734519d2ace191effae13847f901608af", "commit_date": "Wed Oct 10 18:53:37 2018 +0200", "commit_message": "Store and show query execution time", "files_name": ["quarry/web/static/js/query/view.js", "quarry/web/worker.py"]}, {"commit_id": "8550956c0da4446cba32fe2d9505a64e747ce0a2", "commit_date": "Sat Oct 6 13:51:59 2018 +0200", "commit_message": "base.html: Add link to sql-optimizer tool", "files_name": ["quarry/web/templates/base.html"]}, {"commit_id": "028a29226c6bf92532b4a4a325c2c51c02d5ee2c", "commit_date": "Mon Sep 24 19:20:04 2018 +0200", "commit_message": "app.py: make it possible to block a user from running queries", "files_name": ["quarry/web/app.py", "quarry/web/models/user.py"]}, {"commit_id": "e74f5755f16fcd10b514bafc7982f6021c46778c", "commit_date": "Sun Sep 23 16:25:39 2018 +0000", "commit_message": "Merge \"list.html: Add full date as tooltip in \"Last run\" column\"", "files_name": ["abd60b9c36a5a15c2206aa1b2179d679d0e6b80a - Sun Sep 23 16:24:26 2018 +0200 : killer.py: fix import since py3", "quarry/web/killer.py"]}, {"commit_id": "a3957b3184de4a58063088ea0eb2528813efbbe7", "commit_date": "Sun Sep 23 11:59:54 2018 +0200", "commit_message": "list.html: Add full date as tooltip in \"Last run\" column", "files_name": ["quarry/web/templates/query/list.html"]}, {"commit_id": "4b010770fa5d9dc32d5a88eeda7af259a9c164ad", "commit_date": "Thu Sep 20 10:25:20 2018 -0500", "commit_message": "output.py: Fix 'fake list' boolean value for empty generators", "files_name": ["quarry/web/output.py"]}, {"commit_id": "4994570cd1d7a670c60f30c9a9107acf75b0e40b", "commit_date": "Wed Sep 19 01:14:51 2018 -0500", "commit_message": "output.py: map(str, ...) for wikitable_formatter", "files_name": ["quarry/web/output.py"]}, {"commit_id": "e59152e0eb554c40fce0d54f83a6a20137f78889", "commit_date": "Sun Sep 16 12:41:08 2018 -0500", "commit_message": "Get rid of ?download=true", "files_name": [".gitignore", "Pipfile", "Pipfile.lock", "package-lock.json", "package.json", "quarry/web/app.py", "quarry/web/static/js/query/view.js", "quarry/web/static/templates/compiled.js", "quarry/web/static/templates/query-resultset.html", "quarry/web/static/vendor/nunjucks-slim.1.3.3.min.js", "quarry/web/templates/query/view.html", "quarry/web/utils/__init__.py", "requirements.txt"]}, {"commit_id": "faaa33e142daa174a0c34fe9060856d8b9990fa8", "commit_date": "Fri Sep 14 11:23:53 2018 -0500", "commit_message": "Get rid of unicodecsv dependency", "files_name": ["Pipfile", "Pipfile.lock", "requirements.txt"]}, {"commit_id": "821111a95e056041afbbbba560e343c38de9cf75", "commit_date": "Mon Sep 17 19:21:14 2018 +0000", "commit_message": "Merge \"output.py: Fix tsv delimiter\"", "files_name": ["85f16200c21f7ed3d75e09e7656fbde2708abd8a - Mon Sep 17 19:02:32 2018 +0000 : Merge \"results: Fixes for memory consumption and bytes support\"", "e8e6e02d24802d85e5842487a5fdea18fa84ae67 - Mon Sep 17 17:24:46 2018 +0000 : Merge \"Update username in database when a renamed user logins\"", "39b877e69746ae6c682d7f45622ef064c6533838 - Mon Sep 17 16:58:01 2018 +0000 : Merge \"default_config.yaml: fix resultset file extension\"", "8d0115bcdc7fcc1f49df048261e66f9c38b8fe7c - Sun Sep 16 12:49:53 2018 +0200 : default_config.yaml: fix resultset file extension", "quarry/default_config.yaml"]}, {"commit_id": "03554ae3a93c5cb6b7dcd53f6aa7f658e666ce7c", "commit_date": "Sun Dec 17 13:41:02 2017 -0600", "commit_message": "Update username in database when a renamed user logins", "files_name": ["quarry/web/login.py"]}, {"commit_id": "26353d9dd9d1d8220aa10a8bea01cd35250f3968", "commit_date": "Sun Sep 16 11:45:54 2018 -0500", "commit_message": "output.py: Fix tsv delimiter", "files_name": ["quarry/web/output.py"]}, {"commit_id": "c469b49cc481f8755f1fa200289cf850457b73ff", "commit_date": "Thu Sep 13 16:24:11 2018 -0500", "commit_message": "results: Fixes for memory consumption and bytes support", "files_name": ["Pipfile", "Pipfile.lock", "quarry/web/output.py", "quarry/web/results.py", "requirements.txt"]}, {"commit_id": "79e1b0cd48df1ff2d81dd297acddae6620f7e932", "commit_date": "Sun Sep 16 13:31:38 2018 -0500", "commit_message": "Add ESLint", "files_name": [".eslintrc.json", "package-lock.json", "package.json", "quarry/web/static/js/query/view.js", "quarry/web/static/js/user.js"]}, {"commit_id": "2081a97dea3057d6ed4c99e91b8911c66857e003", "commit_date": "Sun Sep 16 16:27:19 2018 +0000", "commit_message": "Merge \"login.py: define a useragent for mwoauth\"", "files_name": ["ac47098b4759c82bb17e5ec0846209c52cc4977c - Sun Sep 16 14:39:47 2018 +0200 : login.py: define a useragent for mwoauth", "provision.bash", "quarry/web/login.py"]}, {"commit_id": "4b2d86253b2fde19e60a6b22ead5f48400f9a7e3", "commit_date": "Sun Sep 16 13:08:34 2018 +0200", "commit_message": "output.py: handle bad file format", "files_name": ["quarry/web/output.py"]}, {"commit_id": "3ab14440f38495dde833377dc97aa82bd7900644", "commit_date": "Thu Sep 13 22:38:59 2018 +0200", "commit_message": "view.js: explain that query has never been executed", "files_name": ["quarry/web/static/js/query/view.js"]}, {"commit_id": "eee6099b95b1e71704bfead493b3d58864f68952", "commit_date": "Wed Sep 12 16:41:56 2018 -0500", "commit_message": "connections.py: Explicitly enable MULTI_STATEMENTS for replica", "files_name": ["quarry/web/connections.py"]}], "windows_after": [{"commit_id": "4dd0d2932b4397837893a64eaffd6d4eed3e07d2", "commit_date": "Wed Oct 7 15:51:19 2020 -0700", "commit_message": "multiinstance: Attempt to make quarry work with multiinstance replicas", "files_name": [".gitignore", "maintenance/multiinstance_migration.py", "quarry/default_config.yaml", "quarry/web/app.py", "quarry/web/connections.py", "quarry/web/models/queryrevision.py", "quarry/web/replica.py", "quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html", "quarry/web/worker.py", "tables.sql"]}, {"commit_id": "15a315a93052e3dbe3239ab22aa313d205572bf7", "commit_date": "Fri Feb 19 17:05:26 2021 +0000", "commit_message": "Update document title on title change", "files_name": ["quarry/web/static/js/query/view.js"]}, {"commit_id": "121b757e11e97629e0b6513bd76363b6f0f616e2", "commit_date": "Tue Mar 23 17:59:20 2021 +0000", "commit_message": "Merge \"multiinstance: Attempt to make quarry work with multiinstance replicas\"", "files_name": ["af543524f538e3a7e6a49099b500c89f179c7d26 - Tue Mar 23 13:21:09 2021 -0700 : multiinstance support: fix the meta_p and centralauth query logic", "quarry/web/replica.py"]}, {"commit_id": "f3fab82cf93719be145b722fff91094f9339bc57", "commit_date": "Wed Mar 24 13:10:44 2021 -0700", "commit_message": "database field: if the field is NULL, don't fill it in with None", "files_name": ["quarry/web/templates/query/view.html"]}, {"commit_id": "7147374ded3c0f76b447ac06bfa62771cb0997cf", "commit_date": "Wed Mar 24 14:49:19 2021 -0700", "commit_message": "worker: update some worker code for errors and connections", "files_name": ["quarry/web/worker.py"]}, {"commit_id": "56f33cf6d672a3ae25220810c9893f2fa8b3e81c", "commit_date": "Fri Mar 26 12:16:16 2021 -0700", "commit_message": "connection handling: correct closing of connections", "files_name": ["quarry/web/replica.py"]}, {"commit_id": "3cf6342eaec6587f9c41e34aaed1bd6e17ee2080", "commit_date": "Sun Apr 4 17:21:19 2021 -0600", "commit_message": "Expand dbname validation regex", "files_name": [".gitignore", "Pipfile", "quarry/web/app.py", "quarry/web/utils/__init__.py", "quarry/web/utils/test_valid_dbname.py", "tox.ini"]}, {"commit_id": "56dfdbf2fc8b579cf01f7c7949b0c42ca1f199d0", "commit_date": "Mon Feb 15 21:58:33 2021 +0100", "commit_message": "Support Docker and drop Vagrant", "files_name": [".dockerignore", "Dockerfile", "README.md", "Vagrantfile", "docker-compose.yml", "fabfile.py", "provision.bash", "quarry-celery-dev.service", "quarry-web-dev.service", "quarry/default_config.yaml", "quarry/web/worker.py", "schema.sql"]}, {"commit_id": "631cc9223693de612646dd7f7f196f112dc037f0", "commit_date": "Sun Apr 25 17:33:42 2021 +0200", "commit_message": "Fix Docker compatibility with multiinstance", "files_name": ["README.md", "quarry/default_config.yaml", "quarry/web/replica.py"]}, {"commit_id": "edea6b2930a732d6f05cccc0b2f4c531dcbad16a", "commit_date": "Tue Jun 1 23:05:31 2021 +0200", "commit_message": "Error pages: Update IRC links from Freenode to Libera Chat", "files_name": ["quarry/web/static/error/500.html", "quarry/web/static/error/502.html", "quarry/web/static/error/error.html"]}, {"commit_id": "d1089676bc3dcdcd9a2e82b31062f066cea404fc", "commit_date": "Wed Aug 4 10:25:03 2021 +0200", "commit_message": "docs: added docker compose link and minor rewording", "files_name": ["README.md"]}, {"commit_id": "f44f659741f7535b31feb9ecd95a453d8fe16e1b", "commit_date": "Tue Aug 10 15:49:38 2021 -0500", "commit_message": ".gitreview: associate local 'buster' branch with gerrit 'buster' branch", "files_name": [".gitreview"]}, {"commit_id": "7904fc7011ad2038767b85959b5019fdc8562aeb", "commit_date": "Wed Aug 11 13:32:03 2021 +0200", "commit_message": "Add database autocompletion", "files_name": ["quarry/web/app.py", "quarry/web/static/css/query/view.css", "quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html", "schema.sql"]}, {"commit_id": "f1cf3d3e652246f2cf0d8c5b018f193044a7c883", "commit_date": "Tue Aug 10 17:18:23 2021 -0400", "commit_message": "upgrade quarry to python 3.7", "files_name": ["Dockerfile", "Pipfile", "Pipfile.lock", "README.md", "quarry/web/redissession.py", "requirements.txt", "tox.ini"]}, {"commit_id": "f01cb18088b7bcf98846f86a79cf0e90cfc66207", "commit_date": "Mon Aug 16 10:18:28 2021 +0000", "commit_message": "Merge \"Add database autocompletion\"", "files_name": ["9111b86dc3afbecc92e92133858ddf24dfa5710d - Mon Aug 16 10:31:01 2021 +0000 : Revert \"Add database autocompletion\"", "quarry/web/app.py", "quarry/web/static/css/query/view.css", "quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html", "schema.sql"]}, {"commit_id": "b2ecd3245cd60225bfc96d94afb5792b94ddead9", "commit_date": "Mon Aug 16 10:32:52 2021 +0000", "commit_message": "Merge \"Revert \"Add database autocompletion\"\"", "files_name": ["e225342a9e69bcce73a981755cf5ead7f4d3e057 - Mon Aug 16 12:49:44 2021 +0200 : Add database autocompletion", "quarry/web/app.py", "quarry/web/static/css/query/view.css", "quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html", "schema.sql"]}, {"commit_id": "800363584fdb030fd26a8dc67962e8d9dc869011", "commit_date": "Wed Aug 4 12:42:15 2021 -0400", "commit_message": "add stop query function", "files_name": ["quarry/web/app.py", "quarry/web/static/js/query/view.js"]}, {"commit_id": "0b874959d2a84294888a07890335ec0655a7d9f3", "commit_date": "Fri Aug 20 10:04:05 2021 -0400", "commit_message": "quarry stop button to follow current status", "files_name": ["quarry/web/static/js/query/view.js"]}, {"commit_id": "98898f0613c962303c08ae07c1a39414d5cce4a3", "commit_date": "Mon Aug 23 10:07:42 2021 +0000", "commit_message": "Merge \"Add database autocompletion\"", "files_name": ["6c93622d7e69d6dad2478ea6de8284212b46f52e - Wed Aug 11 13:32:03 2021 +0200 : Add database autocompletion", "quarry/web/app.py", "quarry/web/static/css/query/view.css", "quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html", "schema.sql"]}, {"commit_id": "a772e841d82a5ab52461bd32f92f562bd1bc8d78", "commit_date": "Mon Aug 16 10:31:01 2021 +0000", "commit_message": "Revert \"Add database autocompletion\"", "files_name": ["quarry/web/app.py", "quarry/web/static/css/query/view.css", "quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html", "schema.sql"]}, {"commit_id": "029bd01074d1930f006e4b54d0e5c0bd10a9cc21", "commit_date": "Wed Aug 4 12:42:15 2021 -0400", "commit_message": "add stop query function", "files_name": ["quarry/web/app.py", "quarry/web/static/js/query/view.js"]}, {"commit_id": "6d4f629cd2af81c4d0e09b4b478ad7ad14489b73", "commit_date": "Fri Aug 20 10:04:05 2021 -0400", "commit_message": "quarry stop button to follow current status", "files_name": ["quarry/web/static/js/query/view.js"]}, {"commit_id": "85b0dfd9e6aba72c89db8f9d111836354947fc94", "commit_date": "Mon Aug 16 12:49:44 2021 +0200", "commit_message": "Add database autocompletion", "files_name": ["quarry/web/app.py", "quarry/web/static/css/query/view.css", "quarry/web/static/js/query/view.js", "quarry/web/templates/query/view.html", "schema.sql"]}, {"commit_id": "07f6c5b098ff54fe8a5922ffccf48aa313ee3a58", "commit_date": "Tue Aug 24 16:56:33 2021 -0400", "commit_message": "celery update", "files_name": ["Dockerfile", "docker-compose.yml", "quarry/web/redissession.py", "requirements.txt"]}, {"commit_id": "2406acaa3b47835196cbdbfa1f3adee6555af236", "commit_date": "Tue Aug 31 16:32:12 2021 -0500", "commit_message": "Remove 'beta' from branding", "files_name": ["quarry/web/templates/base.html", "quarry/web/templates/landing.html", "quarry/web/templates/user.html"]}, {"commit_id": "f642217b2284c4c15e3ea4ef2ca4ac8c04d7c5c0", "commit_date": "Wed Sep 1 11:51:22 2021 -0400", "commit_message": "merge buster back to master", "files_name": ["13c32250226c8490e7e147eb8bf02054fa09cf27 - Fri Aug 6 08:31:28 2021 -0500 : Make a 'tests' dir and move our one test file there", "tests/test_valid_dbname.py", "tox.ini"]}, {"commit_id": "51491c9beb1a635e74f2a6e2fdb7df0ac9ec3d95", "commit_date": "Mon Aug 30 15:40:59 2021 -0500", "commit_message": "Added tests for output.py", "files_name": ["tests/test_output.py"]}, {"commit_id": "818ae0d566a291d622e1bda0714f99e8d1756176", "commit_date": "Wed Sep 1 21:48:19 2021 +0000", "commit_message": "Merge \"Remove 'beta' from branding\"", "files_name": ["4397d44f2f7401a06438f5063578a6395d27cb03 - Wed Sep 1 21:48:30 2021 +0000 : Merge \"Make a 'tests' dir and move our one test file there\"", "105bb941167137ed64fe307c54198e20b7281ea5 - Wed Sep 1 21:48:45 2021 +0000 : Merge \"Added tests for output.py\"", "f5ab38b4ee6a41c8b2ccd23ad9bc7b642ec1f5b3 - Tue Aug 31 16:19:26 2021 -0700 : local dev: set up a really basic wikireplica-ish container", "README.md", "docker-compose.yml", "docker-replica/replica.sql", "quarry/default_config.yaml", "quarry/web/replica.py"]}, {"commit_id": "28cff0cd1419d22744d3a5276711296705336537", "commit_date": "Wed Sep 1 23:15:25 2021 +0000", "commit_message": "Merge \"local dev: set up a really basic wikireplica-ish container\"", "files_name": ["2a1e2bd43097f8ed1b32fcd018177aedb13099f1 - Mon Aug 30 17:04:36 2021 -0500 : app.py: process with black in anticipation of a huge reformat", "quarry/web/app.py"]}, {"commit_id": "6310bca8a3a881cbf822482a60c330ebc067d050", "commit_date": "Mon Aug 30 17:04:00 2021 -0500", "commit_message": "app.py: remove redundant main definition", "files_name": ["quarry/web/app.py"]}, {"commit_id": "8081156ac8889822b9adbd7b8aeeb9ffda8f9d15", "commit_date": "Tue Aug 31 14:35:30 2021 -0500", "commit_message": "Use yaml.safe_load to avoid deprecation notices", "files_name": ["quarry/web/app.py", "quarry/web/killer.py", "quarry/web/worker.py"]}, {"commit_id": "4cfe6e5c68eb9a913c4b9d8f2230d2c3844dcca8", "commit_date": "Mon Aug 30 17:10:21 2021 -0500", "commit_message": "Move flask creation into create_app() factory, move routes into blueprints", "files_name": ["quarry.wsgi", "quarry/web/api.py", "quarry/web/app.py", "quarry/web/query.py", "quarry/web/run.py"]}, {"commit_id": "e648c121ea356e3953ac6d65d389501db1ed87a9", "commit_date": "Thu Sep 2 12:57:36 2021 -0500", "commit_message": "quarry.wsgi: create application object even if we aren't main", "files_name": ["quarry.wsgi"]}, {"commit_id": "2fdbc199a813f073b650764cde695827413d578d", "commit_date": "Thu Sep 2 21:14:28 2021 -0500", "commit_message": "run test_output.py through Black", "files_name": ["tests/test_output.py"]}, {"commit_id": "885e187bc1adaccc98094584998deecd5a3415e7", "commit_date": "Thu Sep 2 22:00:40 2021 -0500", "commit_message": "query.py: fix a couple of url_for calls", "files_name": ["quarry/web/query.py"]}, {"commit_id": "ed3bbe1f36fbba9a7eb721431e1208f042a6ccea", "commit_date": "Fri Sep 3 11:03:36 2021 -0400", "commit_message": "update config to match for celery 6", "files_name": ["quarry/default_config.yaml"]}, {"commit_id": "c17e19cc4f8c3f7b30b3dd65630b69cf37047bf6", "commit_date": "Fri Sep 3 16:33:36 2021 -0400", "commit_message": "close quarry db dropdown on tab", "files_name": ["quarry/web/static/js/query/view.js"]}], "parents": [{"commit_id_before": "085a51b2dee8b58882276d9fe090174252edb85e", "url_before": "https://api.github.com/repos/wikimedia/analytics-quarry-web/commits/085a51b2dee8b58882276d9fe090174252edb85e", "html_url_before": "https://github.com/wikimedia/analytics-quarry-web/commit/085a51b2dee8b58882276d9fe090174252edb85e"}], "details": [{"raw_url": "https://github.com/wikimedia/analytics-quarry-web/raw/4b7e1d6a3a52ec6cf826a971135a38b0f74785d2/quarry%2Fweb%2Fapp.py", "code": "import json\nimport os\nimport sqlite3\n\nfrom flask import Flask, render_template, redirect, g, request, url_for, Response\nfrom sqlalchemy import desc, func\nfrom sqlalchemy.exc import IntegrityError\nimport yaml\n\nfrom . import worker, output\nfrom .connections import Connections\nfrom .login import auth\nfrom .models.user import UserGroup\nfrom .models.query import Query\nfrom .models.queryrevision import QueryRevision\nfrom .models.queryrun import QueryRun\nfrom .models.star import Star\nfrom .redissession import RedisSessionInterface\nfrom .results import SQLiteResultReader\nfrom .user import user_blueprint, get_user, get_preferences\nfrom .utils import json_formatter\nfrom .utils import monkey as _unused  # noqa: F401\nfrom .utils.pagination import RangeBasedPagination\nfrom .health import health_blueprint\nfrom .webhelpers import templatehelpers\n\n__dir__ = os.path.dirname(__file__)\n\napp = Flask(__name__)\napp.config.update(yaml.load(open(os.path.join(__dir__, \"../default_config.yaml\"))))\ntry:\n    app.config.update(yaml.load(open(os.path.join(__dir__, \"../config.yaml\"))))\nexcept IOError:\n    # Is ok if we can't load config.yaml\n    pass\n\napp.register_blueprint(auth)\napp.register_blueprint(health_blueprint)\napp.register_blueprint(user_blueprint)\napp.register_blueprint(templatehelpers)\n\nglobal_conn = Connections(app.config)\napp.session_interface = RedisSessionInterface(global_conn.redis)\n\n\nclass QueriesRangeBasedPagination(RangeBasedPagination):\n    def get_page_link(self, page_key, limit):\n        get_params = dict(request.args)\n        get_params.update({\n            'from': page_key, 'limit': limit})\n        return url_for('query_runs_all', **dict(\n            [(key, value) for key, value in list(get_params.items())])\n        )\n\n    def order_queryset(self):\n        if self.direction == 'next':\n            self.queryset = self.queryset.order_by(desc(QueryRun.timestamp))\n        else:\n            self.queryset = self.queryset.order_by(QueryRun.timestamp)\n\n    def filter_queryset(self):\n        if self.page_key is None:\n            return\n        from_query = g.conn.session.query(Query).get(self.page_key)\n        if from_query:\n            from_qrun_id = from_query.latest_rev.latest_run.id\n            if self.direction == 'prev':\n                self.queryset = self.queryset.filter(\n                    QueryRun.id > from_qrun_id)\n            else:\n                self.queryset = self.queryset.filter(\n                    QueryRun.id < from_qrun_id)\n\n\n@app.before_request\ndef setup_context():\n    g.conn = Connections(app.config)\n\n\n@app.teardown_request\ndef kill_context(exception=None):\n    g.conn.close_all()\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"landing.html\", user=get_user())\n\n\n@app.route(\"/api/query/unstar\", methods=[\"POST\"])\ndef unstar_query():\n    if get_user() is None:\n        return \"Unauthorized access\", 403\n    query = g.conn.session.query(Query).get(request.form['query_id'])\n    if query:\n        star = g.conn.session.query(Star)\\\n            .filter(Star.query_id == request.form['query_id'])\\\n            .filter(Star.user_id == get_user().id)\\\n            .one()\n        g.conn.session.delete(star)\n        g.conn.session.commit()\n        return \"\"\n    else:\n        return \"Query not found\", 404\n\n\n@app.route(\"/api/query/star\", methods=[\"POST\"])\ndef star_query():\n    if get_user() is None:\n        return \"Unauthorized access\", 403\n    query = g.conn.session.query(Query).get(request.form['query_id'])\n    if query:\n        star = Star()\n        star.user = get_user()\n        star.query = query\n        g.conn.session.add(star)\n        try:\n            g.conn.session.commit()\n        except IntegrityError as e:\n            if e.args[0] == 1062:  # Duplicate\n                g.conn.session.rollback()\n            else:\n                raise\n        return \"\"\n    else:\n        return \"Query not found\", 404\n\n\n@app.route(\"/query/new\")\ndef new_query():\n    if get_user() is None:\n        return redirect(\"/login?next=/query/new\")\n    query = Query()\n    query.user = get_user()\n    g.conn.session.add(query)\n    g.conn.session.commit()\n    return redirect(url_for('query_show', query_id=query.id))\n\n\n@app.route(\"/fork/<int:id>\")\ndef fork_query(id):\n    if get_user() is None:\n        return redirect(\"/login?next=fork/{id}\".format(id=id))\n    query = Query()\n    query.user = get_user()\n    parent_query = g.conn.session.query(Query).filter(Query.id == id).one()\n    query.title = parent_query.title\n    query.parent_id = parent_query.id\n    query.description = parent_query.description\n    g.conn.session.add(query)\n    g.conn.session.commit()\n\n    query_rev = QueryRevision(query_id=query.id, text=parent_query.latest_rev.text)\n    query.latest_rev = query_rev\n    g.conn.session.add(query)\n    g.conn.session.add(query_rev)\n    g.conn.session.commit()\n    return redirect(url_for('query_show', query_id=query.id))\n\n\n@app.route(\"/query/<int:query_id>\")\ndef query_show(query_id):\n    query = g.conn.session.query(Query).filter(Query.id == query_id).one()\n    can_edit = get_user() is not None and get_user().id == query.user_id\n    is_starred = False\n    if get_user():\n        is_starred = g.conn.session.query(func.count(Star.id))\\\n            .filter(Star.user_id == get_user().id)\\\n            .filter(Star.query_id == query_id).scalar() == 1\n    jsvars = {\n        'query_id': query.id,\n        'can_edit': can_edit,\n        'is_starred': is_starred,\n        'published': query.published,\n        'preferences': get_preferences()\n    }\n\n    if query.latest_rev and query.latest_rev.latest_run_id:\n        jsvars['qrun_id'] = query.latest_rev.latest_run_id\n\n    return render_template(\n        \"query/view.html\",\n        user=get_user(),\n        query=query,\n        jsvars=jsvars,\n        latest_rev=query.latest_rev\n    )\n\n\n@app.route('/query/<int:query_id>/result/latest/<string:resultset_id>/<string:format>')\ndef query_output_redirect(query_id, resultset_id, format):\n    query = g.conn.session.query(Query).filter(Query.id == query_id).one()\n    qrun_id = query.latest_rev.latest_run_id\n    # FIXME: Enforce HTTPS everywhere in a nicer way!\n    resp = redirect(\n        url_for('output_result', qrun_id=qrun_id,\n                resultset_id=resultset_id, format=format,\n                _external=True, _scheme='https')\n    )\n    # CORS on the redirect\n    resp.headers.add('Access-Control-Allow-Origin', '*')\n    return resp\n\n\n@app.route('/api/query/meta', methods=['POST'])\ndef api_set_meta():\n    if get_user() is None:\n        return \"Authentication required\", 401\n\n    query = g.conn.session.query(Query).filter(Query.id == request.form['query_id']).one()\n\n    if query.user_id != get_user().id:\n        return \"Authorization denied\", 403\n\n    if 'title' in request.form:\n        query.title = request.form['title']\n    if 'published' in request.form:\n        query.published = request.form['published'] == '1'\n    if 'description' in request.form:\n        query.description = request.form['description']\n    g.conn.session.add(query)\n    g.conn.session.commit()\n    return json.dumps({'id': query.id})\n\n\n@app.route('/api/query/run', methods=['POST'])\ndef api_run_query():\n    if get_user() is None:\n        return \"Authentication required\", 401\n    text = request.form['text']\n    query = g.conn.session.query(Query).filter(Query.id == request.form['query_id']).one()\n\n    if query.user_id != get_user().id or \\\n            g.conn.session.query(UserGroup).filter(UserGroup.user_id == get_user().id) \\\n            .filter(UserGroup.group_name == 'blocked').first():\n        return \"Authorization denied\", 403\n\n    if query.latest_rev and query.latest_rev.latest_run:\n        result = worker.run_query.AsyncResult(query.latest_rev.latest_run.task_id)\n        if not result.ready():\n            result.revoke(terminate=True)\n            query.latest_rev.latest_run.status = QueryRun.STATUS_SUPERSEDED\n            g.conn.session.add(query.latest_rev.latest_run)\n            g.conn.session.commit()\n\n    query_rev = QueryRevision(query_id=query.id, text=text)\n    query.latest_rev = query_rev\n\n    # XXX (phuedx, 2014/08/08): This deviates from the pre-existing\n    # QueryRevision interface, but I'm not confident that SQLAlchemy would\n    # invalidate a cached result for a relationship if a property changed.\n    query_run = QueryRun()\n    query_run.rev = query_rev\n    query_run.status = QueryRun.STATUS_QUEUED\n\n    g.conn.session.add(query_run)\n    g.conn.session.add(query)\n    g.conn.session.commit()\n    query_rev.latest_run = query_run\n    query_run.task_id = worker.run_query.delay(query_run.id).task_id\n    g.conn.session.add(query_rev)\n    g.conn.session.add(query_run)\n    g.conn.session.commit()\n    return json.dumps({\n        'qrun_id': query_run.id\n    })\n\n\n@app.route(\"/query/runs/all\")\ndef query_runs_all():\n    queries = g.conn.session.query(Query)\\\n        .join(Query.latest_rev).join(QueryRevision.latest_run)\n    queries_filter = 'all'\n    if request.args.get('published') == 'true':\n        queries = queries.filter(Query.published)\n        queries_filter = 'published'\n    limit = int(request.args.get(\n        'limit', app.config.get('QUERY_RESULTS_PER_PAGE', 50)))\n    queries, prev_link, next_link = QueriesRangeBasedPagination(\n        queries, request.args.get('from'), limit,\n        request.path,\n        request.referrer, dict(request.args)).paginate()\n    return render_template(\n        \"query/list.html\", user=get_user(), queries=queries,\n        prev_link=prev_link, next_link=next_link,\n        queries_filter=queries_filter)\n\n\n@app.route('/run/<int:qrun_id>/status')\ndef run_status(qrun_id):\n    qrun = g.conn.session.query(QueryRun).get(qrun_id)\n    if not qrun:\n        return Response('No such query_run id', status=404)\n    return Response(json.dumps({\n        'status': qrun.status_message,\n        'extra': json.loads(qrun.extra_info or '{}'),\n        'timestamp': qrun.timestamp.strftime('%s')\n    }), mimetype='application/json', headers={'Access-Control-Allow-Origin': '*'})\n\n\n@app.route(\"/run/<int:qrun_id>/output/<int:resultset_id>/<string:format>\")\ndef output_result(qrun_id, resultset_id=0, format='json'):\n    qrun = g.conn.session.query(QueryRun).get(qrun_id)\n    if not qrun:\n        response = Response('No such query_run id', status=404)\n    else:\n        reader = SQLiteResultReader(qrun, app.config['OUTPUT_PATH_TEMPLATE'])\n        try:\n            response = output.get_formatted_response(format, qrun, reader, resultset_id)\n        except sqlite3.OperationalError as e:\n            if e.args[0].startswith('no such table'):\n                response = Response('No such resultset id', status=404)\n            else:\n                raise\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response\n\n\n@app.route(\"/run/<int:qrun_id>/meta\")\ndef output_run_meta(qrun_id):\n    qrun = g.conn.session.query(QueryRun).get(qrun_id)\n    if not qrun:\n        return Response('No such query run id', status=404)\n    return Response(json.dumps(\n        {\n            'run': qrun,\n            'rev': qrun.rev,\n            'query': qrun.rev.query\n        }, default=json_formatter),\n        mimetype='application/json',\n        headers={'Access-Control-Allow-Origin': '*'},\n    )\n\n\n@app.route(\"/rev/<int:rev_id>/meta\")\ndef output_rev_meta(rev_id):\n    rev = g.conn.session.query(QueryRevision).get(rev_id)\n    if not rev:\n        return Response('No such query revision id', status=404)\n    return Response(json.dumps(\n        {\n            'latest_run': rev.latest_run,\n            'rev': rev,\n            'query': rev.query\n        }, default=json_formatter),\n        mimetype='application/json',\n        headers={'Access-Control-Allow-Origin': '*'},\n    )\n\n\n@app.route(\"/query/<int:query_id>/meta\")\ndef output_query_meta(query_id):\n    query = g.conn.session.query(Query).get(query_id)\n    if not query:\n        return Response('No such query id', status=404)\n    return Response(json.dumps(\n        {\n            'latest_run': query.latest_rev.latest_run,\n            'latest_rev': query.latest_rev,\n            'query': query\n        }, default=json_formatter),\n        mimetype='application/json',\n        headers={'Access-Control-Allow-Origin': '*'},\n    )\n\n\n@app.route(\"/explain/<int:connection_id>\")\ndef output_explain(connection_id):\n    cur = g.conn.replica.cursor()\n    try:\n        cur.execute('SHOW EXPLAIN FOR %d;' % connection_id)\n    except cur.InternalError as e:\n        if e.args[0] in [1094, 1915, 1933]:\n            # 1094 = Unknown thread id\n            # 1915, 1933 = Target is not running an EXPLAINable command\n            return Response(json.dumps(\n                {\n                    'headers': ['Error'],\n                    'rows': [['Hmm... Is the SQL actually running?!']],\n                }, default=json_formatter),\n                mimetype='application/json',\n            )\n        else:\n            raise\n    else:\n        return Response(json.dumps(\n            {\n                'headers': [c[0] for c in cur.description],\n                'rows': cur.fetchall(),\n            }, default=json_formatter),\n            mimetype='application/json',\n        )\n\n\n@app.route(\"/api/preferences/get/<key>\")\ndef pref_get(key):\n    if get_user() is None:\n        return \"Authentication required\", 401\n\n    if key in get_preferences():\n        return Response(\n            json.dumps({'key': key, 'value': get_preferences()[key]}),\n            mimetype='application/json'\n        )\n    else:\n        return Response(\n            json.dumps({'key': key, 'error': 'novalue'}),\n            mimetype='application/json'\n        )\n\n\n@app.route(\"/api/preferences/set/<key>/<value>\")\ndef pref_set(key, value):\n    if get_user() is None:\n        return \"Authentication required\", 401\n\n    get_preferences()[key] = (None if value == 'null' else value)\n    return Response(\n        json.dumps({'key': key, 'success': ''}),\n        mimetype='application/json'\n    ), 201\n\n\nif __name__ == '__main__':\n    app.run(port=5000, host=\"0.0.0.0\")\n", "code_before": "import json\nimport os\nimport sqlite3\n\nfrom flask import Flask, render_template, redirect, g, request, url_for, Response\nfrom sqlalchemy import desc, func\nfrom sqlalchemy.exc import IntegrityError\nimport yaml\n\nfrom . import worker, output\nfrom .connections import Connections\nfrom .login import auth\nfrom .models.user import UserGroup\nfrom .models.query import Query\nfrom .models.queryrevision import QueryRevision\nfrom .models.queryrun import QueryRun\nfrom .models.star import Star\nfrom .redissession import RedisSessionInterface\nfrom .results import SQLiteResultReader\nfrom .user import user_blueprint, get_user, get_preferences\nfrom .utils import json_formatter\nfrom .utils import monkey as _unused  # noqa: F401\nfrom .utils.pagination import RangeBasedPagination\nfrom .health import health_blueprint\nfrom .webhelpers import templatehelpers\n\n__dir__ = os.path.dirname(__file__)\n\napp = Flask(__name__)\napp.config.update(yaml.load(open(os.path.join(__dir__, \"../default_config.yaml\"))))\ntry:\n    app.config.update(yaml.load(open(os.path.join(__dir__, \"../config.yaml\"))))\nexcept IOError:\n    # Is ok if we can't load config.yaml\n    pass\n\napp.register_blueprint(auth)\napp.register_blueprint(health_blueprint)\napp.register_blueprint(user_blueprint)\napp.register_blueprint(templatehelpers)\n\nglobal_conn = Connections(app.config)\napp.session_interface = RedisSessionInterface(global_conn.redis)\n\n\nclass QueriesRangeBasedPagination(RangeBasedPagination):\n    def get_page_link(self, page_key, limit):\n        get_params = dict(request.args)\n        get_params.update({\n            'from': page_key, 'limit': limit})\n        return url_for('query_runs_all', **dict(\n            [(key, value) for key, value in list(get_params.items())])\n        )\n\n    def order_queryset(self):\n        if self.direction == 'next':\n            self.queryset = self.queryset.order_by(desc(QueryRun.timestamp))\n        else:\n            self.queryset = self.queryset.order_by(QueryRun.timestamp)\n\n    def filter_queryset(self):\n        if self.page_key is None:\n            return\n        from_query = g.conn.session.query(Query).get(self.page_key)\n        if from_query:\n            from_qrun_id = from_query.latest_rev.latest_run.id\n            if self.direction == 'prev':\n                self.queryset = self.queryset.filter(\n                    QueryRun.id > from_qrun_id)\n            else:\n                self.queryset = self.queryset.filter(\n                    QueryRun.id < from_qrun_id)\n\n\n@app.before_request\ndef setup_context():\n    g.conn = Connections(app.config)\n\n\n@app.teardown_request\ndef kill_context(exception=None):\n    g.conn.close_all()\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"landing.html\", user=get_user())\n\n\n@app.route(\"/api/query/unstar\", methods=[\"POST\"])\ndef unstar_query():\n    if get_user() is None:\n        return \"Unauthorized access\", 403\n    query = g.conn.session.query(Query).get(request.form['query_id'])\n    if query:\n        star = g.conn.session.query(Star)\\\n            .filter(Star.query_id == request.form['query_id'])\\\n            .filter(Star.user_id == get_user().id)\\\n            .one()\n        g.conn.session.delete(star)\n        g.conn.session.commit()\n        return \"\"\n    else:\n        return \"Query not found\", 404\n\n\n@app.route(\"/api/query/star\", methods=[\"POST\"])\ndef star_query():\n    if get_user() is None:\n        return \"Unauthorized access\", 403\n    query = g.conn.session.query(Query).get(request.form['query_id'])\n    if query:\n        star = Star()\n        star.user = get_user()\n        star.query = query\n        g.conn.session.add(star)\n        try:\n            g.conn.session.commit()\n        except IntegrityError as e:\n            if e.args[0] == 1062:  # Duplicate\n                g.conn.session.rollback()\n            else:\n                raise\n        return \"\"\n    else:\n        return \"Query not found\", 404\n\n\n@app.route(\"/query/new\")\ndef new_query():\n    if get_user() is None:\n        return redirect(\"/login?next=/query/new\")\n    query = Query()\n    query.user = get_user()\n    g.conn.session.add(query)\n    g.conn.session.commit()\n    return redirect(url_for('query_show', query_id=query.id))\n\n\n@app.route(\"/fork/<int:id>\")\ndef fork_query(id):\n    if get_user() is None:\n        return redirect(\"/login?next=fork/{id}\".format(id=id))\n    query = Query()\n    query.user = get_user()\n    parent_query = g.conn.session.query(Query).filter(Query.id == id).one()\n    query.title = parent_query.title\n    query.parent_id = parent_query.id\n    query.description = parent_query.description\n    g.conn.session.add(query)\n    g.conn.session.commit()\n\n    query_rev = QueryRevision(query_id=query.id, text=parent_query.latest_rev.text)\n    query.latest_rev = query_rev\n    g.conn.session.add(query)\n    g.conn.session.add(query_rev)\n    g.conn.session.commit()\n    return redirect(url_for('query_show', query_id=query.id))\n\n\n@app.route(\"/query/<int:query_id>\")\ndef query_show(query_id):\n    query = g.conn.session.query(Query).filter(Query.id == query_id).one()\n    can_edit = get_user() is not None and get_user().id == query.user_id\n    is_starred = False\n    if get_user():\n        is_starred = g.conn.session.query(func.count(Star.id))\\\n            .filter(Star.user_id == get_user().id)\\\n            .filter(Star.query_id == query_id).scalar() == 1\n    jsvars = {\n        'query_id': query.id,\n        'can_edit': can_edit,\n        'is_starred': is_starred,\n        'published': query.published,\n        'preferences': get_preferences()\n    }\n\n    if query.latest_rev and query.latest_rev.latest_run_id:\n        jsvars['qrun_id'] = query.latest_rev.latest_run_id\n\n    return render_template(\n        \"query/view.html\",\n        user=get_user(),\n        query=query,\n        jsvars=jsvars,\n        latest_rev=query.latest_rev\n    )\n\n\n@app.route('/query/<int:query_id>/result/latest/<string:resultset_id>/<string:format>')\ndef query_output_redirect(query_id, resultset_id, format):\n    query = g.conn.session.query(Query).filter(Query.id == query_id).one()\n    qrun_id = query.latest_rev.latest_run_id\n    # FIXME: Enforce HTTPS everywhere in a nicer way!\n    resp = redirect(\n        url_for('output_result', qrun_id=qrun_id,\n                resultset_id=resultset_id, format=format,\n                _external=True, _scheme='https')\n    )\n    # CORS on the redirect\n    resp.headers.add('Access-Control-Allow-Origin', '*')\n    return resp\n\n\n@app.route('/api/query/meta', methods=['POST'])\ndef api_set_meta():\n    if get_user() is None:\n        return \"Authentication required\", 401\n\n    query = g.conn.session.query(Query).filter(Query.id == request.form['query_id']).one()\n\n    if query.user_id != get_user().id:\n        return \"Authorization denied\", 403\n\n    if 'title' in request.form:\n        query.title = request.form['title']\n    if 'published' in request.form:\n        query.published = request.form['published'] == '1'\n    if 'description' in request.form:\n        query.description = request.form['description']\n    g.conn.session.add(query)\n    g.conn.session.commit()\n    return json.dumps({'id': query.id})\n\n\n@app.route('/api/query/run', methods=['POST'])\ndef api_run_query():\n    if get_user() is None:\n        return \"Authentication required\", 401\n    text = request.form['text']\n    query = g.conn.session.query(Query).filter(Query.id == request.form['query_id']).one()\n\n    if query.user_id != get_user().id or \\\n            g.conn.session.query(UserGroup).filter(UserGroup.user_id == get_user().id) \\\n            .filter(UserGroup.group_name == 'blocked').first():\n        return \"Authorization denied\", 403\n\n    if query.latest_rev and query.latest_rev.latest_run:\n        result = worker.run_query.AsyncResult(query.latest_rev.latest_run.task_id)\n        if not result.ready():\n            result.revoke(terminate=True)\n            query.latest_rev.latest_run.status = QueryRun.STATUS_SUPERSEDED\n            g.conn.session.add(query.latest_rev.latest_run)\n            g.conn.session.commit()\n\n    query_rev = QueryRevision(query_id=query.id, text=text)\n    query.latest_rev = query_rev\n\n    # XXX (phuedx, 2014/08/08): This deviates from the pre-existing\n    # QueryRevision interface, but I'm not confident that SQLAlchemy would\n    # invalidate a cached result for a relationship if a property changed.\n    query_run = QueryRun()\n    query_run.rev = query_rev\n    query_run.status = QueryRun.STATUS_QUEUED\n\n    g.conn.session.add(query_run)\n    g.conn.session.add(query)\n    g.conn.session.commit()\n    query_rev.latest_run = query_run\n    query_run.task_id = worker.run_query.delay(query_run.id).task_id\n    g.conn.session.add(query_rev)\n    g.conn.session.add(query_run)\n    g.conn.session.commit()\n    return json.dumps({\n        'qrun_id': query_run.id\n    })\n\n\n@app.route(\"/query/runs/all\")\ndef query_runs_all():\n    queries = g.conn.session.query(Query)\\\n        .join(Query.latest_rev).join(QueryRevision.latest_run)\n    queries_filter = 'all'\n    if request.args.get('published') == 'true':\n        queries = queries.filter(Query.published)\n        queries_filter = 'published'\n    limit = int(request.args.get(\n        'limit', app.config.get('QUERY_RESULTS_PER_PAGE', 50)))\n    queries, prev_link, next_link = QueriesRangeBasedPagination(\n        queries, request.args.get('from'), limit,\n        request.path,\n        request.referrer, dict(request.args)).paginate()\n    return render_template(\n        \"query/list.html\", user=get_user(), queries=queries,\n        prev_link=prev_link, next_link=next_link,\n        queries_filter=queries_filter)\n\n\n@app.route('/run/<int:qrun_id>/status')\ndef run_status(qrun_id):\n    qrun = g.conn.session.query(QueryRun).get(qrun_id)\n    if not qrun:\n        return Response('No such query_run id', status=404)\n    return Response(json.dumps({\n        'status': qrun.status_message,\n        'extra': json.loads(qrun.extra_info or '{}'),\n        'timestamp': qrun.timestamp.strftime('%s')\n    }), mimetype='application/json', headers={'Access-Control-Allow-Origin': '*'})\n\n\n@app.route(\"/run/<int:qrun_id>/output/<int:resultset_id>/<string:format>\")\ndef output_result(qrun_id, resultset_id=0, format='json'):\n    qrun = g.conn.session.query(QueryRun).get(qrun_id)\n    if not qrun:\n        response = Response('No such query_run id', status=404)\n    else:\n        reader = SQLiteResultReader(qrun, app.config['OUTPUT_PATH_TEMPLATE'])\n        try:\n            response = output.get_formatted_response(format, qrun, reader, resultset_id)\n        except sqlite3.OperationalError as e:\n            if e.args[0].startswith('no such table'):\n                response = Response('No such resultset id', status=404)\n            else:\n                raise\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response\n\n\n@app.route(\"/run/<int:qrun_id>/meta\")\ndef output_run_meta(qrun_id):\n    qrun = g.conn.session.query(QueryRun).get(qrun_id)\n    if not qrun:\n        return Response('No such query run id', status=404)\n    return Response(json.dumps(\n        {\n            'run': qrun,\n            'rev': qrun.rev,\n            'query': qrun.rev.query\n        }, default=json_formatter),\n        mimetype='application/json',\n        headers={'Access-Control-Allow-Origin': '*'},\n    )\n\n\n@app.route(\"/rev/<int:rev_id>/meta\")\ndef output_rev_meta(rev_id):\n    rev = g.conn.session.query(QueryRevision).get(rev_id)\n    if not rev:\n        return Response('No such query revision id', status=404)\n    return Response(json.dumps(\n        {\n            'latest_run': rev.latest_run,\n            'rev': rev,\n            'query': rev.query\n        }, default=json_formatter),\n        mimetype='application/json',\n        headers={'Access-Control-Allow-Origin': '*'},\n    )\n\n\n@app.route(\"/query/<int:query_id>/meta\")\ndef output_query_meta(query_id):\n    query = g.conn.session.query(Query).get(query_id)\n    if not query:\n        return Response('No such query id', status=404)\n    return Response(json.dumps(\n        {\n            'latest_run': query.latest_rev.latest_run,\n            'latest_rev': query.latest_rev,\n            'query': query\n        }, default=json_formatter),\n        mimetype='application/json',\n        headers={'Access-Control-Allow-Origin': '*'},\n    )\n\n\n@app.route(\"/explain/<int:connection_id>\")\ndef output_explain(connection_id):\n    cur = g.conn.replica.cursor()\n    try:\n        cur.execute('SHOW EXPLAIN FOR %d;' % connection_id)\n    except cur.InternalError as e:\n        if e.args[0] in [1094, 1915, 1933]:\n            # 1094 = Unknown thread id\n            # 1915, 1933 = Target is not running an EXPLAINable command\n            return Response(json.dumps(\n                {\n                    'headers': ['Error'],\n                    'rows': [['Hmm... Is the SQL actually running?!']],\n                }, default=json_formatter),\n                mimetype='application/json',\n            )\n        else:\n            raise\n    else:\n        return Response(json.dumps(\n            {\n                'headers': [c[0] for c in cur.description],\n                'rows': cur.fetchall(),\n            }, default=json_formatter),\n            mimetype='application/json',\n        )\n\n\n@app.route(\"/api/preferences/get/<key>\")\ndef pref_get(key):\n    if get_user() is None:\n        return \"Authentication required\", 401\n\n    if key in get_preferences():\n        return Response(json.dumps({'key': key, 'value': get_preferences()[key]}))\n    else:\n        return Response(json.dumps({'key': key, 'error': 'novalue'}))\n\n\n@app.route(\"/api/preferences/set/<key>/<value>\")\ndef pref_set(key, value):\n    if get_user() is None:\n        return \"Authentication required\", 401\n\n    get_preferences()[key] = (None if value == 'null' else value)\n    return Response(json.dumps({'key': key, 'success': ''})), 201\n\n\nif __name__ == '__main__':\n    app.run(port=5000, host=\"0.0.0.0\")\n", "patch": "@@ -398,9 +398,15 @@ def pref_get(key):\n         return \"Authentication required\", 401\n \n     if key in get_preferences():\n-        return Response(json.dumps({'key': key, 'value': get_preferences()[key]}))\n+        return Response(\n+            json.dumps({'key': key, 'value': get_preferences()[key]}),\n+            mimetype='application/json'\n+        )\n     else:\n-        return Response(json.dumps({'key': key, 'error': 'novalue'}))\n+        return Response(\n+            json.dumps({'key': key, 'error': 'novalue'}),\n+            mimetype='application/json'\n+        )\n \n \n @app.route(\"/api/preferences/set/<key>/<value>\")\n@@ -409,7 +415,10 @@ def pref_set(key, value):\n         return \"Authentication required\", 401\n \n     get_preferences()[key] = (None if value == 'null' else value)\n-    return Response(json.dumps({'key': key, 'success': ''})), 201\n+    return Response(\n+        json.dumps({'key': key, 'success': ''}),\n+        mimetype='application/json'\n+    ), 201\n \n \n if __name__ == '__main__':", "file_path": "files/2021_4/485", "file_language": "py", "file_name": "quarry/web/app.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
