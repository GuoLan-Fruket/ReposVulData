{"index": 8389, "cve_id": "CVE-2022-2113", "cwe_id": ["CWE-79"], "cve_language": "Python", "cve_description": "Cross-site Scripting (XSS) - Stored in GitHub repository inventree/inventree prior to 0.7.2.", "cvss": "5.4", "publish_date": "June 17, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "commit_message": "Back porting of security patches (#3197)\n\n* Merge pull request from GHSA-fr2w-mp56-g4xp\r\n\r\n* Enforce file download for attachments table(s)\r\n\r\n* Enforce file download for attachment in 'StockItemTestResult' table\r\n\r\n(cherry picked from commit 76aa3a75f2e5b93877a229e29326b8b4ea815aea)\r\n\r\n* Merge pull request from GHSA-7rq4-qcpw-74gq\r\n\r\n* Merge pull request from GHSA-rm89-9g65-4ffr\r\n\r\n* Enable HTML escaping for all tables by default\r\n\r\n* Enable HTML escaping for all tables by default\r\n\r\n* Adds automatic escaping for bootstrap tables where custom formatter function is specified\r\n\r\n- Intercept the row data *before* it is provided to the renderer function\r\n- Adds a function for sanitizing nested data structure\r\n\r\n* Sanitize form data before processing\r\n\r\n(cherry picked from commit cd418d6948e6bf5f428cec5b4a7a1f0618a482a3)\r\n\r\n* Increment version number for release\r\n\r\n* Fix sanitization for array case - was missing a return value", "commit_date": "2022-06-15T10:43:43Z", "project": "inventree/inventree", "url": "https://api.github.com/repos/inventree/InvenTree/commits/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "html_url": "https://github.com/inventree/InvenTree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "windows_before": [{"commit_id": "7a1869d30cf7020953ee2c3e244020c6b7fb283c", "commit_date": "Wed Jun 15 20:43:32 2022 +1000", "commit_message": "Fix sanitization for array case - was missing a return value (#3199)", "files_name": ["InvenTree/InvenTree/static/script/inventree/inventree.js"]}, {"commit_id": "cd418d6948e6bf5f428cec5b4a7a1f0618a482a3", "commit_date": "Wed Jun 15 18:33:33 2022 +1000", "commit_message": "Merge pull request from GHSA-rm89-9g65-4ffr", "files_name": ["InvenTree/InvenTree/static/script/inventree/inventree.js", "InvenTree/templates/js/translated/forms.js", "InvenTree/templates/js/translated/tables.js"]}, {"commit_id": "57563f6b7acd1dbff69f7e519b244ed33d957a3d", "commit_date": "Wed Jun 15 18:32:35 2022 +1000", "commit_message": "Merge pull request from GHSA-7rq4-qcpw-74gq", "files_name": ["InvenTree/InvenTree/admin.py", "InvenTree/build/admin.py", "InvenTree/company/admin.py", "InvenTree/order/admin.py", "InvenTree/part/admin.py", "InvenTree/stock/admin.py"]}, {"commit_id": "76aa3a75f2e5b93877a229e29326b8b4ea815aea", "commit_date": "Wed Jun 15 18:31:56 2022 +1000", "commit_message": "Merge pull request from GHSA-fr2w-mp56-g4xp", "files_name": ["InvenTree/templates/js/translated/attachment.js", "InvenTree/templates/js/translated/stock.js", "InvenTree/templates/js/translated/tables.js"]}, {"commit_id": "0759c3769e68035f60925e907a98f30f1e380bc7", "commit_date": "Tue Jun 14 10:07:48 2022 +1000", "commit_message": "Spelling fix: dates -> days (#3193)", "files_name": ["SECURITY.md"]}, {"commit_id": "3ae0a9d9749504f8e4bb80a7efe91a59fd5c58a3", "commit_date": "Tue Jun 14 08:10:10 2022 +1000", "commit_message": "Add major release notes section for security fixes (#3191)", "files_name": [".github/release.yml"]}, {"commit_id": "0a0d151f15f4869db7b887b4c076b3e3d3baace8", "commit_date": "Tue Jun 14 08:09:51 2022 +1000", "commit_message": "Add security.md (#3190)", "files_name": ["SECURITY.md"]}, {"commit_id": "8b464e43971328b97d36378dab8720173a9de745", "commit_date": "Sun Jun 12 16:06:11 2022 +1000", "commit_message": "Migrate \"Convert to Variant\" form to the API (#3183)", "files_name": ["InvenTree/InvenTree/api_version.py", "InvenTree/part/api.py", "InvenTree/part/test_api.py", "InvenTree/stock/api.py", "InvenTree/stock/forms.py", "InvenTree/stock/serializers.py", "InvenTree/stock/templates/stock/item_base.html", "InvenTree/stock/templates/stock/stockitem_convert.html", "InvenTree/stock/test_api.py", "InvenTree/stock/urls.py", "InvenTree/stock/views.py"]}, {"commit_id": "9b86bc6002fa072483cd1c38cc478e6fb7742fac", "commit_date": "Sun Jun 12 14:10:15 2022 +1000", "commit_message": "New Crowdin updates (#3162)", "files_name": ["InvenTree/locale/cs/LC_MESSAGES/django.po", "InvenTree/locale/de/LC_MESSAGES/django.po", "InvenTree/locale/el/LC_MESSAGES/django.po", "InvenTree/locale/en/LC_MESSAGES/django.po", "InvenTree/locale/es/LC_MESSAGES/django.po", "InvenTree/locale/es_MX/LC_MESSAGES/django.po", "InvenTree/locale/fa/LC_MESSAGES/django.po", "InvenTree/locale/fr/LC_MESSAGES/django.po", "InvenTree/locale/he/LC_MESSAGES/django.po", "InvenTree/locale/hu/LC_MESSAGES/django.po", "InvenTree/locale/id/LC_MESSAGES/django.po", "InvenTree/locale/it/LC_MESSAGES/django.po", "InvenTree/locale/ja/LC_MESSAGES/django.po", "InvenTree/locale/ko/LC_MESSAGES/django.po", "InvenTree/locale/nl/LC_MESSAGES/django.po", "InvenTree/locale/no/LC_MESSAGES/django.po", "InvenTree/locale/pl/LC_MESSAGES/django.po", "InvenTree/locale/pt/LC_MESSAGES/django.po", "InvenTree/locale/pt_br/LC_MESSAGES/django.po", "InvenTree/locale/ru/LC_MESSAGES/django.po", "InvenTree/locale/sv/LC_MESSAGES/django.po", "InvenTree/locale/th/LC_MESSAGES/django.po", "InvenTree/locale/tr/LC_MESSAGES/django.po", "InvenTree/locale/vi/LC_MESSAGES/django.po", "InvenTree/locale/zh/LC_MESSAGES/django.po"]}, {"commit_id": "1ae6bde896e96ae9e436a660d2ac120a8dac5a12", "commit_date": "Sun Jun 12 12:58:40 2022 +1000", "commit_message": "Clear cache for more unit tests (#3184)", "files_name": ["InvenTree/common/tests.py", "InvenTree/report/tests.py"]}, {"commit_id": "6eddcd3c23b1ee64dd49c48da97ba8d6a3117a50", "commit_date": "Sun Jun 12 10:56:16 2022 +1000", "commit_message": "Setting caching (#3178)", "files_name": ["InvenTree/InvenTree/settings.py", "InvenTree/InvenTree/urls.py", "InvenTree/common/apps.py", "InvenTree/common/models.py", "InvenTree/common/settings.py", "InvenTree/common/tests.py", "InvenTree/part/test_part.py", "InvenTree/plugin/apps.py", "InvenTree/report/tests.py"]}, {"commit_id": "90aa7b8444d9f51e5b02e9afed19881a065a0152", "commit_date": "Sat Jun 11 15:13:13 2022 +0200", "commit_message": "Sentry (#3174)", "files_name": ["InvenTree/InvenTree/settings.py", "InvenTree/config_template.yaml", "requirements.txt"]}, {"commit_id": "5ecba6b13c9ce062052b263addeaed503e309abd", "commit_date": "Sat Jun 11 23:11:50 2022 +1000", "commit_message": "Add error handling for case where user does not have git installed (#3179)", "files_name": ["InvenTree/plugin/helpers.py", "InvenTree/plugin/registry.py"]}, {"commit_id": "090f4f438719eec8ae8949fd98e52ec154b76516", "commit_date": "Sat Jun 11 21:53:26 2022 +1000", "commit_message": "Converting more forms to the API (#3181)", "files_name": ["InvenTree/InvenTree/forms.py", "InvenTree/InvenTree/views.py", "InvenTree/part/templates/part/category.html", "InvenTree/part/templates/part/category_delete.html", "InvenTree/part/urls.py", "InvenTree/part/views.py", "InvenTree/stock/templates/stock/item_base.html", "InvenTree/stock/templates/stock/item_delete.html", "InvenTree/stock/templates/stock/location.html", "InvenTree/stock/templates/stock/location_delete.html", "InvenTree/stock/urls.py", "InvenTree/stock/views.py", "InvenTree/templates/js/translated/part.js", "InvenTree/templates/js/translated/stock.js"]}, {"commit_id": "63f1e58ca94e99999835b6ef271c7ba6b4a92414", "commit_date": "Sat Jun 11 19:58:36 2022 +1000", "commit_message": "Fix container priority for docker compose recipe (#3180)", "files_name": ["docker/production/docker-compose.yml"]}, {"commit_id": "7c28bf1f64245fbdf3408671e87c936b818cb7da", "commit_date": "Sat Jun 11 02:07:57 2022 +0200", "commit_message": "Clean up tasks (#3175)", "files_name": ["tasks.py"]}, {"commit_id": "d9efe27f8af4309e9f986e8a5c6e9dacc0e7f42c", "commit_date": "Fri Jun 10 20:16:19 2022 +1000", "commit_message": "Adds redis support to production docker-compose (#3171)", "files_name": ["docker/production/.env", "docker/production/docker-compose.yml"]}, {"commit_id": "79f498a648e889454e083023ae003c96e359cb8c", "commit_date": "Thu Jun 9 03:47:29 2022 +0200", "commit_message": "Export records update - allow overwriting existing files without user input (#3156)", "files_name": [".pre-commit-config.yaml", "tasks.py"]}, {"commit_id": "258957c14c371b16578337bb8a440279d4b8fa74", "commit_date": "Wed Jun 8 21:49:07 2022 +1000", "commit_message": "SupplierPart availability (#3148)", "files_name": ["InvenTree/InvenTree/api_version.py", "InvenTree/company/migrations/0044_auto_20220607_2204.py", "InvenTree/company/models.py", "InvenTree/company/serializers.py", "InvenTree/company/templates/company/supplier_part.html", "InvenTree/company/test_api.py", "InvenTree/templates/js/translated/bom.js", "InvenTree/templates/js/translated/build.js", "InvenTree/templates/js/translated/company.js", "InvenTree/templates/js/translated/helpers.js", "InvenTree/templates/js/translated/stock.js"]}, {"commit_id": "a8a543755f8612a2c52fe4c0953895ca79c9a008", "commit_date": "Wed Jun 8 09:36:16 2022 +1000", "commit_message": "Update release.yml (#3159)", "files_name": [".github/release.yml"]}, {"commit_id": "b49230b32c6a333a831bfd1484b7ecc4685a2bbd", "commit_date": "Wed Jun 8 08:51:56 2022 +1000", "commit_message": "L10 crowdin (#3158)", "files_name": ["InvenTree/locale/cs/LC_MESSAGES/django.po", "InvenTree/locale/de/LC_MESSAGES/django.po", "InvenTree/locale/el/LC_MESSAGES/django.po", "InvenTree/locale/en/LC_MESSAGES/django.po", "InvenTree/locale/es/LC_MESSAGES/django.po", "InvenTree/locale/es_MX/LC_MESSAGES/django.po", "InvenTree/locale/fa/LC_MESSAGES/django.po", "InvenTree/locale/fr/LC_MESSAGES/django.po", "InvenTree/locale/he/LC_MESSAGES/django.po", "InvenTree/locale/hu/LC_MESSAGES/django.po", "InvenTree/locale/id/LC_MESSAGES/django.po", "InvenTree/locale/it/LC_MESSAGES/django.po", "InvenTree/locale/ja/LC_MESSAGES/django.po", "InvenTree/locale/ko/LC_MESSAGES/django.po", "InvenTree/locale/nl/LC_MESSAGES/django.po", "InvenTree/locale/no/LC_MESSAGES/django.po", "InvenTree/locale/pl/LC_MESSAGES/django.po", "InvenTree/locale/pt/LC_MESSAGES/django.po", "InvenTree/locale/pt_br/LC_MESSAGES/django.po", "InvenTree/locale/ru/LC_MESSAGES/django.po", "InvenTree/locale/sv/LC_MESSAGES/django.po", "InvenTree/locale/th/LC_MESSAGES/django.po", "InvenTree/locale/tr/LC_MESSAGES/django.po", "InvenTree/locale/vi/LC_MESSAGES/django.po", "InvenTree/locale/zh/LC_MESSAGES/django.po"]}, {"commit_id": "a816c14b95ff67b44ae8f1b72d6e0668bd411abb", "commit_date": "Wed Jun 8 07:45:42 2022 +1000", "commit_message": "Allow build orders to be deleted via the API (#3155)", "files_name": ["InvenTree/build/api.py", "InvenTree/build/templates/build/build_base.html", "InvenTree/build/templates/build/delete_build.html", "InvenTree/build/test_api.py", "InvenTree/build/urls.py", "InvenTree/build/views.py"]}, {"commit_id": "403655e3d2789c29137bff985c9f9d968ef276b4", "commit_date": "Wed Jun 8 07:45:30 2022 +1000", "commit_message": "Adding bulk deletion endpoint for notifications (#3154)", "files_name": ["InvenTree/InvenTree/api.py", "InvenTree/InvenTree/api_tester.py", "InvenTree/InvenTree/api_version.py", "InvenTree/InvenTree/helpers.py", "InvenTree/InvenTree/metadata.py", "InvenTree/InvenTree/test_api.py", "InvenTree/common/api.py", "InvenTree/common/tests.py", "InvenTree/stock/templates/stock/item.html", "InvenTree/stock/test_api.py", "InvenTree/templates/InvenTree/notifications/history.html", "InvenTree/templates/InvenTree/notifications/inbox.html", "InvenTree/templates/InvenTree/notifications/notifications.html", "InvenTree/templates/attachment_table.html", "InvenTree/templates/js/translated/attachment.js", "InvenTree/templates/js/translated/notification.js", "InvenTree/users/fixtures/users.yaml"]}, {"commit_id": "c0148c0a38d356a3331761244a2cb8234c1310c4", "commit_date": "Tue Jun 7 08:58:00 2022 +1000", "commit_message": "Ensure an error gets logged when a delivery method fails (#3144)", "files_name": ["InvenTree/InvenTree/exceptions.py", "InvenTree/InvenTree/models.py", "InvenTree/order/models.py", "InvenTree/part/test_part.py", "InvenTree/plugin/base/label/label.py"]}], "windows_after": [{"commit_id": "f8a2760955033f2654e6478ec059da12236cbd8e", "commit_date": "Thu Jun 16 07:57:23 2022 +1000", "commit_message": "New Crowdin updates (#3187)", "files_name": ["InvenTree/locale/cs/LC_MESSAGES/django.po", "InvenTree/locale/de/LC_MESSAGES/django.po", "InvenTree/locale/el/LC_MESSAGES/django.po", "InvenTree/locale/en/LC_MESSAGES/django.po", "InvenTree/locale/es/LC_MESSAGES/django.po", "InvenTree/locale/es_MX/LC_MESSAGES/django.po", "InvenTree/locale/fa/LC_MESSAGES/django.po", "InvenTree/locale/fr/LC_MESSAGES/django.po", "InvenTree/locale/he/LC_MESSAGES/django.po", "InvenTree/locale/hu/LC_MESSAGES/django.po", "InvenTree/locale/id/LC_MESSAGES/django.po", "InvenTree/locale/it/LC_MESSAGES/django.po", "InvenTree/locale/ja/LC_MESSAGES/django.po", "InvenTree/locale/ko/LC_MESSAGES/django.po", "InvenTree/locale/nl/LC_MESSAGES/django.po", "InvenTree/locale/no/LC_MESSAGES/django.po", "InvenTree/locale/pl/LC_MESSAGES/django.po", "InvenTree/locale/pt/LC_MESSAGES/django.po", "InvenTree/locale/pt_br/LC_MESSAGES/django.po", "InvenTree/locale/ru/LC_MESSAGES/django.po", "InvenTree/locale/sv/LC_MESSAGES/django.po", "InvenTree/locale/th/LC_MESSAGES/django.po", "InvenTree/locale/tr/LC_MESSAGES/django.po", "InvenTree/locale/vi/LC_MESSAGES/django.po", "InvenTree/locale/zh/LC_MESSAGES/django.po"]}, {"commit_id": "e83995b4f564574445e2ba059de0c03ed69411c4", "commit_date": "Thu Jun 16 02:01:53 2022 +0200", "commit_message": "Add bleach (#41) (#3204)", "files_name": ["InvenTree/InvenTree/api.py", "InvenTree/InvenTree/mixins.py", "InvenTree/build/api.py", "InvenTree/common/api.py", "InvenTree/company/api.py", "InvenTree/label/api.py", "InvenTree/order/api.py", "InvenTree/part/api.py", "InvenTree/plugin/api.py", "InvenTree/report/api.py", "InvenTree/stock/api.py", "InvenTree/users/api.py"]}, {"commit_id": "9bd62f986f7ebe8d01562982b679e51069b7d20e", "commit_date": "Thu Jun 16 10:57:28 2022 +1000", "commit_message": "Sanitize data before displaying in markdown editor (#3205)", "files_name": ["InvenTree/InvenTree/mixins.py", "InvenTree/templates/js/translated/helpers.js"]}, {"commit_id": "d84b67ddf4b423d82862ff9a4c7b1c2d1474342a", "commit_date": "Thu Jun 16 14:49:17 2022 +1000", "commit_message": "Label dpi config (#3208)", "files_name": ["InvenTree/common/models.py", "InvenTree/plugin/base/label/label.py", "InvenTree/templates/InvenTree/settings/label.html", "InvenTree/templates/InvenTree/settings/settings.html", "InvenTree/templates/InvenTree/settings/sidebar.html", "InvenTree/templates/InvenTree/settings/user_labels.html", "InvenTree/templates/base.html"]}, {"commit_id": "136924cd3f35e641719945bd85a1517531523672", "commit_date": "Fri Jun 17 00:14:40 2022 +0200", "commit_message": "fix docs link for \"email settings not configured\" warning (#3209)", "files_name": ["InvenTree/templates/stats.html"]}, {"commit_id": "50a4bda1843fb8d0c4ec2fddc761fbf7af51cbb8", "commit_date": "Fri Jun 17 02:36:36 2022 +0200", "commit_message": "Small changes to password changing (#3213)", "files_name": ["InvenTree/InvenTree/forms.py", "InvenTree/InvenTree/views.py"]}, {"commit_id": "0d01ea2f2e9d1780604a22c78f34b55f330c9648", "commit_date": "Fri Jun 17 11:33:45 2022 +1000", "commit_message": "Auth forms fix (#3214)", "files_name": ["InvenTree/templates/account/login.html", "InvenTree/templates/account/logout.html", "InvenTree/templates/allauth_2fa/authenticate.html", "InvenTree/templates/allauth_2fa/backup_tokens.html", "InvenTree/templates/allauth_2fa/remove.html", "InvenTree/templates/allauth_2fa/setup.html", "requirements.txt"]}, {"commit_id": "74bec866751076958530c0577065e78dd0ad5573", "commit_date": "Fri Jun 17 21:26:28 2022 +1000", "commit_message": "Part page loading improvements (#3185)", "files_name": ["InvenTree/InvenTree/context.py", "InvenTree/InvenTree/settings.py", "InvenTree/InvenTree/static/bootstrap-table/bootstrap-table.min.css", "InvenTree/InvenTree/static/bootstrap-table/bootstrap-table.min.js", "InvenTree/InvenTree/static/css/inventree.css", "InvenTree/InvenTree/static/fullcalendar/locales-all.js", "InvenTree/InvenTree/static/fullcalendar/locales-all.min.js", "InvenTree/InvenTree/static/fullcalendar/locales/bn.js", "InvenTree/InvenTree/static/fullcalendar/locales/de-at.js", "InvenTree/InvenTree/static/fullcalendar/locales/de.js", "InvenTree/InvenTree/static/fullcalendar/locales/en-au.js", "InvenTree/InvenTree/static/fullcalendar/locales/en-gb.js", "InvenTree/InvenTree/static/fullcalendar/locales/en-nz.js", "InvenTree/InvenTree/static/fullcalendar/locales/es.js", "InvenTree/InvenTree/static/fullcalendar/locales/hu.js", "InvenTree/InvenTree/static/fullcalendar/locales/km.js", "InvenTree/InvenTree/static/fullcalendar/locales/ku.js", "InvenTree/InvenTree/static/fullcalendar/locales/nb.js", "InvenTree/InvenTree/static/fullcalendar/locales/si-lk.js", "InvenTree/InvenTree/static/fullcalendar/locales/sm.js", "InvenTree/InvenTree/static/fullcalendar/locales/sv.js", "InvenTree/InvenTree/static/fullcalendar/locales/ta-in.js", "InvenTree/InvenTree/static/fullcalendar/main.css", "InvenTree/InvenTree/static/fullcalendar/main.js", "InvenTree/InvenTree/static/fullcalendar/main.min.css", "InvenTree/InvenTree/static/fullcalendar/main.min.js", "InvenTree/InvenTree/static/script/inventree/inventree.js", "InvenTree/InvenTree/test_views.py", "InvenTree/InvenTree/urls.py", "InvenTree/InvenTree/views.py", "InvenTree/build/templates/build/build_base.html", "InvenTree/company/models.py", "InvenTree/company/templates/company/company_base.html", "InvenTree/company/templates/company/manufacturer_part.html", "InvenTree/company/templates/company/supplier_part.html", "InvenTree/part/filters.py", "InvenTree/part/models.py", "InvenTree/part/serializers.py", "InvenTree/part/templates/part/detail.html", "InvenTree/part/templates/part/part_thumb.html", "InvenTree/stock/api.py", "InvenTree/stock/serializers.py", "InvenTree/stock/templates/stock/item_base.html", "InvenTree/templates/about.html", "InvenTree/templates/account/base.html", "InvenTree/templates/base.html", "InvenTree/templates/js/translated/build.js", "InvenTree/templates/page_base.html", "InvenTree/templates/skeleton.html", "InvenTree/templates/third_party_js.html", "InvenTree/users/models.py"]}, {"commit_id": "18cf92ec8b30e941386def2fca647e1bb8c8d540", "commit_date": "Sat Jun 18 12:30:59 2022 +1000", "commit_message": "Update django-allauth to 0.48.0 (#3217)", "files_name": ["InvenTree/InvenTree/settings.py", "requirements.txt"]}, {"commit_id": "12fcccb5a63f3c15c521a61ce3b60a712a0deca7", "commit_date": "Sat Jun 18 14:48:09 2022 +1000", "commit_message": "Fix API endpoint permission for the \"AttachmentMixin\" class (#3218)", "files_name": ["InvenTree/InvenTree/api.py", "InvenTree/templates/attachment_table.html", "InvenTree/templates/js/translated/attachment.js", "InvenTree/users/models.py"]}, {"commit_id": "36868ebb4c9b3a17d37683f71151d0cbf0f9ffe6", "commit_date": "Sat Jun 18 14:49:46 2022 +1000", "commit_message": "Hide buttons for users without required permissions (#3219)", "files_name": ["InvenTree/build/templates/build/detail.html", "InvenTree/part/templates/part/detail.html", "InvenTree/stock/templates/stock/item.html"]}, {"commit_id": "9ba3fdf23dda3edc327d4ac01a3cb0236ffca76a", "commit_date": "Sat Jun 18 16:42:50 2022 +1000", "commit_message": "Only enable browsable API if in debug mode (#3221)", "files_name": ["InvenTree/InvenTree/settings.py"]}, {"commit_id": "eeff6074e7633651883ac266bef93f123faed5a5", "commit_date": "Sat Jun 18 17:08:47 2022 +1000", "commit_message": "Adds a simple unit test to ensure that bleach is running on API data (#3222)", "files_name": ["InvenTree/part/test_api.py"]}, {"commit_id": "eb255e84d868ff9bf17365e774c0b53552391814", "commit_date": "Sat Jun 18 17:33:59 2022 +1000", "commit_message": "Small UI improvements to the settings interface (#3223)", "files_name": ["InvenTree/templates/InvenTree/settings/user.html", "InvenTree/templates/InvenTree/settings/user_display.html"]}, {"commit_id": "652e6fb83e26b7d623fcb8a37a7a09115395402a", "commit_date": "Sat Jun 18 22:22:00 2022 +1000", "commit_message": "Sales order tables (#3225)", "files_name": ["InvenTree/build/templates/build/detail.html", "InvenTree/order/templates/order/sales_order_detail.html", "InvenTree/templates/collapse_rows.html", "InvenTree/templates/expand_rows.html", "InvenTree/templates/js/translated/order.js"]}, {"commit_id": "a8b71d7d9e7e601bf838ef68e8f7df89a75ccbdf", "commit_date": "Mon Jun 20 11:35:59 2022 +1000", "commit_message": "New Crowdin updates (#3227)", "files_name": ["InvenTree/locale/cs/LC_MESSAGES/django.po", "InvenTree/locale/de/LC_MESSAGES/django.po", "InvenTree/locale/el/LC_MESSAGES/django.po", "InvenTree/locale/en/LC_MESSAGES/django.po", "InvenTree/locale/es/LC_MESSAGES/django.po", "InvenTree/locale/es_MX/LC_MESSAGES/django.po", "InvenTree/locale/fa/LC_MESSAGES/django.po", "InvenTree/locale/fr/LC_MESSAGES/django.po", "InvenTree/locale/he/LC_MESSAGES/django.po", "InvenTree/locale/hu/LC_MESSAGES/django.po", "InvenTree/locale/id/LC_MESSAGES/django.po", "InvenTree/locale/it/LC_MESSAGES/django.po", "InvenTree/locale/ja/LC_MESSAGES/django.po", "InvenTree/locale/ko/LC_MESSAGES/django.po", "InvenTree/locale/nl/LC_MESSAGES/django.po", "InvenTree/locale/no/LC_MESSAGES/django.po", "InvenTree/locale/pl/LC_MESSAGES/django.po", "InvenTree/locale/pt/LC_MESSAGES/django.po", "InvenTree/locale/pt_br/LC_MESSAGES/django.po", "InvenTree/locale/ru/LC_MESSAGES/django.po", "InvenTree/locale/sv/LC_MESSAGES/django.po", "InvenTree/locale/th/LC_MESSAGES/django.po", "InvenTree/locale/tr/LC_MESSAGES/django.po", "InvenTree/locale/vi/LC_MESSAGES/django.po", "InvenTree/locale/zh/LC_MESSAGES/django.po"]}, {"commit_id": "63b4ff3eb6e80861962fafe79c9b483cd7239d6c", "commit_date": "Mon Jun 20 22:20:04 2022 +1000", "commit_message": "Remove reliance on django-markdownx (#3231)", "files_name": ["InvenTree/InvenTree/fields.py", "InvenTree/InvenTree/settings.py", "InvenTree/InvenTree/static/css/color-themes/dark-reader.css", "InvenTree/InvenTree/static/css/inventree.css", "InvenTree/InvenTree/urls.py", "InvenTree/build/migrations/0008_auto_20200201_1247.py", "InvenTree/build/migrations/0014_auto_20200425_1243.py", "InvenTree/build/migrations/0035_alter_build_notes.py", "InvenTree/build/models.py", "InvenTree/company/migrations/0010_auto_20200201_1231.py", "InvenTree/company/migrations/0032_auto_20210403_1837.py", "InvenTree/company/migrations/0045_alter_company_notes.py", "InvenTree/company/models.py", "InvenTree/order/migrations/0015_auto_20200201_2346.py", "InvenTree/order/migrations/0020_auto_20200420_0940.py", "InvenTree/order/migrations/0044_auto_20210404_2016.py", "InvenTree/order/migrations/0053_salesordershipment.py"]}], "parents": [{"commit_id_before": "f9c28eedafb8dc6525ef4f61534b2cde6f5b15fa", "url_before": "https://api.github.com/repos/inventree/InvenTree/commits/f9c28eedafb8dc6525ef4f61534b2cde6f5b15fa", "html_url_before": "https://github.com/inventree/InvenTree/commit/f9c28eedafb8dc6525ef4f61534b2cde6f5b15fa"}], "details": [{"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2FInvenTree%2Fadmin.py", "code": "\"\"\"Admin classes\"\"\"\n\nfrom import_export.resources import ModelResource\n\n\nclass InvenTreeResource(ModelResource):\n    \"\"\"Custom subclass of the ModelResource class provided by django-import-export\"\n\n    Ensures that exported data are escaped to prevent malicious formula injection.\n    Ref: https://owasp.org/www-community/attacks/CSV_Injection\n    \"\"\"\n\n    def export_resource(self, obj):\n        \"\"\"Custom function to override default row export behaviour.\n\n        Specifically, strip illegal leading characters to prevent formula injection\n        \"\"\"\n        row = super().export_resource(obj)\n\n        illegal_start_vals = ['@', '=', '+', '-', '@', '\\t', '\\r', '\\n']\n\n        for idx, val in enumerate(row):\n            if type(val) is str:\n                val = val.strip()\n\n                # If the value starts with certain 'suspicious' values, remove it!\n                while len(val) > 0 and val[0] in illegal_start_vals:\n                    # Remove the first character\n                    val = val[1:]\n\n                row[idx] = val\n\n        return row\n", "code_before": "", "patch": "@@ -0,0 +1,33 @@\n+\"\"\"Admin classes\"\"\"\n+\n+from import_export.resources import ModelResource\n+\n+\n+class InvenTreeResource(ModelResource):\n+    \"\"\"Custom subclass of the ModelResource class provided by django-import-export\"\n+\n+    Ensures that exported data are escaped to prevent malicious formula injection.\n+    Ref: https://owasp.org/www-community/attacks/CSV_Injection\n+    \"\"\"\n+\n+    def export_resource(self, obj):\n+        \"\"\"Custom function to override default row export behaviour.\n+\n+        Specifically, strip illegal leading characters to prevent formula injection\n+        \"\"\"\n+        row = super().export_resource(obj)\n+\n+        illegal_start_vals = ['@', '=', '+', '-', '@', '\\t', '\\r', '\\n']\n+\n+        for idx, val in enumerate(row):\n+            if type(val) is str:\n+                val = val.strip()\n+\n+                # If the value starts with certain 'suspicious' values, remove it!\n+                while len(val) > 0 and val[0] in illegal_start_vals:\n+                    # Remove the first character\n+                    val = val[1:]\n+\n+                row[idx] = val\n+\n+        return row", "file_path": "files/2022_6/416", "file_language": "py", "file_name": "InvenTree/InvenTree/admin.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2FInvenTree%2Fstatic%2Fscript%2Finventree%2Finventree.js", "code": "/* globals\n    ClipboardJS,\n    inventreeFormDataUpload,\n    inventreeGet,\n    launchModalForm,\n    user_settings,\n*/\n\n/* exported\n    attachClipboard,\n    enableDragAndDrop,\n    exportFormatOptions,\n    inventreeDocReady,\n    inventreeLoad,\n    inventreeSave,\n    sanitizeData,\n*/\n\nfunction attachClipboard(selector, containerselector, textElement) {\n    // set container\n    if (containerselector) {\n        containerselector = document.getElementById(containerselector);\n    } else {\n        containerselector = document.body;\n    }\n\n    var text = null;\n\n    // set text-function\n    if (textElement) {\n        text = function() {\n            return document.getElementById(textElement).textContent;\n        };\n    } else {\n        text = function(trigger) {\n            var content = trigger.parentElement.parentElement.textContent;\n            return content.trim();\n        };\n    }\n\n    // create Clipboard\n    // eslint-disable-next-line no-unused-vars\n    var cis = new ClipboardJS(selector, {\n        text: text,\n        container: containerselector\n    });\n}\n\n\n/**\n * Return a standard list of export format options *\n */\nfunction exportFormatOptions() {\n    return [\n        {\n            value: 'csv',\n            display_name: 'CSV',\n        },\n        {\n            value: 'tsv',\n            display_name: 'TSV',\n        },\n        {\n            value: 'xls',\n            display_name: 'XLS',\n        },\n        {\n            value: 'xlsx',\n            display_name: 'XLSX',\n        },\n    ];\n}\n\n\nfunction inventreeDocReady() {\n    /* Run this function when the HTML document is loaded.\n     * This will be called for every page that extends \"base.html\"\n     */\n\n    window.addEventListener('dragover', function(e) {\n        e = e || event;\n        e.preventDefault();\n    }, false);\n\n    window.addEventListener('drop', function(e) {\n        e = e || event;\n        e.preventDefault();\n    }, false);\n\n    /* Add drag-n-drop functionality to any element\n     * marked with the class 'dropzone'\n     */\n    $('.dropzone').on('dragenter', function(event) {\n\n        // TODO - Only indicate that a drop event will occur if a file is being dragged\n        var transfer = event.originalEvent.dataTransfer;\n\n        // eslint-disable-next-line no-constant-condition\n        if (true || isFileTransfer(transfer)) {\n            $(this).addClass('dragover');\n        }\n    });\n\n    $('.dropzone').on('dragleave drop', function() {\n        $(this).removeClass('dragover');\n    });\n\n    // Callback to launch the 'About' window\n    $('#launch-about').click(function() {\n        var modal = $('#modal-about');\n\n        modal.modal({\n            backdrop: 'static',\n            keyboard: true,\n        });\n\n        modal.modal('show');\n    });\n\n    // Callback to launch the 'Database Stats' window\n    $('#launch-stats').click(function() {\n        launchModalForm('/stats/', {\n            no_post: true,\n        });\n    });\n\n    // Initialize clipboard-buttons\n    attachClipboard('.clip-btn');\n    attachClipboard('.clip-btn', 'modal-about');\n    attachClipboard('.clip-btn-version', 'modal-about', 'about-copy-text');\n\n    // Generate brand-icons\n    $('.brand-icon').each(function(i, obj) {\n        loadBrandIcon($(this), $(this).attr('brand_name'));\n    });\n\n    // Callback for \"admin view\" button\n    $('#admin-button, .admin-button').click(function() {\n        var url = $(this).attr('url');\n\n        location.href = url;\n    });\n\n    // Display any cached alert messages\n    showCachedAlerts();\n\n    // start watcher\n    startNotificationWatcher();\n\n    // always refresh when the focus returns\n    $(document).focus(function(){\n        startNotificationWatcher();\n    });\n\n    // kill notification watcher if focus is lost -> respect your users cycles\n    $(document).blur(function(){\n        stopNotificationWatcher();\n    });\n\n    // Calbacks for search panel\n    $('#offcanvas-search').on('shown.bs.offcanvas', openSearchPanel);\n    $('#offcanvas-search').on('hidden.bs.offcanvas', closeSearchPanel);\n\n    // Callbacks for notifications panel\n    $('#offcanvas-notification').on('show.bs.offcanvas', openNotificationPanel);  // listener for opening the notification panel\n    $('#offcanvas-notification').on('hidden.bs.offcanvas', closeNotificationPanel);  // listener for closing the notification panel\n}\n\n\nfunction isFileTransfer(transfer) {\n    /* Determine if a transfer (e.g. drag-and-drop) is a file transfer\n     */\n\n    return transfer.files.length > 0;\n}\n\n\nfunction enableDragAndDrop(element, url, options) {\n    /* Enable drag-and-drop file uploading for a given element.\n\n    Params:\n        element - HTML element lookup string e.g. \"#drop-div\"\n        url - URL to POST the file to\n        options - object with following possible values:\n            label - Label of the file to upload (default='file')\n            data - Other form data to upload\n            success - Callback function in case of success\n            error - Callback function in case of error\n            method - HTTP method\n    */\n\n    var data = options.data || {};\n\n    $(element).on('drop', function(event) {\n\n        var transfer = event.originalEvent.dataTransfer;\n\n        var label = options.label || 'file';\n\n        var formData = new FormData();\n\n        // Add the extra data\n        for (var key in data) {\n            formData.append(key, data[key]);\n        }\n\n        if (isFileTransfer(transfer)) {\n            formData.append(label, transfer.files[0]);\n\n            inventreeFormDataUpload(\n                url,\n                formData,\n                {\n                    success: function(data, status, xhr) {\n                        console.log('Uploaded file via drag-and-drop');\n                        if (options.success) {\n                            options.success(data, status, xhr);\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        console.log('File upload failed');\n                        if (options.error) {\n                            options.error(xhr, status, error);\n                        }\n                    },\n                    method: options.method || 'POST',\n                }\n            );\n        } else {\n            console.log('Ignoring drag-and-drop event (not a file)');\n        }\n    });\n}\n\n\n/**\n * Save a key:value pair to local storage\n * @param {String} name - settting key\n * @param {String} value - setting value\n */\nfunction inventreeSave(name, value) {\n\n    var key = `inventree-${name}`;\n    localStorage.setItem(key, value);\n}\n\n\n/**\n * Retrieve a key:value pair from local storage\n * @param {*} name - setting key\n * @param {*} defaultValue - default value (returned if no matching key:value pair is found)\n * @returns\n */\nfunction inventreeLoad(name, defaultValue) {\n\n    var key = `inventree-${name}`;\n\n    var value = localStorage.getItem(key);\n\n    if (value == null) {\n        return defaultValue;\n    } else {\n        return value;\n    }\n}\n\nfunction loadBrandIcon(element, name) {\n    // check if icon exists\n    var icon = window.FontAwesome.icon({prefix: 'fab', iconName: name});\n\n    if (icon) {\n        // add icon to button\n        element.addClass('fab fa-' + name);\n    }\n}\n\n\n/*\n * Function to sanitize a (potentially nested) object.\n * Iterates through all levels, and sanitizes each primitive string.\n *\n * Note that this function effectively provides a \"deep copy\" of the provided data,\n * and the original data structure is unaltered.\n */\nfunction sanitizeData(data) {\n    if (data == null) {\n        return null;\n    } else if (Array.isArray(data)) {\n        // Handle arrays\n        var arr = [];\n        data.forEach(function(val) {\n            arr.push(sanitizeData(val));\n        });\n\n        return arr;\n    } else if (typeof(data) === 'object') {\n        // Handle nested structures\n        var nested = {};\n        $.each(data, function(k, v) {\n            nested[k] = sanitizeData(v);\n        });\n\n        return nested;\n    } else if (typeof(data) === 'string') {\n        // Perform string replacement\n        return data.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;').replace(/`/g, '&#x60;');\n    } else {\n        return data;\n    }\n}\n\n\n// Convenience function to determine if an element exists\n$.fn.exists = function() {\n    return this.length !== 0;\n};\n", "code_before": "/* globals\n    ClipboardJS,\n    inventreeFormDataUpload,\n    inventreeGet,\n    launchModalForm,\n    user_settings,\n*/\n\n/* exported\n    attachClipboard,\n    enableDragAndDrop,\n    exportFormatOptions,\n    inventreeDocReady,\n    inventreeLoad,\n    inventreeSave,\n*/\n\nfunction attachClipboard(selector, containerselector, textElement) {\n    // set container\n    if (containerselector) {\n        containerselector = document.getElementById(containerselector);\n    } else {\n        containerselector = document.body;\n    }\n\n    var text = null;\n\n    // set text-function\n    if (textElement) {\n        text = function() {\n            return document.getElementById(textElement).textContent;\n        };\n    } else {\n        text = function(trigger) {\n            var content = trigger.parentElement.parentElement.textContent;\n            return content.trim();\n        };\n    }\n\n    // create Clipboard\n    // eslint-disable-next-line no-unused-vars\n    var cis = new ClipboardJS(selector, {\n        text: text,\n        container: containerselector\n    });\n}\n\n\n/**\n * Return a standard list of export format options *\n */\nfunction exportFormatOptions() {\n    return [\n        {\n            value: 'csv',\n            display_name: 'CSV',\n        },\n        {\n            value: 'tsv',\n            display_name: 'TSV',\n        },\n        {\n            value: 'xls',\n            display_name: 'XLS',\n        },\n        {\n            value: 'xlsx',\n            display_name: 'XLSX',\n        },\n    ];\n}\n\n\nfunction inventreeDocReady() {\n    /* Run this function when the HTML document is loaded.\n     * This will be called for every page that extends \"base.html\"\n     */\n\n    window.addEventListener('dragover', function(e) {\n        e = e || event;\n        e.preventDefault();\n    }, false);\n\n    window.addEventListener('drop', function(e) {\n        e = e || event;\n        e.preventDefault();\n    }, false);\n\n    /* Add drag-n-drop functionality to any element\n     * marked with the class 'dropzone'\n     */\n    $('.dropzone').on('dragenter', function(event) {\n\n        // TODO - Only indicate that a drop event will occur if a file is being dragged\n        var transfer = event.originalEvent.dataTransfer;\n\n        // eslint-disable-next-line no-constant-condition\n        if (true || isFileTransfer(transfer)) {\n            $(this).addClass('dragover');\n        }\n    });\n\n    $('.dropzone').on('dragleave drop', function() {\n        $(this).removeClass('dragover');\n    });\n\n    // Callback to launch the 'About' window\n    $('#launch-about').click(function() {\n        var modal = $('#modal-about');\n\n        modal.modal({\n            backdrop: 'static',\n            keyboard: true,\n        });\n\n        modal.modal('show');\n    });\n\n    // Callback to launch the 'Database Stats' window\n    $('#launch-stats').click(function() {\n        launchModalForm('/stats/', {\n            no_post: true,\n        });\n    });\n\n    // Initialize clipboard-buttons\n    attachClipboard('.clip-btn');\n    attachClipboard('.clip-btn', 'modal-about');\n    attachClipboard('.clip-btn-version', 'modal-about', 'about-copy-text');\n\n    // Generate brand-icons\n    $('.brand-icon').each(function(i, obj) {\n        loadBrandIcon($(this), $(this).attr('brand_name'));\n    });\n\n    // Callback for \"admin view\" button\n    $('#admin-button, .admin-button').click(function() {\n        var url = $(this).attr('url');\n\n        location.href = url;\n    });\n\n    // Display any cached alert messages\n    showCachedAlerts();\n\n    // start watcher\n    startNotificationWatcher();\n\n    // always refresh when the focus returns\n    $(document).focus(function(){\n        startNotificationWatcher();\n    });\n\n    // kill notification watcher if focus is lost -> respect your users cycles\n    $(document).blur(function(){\n        stopNotificationWatcher();\n    });\n\n    // Calbacks for search panel\n    $('#offcanvas-search').on('shown.bs.offcanvas', openSearchPanel);\n    $('#offcanvas-search').on('hidden.bs.offcanvas', closeSearchPanel);\n\n    // Callbacks for notifications panel\n    $('#offcanvas-notification').on('show.bs.offcanvas', openNotificationPanel);  // listener for opening the notification panel\n    $('#offcanvas-notification').on('hidden.bs.offcanvas', closeNotificationPanel);  // listener for closing the notification panel\n}\n\n\nfunction isFileTransfer(transfer) {\n    /* Determine if a transfer (e.g. drag-and-drop) is a file transfer\n     */\n\n    return transfer.files.length > 0;\n}\n\n\nfunction enableDragAndDrop(element, url, options) {\n    /* Enable drag-and-drop file uploading for a given element.\n\n    Params:\n        element - HTML element lookup string e.g. \"#drop-div\"\n        url - URL to POST the file to\n        options - object with following possible values:\n            label - Label of the file to upload (default='file')\n            data - Other form data to upload\n            success - Callback function in case of success\n            error - Callback function in case of error\n            method - HTTP method\n    */\n\n    var data = options.data || {};\n\n    $(element).on('drop', function(event) {\n\n        var transfer = event.originalEvent.dataTransfer;\n\n        var label = options.label || 'file';\n\n        var formData = new FormData();\n\n        // Add the extra data\n        for (var key in data) {\n            formData.append(key, data[key]);\n        }\n\n        if (isFileTransfer(transfer)) {\n            formData.append(label, transfer.files[0]);\n\n            inventreeFormDataUpload(\n                url,\n                formData,\n                {\n                    success: function(data, status, xhr) {\n                        console.log('Uploaded file via drag-and-drop');\n                        if (options.success) {\n                            options.success(data, status, xhr);\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        console.log('File upload failed');\n                        if (options.error) {\n                            options.error(xhr, status, error);\n                        }\n                    },\n                    method: options.method || 'POST',\n                }\n            );\n        } else {\n            console.log('Ignoring drag-and-drop event (not a file)');\n        }\n    });\n}\n\n\n/**\n * Save a key:value pair to local storage\n * @param {String} name - settting key\n * @param {String} value - setting value\n */\nfunction inventreeSave(name, value) {\n\n    var key = `inventree-${name}`;\n    localStorage.setItem(key, value);\n}\n\n\n/**\n * Retrieve a key:value pair from local storage\n * @param {*} name - setting key\n * @param {*} defaultValue - default value (returned if no matching key:value pair is found)\n * @returns\n */\nfunction inventreeLoad(name, defaultValue) {\n\n    var key = `inventree-${name}`;\n\n    var value = localStorage.getItem(key);\n\n    if (value == null) {\n        return defaultValue;\n    } else {\n        return value;\n    }\n}\n\nfunction loadBrandIcon(element, name) {\n    // check if icon exists\n    var icon = window.FontAwesome.icon({prefix: 'fab', iconName: name});\n\n    if (icon) {\n        // add icon to button\n        element.addClass('fab fa-' + name);\n    }\n}\n\n// Convenience function to determine if an element exists\n$.fn.exists = function() {\n    return this.length !== 0;\n};\n", "patch": "@@ -13,6 +13,7 @@\n     inventreeDocReady,\n     inventreeLoad,\n     inventreeSave,\n+    sanitizeData,\n */\n \n function attachClipboard(selector, containerselector, textElement) {\n@@ -273,6 +274,42 @@ function loadBrandIcon(element, name) {\n     }\n }\n \n+\n+/*\n+ * Function to sanitize a (potentially nested) object.\n+ * Iterates through all levels, and sanitizes each primitive string.\n+ *\n+ * Note that this function effectively provides a \"deep copy\" of the provided data,\n+ * and the original data structure is unaltered.\n+ */\n+function sanitizeData(data) {\n+    if (data == null) {\n+        return null;\n+    } else if (Array.isArray(data)) {\n+        // Handle arrays\n+        var arr = [];\n+        data.forEach(function(val) {\n+            arr.push(sanitizeData(val));\n+        });\n+\n+        return arr;\n+    } else if (typeof(data) === 'object') {\n+        // Handle nested structures\n+        var nested = {};\n+        $.each(data, function(k, v) {\n+            nested[k] = sanitizeData(v);\n+        });\n+\n+        return nested;\n+    } else if (typeof(data) === 'string') {\n+        // Perform string replacement\n+        return data.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;').replace(/`/g, '&#x60;');\n+    } else {\n+        return data;\n+    }\n+}\n+\n+\n // Convenience function to determine if an element exists\n $.fn.exists = function() {\n     return this.length !== 0;", "file_path": "files/2022_6/417", "file_language": "js", "file_name": "InvenTree/InvenTree/static/script/inventree/inventree.js", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2FInvenTree%2Fversion.py", "code": "\"\"\"\nVersion information for InvenTree.\nProvides information on the current InvenTree version\n\"\"\"\n\nimport re\nimport subprocess\n\nimport django\n\nimport common.models\nfrom InvenTree.api_version import INVENTREE_API_VERSION\n\n# InvenTree software version\nINVENTREE_SW_VERSION = \"0.7.2\"\n\n\ndef inventreeInstanceName():\n    \"\"\" Returns the InstanceName settings for the current database \"\"\"\n    return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")\n\n\ndef inventreeInstanceTitle():\n    \"\"\" Returns the InstanceTitle for the current database \"\"\"\n    if common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE_TITLE\", False):\n        return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")\n    else:\n        return 'InvenTree'\n\n\ndef inventreeVersion():\n    \"\"\" Returns the InvenTree version string \"\"\"\n    return INVENTREE_SW_VERSION.lower().strip()\n\n\ndef inventreeVersionTuple(version=None):\n    \"\"\" Return the InvenTree version string as (maj, min, sub) tuple \"\"\"\n\n    if version is None:\n        version = INVENTREE_SW_VERSION\n\n    match = re.match(r\"^.*(\\d+)\\.(\\d+)\\.(\\d+).*$\", str(version))\n\n    return [int(g) for g in match.groups()]\n\n\ndef isInvenTreeDevelopmentVersion():\n    \"\"\"\n    Return True if current InvenTree version is a \"development\" version\n    \"\"\"\n    return inventreeVersion().endswith('dev')\n\n\ndef inventreeDocsVersion():\n    \"\"\"\n    Return the version string matching the latest documentation.\n\n    Development -> \"latest\"\n    Release -> \"major.minor.sub\" e.g. \"0.5.2\"\n\n    \"\"\"\n\n    if isInvenTreeDevelopmentVersion():\n        return \"latest\"\n    else:\n        return INVENTREE_SW_VERSION  # pragma: no cover\n\n\ndef isInvenTreeUpToDate():\n    \"\"\"\n    Test if the InvenTree instance is \"up to date\" with the latest version.\n\n    A background task periodically queries GitHub for latest version,\n    and stores it to the database as INVENTREE_LATEST_VERSION\n    \"\"\"\n\n    latest = common.models.InvenTreeSetting.get_setting('INVENTREE_LATEST_VERSION', backup_value=None, create=False)\n\n    # No record for \"latest\" version - we must assume we are up to date!\n    if not latest:\n        return True\n\n    # Extract \"tuple\" version (Python can directly compare version tuples)\n    latest_version = inventreeVersionTuple(latest)  # pragma: no cover\n    inventree_version = inventreeVersionTuple()  # pragma: no cover\n\n    return inventree_version >= latest_version  # pragma: no cover\n\n\ndef inventreeApiVersion():\n    return INVENTREE_API_VERSION\n\n\ndef inventreeDjangoVersion():\n    \"\"\" Return the version of Django library \"\"\"\n    return django.get_version()\n\n\ndef inventreeCommitHash():\n    \"\"\" Returns the git commit hash for the running codebase \"\"\"\n\n    try:\n        return str(subprocess.check_output('git rev-parse --short HEAD'.split()), 'utf-8').strip()\n    except:  # pragma: no cover\n        return None\n\n\ndef inventreeCommitDate():\n    \"\"\" Returns the git commit date for the running codebase \"\"\"\n\n    try:\n        d = str(subprocess.check_output('git show -s --format=%ci'.split()), 'utf-8').strip()\n        return d.split(' ')[0]\n    except:  # pragma: no cover\n        return None\n", "code_before": "\"\"\"\nVersion information for InvenTree.\nProvides information on the current InvenTree version\n\"\"\"\n\nimport re\nimport subprocess\n\nimport django\n\nimport common.models\nfrom InvenTree.api_version import INVENTREE_API_VERSION\n\n# InvenTree software version\nINVENTREE_SW_VERSION = \"0.7.1\"\n\n\ndef inventreeInstanceName():\n    \"\"\" Returns the InstanceName settings for the current database \"\"\"\n    return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")\n\n\ndef inventreeInstanceTitle():\n    \"\"\" Returns the InstanceTitle for the current database \"\"\"\n    if common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE_TITLE\", False):\n        return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")\n    else:\n        return 'InvenTree'\n\n\ndef inventreeVersion():\n    \"\"\" Returns the InvenTree version string \"\"\"\n    return INVENTREE_SW_VERSION.lower().strip()\n\n\ndef inventreeVersionTuple(version=None):\n    \"\"\" Return the InvenTree version string as (maj, min, sub) tuple \"\"\"\n\n    if version is None:\n        version = INVENTREE_SW_VERSION\n\n    match = re.match(r\"^.*(\\d+)\\.(\\d+)\\.(\\d+).*$\", str(version))\n\n    return [int(g) for g in match.groups()]\n\n\ndef isInvenTreeDevelopmentVersion():\n    \"\"\"\n    Return True if current InvenTree version is a \"development\" version\n    \"\"\"\n    return inventreeVersion().endswith('dev')\n\n\ndef inventreeDocsVersion():\n    \"\"\"\n    Return the version string matching the latest documentation.\n\n    Development -> \"latest\"\n    Release -> \"major.minor.sub\" e.g. \"0.5.2\"\n\n    \"\"\"\n\n    if isInvenTreeDevelopmentVersion():\n        return \"latest\"\n    else:\n        return INVENTREE_SW_VERSION  # pragma: no cover\n\n\ndef isInvenTreeUpToDate():\n    \"\"\"\n    Test if the InvenTree instance is \"up to date\" with the latest version.\n\n    A background task periodically queries GitHub for latest version,\n    and stores it to the database as INVENTREE_LATEST_VERSION\n    \"\"\"\n\n    latest = common.models.InvenTreeSetting.get_setting('INVENTREE_LATEST_VERSION', backup_value=None, create=False)\n\n    # No record for \"latest\" version - we must assume we are up to date!\n    if not latest:\n        return True\n\n    # Extract \"tuple\" version (Python can directly compare version tuples)\n    latest_version = inventreeVersionTuple(latest)  # pragma: no cover\n    inventree_version = inventreeVersionTuple()  # pragma: no cover\n\n    return inventree_version >= latest_version  # pragma: no cover\n\n\ndef inventreeApiVersion():\n    return INVENTREE_API_VERSION\n\n\ndef inventreeDjangoVersion():\n    \"\"\" Return the version of Django library \"\"\"\n    return django.get_version()\n\n\ndef inventreeCommitHash():\n    \"\"\" Returns the git commit hash for the running codebase \"\"\"\n\n    try:\n        return str(subprocess.check_output('git rev-parse --short HEAD'.split()), 'utf-8').strip()\n    except:  # pragma: no cover\n        return None\n\n\ndef inventreeCommitDate():\n    \"\"\" Returns the git commit date for the running codebase \"\"\"\n\n    try:\n        d = str(subprocess.check_output('git show -s --format=%ci'.split()), 'utf-8').strip()\n        return d.split(' ')[0]\n    except:  # pragma: no cover\n        return None\n", "patch": "@@ -12,7 +12,7 @@\n from InvenTree.api_version import INVENTREE_API_VERSION\n \n # InvenTree software version\n-INVENTREE_SW_VERSION = \"0.7.1\"\n+INVENTREE_SW_VERSION = \"0.7.2\"\n \n \n def inventreeInstanceName():", "file_path": "files/2022_6/418", "file_language": "py", "file_name": "InvenTree/InvenTree/version.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def inventreeInstanceName():\n    \"\"\" Returns the InstanceName settings for the current database \"\"\"\n    return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")", "target": 0}, {"function": "def inventreeInstanceTitle():\n    \"\"\" Returns the InstanceTitle for the current database \"\"\"\n    if common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE_TITLE\", False):\n        return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")\n    else:\n        return 'InvenTree'", "target": 0}, {"function": "def inventreeVersion():\n    \"\"\" Returns the InvenTree version string \"\"\"\n    return INVENTREE_SW_VERSION.lower().strip()", "target": 0}, {"function": "def inventreeVersionTuple(version=None):\n    \"\"\" Return the InvenTree version string as (maj, min, sub) tuple \"\"\"\n\n    if version is None:\n        version = INVENTREE_SW_VERSION\n\n    match = re.match(r\"^.*(\\d+)\\.(\\d+)\\.(\\d+).*$\", str(version))\n\n    return [int(g) for g in match.groups()]", "target": 0}, {"function": "def isInvenTreeDevelopmentVersion():\n    \"\"\"\n    Return True if current InvenTree version is a \"development\" version\n    \"\"\"\n    return inventreeVersion().endswith('dev')", "target": 0}, {"function": "def inventreeDocsVersion():\n    \"\"\"\n    Return the version string matching the latest documentation.\n\n    Development -> \"latest\"\n    Release -> \"major.minor.sub\" e.g. \"0.5.2\"\n\n    \"\"\"\n\n    if isInvenTreeDevelopmentVersion():\n        return \"latest\"\n    else:\n        return INVENTREE_SW_VERSION  # pragma: no cover", "target": 0}, {"function": "def isInvenTreeUpToDate():\n    \"\"\"\n    Test if the InvenTree instance is \"up to date\" with the latest version.\n\n    A background task periodically queries GitHub for latest version,\n    and stores it to the database as INVENTREE_LATEST_VERSION\n    \"\"\"\n\n    latest = common.models.InvenTreeSetting.get_setting('INVENTREE_LATEST_VERSION', backup_value=None, create=False)\n\n    # No record for \"latest\" version - we must assume we are up to date!\n    if not latest:\n        return True\n\n    # Extract \"tuple\" version (Python can directly compare version tuples)\n    latest_version = inventreeVersionTuple(latest)  # pragma: no cover\n    inventree_version = inventreeVersionTuple()  # pragma: no cover\n\n    return inventree_version >= latest_version  # pragma: no cover", "target": 0}, {"function": "def inventreeApiVersion():\n    return INVENTREE_API_VERSION", "target": 0}, {"function": "def inventreeDjangoVersion():\n    \"\"\" Return the version of Django library \"\"\"\n    return django.get_version()", "target": 0}, {"function": "def inventreeCommitHash():\n    \"\"\" Returns the git commit hash for the running codebase \"\"\"\n\n    try:\n        return str(subprocess.check_output('git rev-parse --short HEAD'.split()), 'utf-8').strip()\n    except:  # pragma: no cover\n        return None", "target": 0}, {"function": "def inventreeCommitDate():\n    \"\"\" Returns the git commit date for the running codebase \"\"\"\n\n    try:\n        d = str(subprocess.check_output('git show -s --format=%ci'.split()), 'utf-8').strip()\n        return d.split(' ')[0]\n    except:  # pragma: no cover\n        return None", "target": 0}], "function_after": [{"function": "def inventreeInstanceName():\n    \"\"\" Returns the InstanceName settings for the current database \"\"\"\n    return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")", "target": 0}, {"function": "def inventreeInstanceTitle():\n    \"\"\" Returns the InstanceTitle for the current database \"\"\"\n    if common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE_TITLE\", False):\n        return common.models.InvenTreeSetting.get_setting(\"INVENTREE_INSTANCE\", \"\")\n    else:\n        return 'InvenTree'", "target": 0}, {"function": "def inventreeVersion():\n    \"\"\" Returns the InvenTree version string \"\"\"\n    return INVENTREE_SW_VERSION.lower().strip()", "target": 0}, {"function": "def inventreeVersionTuple(version=None):\n    \"\"\" Return the InvenTree version string as (maj, min, sub) tuple \"\"\"\n\n    if version is None:\n        version = INVENTREE_SW_VERSION\n\n    match = re.match(r\"^.*(\\d+)\\.(\\d+)\\.(\\d+).*$\", str(version))\n\n    return [int(g) for g in match.groups()]", "target": 0}, {"function": "def isInvenTreeDevelopmentVersion():\n    \"\"\"\n    Return True if current InvenTree version is a \"development\" version\n    \"\"\"\n    return inventreeVersion().endswith('dev')", "target": 0}, {"function": "def inventreeDocsVersion():\n    \"\"\"\n    Return the version string matching the latest documentation.\n\n    Development -> \"latest\"\n    Release -> \"major.minor.sub\" e.g. \"0.5.2\"\n\n    \"\"\"\n\n    if isInvenTreeDevelopmentVersion():\n        return \"latest\"\n    else:\n        return INVENTREE_SW_VERSION  # pragma: no cover", "target": 0}, {"function": "def isInvenTreeUpToDate():\n    \"\"\"\n    Test if the InvenTree instance is \"up to date\" with the latest version.\n\n    A background task periodically queries GitHub for latest version,\n    and stores it to the database as INVENTREE_LATEST_VERSION\n    \"\"\"\n\n    latest = common.models.InvenTreeSetting.get_setting('INVENTREE_LATEST_VERSION', backup_value=None, create=False)\n\n    # No record for \"latest\" version - we must assume we are up to date!\n    if not latest:\n        return True\n\n    # Extract \"tuple\" version (Python can directly compare version tuples)\n    latest_version = inventreeVersionTuple(latest)  # pragma: no cover\n    inventree_version = inventreeVersionTuple()  # pragma: no cover\n\n    return inventree_version >= latest_version  # pragma: no cover", "target": 0}, {"function": "def inventreeApiVersion():\n    return INVENTREE_API_VERSION", "target": 0}, {"function": "def inventreeDjangoVersion():\n    \"\"\" Return the version of Django library \"\"\"\n    return django.get_version()", "target": 0}, {"function": "def inventreeCommitHash():\n    \"\"\" Returns the git commit hash for the running codebase \"\"\"\n\n    try:\n        return str(subprocess.check_output('git rev-parse --short HEAD'.split()), 'utf-8').strip()\n    except:  # pragma: no cover\n        return None", "target": 0}, {"function": "def inventreeCommitDate():\n    \"\"\" Returns the git commit date for the running codebase \"\"\"\n\n    try:\n        d = str(subprocess.check_output('git show -s --format=%ci'.split()), 'utf-8').strip()\n        return d.split(' ')[0]\n    except:  # pragma: no cover\n        return None", "target": 0}]}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Fbuild%2Fadmin.py", "code": "from django.contrib import admin\n\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\nimport import_export.widgets as widgets\n\nfrom build.models import Build, BuildItem\nfrom InvenTree.admin import InvenTreeResource\nimport part.models\n\n\nclass BuildResource(InvenTreeResource):\n    \"\"\"Class for managing import/export of Build data.\"\"\"\n    # For some reason, we need to specify the fields individually for this ModelResource,\n    # but we don't for other ones.\n    # TODO: 2022-05-12 - Need to investigate why this is the case!\n\n    id = Field(attribute='pk')\n\n    reference = Field(attribute='reference')\n\n    title = Field(attribute='title')\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(part.models.Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    overdue = Field(attribute='is_overdue', readonly=True, widget=widgets.BooleanWidget())\n\n    completed = Field(attribute='completed', readonly=True)\n\n    quantity = Field(attribute='quantity')\n\n    status = Field(attribute='status')\n\n    batch = Field(attribute='batch')\n\n    notes = Field(attribute='notes')\n\n    class Meta:\n        models = Build\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n\nclass BuildAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'title',\n        'part',\n        'status',\n        'batch',\n        'quantity',\n    )\n\n    search_fields = [\n        'reference',\n        'title',\n        'part__name',\n        'part__description',\n    ]\n\n    autocomplete_fields = [\n        'parent',\n        'part',\n        'sales_order',\n        'take_from',\n        'destination',\n    ]\n\n\nclass BuildItemAdmin(admin.ModelAdmin):\n\n    list_display = (\n        'build',\n        'stock_item',\n        'quantity'\n    )\n\n    autocomplete_fields = [\n        'build',\n        'bom_item',\n        'stock_item',\n        'install_into',\n    ]\n\n\nadmin.site.register(Build, BuildAdmin)\nadmin.site.register(BuildItem, BuildItemAdmin)\n", "code_before": "from django.contrib import admin\n\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\nfrom import_export.resources import ModelResource\nimport import_export.widgets as widgets\n\nfrom build.models import Build, BuildItem\n\nimport part.models\n\n\nclass BuildResource(ModelResource):\n    \"\"\"Class for managing import/export of Build data\"\"\"\n    # For some reason, we need to specify the fields individually for this ModelResource,\n    # but we don't for other ones.\n    # TODO: 2022-05-12 - Need to investigate why this is the case!\n\n    id = Field(attribute='pk')\n\n    reference = Field(attribute='reference')\n\n    title = Field(attribute='title')\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(part.models.Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    overdue = Field(attribute='is_overdue', readonly=True, widget=widgets.BooleanWidget())\n\n    completed = Field(attribute='completed', readonly=True)\n\n    quantity = Field(attribute='quantity')\n\n    status = Field(attribute='status')\n\n    batch = Field(attribute='batch')\n\n    notes = Field(attribute='notes')\n\n    class Meta:\n        models = Build\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n\nclass BuildAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'title',\n        'part',\n        'status',\n        'batch',\n        'quantity',\n    )\n\n    search_fields = [\n        'reference',\n        'title',\n        'part__name',\n        'part__description',\n    ]\n\n    autocomplete_fields = [\n        'parent',\n        'part',\n        'sales_order',\n        'take_from',\n        'destination',\n    ]\n\n\nclass BuildItemAdmin(admin.ModelAdmin):\n\n    list_display = (\n        'build',\n        'stock_item',\n        'quantity'\n    )\n\n    autocomplete_fields = [\n        'build',\n        'bom_item',\n        'stock_item',\n        'install_into',\n    ]\n\n\nadmin.site.register(Build, BuildAdmin)\nadmin.site.register(BuildItem, BuildItemAdmin)\n", "patch": "@@ -2,16 +2,15 @@\n \n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n import import_export.widgets as widgets\n \n from build.models import Build, BuildItem\n-\n+from InvenTree.admin import InvenTreeResource\n import part.models\n \n \n-class BuildResource(ModelResource):\n-    \"\"\"Class for managing import/export of Build data\"\"\"\n+class BuildResource(InvenTreeResource):\n+    \"\"\"Class for managing import/export of Build data.\"\"\"\n     # For some reason, we need to specify the fields individually for this ModelResource,\n     # but we don't for other ones.\n     # TODO: 2022-05-12 - Need to investigate why this is the case!", "file_path": "files/2022_6/419", "file_language": "py", "file_name": "InvenTree/build/admin.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class BuildResource(ModelResource):\n    \"\"\"Class for managing import/export of Build data\"\"\"\n    # For some reason, we need to specify the fields individually for this ModelResource,\n    # but we don't for other ones.\n    # TODO: 2022-05-12 - Need to investigate why this is the case!\n\n    id = Field(attribute='pk')\n\n    reference = Field(attribute='reference')\n\n    title = Field(attribute='title')\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(part.models.Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    overdue = Field(attribute='is_overdue', readonly=True, widget=widgets.BooleanWidget())\n\n    completed = Field(attribute='completed', readonly=True)\n\n    quantity = Field(attribute='quantity')\n\n    status = Field(attribute='status')\n\n    batch = Field(attribute='batch')\n\n    notes = Field(attribute='notes')\n\n    class Meta:\n        models = Build\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]", "target": 0}, {"function": "class BuildAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'title',\n        'part',\n        'status',\n        'batch',\n        'quantity',\n    )\n\n    search_fields = [\n        'reference',\n        'title',\n        'part__name',\n        'part__description',\n    ]\n\n    autocomplete_fields = [\n        'parent',\n        'part',\n        'sales_order',\n        'take_from',\n        'destination',\n    ]", "target": 0}, {"function": "class BuildItemAdmin(admin.ModelAdmin):\n\n    list_display = (\n        'build',\n        'stock_item',\n        'quantity'\n    )\n\n    autocomplete_fields = [\n        'build',\n        'bom_item',\n        'stock_item',\n        'install_into',\n    ]", "target": 0}], "function_after": [{"function": "class BuildResource(InvenTreeResource):\n    \"\"\"Class for managing import/export of Build data.\"\"\"\n    # For some reason, we need to specify the fields individually for this ModelResource,\n    # but we don't for other ones.\n    # TODO: 2022-05-12 - Need to investigate why this is the case!\n\n    id = Field(attribute='pk')\n\n    reference = Field(attribute='reference')\n\n    title = Field(attribute='title')\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(part.models.Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    overdue = Field(attribute='is_overdue', readonly=True, widget=widgets.BooleanWidget())\n\n    completed = Field(attribute='completed', readonly=True)\n\n    quantity = Field(attribute='quantity')\n\n    status = Field(attribute='status')\n\n    batch = Field(attribute='batch')\n\n    notes = Field(attribute='notes')\n\n    class Meta:\n        models = Build\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]", "target": 0}, {"function": "class BuildAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'title',\n        'part',\n        'status',\n        'batch',\n        'quantity',\n    )\n\n    search_fields = [\n        'reference',\n        'title',\n        'part__name',\n        'part__description',\n    ]\n\n    autocomplete_fields = [\n        'parent',\n        'part',\n        'sales_order',\n        'take_from',\n        'destination',\n    ]", "target": 0}, {"function": "class BuildItemAdmin(admin.ModelAdmin):\n\n    list_display = (\n        'build',\n        'stock_item',\n        'quantity'\n    )\n\n    autocomplete_fields = [\n        'build',\n        'bom_item',\n        'stock_item',\n        'install_into',\n    ]", "target": 0}]}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Fcompany%2Fadmin.py", "code": "from django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\n\nfrom InvenTree.admin import InvenTreeResource\nfrom part.models import Part\n\nfrom .models import (Company, ManufacturerPart, ManufacturerPartAttachment,\n                     ManufacturerPartParameter, SupplierPart,\n                     SupplierPriceBreak)\n\n\nclass CompanyResource(InvenTreeResource):\n    \"\"\"Class for managing Company data import/export.\"\"\"\n\n    class Meta:\n        model = Company\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass CompanyAdmin(ImportExportModelAdmin):\n\n    resource_class = CompanyResource\n\n    list_display = ('name', 'website', 'contact')\n\n    search_fields = [\n        'name',\n        'description',\n    ]\n\n\nclass SupplierPartResource(InvenTreeResource):\n    \"\"\"Class for managing SupplierPart data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier = Field(attribute='supplier', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier__name', readonly=True)\n\n    class Meta:\n        model = SupplierPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True\n\n\nclass SupplierPartAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPartResource\n\n    list_display = ('part', 'supplier', 'SKU')\n\n    search_fields = [\n        'company__name',\n        'part__name',\n        'MPN',\n        'SKU',\n    ]\n\n    autocomplete_fields = ('part', 'supplier', 'manufacturer_part',)\n\n\nclass ManufacturerPartResource(InvenTreeResource):\n    \"\"\"Class for managing ManufacturerPart data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    manufacturer = Field(attribute='manufacturer', widget=widgets.ForeignKeyWidget(Company))\n\n    manufacturer_name = Field(attribute='manufacturer__name', readonly=True)\n\n    class Meta:\n        model = ManufacturerPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True\n\n\nclass ManufacturerPartAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPart model\n    \"\"\"\n\n    resource_class = ManufacturerPartResource\n\n    list_display = ('part', 'manufacturer', 'MPN')\n\n    search_fields = [\n        'manufacturer__name',\n        'part__name',\n        'MPN',\n    ]\n\n    autocomplete_fields = ('part', 'manufacturer',)\n\n\nclass ManufacturerPartAttachmentAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartAttachment model\n    \"\"\"\n\n    list_display = ('manufacturer_part', 'attachment', 'comment')\n\n    autocomplete_fields = ('manufacturer_part',)\n\n\nclass ManufacturerPartParameterResource(InvenTreeResource):\n    \"\"\"Class for managing ManufacturerPartParameter data import/export.\"\"\"\n\n    class Meta:\n        model = ManufacturerPartParameter\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instance = True\n\n\nclass ManufacturerPartParameterAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartParameter model\n    \"\"\"\n\n    resource_class = ManufacturerPartParameterResource\n\n    list_display = ('manufacturer_part', 'name', 'value')\n\n    search_fields = [\n        'manufacturer_part__manufacturer__name',\n        'name',\n        'value'\n    ]\n\n    autocomplete_fields = ('manufacturer_part',)\n\n\nclass SupplierPriceBreakResource(InvenTreeResource):\n    \"\"\"Class for managing SupplierPriceBreak data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier_id = Field(attribute='part__supplier__pk', readonly=True)\n\n    supplier_name = Field(attribute='part__supplier__name', readonly=True)\n\n    part_name = Field(attribute='part__part__full_name', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    class Meta:\n        model = SupplierPriceBreak\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass SupplierPriceBreakAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPriceBreakResource\n\n    list_display = ('part', 'quantity', 'price')\n\n    autocomplete_fields = ('part',)\n\n\nadmin.site.register(Company, CompanyAdmin)\nadmin.site.register(SupplierPart, SupplierPartAdmin)\nadmin.site.register(SupplierPriceBreak, SupplierPriceBreakAdmin)\n\nadmin.site.register(ManufacturerPart, ManufacturerPartAdmin)\nadmin.site.register(ManufacturerPartAttachment, ManufacturerPartAttachmentAdmin)\nadmin.site.register(ManufacturerPartParameter, ManufacturerPartParameterAdmin)\n", "code_before": "from django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\nfrom import_export.resources import ModelResource\n\nfrom part.models import Part\n\nfrom .models import (Company, ManufacturerPart, ManufacturerPartAttachment,\n                     ManufacturerPartParameter, SupplierPart,\n                     SupplierPriceBreak)\n\n\nclass CompanyResource(ModelResource):\n    \"\"\" Class for managing Company data import/export \"\"\"\n\n    class Meta:\n        model = Company\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass CompanyAdmin(ImportExportModelAdmin):\n\n    resource_class = CompanyResource\n\n    list_display = ('name', 'website', 'contact')\n\n    search_fields = [\n        'name',\n        'description',\n    ]\n\n\nclass SupplierPartResource(ModelResource):\n    \"\"\"\n    Class for managing SupplierPart data import/export\n    \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier = Field(attribute='supplier', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier__name', readonly=True)\n\n    class Meta:\n        model = SupplierPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True\n\n\nclass SupplierPartAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPartResource\n\n    list_display = ('part', 'supplier', 'SKU')\n\n    search_fields = [\n        'company__name',\n        'part__name',\n        'MPN',\n        'SKU',\n    ]\n\n    autocomplete_fields = ('part', 'supplier', 'manufacturer_part',)\n\n\nclass ManufacturerPartResource(ModelResource):\n    \"\"\"\n    Class for managing ManufacturerPart data import/export\n    \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    manufacturer = Field(attribute='manufacturer', widget=widgets.ForeignKeyWidget(Company))\n\n    manufacturer_name = Field(attribute='manufacturer__name', readonly=True)\n\n    class Meta:\n        model = ManufacturerPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True\n\n\nclass ManufacturerPartAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPart model\n    \"\"\"\n\n    resource_class = ManufacturerPartResource\n\n    list_display = ('part', 'manufacturer', 'MPN')\n\n    search_fields = [\n        'manufacturer__name',\n        'part__name',\n        'MPN',\n    ]\n\n    autocomplete_fields = ('part', 'manufacturer',)\n\n\nclass ManufacturerPartAttachmentAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartAttachment model\n    \"\"\"\n\n    list_display = ('manufacturer_part', 'attachment', 'comment')\n\n    autocomplete_fields = ('manufacturer_part',)\n\n\nclass ManufacturerPartParameterResource(ModelResource):\n    \"\"\"\n    Class for managing ManufacturerPartParameter data import/export\n    \"\"\"\n\n    class Meta:\n        model = ManufacturerPartParameter\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instance = True\n\n\nclass ManufacturerPartParameterAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartParameter model\n    \"\"\"\n\n    resource_class = ManufacturerPartParameterResource\n\n    list_display = ('manufacturer_part', 'name', 'value')\n\n    search_fields = [\n        'manufacturer_part__manufacturer__name',\n        'name',\n        'value'\n    ]\n\n    autocomplete_fields = ('manufacturer_part',)\n\n\nclass SupplierPriceBreakResource(ModelResource):\n    \"\"\" Class for managing SupplierPriceBreak data import/export \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier_id = Field(attribute='part__supplier__pk', readonly=True)\n\n    supplier_name = Field(attribute='part__supplier__name', readonly=True)\n\n    part_name = Field(attribute='part__part__full_name', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    class Meta:\n        model = SupplierPriceBreak\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass SupplierPriceBreakAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPriceBreakResource\n\n    list_display = ('part', 'quantity', 'price')\n\n    autocomplete_fields = ('part',)\n\n\nadmin.site.register(Company, CompanyAdmin)\nadmin.site.register(SupplierPart, SupplierPartAdmin)\nadmin.site.register(SupplierPriceBreak, SupplierPriceBreakAdmin)\n\nadmin.site.register(ManufacturerPart, ManufacturerPartAdmin)\nadmin.site.register(ManufacturerPartAttachment, ManufacturerPartAttachmentAdmin)\nadmin.site.register(ManufacturerPartParameter, ManufacturerPartParameterAdmin)\n", "patch": "@@ -3,17 +3,17 @@\n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n \n+from InvenTree.admin import InvenTreeResource\n from part.models import Part\n \n from .models import (Company, ManufacturerPart, ManufacturerPartAttachment,\n                      ManufacturerPartParameter, SupplierPart,\n                      SupplierPriceBreak)\n \n \n-class CompanyResource(ModelResource):\n-    \"\"\" Class for managing Company data import/export \"\"\"\n+class CompanyResource(InvenTreeResource):\n+    \"\"\"Class for managing Company data import/export.\"\"\"\n \n     class Meta:\n         model = Company\n@@ -34,10 +34,8 @@ class CompanyAdmin(ImportExportModelAdmin):\n     ]\n \n \n-class SupplierPartResource(ModelResource):\n-    \"\"\"\n-    Class for managing SupplierPart data import/export\n-    \"\"\"\n+class SupplierPartResource(InvenTreeResource):\n+    \"\"\"Class for managing SupplierPart data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n \n@@ -70,10 +68,8 @@ class SupplierPartAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('part', 'supplier', 'manufacturer_part',)\n \n \n-class ManufacturerPartResource(ModelResource):\n-    \"\"\"\n-    Class for managing ManufacturerPart data import/export\n-    \"\"\"\n+class ManufacturerPartResource(InvenTreeResource):\n+    \"\"\"Class for managing ManufacturerPart data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n \n@@ -118,10 +114,8 @@ class ManufacturerPartAttachmentAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('manufacturer_part',)\n \n \n-class ManufacturerPartParameterResource(ModelResource):\n-    \"\"\"\n-    Class for managing ManufacturerPartParameter data import/export\n-    \"\"\"\n+class ManufacturerPartParameterResource(InvenTreeResource):\n+    \"\"\"Class for managing ManufacturerPartParameter data import/export.\"\"\"\n \n     class Meta:\n         model = ManufacturerPartParameter\n@@ -148,8 +142,8 @@ class ManufacturerPartParameterAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('manufacturer_part',)\n \n \n-class SupplierPriceBreakResource(ModelResource):\n-    \"\"\" Class for managing SupplierPriceBreak data import/export \"\"\"\n+class SupplierPriceBreakResource(InvenTreeResource):\n+    \"\"\"Class for managing SupplierPriceBreak data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(SupplierPart))\n ", "file_path": "files/2022_6/420", "file_language": "py", "file_name": "InvenTree/company/admin.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class CompanyResource(ModelResource):\n    \"\"\" Class for managing Company data import/export \"\"\"\n\n    class Meta:\n        model = Company\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class CompanyAdmin(ImportExportModelAdmin):\n\n    resource_class = CompanyResource\n\n    list_display = ('name', 'website', 'contact')\n\n    search_fields = [\n        'name',\n        'description',\n    ]", "target": 0}, {"function": "class SupplierPartResource(ModelResource):\n    \"\"\"\n    Class for managing SupplierPart data import/export\n    \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier = Field(attribute='supplier', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier__name', readonly=True)\n\n    class Meta:\n        model = SupplierPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True", "target": 0}, {"function": "class SupplierPartAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPartResource\n\n    list_display = ('part', 'supplier', 'SKU')\n\n    search_fields = [\n        'company__name',\n        'part__name',\n        'MPN',\n        'SKU',\n    ]\n\n    autocomplete_fields = ('part', 'supplier', 'manufacturer_part',)", "target": 0}, {"function": "class ManufacturerPartResource(ModelResource):\n    \"\"\"\n    Class for managing ManufacturerPart data import/export\n    \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    manufacturer = Field(attribute='manufacturer', widget=widgets.ForeignKeyWidget(Company))\n\n    manufacturer_name = Field(attribute='manufacturer__name', readonly=True)\n\n    class Meta:\n        model = ManufacturerPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True", "target": 0}, {"function": "class ManufacturerPartAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPart model\n    \"\"\"\n\n    resource_class = ManufacturerPartResource\n\n    list_display = ('part', 'manufacturer', 'MPN')\n\n    search_fields = [\n        'manufacturer__name',\n        'part__name',\n        'MPN',\n    ]\n\n    autocomplete_fields = ('part', 'manufacturer',)", "target": 0}, {"function": "class ManufacturerPartAttachmentAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartAttachment model\n    \"\"\"\n\n    list_display = ('manufacturer_part', 'attachment', 'comment')\n\n    autocomplete_fields = ('manufacturer_part',)", "target": 0}, {"function": "class ManufacturerPartParameterResource(ModelResource):\n    \"\"\"\n    Class for managing ManufacturerPartParameter data import/export\n    \"\"\"\n\n    class Meta:\n        model = ManufacturerPartParameter\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instance = True", "target": 0}, {"function": "class ManufacturerPartParameterAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartParameter model\n    \"\"\"\n\n    resource_class = ManufacturerPartParameterResource\n\n    list_display = ('manufacturer_part', 'name', 'value')\n\n    search_fields = [\n        'manufacturer_part__manufacturer__name',\n        'name',\n        'value'\n    ]\n\n    autocomplete_fields = ('manufacturer_part',)", "target": 0}, {"function": "class SupplierPriceBreakResource(ModelResource):\n    \"\"\" Class for managing SupplierPriceBreak data import/export \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier_id = Field(attribute='part__supplier__pk', readonly=True)\n\n    supplier_name = Field(attribute='part__supplier__name', readonly=True)\n\n    part_name = Field(attribute='part__part__full_name', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    class Meta:\n        model = SupplierPriceBreak\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class SupplierPriceBreakAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPriceBreakResource\n\n    list_display = ('part', 'quantity', 'price')\n\n    autocomplete_fields = ('part',)", "target": 0}], "function_after": [{"function": "class CompanyResource(InvenTreeResource):\n    \"\"\"Class for managing Company data import/export.\"\"\"\n\n    class Meta:\n        model = Company\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class CompanyAdmin(ImportExportModelAdmin):\n\n    resource_class = CompanyResource\n\n    list_display = ('name', 'website', 'contact')\n\n    search_fields = [\n        'name',\n        'description',\n    ]", "target": 0}, {"function": "class SupplierPartResource(InvenTreeResource):\n    \"\"\"Class for managing SupplierPart data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier = Field(attribute='supplier', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier__name', readonly=True)\n\n    class Meta:\n        model = SupplierPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True", "target": 0}, {"function": "class SupplierPartAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPartResource\n\n    list_display = ('part', 'supplier', 'SKU')\n\n    search_fields = [\n        'company__name',\n        'part__name',\n        'MPN',\n        'SKU',\n    ]\n\n    autocomplete_fields = ('part', 'supplier', 'manufacturer_part',)", "target": 0}, {"function": "class ManufacturerPartResource(InvenTreeResource):\n    \"\"\"Class for managing ManufacturerPart data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    manufacturer = Field(attribute='manufacturer', widget=widgets.ForeignKeyWidget(Company))\n\n    manufacturer_name = Field(attribute='manufacturer__name', readonly=True)\n\n    class Meta:\n        model = ManufacturerPart\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instances = True", "target": 0}, {"function": "class ManufacturerPartAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPart model\n    \"\"\"\n\n    resource_class = ManufacturerPartResource\n\n    list_display = ('part', 'manufacturer', 'MPN')\n\n    search_fields = [\n        'manufacturer__name',\n        'part__name',\n        'MPN',\n    ]\n\n    autocomplete_fields = ('part', 'manufacturer',)", "target": 0}, {"function": "class ManufacturerPartAttachmentAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartAttachment model\n    \"\"\"\n\n    list_display = ('manufacturer_part', 'attachment', 'comment')\n\n    autocomplete_fields = ('manufacturer_part',)", "target": 0}, {"function": "class ManufacturerPartParameterResource(InvenTreeResource):\n    \"\"\"Class for managing ManufacturerPartParameter data import/export.\"\"\"\n\n    class Meta:\n        model = ManufacturerPartParameter\n        skip_unchanged = True\n        report_skipped = True\n        clean_model_instance = True", "target": 0}, {"function": "class ManufacturerPartParameterAdmin(ImportExportModelAdmin):\n    \"\"\"\n    Admin class for ManufacturerPartParameter model\n    \"\"\"\n\n    resource_class = ManufacturerPartParameterResource\n\n    list_display = ('manufacturer_part', 'name', 'value')\n\n    search_fields = [\n        'manufacturer_part__manufacturer__name',\n        'name',\n        'value'\n    ]\n\n    autocomplete_fields = ('manufacturer_part',)", "target": 0}, {"function": "class SupplierPriceBreakResource(InvenTreeResource):\n    \"\"\"Class for managing SupplierPriceBreak data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier_id = Field(attribute='part__supplier__pk', readonly=True)\n\n    supplier_name = Field(attribute='part__supplier__name', readonly=True)\n\n    part_name = Field(attribute='part__part__full_name', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    class Meta:\n        model = SupplierPriceBreak\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class SupplierPriceBreakAdmin(ImportExportModelAdmin):\n\n    resource_class = SupplierPriceBreakResource\n\n    list_display = ('part', 'quantity', 'price')\n\n    autocomplete_fields = ('part',)", "target": 0}]}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Forder%2Fadmin.py", "code": "\"\"\"Admin functionality for the 'order' app\"\"\"\n\nfrom django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\n\nfrom InvenTree.admin import InvenTreeResource\n\nfrom .models import (PurchaseOrder, PurchaseOrderExtraLine,\n                     PurchaseOrderLineItem, SalesOrder, SalesOrderAllocation,\n                     SalesOrderExtraLine, SalesOrderLineItem,\n                     SalesOrderShipment)\n\n\n# region general classes\nclass GeneralExtraLineAdmin:\n    \"\"\"Admin class template for the 'ExtraLineItem' models\"\"\"\n    list_display = (\n        'order',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', )\n\n\nclass GeneralExtraLineMeta:\n    \"\"\"Metaclass template for the 'ExtraLineItem' models\"\"\"\n    skip_unchanged = True\n    report_skipped = False\n    clean_model_instances = True\n# endregion\n\n\nclass PurchaseOrderLineItemInlineAdmin(admin.StackedInline):\n    \"\"\"Inline admin class for the PurchaseOrderLineItem model\"\"\"\n    model = PurchaseOrderLineItem\n    extra = 0\n\n\nclass PurchaseOrderAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the PurchaseOrder model\"\"\"\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'supplier',\n        'status',\n        'description',\n        'creation_date'\n    )\n\n    search_fields = [\n        'reference',\n        'supplier__name',\n        'description',\n    ]\n\n    inlines = [\n        PurchaseOrderLineItemInlineAdmin\n    ]\n\n    autocomplete_fields = ('supplier',)\n\n\nclass SalesOrderAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrder model\"\"\"\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'customer',\n        'status',\n        'description',\n        'creation_date',\n    )\n\n    search_fields = [\n        'reference',\n        'customer__name',\n        'description',\n    ]\n\n    autocomplete_fields = ('customer',)\n\n\nclass PurchaseOrderResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of PurchaseOrder data.\"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        \"\"\"Metaclass\"\"\"\n        model = PurchaseOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]\n\n\nclass PurchaseOrderLineItemResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of PurchaseOrderLineItem data.\"\"\"\n\n    part_name = Field(attribute='part__part__name', readonly=True)\n\n    manufacturer = Field(attribute='part__manufacturer', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    class Meta:\n        \"\"\"Metaclass\"\"\"\n        model = PurchaseOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass PurchaseOrderExtraLineResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of PurchaseOrderExtraLine data.\"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        \"\"\"Metaclass options.\"\"\"\n\n        model = PurchaseOrderExtraLine\n\n\nclass SalesOrderResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of SalesOrder data.\"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        \"\"\"Metaclass options\"\"\"\n        model = SalesOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]\n\n\nclass SalesOrderLineItemResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of SalesOrderLineItem data.\"\"\"\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    IPN = Field(attribute='part__IPN', readonly=True)\n\n    description = Field(attribute='part__description', readonly=True)\n\n    fulfilled = Field(attribute='fulfilled_quantity', readonly=True)\n\n    def dehydrate_sale_price(self, item):\n        \"\"\"Return a string value of the 'sale_price' field, rather than the 'Money' object.\n\n        Ref: https://github.com/inventree/InvenTree/issues/2207\n        \"\"\"\n        if item.sale_price:\n            return str(item.sale_price)\n        else:\n            return ''\n\n    class Meta:\n        \"\"\"Metaclass options\"\"\"\n        model = SalesOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass SalesOrderExtraLineResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of SalesOrderExtraLine data.\"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        \"\"\"Metaclass options.\"\"\"\n\n        model = SalesOrderExtraLine\n\n\nclass PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the PurchaseOrderLine model\"\"\"\n\n    resource_class = PurchaseOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = ('reference',)\n\n    autocomplete_fields = ('order', 'part', 'destination',)\n\n\nclass PurchaseOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n    \"\"\"Admin class for the PurchaseOrderExtraLine model\"\"\"\n    resource_class = PurchaseOrderExtraLineResource\n\n\nclass SalesOrderLineItemAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderLine model\"\"\"\n\n    resource_class = SalesOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'part__name',\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', 'part',)\n\n\nclass SalesOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderExtraLine model\"\"\"\n    resource_class = SalesOrderExtraLineResource\n\n\nclass SalesOrderShipmentAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderShipment model\"\"\"\n\n    list_display = [\n        'order',\n        'shipment_date',\n        'reference',\n    ]\n\n    search_fields = [\n        'reference',\n        'order__reference',\n        'order__customer__name',\n    ]\n\n    autocomplete_fields = ('order',)\n\n\nclass SalesOrderAllocationAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderAllocation model\"\"\"\n\n    list_display = (\n        'line',\n        'item',\n        'quantity'\n    )\n\n    autocomplete_fields = ('line', 'shipment', 'item',)\n\n\nadmin.site.register(PurchaseOrder, PurchaseOrderAdmin)\nadmin.site.register(PurchaseOrderLineItem, PurchaseOrderLineItemAdmin)\nadmin.site.register(PurchaseOrderExtraLine, PurchaseOrderExtraLineAdmin)\n\nadmin.site.register(SalesOrder, SalesOrderAdmin)\nadmin.site.register(SalesOrderLineItem, SalesOrderLineItemAdmin)\nadmin.site.register(SalesOrderExtraLine, SalesOrderExtraLineAdmin)\n\nadmin.site.register(SalesOrderShipment, SalesOrderShipmentAdmin)\nadmin.site.register(SalesOrderAllocation, SalesOrderAllocationAdmin)\n", "code_before": "from django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\nfrom import_export.resources import ModelResource\n\nfrom .models import (PurchaseOrder, PurchaseOrderExtraLine,\n                     PurchaseOrderLineItem, SalesOrder, SalesOrderAllocation,\n                     SalesOrderExtraLine, SalesOrderLineItem,\n                     SalesOrderShipment)\n\n\n# region general classes\nclass GeneralExtraLineAdmin:\n    list_display = (\n        'order',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', )\n\n\nclass GeneralExtraLineMeta:\n    skip_unchanged = True\n    report_skipped = False\n    clean_model_instances = True\n# endregion\n\n\nclass PurchaseOrderLineItemInlineAdmin(admin.StackedInline):\n    model = PurchaseOrderLineItem\n    extra = 0\n\n\nclass PurchaseOrderAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'supplier',\n        'status',\n        'description',\n        'creation_date'\n    )\n\n    search_fields = [\n        'reference',\n        'supplier__name',\n        'description',\n    ]\n\n    inlines = [\n        PurchaseOrderLineItemInlineAdmin\n    ]\n\n    autocomplete_fields = ('supplier',)\n\n\nclass SalesOrderAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'customer',\n        'status',\n        'description',\n        'creation_date',\n    )\n\n    search_fields = [\n        'reference',\n        'customer__name',\n        'description',\n    ]\n\n    autocomplete_fields = ('customer',)\n\n\nclass PurchaseOrderResource(ModelResource):\n    \"\"\"\n    Class for managing import / export of PurchaseOrder data\n    \"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        model = PurchaseOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]\n\n\nclass PurchaseOrderLineItemResource(ModelResource):\n    \"\"\" Class for managing import / export of PurchaseOrderLineItem data \"\"\"\n\n    part_name = Field(attribute='part__part__name', readonly=True)\n\n    manufacturer = Field(attribute='part__manufacturer', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    class Meta:\n        model = PurchaseOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass PurchaseOrderExtraLineResource(ModelResource):\n    \"\"\" Class for managing import / export of PurchaseOrderExtraLine data \"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        model = PurchaseOrderExtraLine\n\n\nclass SalesOrderResource(ModelResource):\n    \"\"\"\n    Class for managing import / export of SalesOrder data\n    \"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        model = SalesOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]\n\n\nclass SalesOrderLineItemResource(ModelResource):\n    \"\"\"\n    Class for managing import / export of SalesOrderLineItem data\n    \"\"\"\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    IPN = Field(attribute='part__IPN', readonly=True)\n\n    description = Field(attribute='part__description', readonly=True)\n\n    fulfilled = Field(attribute='fulfilled_quantity', readonly=True)\n\n    def dehydrate_sale_price(self, item):\n        \"\"\"\n        Return a string value of the 'sale_price' field, rather than the 'Money' object.\n        Ref: https://github.com/inventree/InvenTree/issues/2207\n        \"\"\"\n\n        if item.sale_price:\n            return str(item.sale_price)\n        else:\n            return ''\n\n    class Meta:\n        model = SalesOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n\nclass SalesOrderExtraLineResource(ModelResource):\n    \"\"\" Class for managing import / export of SalesOrderExtraLine data \"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        model = SalesOrderExtraLine\n\n\nclass PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n\n    resource_class = PurchaseOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = ('reference',)\n\n    autocomplete_fields = ('order', 'part', 'destination',)\n\n\nclass PurchaseOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n\n    resource_class = PurchaseOrderExtraLineResource\n\n\nclass SalesOrderLineItemAdmin(ImportExportModelAdmin):\n\n    resource_class = SalesOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'part__name',\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', 'part',)\n\n\nclass SalesOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n\n    resource_class = SalesOrderExtraLineResource\n\n\nclass SalesOrderShipmentAdmin(ImportExportModelAdmin):\n\n    list_display = [\n        'order',\n        'shipment_date',\n        'reference',\n    ]\n\n    search_fields = [\n        'reference',\n        'order__reference',\n        'order__customer__name',\n    ]\n\n    autocomplete_fields = ('order',)\n\n\nclass SalesOrderAllocationAdmin(ImportExportModelAdmin):\n\n    list_display = (\n        'line',\n        'item',\n        'quantity'\n    )\n\n    autocomplete_fields = ('line', 'shipment', 'item',)\n\n\nadmin.site.register(PurchaseOrder, PurchaseOrderAdmin)\nadmin.site.register(PurchaseOrderLineItem, PurchaseOrderLineItemAdmin)\nadmin.site.register(PurchaseOrderExtraLine, PurchaseOrderExtraLineAdmin)\n\nadmin.site.register(SalesOrder, SalesOrderAdmin)\nadmin.site.register(SalesOrderLineItem, SalesOrderLineItemAdmin)\nadmin.site.register(SalesOrderExtraLine, SalesOrderExtraLineAdmin)\n\nadmin.site.register(SalesOrderShipment, SalesOrderShipmentAdmin)\nadmin.site.register(SalesOrderAllocation, SalesOrderAllocationAdmin)\n", "patch": "@@ -1,9 +1,12 @@\n+\"\"\"Admin functionality for the 'order' app\"\"\"\n+\n from django.contrib import admin\n \n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n+\n+from InvenTree.admin import InvenTreeResource\n \n from .models import (PurchaseOrder, PurchaseOrderExtraLine,\n                      PurchaseOrderLineItem, SalesOrder, SalesOrderAllocation,\n@@ -13,6 +16,7 @@\n \n # region general classes\n class GeneralExtraLineAdmin:\n+    \"\"\"Admin class template for the 'ExtraLineItem' models\"\"\"\n     list_display = (\n         'order',\n         'quantity',\n@@ -29,18 +33,21 @@ class GeneralExtraLineAdmin:\n \n \n class GeneralExtraLineMeta:\n+    \"\"\"Metaclass template for the 'ExtraLineItem' models\"\"\"\n     skip_unchanged = True\n     report_skipped = False\n     clean_model_instances = True\n # endregion\n \n \n class PurchaseOrderLineItemInlineAdmin(admin.StackedInline):\n+    \"\"\"Inline admin class for the PurchaseOrderLineItem model\"\"\"\n     model = PurchaseOrderLineItem\n     extra = 0\n \n \n class PurchaseOrderAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the PurchaseOrder model\"\"\"\n \n     exclude = [\n         'reference_int',\n@@ -68,6 +75,7 @@ class PurchaseOrderAdmin(ImportExportModelAdmin):\n \n \n class SalesOrderAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrder model\"\"\"\n \n     exclude = [\n         'reference_int',\n@@ -90,10 +98,8 @@ class SalesOrderAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('customer',)\n \n \n-class PurchaseOrderResource(ModelResource):\n-    \"\"\"\n-    Class for managing import / export of PurchaseOrder data\n-    \"\"\"\n+class PurchaseOrderResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of PurchaseOrder data.\"\"\"\n \n     # Add number of line items\n     line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n@@ -102,6 +108,7 @@ class PurchaseOrderResource(ModelResource):\n     overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n \n     class Meta:\n+        \"\"\"Metaclass\"\"\"\n         model = PurchaseOrder\n         skip_unchanged = True\n         clean_model_instances = True\n@@ -110,8 +117,8 @@ class Meta:\n         ]\n \n \n-class PurchaseOrderLineItemResource(ModelResource):\n-    \"\"\" Class for managing import / export of PurchaseOrderLineItem data \"\"\"\n+class PurchaseOrderLineItemResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of PurchaseOrderLineItem data.\"\"\"\n \n     part_name = Field(attribute='part__part__name', readonly=True)\n \n@@ -122,23 +129,24 @@ class PurchaseOrderLineItemResource(ModelResource):\n     SKU = Field(attribute='part__SKU', readonly=True)\n \n     class Meta:\n+        \"\"\"Metaclass\"\"\"\n         model = PurchaseOrderLineItem\n         skip_unchanged = True\n         report_skipped = False\n         clean_model_instances = True\n \n \n-class PurchaseOrderExtraLineResource(ModelResource):\n-    \"\"\" Class for managing import / export of PurchaseOrderExtraLine data \"\"\"\n+class PurchaseOrderExtraLineResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of PurchaseOrderExtraLine data.\"\"\"\n \n     class Meta(GeneralExtraLineMeta):\n+        \"\"\"Metaclass options.\"\"\"\n+\n         model = PurchaseOrderExtraLine\n \n \n-class SalesOrderResource(ModelResource):\n-    \"\"\"\n-    Class for managing import / export of SalesOrder data\n-    \"\"\"\n+class SalesOrderResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of SalesOrder data.\"\"\"\n \n     # Add number of line items\n     line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n@@ -147,6 +155,7 @@ class SalesOrderResource(ModelResource):\n     overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n \n     class Meta:\n+        \"\"\"Metaclass options\"\"\"\n         model = SalesOrder\n         skip_unchanged = True\n         clean_model_instances = True\n@@ -155,10 +164,8 @@ class Meta:\n         ]\n \n \n-class SalesOrderLineItemResource(ModelResource):\n-    \"\"\"\n-    Class for managing import / export of SalesOrderLineItem data\n-    \"\"\"\n+class SalesOrderLineItemResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of SalesOrderLineItem data.\"\"\"\n \n     part_name = Field(attribute='part__name', readonly=True)\n \n@@ -169,31 +176,34 @@ class SalesOrderLineItemResource(ModelResource):\n     fulfilled = Field(attribute='fulfilled_quantity', readonly=True)\n \n     def dehydrate_sale_price(self, item):\n-        \"\"\"\n-        Return a string value of the 'sale_price' field, rather than the 'Money' object.\n+        \"\"\"Return a string value of the 'sale_price' field, rather than the 'Money' object.\n+\n         Ref: https://github.com/inventree/InvenTree/issues/2207\n         \"\"\"\n-\n         if item.sale_price:\n             return str(item.sale_price)\n         else:\n             return ''\n \n     class Meta:\n+        \"\"\"Metaclass options\"\"\"\n         model = SalesOrderLineItem\n         skip_unchanged = True\n         report_skipped = False\n         clean_model_instances = True\n \n \n-class SalesOrderExtraLineResource(ModelResource):\n-    \"\"\" Class for managing import / export of SalesOrderExtraLine data \"\"\"\n+class SalesOrderExtraLineResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of SalesOrderExtraLine data.\"\"\"\n \n     class Meta(GeneralExtraLineMeta):\n+        \"\"\"Metaclass options.\"\"\"\n+\n         model = SalesOrderExtraLine\n \n \n class PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the PurchaseOrderLine model\"\"\"\n \n     resource_class = PurchaseOrderLineItemResource\n \n@@ -210,11 +220,12 @@ class PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n \n \n class PurchaseOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n-\n+    \"\"\"Admin class for the PurchaseOrderExtraLine model\"\"\"\n     resource_class = PurchaseOrderExtraLineResource\n \n \n class SalesOrderLineItemAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrderLine model\"\"\"\n \n     resource_class = SalesOrderLineItemResource\n \n@@ -236,11 +247,12 @@ class SalesOrderLineItemAdmin(ImportExportModelAdmin):\n \n \n class SalesOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n-\n+    \"\"\"Admin class for the SalesOrderExtraLine model\"\"\"\n     resource_class = SalesOrderExtraLineResource\n \n \n class SalesOrderShipmentAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrderShipment model\"\"\"\n \n     list_display = [\n         'order',\n@@ -258,6 +270,7 @@ class SalesOrderShipmentAdmin(ImportExportModelAdmin):\n \n \n class SalesOrderAllocationAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrderAllocation model\"\"\"\n \n     list_display = (\n         'line',", "file_path": "files/2022_6/421", "file_language": "py", "file_name": "InvenTree/order/admin.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class GeneralExtraLineAdmin:\n    list_display = (\n        'order',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', )", "target": 0}, {"function": "class GeneralExtraLineMeta:\n    skip_unchanged = True\n    report_skipped = False\n    clean_model_instances = True", "target": 0}, {"function": "class PurchaseOrderLineItemInlineAdmin(admin.StackedInline):\n    model = PurchaseOrderLineItem\n    extra = 0", "target": 0}, {"function": "class PurchaseOrderAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'supplier',\n        'status',\n        'description',\n        'creation_date'\n    )\n\n    search_fields = [\n        'reference',\n        'supplier__name',\n        'description',\n    ]\n\n    inlines = [\n        PurchaseOrderLineItemInlineAdmin\n    ]\n\n    autocomplete_fields = ('supplier',)", "target": 0}, {"function": "class SalesOrderAdmin(ImportExportModelAdmin):\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'customer',\n        'status',\n        'description',\n        'creation_date',\n    )\n\n    search_fields = [\n        'reference',\n        'customer__name',\n        'description',\n    ]\n\n    autocomplete_fields = ('customer',)", "target": 0}, {"function": "class PurchaseOrderResource(ModelResource):\n    \"\"\"\n    Class for managing import / export of PurchaseOrder data\n    \"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        model = PurchaseOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]", "target": 0}, {"function": "class PurchaseOrderLineItemResource(ModelResource):\n    \"\"\" Class for managing import / export of PurchaseOrderLineItem data \"\"\"\n\n    part_name = Field(attribute='part__part__name', readonly=True)\n\n    manufacturer = Field(attribute='part__manufacturer', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    class Meta:\n        model = PurchaseOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class PurchaseOrderExtraLineResource(ModelResource):\n    \"\"\" Class for managing import / export of PurchaseOrderExtraLine data \"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        model = PurchaseOrderExtraLine", "target": 0}, {"function": "class SalesOrderResource(ModelResource):\n    \"\"\"\n    Class for managing import / export of SalesOrder data\n    \"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        model = SalesOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]", "target": 0}, {"function": "class SalesOrderLineItemResource(ModelResource):\n    \"\"\"\n    Class for managing import / export of SalesOrderLineItem data\n    \"\"\"\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    IPN = Field(attribute='part__IPN', readonly=True)\n\n    description = Field(attribute='part__description', readonly=True)\n\n    fulfilled = Field(attribute='fulfilled_quantity', readonly=True)\n\n    def dehydrate_sale_price(self, item):\n        \"\"\"\n        Return a string value of the 'sale_price' field, rather than the 'Money' object.\n        Ref: https://github.com/inventree/InvenTree/issues/2207\n        \"\"\"\n\n        if item.sale_price:\n            return str(item.sale_price)\n        else:\n            return ''\n\n    class Meta:\n        model = SalesOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class SalesOrderExtraLineResource(ModelResource):\n    \"\"\" Class for managing import / export of SalesOrderExtraLine data \"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        model = SalesOrderExtraLine", "target": 0}, {"function": "class PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n\n    resource_class = PurchaseOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = ('reference',)\n\n    autocomplete_fields = ('order', 'part', 'destination',)", "target": 0}, {"function": "class PurchaseOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n\n    resource_class = PurchaseOrderExtraLineResource", "target": 0}, {"function": "class SalesOrderLineItemAdmin(ImportExportModelAdmin):\n\n    resource_class = SalesOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'part__name',\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', 'part',)", "target": 0}, {"function": "class SalesOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n\n    resource_class = SalesOrderExtraLineResource", "target": 0}, {"function": "class SalesOrderShipmentAdmin(ImportExportModelAdmin):\n\n    list_display = [\n        'order',\n        'shipment_date',\n        'reference',\n    ]\n\n    search_fields = [\n        'reference',\n        'order__reference',\n        'order__customer__name',\n    ]\n\n    autocomplete_fields = ('order',)", "target": 0}, {"function": "class SalesOrderAllocationAdmin(ImportExportModelAdmin):\n\n    list_display = (\n        'line',\n        'item',\n        'quantity'\n    )\n\n    autocomplete_fields = ('line', 'shipment', 'item',)", "target": 0}], "function_after": [{"function": "class GeneralExtraLineAdmin:\n    \"\"\"Admin class template for the 'ExtraLineItem' models\"\"\"\n    list_display = (\n        'order',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', )", "target": 0}, {"function": "class GeneralExtraLineMeta:\n    \"\"\"Metaclass template for the 'ExtraLineItem' models\"\"\"\n    skip_unchanged = True\n    report_skipped = False\n    clean_model_instances = True", "target": 0}, {"function": "class PurchaseOrderLineItemInlineAdmin(admin.StackedInline):\n    \"\"\"Inline admin class for the PurchaseOrderLineItem model\"\"\"\n    model = PurchaseOrderLineItem\n    extra = 0", "target": 0}, {"function": "class PurchaseOrderAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the PurchaseOrder model\"\"\"\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'supplier',\n        'status',\n        'description',\n        'creation_date'\n    )\n\n    search_fields = [\n        'reference',\n        'supplier__name',\n        'description',\n    ]\n\n    inlines = [\n        PurchaseOrderLineItemInlineAdmin\n    ]\n\n    autocomplete_fields = ('supplier',)", "target": 0}, {"function": "class SalesOrderAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrder model\"\"\"\n\n    exclude = [\n        'reference_int',\n    ]\n\n    list_display = (\n        'reference',\n        'customer',\n        'status',\n        'description',\n        'creation_date',\n    )\n\n    search_fields = [\n        'reference',\n        'customer__name',\n        'description',\n    ]\n\n    autocomplete_fields = ('customer',)", "target": 0}, {"function": "class PurchaseOrderResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of PurchaseOrder data.\"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        \"\"\"Metaclass\"\"\"\n        model = PurchaseOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]", "target": 0}, {"function": "class PurchaseOrderLineItemResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of PurchaseOrderLineItem data.\"\"\"\n\n    part_name = Field(attribute='part__part__name', readonly=True)\n\n    manufacturer = Field(attribute='part__manufacturer', readonly=True)\n\n    MPN = Field(attribute='part__MPN', readonly=True)\n\n    SKU = Field(attribute='part__SKU', readonly=True)\n\n    class Meta:\n        \"\"\"Metaclass\"\"\"\n        model = PurchaseOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class PurchaseOrderExtraLineResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of PurchaseOrderExtraLine data.\"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        \"\"\"Metaclass options.\"\"\"\n\n        model = PurchaseOrderExtraLine", "target": 0}, {"function": "class SalesOrderResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of SalesOrder data.\"\"\"\n\n    # Add number of line items\n    line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n\n    # Is this order overdue?\n    overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n\n    class Meta:\n        \"\"\"Metaclass options\"\"\"\n        model = SalesOrder\n        skip_unchanged = True\n        clean_model_instances = True\n        exclude = [\n            'metadata',\n        ]", "target": 0}, {"function": "class SalesOrderLineItemResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of SalesOrderLineItem data.\"\"\"\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    IPN = Field(attribute='part__IPN', readonly=True)\n\n    description = Field(attribute='part__description', readonly=True)\n\n    fulfilled = Field(attribute='fulfilled_quantity', readonly=True)\n\n    def dehydrate_sale_price(self, item):\n        \"\"\"Return a string value of the 'sale_price' field, rather than the 'Money' object.\n\n        Ref: https://github.com/inventree/InvenTree/issues/2207\n        \"\"\"\n        if item.sale_price:\n            return str(item.sale_price)\n        else:\n            return ''\n\n    class Meta:\n        \"\"\"Metaclass options\"\"\"\n        model = SalesOrderLineItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True", "target": 0}, {"function": "class SalesOrderExtraLineResource(InvenTreeResource):\n    \"\"\"Class for managing import / export of SalesOrderExtraLine data.\"\"\"\n\n    class Meta(GeneralExtraLineMeta):\n        \"\"\"Metaclass options.\"\"\"\n\n        model = SalesOrderExtraLine", "target": 0}, {"function": "class PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the PurchaseOrderLine model\"\"\"\n\n    resource_class = PurchaseOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = ('reference',)\n\n    autocomplete_fields = ('order', 'part', 'destination',)", "target": 0}, {"function": "class PurchaseOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n    \"\"\"Admin class for the PurchaseOrderExtraLine model\"\"\"\n    resource_class = PurchaseOrderExtraLineResource", "target": 0}, {"function": "class SalesOrderLineItemAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderLine model\"\"\"\n\n    resource_class = SalesOrderLineItemResource\n\n    list_display = (\n        'order',\n        'part',\n        'quantity',\n        'reference'\n    )\n\n    search_fields = [\n        'part__name',\n        'order__reference',\n        'order__customer__name',\n        'reference',\n    ]\n\n    autocomplete_fields = ('order', 'part',)", "target": 0}, {"function": "class SalesOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderExtraLine model\"\"\"\n    resource_class = SalesOrderExtraLineResource", "target": 0}, {"function": "class SalesOrderShipmentAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderShipment model\"\"\"\n\n    list_display = [\n        'order',\n        'shipment_date',\n        'reference',\n    ]\n\n    search_fields = [\n        'reference',\n        'order__reference',\n        'order__customer__name',\n    ]\n\n    autocomplete_fields = ('order',)", "target": 0}, {"function": "class SalesOrderAllocationAdmin(ImportExportModelAdmin):\n    \"\"\"Admin class for the SalesOrderAllocation model\"\"\"\n\n    list_display = (\n        'line',\n        'item',\n        'quantity'\n    )\n\n    autocomplete_fields = ('line', 'shipment', 'item',)", "target": 0}]}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Fpart%2Fadmin.py", "code": "from django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\n\nimport part.models as models\nfrom company.models import SupplierPart\nfrom InvenTree.admin import InvenTreeResource\nfrom stock.models import StockLocation\n\n\nclass PartResource(InvenTreeResource):\n    \"\"\"Class for managing Part data import/export.\"\"\"\n\n    # ForeignKey fields\n    category = Field(attribute='category', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    default_supplier = Field(attribute='default_supplier', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    category_name = Field(attribute='category__name', readonly=True)\n\n    variant_of = Field(attribute='variant_of', widget=widgets.ForeignKeyWidget(models.Part))\n\n    suppliers = Field(attribute='supplier_count', readonly=True)\n\n    # Extra calculated meta-data (readonly)\n    in_stock = Field(attribute='total_stock', readonly=True, widget=widgets.IntegerWidget())\n\n    on_order = Field(attribute='on_order', readonly=True, widget=widgets.IntegerWidget())\n\n    used_in = Field(attribute='used_in_count', readonly=True, widget=widgets.IntegerWidget())\n\n    allocated = Field(attribute='allocation_count', readonly=True, widget=widgets.IntegerWidget())\n\n    building = Field(attribute='quantity_being_built', readonly=True, widget=widgets.IntegerWidget())\n\n    class Meta:\n        model = models.Part\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'bom_checksum', 'bom_checked_by', 'bom_checked_date',\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def get_queryset(self):\n        \"\"\" Prefetch related data for quicker access \"\"\"\n\n        query = super().get_queryset()\n        query = query.prefetch_related(\n            'category',\n            'used_in',\n            'builds',\n            'supplier_parts__purchase_order_line_items',\n            'stock_items__allocations'\n        )\n\n        return query\n\n\nclass PartAdmin(ImportExportModelAdmin):\n\n    resource_class = PartResource\n\n    list_display = ('full_name', 'description', 'total_stock', 'category')\n\n    list_filter = ('active', 'assembly', 'is_template', 'virtual')\n\n    search_fields = ('name', 'description', 'category__name', 'category__description', 'IPN')\n\n    autocomplete_fields = [\n        'variant_of',\n        'category',\n        'default_location',\n        'default_supplier',\n    ]\n\n\nclass PartCategoryResource(InvenTreeResource):\n    \"\"\"Class for managing PartCategory data import/export.\"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    class Meta:\n        model = models.PartCategory\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the PartCategory tree(s)\n        models.PartCategory.objects.rebuild()\n\n\nclass PartCategoryAdmin(ImportExportModelAdmin):\n\n    resource_class = PartCategoryResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    autocomplete_fields = ('parent', 'default_location',)\n\n\nclass PartRelatedAdmin(admin.ModelAdmin):\n    \"\"\"\n    Class to manage PartRelated objects\n    \"\"\"\n\n    autocomplete_fields = ('part_1', 'part_2')\n\n\nclass PartAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'attachment', 'comment')\n\n    autocomplete_fields = ('part',)\n\n\nclass PartStarAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'user')\n\n    autocomplete_fields = ('part',)\n\n\nclass PartCategoryStarAdmin(admin.ModelAdmin):\n\n    list_display = ('category', 'user')\n\n    autocomplete_fields = ('category',)\n\n\nclass PartTestTemplateAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'test_name', 'required')\n\n    autocomplete_fields = ('part',)\n\n\nclass BomItemResource(InvenTreeResource):\n    \"\"\"Class for managing BomItem data import/export.\"\"\"\n\n    level = Field(attribute='level', readonly=True)\n\n    bom_id = Field(attribute='pk')\n\n    # ID of the parent part\n    parent_part_id = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the parent part\n    parent_part_ipn = Field(attribute='part__IPN', readonly=True)\n\n    # Name of the parent part\n    parent_part_name = Field(attribute='part__name', readonly=True)\n\n    # ID of the sub-part\n    part_id = Field(attribute='sub_part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the sub-part\n    part_ipn = Field(attribute='sub_part__IPN', readonly=True)\n\n    # Name of the sub-part\n    part_name = Field(attribute='sub_part__name', readonly=True)\n\n    # Description of the sub-part\n    part_description = Field(attribute='sub_part__description', readonly=True)\n\n    # Is the sub-part itself an assembly?\n    sub_assembly = Field(attribute='sub_part__assembly', readonly=True)\n\n    def dehydrate_quantity(self, item):\n        \"\"\"\n        Special consideration for the 'quantity' field on data export.\n        We do not want a spreadsheet full of \"1.0000\" (we'd rather \"1\")\n\n        Ref: https://django-import-export.readthedocs.io/en/latest/getting_started.html#advanced-data-manipulation-on-export\n        \"\"\"\n        return float(item.quantity)\n\n    def before_export(self, queryset, *args, **kwargs):\n\n        self.is_importing = kwargs.get('importing', False)\n\n    def get_fields(self, **kwargs):\n        \"\"\"\n        If we are exporting for the purposes of generating\n        a 'bom-import' template, there are some fields which\n        we are not interested in.\n        \"\"\"\n\n        fields = super().get_fields(**kwargs)\n\n        # If we are not generating an \"import\" template,\n        # just return the complete list of fields\n        if not getattr(self, 'is_importing', False):\n            return fields\n\n        # Otherwise, remove some fields we are not interested in\n\n        idx = 0\n\n        to_remove = [\n            'level',\n            'bom_id',\n            'parent_part_id',\n            'parent_part_ipn',\n            'parent_part_name',\n            'part_description',\n            'sub_assembly'\n        ]\n\n        while idx < len(fields):\n\n            if fields[idx].column_name.lower() in to_remove:\n                del fields[idx]\n            else:\n                idx += 1\n\n        return fields\n\n    class Meta:\n        model = models.BomItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            'checksum',\n            'id',\n            'part',\n            'sub_part',\n        ]\n\n\nclass BomItemAdmin(ImportExportModelAdmin):\n\n    resource_class = BomItemResource\n\n    list_display = ('part', 'sub_part', 'quantity')\n\n    search_fields = ('part__name', 'part__description', 'sub_part__name', 'sub_part__description')\n\n    autocomplete_fields = ('part', 'sub_part',)\n\n\nclass ParameterTemplateAdmin(ImportExportModelAdmin):\n    list_display = ('name', 'units')\n\n    search_fields = ('name', 'units')\n\n\nclass ParameterResource(InvenTreeResource):\n    \"\"\"Class for managing PartParameter data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    template = Field(attribute='template', widget=widgets.ForeignKeyWidget(models.PartParameterTemplate))\n\n    template_name = Field(attribute='template__name', readonly=True)\n\n    class Meta:\n        model = models.PartParameter\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True\n\n\nclass ParameterAdmin(ImportExportModelAdmin):\n\n    resource_class = ParameterResource\n\n    list_display = ('part', 'template', 'data')\n\n    autocomplete_fields = ('part', 'template')\n\n\nclass PartCategoryParameterAdmin(admin.ModelAdmin):\n\n    autocomplete_fields = ('category', 'parameter_template',)\n\n\nclass PartSellPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartSellPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)\n\n\nclass PartInternalPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartInternalPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)\n\n    autocomplete_fields = ('part',)\n\n\nadmin.site.register(models.Part, PartAdmin)\nadmin.site.register(models.PartCategory, PartCategoryAdmin)\nadmin.site.register(models.PartRelated, PartRelatedAdmin)\nadmin.site.register(models.PartAttachment, PartAttachmentAdmin)\nadmin.site.register(models.PartStar, PartStarAdmin)\nadmin.site.register(models.PartCategoryStar, PartCategoryStarAdmin)\nadmin.site.register(models.BomItem, BomItemAdmin)\nadmin.site.register(models.PartParameterTemplate, ParameterTemplateAdmin)\nadmin.site.register(models.PartParameter, ParameterAdmin)\nadmin.site.register(models.PartCategoryParameterTemplate, PartCategoryParameterAdmin)\nadmin.site.register(models.PartTestTemplate, PartTestTemplateAdmin)\nadmin.site.register(models.PartSellPriceBreak, PartSellPriceBreakAdmin)\nadmin.site.register(models.PartInternalPriceBreak, PartInternalPriceBreakAdmin)\n", "code_before": "from django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\nfrom import_export.resources import ModelResource\n\nimport part.models as models\nfrom company.models import SupplierPart\nfrom stock.models import StockLocation\n\n\nclass PartResource(ModelResource):\n    \"\"\" Class for managing Part data import/export \"\"\"\n\n    # ForeignKey fields\n    category = Field(attribute='category', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    default_supplier = Field(attribute='default_supplier', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    category_name = Field(attribute='category__name', readonly=True)\n\n    variant_of = Field(attribute='variant_of', widget=widgets.ForeignKeyWidget(models.Part))\n\n    suppliers = Field(attribute='supplier_count', readonly=True)\n\n    # Extra calculated meta-data (readonly)\n    in_stock = Field(attribute='total_stock', readonly=True, widget=widgets.IntegerWidget())\n\n    on_order = Field(attribute='on_order', readonly=True, widget=widgets.IntegerWidget())\n\n    used_in = Field(attribute='used_in_count', readonly=True, widget=widgets.IntegerWidget())\n\n    allocated = Field(attribute='allocation_count', readonly=True, widget=widgets.IntegerWidget())\n\n    building = Field(attribute='quantity_being_built', readonly=True, widget=widgets.IntegerWidget())\n\n    class Meta:\n        model = models.Part\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'bom_checksum', 'bom_checked_by', 'bom_checked_date',\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def get_queryset(self):\n        \"\"\" Prefetch related data for quicker access \"\"\"\n\n        query = super().get_queryset()\n        query = query.prefetch_related(\n            'category',\n            'used_in',\n            'builds',\n            'supplier_parts__purchase_order_line_items',\n            'stock_items__allocations'\n        )\n\n        return query\n\n\nclass PartAdmin(ImportExportModelAdmin):\n\n    resource_class = PartResource\n\n    list_display = ('full_name', 'description', 'total_stock', 'category')\n\n    list_filter = ('active', 'assembly', 'is_template', 'virtual')\n\n    search_fields = ('name', 'description', 'category__name', 'category__description', 'IPN')\n\n    autocomplete_fields = [\n        'variant_of',\n        'category',\n        'default_location',\n        'default_supplier',\n    ]\n\n\nclass PartCategoryResource(ModelResource):\n    \"\"\" Class for managing PartCategory data import/export \"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    class Meta:\n        model = models.PartCategory\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the PartCategory tree(s)\n        models.PartCategory.objects.rebuild()\n\n\nclass PartCategoryAdmin(ImportExportModelAdmin):\n\n    resource_class = PartCategoryResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    autocomplete_fields = ('parent', 'default_location',)\n\n\nclass PartRelatedAdmin(admin.ModelAdmin):\n    \"\"\"\n    Class to manage PartRelated objects\n    \"\"\"\n\n    autocomplete_fields = ('part_1', 'part_2')\n\n\nclass PartAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'attachment', 'comment')\n\n    autocomplete_fields = ('part',)\n\n\nclass PartStarAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'user')\n\n    autocomplete_fields = ('part',)\n\n\nclass PartCategoryStarAdmin(admin.ModelAdmin):\n\n    list_display = ('category', 'user')\n\n    autocomplete_fields = ('category',)\n\n\nclass PartTestTemplateAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'test_name', 'required')\n\n    autocomplete_fields = ('part',)\n\n\nclass BomItemResource(ModelResource):\n    \"\"\" Class for managing BomItem data import/export \"\"\"\n\n    level = Field(attribute='level', readonly=True)\n\n    bom_id = Field(attribute='pk')\n\n    # ID of the parent part\n    parent_part_id = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the parent part\n    parent_part_ipn = Field(attribute='part__IPN', readonly=True)\n\n    # Name of the parent part\n    parent_part_name = Field(attribute='part__name', readonly=True)\n\n    # ID of the sub-part\n    part_id = Field(attribute='sub_part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the sub-part\n    part_ipn = Field(attribute='sub_part__IPN', readonly=True)\n\n    # Name of the sub-part\n    part_name = Field(attribute='sub_part__name', readonly=True)\n\n    # Description of the sub-part\n    part_description = Field(attribute='sub_part__description', readonly=True)\n\n    # Is the sub-part itself an assembly?\n    sub_assembly = Field(attribute='sub_part__assembly', readonly=True)\n\n    def dehydrate_quantity(self, item):\n        \"\"\"\n        Special consideration for the 'quantity' field on data export.\n        We do not want a spreadsheet full of \"1.0000\" (we'd rather \"1\")\n\n        Ref: https://django-import-export.readthedocs.io/en/latest/getting_started.html#advanced-data-manipulation-on-export\n        \"\"\"\n        return float(item.quantity)\n\n    def before_export(self, queryset, *args, **kwargs):\n\n        self.is_importing = kwargs.get('importing', False)\n\n    def get_fields(self, **kwargs):\n        \"\"\"\n        If we are exporting for the purposes of generating\n        a 'bom-import' template, there are some fields which\n        we are not interested in.\n        \"\"\"\n\n        fields = super().get_fields(**kwargs)\n\n        # If we are not generating an \"import\" template,\n        # just return the complete list of fields\n        if not getattr(self, 'is_importing', False):\n            return fields\n\n        # Otherwise, remove some fields we are not interested in\n\n        idx = 0\n\n        to_remove = [\n            'level',\n            'bom_id',\n            'parent_part_id',\n            'parent_part_ipn',\n            'parent_part_name',\n            'part_description',\n            'sub_assembly'\n        ]\n\n        while idx < len(fields):\n\n            if fields[idx].column_name.lower() in to_remove:\n                del fields[idx]\n            else:\n                idx += 1\n\n        return fields\n\n    class Meta:\n        model = models.BomItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            'checksum',\n            'id',\n            'part',\n            'sub_part',\n        ]\n\n\nclass BomItemAdmin(ImportExportModelAdmin):\n\n    resource_class = BomItemResource\n\n    list_display = ('part', 'sub_part', 'quantity')\n\n    search_fields = ('part__name', 'part__description', 'sub_part__name', 'sub_part__description')\n\n    autocomplete_fields = ('part', 'sub_part',)\n\n\nclass ParameterTemplateAdmin(ImportExportModelAdmin):\n    list_display = ('name', 'units')\n\n    search_fields = ('name', 'units')\n\n\nclass ParameterResource(ModelResource):\n    \"\"\" Class for managing PartParameter data import/export \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    template = Field(attribute='template', widget=widgets.ForeignKeyWidget(models.PartParameterTemplate))\n\n    template_name = Field(attribute='template__name', readonly=True)\n\n    class Meta:\n        model = models.PartParameter\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True\n\n\nclass ParameterAdmin(ImportExportModelAdmin):\n\n    resource_class = ParameterResource\n\n    list_display = ('part', 'template', 'data')\n\n    autocomplete_fields = ('part', 'template')\n\n\nclass PartCategoryParameterAdmin(admin.ModelAdmin):\n\n    autocomplete_fields = ('category', 'parameter_template',)\n\n\nclass PartSellPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartSellPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)\n\n\nclass PartInternalPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartInternalPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)\n\n    autocomplete_fields = ('part',)\n\n\nadmin.site.register(models.Part, PartAdmin)\nadmin.site.register(models.PartCategory, PartCategoryAdmin)\nadmin.site.register(models.PartRelated, PartRelatedAdmin)\nadmin.site.register(models.PartAttachment, PartAttachmentAdmin)\nadmin.site.register(models.PartStar, PartStarAdmin)\nadmin.site.register(models.PartCategoryStar, PartCategoryStarAdmin)\nadmin.site.register(models.BomItem, BomItemAdmin)\nadmin.site.register(models.PartParameterTemplate, ParameterTemplateAdmin)\nadmin.site.register(models.PartParameter, ParameterAdmin)\nadmin.site.register(models.PartCategoryParameterTemplate, PartCategoryParameterAdmin)\nadmin.site.register(models.PartTestTemplate, PartTestTemplateAdmin)\nadmin.site.register(models.PartSellPriceBreak, PartSellPriceBreakAdmin)\nadmin.site.register(models.PartInternalPriceBreak, PartInternalPriceBreakAdmin)\n", "patch": "@@ -3,15 +3,15 @@\n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n \n import part.models as models\n from company.models import SupplierPart\n+from InvenTree.admin import InvenTreeResource\n from stock.models import StockLocation\n \n \n-class PartResource(ModelResource):\n-    \"\"\" Class for managing Part data import/export \"\"\"\n+class PartResource(InvenTreeResource):\n+    \"\"\"Class for managing Part data import/export.\"\"\"\n \n     # ForeignKey fields\n     category = Field(attribute='category', widget=widgets.ForeignKeyWidget(models.PartCategory))\n@@ -81,8 +81,8 @@ class PartAdmin(ImportExportModelAdmin):\n     ]\n \n \n-class PartCategoryResource(ModelResource):\n-    \"\"\" Class for managing PartCategory data import/export \"\"\"\n+class PartCategoryResource(InvenTreeResource):\n+    \"\"\"Class for managing PartCategory data import/export.\"\"\"\n \n     parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(models.PartCategory))\n \n@@ -157,8 +157,8 @@ class PartTestTemplateAdmin(admin.ModelAdmin):\n     autocomplete_fields = ('part',)\n \n \n-class BomItemResource(ModelResource):\n-    \"\"\" Class for managing BomItem data import/export \"\"\"\n+class BomItemResource(InvenTreeResource):\n+    \"\"\"Class for managing BomItem data import/export.\"\"\"\n \n     level = Field(attribute='level', readonly=True)\n \n@@ -269,8 +269,8 @@ class ParameterTemplateAdmin(ImportExportModelAdmin):\n     search_fields = ('name', 'units')\n \n \n-class ParameterResource(ModelResource):\n-    \"\"\" Class for managing PartParameter data import/export \"\"\"\n+class ParameterResource(InvenTreeResource):\n+    \"\"\"Class for managing PartParameter data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n ", "file_path": "files/2022_6/422", "file_language": "py", "file_name": "InvenTree/part/admin.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class PartResource(ModelResource):\n    \"\"\" Class for managing Part data import/export \"\"\"\n\n    # ForeignKey fields\n    category = Field(attribute='category', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    default_supplier = Field(attribute='default_supplier', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    category_name = Field(attribute='category__name', readonly=True)\n\n    variant_of = Field(attribute='variant_of', widget=widgets.ForeignKeyWidget(models.Part))\n\n    suppliers = Field(attribute='supplier_count', readonly=True)\n\n    # Extra calculated meta-data (readonly)\n    in_stock = Field(attribute='total_stock', readonly=True, widget=widgets.IntegerWidget())\n\n    on_order = Field(attribute='on_order', readonly=True, widget=widgets.IntegerWidget())\n\n    used_in = Field(attribute='used_in_count', readonly=True, widget=widgets.IntegerWidget())\n\n    allocated = Field(attribute='allocation_count', readonly=True, widget=widgets.IntegerWidget())\n\n    building = Field(attribute='quantity_being_built', readonly=True, widget=widgets.IntegerWidget())\n\n    class Meta:\n        model = models.Part\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'bom_checksum', 'bom_checked_by', 'bom_checked_date',\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def get_queryset(self):\n        \"\"\" Prefetch related data for quicker access \"\"\"\n\n        query = super().get_queryset()\n        query = query.prefetch_related(\n            'category',\n            'used_in',\n            'builds',\n            'supplier_parts__purchase_order_line_items',\n            'stock_items__allocations'\n        )\n\n        return query", "target": 0}, {"function": "class PartAdmin(ImportExportModelAdmin):\n\n    resource_class = PartResource\n\n    list_display = ('full_name', 'description', 'total_stock', 'category')\n\n    list_filter = ('active', 'assembly', 'is_template', 'virtual')\n\n    search_fields = ('name', 'description', 'category__name', 'category__description', 'IPN')\n\n    autocomplete_fields = [\n        'variant_of',\n        'category',\n        'default_location',\n        'default_supplier',\n    ]", "target": 0}, {"function": "class PartCategoryResource(ModelResource):\n    \"\"\" Class for managing PartCategory data import/export \"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    class Meta:\n        model = models.PartCategory\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the PartCategory tree(s)\n        models.PartCategory.objects.rebuild()", "target": 0}, {"function": "class PartCategoryAdmin(ImportExportModelAdmin):\n\n    resource_class = PartCategoryResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    autocomplete_fields = ('parent', 'default_location',)", "target": 0}, {"function": "class PartRelatedAdmin(admin.ModelAdmin):\n    \"\"\"\n    Class to manage PartRelated objects\n    \"\"\"\n\n    autocomplete_fields = ('part_1', 'part_2')", "target": 0}, {"function": "class PartAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'attachment', 'comment')\n\n    autocomplete_fields = ('part',)", "target": 0}, {"function": "class PartStarAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'user')\n\n    autocomplete_fields = ('part',)", "target": 0}, {"function": "class PartCategoryStarAdmin(admin.ModelAdmin):\n\n    list_display = ('category', 'user')\n\n    autocomplete_fields = ('category',)", "target": 0}, {"function": "class PartTestTemplateAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'test_name', 'required')\n\n    autocomplete_fields = ('part',)", "target": 0}, {"function": "class BomItemResource(ModelResource):\n    \"\"\" Class for managing BomItem data import/export \"\"\"\n\n    level = Field(attribute='level', readonly=True)\n\n    bom_id = Field(attribute='pk')\n\n    # ID of the parent part\n    parent_part_id = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the parent part\n    parent_part_ipn = Field(attribute='part__IPN', readonly=True)\n\n    # Name of the parent part\n    parent_part_name = Field(attribute='part__name', readonly=True)\n\n    # ID of the sub-part\n    part_id = Field(attribute='sub_part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the sub-part\n    part_ipn = Field(attribute='sub_part__IPN', readonly=True)\n\n    # Name of the sub-part\n    part_name = Field(attribute='sub_part__name', readonly=True)\n\n    # Description of the sub-part\n    part_description = Field(attribute='sub_part__description', readonly=True)\n\n    # Is the sub-part itself an assembly?\n    sub_assembly = Field(attribute='sub_part__assembly', readonly=True)\n\n    def dehydrate_quantity(self, item):\n        \"\"\"\n        Special consideration for the 'quantity' field on data export.\n        We do not want a spreadsheet full of \"1.0000\" (we'd rather \"1\")\n\n        Ref: https://django-import-export.readthedocs.io/en/latest/getting_started.html#advanced-data-manipulation-on-export\n        \"\"\"\n        return float(item.quantity)\n\n    def before_export(self, queryset, *args, **kwargs):\n\n        self.is_importing = kwargs.get('importing', False)\n\n    def get_fields(self, **kwargs):\n        \"\"\"\n        If we are exporting for the purposes of generating\n        a 'bom-import' template, there are some fields which\n        we are not interested in.\n        \"\"\"\n\n        fields = super().get_fields(**kwargs)\n\n        # If we are not generating an \"import\" template,\n        # just return the complete list of fields\n        if not getattr(self, 'is_importing', False):\n            return fields\n\n        # Otherwise, remove some fields we are not interested in\n\n        idx = 0\n\n        to_remove = [\n            'level',\n            'bom_id',\n            'parent_part_id',\n            'parent_part_ipn',\n            'parent_part_name',\n            'part_description',\n            'sub_assembly'\n        ]\n\n        while idx < len(fields):\n\n            if fields[idx].column_name.lower() in to_remove:\n                del fields[idx]\n            else:\n                idx += 1\n\n        return fields\n\n    class Meta:\n        model = models.BomItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            'checksum',\n            'id',\n            'part',\n            'sub_part',\n        ]", "target": 0}, {"function": "class BomItemAdmin(ImportExportModelAdmin):\n\n    resource_class = BomItemResource\n\n    list_display = ('part', 'sub_part', 'quantity')\n\n    search_fields = ('part__name', 'part__description', 'sub_part__name', 'sub_part__description')\n\n    autocomplete_fields = ('part', 'sub_part',)", "target": 0}, {"function": "class ParameterTemplateAdmin(ImportExportModelAdmin):\n    list_display = ('name', 'units')\n\n    search_fields = ('name', 'units')", "target": 0}, {"function": "class ParameterResource(ModelResource):\n    \"\"\" Class for managing PartParameter data import/export \"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    template = Field(attribute='template', widget=widgets.ForeignKeyWidget(models.PartParameterTemplate))\n\n    template_name = Field(attribute='template__name', readonly=True)\n\n    class Meta:\n        model = models.PartParameter\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True", "target": 0}, {"function": "class ParameterAdmin(ImportExportModelAdmin):\n\n    resource_class = ParameterResource\n\n    list_display = ('part', 'template', 'data')\n\n    autocomplete_fields = ('part', 'template')", "target": 0}, {"function": "class PartCategoryParameterAdmin(admin.ModelAdmin):\n\n    autocomplete_fields = ('category', 'parameter_template',)", "target": 0}, {"function": "class PartSellPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartSellPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)", "target": 0}, {"function": "class PartInternalPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartInternalPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)\n\n    autocomplete_fields = ('part',)", "target": 0}], "function_after": [{"function": "class PartResource(InvenTreeResource):\n    \"\"\"Class for managing Part data import/export.\"\"\"\n\n    # ForeignKey fields\n    category = Field(attribute='category', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    default_supplier = Field(attribute='default_supplier', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    category_name = Field(attribute='category__name', readonly=True)\n\n    variant_of = Field(attribute='variant_of', widget=widgets.ForeignKeyWidget(models.Part))\n\n    suppliers = Field(attribute='supplier_count', readonly=True)\n\n    # Extra calculated meta-data (readonly)\n    in_stock = Field(attribute='total_stock', readonly=True, widget=widgets.IntegerWidget())\n\n    on_order = Field(attribute='on_order', readonly=True, widget=widgets.IntegerWidget())\n\n    used_in = Field(attribute='used_in_count', readonly=True, widget=widgets.IntegerWidget())\n\n    allocated = Field(attribute='allocation_count', readonly=True, widget=widgets.IntegerWidget())\n\n    building = Field(attribute='quantity_being_built', readonly=True, widget=widgets.IntegerWidget())\n\n    class Meta:\n        model = models.Part\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n        exclude = [\n            'bom_checksum', 'bom_checked_by', 'bom_checked_date',\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def get_queryset(self):\n        \"\"\" Prefetch related data for quicker access \"\"\"\n\n        query = super().get_queryset()\n        query = query.prefetch_related(\n            'category',\n            'used_in',\n            'builds',\n            'supplier_parts__purchase_order_line_items',\n            'stock_items__allocations'\n        )\n\n        return query", "target": 0}, {"function": "class PartAdmin(ImportExportModelAdmin):\n\n    resource_class = PartResource\n\n    list_display = ('full_name', 'description', 'total_stock', 'category')\n\n    list_filter = ('active', 'assembly', 'is_template', 'virtual')\n\n    search_fields = ('name', 'description', 'category__name', 'category__description', 'IPN')\n\n    autocomplete_fields = [\n        'variant_of',\n        'category',\n        'default_location',\n        'default_supplier',\n    ]", "target": 0}, {"function": "class PartCategoryResource(InvenTreeResource):\n    \"\"\"Class for managing PartCategory data import/export.\"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(models.PartCategory))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    default_location = Field(attribute='default_location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    class Meta:\n        model = models.PartCategory\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the PartCategory tree(s)\n        models.PartCategory.objects.rebuild()", "target": 0}, {"function": "class PartCategoryAdmin(ImportExportModelAdmin):\n\n    resource_class = PartCategoryResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    autocomplete_fields = ('parent', 'default_location',)", "target": 0}, {"function": "class PartRelatedAdmin(admin.ModelAdmin):\n    \"\"\"\n    Class to manage PartRelated objects\n    \"\"\"\n\n    autocomplete_fields = ('part_1', 'part_2')", "target": 0}, {"function": "class PartAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'attachment', 'comment')\n\n    autocomplete_fields = ('part',)", "target": 0}, {"function": "class PartStarAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'user')\n\n    autocomplete_fields = ('part',)", "target": 0}, {"function": "class PartCategoryStarAdmin(admin.ModelAdmin):\n\n    list_display = ('category', 'user')\n\n    autocomplete_fields = ('category',)", "target": 0}, {"function": "class PartTestTemplateAdmin(admin.ModelAdmin):\n\n    list_display = ('part', 'test_name', 'required')\n\n    autocomplete_fields = ('part',)", "target": 0}, {"function": "class BomItemResource(InvenTreeResource):\n    \"\"\"Class for managing BomItem data import/export.\"\"\"\n\n    level = Field(attribute='level', readonly=True)\n\n    bom_id = Field(attribute='pk')\n\n    # ID of the parent part\n    parent_part_id = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the parent part\n    parent_part_ipn = Field(attribute='part__IPN', readonly=True)\n\n    # Name of the parent part\n    parent_part_name = Field(attribute='part__name', readonly=True)\n\n    # ID of the sub-part\n    part_id = Field(attribute='sub_part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    # IPN of the sub-part\n    part_ipn = Field(attribute='sub_part__IPN', readonly=True)\n\n    # Name of the sub-part\n    part_name = Field(attribute='sub_part__name', readonly=True)\n\n    # Description of the sub-part\n    part_description = Field(attribute='sub_part__description', readonly=True)\n\n    # Is the sub-part itself an assembly?\n    sub_assembly = Field(attribute='sub_part__assembly', readonly=True)\n\n    def dehydrate_quantity(self, item):\n        \"\"\"\n        Special consideration for the 'quantity' field on data export.\n        We do not want a spreadsheet full of \"1.0000\" (we'd rather \"1\")\n\n        Ref: https://django-import-export.readthedocs.io/en/latest/getting_started.html#advanced-data-manipulation-on-export\n        \"\"\"\n        return float(item.quantity)\n\n    def before_export(self, queryset, *args, **kwargs):\n\n        self.is_importing = kwargs.get('importing', False)\n\n    def get_fields(self, **kwargs):\n        \"\"\"\n        If we are exporting for the purposes of generating\n        a 'bom-import' template, there are some fields which\n        we are not interested in.\n        \"\"\"\n\n        fields = super().get_fields(**kwargs)\n\n        # If we are not generating an \"import\" template,\n        # just return the complete list of fields\n        if not getattr(self, 'is_importing', False):\n            return fields\n\n        # Otherwise, remove some fields we are not interested in\n\n        idx = 0\n\n        to_remove = [\n            'level',\n            'bom_id',\n            'parent_part_id',\n            'parent_part_ipn',\n            'parent_part_name',\n            'part_description',\n            'sub_assembly'\n        ]\n\n        while idx < len(fields):\n\n            if fields[idx].column_name.lower() in to_remove:\n                del fields[idx]\n            else:\n                idx += 1\n\n        return fields\n\n    class Meta:\n        model = models.BomItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            'checksum',\n            'id',\n            'part',\n            'sub_part',\n        ]", "target": 0}, {"function": "class BomItemAdmin(ImportExportModelAdmin):\n\n    resource_class = BomItemResource\n\n    list_display = ('part', 'sub_part', 'quantity')\n\n    search_fields = ('part__name', 'part__description', 'sub_part__name', 'sub_part__description')\n\n    autocomplete_fields = ('part', 'sub_part',)", "target": 0}, {"function": "class ParameterTemplateAdmin(ImportExportModelAdmin):\n    list_display = ('name', 'units')\n\n    search_fields = ('name', 'units')", "target": 0}, {"function": "class ParameterResource(InvenTreeResource):\n    \"\"\"Class for managing PartParameter data import/export.\"\"\"\n\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n\n    part_name = Field(attribute='part__name', readonly=True)\n\n    template = Field(attribute='template', widget=widgets.ForeignKeyWidget(models.PartParameterTemplate))\n\n    template_name = Field(attribute='template__name', readonly=True)\n\n    class Meta:\n        model = models.PartParameter\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True", "target": 0}, {"function": "class ParameterAdmin(ImportExportModelAdmin):\n\n    resource_class = ParameterResource\n\n    list_display = ('part', 'template', 'data')\n\n    autocomplete_fields = ('part', 'template')", "target": 0}, {"function": "class PartCategoryParameterAdmin(admin.ModelAdmin):\n\n    autocomplete_fields = ('category', 'parameter_template',)", "target": 0}, {"function": "class PartSellPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartSellPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)", "target": 0}, {"function": "class PartInternalPriceBreakAdmin(admin.ModelAdmin):\n\n    class Meta:\n        model = models.PartInternalPriceBreak\n\n    list_display = ('part', 'quantity', 'price',)\n\n    autocomplete_fields = ('part',)", "target": 0}]}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Fstock%2Fadmin.py", "code": "from django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\n\nfrom build.models import Build\nfrom company.models import Company, SupplierPart\nfrom InvenTree.admin import InvenTreeResource\nfrom order.models import PurchaseOrder, SalesOrder\nfrom part.models import Part\n\nfrom .models import (StockItem, StockItemAttachment, StockItemTestResult,\n                     StockItemTracking, StockLocation)\n\n\nclass LocationResource(InvenTreeResource):\n    \"\"\"Class for managing StockLocation data import/export.\"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    class Meta:\n        model = StockLocation\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockLocation tree(s)\n        StockLocation.objects.rebuild()\n\n\nclass LocationInline(admin.TabularInline):\n    \"\"\"\n    Inline for sub-locations\n    \"\"\"\n    model = StockLocation\n\n\nclass LocationAdmin(ImportExportModelAdmin):\n\n    resource_class = LocationResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    inlines = [\n        LocationInline,\n    ]\n\n    autocomplete_fields = [\n        'parent',\n    ]\n\n\nclass StockItemResource(InvenTreeResource):\n    \"\"\"Class for managing StockItem data import/export.\"\"\"\n\n    # Custom managers for ForeignKey fields\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier_part = Field(attribute='supplier_part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier = Field(attribute='supplier_part__supplier__id', readonly=True)\n\n    customer = Field(attribute='customer', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier_part__supplier__name', readonly=True)\n\n    status_label = Field(attribute='status_label', readonly=True)\n\n    location = Field(attribute='location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    location_name = Field(attribute='location__name', readonly=True)\n\n    belongs_to = Field(attribute='belongs_to', widget=widgets.ForeignKeyWidget(StockItem))\n\n    build = Field(attribute='build', widget=widgets.ForeignKeyWidget(Build))\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockItem))\n\n    sales_order = Field(attribute='sales_order', widget=widgets.ForeignKeyWidget(SalesOrder))\n\n    purchase_order = Field(attribute='purchase_order', widget=widgets.ForeignKeyWidget(PurchaseOrder))\n\n    # Date management\n    updated = Field(attribute='updated', widget=widgets.DateWidget())\n\n    stocktake_date = Field(attribute='stocktake_date', widget=widgets.DateWidget())\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockItem tree(s)\n        StockItem.objects.rebuild()\n\n    class Meta:\n        model = StockItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            # Exclude internal fields\n            'serial_int', 'metadata',\n        ]\n\n\nclass StockItemAdmin(ImportExportModelAdmin):\n\n    resource_class = StockItemResource\n\n    list_display = ('part', 'quantity', 'location', 'status', 'updated')\n\n    # A list of search fields which can be used for lookup on matching 'autocomplete' fields\n    search_fields = [\n        'part__name',\n        'part__description',\n        'serial',\n        'batch',\n    ]\n\n    autocomplete_fields = [\n        'belongs_to',\n        'build',\n        'customer',\n        'location',\n        'parent',\n        'part',\n        'purchase_order',\n        'sales_order',\n        'stocktake_user',\n        'supplier_part',\n    ]\n\n\nclass StockAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'attachment', 'comment')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]\n\n\nclass StockTrackingAdmin(ImportExportModelAdmin):\n    list_display = ('item', 'date', 'label')\n\n    autocomplete_fields = [\n        'item',\n    ]\n\n\nclass StockItemTestResultAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'test', 'result', 'value')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]\n\n\nadmin.site.register(StockLocation, LocationAdmin)\nadmin.site.register(StockItem, StockItemAdmin)\nadmin.site.register(StockItemTracking, StockTrackingAdmin)\nadmin.site.register(StockItemAttachment, StockAttachmentAdmin)\nadmin.site.register(StockItemTestResult, StockItemTestResultAdmin)\n", "code_before": "from django.contrib import admin\n\nimport import_export.widgets as widgets\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export.fields import Field\nfrom import_export.resources import ModelResource\n\nfrom build.models import Build\nfrom company.models import Company, SupplierPart\nfrom order.models import PurchaseOrder, SalesOrder\nfrom part.models import Part\n\nfrom .models import (StockItem, StockItemAttachment, StockItemTestResult,\n                     StockItemTracking, StockLocation)\n\n\nclass LocationResource(ModelResource):\n    \"\"\" Class for managing StockLocation data import/export \"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    class Meta:\n        model = StockLocation\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockLocation tree(s)\n        StockLocation.objects.rebuild()\n\n\nclass LocationInline(admin.TabularInline):\n    \"\"\"\n    Inline for sub-locations\n    \"\"\"\n    model = StockLocation\n\n\nclass LocationAdmin(ImportExportModelAdmin):\n\n    resource_class = LocationResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    inlines = [\n        LocationInline,\n    ]\n\n    autocomplete_fields = [\n        'parent',\n    ]\n\n\nclass StockItemResource(ModelResource):\n    \"\"\" Class for managing StockItem data import/export \"\"\"\n\n    # Custom managers for ForeignKey fields\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier_part = Field(attribute='supplier_part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier = Field(attribute='supplier_part__supplier__id', readonly=True)\n\n    customer = Field(attribute='customer', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier_part__supplier__name', readonly=True)\n\n    status_label = Field(attribute='status_label', readonly=True)\n\n    location = Field(attribute='location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    location_name = Field(attribute='location__name', readonly=True)\n\n    belongs_to = Field(attribute='belongs_to', widget=widgets.ForeignKeyWidget(StockItem))\n\n    build = Field(attribute='build', widget=widgets.ForeignKeyWidget(Build))\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockItem))\n\n    sales_order = Field(attribute='sales_order', widget=widgets.ForeignKeyWidget(SalesOrder))\n\n    purchase_order = Field(attribute='purchase_order', widget=widgets.ForeignKeyWidget(PurchaseOrder))\n\n    # Date management\n    updated = Field(attribute='updated', widget=widgets.DateWidget())\n\n    stocktake_date = Field(attribute='stocktake_date', widget=widgets.DateWidget())\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockItem tree(s)\n        StockItem.objects.rebuild()\n\n    class Meta:\n        model = StockItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            # Exclude internal fields\n            'serial_int', 'metadata',\n        ]\n\n\nclass StockItemAdmin(ImportExportModelAdmin):\n\n    resource_class = StockItemResource\n\n    list_display = ('part', 'quantity', 'location', 'status', 'updated')\n\n    # A list of search fields which can be used for lookup on matching 'autocomplete' fields\n    search_fields = [\n        'part__name',\n        'part__description',\n        'serial',\n        'batch',\n    ]\n\n    autocomplete_fields = [\n        'belongs_to',\n        'build',\n        'customer',\n        'location',\n        'parent',\n        'part',\n        'purchase_order',\n        'sales_order',\n        'stocktake_user',\n        'supplier_part',\n    ]\n\n\nclass StockAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'attachment', 'comment')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]\n\n\nclass StockTrackingAdmin(ImportExportModelAdmin):\n    list_display = ('item', 'date', 'label')\n\n    autocomplete_fields = [\n        'item',\n    ]\n\n\nclass StockItemTestResultAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'test', 'result', 'value')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]\n\n\nadmin.site.register(StockLocation, LocationAdmin)\nadmin.site.register(StockItem, StockItemAdmin)\nadmin.site.register(StockItemTracking, StockTrackingAdmin)\nadmin.site.register(StockItemAttachment, StockAttachmentAdmin)\nadmin.site.register(StockItemTestResult, StockItemTestResultAdmin)\n", "patch": "@@ -3,19 +3,19 @@\n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n \n from build.models import Build\n from company.models import Company, SupplierPart\n+from InvenTree.admin import InvenTreeResource\n from order.models import PurchaseOrder, SalesOrder\n from part.models import Part\n \n from .models import (StockItem, StockItemAttachment, StockItemTestResult,\n                      StockItemTracking, StockLocation)\n \n \n-class LocationResource(ModelResource):\n-    \"\"\" Class for managing StockLocation data import/export \"\"\"\n+class LocationResource(InvenTreeResource):\n+    \"\"\"Class for managing StockLocation data import/export.\"\"\"\n \n     parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockLocation))\n \n@@ -65,8 +65,8 @@ class LocationAdmin(ImportExportModelAdmin):\n     ]\n \n \n-class StockItemResource(ModelResource):\n-    \"\"\" Class for managing StockItem data import/export \"\"\"\n+class StockItemResource(InvenTreeResource):\n+    \"\"\"Class for managing StockItem data import/export.\"\"\"\n \n     # Custom managers for ForeignKey fields\n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))", "file_path": "files/2022_6/423", "file_language": "py", "file_name": "InvenTree/stock/admin.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class LocationResource(ModelResource):\n    \"\"\" Class for managing StockLocation data import/export \"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    class Meta:\n        model = StockLocation\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockLocation tree(s)\n        StockLocation.objects.rebuild()", "target": 0}, {"function": "class LocationInline(admin.TabularInline):\n    \"\"\"\n    Inline for sub-locations\n    \"\"\"\n    model = StockLocation", "target": 0}, {"function": "class LocationAdmin(ImportExportModelAdmin):\n\n    resource_class = LocationResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    inlines = [\n        LocationInline,\n    ]\n\n    autocomplete_fields = [\n        'parent',\n    ]", "target": 0}, {"function": "class StockItemResource(ModelResource):\n    \"\"\" Class for managing StockItem data import/export \"\"\"\n\n    # Custom managers for ForeignKey fields\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier_part = Field(attribute='supplier_part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier = Field(attribute='supplier_part__supplier__id', readonly=True)\n\n    customer = Field(attribute='customer', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier_part__supplier__name', readonly=True)\n\n    status_label = Field(attribute='status_label', readonly=True)\n\n    location = Field(attribute='location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    location_name = Field(attribute='location__name', readonly=True)\n\n    belongs_to = Field(attribute='belongs_to', widget=widgets.ForeignKeyWidget(StockItem))\n\n    build = Field(attribute='build', widget=widgets.ForeignKeyWidget(Build))\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockItem))\n\n    sales_order = Field(attribute='sales_order', widget=widgets.ForeignKeyWidget(SalesOrder))\n\n    purchase_order = Field(attribute='purchase_order', widget=widgets.ForeignKeyWidget(PurchaseOrder))\n\n    # Date management\n    updated = Field(attribute='updated', widget=widgets.DateWidget())\n\n    stocktake_date = Field(attribute='stocktake_date', widget=widgets.DateWidget())\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockItem tree(s)\n        StockItem.objects.rebuild()\n\n    class Meta:\n        model = StockItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            # Exclude internal fields\n            'serial_int', 'metadata',\n        ]", "target": 0}, {"function": "class StockItemAdmin(ImportExportModelAdmin):\n\n    resource_class = StockItemResource\n\n    list_display = ('part', 'quantity', 'location', 'status', 'updated')\n\n    # A list of search fields which can be used for lookup on matching 'autocomplete' fields\n    search_fields = [\n        'part__name',\n        'part__description',\n        'serial',\n        'batch',\n    ]\n\n    autocomplete_fields = [\n        'belongs_to',\n        'build',\n        'customer',\n        'location',\n        'parent',\n        'part',\n        'purchase_order',\n        'sales_order',\n        'stocktake_user',\n        'supplier_part',\n    ]", "target": 0}, {"function": "class StockAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'attachment', 'comment')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]", "target": 0}, {"function": "class StockTrackingAdmin(ImportExportModelAdmin):\n    list_display = ('item', 'date', 'label')\n\n    autocomplete_fields = [\n        'item',\n    ]", "target": 0}, {"function": "class StockItemTestResultAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'test', 'result', 'value')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]", "target": 0}], "function_after": [{"function": "class LocationResource(InvenTreeResource):\n    \"\"\"Class for managing StockLocation data import/export.\"\"\"\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    parent_name = Field(attribute='parent__name', readonly=True)\n\n    class Meta:\n        model = StockLocation\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instances = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            'metadata',\n        ]\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockLocation tree(s)\n        StockLocation.objects.rebuild()", "target": 0}, {"function": "class LocationInline(admin.TabularInline):\n    \"\"\"\n    Inline for sub-locations\n    \"\"\"\n    model = StockLocation", "target": 0}, {"function": "class LocationAdmin(ImportExportModelAdmin):\n\n    resource_class = LocationResource\n\n    list_display = ('name', 'pathstring', 'description')\n\n    search_fields = ('name', 'description')\n\n    inlines = [\n        LocationInline,\n    ]\n\n    autocomplete_fields = [\n        'parent',\n    ]", "target": 0}, {"function": "class StockItemResource(InvenTreeResource):\n    \"\"\"Class for managing StockItem data import/export.\"\"\"\n\n    # Custom managers for ForeignKey fields\n    part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n\n    part_name = Field(attribute='part__full_name', readonly=True)\n\n    supplier_part = Field(attribute='supplier_part', widget=widgets.ForeignKeyWidget(SupplierPart))\n\n    supplier = Field(attribute='supplier_part__supplier__id', readonly=True)\n\n    customer = Field(attribute='customer', widget=widgets.ForeignKeyWidget(Company))\n\n    supplier_name = Field(attribute='supplier_part__supplier__name', readonly=True)\n\n    status_label = Field(attribute='status_label', readonly=True)\n\n    location = Field(attribute='location', widget=widgets.ForeignKeyWidget(StockLocation))\n\n    location_name = Field(attribute='location__name', readonly=True)\n\n    belongs_to = Field(attribute='belongs_to', widget=widgets.ForeignKeyWidget(StockItem))\n\n    build = Field(attribute='build', widget=widgets.ForeignKeyWidget(Build))\n\n    parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockItem))\n\n    sales_order = Field(attribute='sales_order', widget=widgets.ForeignKeyWidget(SalesOrder))\n\n    purchase_order = Field(attribute='purchase_order', widget=widgets.ForeignKeyWidget(PurchaseOrder))\n\n    # Date management\n    updated = Field(attribute='updated', widget=widgets.DateWidget())\n\n    stocktake_date = Field(attribute='stocktake_date', widget=widgets.DateWidget())\n\n    def after_import(self, dataset, result, using_transactions, dry_run, **kwargs):\n\n        super().after_import(dataset, result, using_transactions, dry_run, **kwargs)\n\n        # Rebuild the StockItem tree(s)\n        StockItem.objects.rebuild()\n\n    class Meta:\n        model = StockItem\n        skip_unchanged = True\n        report_skipped = False\n        clean_model_instance = True\n\n        exclude = [\n            # Exclude MPTT internal model fields\n            'lft', 'rght', 'tree_id', 'level',\n            # Exclude internal fields\n            'serial_int', 'metadata',\n        ]", "target": 0}, {"function": "class StockItemAdmin(ImportExportModelAdmin):\n\n    resource_class = StockItemResource\n\n    list_display = ('part', 'quantity', 'location', 'status', 'updated')\n\n    # A list of search fields which can be used for lookup on matching 'autocomplete' fields\n    search_fields = [\n        'part__name',\n        'part__description',\n        'serial',\n        'batch',\n    ]\n\n    autocomplete_fields = [\n        'belongs_to',\n        'build',\n        'customer',\n        'location',\n        'parent',\n        'part',\n        'purchase_order',\n        'sales_order',\n        'stocktake_user',\n        'supplier_part',\n    ]", "target": 0}, {"function": "class StockAttachmentAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'attachment', 'comment')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]", "target": 0}, {"function": "class StockTrackingAdmin(ImportExportModelAdmin):\n    list_display = ('item', 'date', 'label')\n\n    autocomplete_fields = [\n        'item',\n    ]", "target": 0}, {"function": "class StockItemTestResultAdmin(admin.ModelAdmin):\n\n    list_display = ('stock_item', 'test', 'result', 'value')\n\n    autocomplete_fields = [\n        'stock_item',\n    ]", "target": 0}]}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Ftemplates%2Fjs%2Ftranslated%2Fattachment.js", "code": "{% load i18n %}\n\n/* globals\n    makeIconButton,\n    renderLink,\n*/\n\n/* exported\n    addAttachmentButtonCallbacks,\n    loadAttachmentTable,\n    reloadAttachmentTable,\n*/\n\n\n/*\n * Add callbacks to buttons for creating new attachments.\n *\n * Note: Attachments can also be external links!\n */\nfunction addAttachmentButtonCallbacks(url, fields={}) {\n\n    // Callback for 'new attachment' button\n    $('#new-attachment').click(function() {\n\n        var file_fields = {\n            attachment: {},\n            comment: {},\n        };\n\n        Object.assign(file_fields, fields);\n\n        constructForm(url, {\n            fields: file_fields,\n            method: 'POST',\n            onSuccess: reloadAttachmentTable,\n            title: '{% trans \"Add Attachment\" %}',\n        });\n    });\n\n    // Callback for 'new link' button\n    $('#new-attachment-link').click(function() {\n\n        var link_fields = {\n            link: {},\n            comment: {},\n        };\n\n        Object.assign(link_fields, fields);\n\n        constructForm(url, {\n            fields: link_fields,\n            method: 'POST',\n            onSuccess: reloadAttachmentTable,\n            title: '{% trans \"Add Link\" %}',\n        });\n    });\n}\n\n\nfunction reloadAttachmentTable() {\n\n    $('#attachment-table').bootstrapTable('refresh');\n}\n\n\nfunction loadAttachmentTable(url, options) {\n\n    var table = options.table || '#attachment-table';\n\n    setupFilterList('attachments', $(table), '#filter-list-attachments');\n\n    addAttachmentButtonCallbacks(url, options.fields || {});\n\n    $(table).inventreeTable({\n        url: url,\n        name: options.name || 'attachments',\n        formatNoMatches: function() {\n            return '{% trans \"No attachments found\" %}';\n        },\n        sortable: true,\n        search: true,\n        queryParams: options.filters || {},\n        onPostBody: function() {\n            // Add callback for 'edit' button\n            $(table).find('.button-attachment-edit').click(function() {\n                var pk = $(this).attr('pk');\n\n                constructForm(`${url}${pk}/`, {\n                    fields: {\n                        link: {},\n                        comment: {},\n                    },\n                    processResults: function(data, fields, opts) {\n                        // Remove the \"link\" field if the attachment is a file!\n                        if (data.attachment) {\n                            delete opts.fields.link;\n                        }\n                    },\n                    onSuccess: reloadAttachmentTable,\n                    title: '{% trans \"Edit Attachment\" %}',\n                });\n            });\n\n            // Add callback for 'delete' button\n            $(table).find('.button-attachment-delete').click(function() {\n                var pk = $(this).attr('pk');\n\n                constructForm(`${url}${pk}/`, {\n                    method: 'DELETE',\n                    confirmMessage: '{% trans \"Confirm Delete\" %}',\n                    title: '{% trans \"Delete Attachment\" %}',\n                    onSuccess: reloadAttachmentTable,\n                });\n            });\n        },\n        columns: [\n            {\n                field: 'attachment',\n                title: '{% trans \"Attachment\" %}',\n                formatter: function(value, row) {\n\n                    if (row.attachment) {\n                        var icon = 'fa-file-alt';\n\n                        var fn = value.toLowerCase();\n\n                        if (fn.endsWith('.csv')) {\n                            icon = 'fa-file-csv';\n                        } else if (fn.endsWith('.pdf')) {\n                            icon = 'fa-file-pdf';\n                        } else if (fn.endsWith('.xls') || fn.endsWith('.xlsx')) {\n                            icon = 'fa-file-excel';\n                        } else if (fn.endsWith('.doc') || fn.endsWith('.docx')) {\n                            icon = 'fa-file-word';\n                        } else if (fn.endsWith('.zip') || fn.endsWith('.7z')) {\n                            icon = 'fa-file-archive';\n                        } else {\n                            var images = ['.png', '.jpg', '.bmp', '.gif', '.svg', '.tif'];\n\n                            images.forEach(function(suffix) {\n                                if (fn.endsWith(suffix)) {\n                                    icon = 'fa-file-image';\n                                }\n                            });\n                        }\n\n                        var split = value.split('/');\n                        var filename = split[split.length - 1];\n\n                        var html = `<span class='fas ${icon}'></span> ${filename}`;\n\n                        return renderLink(html, value, {download: true});\n                    } else if (row.link) {\n                        var html = `<span class='fas fa-link'></span> ${row.link}`;\n                        return renderLink(html, row.link);\n                    } else {\n                        return '-';\n                    }\n                }\n            },\n            {\n                field: 'comment',\n                title: '{% trans \"Comment\" %}',\n            },\n            {\n                field: 'upload_date',\n                title: '{% trans \"Upload Date\" %}',\n                formatter: function(value) {\n                    return renderDate(value);\n                }\n            },\n            {\n                field: 'actions',\n                formatter: function(value, row) {\n                    var html = '';\n\n                    html = `<div class='btn-group float-right' role='group'>`;\n\n                    html += makeIconButton(\n                        'fa-edit icon-blue',\n                        'button-attachment-edit',\n                        row.pk,\n                        '{% trans \"Edit attachment\" %}',\n                    );\n\n                    html += makeIconButton(\n                        'fa-trash-alt icon-red',\n                        'button-attachment-delete',\n                        row.pk,\n                        '{% trans \"Delete attachment\" %}',\n                    );\n\n                    html += `</div>`;\n\n                    return html;\n                }\n            }\n        ]\n    });\n}\n", "code_before": "{% load i18n %}\n\n/* globals\n    makeIconButton,\n    renderLink,\n*/\n\n/* exported\n    addAttachmentButtonCallbacks,\n    loadAttachmentTable,\n    reloadAttachmentTable,\n*/\n\n\n/*\n * Add callbacks to buttons for creating new attachments.\n *\n * Note: Attachments can also be external links!\n */\nfunction addAttachmentButtonCallbacks(url, fields={}) {\n\n    // Callback for 'new attachment' button\n    $('#new-attachment').click(function() {\n\n        var file_fields = {\n            attachment: {},\n            comment: {},\n        };\n\n        Object.assign(file_fields, fields);\n\n        constructForm(url, {\n            fields: file_fields,\n            method: 'POST',\n            onSuccess: reloadAttachmentTable,\n            title: '{% trans \"Add Attachment\" %}',\n        });\n    });\n\n    // Callback for 'new link' button\n    $('#new-attachment-link').click(function() {\n\n        var link_fields = {\n            link: {},\n            comment: {},\n        };\n\n        Object.assign(link_fields, fields);\n\n        constructForm(url, {\n            fields: link_fields,\n            method: 'POST',\n            onSuccess: reloadAttachmentTable,\n            title: '{% trans \"Add Link\" %}',\n        });\n    });\n}\n\n\nfunction reloadAttachmentTable() {\n\n    $('#attachment-table').bootstrapTable('refresh');\n}\n\n\nfunction loadAttachmentTable(url, options) {\n\n    var table = options.table || '#attachment-table';\n\n    setupFilterList('attachments', $(table), '#filter-list-attachments');\n\n    addAttachmentButtonCallbacks(url, options.fields || {});\n\n    $(table).inventreeTable({\n        url: url,\n        name: options.name || 'attachments',\n        formatNoMatches: function() {\n            return '{% trans \"No attachments found\" %}';\n        },\n        sortable: true,\n        search: true,\n        queryParams: options.filters || {},\n        onPostBody: function() {\n            // Add callback for 'edit' button\n            $(table).find('.button-attachment-edit').click(function() {\n                var pk = $(this).attr('pk');\n\n                constructForm(`${url}${pk}/`, {\n                    fields: {\n                        link: {},\n                        comment: {},\n                    },\n                    processResults: function(data, fields, opts) {\n                        // Remove the \"link\" field if the attachment is a file!\n                        if (data.attachment) {\n                            delete opts.fields.link;\n                        }\n                    },\n                    onSuccess: reloadAttachmentTable,\n                    title: '{% trans \"Edit Attachment\" %}',\n                });\n            });\n\n            // Add callback for 'delete' button\n            $(table).find('.button-attachment-delete').click(function() {\n                var pk = $(this).attr('pk');\n\n                constructForm(`${url}${pk}/`, {\n                    method: 'DELETE',\n                    confirmMessage: '{% trans \"Confirm Delete\" %}',\n                    title: '{% trans \"Delete Attachment\" %}',\n                    onSuccess: reloadAttachmentTable,\n                });\n            });\n        },\n        columns: [\n            {\n                field: 'attachment',\n                title: '{% trans \"Attachment\" %}',\n                formatter: function(value, row) {\n\n                    if (row.attachment) {\n                        var icon = 'fa-file-alt';\n\n                        var fn = value.toLowerCase();\n\n                        if (fn.endsWith('.csv')) {\n                            icon = 'fa-file-csv';\n                        } else if (fn.endsWith('.pdf')) {\n                            icon = 'fa-file-pdf';\n                        } else if (fn.endsWith('.xls') || fn.endsWith('.xlsx')) {\n                            icon = 'fa-file-excel';\n                        } else if (fn.endsWith('.doc') || fn.endsWith('.docx')) {\n                            icon = 'fa-file-word';\n                        } else if (fn.endsWith('.zip') || fn.endsWith('.7z')) {\n                            icon = 'fa-file-archive';\n                        } else {\n                            var images = ['.png', '.jpg', '.bmp', '.gif', '.svg', '.tif'];\n\n                            images.forEach(function(suffix) {\n                                if (fn.endsWith(suffix)) {\n                                    icon = 'fa-file-image';\n                                }\n                            });\n                        }\n\n                        var split = value.split('/');\n                        var filename = split[split.length - 1];\n\n                        var html = `<span class='fas ${icon}'></span> ${filename}`;\n\n                        return renderLink(html, value);\n                    } else if (row.link) {\n                        var html = `<span class='fas fa-link'></span> ${row.link}`;\n                        return renderLink(html, row.link);\n                    } else {\n                        return '-';\n                    }\n                }\n            },\n            {\n                field: 'comment',\n                title: '{% trans \"Comment\" %}',\n            },\n            {\n                field: 'upload_date',\n                title: '{% trans \"Upload Date\" %}',\n                formatter: function(value) {\n                    return renderDate(value);\n                }\n            },\n            {\n                field: 'actions',\n                formatter: function(value, row) {\n                    var html = '';\n\n                    html = `<div class='btn-group float-right' role='group'>`;\n\n                    html += makeIconButton(\n                        'fa-edit icon-blue',\n                        'button-attachment-edit',\n                        row.pk,\n                        '{% trans \"Edit attachment\" %}',\n                    );\n\n                    html += makeIconButton(\n                        'fa-trash-alt icon-red',\n                        'button-attachment-delete',\n                        row.pk,\n                        '{% trans \"Delete attachment\" %}',\n                    );\n\n                    html += `</div>`;\n\n                    return html;\n                }\n            }\n        ]\n    });\n}\n", "patch": "@@ -149,7 +149,7 @@ function loadAttachmentTable(url, options) {\n \n                         var html = `<span class='fas ${icon}'></span> ${filename}`;\n \n-                        return renderLink(html, value);\n+                        return renderLink(html, value, {download: true});\n                     } else if (row.link) {\n                         var html = `<span class='fas fa-link'></span> ${row.link}`;\n                         return renderLink(html, row.link);", "file_path": "files/2022_6/424", "file_language": "js", "file_name": "InvenTree/templates/js/translated/attachment.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Ftemplates%2Fjs%2Ftranslated%2Fforms.js", "code": "{% load i18n %}\n{% load inventree_extras %}\n\n/* globals\n    createNewModal,\n    inventreeFormDataUpload,\n    inventreeGet,\n    inventreePut,\n    modalEnable,\n    modalShowSubmitButton,\n    renderBuild,\n    renderCompany,\n    renderManufacturerPart,\n    renderOwner,\n    renderPart,\n    renderPartCategory,\n    renderPartParameterTemplate,\n    renderStockItem,\n    renderStockLocation,\n    renderSupplierPart,\n    renderUser,\n    showAlertOrCache,\n    showApiError,\n*/\n\n/* exported\n    clearFormInput,\n    disableFormInput,\n    enableFormInput,\n    hideFormInput,\n    setFormInputPlaceholder,\n    setFormGroupVisibility,\n    showFormInput,\n    selectImportFields,\n*/\n\n/**\n *\n * This file contains code for rendering (and managing) HTML forms\n * which are served via the django-drf API.\n *\n * The django DRF library provides an OPTIONS method for each API endpoint,\n * which allows us to introspect the available fields at any given endpoint.\n *\n * The OPTIONS method provides the following information for each available field:\n *\n * - Field name\n * - Field label (translated)\n * - Field help text (translated)\n * - Field type\n * - Read / write status\n * - Field required status\n * - min_value / max_value\n *\n */\n\n// Set global default theme for select2\n$.fn.select2.defaults.set('theme', 'bootstrap-5');\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a GET method at the endpoint.\n */\nfunction canView(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('GET' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a POST method at the endpoint\n */\nfunction canCreate(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('POST' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a PUT or PATCH method at the endpoint\n */\nfunction canChange(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('PUT' in OPTIONS.actions || 'PATCH' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a DELETE method at the endpoint\n */\nfunction canDelete(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('DELETE' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Get the API endpoint options at the provided URL,\n * using a HTTP options request.\n */\nfunction getApiEndpointOptions(url, callback) {\n\n    if (!url) {\n        return;\n    }\n\n    // Include extra context information in the request\n    url += '?context=true';\n\n    // Return the ajax request object\n    $.ajax({\n        url: url,\n        type: 'OPTIONS',\n        contentType: 'application/json',\n        dataType: 'json',\n        accepts: {\n            json: 'application/json',\n        },\n        success: callback,\n        error: function(xhr) {\n            // TODO: Handle error\n            console.error(`Error in getApiEndpointOptions at '${url}'`);\n            showApiError(xhr, url);\n        }\n    });\n}\n\n\n/*\n * Construct a 'creation' (POST) form, to create a new model in the database.\n *\n * arguments:\n * - fields: The 'actions' object provided by the OPTIONS endpoint\n *\n * options:\n * -\n */\nfunction constructCreateForm(fields, options) {\n\n    // Check if default values were provided for any fields\n    for (const name in fields) {\n\n        var field = fields[name];\n\n        var field_options = options.fields[name] || {};\n\n        // If a 'value' is not provided for the field,\n        if (field.value == null) {\n\n            if ('value' in field_options) {\n                // Client has specified the default value for the field\n                field.value = field_options.value;\n            } else if (field.default != null) {\n                // OPTIONS endpoint provided default value for this field\n                field.value = field.default;\n            }\n        }\n    }\n\n    // We should have enough information to create the form!\n    constructFormBody(fields, options);\n}\n\n\n/*\n * Construct a 'change' (PATCH) form, to create a new model in the database.\n *\n * arguments:\n * - fields: The 'actions' object provided by the OPTIONS endpoint\n *\n * options:\n * -\n */\nfunction constructChangeForm(fields, options) {\n\n    // Request existing data from the API endpoint\n    $.ajax({\n        url: options.url,\n        data: options.params || {},\n        type: 'GET',\n        contentType: 'application/json',\n        dataType: 'json',\n        accepts: {\n            json: 'application/json',\n        },\n        success: function(data) {\n\n            // Ensure the data are fully sanitized before we operate on it\n            data = sanitizeData(data);\n\n            // An optional function can be provided to process the returned results,\n            // before they are rendered to the form\n            if (options.processResults) {\n                var processed = options.processResults(data, fields, options);\n\n                // If the processResults function returns data, it will be stored\n                if (processed) {\n                    data = processed;\n                }\n            }\n\n            // Push existing 'value' to each field\n            for (const field in data) {\n\n                if (field in fields) {\n                    fields[field].value = data[field];\n                }\n            }\n\n            // Store the entire data object\n            options.instance = data;\n\n            constructFormBody(fields, options);\n        },\n        error: function(xhr) {\n            // TODO: Handle error here\n            console.error(`Error in constructChangeForm at '${options.url}'`);\n\n            showApiError(xhr, options.url);\n        }\n    });\n}\n\n\n/*\n * Construct a 'delete' form, to remove a model instance from the database.\n *\n * arguments:\n * - fields: The 'actions' object provided by the OPTIONS request\n * - options: The 'options' object provided by the client\n */\nfunction constructDeleteForm(fields, options) {\n\n    // Force the \"confirm\" property if not set\n    if (!('confirm' in options)) {\n        options.confirm = true;\n    }\n\n    // Request existing data from the API endpoint\n    // This data can be used to render some information on the form\n    $.ajax({\n        url: options.url,\n        type: 'GET',\n        contentType: 'application/json',\n        dataType: 'json',\n        accepts: {\n            json: 'application/json',\n        },\n        success: function(data) {\n\n            // Store the instance data\n            options.instance = data;\n\n            constructFormBody(fields, options);\n        },\n        error: function(xhr) {\n            // TODO: Handle error here\n            console.error(`Error in constructDeleteForm at '${options.url}`);\n\n            showApiError(xhr, options.url);\n        }\n    });\n}\n\n\n/*\n * Request API OPTIONS data from the server,\n * and construct a modal form based on the response.\n *\n * url: API URL which defines form data\n * options:\n * - method: The HTTP method e.g. 'PUT', 'POST', 'DELETE' (default='PATCH')\n * - title: The form title\n * - submitText: Text for the \"submit\" button\n * - submitClass: CSS class for the \"submit\" button (default = ')\n * - closeText: Text for the \"close\" button\n * - fields: list of fields to display, with the following options\n *      - filters: API query filters\n *      - onEdit: callback when field is edited\n *      - secondary: Define a secondary modal form for this field\n *      - label: Specify custom label\n *      - help_text: Specify custom help_text\n *      - placeholder: Specify custom placeholder text\n *      - value: Specify initial value\n *      - hidden: Set to true to hide the field\n *      - icon: font-awesome icon to display before the field\n *      - prefix: Custom HTML prefix to display before the field\n * - data: map of data to fill out field values with\n * - focus: Name of field to focus on when modal is displayed\n * - preventClose: Set to true to prevent form from closing on success\n * - onSuccess: callback function when form action is successful\n * - follow: If a 'url' is provided by the API on success, redirect to it\n * - redirect: A URL to redirect to after form success\n * - reload: Set to true to reload the current page after form success\n * - confirm: Set to true to require a \"confirm\" button\n * - confirmText: Text for confirm button (default = \"Confirm\")\n *\n */\nfunction constructForm(url, options) {\n\n    // An \"empty\" form will be defined locally\n    if (url == null) {\n        constructFormBody({}, options);\n    }\n\n    options.fields = options.fields || {};\n\n    // Save the URL\n    options.url = url;\n\n    // Default HTTP method\n    options.method = options.method || 'PATCH';\n\n    // Default \"groups\" definition\n    options.groups = options.groups || {};\n    options.current_group = null;\n\n    // Construct an \"empty\" data object if not provided\n    if (!options.data) {\n        options.data = {};\n    }\n\n    // Request OPTIONS endpoint from the API\n    getApiEndpointOptions(url, function(OPTIONS) {\n\n        // Extract any custom 'context' information from the OPTIONS data\n        options.context = OPTIONS.context || {};\n\n        /*\n         * Determine what \"type\" of form we want to construct,\n         * based on the requested action.\n         *\n         * First we must determine if the user has the correct permissions!\n         */\n\n        switch (options.method) {\n        case 'POST':\n            if (canCreate(OPTIONS)) {\n                constructCreateForm(OPTIONS.actions.POST, options);\n            } else {\n                // User does not have permission to POST to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"Create operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`'POST action unavailable at ${url}`);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n            if (canChange(OPTIONS)) {\n                constructChangeForm(OPTIONS.actions.PUT, options);\n            } else {\n                // User does not have permission to PUT/PATCH to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"Update operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`${options.method} action unavailable at ${url}`);\n            }\n            break;\n        case 'DELETE':\n            if (canDelete(OPTIONS)) {\n                constructDeleteForm(OPTIONS.actions.DELETE, options);\n            } else {\n                // User does not have permission to DELETE to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"Delete operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`DELETE action unavailable at ${url}`);\n            }\n            break;\n        case 'GET':\n            if (canView(OPTIONS)) {\n                // TODO?\n            } else {\n                // User does not have permission to GET to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"View operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`GET action unavailable at ${url}`);\n            }\n            break;\n        default:\n            console.warn(`constructForm() called with invalid method '${options.method}'`);\n            break;\n        }\n    });\n}\n\n\n/*\n * Construct a modal form based on the provided options\n *\n * arguments:\n * - fields: The endpoint description returned from the OPTIONS request\n * - options: form options object provided by the client.\n */\nfunction constructFormBody(fields, options) {\n\n    var html = '';\n\n    // Client must provide set of fields to be displayed,\n    // otherwise *all* fields will be displayed\n    var displayed_fields = options.fields || fields;\n\n    // Handle initial data overrides\n    if (options.data) {\n        for (const field in options.data) {\n\n            if (field in fields) {\n                fields[field].value = options.data[field];\n            }\n        }\n    }\n\n    // Initialize an \"empty\" field for each specified field\n    for (field in displayed_fields) {\n        if (!(field in fields)) {\n            fields[field] = {};\n        }\n    }\n\n    // Provide each field object with its own name\n    for (field in fields) {\n        fields[field].name = field;\n\n        // If any \"instance_filters\" are defined for the endpoint, copy them across (overwrite)\n        if (fields[field].instance_filters) {\n            fields[field].filters = Object.assign(fields[field].filters || {}, fields[field].instance_filters);\n        }\n\n        var field_options = displayed_fields[field];\n\n        // Copy custom options across to the fields object\n        if (field_options) {\n\n            // Override existing query filters (if provided!)\n            fields[field].filters = Object.assign(fields[field].filters || {}, field_options.filters);\n\n            for (var opt in field_options) {\n\n                var val = field_options[opt];\n\n                if (opt == 'filters') {\n                    // ignore filters (see above)\n                } else if (opt == 'icon') {\n                    // Specify custom icon\n                    fields[field].prefix = `<span class='fas ${val}'></span>`;\n                } else {\n                    fields[field][opt] = field_options[opt];\n                }\n            }\n        }\n    }\n\n    // Construct an ordered list of field names\n    var field_names = [];\n\n    for (var name in displayed_fields) {\n\n        field_names.push(name);\n\n        // Field not specified in the API, but the client wishes to add it!\n        if (!(name in fields)) {\n            fields[name] = displayed_fields[name];\n        }\n    }\n\n    // Push the ordered field names into the options,\n    // allowing successive functions to access them.\n    options.field_names = field_names;\n\n    // Render selected fields\n\n    for (var idx = 0; idx < field_names.length; idx++) {\n\n        var field_name = field_names[idx];\n\n        var field = fields[field_name];\n\n        switch (field.type) {\n        // Skip field types which are simply not supported\n        case 'nested object':\n            continue;\n        default:\n            break;\n        }\n\n        html += constructField(field_name, field, options);\n    }\n\n    if (options.current_group) {\n        // Close out the current group\n        html += `</div></div>`;\n    }\n\n    // Create a new modal if one does not exists\n    if (!options.modal) {\n        options.modal = createNewModal(options);\n    }\n\n    var modal = options.modal;\n\n    modalEnable(modal, true);\n\n    // Insert generated form content\n    $(modal).find('#form-content').html(html);\n\n    if (options.preFormContent) {\n\n        if (typeof(options.preFormContent) === 'function') {\n            var content = options.preFormContent(options);\n        } else {\n            var content = options.preFormContent;\n        }\n\n        $(modal).find('#pre-form-content').html(content);\n    }\n\n    if (options.postFormContent) {\n        $(modal).find('#post-form-content').html(options.postFormContent);\n    }\n\n    // Clear any existing buttons from the modal\n    $(modal).find('#modal-footer-buttons').html('');\n\n    // Insert \"confirm\" button (if required)\n    if (options.confirm) {\n        insertConfirmButton(options);\n    }\n\n    // Insert \"persist\" button (if required)\n    if (options.persist) {\n        insertPersistButton(options);\n    }\n\n    // Insert secondary buttons (if required)\n    if (options.buttons) {\n        insertSecondaryButtons(options);\n    }\n\n    // Display the modal\n    $(modal).modal('show');\n\n    updateFieldValues(fields, options);\n\n    // Setup related fields\n    initializeRelatedFields(fields, options);\n\n    // Attach edit callbacks (if required)\n    addFieldCallbacks(fields, options);\n\n    // Attach clear callbacks (if required)\n    addClearCallbacks(fields, options);\n\n    modalShowSubmitButton(modal, true);\n\n    $(modal).on('click', '#modal-form-submit', function() {\n\n        // Immediately disable the \"submit\" button,\n        // to prevent the form being submitted multiple times!\n        $(options.modal).find('#modal-form-submit').prop('disabled', true);\n\n        // Run custom code before normal form submission\n        if (options.beforeSubmit) {\n            options.beforeSubmit(fields, options);\n        }\n\n        // Run custom code instead of normal form submission\n        if (options.onSubmit) {\n            options.onSubmit(fields, options);\n        } else {\n            submitFormData(fields, options);\n        }\n    });\n\n    initializeGroups(fields, options);\n\n    if (options.afterRender) {\n        // Custom callback function after form rendering\n        options.afterRender(fields, options);\n    }\n\n    // Scroll to the top\n    $(options.modal).find('.modal-form-content-wrapper').scrollTop(0);\n}\n\n\n// Add a \"confirm\" checkbox to the modal\n// The \"submit\" button will be disabled unless \"confirm\" is checked\nfunction insertConfirmButton(options) {\n\n    var message = options.confirmMessage || '{% trans \"Confirm\" %}';\n\n    var html = `\n    <div class=\"form-check form-switch\">\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"modal-confirm\">\n        <label class=\"form-check-label\" for=\"modal-confirm\">${message}</label>\n    </div>\n    `;\n\n    $(options.modal).find('#modal-footer-buttons').append(html);\n\n    // Disable the 'submit' button\n    $(options.modal).find('#modal-form-submit').prop('disabled', true);\n\n    // Trigger event\n    $(options.modal).find('#modal-confirm').change(function() {\n        var enabled = this.checked;\n\n        $(options.modal).find('#modal-form-submit').prop('disabled', !enabled);\n    });\n}\n\n\n/* Add a checkbox to select if the modal will stay open after success */\nfunction insertPersistButton(options) {\n\n    var message = options.persistMessage || '{% trans \"Keep this form open\" %}';\n\n    var html = `\n    <div class=\"form-check form-switch\">\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"modal-persist\">\n        <label class=\"form-check-label\" for=\"modal-persist\">${message}</label>\n    </div>\n    `;\n\n    $(options.modal).find('#modal-footer-buttons').append(html);\n}\n\n/*\n * Add secondary buttons to the left of the close and submit buttons\n * with callback functions\n */\nfunction insertSecondaryButtons(options) {\n    for (var idx = 0; idx < options.buttons.length; idx++) {\n\n        var html = `\n        <button type=\"button\" class=\"btn btn-outline-secondary\" id=\"modal-form-${options.buttons[idx].name}\">\n            ${options.buttons[idx].title}\n        </button>\n        `;\n\n        $(options.modal).find('#modal-footer-secondary-buttons').append(html);\n\n        if (options.buttons[idx].onClick instanceof Function) {\n            // Copy callback reference to prevent errors if `idx` changes value before execution\n            var onclick_callback = options.buttons[idx].onClick;\n\n            $(options.modal).find(`#modal-form-${options.buttons[idx].name}`).click(function() {\n                onclick_callback(options);\n            });\n        }\n    }\n}\n\n/*\n * Extract all specified form values as a single object\n */\nfunction extractFormData(fields, options) {\n\n    var data = {};\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name] || null;\n\n        if (!field) continue;\n\n        if (field.type == 'candy') continue;\n\n        data[name] = getFormFieldValue(name, field, options);\n    }\n\n    return data;\n}\n\n\n/*\n * Submit form data to the server.\n *\n */\nfunction submitFormData(fields, options) {\n\n    // Form data to be uploaded to the server\n    // Only used if file / image upload is required\n    var form_data = new FormData();\n\n    var data = {};\n\n    var has_files = false;\n\n    var data_valid = true;\n\n    var data_errors = {};\n\n    // Extract values for each field\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name] || null;\n\n        // Ignore visual fields\n        if (field && field.type == 'candy') continue;\n\n        if (field) {\n\n            switch (field.type) {\n            // Ensure numerical fields are \"valid\"\n            case 'integer':\n            case 'float':\n            case 'decimal':\n                if (!validateFormField(name, options)) {\n                    data_valid = false;\n\n                    data_errors[name] = ['{% trans \"Enter a valid number\" %}'];\n                }\n                break;\n            default:\n                break;\n            }\n\n            var value = getFormFieldValue(name, field, options);\n\n            // Handle file inputs\n            if (field.type == 'image upload' || field.type == 'file upload') {\n\n                var field_el = $(options.modal).find(`#id_${name}`)[0];\n\n                var field_files = field_el.files;\n\n                if (field_files.length > 0) {\n                    // One file per field, please!\n                    var file = field_files[0];\n\n                    form_data.append(name, file);\n\n                    has_files = true;\n                }\n            } else {\n\n                // Normal field (not a file or image)\n                form_data.append(name, value);\n\n                data[name] = value;\n            }\n        } else {\n            console.warn(`Could not find field matching '${name}'`);\n        }\n    }\n\n    if (!data_valid) {\n        handleFormErrors(data_errors, fields, options);\n        return;\n    }\n\n    var upload_func = inventreePut;\n\n    if (has_files) {\n        upload_func = inventreeFormDataUpload;\n        data = form_data;\n    }\n\n    // Optionally pre-process the data before uploading to the server\n    if (options.processBeforeUpload) {\n        data = options.processBeforeUpload(data);\n    }\n\n    // Show the progress spinner\n    $(options.modal).find('#modal-progress-spinner').show();\n\n    // Submit data\n    upload_func(\n        options.url,\n        data,\n        {\n            method: options.method,\n            success: function(response) {\n                $(options.modal).find('#modal-progress-spinner').hide();\n                handleFormSuccess(response, options);\n            },\n            error: function(xhr) {\n\n                $(options.modal).find('#modal-progress-spinner').hide();\n\n                switch (xhr.status) {\n                case 400:\n                    handleFormErrors(xhr.responseJSON, fields, options);\n                    break;\n                default:\n                    $(options.modal).modal('hide');\n\n                    console.error(`Upload error at ${options.url}`);\n                    showApiError(xhr, options.url);\n                    break;\n                }\n            }\n        }\n    );\n}\n\n\n/*\n * Update (set) the field values based on the specified data.\n *\n * Iterate through each of the displayed fields,\n * and set the 'val' attribute of each one.\n *\n */\nfunction updateFieldValues(fields, options) {\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name] || null;\n\n        if (field == null) {\n            continue;\n        }\n\n        var value = field.value;\n\n        if (value == null) {\n            value = field.default;\n        }\n\n        if (value == null) {\n            continue;\n        }\n\n        updateFieldValue(name, value, field, options);\n    }\n}\n\n/*\n * Update the value of a named field\n */\nfunction updateFieldValue(name, value, field, options) {\n\n    var el = getFormFieldElement(name, options);\n\n    if (!el) {\n        console.warn(`updateFieldValue could not find field '${name}'`);\n        return;\n    }\n\n    switch (field.type) {\n    case 'boolean':\n        if (value == true || value.toString().toLowerCase() == 'true') {\n            el.prop('checked');\n        }\n        break;\n    case 'related field':\n        // Clear?\n        if (value == null && !field.required) {\n            el.val(null).trigger('change');\n        }\n        // TODO - Specify an actual value!\n        break;\n    case 'file upload':\n    case 'image upload':\n        break;\n    default:\n        el.val(value);\n        break;\n    }\n}\n\n\n// Find the named field element in the modal DOM\nfunction getFormFieldElement(name, options) {\n\n    var field_name = getFieldName(name, options);\n\n    var el = null;\n\n    if (options && options.modal) {\n        // Field element is associated with a model?\n        el = $(options.modal).find(`#id_${field_name}`);\n    } else {\n        // Field element is top-level\n        el = $(`#id_${field_name}`);\n    }\n\n    if (!el.exists()) {\n        console.error(`Could not find form element for field '${name}'`);\n    }\n\n    return el;\n}\n\n\n/*\n * Check that a \"numerical\" input field has a valid number in it.\n * An invalid number is expunged at the client side by the getFormFieldValue() function,\n * which means that an empty string '' is sent to the server if the number is not valud.\n * This can result in confusing error messages displayed under the form field.\n *\n * So, we can invalid numbers and display errors *before* the form is submitted!\n */\nfunction validateFormField(name, options) {\n\n    if (getFormFieldElement(name, options)) {\n\n        var el = document.getElementById(`id_${name}`);\n\n        if (el.validity.valueMissing) {\n            // Accept empty strings (server will validate)\n            return true;\n        } else {\n            return el.validity.valid;\n        }\n    } else {\n        return false;\n    }\n\n}\n\n\n/*\n * Extract and field value before sending back to the server\n *\n * arguments:\n * - name: The name of the field\n * - field: The field specification provided from the OPTIONS request\n * - options: The original options object provided by the client\n */\nfunction getFormFieldValue(name, field={}, options={}) {\n\n    // Find the HTML element\n    var el = getFormFieldElement(name, options);\n\n    if (!el.exists()) {\n        console.error(`getFormFieldValue could not locate field '${name}'`);\n        return null;\n    }\n\n    var value = null;\n\n    switch (field.type) {\n    case 'boolean':\n        value = el.is(':checked');\n        break;\n    case 'date':\n    case 'datetime':\n        value = el.val();\n\n        // Ensure empty values are sent as nulls\n        if (!value || value.length == 0) {\n            value = null;\n        }\n        break;\n    default:\n        value = el.val();\n        break;\n    }\n\n    return value;\n}\n\n\n/*\n * Handle successful form posting\n *\n * arguments:\n * - response: The JSON response object from the server\n * - options: The original options object provided by the client\n */\nfunction handleFormSuccess(response, options) {\n\n    // Display any required messages\n    // Should we show alerts immediately or cache them?\n    var cache = (options.follow && response.url) || options.redirect || options.reload;\n\n    // Should the form \"persist\"?\n    var persist = false;\n\n    if (options.persist && options.modal) {\n        // Determine if this form should \"persist\", or be dismissed?\n        var chk = $(options.modal).find('#modal-persist');\n\n        persist = chk.exists() && chk.prop('checked');\n    }\n\n    if (persist) {\n        cache = false;\n    }\n\n    var msg_target = null;\n\n    if (persist) {\n        // If the modal is persistant, the target for any messages should be the modal!\n        msg_target = $(options.modal).find('#pre-form-content');\n    }\n\n    // Display any messages\n    if (response && (response.success || options.successMessage)) {\n        showAlertOrCache(\n            response.success || options.successMessage,\n            cache,\n            {\n                style: 'success',\n                target: msg_target,\n            });\n    }\n\n    if (response && response.info) {\n        showAlertOrCache(response.info, cache, {style: 'info'});\n    }\n\n    if (response && response.warning) {\n        showAlertOrCache(response.warning, cache, {style: 'warning'});\n    }\n\n    if (response && response.danger) {\n        showAlertOrCache(response.danger, cache, {style: 'danger'});\n    }\n\n    if (persist) {\n        // Instead of closing the form and going somewhere else,\n        // reload (empty) the form so the user can input more data\n\n        // Reset the status of the \"submit\" button\n        if (options.modal) {\n            $(options.modal).find('#modal-form-submit').prop('disabled', false);\n        }\n\n        // Remove any error flags from the form\n        clearFormErrors(options);\n\n    } else {\n\n        // Close the modal\n        if (!options.preventClose) {\n            // Note: The modal will be deleted automatically after closing\n            $(options.modal).modal('hide');\n        }\n\n        if (options.onSuccess) {\n            // Callback function\n            options.onSuccess(response, options);\n        }\n\n        if (options.follow && response.url) {\n            // Follow the returned URL\n            window.location.href = response.url;\n        } else if (options.reload) {\n            // Reload the current page\n            location.reload();\n        } else if (options.redirect) {\n            // Redirect to a specified URL\n            window.location.href = options.redirect;\n        }\n    }\n}\n\n\n\n/*\n * Remove all error text items from the form\n */\nfunction clearFormErrors(options={}) {\n\n    if (options && options.modal) {\n        // Remove the individual error messages\n        $(options.modal).find('.form-error-message').remove();\n\n        $(options.modal).find('.modal-content').removeClass('modal-error');\n\n        // Remove the \"has error\" class\n        $(options.modal).find('.form-field-error').removeClass('form-field-error');\n\n        // Hide the 'non field errors'\n        $(options.modal).find('#non-field-errors').html('');\n    } else {\n        $('.form-error-message').remove();\n        $('.form-field-errors').removeClass('form-field-error');\n        $('#non-field-errors').html('');\n    }\n}\n\n/*\n * Display form error messages as returned from the server,\n * specifically for errors returned in an array.\n *\n * We need to know the unique ID of each item in the array,\n * and the array length must equal the length of the array returned from the server\n *\n * arguments:\n * - response: The JSON error response from the server\n * - parent: The name of the parent field e.g. \"items\"\n * - options: The global options struct\n *\n * options:\n * - nested: A map of nested ID values for the \"parent\" field\n *           e.g.\n *           {\n *               \"items\": [\n *                  1,\n *                  2,\n *                  12\n *               ]\n *           }\n *\n */\n\nfunction handleNestedErrors(errors, field_name, options={}) {\n\n    var error_list = errors[field_name];\n\n    // Ignore null or empty list\n    if (!error_list) {\n        return;\n    }\n\n    var nest_list = nest_list = options['nested'][field_name];\n\n    // Nest list must be provided!\n    if (!nest_list) {\n        console.warn(`handleNestedErrors missing nesting options for field '${fieldName}'`);\n        return;\n    }\n\n    for (var idx = 0; idx < error_list.length; idx++) {\n\n        var error_item = error_list[idx];\n\n        if (idx >= nest_list.length) {\n            console.warn(`handleNestedErrors returned greater number of errors (${error_list.length}) than could be handled (${nest_list.length})`);\n            break;\n        }\n\n        // Extract the particular ID of the nested item\n        var nest_id = nest_list[idx];\n\n        // Here, error_item is a map of field names to error messages\n        for (sub_field_name in error_item) {\n\n            var errors = error_item[sub_field_name];\n\n            if (sub_field_name == 'non_field_errors') {\n\n                var row = null;\n\n                if (options.modal) {\n                    row = $(options.modal).find(`#items_${nest_id}`);\n                } else {\n                    row = $(`#items_${nest_id}`);\n                }\n\n                for (var ii = errors.length - 1; ii >= 0; ii--) {\n\n                    var html = `\n                    <div id='error_${ii}_non_field_error' class='help-block form-field-error form-error-message'>\n                        <strong>${errors[ii]}</strong>\n                    </div>`;\n\n                    row.after(html);\n                }\n\n            }\n\n            // Find the target (nested) field\n            var target = `${field_name}_${sub_field_name}_${nest_id}`;\n\n            for (var ii = errors.length-1; ii >= 0; ii--) {\n\n                var error_text = errors[ii];\n\n                addFieldErrorMessage(target, error_text, ii, options);\n            }\n        }\n    }\n}\n\n\n\n/*\n * Display form error messages as returned from the server.\n *\n * arguments:\n * - errors: The JSON error response from the server\n * - fields: The form data object\n * - options: Form options provided by the client\n */\nfunction handleFormErrors(errors, fields={}, options={}) {\n\n    // Reset the status of the \"submit\" button\n    if (options.modal) {\n        $(options.modal).find('#modal-form-submit').prop('disabled', false);\n    }\n\n    // Remove any existing error messages from the form\n    clearFormErrors(options);\n\n    var non_field_errors = null;\n\n    if (options.modal) {\n        non_field_errors = $(options.modal).find('#non-field-errors');\n    } else {\n        non_field_errors = $('#non-field-errors');\n    }\n\n    // TODO: Display the JSON error text when hovering over the \"info\" icon\n    non_field_errors.append(\n        `<div class='alert alert-block alert-danger'>\n            <b>{% trans \"Form errors exist\" %}</b>\n            <span id='form-errors-info' class='float-right fas fa-info-circle icon-red'>\n            </span>\n        </div>`\n    );\n\n    // Non-field errors?\n    if ('non_field_errors' in errors) {\n\n        var nfe = errors.non_field_errors;\n\n        for (var idx = 0; idx < nfe.length; idx++) {\n            var err = nfe[idx];\n\n            var html = `\n            <div class='alert alert-block alert-danger'>\n                ${err}\n            </div>`;\n\n            non_field_errors.append(html);\n        }\n    }\n\n    var first_error_field = null;\n\n    for (var field_name in errors) {\n\n        var field = fields[field_name] || {};\n\n        if ((field.type == 'field') && ('child' in field)) {\n            // This is a \"nested\" field\n            handleNestedErrors(errors, field_name, options);\n        } else {\n            // This is a \"simple\" field\n\n            var field_errors = errors[field_name];\n\n            if (field_errors && !first_error_field && isFieldVisible(field_name, options)) {\n                first_error_field = field_name;\n            }\n\n            // Add an entry for each returned error message\n            for (var ii = field_errors.length-1; ii >= 0; ii--) {\n\n                var error_text = field_errors[ii];\n\n                addFieldErrorMessage(field_name, error_text, ii, options);\n            }\n        }\n    }\n\n    if (first_error_field) {\n        // Ensure that the field in question is visible\n        document.querySelector(`#div_id_${field_name}`).scrollIntoView({\n            behavior: 'smooth',\n        });\n    } else {\n        // Scroll to the top of the form\n        $(options.modal).find('.modal-form-content-wrapper').scrollTop(0);\n    }\n\n    $(options.modal).find('.modal-content').addClass('modal-error');\n}\n\n\n/*\n * Add a rendered error message to the provided field\n */\nfunction addFieldErrorMessage(name, error_text, error_idx=0, options={}) {\n\n    field_name = getFieldName(name, options);\n\n    var field_dom = null;\n\n    if (options && options.modal) {\n        $(options.modal).find(`#div_id_${field_name}`).addClass('form-field-error');\n        field_dom = $(options.modal).find(`#errors-${field_name}`);\n    } else {\n        $(`#div_id_${field_name}`).addClass('form-field-error');\n        field_dom = $(`#errors-${field_name}`);\n    }\n\n    if (field_dom.exists()) {\n\n        var error_html = `\n        <span id='error_${error_idx}_id_${field_name}' class='help-block form-error-message'>\n            <strong>${error_text}</strong>\n        </span>`;\n\n        field_dom.append(error_html);\n    } else {\n        console.warn(`addFieldErrorMessage could not locate field '${field_name}'`);\n    }\n}\n\n\nfunction isFieldVisible(field, options) {\n\n    return $(options.modal).find(`#div_id_${field}`).is(':visible');\n}\n\n\n/*\n * Attach callbacks to specified fields,\n * triggered after the field value is edited.\n *\n * Callback function is called with arguments (name, field, options)\n */\nfunction addFieldCallbacks(fields, options) {\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name];\n\n        if (!field || !field.onEdit) continue;\n\n        addFieldCallback(name, field, options);\n    }\n}\n\n\nfunction addFieldCallback(name, field, options) {\n\n    var el = getFormFieldElement(name, options);\n\n    el.change(function() {\n\n        var value = getFormFieldValue(name, field, options);\n\n        field.onEdit(value, name, field, options);\n    });\n}\n\n\nfunction addClearCallbacks(fields, options) {\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name];\n\n        if (!field || field.required) continue;\n\n        addClearCallback(name, field, options);\n    }\n}\n\n\nfunction addClearCallback(name, field, options={}) {\n\n    var field_name = getFieldName(name, options);\n\n    var el = null;\n\n    if (options && options.modal) {\n        el = $(options.modal).find(`#clear_${field_name}`);\n    } else {\n        el = $(`#clear_${field_name}`);\n    }\n\n    if (!el) {\n        console.warn(`addClearCallback could not find field '${name}'`);\n        return;\n    }\n\n    el.click(function() {\n        updateFieldValue(name, null, field, options);\n    });\n}\n\n\n// Initialize callbacks and initial states for groups\nfunction initializeGroups(fields, options) {\n\n    var modal = options.modal;\n\n    // Callback for when the group is expanded\n    $(modal).find('.form-panel-content').on('show.bs.collapse', function() {\n\n        var panel = $(this).closest('.form-panel');\n        var group = panel.attr('group');\n\n        var icon = $(modal).find(`#group-icon-${group}`);\n\n        icon.removeClass('fa-angle-right');\n        icon.addClass('fa-angle-up');\n    });\n\n    // Callback for when the group is collapsed\n    $(modal).find('.form-panel-content').on('hide.bs.collapse', function() {\n\n        var panel = $(this).closest('.form-panel');\n        var group = panel.attr('group');\n\n        var icon = $(modal).find(`#group-icon-${group}`);\n\n        icon.removeClass('fa-angle-up');\n        icon.addClass('fa-angle-right');\n    });\n\n    // Set initial state of each specified group\n    for (var group in options.groups) {\n\n        var group_options = options.groups[group];\n\n        if (group_options.collapsed) {\n            $(modal).find(`#form-panel-content-${group}`).collapse('hide');\n        } else {\n            $(modal).find(`#form-panel-content-${group}`).collapse('show');\n        }\n\n        if (group_options.hidden) {\n            hideFormGroup(group, options);\n        }\n    }\n}\n\n// Set the placeholder value for a field\nfunction setFormInputPlaceholder(name, placeholder, options) {\n    $(options.modal).find(`#id_${name}`).attr('placeholder', placeholder);\n}\n\n// Clear a form input\nfunction clearFormInput(name, options) {\n    updateFieldValue(name, null, {}, options);\n}\n\n// Disable a form input\nfunction disableFormInput(name, options) {\n    $(options.modal).find(`#id_${name}`).prop('disabled', true);\n}\n\n\n// Enable a form input\nfunction enableFormInput(name, options) {\n    $(options.modal).find(`#id_${name}`).prop('disabled', false);\n}\n\n\n// Hide a form input\nfunction hideFormInput(name, options) {\n    $(options.modal).find(`#div_id_${name}`).hide();\n}\n\n\n// Show a form input\nfunction showFormInput(name, options) {\n    $(options.modal).find(`#div_id_${name}`).show();\n}\n\n\n// Hide a form group\nfunction hideFormGroup(group, options) {\n    $(options.modal).find(`#form-panel-${group}`).hide();\n}\n\n\n// Show a form group\nfunction showFormGroup(group, options) {\n    $(options.modal).find(`#form-panel-${group}`).show();\n}\n\n\nfunction setFormGroupVisibility(group, vis, options) {\n    if (vis) {\n        showFormGroup(group, options);\n    } else {\n        hideFormGroup(group, options);\n    }\n}\n\n\nfunction initializeRelatedFields(fields, options={}) {\n\n    var field_names = options.field_names;\n\n    for (var idx = 0; idx < field_names.length; idx++) {\n\n        var name = field_names[idx];\n\n        var field = fields[name] || null;\n\n        if (!field || field.hidden) continue;\n\n        switch (field.type) {\n        case 'related field':\n            initializeRelatedField(field, fields, options);\n            break;\n        case 'choice':\n            initializeChoiceField(field, fields, options);\n            break;\n        default:\n            break;\n        }\n    }\n}\n\n\n/*\n * Add a button to launch a secondary modal, to create a new modal instance.\n *\n * arguments:\n * - name: The name of the field\n * - field: The field data object\n * - options: The options object provided by the client\n */\nfunction addSecondaryModal(field, fields, options) {\n\n    var field_name = getFieldName(field.name, options);\n\n    var depth = options.depth || 0;\n\n    var html = `\n    <span style='float: right;'>\n        <div type='button' class='btn btn-primary btn-secondary btn-form-secondary' title='${field.secondary.title || field.secondary.label}' id='btn-new-${field_name}'>\n            ${field.secondary.label || field.secondary.title}\n        </div>\n    </span>`;\n\n    $(options.modal).find(`label[for=\"id_${field_name}\"]`).append(html);\n\n    // Callback function when the secondary button is pressed\n    $(options.modal).find(`#btn-new-${field_name}`).click(function() {\n\n        var secondary = field.secondary;\n\n        // Determine the API query URL\n        var url = secondary.api_url || field.api_url;\n\n        // If the \"fields\" attribute is a function, call it with data\n        if (secondary.fields instanceof Function || secondary.fieldsFunction instanceof Function) {\n\n            // Extract form values at time of button press\n            var data = extractFormData(fields, options);\n\n            // Backup and execute fields function in sequential executions of modal\n            if (secondary.fields instanceof Function) {\n                secondary.fieldsFunction = secondary.fields;\n            } else if (secondary.fieldsFunction instanceof Function) {\n                secondary.fields = secondary.fieldsFunction;\n            }\n\n            secondary.fields = secondary.fields(data);\n        }\n\n        // If no onSuccess function is defined, provide a default one\n        if (!secondary.onSuccess) {\n            secondary.onSuccess = function(data) {\n\n                // Force refresh from the API, to get full detail\n                inventreeGet(`${url}${data.pk}/`, {}, {\n                    success: function(responseData) {\n                        setRelatedFieldData(field.name, responseData, options);\n                    }\n                });\n            };\n        }\n\n        // Relinquish keyboard focus for this modal\n        $(options.modal).modal({\n            keyboard: false,\n        });\n\n        // Method should be \"POST\" for creation\n        secondary.method = secondary.method || 'POST';\n\n        secondary.modal = null;\n\n        secondary.depth = depth + 1;\n\n        constructForm(\n            url,\n            secondary\n        );\n    });\n}\n\n\n/*\n * Initialize a single related-field\n *\n * argument:\n * - modal: DOM identifier for the modal window\n * - name: name of the field e.g. 'location'\n * - field: Field definition from the OPTIONS request\n * - options: Original options object provided by the client\n */\nfunction initializeRelatedField(field, fields, options={}) {\n\n    var name = field.name;\n\n    if (!field.api_url) {\n        console.warn(`Related field '${name}' missing 'api_url' parameter.`);\n        return;\n    }\n\n    // Find the select element and attach a select2 to it\n    var select = getFormFieldElement(name, options);\n\n    // Add a button to launch a 'secondary' modal\n    if (field.secondary != null) {\n        addSecondaryModal(field, fields, options);\n    }\n\n    // TODO: Add 'placeholder' support for entry select2 fields\n\n    // limit size for AJAX requests\n    var pageSize = options.pageSize || 25;\n\n    var parent = null;\n    var auto_width = false;\n    var width = '100%';\n\n    // Special considerations if the select2 input is a child of a modal\n    if (options && options.modal) {\n        parent = $(options.modal);\n        auto_width = true;\n        width = null;\n    }\n\n    select.select2({\n        placeholder: '',\n        dropdownParent: parent,\n        dropdownAutoWidth: auto_width,\n        width: width,\n        language: {\n            noResults: function(query) {\n                if (field.noResults) {\n                    return field.noResults(query);\n                } else {\n                    return '{% trans \"No results found\" %}';\n                }\n            }\n        },\n        ajax: {\n            url: field.api_url,\n            dataType: 'json',\n            delay: 250,\n            cache: true,\n            data: function(params) {\n\n                var offset = 0;\n\n                if (!params.page) {\n                    offset = 0;\n                } else {\n                    offset = (params.page - 1) * pageSize;\n                }\n\n                // Custom query filters can be specified against each field\n                var query = field.filters || {};\n\n                // Add search and pagination options\n                query.search = params.term;\n                query.offset = offset;\n                query.limit = pageSize;\n\n                // Allow custom run-time filter augmentation\n                if ('adjustFilters' in field) {\n                    query = field.adjustFilters(query, options);\n                }\n\n                return query;\n            },\n            processResults: function(response) {\n                // Convert the returned InvenTree data into select2-friendly format\n\n                var data = [];\n\n                var more = false;\n\n                if ('count' in response && 'results' in response) {\n                    // Response is paginated\n                    data = response.results;\n\n                    // Any more data available?\n                    if (response.next) {\n                        more = true;\n                    }\n\n                } else {\n                    // Non-paginated response\n                    data = response;\n                }\n\n                // Each 'row' must have the 'id' attribute\n                for (var idx = 0; idx < data.length; idx++) {\n                    data[idx].id = data[idx].pk;\n                }\n\n                // Ref: https://select2.org/data-sources/formats\n                var results = {\n                    results: data,\n                    pagination: {\n                        more: more,\n                    }\n                };\n\n                return results;\n            },\n        },\n        templateResult: function(item) {\n\n            // Extract 'instance' data passed through from an initial value\n            // Or, use the raw 'item' data as a backup\n            var data = item;\n\n            if (item.element && item.element.instance) {\n                data = item.element.instance;\n            }\n\n            if (!data.pk) {\n                return $(searching());\n            }\n\n            // Custom formatting for the search results\n            if (field.model) {\n                // If the 'model' is specified, hand it off to the custom model render\n                var html = renderModelData(name, field.model, data, field, options);\n                return $(html);\n            } else {\n                // Return a simple renderering\n                console.warn(`templateResult() missing 'field.model' for '${name}'`);\n                return `${name} - ${item.id}`;\n            }\n        },\n        templateSelection: function(item) {\n\n            // Extract 'instance' data passed through from an initial value\n            // Or, use the raw 'item' data as a backup\n            var data = item;\n\n            if (item.element && item.element.instance) {\n                data = item.element.instance;\n            }\n\n            // Run optional callback function\n            if (field.onSelect && data) {\n                field.onSelect(data, field, options);\n            }\n\n            if (!data.pk) {\n                return field.placeholder || '';\n            }\n\n            // Custom formatting for selected item\n            if (field.model) {\n                // If the 'model' is specified, hand it off to the custom model render\n                var html = renderModelData(name, field.model, data, field, options);\n                return $(html);\n            } else {\n                // Return a simple renderering\n                console.warn(`templateSelection() missing 'field.model' for '${name}'`);\n                return `${name} - ${item.id}`;\n            }\n        }\n    });\n\n    // If a 'value' is already defined, grab the model info from the server\n    if (field.value) {\n\n        var pk = field.value;\n        var url = `${field.api_url}/${pk}/`.replace('//', '/');\n\n        inventreeGet(url, field.filters || {}, {\n            success: function(data) {\n                setRelatedFieldData(name, data, options);\n            }\n        });\n    } else if (field.auto_fill) {\n        // Attempt to auto-fill the field\n\n        var filters = {};\n\n        // Update with nominal field fields\n        Object.assign(filters, field.filters || {});\n\n        // Update with filters only used for initial filtering\n        Object.assign(filters, field.auto_fill_filters || {});\n\n        // Enforce pagination, limit to a single return (for fast query)\n        filters.limit = 1;\n        filters.offset = 0;\n\n        inventreeGet(field.api_url, filters || {}, {\n            success: function(data) {\n\n                // Only a single result is available, given the provided filters\n                if (data.count == 1) {\n                    setRelatedFieldData(name, data.results[0], options);\n\n                    // Run \"callback\" function (if supplied)\n                    if (field.onEdit) {\n                        field.onEdit(data.results[0], name, field, options);\n                    }\n                }\n            }\n        });\n    }\n}\n\n\n/*\n * Set the value of a select2 instace for a \"related field\",\n * e.g. with data returned from a secondary modal\n *\n * arguments:\n * - name: The name of the field\n * - data: JSON data representing the model instance\n * - options: The modal form specifications\n */\nfunction setRelatedFieldData(name, data, options={}) {\n\n    var select = getFormFieldElement(name, options);\n\n    var option = new Option(name, data.pk, true, true);\n\n    // Assign the JSON data to the 'instance' attribute,\n    // so we can access and render it later\n    option.instance = data;\n\n    select.append(option).trigger('change');\n\n    select.trigger({\n        type: 'select2:select',\n        params: {\n            data: data\n        }\n    });\n}\n\n\nfunction initializeChoiceField(field, fields, options) {\n\n    var select = getFormFieldElement(field.name, options);\n\n    select.select2({\n        dropdownAutoWidth: false,\n        dropdownParent: $(options.modal),\n    });\n}\n\n\n// Render a 'no results' element\nfunction searching() {\n    return `<span>{% trans \"Searching\" %}...</span>`;\n}\n\n/*\n * Render a \"foreign key\" model reference in a select2 instance.\n * Allows custom rendering with access to the entire serialized object.\n *\n * arguments:\n * - name: The name of the field e.g. 'location'\n * - model: The name of the InvenTree model e.g. 'stockitem'\n * - data: The JSON data representation of the modal instance (GET request)\n * - parameters: The field definition (OPTIONS) request\n * - options: Other options provided at time of modal creation by the client\n */\nfunction renderModelData(name, model, data, parameters, options) {\n\n    if (!data) {\n        return parameters.placeholder || '';\n    }\n\n    // TODO: Implement this function for various models\n\n    var html = null;\n\n    var renderer = null;\n\n    // Find a custom renderer\n    switch (model) {\n    case 'company':\n        renderer = renderCompany;\n        break;\n    case 'stockitem':\n        renderer = renderStockItem;\n        break;\n    case 'stocklocation':\n        renderer = renderStockLocation;\n        break;\n    case 'part':\n        renderer = renderPart;\n        break;\n    case 'partcategory':\n        renderer = renderPartCategory;\n        break;\n    case 'partparametertemplate':\n        renderer = renderPartParameterTemplate;\n        break;\n    case 'purchaseorder':\n        renderer = renderPurchaseOrder;\n        break;\n    case 'salesorder':\n        renderer = renderSalesOrder;\n        break;\n    case 'salesordershipment':\n        renderer = renderSalesOrderShipment;\n        break;\n    case 'manufacturerpart':\n        renderer = renderManufacturerPart;\n        break;\n    case 'supplierpart':\n        renderer = renderSupplierPart;\n        break;\n    case 'build':\n        renderer = renderBuild;\n        break;\n    case 'owner':\n        renderer = renderOwner;\n        break;\n    case 'user':\n        renderer = renderUser;\n        break;\n    default:\n        break;\n    }\n\n    if (renderer != null) {\n        html = renderer(name, data, parameters, options);\n    }\n\n    if (html != null) {\n        return html;\n    } else {\n        console.error(`Rendering not implemented for model '${model}'`);\n        // Simple text rendering\n        return `${model} - ID ${data.id}`;\n    }\n}\n\n\n/*\n * Construct a field name for the given field\n */\nfunction getFieldName(name, options={}) {\n    var field_name = name;\n\n    if (options.field_suffix) {\n        field_name += options.field_suffix;\n    }\n\n    if (options && options.depth) {\n        field_name += `_${options.depth}`;\n    }\n\n    return field_name;\n}\n\n\n/*\n * Construct a single form 'field' for rendering in a form.\n *\n * arguments:\n * - name: The 'name' of the field\n * - parameters: The field parameters supplied by the DRF OPTIONS method\n *\n * options:\n * -\n *\n * The function constructs a fieldset which mostly replicates django \"crispy\" forms:\n *\n * - Field name\n * - Field <input> (depends on specified field type)\n * - Field description (help text)\n * - Field errors\n */\nfunction constructField(name, parameters, options={}) {\n\n    var html = '';\n\n    // Shortcut for simple visual fields\n    if (parameters.type == 'candy') {\n        return constructCandyInput(name, parameters, options);\n    }\n\n    var field_name = getFieldName(name, options);\n\n    // Hidden inputs are rendered without label / help text / etc\n    if (parameters.hidden) {\n        return constructHiddenInput(field_name, parameters, options);\n    }\n\n    // Are we ending a group?\n    if (options.current_group && parameters.group != options.current_group) {\n        html += `</div></div>`;\n\n        // Null out the current \"group\" so we can start a new one\n        options.current_group = null;\n    }\n\n    // Are we starting a new group?\n    if (parameters.group) {\n\n        var group = parameters.group;\n\n        var group_id = getFieldName(group, options);\n\n        var group_options = options.groups[group] || {};\n\n        // Are we starting a new group?\n        // Add HTML for the start of a separate panel\n        if (parameters.group != options.current_group) {\n\n            html += `\n            <div class='panel form-panel' id='form-panel-${group_id}' group='${group}'>\n                <div class='panel-heading form-panel-heading' id='form-panel-heading-${group_id}'>`;\n            if (group_options.collapsible) {\n                html += `\n                <div data-bs-toggle='collapse' data-bs-target='#form-panel-content-${group_id}'>\n                    <a href='#'><span id='group-icon-${group_id}' class='fas fa-angle-up'></span>\n                `;\n            } else {\n                html += `<div>`;\n            }\n\n            html += `<h4 style='display: inline;'>${group_options.title || group}</h4>`;\n\n            if (group_options.collapsible) {\n                html += `</a>`;\n            }\n\n            html += `\n                </div></div>\n                <div class='panel-content form-panel-content' id='form-panel-content-${group_id}'>\n            `;\n        }\n\n        // Keep track of the group we are in\n        options.current_group = group;\n    }\n\n    var form_classes = options.form_classes || 'form-group';\n\n    if (parameters.errors) {\n        form_classes += ' form-field-error';\n    }\n\n    // Optional content to render before the field\n    if (parameters.before) {\n        html += parameters.before;\n    }\n\n    var hover_title = '';\n\n    if (parameters.help_text) {\n        hover_title = ` title='${parameters.help_text}'`;\n    }\n\n    html += `<div id='div_id_${field_name}' class='${form_classes}' ${hover_title}>`;\n\n    // Add a label\n    if (!options.hideLabels) {\n        html += constructLabel(name, parameters);\n    }\n\n    html += `<div class='controls'>`;\n\n    // Does this input deserve \"extra\" decorators?\n    var extra = (parameters.icon != null) || (parameters.prefix != null) || (parameters.prefixRaw != null);\n\n    // Some fields can have 'clear' inputs associated with them\n    if (!parameters.required && !parameters.read_only) {\n        switch (parameters.type) {\n        case 'string':\n        case 'url':\n        case 'email':\n        case 'integer':\n        case 'float':\n        case 'decimal':\n        case 'related field':\n        case 'date':\n            extra = true;\n            break;\n        default:\n            break;\n        }\n    }\n\n    if (extra) {\n        html += `<div class='input-group'>`;\n\n        if (parameters.prefix) {\n            html += `<span class='input-group-text'>${parameters.prefix}</span>`;\n        } else if (parameters.prefixRaw) {\n            html += parameters.prefixRaw;\n        } else if (parameters.icon) {\n            html += `<span class='input-group-text'><span class='fas ${parameters.icon}'></span></span>`;\n        }\n    }\n\n    html += constructInput(field_name, parameters, options);\n\n    if (extra) {\n\n        if (!parameters.required && !options.hideClearButton) {\n            html += `\n            <span class='input-group-text form-clear' id='clear_${field_name}' title='{% trans \"Clear input\" %}'>\n                <span class='icon-red fas fa-backspace'></span>\n            </span>`;\n        }\n\n        html += `</div>`; // input-group\n    }\n\n    if (parameters.help_text && !options.hideLabels) {\n\n        // Boolean values are handled differently!\n        if (parameters.type != 'boolean' && !parameters.hidden) {\n            html += constructHelpText(name, parameters, options);\n        }\n    }\n\n    // Div for error messages\n    html += `<div id='errors-${field_name}'></div>`;\n\n    html += `</div>`; // controls\n    html += `</div>`; // form-group\n\n    if (parameters.after) {\n        html += parameters.after;\n    }\n\n    return html;\n}\n\n\n/*\n * Construct a 'label' div\n *\n * arguments:\n * - name: The name of the field\n * - required: Is this a required field?\n */\nfunction constructLabel(name, parameters) {\n\n    var label_classes = 'control-label';\n\n    if (parameters.required) {\n        label_classes += ' requiredField';\n    }\n\n    var html = `<label class='${label_classes}' for='id_${name}'>`;\n\n    if (parameters.label) {\n        html += `${parameters.label}`;\n    } else {\n        html += `${name}`;\n    }\n\n    if (parameters.required) {\n        html += `<span class='asteriskField'>*</span>`;\n    }\n\n    html += `</label>`;\n\n    return html;\n}\n\n\n/*\n * Construct a form input based on the field parameters\n *\n * arguments:\n * - name: The name of the field\n * - parameters: Field parameters returned by the OPTIONS method\n *\n */\nfunction constructInput(name, parameters, options={}) {\n\n    var html = '';\n\n    var func = null;\n\n    switch (parameters.type) {\n    case 'boolean':\n        func = constructCheckboxInput;\n        break;\n    case 'string':\n    case 'url':\n    case 'email':\n        func = constructTextInput;\n        break;\n    case 'integer':\n    case 'float':\n    case 'decimal':\n        func = constructNumberInput;\n        break;\n    case 'choice':\n        func = constructChoiceInput;\n        break;\n    case 'related field':\n        func = constructRelatedFieldInput;\n        break;\n    case 'image upload':\n    case 'file upload':\n        func = constructFileUploadInput;\n        break;\n    case 'date':\n        func = constructDateInput;\n        break;\n    case 'candy':\n        func = constructCandyInput;\n        break;\n    case 'raw':\n        func = constructRawInput;\n    default:\n        // Unsupported field type!\n        break;\n    }\n\n    if (func != null) {\n        html = func(name, parameters, options);\n    } else {\n        console.warn(`Unhandled form field type: '${parameters.type}'`);\n    }\n\n    return html;\n}\n\n\n// Construct a set of default input options which apply to all input types\nfunction constructInputOptions(name, classes, type, parameters, options={}) {\n\n    var opts = [];\n\n    opts.push(`id='id_${name}'`);\n\n    opts.push(`class='${classes}'`);\n\n    opts.push(`name='${name}'`);\n\n    opts.push(`type='${type}'`);\n\n    if (parameters.title || parameters.help_text) {\n        opts.push(`title='${parameters.title || parameters.help_text}'`);\n    }\n\n    // Read only?\n    if (parameters.read_only) {\n        opts.push(`readonly=''`);\n    }\n\n    if (parameters.value != null) {\n        if (parameters.type == 'boolean') {\n            // Special consideration of a boolean (checkbox) value\n            if (parameters.value == true || parameters.value.toString().toLowerCase() == 'true') {\n                opts.push('checked');\n            }\n        } else {\n            // Existing value?\n            opts.push(`value='${parameters.value}'`);\n        }\n    } else if (parameters.default != null) {\n        // Otherwise, a defualt value?\n        opts.push(`value='${parameters.default}'`);\n    }\n\n    // Maximum input length\n    if (parameters.max_length != null) {\n        opts.push(`maxlength='${parameters.max_length}'`);\n    }\n\n    // Minimum input length\n    if (parameters.min_length != null) {\n        opts.push(`minlength='${parameters.min_length}'`);\n    }\n\n    // Maximum value\n    if (parameters.max_value != null) {\n        opts.push(`max='${parameters.max_value}'`);\n    }\n\n    // Minimum value\n    if (parameters.min_value != null) {\n        opts.push(`min='${parameters.min_value}'`);\n    }\n\n    // Field is required?\n    if (parameters.required) {\n        opts.push(`required=''`);\n    }\n\n    // Placeholder?\n    if (parameters.placeholder != null) {\n        opts.push(`placeholder='${parameters.placeholder}'`);\n    }\n\n    switch (parameters.type) {\n    case 'boolean':\n        break;\n    case 'integer':\n    case 'float':\n    case 'decimal':\n        opts.push(`step='any'`);\n        break;\n    default:\n        break;\n    }\n\n    if (parameters.multiline) {\n        return `<textarea ${opts.join(' ')}></textarea>`;\n    } else if (parameters.type == 'boolean') {\n\n        if (parameters.hidden) {\n            return '';\n        }\n\n        var help_text = '';\n\n        if (!options.hideLabels && parameters.help_text) {\n            help_text = `<em><small>${parameters.help_text}</small></em>`;\n        }\n\n        return `\n        <div class='form-check form-switch'>\n            <input ${opts.join(' ')}>\n            <label class='form-check-label' for=''>\n                ${help_text}\n            </label>\n        </div>\n        `;\n    } else {\n        return `<input ${opts.join(' ')}>`;\n    }\n}\n\n\n// Construct a \"hidden\" input\nfunction constructHiddenInput(name, parameters, options={}) {\n\n    return constructInputOptions(\n        name,\n        'hiddeninput',\n        'hidden',\n        parameters,\n        options\n    );\n}\n\n\n// Construct a \"checkbox\" input\nfunction constructCheckboxInput(name, parameters, options={}) {\n\n    return constructInputOptions(\n        name,\n        'form-check-input',\n        'checkbox',\n        parameters,\n        options\n    );\n}\n\n\n// Construct a \"text\" input\nfunction constructTextInput(name, parameters) {\n\n    var classes = '';\n    var type = '';\n\n    switch (parameters.type) {\n    default:\n        classes = 'textinput textInput form-control';\n        type = 'text';\n        break;\n    case 'url':\n        classes = 'urlinput form-control';\n        type = 'url';\n        break;\n    case 'email':\n        classes = 'emailinput form-control';\n        type = 'email';\n        break;\n    }\n\n    return constructInputOptions(\n        name,\n        classes,\n        type,\n        parameters\n    );\n}\n\n\n// Construct a \"number\" field\nfunction constructNumberInput(name, parameters) {\n\n    return constructInputOptions(\n        name,\n        'numberinput form-control',\n        'number',\n        parameters\n    );\n}\n\n\n// Construct a \"choice\" input\nfunction constructChoiceInput(name, parameters) {\n\n    var html = `<select id='id_${name}' class='select form-control' name='${name}'>`;\n\n    var choices = parameters.choices || [];\n\n    for (var idx = 0; idx < choices.length; idx++) {\n\n        var choice = choices[idx];\n\n        var selected = '';\n\n        if (parameters.value && parameters.value == choice.value) {\n            selected = ` selected=''`;\n        }\n\n        html += `<option value='${choice.value}'${selected}>`;\n        html += `${choice.display_name}`;\n        html += `</option>`;\n    }\n\n    html += `</select>`;\n\n    return html;\n}\n\n\n/*\n * Construct a \"related field\" input.\n * This will create a \"select\" input which will then, (after form is loaded),\n * be converted into a select2 input.\n * This will then be served custom data from the API (as required)...\n */\nfunction constructRelatedFieldInput(name) {\n\n    var html = `<select id='id_${name}' class='select form-control' name='${name}'></select>`;\n\n    // Don't load any options - they will be filled via an AJAX request\n\n    return html;\n}\n\n\n/*\n * Construct a field for file upload\n */\nfunction constructFileUploadInput(name, parameters) {\n\n    var cls = 'clearablefileinput';\n\n    if (parameters.required) {\n        cls = 'fileinput';\n    }\n\n    return constructInputOptions(\n        name,\n        cls,\n        'file',\n        parameters\n    );\n}\n\n\n/*\n * Construct a field for a date input\n */\nfunction constructDateInput(name, parameters) {\n\n    return constructInputOptions(\n        name,\n        'dateinput form-control',\n        'date',\n        parameters\n    );\n}\n\n\n/*\n * Construct a \"candy\" field input\n * No actual field data!\n */\nfunction constructCandyInput(name, parameters) {\n\n    return parameters.html;\n\n}\n\n\n/*\n * Construct a \"raw\" field input\n * No actual field data!\n */\nfunction constructRawInput(name, parameters) {\n\n    return parameters.html;\n\n}\n\n\n/*\n * Construct a 'help text' div based on the field parameters\n *\n * arguments:\n * - name: The name of the field\n * - parameters: Field parameters returned by the OPTIONS method\n *\n */\nfunction constructHelpText(name, parameters) {\n\n    var html = `<div id='hint_id_${name}' class='help-block'><i>${parameters.help_text}</i></div>`;\n\n    return html;\n}\n\n\n/*\n * Construct a dialog to select import fields\n */\nfunction selectImportFields(url, data={}, options={}) {\n\n    if (!data.model_fields) {\n        console.warn(`selectImportFields is missing 'model_fields'`);\n        return;\n    }\n\n    if (!data.file_fields) {\n        console.warn(`selectImportFields is missing 'file_fields'`);\n        return;\n    }\n\n    var choices = [];\n\n    // Add an \"empty\" value\n    choices.push({\n        value: '',\n        display_name: '-----',\n    });\n\n    for (const [name, field] of Object.entries(data.model_fields)) {\n        choices.push({\n            value: name,\n            display_name: field.label || name,\n        });\n    }\n\n    var rows = '';\n\n    var field_names = Object.keys(data.file_fields);\n\n    for (var idx = 0; idx < field_names.length; idx++) {\n\n        var field_name = field_names[idx];\n\n        var choice_input = constructInput(\n            `column_${idx}`,\n            {\n                type: 'choice',\n                label: field_name,\n                value: data.file_fields[field_name].value,\n                choices: choices,\n            }\n        );\n\n        rows += `<tr><td><em>${field_name}</em></td><td>${choice_input}</td></tr>`;\n    }\n\n    var headers = `<tr><th>{% trans \"File Column\" %}</th><th>{% trans \"Field Name\" %}</th></tr>`;\n\n    var html = '';\n\n    if (options.preamble) {\n        html += options.preamble;\n    }\n\n    html += `<table class='table table-condensed'>${headers}${rows}</table>`;\n\n    constructForm(url, {\n        method: 'POST',\n        title: '{% trans \"Select Columns\" %}',\n        fields: {},\n        preFormContent: html,\n        onSubmit: function(fields, opts) {\n\n            var columns = [];\n\n            for (var idx = 0; idx < field_names.length; idx++) {\n                columns.push(getFormFieldValue(`column_${idx}`, {}, opts));\n            }\n\n            $(opts.modal).find('#modal-progress-spinner').show();\n\n            inventreePut(\n                opts.url,\n                {\n                    columns: columns,\n                    rows: data.rows,\n                },\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        handleFormSuccess(response, opts);\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n\n                        $(opts.modal).find('#modal-progress-spinner').hide();\n\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n\n                            console.error(`upload error at ${opts.url}`);\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        },\n    });\n}\n", "code_before": "{% load i18n %}\n{% load inventree_extras %}\n\n/* globals\n    createNewModal,\n    inventreeFormDataUpload,\n    inventreeGet,\n    inventreePut,\n    modalEnable,\n    modalShowSubmitButton,\n    renderBuild,\n    renderCompany,\n    renderManufacturerPart,\n    renderOwner,\n    renderPart,\n    renderPartCategory,\n    renderPartParameterTemplate,\n    renderStockItem,\n    renderStockLocation,\n    renderSupplierPart,\n    renderUser,\n    showAlertOrCache,\n    showApiError,\n*/\n\n/* exported\n    clearFormInput,\n    disableFormInput,\n    enableFormInput,\n    hideFormInput,\n    setFormInputPlaceholder,\n    setFormGroupVisibility,\n    showFormInput,\n    selectImportFields,\n*/\n\n/**\n *\n * This file contains code for rendering (and managing) HTML forms\n * which are served via the django-drf API.\n *\n * The django DRF library provides an OPTIONS method for each API endpoint,\n * which allows us to introspect the available fields at any given endpoint.\n *\n * The OPTIONS method provides the following information for each available field:\n *\n * - Field name\n * - Field label (translated)\n * - Field help text (translated)\n * - Field type\n * - Read / write status\n * - Field required status\n * - min_value / max_value\n *\n */\n\n// Set global default theme for select2\n$.fn.select2.defaults.set('theme', 'bootstrap-5');\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a GET method at the endpoint.\n */\nfunction canView(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('GET' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a POST method at the endpoint\n */\nfunction canCreate(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('POST' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a PUT or PATCH method at the endpoint\n */\nfunction canChange(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('PUT' in OPTIONS.actions || 'PATCH' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Return true if the OPTIONS specify that the user\n * can perform a DELETE method at the endpoint\n */\nfunction canDelete(OPTIONS) {\n\n    if ('actions' in OPTIONS) {\n        return ('DELETE' in OPTIONS.actions);\n    } else {\n        return false;\n    }\n}\n\n\n/*\n * Get the API endpoint options at the provided URL,\n * using a HTTP options request.\n */\nfunction getApiEndpointOptions(url, callback) {\n\n    if (!url) {\n        return;\n    }\n\n    // Include extra context information in the request\n    url += '?context=true';\n\n    // Return the ajax request object\n    $.ajax({\n        url: url,\n        type: 'OPTIONS',\n        contentType: 'application/json',\n        dataType: 'json',\n        accepts: {\n            json: 'application/json',\n        },\n        success: callback,\n        error: function(xhr) {\n            // TODO: Handle error\n            console.error(`Error in getApiEndpointOptions at '${url}'`);\n            showApiError(xhr, url);\n        }\n    });\n}\n\n\n/*\n * Construct a 'creation' (POST) form, to create a new model in the database.\n *\n * arguments:\n * - fields: The 'actions' object provided by the OPTIONS endpoint\n *\n * options:\n * -\n */\nfunction constructCreateForm(fields, options) {\n\n    // Check if default values were provided for any fields\n    for (const name in fields) {\n\n        var field = fields[name];\n\n        var field_options = options.fields[name] || {};\n\n        // If a 'value' is not provided for the field,\n        if (field.value == null) {\n\n            if ('value' in field_options) {\n                // Client has specified the default value for the field\n                field.value = field_options.value;\n            } else if (field.default != null) {\n                // OPTIONS endpoint provided default value for this field\n                field.value = field.default;\n            }\n        }\n    }\n\n    // We should have enough information to create the form!\n    constructFormBody(fields, options);\n}\n\n\n/*\n * Construct a 'change' (PATCH) form, to create a new model in the database.\n *\n * arguments:\n * - fields: The 'actions' object provided by the OPTIONS endpoint\n *\n * options:\n * -\n */\nfunction constructChangeForm(fields, options) {\n\n    // Request existing data from the API endpoint\n    $.ajax({\n        url: options.url,\n        data: options.params || {},\n        type: 'GET',\n        contentType: 'application/json',\n        dataType: 'json',\n        accepts: {\n            json: 'application/json',\n        },\n        success: function(data) {\n\n            // An optional function can be provided to process the returned results,\n            // before they are rendered to the form\n            if (options.processResults) {\n                var processed = options.processResults(data, fields, options);\n\n                // If the processResults function returns data, it will be stored\n                if (processed) {\n                    data = processed;\n                }\n            }\n\n            // Push existing 'value' to each field\n            for (const field in data) {\n\n                if (field in fields) {\n                    fields[field].value = data[field];\n                }\n            }\n\n            // Store the entire data object\n            options.instance = data;\n\n            constructFormBody(fields, options);\n        },\n        error: function(xhr) {\n            // TODO: Handle error here\n            console.error(`Error in constructChangeForm at '${options.url}'`);\n\n            showApiError(xhr, options.url);\n        }\n    });\n}\n\n\n/*\n * Construct a 'delete' form, to remove a model instance from the database.\n *\n * arguments:\n * - fields: The 'actions' object provided by the OPTIONS request\n * - options: The 'options' object provided by the client\n */\nfunction constructDeleteForm(fields, options) {\n\n    // Force the \"confirm\" property if not set\n    if (!('confirm' in options)) {\n        options.confirm = true;\n    }\n\n    // Request existing data from the API endpoint\n    // This data can be used to render some information on the form\n    $.ajax({\n        url: options.url,\n        type: 'GET',\n        contentType: 'application/json',\n        dataType: 'json',\n        accepts: {\n            json: 'application/json',\n        },\n        success: function(data) {\n\n            // Store the instance data\n            options.instance = data;\n\n            constructFormBody(fields, options);\n        },\n        error: function(xhr) {\n            // TODO: Handle error here\n            console.error(`Error in constructDeleteForm at '${options.url}`);\n\n            showApiError(xhr, options.url);\n        }\n    });\n}\n\n\n/*\n * Request API OPTIONS data from the server,\n * and construct a modal form based on the response.\n *\n * url: API URL which defines form data\n * options:\n * - method: The HTTP method e.g. 'PUT', 'POST', 'DELETE' (default='PATCH')\n * - title: The form title\n * - submitText: Text for the \"submit\" button\n * - submitClass: CSS class for the \"submit\" button (default = ')\n * - closeText: Text for the \"close\" button\n * - fields: list of fields to display, with the following options\n *      - filters: API query filters\n *      - onEdit: callback when field is edited\n *      - secondary: Define a secondary modal form for this field\n *      - label: Specify custom label\n *      - help_text: Specify custom help_text\n *      - placeholder: Specify custom placeholder text\n *      - value: Specify initial value\n *      - hidden: Set to true to hide the field\n *      - icon: font-awesome icon to display before the field\n *      - prefix: Custom HTML prefix to display before the field\n * - data: map of data to fill out field values with\n * - focus: Name of field to focus on when modal is displayed\n * - preventClose: Set to true to prevent form from closing on success\n * - onSuccess: callback function when form action is successful\n * - follow: If a 'url' is provided by the API on success, redirect to it\n * - redirect: A URL to redirect to after form success\n * - reload: Set to true to reload the current page after form success\n * - confirm: Set to true to require a \"confirm\" button\n * - confirmText: Text for confirm button (default = \"Confirm\")\n *\n */\nfunction constructForm(url, options) {\n\n    // An \"empty\" form will be defined locally\n    if (url == null) {\n        constructFormBody({}, options);\n    }\n\n    options.fields = options.fields || {};\n\n    // Save the URL\n    options.url = url;\n\n    // Default HTTP method\n    options.method = options.method || 'PATCH';\n\n    // Default \"groups\" definition\n    options.groups = options.groups || {};\n    options.current_group = null;\n\n    // Construct an \"empty\" data object if not provided\n    if (!options.data) {\n        options.data = {};\n    }\n\n    // Request OPTIONS endpoint from the API\n    getApiEndpointOptions(url, function(OPTIONS) {\n\n        // Extract any custom 'context' information from the OPTIONS data\n        options.context = OPTIONS.context || {};\n\n        /*\n         * Determine what \"type\" of form we want to construct,\n         * based on the requested action.\n         *\n         * First we must determine if the user has the correct permissions!\n         */\n\n        switch (options.method) {\n        case 'POST':\n            if (canCreate(OPTIONS)) {\n                constructCreateForm(OPTIONS.actions.POST, options);\n            } else {\n                // User does not have permission to POST to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"Create operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`'POST action unavailable at ${url}`);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n            if (canChange(OPTIONS)) {\n                constructChangeForm(OPTIONS.actions.PUT, options);\n            } else {\n                // User does not have permission to PUT/PATCH to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"Update operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`${options.method} action unavailable at ${url}`);\n            }\n            break;\n        case 'DELETE':\n            if (canDelete(OPTIONS)) {\n                constructDeleteForm(OPTIONS.actions.DELETE, options);\n            } else {\n                // User does not have permission to DELETE to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"Delete operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`DELETE action unavailable at ${url}`);\n            }\n            break;\n        case 'GET':\n            if (canView(OPTIONS)) {\n                // TODO?\n            } else {\n                // User does not have permission to GET to the endpoint\n                showMessage('{% trans \"Action Prohibited\" %}', {\n                    style: 'danger',\n                    details: '{% trans \"View operation not allowed\" %}',\n                    icon: 'fas fa-user-times',\n                });\n\n                console.warn(`GET action unavailable at ${url}`);\n            }\n            break;\n        default:\n            console.warn(`constructForm() called with invalid method '${options.method}'`);\n            break;\n        }\n    });\n}\n\n\n/*\n * Construct a modal form based on the provided options\n *\n * arguments:\n * - fields: The endpoint description returned from the OPTIONS request\n * - options: form options object provided by the client.\n */\nfunction constructFormBody(fields, options) {\n\n    var html = '';\n\n    // Client must provide set of fields to be displayed,\n    // otherwise *all* fields will be displayed\n    var displayed_fields = options.fields || fields;\n\n    // Handle initial data overrides\n    if (options.data) {\n        for (const field in options.data) {\n\n            if (field in fields) {\n                fields[field].value = options.data[field];\n            }\n        }\n    }\n\n    // Initialize an \"empty\" field for each specified field\n    for (field in displayed_fields) {\n        if (!(field in fields)) {\n            fields[field] = {};\n        }\n    }\n\n    // Provide each field object with its own name\n    for (field in fields) {\n        fields[field].name = field;\n\n        // If any \"instance_filters\" are defined for the endpoint, copy them across (overwrite)\n        if (fields[field].instance_filters) {\n            fields[field].filters = Object.assign(fields[field].filters || {}, fields[field].instance_filters);\n        }\n\n        var field_options = displayed_fields[field];\n\n        // Copy custom options across to the fields object\n        if (field_options) {\n\n            // Override existing query filters (if provided!)\n            fields[field].filters = Object.assign(fields[field].filters || {}, field_options.filters);\n\n            for (var opt in field_options) {\n\n                var val = field_options[opt];\n\n                if (opt == 'filters') {\n                    // ignore filters (see above)\n                } else if (opt == 'icon') {\n                    // Specify custom icon\n                    fields[field].prefix = `<span class='fas ${val}'></span>`;\n                } else {\n                    fields[field][opt] = field_options[opt];\n                }\n            }\n        }\n    }\n\n    // Construct an ordered list of field names\n    var field_names = [];\n\n    for (var name in displayed_fields) {\n\n        field_names.push(name);\n\n        // Field not specified in the API, but the client wishes to add it!\n        if (!(name in fields)) {\n            fields[name] = displayed_fields[name];\n        }\n    }\n\n    // Push the ordered field names into the options,\n    // allowing successive functions to access them.\n    options.field_names = field_names;\n\n    // Render selected fields\n\n    for (var idx = 0; idx < field_names.length; idx++) {\n\n        var field_name = field_names[idx];\n\n        var field = fields[field_name];\n\n        switch (field.type) {\n        // Skip field types which are simply not supported\n        case 'nested object':\n            continue;\n        default:\n            break;\n        }\n\n        html += constructField(field_name, field, options);\n    }\n\n    if (options.current_group) {\n        // Close out the current group\n        html += `</div></div>`;\n    }\n\n    // Create a new modal if one does not exists\n    if (!options.modal) {\n        options.modal = createNewModal(options);\n    }\n\n    var modal = options.modal;\n\n    modalEnable(modal, true);\n\n    // Insert generated form content\n    $(modal).find('#form-content').html(html);\n\n    if (options.preFormContent) {\n\n        if (typeof(options.preFormContent) === 'function') {\n            var content = options.preFormContent(options);\n        } else {\n            var content = options.preFormContent;\n        }\n\n        $(modal).find('#pre-form-content').html(content);\n    }\n\n    if (options.postFormContent) {\n        $(modal).find('#post-form-content').html(options.postFormContent);\n    }\n\n    // Clear any existing buttons from the modal\n    $(modal).find('#modal-footer-buttons').html('');\n\n    // Insert \"confirm\" button (if required)\n    if (options.confirm) {\n        insertConfirmButton(options);\n    }\n\n    // Insert \"persist\" button (if required)\n    if (options.persist) {\n        insertPersistButton(options);\n    }\n\n    // Insert secondary buttons (if required)\n    if (options.buttons) {\n        insertSecondaryButtons(options);\n    }\n\n    // Display the modal\n    $(modal).modal('show');\n\n    updateFieldValues(fields, options);\n\n    // Setup related fields\n    initializeRelatedFields(fields, options);\n\n    // Attach edit callbacks (if required)\n    addFieldCallbacks(fields, options);\n\n    // Attach clear callbacks (if required)\n    addClearCallbacks(fields, options);\n\n    modalShowSubmitButton(modal, true);\n\n    $(modal).on('click', '#modal-form-submit', function() {\n\n        // Immediately disable the \"submit\" button,\n        // to prevent the form being submitted multiple times!\n        $(options.modal).find('#modal-form-submit').prop('disabled', true);\n\n        // Run custom code before normal form submission\n        if (options.beforeSubmit) {\n            options.beforeSubmit(fields, options);\n        }\n\n        // Run custom code instead of normal form submission\n        if (options.onSubmit) {\n            options.onSubmit(fields, options);\n        } else {\n            submitFormData(fields, options);\n        }\n    });\n\n    initializeGroups(fields, options);\n\n    if (options.afterRender) {\n        // Custom callback function after form rendering\n        options.afterRender(fields, options);\n    }\n\n    // Scroll to the top\n    $(options.modal).find('.modal-form-content-wrapper').scrollTop(0);\n}\n\n\n// Add a \"confirm\" checkbox to the modal\n// The \"submit\" button will be disabled unless \"confirm\" is checked\nfunction insertConfirmButton(options) {\n\n    var message = options.confirmMessage || '{% trans \"Confirm\" %}';\n\n    var html = `\n    <div class=\"form-check form-switch\">\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"modal-confirm\">\n        <label class=\"form-check-label\" for=\"modal-confirm\">${message}</label>\n    </div>\n    `;\n\n    $(options.modal).find('#modal-footer-buttons').append(html);\n\n    // Disable the 'submit' button\n    $(options.modal).find('#modal-form-submit').prop('disabled', true);\n\n    // Trigger event\n    $(options.modal).find('#modal-confirm').change(function() {\n        var enabled = this.checked;\n\n        $(options.modal).find('#modal-form-submit').prop('disabled', !enabled);\n    });\n}\n\n\n/* Add a checkbox to select if the modal will stay open after success */\nfunction insertPersistButton(options) {\n\n    var message = options.persistMessage || '{% trans \"Keep this form open\" %}';\n\n    var html = `\n    <div class=\"form-check form-switch\">\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"modal-persist\">\n        <label class=\"form-check-label\" for=\"modal-persist\">${message}</label>\n    </div>\n    `;\n\n    $(options.modal).find('#modal-footer-buttons').append(html);\n}\n\n/*\n * Add secondary buttons to the left of the close and submit buttons\n * with callback functions\n */\nfunction insertSecondaryButtons(options) {\n    for (var idx = 0; idx < options.buttons.length; idx++) {\n\n        var html = `\n        <button type=\"button\" class=\"btn btn-outline-secondary\" id=\"modal-form-${options.buttons[idx].name}\">\n            ${options.buttons[idx].title}\n        </button>\n        `;\n\n        $(options.modal).find('#modal-footer-secondary-buttons').append(html);\n\n        if (options.buttons[idx].onClick instanceof Function) {\n            // Copy callback reference to prevent errors if `idx` changes value before execution\n            var onclick_callback = options.buttons[idx].onClick;\n\n            $(options.modal).find(`#modal-form-${options.buttons[idx].name}`).click(function() {\n                onclick_callback(options);\n            });\n        }\n    }\n}\n\n/*\n * Extract all specified form values as a single object\n */\nfunction extractFormData(fields, options) {\n\n    var data = {};\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name] || null;\n\n        if (!field) continue;\n\n        if (field.type == 'candy') continue;\n\n        data[name] = getFormFieldValue(name, field, options);\n    }\n\n    return data;\n}\n\n\n/*\n * Submit form data to the server.\n *\n */\nfunction submitFormData(fields, options) {\n\n    // Form data to be uploaded to the server\n    // Only used if file / image upload is required\n    var form_data = new FormData();\n\n    var data = {};\n\n    var has_files = false;\n\n    var data_valid = true;\n\n    var data_errors = {};\n\n    // Extract values for each field\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name] || null;\n\n        // Ignore visual fields\n        if (field && field.type == 'candy') continue;\n\n        if (field) {\n\n            switch (field.type) {\n            // Ensure numerical fields are \"valid\"\n            case 'integer':\n            case 'float':\n            case 'decimal':\n                if (!validateFormField(name, options)) {\n                    data_valid = false;\n\n                    data_errors[name] = ['{% trans \"Enter a valid number\" %}'];\n                }\n                break;\n            default:\n                break;\n            }\n\n            var value = getFormFieldValue(name, field, options);\n\n            // Handle file inputs\n            if (field.type == 'image upload' || field.type == 'file upload') {\n\n                var field_el = $(options.modal).find(`#id_${name}`)[0];\n\n                var field_files = field_el.files;\n\n                if (field_files.length > 0) {\n                    // One file per field, please!\n                    var file = field_files[0];\n\n                    form_data.append(name, file);\n\n                    has_files = true;\n                }\n            } else {\n\n                // Normal field (not a file or image)\n                form_data.append(name, value);\n\n                data[name] = value;\n            }\n        } else {\n            console.warn(`Could not find field matching '${name}'`);\n        }\n    }\n\n    if (!data_valid) {\n        handleFormErrors(data_errors, fields, options);\n        return;\n    }\n\n    var upload_func = inventreePut;\n\n    if (has_files) {\n        upload_func = inventreeFormDataUpload;\n        data = form_data;\n    }\n\n    // Optionally pre-process the data before uploading to the server\n    if (options.processBeforeUpload) {\n        data = options.processBeforeUpload(data);\n    }\n\n    // Show the progress spinner\n    $(options.modal).find('#modal-progress-spinner').show();\n\n    // Submit data\n    upload_func(\n        options.url,\n        data,\n        {\n            method: options.method,\n            success: function(response) {\n                $(options.modal).find('#modal-progress-spinner').hide();\n                handleFormSuccess(response, options);\n            },\n            error: function(xhr) {\n\n                $(options.modal).find('#modal-progress-spinner').hide();\n\n                switch (xhr.status) {\n                case 400:\n                    handleFormErrors(xhr.responseJSON, fields, options);\n                    break;\n                default:\n                    $(options.modal).modal('hide');\n\n                    console.error(`Upload error at ${options.url}`);\n                    showApiError(xhr, options.url);\n                    break;\n                }\n            }\n        }\n    );\n}\n\n\n/*\n * Update (set) the field values based on the specified data.\n *\n * Iterate through each of the displayed fields,\n * and set the 'val' attribute of each one.\n *\n */\nfunction updateFieldValues(fields, options) {\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name] || null;\n\n        if (field == null) {\n            continue;\n        }\n\n        var value = field.value;\n\n        if (value == null) {\n            value = field.default;\n        }\n\n        if (value == null) {\n            continue;\n        }\n\n        updateFieldValue(name, value, field, options);\n    }\n}\n\n/*\n * Update the value of a named field\n */\nfunction updateFieldValue(name, value, field, options) {\n\n    var el = getFormFieldElement(name, options);\n\n    if (!el) {\n        console.warn(`updateFieldValue could not find field '${name}'`);\n        return;\n    }\n\n    switch (field.type) {\n    case 'boolean':\n        if (value == true || value.toString().toLowerCase() == 'true') {\n            el.prop('checked');\n        }\n        break;\n    case 'related field':\n        // Clear?\n        if (value == null && !field.required) {\n            el.val(null).trigger('change');\n        }\n        // TODO - Specify an actual value!\n        break;\n    case 'file upload':\n    case 'image upload':\n        break;\n    default:\n        el.val(value);\n        break;\n    }\n}\n\n\n// Find the named field element in the modal DOM\nfunction getFormFieldElement(name, options) {\n\n    var field_name = getFieldName(name, options);\n\n    var el = null;\n\n    if (options && options.modal) {\n        // Field element is associated with a model?\n        el = $(options.modal).find(`#id_${field_name}`);\n    } else {\n        // Field element is top-level\n        el = $(`#id_${field_name}`);\n    }\n\n    if (!el.exists()) {\n        console.error(`Could not find form element for field '${name}'`);\n    }\n\n    return el;\n}\n\n\n/*\n * Check that a \"numerical\" input field has a valid number in it.\n * An invalid number is expunged at the client side by the getFormFieldValue() function,\n * which means that an empty string '' is sent to the server if the number is not valud.\n * This can result in confusing error messages displayed under the form field.\n *\n * So, we can invalid numbers and display errors *before* the form is submitted!\n */\nfunction validateFormField(name, options) {\n\n    if (getFormFieldElement(name, options)) {\n\n        var el = document.getElementById(`id_${name}`);\n\n        if (el.validity.valueMissing) {\n            // Accept empty strings (server will validate)\n            return true;\n        } else {\n            return el.validity.valid;\n        }\n    } else {\n        return false;\n    }\n\n}\n\n\n/*\n * Extract and field value before sending back to the server\n *\n * arguments:\n * - name: The name of the field\n * - field: The field specification provided from the OPTIONS request\n * - options: The original options object provided by the client\n */\nfunction getFormFieldValue(name, field={}, options={}) {\n\n    // Find the HTML element\n    var el = getFormFieldElement(name, options);\n\n    if (!el.exists()) {\n        console.error(`getFormFieldValue could not locate field '${name}'`);\n        return null;\n    }\n\n    var value = null;\n\n    switch (field.type) {\n    case 'boolean':\n        value = el.is(':checked');\n        break;\n    case 'date':\n    case 'datetime':\n        value = el.val();\n\n        // Ensure empty values are sent as nulls\n        if (!value || value.length == 0) {\n            value = null;\n        }\n        break;\n    default:\n        value = el.val();\n        break;\n    }\n\n    return value;\n}\n\n\n/*\n * Handle successful form posting\n *\n * arguments:\n * - response: The JSON response object from the server\n * - options: The original options object provided by the client\n */\nfunction handleFormSuccess(response, options) {\n\n    // Display any required messages\n    // Should we show alerts immediately or cache them?\n    var cache = (options.follow && response.url) || options.redirect || options.reload;\n\n    // Should the form \"persist\"?\n    var persist = false;\n\n    if (options.persist && options.modal) {\n        // Determine if this form should \"persist\", or be dismissed?\n        var chk = $(options.modal).find('#modal-persist');\n\n        persist = chk.exists() && chk.prop('checked');\n    }\n\n    if (persist) {\n        cache = false;\n    }\n\n    var msg_target = null;\n\n    if (persist) {\n        // If the modal is persistant, the target for any messages should be the modal!\n        msg_target = $(options.modal).find('#pre-form-content');\n    }\n\n    // Display any messages\n    if (response && (response.success || options.successMessage)) {\n        showAlertOrCache(\n            response.success || options.successMessage,\n            cache,\n            {\n                style: 'success',\n                target: msg_target,\n            });\n    }\n\n    if (response && response.info) {\n        showAlertOrCache(response.info, cache, {style: 'info'});\n    }\n\n    if (response && response.warning) {\n        showAlertOrCache(response.warning, cache, {style: 'warning'});\n    }\n\n    if (response && response.danger) {\n        showAlertOrCache(response.danger, cache, {style: 'danger'});\n    }\n\n    if (persist) {\n        // Instead of closing the form and going somewhere else,\n        // reload (empty) the form so the user can input more data\n\n        // Reset the status of the \"submit\" button\n        if (options.modal) {\n            $(options.modal).find('#modal-form-submit').prop('disabled', false);\n        }\n\n        // Remove any error flags from the form\n        clearFormErrors(options);\n\n    } else {\n\n        // Close the modal\n        if (!options.preventClose) {\n            // Note: The modal will be deleted automatically after closing\n            $(options.modal).modal('hide');\n        }\n\n        if (options.onSuccess) {\n            // Callback function\n            options.onSuccess(response, options);\n        }\n\n        if (options.follow && response.url) {\n            // Follow the returned URL\n            window.location.href = response.url;\n        } else if (options.reload) {\n            // Reload the current page\n            location.reload();\n        } else if (options.redirect) {\n            // Redirect to a specified URL\n            window.location.href = options.redirect;\n        }\n    }\n}\n\n\n\n/*\n * Remove all error text items from the form\n */\nfunction clearFormErrors(options={}) {\n\n    if (options && options.modal) {\n        // Remove the individual error messages\n        $(options.modal).find('.form-error-message').remove();\n\n        $(options.modal).find('.modal-content').removeClass('modal-error');\n\n        // Remove the \"has error\" class\n        $(options.modal).find('.form-field-error').removeClass('form-field-error');\n\n        // Hide the 'non field errors'\n        $(options.modal).find('#non-field-errors').html('');\n    } else {\n        $('.form-error-message').remove();\n        $('.form-field-errors').removeClass('form-field-error');\n        $('#non-field-errors').html('');\n    }\n}\n\n/*\n * Display form error messages as returned from the server,\n * specifically for errors returned in an array.\n *\n * We need to know the unique ID of each item in the array,\n * and the array length must equal the length of the array returned from the server\n *\n * arguments:\n * - response: The JSON error response from the server\n * - parent: The name of the parent field e.g. \"items\"\n * - options: The global options struct\n *\n * options:\n * - nested: A map of nested ID values for the \"parent\" field\n *           e.g.\n *           {\n *               \"items\": [\n *                  1,\n *                  2,\n *                  12\n *               ]\n *           }\n *\n */\n\nfunction handleNestedErrors(errors, field_name, options={}) {\n\n    var error_list = errors[field_name];\n\n    // Ignore null or empty list\n    if (!error_list) {\n        return;\n    }\n\n    var nest_list = nest_list = options['nested'][field_name];\n\n    // Nest list must be provided!\n    if (!nest_list) {\n        console.warn(`handleNestedErrors missing nesting options for field '${fieldName}'`);\n        return;\n    }\n\n    for (var idx = 0; idx < error_list.length; idx++) {\n\n        var error_item = error_list[idx];\n\n        if (idx >= nest_list.length) {\n            console.warn(`handleNestedErrors returned greater number of errors (${error_list.length}) than could be handled (${nest_list.length})`);\n            break;\n        }\n\n        // Extract the particular ID of the nested item\n        var nest_id = nest_list[idx];\n\n        // Here, error_item is a map of field names to error messages\n        for (sub_field_name in error_item) {\n\n            var errors = error_item[sub_field_name];\n\n            if (sub_field_name == 'non_field_errors') {\n\n                var row = null;\n\n                if (options.modal) {\n                    row = $(options.modal).find(`#items_${nest_id}`);\n                } else {\n                    row = $(`#items_${nest_id}`);\n                }\n\n                for (var ii = errors.length - 1; ii >= 0; ii--) {\n\n                    var html = `\n                    <div id='error_${ii}_non_field_error' class='help-block form-field-error form-error-message'>\n                        <strong>${errors[ii]}</strong>\n                    </div>`;\n\n                    row.after(html);\n                }\n\n            }\n\n            // Find the target (nested) field\n            var target = `${field_name}_${sub_field_name}_${nest_id}`;\n\n            for (var ii = errors.length-1; ii >= 0; ii--) {\n\n                var error_text = errors[ii];\n\n                addFieldErrorMessage(target, error_text, ii, options);\n            }\n        }\n    }\n}\n\n\n\n/*\n * Display form error messages as returned from the server.\n *\n * arguments:\n * - errors: The JSON error response from the server\n * - fields: The form data object\n * - options: Form options provided by the client\n */\nfunction handleFormErrors(errors, fields={}, options={}) {\n\n    // Reset the status of the \"submit\" button\n    if (options.modal) {\n        $(options.modal).find('#modal-form-submit').prop('disabled', false);\n    }\n\n    // Remove any existing error messages from the form\n    clearFormErrors(options);\n\n    var non_field_errors = null;\n\n    if (options.modal) {\n        non_field_errors = $(options.modal).find('#non-field-errors');\n    } else {\n        non_field_errors = $('#non-field-errors');\n    }\n\n    // TODO: Display the JSON error text when hovering over the \"info\" icon\n    non_field_errors.append(\n        `<div class='alert alert-block alert-danger'>\n            <b>{% trans \"Form errors exist\" %}</b>\n            <span id='form-errors-info' class='float-right fas fa-info-circle icon-red'>\n            </span>\n        </div>`\n    );\n\n    // Non-field errors?\n    if ('non_field_errors' in errors) {\n\n        var nfe = errors.non_field_errors;\n\n        for (var idx = 0; idx < nfe.length; idx++) {\n            var err = nfe[idx];\n\n            var html = `\n            <div class='alert alert-block alert-danger'>\n                ${err}\n            </div>`;\n\n            non_field_errors.append(html);\n        }\n    }\n\n    var first_error_field = null;\n\n    for (var field_name in errors) {\n\n        var field = fields[field_name] || {};\n\n        if ((field.type == 'field') && ('child' in field)) {\n            // This is a \"nested\" field\n            handleNestedErrors(errors, field_name, options);\n        } else {\n            // This is a \"simple\" field\n\n            var field_errors = errors[field_name];\n\n            if (field_errors && !first_error_field && isFieldVisible(field_name, options)) {\n                first_error_field = field_name;\n            }\n\n            // Add an entry for each returned error message\n            for (var ii = field_errors.length-1; ii >= 0; ii--) {\n\n                var error_text = field_errors[ii];\n\n                addFieldErrorMessage(field_name, error_text, ii, options);\n            }\n        }\n    }\n\n    if (first_error_field) {\n        // Ensure that the field in question is visible\n        document.querySelector(`#div_id_${field_name}`).scrollIntoView({\n            behavior: 'smooth',\n        });\n    } else {\n        // Scroll to the top of the form\n        $(options.modal).find('.modal-form-content-wrapper').scrollTop(0);\n    }\n\n    $(options.modal).find('.modal-content').addClass('modal-error');\n}\n\n\n/*\n * Add a rendered error message to the provided field\n */\nfunction addFieldErrorMessage(name, error_text, error_idx=0, options={}) {\n\n    field_name = getFieldName(name, options);\n\n    var field_dom = null;\n\n    if (options && options.modal) {\n        $(options.modal).find(`#div_id_${field_name}`).addClass('form-field-error');\n        field_dom = $(options.modal).find(`#errors-${field_name}`);\n    } else {\n        $(`#div_id_${field_name}`).addClass('form-field-error');\n        field_dom = $(`#errors-${field_name}`);\n    }\n\n    if (field_dom.exists()) {\n\n        var error_html = `\n        <span id='error_${error_idx}_id_${field_name}' class='help-block form-error-message'>\n            <strong>${error_text}</strong>\n        </span>`;\n\n        field_dom.append(error_html);\n    } else {\n        console.warn(`addFieldErrorMessage could not locate field '${field_name}'`);\n    }\n}\n\n\nfunction isFieldVisible(field, options) {\n\n    return $(options.modal).find(`#div_id_${field}`).is(':visible');\n}\n\n\n/*\n * Attach callbacks to specified fields,\n * triggered after the field value is edited.\n *\n * Callback function is called with arguments (name, field, options)\n */\nfunction addFieldCallbacks(fields, options) {\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name];\n\n        if (!field || !field.onEdit) continue;\n\n        addFieldCallback(name, field, options);\n    }\n}\n\n\nfunction addFieldCallback(name, field, options) {\n\n    var el = getFormFieldElement(name, options);\n\n    el.change(function() {\n\n        var value = getFormFieldValue(name, field, options);\n\n        field.onEdit(value, name, field, options);\n    });\n}\n\n\nfunction addClearCallbacks(fields, options) {\n\n    for (var idx = 0; idx < options.field_names.length; idx++) {\n\n        var name = options.field_names[idx];\n\n        var field = fields[name];\n\n        if (!field || field.required) continue;\n\n        addClearCallback(name, field, options);\n    }\n}\n\n\nfunction addClearCallback(name, field, options={}) {\n\n    var field_name = getFieldName(name, options);\n\n    var el = null;\n\n    if (options && options.modal) {\n        el = $(options.modal).find(`#clear_${field_name}`);\n    } else {\n        el = $(`#clear_${field_name}`);\n    }\n\n    if (!el) {\n        console.warn(`addClearCallback could not find field '${name}'`);\n        return;\n    }\n\n    el.click(function() {\n        updateFieldValue(name, null, field, options);\n    });\n}\n\n\n// Initialize callbacks and initial states for groups\nfunction initializeGroups(fields, options) {\n\n    var modal = options.modal;\n\n    // Callback for when the group is expanded\n    $(modal).find('.form-panel-content').on('show.bs.collapse', function() {\n\n        var panel = $(this).closest('.form-panel');\n        var group = panel.attr('group');\n\n        var icon = $(modal).find(`#group-icon-${group}`);\n\n        icon.removeClass('fa-angle-right');\n        icon.addClass('fa-angle-up');\n    });\n\n    // Callback for when the group is collapsed\n    $(modal).find('.form-panel-content').on('hide.bs.collapse', function() {\n\n        var panel = $(this).closest('.form-panel');\n        var group = panel.attr('group');\n\n        var icon = $(modal).find(`#group-icon-${group}`);\n\n        icon.removeClass('fa-angle-up');\n        icon.addClass('fa-angle-right');\n    });\n\n    // Set initial state of each specified group\n    for (var group in options.groups) {\n\n        var group_options = options.groups[group];\n\n        if (group_options.collapsed) {\n            $(modal).find(`#form-panel-content-${group}`).collapse('hide');\n        } else {\n            $(modal).find(`#form-panel-content-${group}`).collapse('show');\n        }\n\n        if (group_options.hidden) {\n            hideFormGroup(group, options);\n        }\n    }\n}\n\n// Set the placeholder value for a field\nfunction setFormInputPlaceholder(name, placeholder, options) {\n    $(options.modal).find(`#id_${name}`).attr('placeholder', placeholder);\n}\n\n// Clear a form input\nfunction clearFormInput(name, options) {\n    updateFieldValue(name, null, {}, options);\n}\n\n// Disable a form input\nfunction disableFormInput(name, options) {\n    $(options.modal).find(`#id_${name}`).prop('disabled', true);\n}\n\n\n// Enable a form input\nfunction enableFormInput(name, options) {\n    $(options.modal).find(`#id_${name}`).prop('disabled', false);\n}\n\n\n// Hide a form input\nfunction hideFormInput(name, options) {\n    $(options.modal).find(`#div_id_${name}`).hide();\n}\n\n\n// Show a form input\nfunction showFormInput(name, options) {\n    $(options.modal).find(`#div_id_${name}`).show();\n}\n\n\n// Hide a form group\nfunction hideFormGroup(group, options) {\n    $(options.modal).find(`#form-panel-${group}`).hide();\n}\n\n\n// Show a form group\nfunction showFormGroup(group, options) {\n    $(options.modal).find(`#form-panel-${group}`).show();\n}\n\n\nfunction setFormGroupVisibility(group, vis, options) {\n    if (vis) {\n        showFormGroup(group, options);\n    } else {\n        hideFormGroup(group, options);\n    }\n}\n\n\nfunction initializeRelatedFields(fields, options={}) {\n\n    var field_names = options.field_names;\n\n    for (var idx = 0; idx < field_names.length; idx++) {\n\n        var name = field_names[idx];\n\n        var field = fields[name] || null;\n\n        if (!field || field.hidden) continue;\n\n        switch (field.type) {\n        case 'related field':\n            initializeRelatedField(field, fields, options);\n            break;\n        case 'choice':\n            initializeChoiceField(field, fields, options);\n            break;\n        default:\n            break;\n        }\n    }\n}\n\n\n/*\n * Add a button to launch a secondary modal, to create a new modal instance.\n *\n * arguments:\n * - name: The name of the field\n * - field: The field data object\n * - options: The options object provided by the client\n */\nfunction addSecondaryModal(field, fields, options) {\n\n    var field_name = getFieldName(field.name, options);\n\n    var depth = options.depth || 0;\n\n    var html = `\n    <span style='float: right;'>\n        <div type='button' class='btn btn-primary btn-secondary btn-form-secondary' title='${field.secondary.title || field.secondary.label}' id='btn-new-${field_name}'>\n            ${field.secondary.label || field.secondary.title}\n        </div>\n    </span>`;\n\n    $(options.modal).find(`label[for=\"id_${field_name}\"]`).append(html);\n\n    // Callback function when the secondary button is pressed\n    $(options.modal).find(`#btn-new-${field_name}`).click(function() {\n\n        var secondary = field.secondary;\n\n        // Determine the API query URL\n        var url = secondary.api_url || field.api_url;\n\n        // If the \"fields\" attribute is a function, call it with data\n        if (secondary.fields instanceof Function || secondary.fieldsFunction instanceof Function) {\n\n            // Extract form values at time of button press\n            var data = extractFormData(fields, options);\n\n            // Backup and execute fields function in sequential executions of modal\n            if (secondary.fields instanceof Function) {\n                secondary.fieldsFunction = secondary.fields;\n            } else if (secondary.fieldsFunction instanceof Function) {\n                secondary.fields = secondary.fieldsFunction;\n            }\n\n            secondary.fields = secondary.fields(data);\n        }\n\n        // If no onSuccess function is defined, provide a default one\n        if (!secondary.onSuccess) {\n            secondary.onSuccess = function(data) {\n\n                // Force refresh from the API, to get full detail\n                inventreeGet(`${url}${data.pk}/`, {}, {\n                    success: function(responseData) {\n                        setRelatedFieldData(field.name, responseData, options);\n                    }\n                });\n            };\n        }\n\n        // Relinquish keyboard focus for this modal\n        $(options.modal).modal({\n            keyboard: false,\n        });\n\n        // Method should be \"POST\" for creation\n        secondary.method = secondary.method || 'POST';\n\n        secondary.modal = null;\n\n        secondary.depth = depth + 1;\n\n        constructForm(\n            url,\n            secondary\n        );\n    });\n}\n\n\n/*\n * Initialize a single related-field\n *\n * argument:\n * - modal: DOM identifier for the modal window\n * - name: name of the field e.g. 'location'\n * - field: Field definition from the OPTIONS request\n * - options: Original options object provided by the client\n */\nfunction initializeRelatedField(field, fields, options={}) {\n\n    var name = field.name;\n\n    if (!field.api_url) {\n        console.warn(`Related field '${name}' missing 'api_url' parameter.`);\n        return;\n    }\n\n    // Find the select element and attach a select2 to it\n    var select = getFormFieldElement(name, options);\n\n    // Add a button to launch a 'secondary' modal\n    if (field.secondary != null) {\n        addSecondaryModal(field, fields, options);\n    }\n\n    // TODO: Add 'placeholder' support for entry select2 fields\n\n    // limit size for AJAX requests\n    var pageSize = options.pageSize || 25;\n\n    var parent = null;\n    var auto_width = false;\n    var width = '100%';\n\n    // Special considerations if the select2 input is a child of a modal\n    if (options && options.modal) {\n        parent = $(options.modal);\n        auto_width = true;\n        width = null;\n    }\n\n    select.select2({\n        placeholder: '',\n        dropdownParent: parent,\n        dropdownAutoWidth: auto_width,\n        width: width,\n        language: {\n            noResults: function(query) {\n                if (field.noResults) {\n                    return field.noResults(query);\n                } else {\n                    return '{% trans \"No results found\" %}';\n                }\n            }\n        },\n        ajax: {\n            url: field.api_url,\n            dataType: 'json',\n            delay: 250,\n            cache: true,\n            data: function(params) {\n\n                var offset = 0;\n\n                if (!params.page) {\n                    offset = 0;\n                } else {\n                    offset = (params.page - 1) * pageSize;\n                }\n\n                // Custom query filters can be specified against each field\n                var query = field.filters || {};\n\n                // Add search and pagination options\n                query.search = params.term;\n                query.offset = offset;\n                query.limit = pageSize;\n\n                // Allow custom run-time filter augmentation\n                if ('adjustFilters' in field) {\n                    query = field.adjustFilters(query, options);\n                }\n\n                return query;\n            },\n            processResults: function(response) {\n                // Convert the returned InvenTree data into select2-friendly format\n\n                var data = [];\n\n                var more = false;\n\n                if ('count' in response && 'results' in response) {\n                    // Response is paginated\n                    data = response.results;\n\n                    // Any more data available?\n                    if (response.next) {\n                        more = true;\n                    }\n\n                } else {\n                    // Non-paginated response\n                    data = response;\n                }\n\n                // Each 'row' must have the 'id' attribute\n                for (var idx = 0; idx < data.length; idx++) {\n                    data[idx].id = data[idx].pk;\n                }\n\n                // Ref: https://select2.org/data-sources/formats\n                var results = {\n                    results: data,\n                    pagination: {\n                        more: more,\n                    }\n                };\n\n                return results;\n            },\n        },\n        templateResult: function(item) {\n\n            // Extract 'instance' data passed through from an initial value\n            // Or, use the raw 'item' data as a backup\n            var data = item;\n\n            if (item.element && item.element.instance) {\n                data = item.element.instance;\n            }\n\n            if (!data.pk) {\n                return $(searching());\n            }\n\n            // Custom formatting for the search results\n            if (field.model) {\n                // If the 'model' is specified, hand it off to the custom model render\n                var html = renderModelData(name, field.model, data, field, options);\n                return $(html);\n            } else {\n                // Return a simple renderering\n                console.warn(`templateResult() missing 'field.model' for '${name}'`);\n                return `${name} - ${item.id}`;\n            }\n        },\n        templateSelection: function(item) {\n\n            // Extract 'instance' data passed through from an initial value\n            // Or, use the raw 'item' data as a backup\n            var data = item;\n\n            if (item.element && item.element.instance) {\n                data = item.element.instance;\n            }\n\n            // Run optional callback function\n            if (field.onSelect && data) {\n                field.onSelect(data, field, options);\n            }\n\n            if (!data.pk) {\n                return field.placeholder || '';\n            }\n\n            // Custom formatting for selected item\n            if (field.model) {\n                // If the 'model' is specified, hand it off to the custom model render\n                var html = renderModelData(name, field.model, data, field, options);\n                return $(html);\n            } else {\n                // Return a simple renderering\n                console.warn(`templateSelection() missing 'field.model' for '${name}'`);\n                return `${name} - ${item.id}`;\n            }\n        }\n    });\n\n    // If a 'value' is already defined, grab the model info from the server\n    if (field.value) {\n\n        var pk = field.value;\n        var url = `${field.api_url}/${pk}/`.replace('//', '/');\n\n        inventreeGet(url, field.filters || {}, {\n            success: function(data) {\n                setRelatedFieldData(name, data, options);\n            }\n        });\n    } else if (field.auto_fill) {\n        // Attempt to auto-fill the field\n\n        var filters = {};\n\n        // Update with nominal field fields\n        Object.assign(filters, field.filters || {});\n\n        // Update with filters only used for initial filtering\n        Object.assign(filters, field.auto_fill_filters || {});\n\n        // Enforce pagination, limit to a single return (for fast query)\n        filters.limit = 1;\n        filters.offset = 0;\n\n        inventreeGet(field.api_url, filters || {}, {\n            success: function(data) {\n\n                // Only a single result is available, given the provided filters\n                if (data.count == 1) {\n                    setRelatedFieldData(name, data.results[0], options);\n\n                    // Run \"callback\" function (if supplied)\n                    if (field.onEdit) {\n                        field.onEdit(data.results[0], name, field, options);\n                    }\n                }\n            }\n        });\n    }\n}\n\n\n/*\n * Set the value of a select2 instace for a \"related field\",\n * e.g. with data returned from a secondary modal\n *\n * arguments:\n * - name: The name of the field\n * - data: JSON data representing the model instance\n * - options: The modal form specifications\n */\nfunction setRelatedFieldData(name, data, options={}) {\n\n    var select = getFormFieldElement(name, options);\n\n    var option = new Option(name, data.pk, true, true);\n\n    // Assign the JSON data to the 'instance' attribute,\n    // so we can access and render it later\n    option.instance = data;\n\n    select.append(option).trigger('change');\n\n    select.trigger({\n        type: 'select2:select',\n        params: {\n            data: data\n        }\n    });\n}\n\n\nfunction initializeChoiceField(field, fields, options) {\n\n    var select = getFormFieldElement(field.name, options);\n\n    select.select2({\n        dropdownAutoWidth: false,\n        dropdownParent: $(options.modal),\n    });\n}\n\n\n// Render a 'no results' element\nfunction searching() {\n    return `<span>{% trans \"Searching\" %}...</span>`;\n}\n\n/*\n * Render a \"foreign key\" model reference in a select2 instance.\n * Allows custom rendering with access to the entire serialized object.\n *\n * arguments:\n * - name: The name of the field e.g. 'location'\n * - model: The name of the InvenTree model e.g. 'stockitem'\n * - data: The JSON data representation of the modal instance (GET request)\n * - parameters: The field definition (OPTIONS) request\n * - options: Other options provided at time of modal creation by the client\n */\nfunction renderModelData(name, model, data, parameters, options) {\n\n    if (!data) {\n        return parameters.placeholder || '';\n    }\n\n    // TODO: Implement this function for various models\n\n    var html = null;\n\n    var renderer = null;\n\n    // Find a custom renderer\n    switch (model) {\n    case 'company':\n        renderer = renderCompany;\n        break;\n    case 'stockitem':\n        renderer = renderStockItem;\n        break;\n    case 'stocklocation':\n        renderer = renderStockLocation;\n        break;\n    case 'part':\n        renderer = renderPart;\n        break;\n    case 'partcategory':\n        renderer = renderPartCategory;\n        break;\n    case 'partparametertemplate':\n        renderer = renderPartParameterTemplate;\n        break;\n    case 'purchaseorder':\n        renderer = renderPurchaseOrder;\n        break;\n    case 'salesorder':\n        renderer = renderSalesOrder;\n        break;\n    case 'salesordershipment':\n        renderer = renderSalesOrderShipment;\n        break;\n    case 'manufacturerpart':\n        renderer = renderManufacturerPart;\n        break;\n    case 'supplierpart':\n        renderer = renderSupplierPart;\n        break;\n    case 'build':\n        renderer = renderBuild;\n        break;\n    case 'owner':\n        renderer = renderOwner;\n        break;\n    case 'user':\n        renderer = renderUser;\n        break;\n    default:\n        break;\n    }\n\n    if (renderer != null) {\n        html = renderer(name, data, parameters, options);\n    }\n\n    if (html != null) {\n        return html;\n    } else {\n        console.error(`Rendering not implemented for model '${model}'`);\n        // Simple text rendering\n        return `${model} - ID ${data.id}`;\n    }\n}\n\n\n/*\n * Construct a field name for the given field\n */\nfunction getFieldName(name, options={}) {\n    var field_name = name;\n\n    if (options.field_suffix) {\n        field_name += options.field_suffix;\n    }\n\n    if (options && options.depth) {\n        field_name += `_${options.depth}`;\n    }\n\n    return field_name;\n}\n\n\n/*\n * Construct a single form 'field' for rendering in a form.\n *\n * arguments:\n * - name: The 'name' of the field\n * - parameters: The field parameters supplied by the DRF OPTIONS method\n *\n * options:\n * -\n *\n * The function constructs a fieldset which mostly replicates django \"crispy\" forms:\n *\n * - Field name\n * - Field <input> (depends on specified field type)\n * - Field description (help text)\n * - Field errors\n */\nfunction constructField(name, parameters, options={}) {\n\n    var html = '';\n\n    // Shortcut for simple visual fields\n    if (parameters.type == 'candy') {\n        return constructCandyInput(name, parameters, options);\n    }\n\n    var field_name = getFieldName(name, options);\n\n    // Hidden inputs are rendered without label / help text / etc\n    if (parameters.hidden) {\n        return constructHiddenInput(field_name, parameters, options);\n    }\n\n    // Are we ending a group?\n    if (options.current_group && parameters.group != options.current_group) {\n        html += `</div></div>`;\n\n        // Null out the current \"group\" so we can start a new one\n        options.current_group = null;\n    }\n\n    // Are we starting a new group?\n    if (parameters.group) {\n\n        var group = parameters.group;\n\n        var group_id = getFieldName(group, options);\n\n        var group_options = options.groups[group] || {};\n\n        // Are we starting a new group?\n        // Add HTML for the start of a separate panel\n        if (parameters.group != options.current_group) {\n\n            html += `\n            <div class='panel form-panel' id='form-panel-${group_id}' group='${group}'>\n                <div class='panel-heading form-panel-heading' id='form-panel-heading-${group_id}'>`;\n            if (group_options.collapsible) {\n                html += `\n                <div data-bs-toggle='collapse' data-bs-target='#form-panel-content-${group_id}'>\n                    <a href='#'><span id='group-icon-${group_id}' class='fas fa-angle-up'></span>\n                `;\n            } else {\n                html += `<div>`;\n            }\n\n            html += `<h4 style='display: inline;'>${group_options.title || group}</h4>`;\n\n            if (group_options.collapsible) {\n                html += `</a>`;\n            }\n\n            html += `\n                </div></div>\n                <div class='panel-content form-panel-content' id='form-panel-content-${group_id}'>\n            `;\n        }\n\n        // Keep track of the group we are in\n        options.current_group = group;\n    }\n\n    var form_classes = options.form_classes || 'form-group';\n\n    if (parameters.errors) {\n        form_classes += ' form-field-error';\n    }\n\n    // Optional content to render before the field\n    if (parameters.before) {\n        html += parameters.before;\n    }\n\n    var hover_title = '';\n\n    if (parameters.help_text) {\n        hover_title = ` title='${parameters.help_text}'`;\n    }\n\n    html += `<div id='div_id_${field_name}' class='${form_classes}' ${hover_title}>`;\n\n    // Add a label\n    if (!options.hideLabels) {\n        html += constructLabel(name, parameters);\n    }\n\n    html += `<div class='controls'>`;\n\n    // Does this input deserve \"extra\" decorators?\n    var extra = (parameters.icon != null) || (parameters.prefix != null) || (parameters.prefixRaw != null);\n\n    // Some fields can have 'clear' inputs associated with them\n    if (!parameters.required && !parameters.read_only) {\n        switch (parameters.type) {\n        case 'string':\n        case 'url':\n        case 'email':\n        case 'integer':\n        case 'float':\n        case 'decimal':\n        case 'related field':\n        case 'date':\n            extra = true;\n            break;\n        default:\n            break;\n        }\n    }\n\n    if (extra) {\n        html += `<div class='input-group'>`;\n\n        if (parameters.prefix) {\n            html += `<span class='input-group-text'>${parameters.prefix}</span>`;\n        } else if (parameters.prefixRaw) {\n            html += parameters.prefixRaw;\n        } else if (parameters.icon) {\n            html += `<span class='input-group-text'><span class='fas ${parameters.icon}'></span></span>`;\n        }\n    }\n\n    html += constructInput(field_name, parameters, options);\n\n    if (extra) {\n\n        if (!parameters.required && !options.hideClearButton) {\n            html += `\n            <span class='input-group-text form-clear' id='clear_${field_name}' title='{% trans \"Clear input\" %}'>\n                <span class='icon-red fas fa-backspace'></span>\n            </span>`;\n        }\n\n        html += `</div>`; // input-group\n    }\n\n    if (parameters.help_text && !options.hideLabels) {\n\n        // Boolean values are handled differently!\n        if (parameters.type != 'boolean' && !parameters.hidden) {\n            html += constructHelpText(name, parameters, options);\n        }\n    }\n\n    // Div for error messages\n    html += `<div id='errors-${field_name}'></div>`;\n\n    html += `</div>`; // controls\n    html += `</div>`; // form-group\n\n    if (parameters.after) {\n        html += parameters.after;\n    }\n\n    return html;\n}\n\n\n/*\n * Construct a 'label' div\n *\n * arguments:\n * - name: The name of the field\n * - required: Is this a required field?\n */\nfunction constructLabel(name, parameters) {\n\n    var label_classes = 'control-label';\n\n    if (parameters.required) {\n        label_classes += ' requiredField';\n    }\n\n    var html = `<label class='${label_classes}' for='id_${name}'>`;\n\n    if (parameters.label) {\n        html += `${parameters.label}`;\n    } else {\n        html += `${name}`;\n    }\n\n    if (parameters.required) {\n        html += `<span class='asteriskField'>*</span>`;\n    }\n\n    html += `</label>`;\n\n    return html;\n}\n\n\n/*\n * Construct a form input based on the field parameters\n *\n * arguments:\n * - name: The name of the field\n * - parameters: Field parameters returned by the OPTIONS method\n *\n */\nfunction constructInput(name, parameters, options={}) {\n\n    var html = '';\n\n    var func = null;\n\n    switch (parameters.type) {\n    case 'boolean':\n        func = constructCheckboxInput;\n        break;\n    case 'string':\n    case 'url':\n    case 'email':\n        func = constructTextInput;\n        break;\n    case 'integer':\n    case 'float':\n    case 'decimal':\n        func = constructNumberInput;\n        break;\n    case 'choice':\n        func = constructChoiceInput;\n        break;\n    case 'related field':\n        func = constructRelatedFieldInput;\n        break;\n    case 'image upload':\n    case 'file upload':\n        func = constructFileUploadInput;\n        break;\n    case 'date':\n        func = constructDateInput;\n        break;\n    case 'candy':\n        func = constructCandyInput;\n        break;\n    case 'raw':\n        func = constructRawInput;\n    default:\n        // Unsupported field type!\n        break;\n    }\n\n    if (func != null) {\n        html = func(name, parameters, options);\n    } else {\n        console.warn(`Unhandled form field type: '${parameters.type}'`);\n    }\n\n    return html;\n}\n\n\n// Construct a set of default input options which apply to all input types\nfunction constructInputOptions(name, classes, type, parameters, options={}) {\n\n    var opts = [];\n\n    opts.push(`id='id_${name}'`);\n\n    opts.push(`class='${classes}'`);\n\n    opts.push(`name='${name}'`);\n\n    opts.push(`type='${type}'`);\n\n    if (parameters.title || parameters.help_text) {\n        opts.push(`title='${parameters.title || parameters.help_text}'`);\n    }\n\n    // Read only?\n    if (parameters.read_only) {\n        opts.push(`readonly=''`);\n    }\n\n    if (parameters.value != null) {\n        if (parameters.type == 'boolean') {\n            // Special consideration of a boolean (checkbox) value\n            if (parameters.value == true || parameters.value.toString().toLowerCase() == 'true') {\n                opts.push('checked');\n            }\n        } else {\n            // Existing value?\n            opts.push(`value='${parameters.value}'`);\n        }\n    } else if (parameters.default != null) {\n        // Otherwise, a defualt value?\n        opts.push(`value='${parameters.default}'`);\n    }\n\n    // Maximum input length\n    if (parameters.max_length != null) {\n        opts.push(`maxlength='${parameters.max_length}'`);\n    }\n\n    // Minimum input length\n    if (parameters.min_length != null) {\n        opts.push(`minlength='${parameters.min_length}'`);\n    }\n\n    // Maximum value\n    if (parameters.max_value != null) {\n        opts.push(`max='${parameters.max_value}'`);\n    }\n\n    // Minimum value\n    if (parameters.min_value != null) {\n        opts.push(`min='${parameters.min_value}'`);\n    }\n\n    // Field is required?\n    if (parameters.required) {\n        opts.push(`required=''`);\n    }\n\n    // Placeholder?\n    if (parameters.placeholder != null) {\n        opts.push(`placeholder='${parameters.placeholder}'`);\n    }\n\n    switch (parameters.type) {\n    case 'boolean':\n        break;\n    case 'integer':\n    case 'float':\n    case 'decimal':\n        opts.push(`step='any'`);\n        break;\n    default:\n        break;\n    }\n\n    if (parameters.multiline) {\n        return `<textarea ${opts.join(' ')}></textarea>`;\n    } else if (parameters.type == 'boolean') {\n\n        if (parameters.hidden) {\n            return '';\n        }\n\n        var help_text = '';\n\n        if (!options.hideLabels && parameters.help_text) {\n            help_text = `<em><small>${parameters.help_text}</small></em>`;\n        }\n\n        return `\n        <div class='form-check form-switch'>\n            <input ${opts.join(' ')}>\n            <label class='form-check-label' for=''>\n                ${help_text}\n            </label>\n        </div>\n        `;\n    } else {\n        return `<input ${opts.join(' ')}>`;\n    }\n}\n\n\n// Construct a \"hidden\" input\nfunction constructHiddenInput(name, parameters, options={}) {\n\n    return constructInputOptions(\n        name,\n        'hiddeninput',\n        'hidden',\n        parameters,\n        options\n    );\n}\n\n\n// Construct a \"checkbox\" input\nfunction constructCheckboxInput(name, parameters, options={}) {\n\n    return constructInputOptions(\n        name,\n        'form-check-input',\n        'checkbox',\n        parameters,\n        options\n    );\n}\n\n\n// Construct a \"text\" input\nfunction constructTextInput(name, parameters) {\n\n    var classes = '';\n    var type = '';\n\n    switch (parameters.type) {\n    default:\n        classes = 'textinput textInput form-control';\n        type = 'text';\n        break;\n    case 'url':\n        classes = 'urlinput form-control';\n        type = 'url';\n        break;\n    case 'email':\n        classes = 'emailinput form-control';\n        type = 'email';\n        break;\n    }\n\n    return constructInputOptions(\n        name,\n        classes,\n        type,\n        parameters\n    );\n}\n\n\n// Construct a \"number\" field\nfunction constructNumberInput(name, parameters) {\n\n    return constructInputOptions(\n        name,\n        'numberinput form-control',\n        'number',\n        parameters\n    );\n}\n\n\n// Construct a \"choice\" input\nfunction constructChoiceInput(name, parameters) {\n\n    var html = `<select id='id_${name}' class='select form-control' name='${name}'>`;\n\n    var choices = parameters.choices || [];\n\n    for (var idx = 0; idx < choices.length; idx++) {\n\n        var choice = choices[idx];\n\n        var selected = '';\n\n        if (parameters.value && parameters.value == choice.value) {\n            selected = ` selected=''`;\n        }\n\n        html += `<option value='${choice.value}'${selected}>`;\n        html += `${choice.display_name}`;\n        html += `</option>`;\n    }\n\n    html += `</select>`;\n\n    return html;\n}\n\n\n/*\n * Construct a \"related field\" input.\n * This will create a \"select\" input which will then, (after form is loaded),\n * be converted into a select2 input.\n * This will then be served custom data from the API (as required)...\n */\nfunction constructRelatedFieldInput(name) {\n\n    var html = `<select id='id_${name}' class='select form-control' name='${name}'></select>`;\n\n    // Don't load any options - they will be filled via an AJAX request\n\n    return html;\n}\n\n\n/*\n * Construct a field for file upload\n */\nfunction constructFileUploadInput(name, parameters) {\n\n    var cls = 'clearablefileinput';\n\n    if (parameters.required) {\n        cls = 'fileinput';\n    }\n\n    return constructInputOptions(\n        name,\n        cls,\n        'file',\n        parameters\n    );\n}\n\n\n/*\n * Construct a field for a date input\n */\nfunction constructDateInput(name, parameters) {\n\n    return constructInputOptions(\n        name,\n        'dateinput form-control',\n        'date',\n        parameters\n    );\n}\n\n\n/*\n * Construct a \"candy\" field input\n * No actual field data!\n */\nfunction constructCandyInput(name, parameters) {\n\n    return parameters.html;\n\n}\n\n\n/*\n * Construct a \"raw\" field input\n * No actual field data!\n */\nfunction constructRawInput(name, parameters) {\n\n    return parameters.html;\n\n}\n\n\n/*\n * Construct a 'help text' div based on the field parameters\n *\n * arguments:\n * - name: The name of the field\n * - parameters: Field parameters returned by the OPTIONS method\n *\n */\nfunction constructHelpText(name, parameters) {\n\n    var html = `<div id='hint_id_${name}' class='help-block'><i>${parameters.help_text}</i></div>`;\n\n    return html;\n}\n\n\n/*\n * Construct a dialog to select import fields\n */\nfunction selectImportFields(url, data={}, options={}) {\n\n    if (!data.model_fields) {\n        console.warn(`selectImportFields is missing 'model_fields'`);\n        return;\n    }\n\n    if (!data.file_fields) {\n        console.warn(`selectImportFields is missing 'file_fields'`);\n        return;\n    }\n\n    var choices = [];\n\n    // Add an \"empty\" value\n    choices.push({\n        value: '',\n        display_name: '-----',\n    });\n\n    for (const [name, field] of Object.entries(data.model_fields)) {\n        choices.push({\n            value: name,\n            display_name: field.label || name,\n        });\n    }\n\n    var rows = '';\n\n    var field_names = Object.keys(data.file_fields);\n\n    for (var idx = 0; idx < field_names.length; idx++) {\n\n        var field_name = field_names[idx];\n\n        var choice_input = constructInput(\n            `column_${idx}`,\n            {\n                type: 'choice',\n                label: field_name,\n                value: data.file_fields[field_name].value,\n                choices: choices,\n            }\n        );\n\n        rows += `<tr><td><em>${field_name}</em></td><td>${choice_input}</td></tr>`;\n    }\n\n    var headers = `<tr><th>{% trans \"File Column\" %}</th><th>{% trans \"Field Name\" %}</th></tr>`;\n\n    var html = '';\n\n    if (options.preamble) {\n        html += options.preamble;\n    }\n\n    html += `<table class='table table-condensed'>${headers}${rows}</table>`;\n\n    constructForm(url, {\n        method: 'POST',\n        title: '{% trans \"Select Columns\" %}',\n        fields: {},\n        preFormContent: html,\n        onSubmit: function(fields, opts) {\n\n            var columns = [];\n\n            for (var idx = 0; idx < field_names.length; idx++) {\n                columns.push(getFormFieldValue(`column_${idx}`, {}, opts));\n            }\n\n            $(opts.modal).find('#modal-progress-spinner').show();\n\n            inventreePut(\n                opts.url,\n                {\n                    columns: columns,\n                    rows: data.rows,\n                },\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        handleFormSuccess(response, opts);\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n\n                        $(opts.modal).find('#modal-progress-spinner').hide();\n\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n\n                            console.error(`upload error at ${opts.url}`);\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        },\n    });\n}\n", "patch": "@@ -204,6 +204,9 @@ function constructChangeForm(fields, options) {\n         },\n         success: function(data) {\n \n+            // Ensure the data are fully sanitized before we operate on it\n+            data = sanitizeData(data);\n+\n             // An optional function can be provided to process the returned results,\n             // before they are rendered to the form\n             if (options.processResults) {", "file_path": "files/2022_6/425", "file_language": "js", "file_name": "InvenTree/templates/js/translated/forms.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Ftemplates%2Fjs%2Ftranslated%2Fstock.js", "code": "{% load i18n %}\n{% load inventree_extras %}\n{% load status_codes %}\n\n/* globals\n    attachSelect,\n    closeModal,\n    constructField,\n    constructFormBody,\n    getFormFieldValue,\n    global_settings,\n    handleFormErrors,\n    imageHoverIcon,\n    inventreeDelete,\n    inventreeGet,\n    inventreePut,\n    launchModalForm,\n    linkButtonsToSelection,\n    loadTableFilters,\n    makeIconBadge,\n    makeIconButton,\n    makeOptionsList,\n    makePartIcons,\n    modalEnable,\n    modalSetContent,\n    modalSetTitle,\n    modalSubmit,\n    openModal,\n    printStockItemLabels,\n    printTestReports,\n    renderLink,\n    scanItemsIntoLocation,\n    showAlertDialog,\n    setupFilterList,\n    showApiError,\n    stockStatusDisplay,\n*/\n\n/* exported\n    assignStockToCustomer,\n    createNewStockItem,\n    createStockLocation,\n    duplicateStockItem,\n    editStockItem,\n    editStockLocation,\n    findStockItemBySerialNumber,\n    installStockItem,\n    loadInstalledInTable,\n    loadStockLocationTable,\n    loadStockTable,\n    loadStockTestResultsTable,\n    loadStockTrackingTable,\n    loadTableFilters,\n    mergeStockItems,\n    removeStockRow,\n    serializeStockItem,\n    stockItemFields,\n    stockLocationFields,\n    stockStatusCodes,\n    uninstallStockItem,\n*/\n\n\n/*\n * Launches a modal form to serialize a particular StockItem\n */\n\nfunction serializeStockItem(pk, options={}) {\n\n    var url = `/api/stock/${pk}/serialize/`;\n\n    options.method = 'POST';\n    options.title = '{% trans \"Serialize Stock Item\" %}';\n\n    options.fields = {\n        quantity: {},\n        serial_numbers: {\n            icon: 'fa-hashtag',\n        },\n        destination: {\n            icon: 'fa-sitemap',\n        },\n        notes: {},\n    };\n\n    if (options.part) {\n        // Work out the next available serial number\n        inventreeGet(`/api/part/${options.part}/serial-numbers/`, {}, {\n            success: function(data) {\n                if (data.next) {\n                    options.fields.serial_numbers.placeholder = `{% trans \"Next available serial number\" %}: ${data.next}`;\n                } else if (data.latest) {\n                    options.fields.serial_numbers.placeholder = `{% trans \"Latest serial number\" %}: ${data.latest}`;\n                }\n            },\n            async: false,\n        });\n    }\n\n    options.confirm = true;\n    options.confirmMessage = '{% trans \"Confirm Stock Serialization\" %}';\n\n    constructForm(url, options);\n}\n\n\nfunction stockLocationFields(options={}) {\n    var fields = {\n        parent: {\n            help_text: '{% trans \"Parent stock location\" %}',\n            required: false,\n        },\n        name: {},\n        description: {},\n        owner: {},\n    };\n\n    if (options.parent) {\n        fields.parent.value = options.parent;\n    }\n\n    if (!global_settings.STOCK_OWNERSHIP_CONTROL) {\n        delete fields['owner'];\n    }\n\n    return fields;\n}\n\n\n/*\n * Launch an API form to edit a stock location\n */\nfunction editStockLocation(pk, options={}) {\n\n    var url = `/api/stock/location/${pk}/`;\n\n    options.fields = stockLocationFields(options);\n\n    options.title = '{% trans \"Edit Stock Location\" %}';\n\n    constructForm(url, options);\n}\n\n\n/*\n * Launch an API form to create a new stock location\n */\nfunction createStockLocation(options={}) {\n\n    var url = '{% url \"api-location-list\" %}';\n\n    options.method = 'POST';\n    options.fields = stockLocationFields(options);\n    options.title = '{% trans \"New Stock Location\" %}';\n\n    constructForm(url, options);\n}\n\n\nfunction stockItemFields(options={}) {\n    var fields = {\n        part: {\n            // Hide the part field unless we are \"creating\" a new stock item\n            hidden: !options.create,\n            onSelect: function(data, field, opts) {\n                // Callback when a new \"part\" is selected\n\n                // If we are \"creating\" a new stock item,\n                // change the available fields based on the part properties\n                if (options.create) {\n\n                    // If a \"trackable\" part is selected, enable serial number field\n                    if (data.trackable) {\n                        enableFormInput('serial_numbers', opts);\n\n                        // Request part serial number information from the server\n                        inventreeGet(`/api/part/${data.pk}/serial-numbers/`, {}, {\n                            success: function(data) {\n                                var placeholder = '';\n                                if (data.next) {\n                                    placeholder = `{% trans \"Next available serial number\" %}: ${data.next}`;\n                                } else if (data.latest) {\n                                    placeholder = `{% trans \"Latest serial number\" %}: ${data.latest}`;\n                                }\n\n                                setFormInputPlaceholder('serial_numbers', placeholder, opts);\n                            }\n                        });\n\n                    } else {\n                        clearFormInput('serial_numbers', opts);\n                        disableFormInput('serial_numbers', opts);\n\n                        setFormInputPlaceholder('serial_numbers', '{% trans \"This part cannot be serialized\" %}', opts);\n                    }\n\n                    // Enable / disable fields based on purchaseable status\n                    if (data.purchaseable) {\n                        enableFormInput('supplier_part', opts);\n                        enableFormInput('purchase_price', opts);\n                        enableFormInput('purchase_price_currency', opts);\n                    } else {\n                        clearFormInput('supplier_part', opts);\n                        clearFormInput('purchase_price', opts);\n\n                        disableFormInput('supplier_part', opts);\n                        disableFormInput('purchase_price', opts);\n                        disableFormInput('purchase_price_currency', opts);\n                    }\n                }\n            }\n        },\n        supplier_part: {\n            icon: 'fa-building',\n            filters: {\n                part_detail: true,\n                supplier_detail: true,\n            },\n            adjustFilters: function(query, opts) {\n                var part = getFormFieldValue('part', {}, opts);\n\n                if (part) {\n                    query.part = part;\n                }\n\n                return query;\n            }\n        },\n        location: {\n            icon: 'fa-sitemap',\n        },\n        quantity: {\n            help_text: '{% trans \"Enter initial quantity for this stock item\" %}',\n        },\n        serial_numbers: {\n            icon: 'fa-hashtag',\n            type: 'string',\n            label: '{% trans \"Serial Numbers\" %}',\n            help_text: '{% trans \"Enter serial numbers for new stock (or leave blank)\" %}',\n            required: false,\n        },\n        serial: {\n            icon: 'fa-hashtag',\n        },\n        batch: {\n            icon: 'fa-layer-group',\n        },\n        status: {},\n        expiry_date: {},\n        purchase_price: {\n            icon: 'fa-dollar-sign',\n        },\n        purchase_price_currency: {},\n        packaging: {\n            icon: 'fa-box',\n        },\n        link: {\n            icon: 'fa-link',\n        },\n        owner: {},\n        delete_on_deplete: {},\n    };\n\n    if (options.create) {\n        // Use special \"serial numbers\" field when creating a new stock item\n        delete fields['serial'];\n    } else {\n        // These fields cannot be edited once the stock item has been created\n        delete fields['serial_numbers'];\n        delete fields['quantity'];\n        delete fields['location'];\n    }\n\n    // Remove stock expiry fields if feature is not enabled\n    if (!global_settings.STOCK_ENABLE_EXPIRY) {\n        delete fields['expiry_date'];\n    }\n\n    // Remove ownership field if feature is not enanbled\n    if (!global_settings.STOCK_OWNERSHIP_CONTROL) {\n        delete fields['owner'];\n    }\n\n    return fields;\n}\n\n\nfunction stockItemGroups(options={}) {\n    return {\n\n    };\n}\n\n\n/*\n * Launch a modal form to duplicate a given StockItem\n */\nfunction duplicateStockItem(pk, options) {\n\n    // If no \"success\" function provided, add a default\n    if (!options.onSuccess) {\n        options.onSuccess = function(response) {\n\n            showAlertOrCache('{% trans \"Stock item duplicated\" %}', true, {style: 'success'});\n\n            window.location.href = `/stock/item/${response.pk}/`;\n        };\n    }\n\n    // First, we need the StockItem information\n    inventreeGet(`/api/stock/${pk}/`, {}, {\n        success: function(data) {\n\n            // Do not duplicate the serial number\n            delete data['serial'];\n\n            options.data = data;\n\n            options.create = true;\n            options.fields = stockItemFields(options);\n            options.groups = stockItemGroups(options);\n\n            options.method = 'POST';\n            options.title = '{% trans \"Duplicate Stock Item\" %}';\n\n            constructForm('{% url \"api-stock-list\" %}', options);\n        }\n    });\n}\n\n\n/*\n * Launch a modal form to edit a given StockItem\n */\nfunction editStockItem(pk, options={}) {\n\n    var url = `/api/stock/${pk}/`;\n\n    options.create = false;\n\n    options.fields = stockItemFields(options);\n    options.groups = stockItemGroups(options);\n\n    options.title = '{% trans \"Edit Stock Item\" %}';\n\n    // Query parameters for retrieving stock item data\n    options.params = {\n        part_detail: true,\n        supplier_part_detail: true,\n    };\n\n    // Augment the rendered form when we receive information about the StockItem\n    options.processResults = function(data, fields, options) {\n        if (data.part_detail.trackable) {\n            delete options.fields.delete_on_deplete;\n        } else {\n            // Remove serial number field if part is not trackable\n            delete options.fields.serial;\n        }\n\n        // Remove pricing fields if part is not purchaseable\n        if (!data.part_detail.purchaseable) {\n            delete options.fields.supplier_part;\n            delete options.fields.purchase_price;\n            delete options.fields.purchase_price_currency;\n        }\n    };\n\n    constructForm(url, options);\n}\n\n\n/*\n * Launch an API form to contsruct a new stock item\n */\nfunction createNewStockItem(options={}) {\n\n    var url = '{% url \"api-stock-list\" %}';\n\n    options.title = '{% trans \"New Stock Item\" %}';\n    options.method = 'POST';\n\n    options.create = true;\n\n    options.fields = stockItemFields(options);\n    options.groups = stockItemGroups(options);\n\n    if (!options.onSuccess) {\n        options.onSuccess = function(response) {\n            // If a single stock item has been created, follow it!\n            if (response.pk) {\n                var url = `/stock/item/${response.pk}/`;\n\n                addCachedAlert('{% trans \"Created new stock item\" %}', {\n                    icon: 'fas fa-boxes',\n                });\n\n                window.location.href = url;\n            } else {\n\n                // Multiple stock items have been created (i.e. serialized stock)\n                var details = `\n                <br>{% trans \"Quantity\" %}: ${response.quantity}\n                <br>{% trans \"Serial Numbers\" %}: ${response.serial_numbers}\n                `;\n\n                showMessage('{% trans \"Created multiple stock items\" %}', {\n                    icon: 'fas fa-boxes',\n                    details: details,\n                });\n\n                var table = options.table || '#stock-table';\n\n                // Reload the table\n                $(table).bootstrapTable('refresh');\n            }\n        };\n    }\n\n    constructForm(url, options);\n}\n\n/*\n * Launch a modal form to find a particular stock item by serial number.\n * Arguments:\n * - part: ID (PK) of the part in question\n */\n\nfunction findStockItemBySerialNumber(part_id) {\n\n    constructFormBody({}, {\n        title: '{% trans \"Find Serial Number\" %}',\n        fields: {\n            serial: {\n                label: '{% trans \"Serial Number\" %}',\n                help_text: '{% trans \"Enter serial number\" %}',\n                placeholder: '{% trans \"Enter serial number\" %}',\n                required: true,\n                type: 'string',\n                value: '',\n            }\n        },\n        onSubmit: function(fields, opts) {\n\n            var serial = getFormFieldValue('serial', fields['serial'], opts);\n\n            serial = serial.toString().trim();\n\n            if (!serial) {\n                handleFormErrors(\n                    {\n                        'serial': [\n                            '{% trans \"Enter a serial number\" %}',\n                        ]\n                    }, fields, opts\n                );\n                return;\n            }\n\n            inventreeGet(\n                '{% url \"api-stock-list\" %}',\n                {\n                    part_tree: part_id,\n                    serial: serial,\n                },\n                {\n                    success: function(response) {\n                        if (response.length == 0) {\n                            // No results!\n                            handleFormErrors(\n                                {\n                                    'serial': [\n                                        '{% trans \"No matching serial number\" %}',\n                                    ]\n                                }, fields, opts\n                            );\n                        } else if (response.length > 1) {\n                            // Too many results!\n                            handleFormErrors(\n                                {\n                                    'serial': [\n                                        '{% trans \"More than one matching result found\" %}',\n                                    ]\n                                }, fields, opts\n                            );\n                        } else {\n                            $(opts.modal).modal('hide');\n\n                            // Redirect\n                            var pk = response[0].pk;\n                            location.href = `/stock/item/${pk}/`;\n                        }\n                    },\n                    error: function(xhr) {\n                        showApiError(xhr, opts.url);\n                        $(opts.modal).modal('hide');\n                    }\n                }\n            );\n        }\n    });\n}\n\n\n/* Stock API functions\n * Requires api.js to be loaded first\n */\n\nfunction stockStatusCodes() {\n    return [\n        {% for code in StockStatus.list %}\n        {\n            key: {{ code.key }},\n            text: '{{ code.value }}',\n        },\n        {% endfor %}\n    ];\n}\n\n\n/**\n * Assign multiple stock items to a customer\n */\nfunction assignStockToCustomer(items, options={}) {\n\n    // Generate HTML content for the form\n    var html = `\n    <table class='table table-striped table-condensed' id='stock-assign-table'>\n    <thead>\n        <tr>\n            <th>{% trans \"Part\" %}</th>\n            <th>{% trans \"Stock Item\" %}</th>\n            <th>{% trans \"Location\" %}</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n    `;\n\n    for (var idx = 0; idx < items.length; idx++) {\n\n        var item = items[idx];\n\n        var pk = item.pk;\n\n        var part = item.part_detail;\n\n        var thumbnail = thumbnailImage(part.thumbnail || part.image);\n\n        var status = stockStatusDisplay(item.status, {classes: 'float-right'});\n\n        var quantity = '';\n\n        if (item.serial && item.quantity == 1) {\n            quantity = `{% trans \"Serial\" %}: ${item.serial}`;\n        } else {\n            quantity = `{% trans \"Quantity\" %}: ${item.quantity}`;\n        }\n\n        quantity += status;\n\n        var location = locationDetail(item, false);\n\n        var buttons = `<div class='btn-group' role='group'>`;\n\n        buttons += makeIconButton(\n            'fa-times icon-red',\n            'button-stock-item-remove',\n            pk,\n            '{% trans \"Remove row\" %}',\n        );\n\n        buttons += '</div>';\n\n        html += `\n        <tr id='stock_item_${pk}' class='stock-item-row'>\n            <td id='part_${pk}'>${thumbnail} ${part.full_name}</td>\n            <td id='stock_${pk}'>\n                <div id='div_id_items_item_${pk}'>\n                    ${quantity}\n                    <div id='errors-items_item_${pk}'></div>\n                </div>\n            </td>\n            <td id='location_${pk}'>${location}</td>\n            <td id='buttons_${pk}'>${buttons}</td>\n        </tr>\n        `;\n    }\n\n    html += `</tbody></table>`;\n\n    constructForm('{% url \"api-stock-assign\" %}', {\n        method: 'POST',\n        preFormContent: html,\n        fields: {\n            customer: {\n                value: options.customer,\n                filters: {\n                    is_customer: true,\n                },\n            },\n            notes: {},\n        },\n        confirm: true,\n        confirmMessage: '{% trans \"Confirm stock assignment\" %}',\n        title: '{% trans \"Assign Stock to Customer\" %}',\n        afterRender: function(fields, opts) {\n            // Add button callbacks to remove rows\n            $(opts.modal).find('.button-stock-item-remove').click(function() {\n                var pk = $(this).attr('pk');\n\n                $(opts.modal).find(`#stock_item_${pk}`).remove();\n            });\n        },\n        onSubmit: function(fields, opts) {\n\n            // Extract data elements from the form\n            var data = {\n                customer: getFormFieldValue('customer', {}, opts),\n                notes: getFormFieldValue('notes', {}, opts),\n                items: [],\n            };\n\n            var item_pk_values = [];\n\n            items.forEach(function(item) {\n                var pk = item.pk;\n\n                // Does the row exist in the form?\n                var row = $(opts.modal).find(`#stock_item_${pk}`);\n\n                if (row.exists()) {\n                    item_pk_values.push(pk);\n\n                    data.items.push({\n                        item: pk,\n                    });\n                }\n            });\n\n            opts.nested = {\n                'items': item_pk_values,\n            };\n\n            inventreePut(\n                '{% url \"api-stock-assign\" %}',\n                data,\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        $(opts.modal).modal('hide');\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        }\n    });\n}\n\n\n/**\n * Merge multiple stock items together\n */\nfunction mergeStockItems(items, options={}) {\n\n    // Generate HTML content for the form\n    var html = `\n    <div class='alert alert-block alert-danger'>\n    <h5>{% trans \"Warning: Merge operation cannot be reversed\" %}</h5>\n    <strong>{% trans \"Some information will be lost when merging stock items\" %}:</strong>\n    <ul>\n        <li>{% trans \"Stock transaction history will be deleted for merged items\" %}</li>\n        <li>{% trans \"Supplier part information will be deleted for merged items\" %}</li>\n    </ul>\n    </div>\n    `;\n\n    html += `\n    <table class='table table-striped table-condensed' id='stock-merge-table'>\n    <thead>\n        <tr>\n            <th>{% trans \"Part\" %}</th>\n            <th>{% trans \"Stock Item\" %}</th>\n            <th>{% trans \"Location\" %}</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n    `;\n\n    // Keep track of how many \"locations\" there are\n    var locations = [];\n\n    for (var idx = 0; idx < items.length; idx++) {\n        var item = items[idx];\n\n        var pk = item.pk;\n\n        if (item.location && !locations.includes(item.location)) {\n            locations.push(item.location);\n        }\n\n        var part = item.part_detail;\n        var location = locationDetail(item, false);\n\n        var thumbnail = thumbnailImage(part.thumbnail || part.image);\n\n        var quantity = '';\n\n        if (item.serial && item.quantity == 1) {\n            quantity = `{% trans \"Serial\" %}: ${item.serial}`;\n        } else {\n            quantity = `{% trans \"Quantity\" %}: ${item.quantity}`;\n        }\n\n        quantity += stockStatusDisplay(item.status, {classes: 'float-right'});\n\n        var buttons = `<div class='btn-group' role='group'>`;\n\n        buttons += makeIconButton(\n            'fa-times icon-red',\n            'button-stock-item-remove',\n            pk,\n            '{% trans \"Remove row\" %}',\n        );\n\n        html += `\n        <tr id='stock_item_${pk}' class='stock-item-row'>\n            <td id='part_${pk}'>${thumbnail} ${part.full_name}</td>\n            <td id='stock_${pk}'>\n                <div id='div_id_items_item_${pk}'>\n                    ${quantity}\n                    <div id='errors-items_item_${pk}'></div>\n                </div>\n            </td>\n            <td id='location_${pk}'>${location}</td>\n            <td id='buttons_${pk}'>${buttons}</td>\n        </tr>\n        `;\n    }\n\n    html += '</tbody></table>';\n\n    var location = locations.length == 1 ? locations[0] : null;\n\n    constructForm('{% url \"api-stock-merge\" %}', {\n        method: 'POST',\n        preFormContent: html,\n        fields: {\n            location: {\n                value: location,\n                icon: 'fa-sitemap',\n            },\n            notes: {},\n            allow_mismatched_suppliers: {},\n            allow_mismatched_status: {},\n        },\n        confirm: true,\n        confirmMessage: '{% trans \"Confirm stock item merge\" %}',\n        title: '{% trans \"Merge Stock Items\" %}',\n        afterRender: function(fields, opts) {\n            // Add button callbacks to remove rows\n            $(opts.modal).find('.button-stock-item-remove').click(function() {\n                var pk = $(this).attr('pk');\n\n                $(opts.modal).find(`#stock_item_${pk}`).remove();\n            });\n        },\n        onSubmit: function(fields, opts) {\n\n            // Extract data elements from the form\n            var data = {\n                items: [],\n            };\n\n            var item_pk_values = [];\n\n            items.forEach(function(item) {\n                var pk = item.pk;\n\n                // Does the row still exist in the form?\n                var row = $(opts.modal).find(`#stock_item_${pk}`);\n\n                if (row.exists()) {\n                    item_pk_values.push(pk);\n\n                    data.items.push({\n                        item: pk,\n                    });\n                }\n            });\n\n            var extra_fields = [\n                'location',\n                'notes',\n                'allow_mismatched_suppliers',\n                'allow_mismatched_status',\n            ];\n\n            extra_fields.forEach(function(field) {\n                data[field] = getFormFieldValue(field, fields[field], opts);\n            });\n\n            opts.nested = {\n                'items': item_pk_values\n            };\n\n            // Submit the form data\n            inventreePut(\n                '{% url \"api-stock-merge\" %}',\n                data,\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        $(opts.modal).modal('hide');\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        }\n    });\n}\n\n\n/**\n * Perform stock adjustments\n */\nfunction adjustStock(action, items, options={}) {\n\n    var formTitle = 'Form Title Here';\n    var actionTitle = null;\n\n    // API url\n    var url = null;\n\n    var specifyLocation = false;\n    var allowSerializedStock = false;\n\n    switch (action) {\n    case 'move':\n        formTitle = '{% trans \"Transfer Stock\" %}';\n        actionTitle = '{% trans \"Move\" %}';\n        specifyLocation = true;\n        allowSerializedStock = true;\n        url = '{% url \"api-stock-transfer\" %}';\n        break;\n    case 'count':\n        formTitle = '{% trans \"Count Stock\" %}';\n        actionTitle = '{% trans \"Count\" %}';\n        url = '{% url \"api-stock-count\" %}';\n        break;\n    case 'take':\n        formTitle = '{% trans \"Remove Stock\" %}';\n        actionTitle = '{% trans \"Take\" %}';\n        url = '{% url \"api-stock-remove\" %}';\n        break;\n    case 'add':\n        formTitle = '{% trans \"Add Stock\" %}';\n        actionTitle = '{% trans \"Add\" %}';\n        url = '{% url \"api-stock-add\" %}';\n        break;\n    case 'delete':\n        formTitle = '{% trans \"Delete Stock\" %}';\n        allowSerializedStock = true;\n        break;\n    default:\n        break;\n    }\n\n    // Generate modal HTML content\n    var html = `\n    <table class='table table-striped table-condensed' id='stock-adjust-table'>\n    <thead>\n    <tr>\n        <th>{% trans \"Part\" %}</th>\n        <th>{% trans \"Stock\" %}</th>\n        <th>{% trans \"Location\" %}</th>\n        <th>${actionTitle || ''}</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    `;\n\n    var itemCount = 0;\n\n    for (var idx = 0; idx < items.length; idx++) {\n\n        var item = items[idx];\n\n        if ((item.serial != null) && !allowSerializedStock) {\n            continue;\n        }\n\n        var pk = item.pk;\n\n        var readonly = (item.serial != null);\n        var minValue = null;\n        var maxValue = null;\n        var value = null;\n\n        switch (action) {\n        case 'move':\n            minValue = 0;\n            maxValue = item.quantity;\n            value = item.quantity;\n            break;\n        case 'add':\n            minValue = 0;\n            value = 0;\n            break;\n        case 'take':\n            minValue = 0;\n            value = 0;\n            break;\n        case 'count':\n            minValue = 0;\n            value = item.quantity;\n            break;\n        default:\n            break;\n        }\n\n        var thumb = thumbnailImage(item.part_detail.thumbnail || item.part_detail.image);\n\n        var status = stockStatusDisplay(item.status, {\n            classes: 'float-right'\n        });\n\n        var quantity = item.quantity;\n\n        var location = locationDetail(item, false);\n\n        if (item.location_detail) {\n            location = item.location_detail.pathstring;\n        }\n\n        if (item.serial != null) {\n            quantity = `#${item.serial}`;\n        }\n\n        if (item.batch) {\n            quantity += ` - <small>{% trans \"Batch\" %}: ${item.batch}</small>`;\n        }\n\n        var actionInput = '';\n\n        if (actionTitle != null) {\n            actionInput = constructField(\n                `items_quantity_${pk}`,\n                {\n                    type: 'decimal',\n                    min_value: minValue,\n                    max_value: maxValue,\n                    value: value,\n                    title: readonly ? '{% trans \"Quantity cannot be adjusted for serialized stock\" %}' : '{% trans \"Specify stock quantity\" %}',\n                    required: true,\n                },\n                {\n                    hideLabels: true,\n                }\n            );\n        }\n\n        var buttons = `<div class='btn-group float-right' role='group'>`;\n\n        buttons += makeIconButton(\n            'fa-times icon-red',\n            'button-stock-item-remove',\n            pk,\n            '{% trans \"Remove stock item\" %}',\n        );\n\n        buttons += `</div>`;\n\n        html += `\n        <tr id='stock_item_${pk}' class='stock-item-row'>\n            <td id='part_${pk}'>${thumb} ${item.part_detail.full_name}</td>\n            <td id='stock_${pk}'>${quantity}${status}</td>\n            <td id='location_${pk}'>${location}</td>\n            <td id='action_${pk}'>\n                <div id='div_id_${pk}'>\n                    ${actionInput}\n                    <div id='errors-${pk}'></div>\n                </div>\n            </td>\n            <td id='buttons_${pk}'>${buttons}</td>\n        </tr>`;\n\n        itemCount += 1;\n    }\n\n    if (itemCount == 0) {\n        showAlertDialog(\n            '{% trans \"Select Stock Items\" %}',\n            '{% trans \"You must select at least one available stock item\" %}',\n        );\n\n        return;\n    }\n\n    html += `</tbody></table>`;\n\n    var extraFields = {};\n\n    if (specifyLocation) {\n        extraFields.location = {};\n    }\n\n    if (action != 'delete') {\n        extraFields.notes = {};\n    }\n\n    constructForm(url, {\n        method: 'POST',\n        fields: extraFields,\n        preFormContent: html,\n        confirm: true,\n        confirmMessage: '{% trans \"Confirm stock adjustment\" %}',\n        title: formTitle,\n        afterRender: function(fields, opts) {\n            // Add button callbacks to remove rows\n            $(opts.modal).find('.button-stock-item-remove').click(function() {\n                var pk = $(this).attr('pk');\n\n                $(opts.modal).find(`#stock_item_${pk}`).remove();\n            });\n\n            // Initialize \"location\" field\n            if (specifyLocation) {\n                initializeRelatedField(\n                    {\n                        name: 'location',\n                        type: 'related field',\n                        model: 'stocklocation',\n                        required: true,\n                    },\n                    null,\n                    opts\n                );\n            }\n        },\n        onSubmit: function(fields, opts) {\n\n            // Extract data elements from the form\n            var data = {\n                items: [],\n            };\n\n            if (action != 'delete') {\n                data.notes = getFormFieldValue('notes', {}, opts);\n            }\n\n            if (specifyLocation) {\n                data.location = getFormFieldValue('location', {}, opts);\n            }\n\n            var item_pk_values = [];\n\n            items.forEach(function(item) {\n                var pk = item.pk;\n\n                // Does the row exist in the form?\n                var row = $(opts.modal).find(`#stock_item_${pk}`);\n\n                if (row.exists()) {\n\n                    item_pk_values.push(pk);\n\n                    var quantity = getFormFieldValue(`items_quantity_${pk}`, {}, opts);\n\n                    data.items.push({\n                        pk: pk,\n                        quantity: quantity,\n                    });\n                }\n            });\n\n            // Delete action is handled differently\n            if (action == 'delete') {\n                var requests = [];\n\n                item_pk_values.forEach(function(pk) {\n                    requests.push(\n                        inventreeDelete(\n                            `/api/stock/${pk}/`,\n                        )\n                    );\n                });\n\n                // Wait for *all* the requests to complete\n                $.when.apply($, requests).done(function() {\n                    // Destroy the modal window\n                    $(opts.modal).modal('hide');\n\n                    if (options.success) {\n                        options.success();\n                    }\n                });\n\n                return;\n            }\n\n            opts.nested = {\n                'items': item_pk_values,\n            };\n\n            inventreePut(\n                url,\n                data,\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        // Hide the modal\n                        $(opts.modal).modal('hide');\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        }\n    });\n}\n\n\nfunction removeStockRow(e) {\n    // Remove a selected row from a stock modal form\n\n    e = e || window.event;\n    var src = e.target || e.srcElement;\n\n    var row = $(src).attr('row');\n\n    $('#' + row).remove();\n}\n\n\nfunction passFailBadge(result) {\n\n    if (result) {\n        return `<span class='badge badge-right rounded-pill bg-success'>{% trans \"PASS\" %}</span>`;\n    } else {\n        return `<span class='badge badge-right rounded-pill bg-danger'>{% trans \"FAIL\" %}</span>`;\n    }\n}\n\nfunction noResultBadge() {\n    return `<span class='badge badge-right rounded-pill bg-info'>{% trans \"NO RESULT\" %}</span>`;\n}\n\nfunction formatDate(row) {\n    // Function for formatting date field\n    var html = row.date;\n\n    if (row.user_detail) {\n        html += `<span class='badge badge-right rounded-pill bg-secondary'>${row.user_detail.username}</span>`;\n    }\n\n    return html;\n}\n\n/*\n * Load StockItemTestResult table\n */\nfunction loadStockTestResultsTable(table, options) {\n\n    // Setup filters for the table\n    var filterTarget = options.filterTarget || '#filter-list-stocktests';\n\n    var filterKey = options.filterKey || options.name || 'stocktests';\n\n    var filters = loadTableFilters(filterKey);\n\n    var params = {\n        part: options.part,\n    };\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n        filters[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterTarget);\n\n    function makeButtons(row, grouped) {\n\n        // Helper function for rendering buttons\n\n        var html = `<div class='btn-group float-right' role='group'>`;\n\n        if (row.requires_attachment == false && row.requires_value == false && !row.result) {\n            // Enable a \"quick tick\" option for this test result\n            html += makeIconButton('fa-check-circle icon-green', 'button-test-tick', row.test_name, '{% trans \"Pass test\" %}');\n        }\n\n        html += makeIconButton('fa-plus icon-green', 'button-test-add', row.test_name, '{% trans \"Add test result\" %}');\n\n        if (!grouped && row.result != null) {\n            var pk = row.pk;\n            html += makeIconButton('fa-edit icon-blue', 'button-test-edit', pk, '{% trans \"Edit test result\" %}');\n            html += makeIconButton('fa-trash-alt icon-red', 'button-test-delete', pk, '{% trans \"Delete test result\" %}');\n        }\n\n        html += '</div>';\n\n        return html;\n    }\n\n    var parent_node = 'parent node';\n\n    table.inventreeTable({\n        url: '{% url \"api-part-test-template-list\" %}',\n        method: 'get',\n        name: 'testresult',\n        treeEnable: true,\n        rootParentId: parent_node,\n        parentIdField: 'parent',\n        idField: 'pk',\n        uniqueId: 'pk',\n        treeShowField: 'test_name',\n        formatNoMatches: function() {\n            return '{% trans \"No test results found\" %}';\n        },\n        queryParams: filters,\n        original: original,\n        onPostBody: function() {\n            table.treegrid({\n                treeColumn: 0,\n            });\n            table.treegrid('collapseAll');\n        },\n        columns: [\n            {\n                field: 'pk',\n                title: 'ID',\n                visible: false,\n                switchable: false,\n            },\n            {\n                field: 'test_name',\n                title: '{% trans \"Test Name\" %}',\n                sortable: true,\n                formatter: function(value, row) {\n                    var html = value;\n\n                    if (row.required) {\n                        html = `<b>${value}</b>`;\n                    }\n\n                    if (row.result == null) {\n                        html += noResultBadge();\n                    } else {\n                        html += passFailBadge(row.result);\n                    }\n\n                    return html;\n                }\n            },\n            {\n                field: 'value',\n                title: '{% trans \"Value\" %}',\n                formatter: function(value, row) {\n                    var html = value;\n\n                    if (row.attachment) {\n                        var text = `<span class='fas fa-file-alt float-right'></span>`;\n                        html += renderLink(text, row.attachment, {download: true});\n                    }\n\n                    return html;\n                }\n            },\n            {\n                field: 'notes',\n                title: '{% trans \"Notes\" %}',\n            },\n            {\n                field: 'date',\n                title: '{% trans \"Test Date\" %}',\n                sortable: true,\n                formatter: function(value, row) {\n                    return formatDate(row);\n                },\n            },\n            {\n                field: 'buttons',\n                formatter: function(value, row) {\n                    return makeButtons(row, false);\n                }\n            }\n        ],\n        onLoadSuccess: function(tableData) {\n\n            // Set \"parent\" for each existing row\n            tableData.forEach(function(item, idx) {\n                tableData[idx].parent = parent_node;\n            });\n\n            // Once the test template data are loaded, query for test results\n\n            var filters = loadTableFilters(filterKey);\n\n            var query_params = {\n                stock_item: options.stock_item,\n                user_detail: true,\n                attachment_detail: true,\n                ordering: '-date',\n            };\n\n            if ('result' in filters) {\n                query_params.result = filters.result;\n            }\n\n            if ('include_installed' in filters) {\n                query_params.include_installed = filters.include_installed;\n            }\n\n            inventreeGet(\n                '{% url \"api-stock-test-result-list\" %}',\n                query_params,\n                {\n                    success: function(data) {\n                        // Iterate through the returned test data\n                        data.forEach(function(item) {\n\n                            var match = false;\n                            var override = false;\n\n                            // Extract the simplified test key\n                            var key = item.key;\n\n                            // Attempt to associate this result with an existing test\n                            for (var idx = 0; idx < tableData.length; idx++) {\n\n                                var row = tableData[idx];\n\n                                if (key == row.key) {\n\n                                    item.test_name = row.test_name;\n                                    item.required = row.required;\n\n                                    if (row.result == null) {\n                                        item.parent = parent_node;\n                                        tableData[idx] = item;\n                                        override = true;\n                                    } else {\n                                        item.parent = row.pk;\n                                    }\n\n                                    match = true;\n\n                                    break;\n                                }\n                            }\n\n                            // No match could be found\n                            if (!match) {\n                                item.test_name = item.test;\n                                item.parent = parent_node;\n                            }\n\n                            if (!override) {\n                                tableData.push(item);\n                            }\n\n                        });\n\n                        // Push data back into the table\n                        table.bootstrapTable('load', tableData);\n                    }\n                }\n            );\n        }\n    });\n\n    /* Register button callbacks */\n\n    function reloadTestTable(response) {\n        $(table).bootstrapTable('refresh');\n    }\n\n    // \"tick\" a test result\n    $(table).on('click', '.button-test-tick', function() {\n        var button = $(this);\n\n        var test_name = button.attr('pk');\n\n        inventreePut(\n            '{% url \"api-stock-test-result-list\" %}',\n            {\n                test: test_name,\n                result: true,\n                stock_item: options.stock_item,\n            },\n            {\n                method: 'POST',\n                success: reloadTestTable,\n            }\n        );\n    });\n\n    // Add a test result\n    $(table).on('click', '.button-test-add', function() {\n        var button = $(this);\n\n        var test_name = button.attr('pk');\n\n        constructForm('{% url \"api-stock-test-result-list\" %}', {\n            method: 'POST',\n            fields: {\n                test: {\n                    value: test_name,\n                },\n                result: {},\n                value: {},\n                attachment: {},\n                notes: {},\n                stock_item: {\n                    value: options.stock_item,\n                    hidden: true,\n                }\n            },\n            title: '{% trans \"Add Test Result\" %}',\n            onSuccess: reloadTestTable,\n        });\n    });\n\n    // Edit a test result\n    $(table).on('click', '.button-test-edit', function() {\n        var button = $(this);\n\n        var pk = button.attr('pk');\n\n        var url = `/api/stock/test/${pk}/`;\n\n        constructForm(url, {\n            fields: {\n                test: {},\n                result: {},\n                value: {},\n                attachment: {},\n                notes: {},\n            },\n            title: '{% trans \"Edit Test Result\" %}',\n            onSuccess: reloadTestTable,\n        });\n    });\n\n    // Delete a test result\n    $(table).on('click', '.button-test-delete', function() {\n        var button = $(this);\n\n        var pk = button.attr('pk');\n\n        var url = `/api/stock/test/${pk}/`;\n\n        var row = $(table).bootstrapTable('getRowByUniqueId', pk);\n\n        var html = `\n        <div class='alert alert-block alert-danger'>\n        <strong>{% trans \"Delete test result\" %}:</strong> ${row.test_name || row.test || row.key}\n        </div>`;\n\n        constructForm(url, {\n            method: 'DELETE',\n            title: '{% trans \"Delete Test Result\" %}',\n            onSuccess: reloadTestTable,\n            preFormContent: html,\n        });\n    });\n}\n\n\nfunction locationDetail(row, showLink=true) {\n    /*\n     * Function to display a \"location\" of a StockItem.\n     *\n     * Complicating factors: A StockItem may not actually *be* in a location!\n     * - Could be at a customer\n     * - Could be installed in another stock item\n     * - Could be assigned to a sales order\n     * - Could be currently in production!\n     *\n     * So, instead of being naive, we'll check!\n     */\n\n    // Display text\n    var text = '';\n\n    // URL (optional)\n    var url = '';\n\n    if (row.is_building && row.build) {\n        // StockItem is currently being built!\n        text = '{% trans \"In production\" %}';\n        url = `/build/${row.build}/`;\n    } else if (row.belongs_to) {\n        // StockItem is installed inside a different StockItem\n        text = `{% trans \"Installed in Stock Item\" %} ${row.belongs_to}`;\n        url = `/stock/item/${row.belongs_to}/?display=installed-items`;\n    } else if (row.customer) {\n        // StockItem has been assigned to a customer\n        text = '{% trans \"Shipped to customer\" %}';\n        url = `/company/${row.customer}/?display=assigned-stock`;\n    } else if (row.sales_order) {\n        // StockItem has been assigned to a sales order\n        text = '{% trans \"Assigned to Sales Order\" %}';\n        url = `/order/sales-order/${row.sales_order}/`;\n    } else if (row.location && row.location_detail) {\n        text = row.location_detail.pathstring;\n        url = `/stock/location/${row.location}/`;\n    } else {\n        text = '<i>{% trans \"No stock location set\" %}</i>';\n        url = '';\n    }\n\n    if (showLink && url) {\n        return renderLink(text, url);\n    } else {\n        return text;\n    }\n}\n\n\nfunction loadStockTable(table, options) {\n    /* Load data into a stock table with adjustable options.\n     * Fetches data (via AJAX) and loads into a bootstrap table.\n     * Also links in default button callbacks.\n     *\n     * Options:\n     *  url - URL for the stock query\n     *  params - query params for augmenting stock data request\n     *  groupByField - Column for grouping stock items\n     *  buttons - Which buttons to link to stock selection callbacks\n     *  filterList - <ul> element where filters are displayed\n     *  disableFilters: If true, disable custom filters\n     */\n\n    // List of user-params which override the default filters\n\n    options.params['location_detail'] = true;\n    options.params['part_detail'] = true;\n\n    var params = options.params || {};\n\n    var filterTarget = options.filterTarget || '#filter-list-stock';\n\n    var filters = {};\n\n    var filterKey = options.filterKey || options.name || 'stock';\n\n    if (!options.disableFilters) {\n        filters = loadTableFilters(filterKey);\n    }\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterTarget, {download: true});\n\n    // Override the default values, or add new ones\n    for (var key in params) {\n        filters[key] = params[key];\n    }\n\n    var grouping = true;\n\n    if ('grouping' in options) {\n        grouping = options.grouping;\n    }\n\n    var col = null;\n\n    // Explicitly disable part grouping functionality\n    // Might be able to add this in later on,\n    // but there is a bug which makes this crash if paginating on the server side.\n    // Ref: https://github.com/wenzhixin/bootstrap-table/issues/3250\n    // eslint-disable-next-line no-unused-vars\n    grouping = false;\n\n    var columns = [\n        {\n            checkbox: true,\n            title: '{% trans \"Select\" %}',\n            searchable: false,\n            switchable: false,\n        },\n        {\n            field: 'pk',\n            title: 'ID',\n            visible: false,\n            switchable: false,\n        }\n    ];\n\n    col = {\n        field: 'part_detail.full_name',\n        title: '{% trans \"Part\" %}',\n        sortName: 'part__name',\n        visible: params['part_detail'],\n        switchable: params['part_detail'],\n        formatter: function(value, row) {\n\n            var url = `/stock/item/${row.pk}/`;\n            var thumb = row.part_detail.thumbnail;\n            var name = row.part_detail.full_name;\n\n            var html = imageHoverIcon(thumb) + renderLink(name, url);\n\n            html += makePartIcons(row.part_detail);\n\n            return html;\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'part_detail.IPN',\n        title: '{% trans \"IPN\" %}',\n        sortName: 'part__IPN',\n        visible: params['part_detail'],\n        switchable: params['part_detail'],\n        formatter: function(value, row) {\n            return row.part_detail.IPN;\n        },\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    columns.push({\n        field: 'part_detail.description',\n        title: '{% trans \"Description\" %}',\n        visible: params['part_detail'],\n        switchable: params['part_detail'],\n        formatter: function(value, row) {\n            return row.part_detail.description;\n        }\n    });\n\n    col = {\n        field: 'quantity',\n        sortName: 'stock',\n        title: '{% trans \"Stock\" %}',\n        sortable: true,\n        formatter: function(value, row) {\n\n            var val = '';\n\n            var available = Math.max(0, (row.quantity || 0) - (row.allocated || 0));\n\n            if (row.serial && row.quantity == 1) {\n                // If there is a single unit with a serial number, use the serial number\n                val = '# ' + row.serial;\n            } else if (row.quantity != available) {\n                // Some quantity is available, show available *and* quantity\n                var ava = +parseFloat(available).toFixed(5);\n                var tot = +parseFloat(row.quantity).toFixed(5);\n\n                val = `${ava} / ${tot}`;\n            } else {\n                // Format floating point numbers with this one weird trick\n                val = +parseFloat(value).toFixed(5);\n            }\n\n            var html = renderLink(val, `/stock/item/${row.pk}/`);\n\n            if (row.is_building) {\n                html += makeIconBadge('fa-tools', '{% trans \"Stock item is in production\" %}');\n            }\n\n            if (row.sales_order) {\n                // Stock item has been assigned to a sales order\n                html += makeIconBadge('fa-truck', '{% trans \"Stock item assigned to sales order\" %}');\n            } else if (row.customer) {\n                // StockItem has been assigned to a customer\n                html += makeIconBadge('fa-user', '{% trans \"Stock item assigned to customer\" %}');\n            } else if (row.allocated) {\n                if (row.serial != null && row.quantity == 1) {\n                    html += makeIconBadge('fa-bookmark icon-yellow', '{% trans \"Serialized stock item has been allocated\" %}');\n                } else if (row.allocated >= row.quantity) {\n                    html += makeIconBadge('fa-bookmark icon-yellow', '{% trans \"Stock item has been fully allocated\" %}');\n                } else {\n                    html += makeIconBadge('fa-bookmark', '{% trans \"Stock item has been partially allocated\" %}');\n                }\n            } else if (row.belongs_to) {\n                html += makeIconBadge('fa-box', '{% trans \"Stock item has been installed in another item\" %}');\n            }\n\n            if (row.expired) {\n                html += makeIconBadge('fa-calendar-times icon-red', '{% trans \"Stock item has expired\" %}');\n            } else if (row.stale) {\n                html += makeIconBadge('fa-stopwatch', '{% trans \"Stock item will expire soon\" %}');\n            }\n\n            // Special stock status codes\n\n            // REJECTED\n            if (row.status == {{ StockStatus.REJECTED }}) {\n                html += makeIconBadge('fa-times-circle icon-red', '{% trans \"Stock item has been rejected\" %}');\n            } else if (row.status == {{ StockStatus.LOST }}) {\n                html += makeIconBadge('fa-question-circle', '{% trans \"Stock item is lost\" %}');\n            } else if (row.status == {{ StockStatus.DESTROYED }}) {\n                html += makeIconBadge('fa-skull-crossbones', '{% trans \"Stock item is destroyed\" %}');\n            }\n\n            if (row.quantity <= 0) {\n                html += `<span class='badge badge-right rounded-pill bg-danger'>{% trans \"Depleted\" %}</span>`;\n            }\n\n            return html;\n        }\n    };\n\n    columns.push(col);\n\n    col = {\n        field: 'status',\n        title: '{% trans \"Status\" %}',\n        formatter: function(value) {\n            return stockStatusDisplay(value);\n        },\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'batch',\n        title: '{% trans \"Batch\" %}',\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'location_detail.pathstring',\n        title: '{% trans \"Location\" %}',\n        sortName: 'location',\n        formatter: function(value, row) {\n            return locationDetail(row);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'stocktake_date',\n        title: '{% trans \"Stocktake\" %}',\n        formatter: function(value) {\n            return renderDate(value);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'expiry_date',\n        title: '{% trans \"Expiry Date\" %}',\n        visible: global_settings.STOCK_ENABLE_EXPIRY,\n        switchable: global_settings.STOCK_ENABLE_EXPIRY,\n        formatter: function(value) {\n            return renderDate(value);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'updated',\n        title: '{% trans \"Last Updated\" %}',\n        formatter: function(value) {\n            return renderDate(value);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    columns.push({\n        field: 'purchase_order',\n        title: '{% trans \"Purchase Order\" %}',\n        formatter: function(value, row) {\n            if (!value) {\n                return '-';\n            }\n\n            var link = `/order/purchase-order/${row.purchase_order}/`;\n            var text = `${row.purchase_order}`;\n\n            if (row.purchase_order_reference) {\n\n                var prefix = global_settings.PURCHASEORDER_REFERENCE_PREFIX;\n\n                text = prefix + row.purchase_order_reference;\n            }\n\n            return renderLink(text, link);\n        }\n    });\n\n    col = {\n\n        field: 'supplier_part',\n        title: '{% trans \"Supplier Part\" %}',\n        visible: params['supplier_part_detail'] || false,\n        switchable: params['supplier_part_detail'] || false,\n        formatter: function(value, row) {\n            if (!value) {\n                return '-';\n            }\n\n            var link = `/supplier-part/${row.supplier_part}/?display=part-stock`;\n\n            var text = '';\n\n            if (row.supplier_part_detail) {\n                text = `${row.supplier_part_detail.SKU}`;\n            } else {\n                text = `<i>{% trans \"Supplier part not specified\" %}</i>`;\n            }\n\n            return renderLink(text, link);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col.sortable = true;\n        col.sortName = 'SKU';\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'purchase_price_string',\n        title: '{% trans \"Purchase Price\" %}',\n    };\n\n    if (!options.params.ordering) {\n        col.sortable = true;\n        col.sortName = 'purchase_price';\n    }\n\n    columns.push(col);\n\n    columns.push({\n        field: 'packaging',\n        title: '{% trans \"Packaging\" %}',\n    },\n    {\n        field: 'notes',\n        title: '{% trans \"Notes\" %}',\n    });\n\n    table.inventreeTable({\n        method: 'get',\n        formatNoMatches: function() {\n            return '{% trans \"No stock items matching query\" %}';\n        },\n        url: options.url || '{% url \"api-stock-list\" %}',\n        queryParams: filters,\n        sidePagination: 'server',\n        name: 'stock',\n        original: original,\n        showColumns: true,\n        columns: columns,\n    });\n\n    var buttons = [\n        '#stock-print-options',\n        '#stock-options',\n    ];\n\n    if (global_settings.BARCODE_ENABLE) {\n        buttons.push('#stock-barcode-options');\n    }\n\n    linkButtonsToSelection(\n        table,\n        buttons,\n    );\n\n    function stockAdjustment(action) {\n        var items = $(table).bootstrapTable('getSelections');\n\n        adjustStock(action, items, {\n            success: function() {\n                $(table).bootstrapTable('refresh');\n            }\n        });\n    }\n\n    // Automatically link button callbacks\n\n    $('#multi-item-print-label').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var items = [];\n\n        selections.forEach(function(item) {\n            items.push(item.pk);\n        });\n\n        printStockItemLabels(items);\n    });\n\n    $('#multi-item-print-test-report').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var items = [];\n\n        selections.forEach(function(item) {\n            items.push(item.pk);\n        });\n\n        printTestReports(items);\n    });\n\n    if (global_settings.BARCODE_ENABLE) {\n        $('#multi-item-barcode-scan-into-location').click(function() {\n            var selections = $(table).bootstrapTable('getSelections');\n\n            var items = [];\n\n            selections.forEach(function(item) {\n                items.push(item);\n            });\n\n            scanItemsIntoLocation(items);\n        });\n    }\n\n    $('#multi-item-stocktake').click(function() {\n        stockAdjustment('count');\n    });\n\n    $('#multi-item-remove').click(function() {\n        stockAdjustment('take');\n    });\n\n    $('#multi-item-add').click(function() {\n        stockAdjustment('add');\n    });\n\n    $('#multi-item-move').click(function() {\n        stockAdjustment('move');\n    });\n\n    $('#multi-item-merge').click(function() {\n        var items = $(table).bootstrapTable('getSelections');\n\n        mergeStockItems(items, {\n            success: function(response) {\n                $(table).bootstrapTable('refresh');\n\n                showMessage('{% trans \"Merged stock items\" %}', {\n                    style: 'success',\n                });\n            }\n        });\n    });\n\n    $('#multi-item-assign').click(function() {\n\n        var items = $(table).bootstrapTable('getSelections');\n\n        assignStockToCustomer(items, {\n            success: function() {\n                $(table).bootstrapTable('refresh');\n            }\n        });\n    });\n\n    $('#multi-item-order').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var parts = [];\n\n        selections.forEach(function(item) {\n            var part = item.part_detail;\n\n            if (part) {\n                parts.push(part);\n            }\n        });\n\n        orderParts(parts, {});\n    });\n\n    $('#multi-item-set-status').click(function() {\n        // Select and set the STATUS field for selected stock items\n        var selections = $(table).bootstrapTable('getSelections');\n\n        // Select stock status\n        var modal = '#modal-form';\n\n        var status_list = makeOptionsList(\n            stockStatusCodes(),\n            function(item) {\n                return item.text;\n            },\n            function(item) {\n                return item.key;\n            }\n        );\n\n        // Add an empty option at the start of the list\n        status_list.unshift('<option value=\"\">---------</option>');\n\n        // Construct form\n        var html = `\n        <form method='post' action='' class='js-modal-form' enctype='multipart/form-data'>\n            <div class='form-group'>\n                <label class='control-label requiredField' for='id_status'>\n                {% trans \"Stock Status\" %}\n                </label>\n                <div class='controls'>\n                    <select id='id_status' class='select form-control' name='label'>\n                        ${status_list}\n                    </select>\n                </div>\n            </div>\n        </form>`;\n\n        openModal({\n            modal: modal,\n        });\n\n        modalEnable(modal, true);\n        modalSetTitle(modal, '{% trans \"Set Stock Status\" %}');\n        modalSetContent(modal, html);\n\n        attachSelect(modal);\n\n        modalSubmit(modal, function() {\n            var label = $(modal).find('#id_status');\n\n            var status_code = label.val();\n\n            closeModal(modal);\n\n            if (!status_code) {\n                showAlertDialog(\n                    '{% trans \"Select Status Code\" %}',\n                    '{% trans \"Status code must be selected\" %}'\n                );\n\n                return;\n            }\n\n            var requests = [];\n\n            selections.forEach(function(item) {\n                var url = `/api/stock/${item.pk}/`;\n\n                requests.push(\n                    inventreePut(\n                        url,\n                        {\n                            status: status_code,\n                        },\n                        {\n                            method: 'PATCH',\n                            success: function() {\n                            }\n                        }\n                    )\n                );\n            });\n\n            $.when.apply($, requests).done(function() {\n                $(table).bootstrapTable('refresh');\n            });\n        });\n    });\n\n    $('#multi-item-delete').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var stock = [];\n\n        selections.forEach(function(item) {\n            stock.push(item.pk);\n        });\n\n        stockAdjustment('delete');\n    });\n}\n\n\n/*\n * Display a table of stock locations\n */\nfunction loadStockLocationTable(table, options) {\n\n    var params = options.params || {};\n\n    var filterListElement = options.filterList || '#filter-list-location';\n\n    var tree_view = options.allowTreeView && inventreeLoad('location-tree-view') == 1;\n\n    if (tree_view) {\n        params.cascade = true;\n    }\n\n    var filters = {};\n\n    var filterKey = options.filterKey || options.name || 'location';\n\n    if (!options.disableFilters) {\n        filters = loadTableFilters(filterKey);\n    }\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterListElement);\n\n    for (var key in params) {\n        filters[key] = params[key];\n    }\n\n    table.inventreeTable({\n        treeEnable: tree_view,\n        rootParentId: tree_view ? options.params.parent : null,\n        uniqueId: 'pk',\n        idField: 'pk',\n        treeShowField: 'name',\n        parentIdField: tree_view ? 'parent' : null,\n        disablePagination: tree_view,\n        sidePagination: tree_view ? 'client' : 'server',\n        serverSort: !tree_view,\n        search: !tree_view,\n        method: 'get',\n        url: options.url || '{% url \"api-location-list\" %}',\n        queryParams: filters,\n        name: 'location',\n        original: original,\n        showColumns: true,\n        onPostBody: function() {\n\n            if (options.allowTreeView) {\n\n                tree_view = inventreeLoad('location-tree-view') == 1;\n\n                if (tree_view) {\n\n                    $('#view-location-list').removeClass('btn-secondary').addClass('btn-outline-secondary');\n                    $('#view-location-tree').removeClass('btn-outline-secondary').addClass('btn-secondary');\n\n                    table.treegrid({\n                        treeColumn: 1,\n                        onChange: function() {\n                            table.bootstrapTable('resetView');\n                        },\n                        onExpand: function() {\n\n                        }\n                    });\n                } else {\n                    $('#view-location-tree').removeClass('btn-secondary').addClass('btn-outline-secondary');\n                    $('#view-location-list').removeClass('btn-outline-secondary').addClass('btn-secondary');\n                }\n            }\n        },\n        buttons: options.allowTreeView ? [\n            {\n                icon: 'fas fa-bars',\n                attributes: {\n                    title: '{% trans \"Display as list\" %}',\n                    id: 'view-location-list',\n                },\n                event: () => {\n                    inventreeSave('location-tree-view', 0);\n                    table.bootstrapTable(\n                        'refreshOptions',\n                        {\n                            treeEnable: false,\n                            serverSort: true,\n                            search: true,\n                            pagination: true,\n                        }\n                    );\n                }\n            },\n            {\n                icon: 'fas fa-sitemap',\n                attributes: {\n                    title: '{% trans \"Display as tree\" %}',\n                    id: 'view-location-tree',\n                },\n                event: () => {\n                    inventreeSave('location-tree-view', 1);\n                    table.bootstrapTable(\n                        'refreshOptions',\n                        {\n                            treeEnable: true,\n                            serverSort: false,\n                            search: false,\n                            pagination: false,\n                        }\n                    );\n                }\n            }\n        ] : [],\n        columns: [\n            {\n                checkbox: true,\n                title: '{% trans \"Select\" %}',\n                searchable: false,\n                switchable: false,\n            },\n            {\n                field: 'name',\n                title: '{% trans \"Name\" %}',\n                switchable: true,\n                sortable: true,\n                formatter: function(value, row) {\n                    return renderLink(\n                        value,\n                        `/stock/location/${row.pk}/`\n                    );\n                },\n            },\n            {\n                field: 'description',\n                title: '{% trans \"Description\" %}',\n                switchable: true,\n                sortable: false,\n            },\n            {\n                field: 'pathstring',\n                title: '{% trans \"Path\" %}',\n                switchable: true,\n                sortable: false,\n            },\n            {\n                field: 'items',\n                title: '{% trans \"Stock Items\" %}',\n                switchable: true,\n                sortable: false,\n                sortName: 'item_count',\n            }\n        ]\n    });\n}\n\nfunction loadStockTrackingTable(table, options) {\n\n    var cols = [];\n\n    var filterTarget = '#filter-list-stocktracking';\n\n    var filterKey = 'stocktracking';\n\n    var filters = loadTableFilters(filterKey);\n\n    var params = options.params;\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n        filters[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterTarget);\n\n    // Date\n    cols.push({\n        field: 'date',\n        title: '{% trans \"Date\" %}',\n        sortable: true,\n        formatter: function(value) {\n            return renderDate(value, {showTime: true});\n        }\n    });\n\n    // Stock transaction description\n    cols.push({\n        field: 'label',\n        title: '{% trans \"Description\" %}',\n        formatter: function(value, row) {\n            var html = '<b>' + value + '</b>';\n\n            if (row.notes) {\n                html += '<br><i>' + row.notes + '</i>';\n            }\n\n            return html;\n        }\n    });\n\n    // Stock transaction details\n    cols.push({\n        field: 'deltas',\n        title: '{% trans \"Details\" %}',\n        formatter: function(details, row) {\n            var html = `<table class='table table-condensed' id='tracking-table-${row.pk}'>`;\n\n            if (!details) {\n                html += '</table>';\n                return html;\n            }\n\n            // Part information\n            if (details.part) {\n                html += `<tr><th>{% trans \"Part\" %}</th><td>`;\n\n                if (details.part_detail) {\n                    html += renderLink(details.part_detail.full_name, `/part/${details.part}/`);\n                } else {\n                    html += `{% trans \"Part information unavailable\" %}`;\n                }\n\n                html += `</td></tr>`;\n            }\n\n            // Location information\n            if (details.location) {\n\n                html += `<tr><th>{% trans \"Location\" %}</th>`;\n\n                html += '<td>';\n\n                if (details.location_detail) {\n                    // A valid location is provided\n\n                    html += renderLink(\n                        details.location_detail.pathstring,\n                        details.location_detail.url,\n                    );\n                } else {\n                    // An invalid location (may have been deleted?)\n                    html += `<i>{% trans \"Location no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Purchase Order Information\n            if (details.purchaseorder) {\n\n                html += `<tr><th>{% trans \"Purchase Order\" %}</td>`;\n\n                html += '<td>';\n\n                if (details.purchaseorder_detail) {\n                    html += renderLink(\n                        details.purchaseorder_detail.reference,\n                        `/order/purchase-order/${details.purchaseorder}/`\n                    );\n                } else {\n                    html += `<i>{% trans \"Purchase order no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Customer information\n            if (details.customer) {\n\n                html += `<tr><th>{% trans \"Customer\" %}</td>`;\n\n                html += '<td>';\n\n                if (details.customer_detail) {\n                    html += renderLink(\n                        details.customer_detail.name,\n                        details.customer_detail.url\n                    );\n                } else {\n                    html += `<i>{% trans \"Customer no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Stockitem information\n            if (details.stockitem) {\n                html += '<tr><th>{% trans \"Stock Item\" %}</td>';\n\n                html += '<td>';\n\n                if (details.stockitem_detail) {\n                    html += renderLink(\n                        details.stockitem,\n                        `/stock/item/${details.stockitem}/`\n                    );\n                } else {\n                    html += `<i>{% trans \"Stock item no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Status information\n            if (details.status) {\n                html += `<tr><th>{% trans \"Status\" %}</td>`;\n\n                html += '<td>';\n                html += stockStatusDisplay(\n                    details.status,\n                    {\n                        classes: 'float-right',\n                    }\n                );\n                html += '</td></tr>';\n\n            }\n\n            // Quantity information\n            if (details.added) {\n                html += '<tr><th>{% trans \"Added\" %}</th>';\n\n                html += `<td>${details.added}</td>`;\n\n                html += '</tr>';\n            }\n\n            if (details.removed) {\n                html += '<tr><th>{% trans \"Removed\" %}</th>';\n\n                html += `<td>${details.removed}</td>`;\n\n                html += '</tr>';\n            }\n\n            if (details.quantity) {\n                html += '<tr><th>{% trans \"Quantity\" %}</th>';\n\n                html += `<td>${details.quantity}</td>`;\n\n                html += '</tr>';\n            }\n\n            html += '</table>';\n\n            return html;\n        }\n    });\n\n    cols.push({\n        field: 'user',\n        title: '{% trans \"User\" %}',\n        formatter: function(value, row) {\n            if (value) {\n                // TODO - Format the user's first and last names\n                return row.user_detail.username;\n            } else {\n                return `<i>{% trans \"No user information\" %}</i>`;\n            }\n        }\n    });\n\n    table.inventreeTable({\n        method: 'get',\n        queryParams: filters,\n        original: original,\n        columns: cols,\n        url: options.url,\n    });\n\n    if (options.buttons) {\n        linkButtonsToSelection(table, options.buttons);\n    }\n\n    table.on('click', '.btn-entry-edit', function() {\n        var button = $(this);\n\n        launchModalForm(button.attr('url'), {\n            reload: true,\n        });\n    });\n\n    table.on('click', '.btn-entry-delete', function() {\n        var button = $(this);\n\n        launchModalForm(button.attr('url'), {\n            reload: true,\n        });\n    });\n}\n\n\nfunction loadInstalledInTable(table, options) {\n    /*\n    * Display a table showing the stock items which are installed in this stock item.\n    */\n\n    table.inventreeTable({\n        url: '{% url \"api-stock-list\" %}',\n        queryParams: {\n            installed_in: options.stock_item,\n            part_detail: true,\n        },\n        formatNoMatches: function() {\n            return '{% trans \"No installed items\" %}';\n        },\n        columns: [\n            {\n                field: 'part',\n                title: '{% trans \"Part\" %}',\n                formatter: function(value, row) {\n                    var html = '';\n\n                    html += imageHoverIcon(row.part_detail.thumbnail);\n                    html += renderLink(row.part_detail.full_name, `/stock/item/${row.pk}/`);\n\n                    return html;\n                }\n            },\n            {\n                field: 'quantity',\n                title: '{% trans \"Quantity\" %}',\n                formatter: function(value, row) {\n\n                    var html = '';\n\n                    if (row.serial && row.quantity == 1) {\n                        html += `{% trans \"Serial\" %}: ${row.serial}`;\n                    } else {\n                        html += `${row.quantity}`;\n                    }\n\n                    return renderLink(html, `/stock/item/${row.pk}/`);\n                }\n            },\n            {\n                field: 'status',\n                title: '{% trans \"Status\" %}',\n                formatter: function(value) {\n                    return stockStatusDisplay(value);\n                }\n            },\n            {\n                field: 'batch',\n                title: '{% trans \"Batch\" %}',\n            },\n            {\n                field: 'buttons',\n                title: '',\n                switchable: false,\n                formatter: function(value, row) {\n                    var pk = row.pk;\n                    var html = '';\n\n                    html += `<div class='btn-group float-right' role='group'>`;\n                    html += makeIconButton('fa-unlink', 'button-uninstall', pk, '{% trans \"Uninstall Stock Item\" %}');\n                    html += `</div>`;\n\n                    return html;\n                }\n            }\n        ],\n        onPostBody: function() {\n            // Assign callbacks to the buttons\n            table.find('.button-uninstall').click(function() {\n                var pk = $(this).attr('pk');\n\n                uninstallStockItem(\n                    pk,\n                    {\n                        onSuccess: function(response) {\n                            table.bootstrapTable('refresh');\n                        }\n                    }\n                );\n            });\n        }\n    });\n}\n\n\n/*\n * Launch a dialog to uninstall a stock item from another stock item\n*/\nfunction uninstallStockItem(installed_item_id, options={}) {\n\n    constructForm(\n        `/api/stock/${installed_item_id}/uninstall/`,\n        {\n            confirm: true,\n            method: 'POST',\n            title: '{% trans \"Uninstall Stock Item\" %}',\n            fields: {\n                location: {\n                    icon: 'fa-sitemap',\n                },\n                note: {},\n            },\n            preFormContent: function(opts) {\n                var html = '';\n\n                if (installed_item_id == null) {\n                    html += `\n                    <div class='alert alert-block alert-info'>\n                    {% trans \"Select stock item to uninstall\" %}\n                    </div>`;\n                }\n\n                return html;\n            },\n            onSuccess: function(response) {\n                handleFormSuccess(response, options);\n            }\n        }\n    );\n}\n\n\n/*\n * Launch a dialog to install a stock item into another stock item\n */\nfunction installStockItem(stock_item_id, part_id, options={}) {\n\n    var html = `\n    <div class='alert alert-block alert-info'>\n        <strong>{% trans \"Install another stock item into this item\" %}</strong><br>\n        {% trans \"Stock items can only be installed if they meet the following criteria\" %}:<br>\n        <ul>\n            <li>{% trans \"The Stock Item links to a Part which is the BOM for this Stock Item\" %}</li>\n            <li>{% trans \"The Stock Item is currently available in stock\" %}</li>\n            <li>{% trans \"The Stock Item is not already installed in another item\" %}</li>\n            <li>{% trans \"The Stock Item is tracked by either a batch code or serial number\" %}</li>\n        </ul>\n    </div>`;\n\n    constructForm(\n        `/api/stock/${stock_item_id}/install/`,\n        {\n            method: 'POST',\n            fields: {\n                part: {\n                    type: 'related field',\n                    required: 'true',\n                    label: '{% trans \"Part\" %}',\n                    help_text: '{% trans \"Select part to install\" %}',\n                    model: 'part',\n                    api_url: '{% url \"api-part-list\" %}',\n                    auto_fill: true,\n                    filters: {\n                        trackable: true,\n                        in_bom_for: part_id,\n                    }\n                },\n                stock_item: {\n                    filters: {\n                        part_detail: true,\n                        in_stock: true,\n                        tracked: true,\n                    },\n                    adjustFilters: function(filters, opts) {\n                        var part = getFormFieldValue('part', {}, opts);\n\n                        if (part) {\n                            filters.part = part;\n                        }\n\n                        return filters;\n                    }\n                }\n            },\n            confirm: true,\n            title: '{% trans \"Install Stock Item\" %}',\n            preFormContent: html,\n            onSuccess: function(response) {\n                if (options.onSuccess) {\n                    options.onSuccess(response);\n                }\n            }\n        }\n    );\n}\n", "code_before": "{% load i18n %}\n{% load inventree_extras %}\n{% load status_codes %}\n\n/* globals\n    attachSelect,\n    closeModal,\n    constructField,\n    constructFormBody,\n    getFormFieldValue,\n    global_settings,\n    handleFormErrors,\n    imageHoverIcon,\n    inventreeDelete,\n    inventreeGet,\n    inventreePut,\n    launchModalForm,\n    linkButtonsToSelection,\n    loadTableFilters,\n    makeIconBadge,\n    makeIconButton,\n    makeOptionsList,\n    makePartIcons,\n    modalEnable,\n    modalSetContent,\n    modalSetTitle,\n    modalSubmit,\n    openModal,\n    printStockItemLabels,\n    printTestReports,\n    renderLink,\n    scanItemsIntoLocation,\n    showAlertDialog,\n    setupFilterList,\n    showApiError,\n    stockStatusDisplay,\n*/\n\n/* exported\n    assignStockToCustomer,\n    createNewStockItem,\n    createStockLocation,\n    duplicateStockItem,\n    editStockItem,\n    editStockLocation,\n    findStockItemBySerialNumber,\n    installStockItem,\n    loadInstalledInTable,\n    loadStockLocationTable,\n    loadStockTable,\n    loadStockTestResultsTable,\n    loadStockTrackingTable,\n    loadTableFilters,\n    mergeStockItems,\n    removeStockRow,\n    serializeStockItem,\n    stockItemFields,\n    stockLocationFields,\n    stockStatusCodes,\n    uninstallStockItem,\n*/\n\n\n/*\n * Launches a modal form to serialize a particular StockItem\n */\n\nfunction serializeStockItem(pk, options={}) {\n\n    var url = `/api/stock/${pk}/serialize/`;\n\n    options.method = 'POST';\n    options.title = '{% trans \"Serialize Stock Item\" %}';\n\n    options.fields = {\n        quantity: {},\n        serial_numbers: {\n            icon: 'fa-hashtag',\n        },\n        destination: {\n            icon: 'fa-sitemap',\n        },\n        notes: {},\n    };\n\n    if (options.part) {\n        // Work out the next available serial number\n        inventreeGet(`/api/part/${options.part}/serial-numbers/`, {}, {\n            success: function(data) {\n                if (data.next) {\n                    options.fields.serial_numbers.placeholder = `{% trans \"Next available serial number\" %}: ${data.next}`;\n                } else if (data.latest) {\n                    options.fields.serial_numbers.placeholder = `{% trans \"Latest serial number\" %}: ${data.latest}`;\n                }\n            },\n            async: false,\n        });\n    }\n\n    options.confirm = true;\n    options.confirmMessage = '{% trans \"Confirm Stock Serialization\" %}';\n\n    constructForm(url, options);\n}\n\n\nfunction stockLocationFields(options={}) {\n    var fields = {\n        parent: {\n            help_text: '{% trans \"Parent stock location\" %}',\n            required: false,\n        },\n        name: {},\n        description: {},\n        owner: {},\n    };\n\n    if (options.parent) {\n        fields.parent.value = options.parent;\n    }\n\n    if (!global_settings.STOCK_OWNERSHIP_CONTROL) {\n        delete fields['owner'];\n    }\n\n    return fields;\n}\n\n\n/*\n * Launch an API form to edit a stock location\n */\nfunction editStockLocation(pk, options={}) {\n\n    var url = `/api/stock/location/${pk}/`;\n\n    options.fields = stockLocationFields(options);\n\n    options.title = '{% trans \"Edit Stock Location\" %}';\n\n    constructForm(url, options);\n}\n\n\n/*\n * Launch an API form to create a new stock location\n */\nfunction createStockLocation(options={}) {\n\n    var url = '{% url \"api-location-list\" %}';\n\n    options.method = 'POST';\n    options.fields = stockLocationFields(options);\n    options.title = '{% trans \"New Stock Location\" %}';\n\n    constructForm(url, options);\n}\n\n\nfunction stockItemFields(options={}) {\n    var fields = {\n        part: {\n            // Hide the part field unless we are \"creating\" a new stock item\n            hidden: !options.create,\n            onSelect: function(data, field, opts) {\n                // Callback when a new \"part\" is selected\n\n                // If we are \"creating\" a new stock item,\n                // change the available fields based on the part properties\n                if (options.create) {\n\n                    // If a \"trackable\" part is selected, enable serial number field\n                    if (data.trackable) {\n                        enableFormInput('serial_numbers', opts);\n\n                        // Request part serial number information from the server\n                        inventreeGet(`/api/part/${data.pk}/serial-numbers/`, {}, {\n                            success: function(data) {\n                                var placeholder = '';\n                                if (data.next) {\n                                    placeholder = `{% trans \"Next available serial number\" %}: ${data.next}`;\n                                } else if (data.latest) {\n                                    placeholder = `{% trans \"Latest serial number\" %}: ${data.latest}`;\n                                }\n\n                                setFormInputPlaceholder('serial_numbers', placeholder, opts);\n                            }\n                        });\n\n                    } else {\n                        clearFormInput('serial_numbers', opts);\n                        disableFormInput('serial_numbers', opts);\n\n                        setFormInputPlaceholder('serial_numbers', '{% trans \"This part cannot be serialized\" %}', opts);\n                    }\n\n                    // Enable / disable fields based on purchaseable status\n                    if (data.purchaseable) {\n                        enableFormInput('supplier_part', opts);\n                        enableFormInput('purchase_price', opts);\n                        enableFormInput('purchase_price_currency', opts);\n                    } else {\n                        clearFormInput('supplier_part', opts);\n                        clearFormInput('purchase_price', opts);\n\n                        disableFormInput('supplier_part', opts);\n                        disableFormInput('purchase_price', opts);\n                        disableFormInput('purchase_price_currency', opts);\n                    }\n                }\n            }\n        },\n        supplier_part: {\n            icon: 'fa-building',\n            filters: {\n                part_detail: true,\n                supplier_detail: true,\n            },\n            adjustFilters: function(query, opts) {\n                var part = getFormFieldValue('part', {}, opts);\n\n                if (part) {\n                    query.part = part;\n                }\n\n                return query;\n            }\n        },\n        location: {\n            icon: 'fa-sitemap',\n        },\n        quantity: {\n            help_text: '{% trans \"Enter initial quantity for this stock item\" %}',\n        },\n        serial_numbers: {\n            icon: 'fa-hashtag',\n            type: 'string',\n            label: '{% trans \"Serial Numbers\" %}',\n            help_text: '{% trans \"Enter serial numbers for new stock (or leave blank)\" %}',\n            required: false,\n        },\n        serial: {\n            icon: 'fa-hashtag',\n        },\n        batch: {\n            icon: 'fa-layer-group',\n        },\n        status: {},\n        expiry_date: {},\n        purchase_price: {\n            icon: 'fa-dollar-sign',\n        },\n        purchase_price_currency: {},\n        packaging: {\n            icon: 'fa-box',\n        },\n        link: {\n            icon: 'fa-link',\n        },\n        owner: {},\n        delete_on_deplete: {},\n    };\n\n    if (options.create) {\n        // Use special \"serial numbers\" field when creating a new stock item\n        delete fields['serial'];\n    } else {\n        // These fields cannot be edited once the stock item has been created\n        delete fields['serial_numbers'];\n        delete fields['quantity'];\n        delete fields['location'];\n    }\n\n    // Remove stock expiry fields if feature is not enabled\n    if (!global_settings.STOCK_ENABLE_EXPIRY) {\n        delete fields['expiry_date'];\n    }\n\n    // Remove ownership field if feature is not enanbled\n    if (!global_settings.STOCK_OWNERSHIP_CONTROL) {\n        delete fields['owner'];\n    }\n\n    return fields;\n}\n\n\nfunction stockItemGroups(options={}) {\n    return {\n\n    };\n}\n\n\n/*\n * Launch a modal form to duplicate a given StockItem\n */\nfunction duplicateStockItem(pk, options) {\n\n    // If no \"success\" function provided, add a default\n    if (!options.onSuccess) {\n        options.onSuccess = function(response) {\n\n            showAlertOrCache('{% trans \"Stock item duplicated\" %}', true, {style: 'success'});\n\n            window.location.href = `/stock/item/${response.pk}/`;\n        };\n    }\n\n    // First, we need the StockItem information\n    inventreeGet(`/api/stock/${pk}/`, {}, {\n        success: function(data) {\n\n            // Do not duplicate the serial number\n            delete data['serial'];\n\n            options.data = data;\n\n            options.create = true;\n            options.fields = stockItemFields(options);\n            options.groups = stockItemGroups(options);\n\n            options.method = 'POST';\n            options.title = '{% trans \"Duplicate Stock Item\" %}';\n\n            constructForm('{% url \"api-stock-list\" %}', options);\n        }\n    });\n}\n\n\n/*\n * Launch a modal form to edit a given StockItem\n */\nfunction editStockItem(pk, options={}) {\n\n    var url = `/api/stock/${pk}/`;\n\n    options.create = false;\n\n    options.fields = stockItemFields(options);\n    options.groups = stockItemGroups(options);\n\n    options.title = '{% trans \"Edit Stock Item\" %}';\n\n    // Query parameters for retrieving stock item data\n    options.params = {\n        part_detail: true,\n        supplier_part_detail: true,\n    };\n\n    // Augment the rendered form when we receive information about the StockItem\n    options.processResults = function(data, fields, options) {\n        if (data.part_detail.trackable) {\n            delete options.fields.delete_on_deplete;\n        } else {\n            // Remove serial number field if part is not trackable\n            delete options.fields.serial;\n        }\n\n        // Remove pricing fields if part is not purchaseable\n        if (!data.part_detail.purchaseable) {\n            delete options.fields.supplier_part;\n            delete options.fields.purchase_price;\n            delete options.fields.purchase_price_currency;\n        }\n    };\n\n    constructForm(url, options);\n}\n\n\n/*\n * Launch an API form to contsruct a new stock item\n */\nfunction createNewStockItem(options={}) {\n\n    var url = '{% url \"api-stock-list\" %}';\n\n    options.title = '{% trans \"New Stock Item\" %}';\n    options.method = 'POST';\n\n    options.create = true;\n\n    options.fields = stockItemFields(options);\n    options.groups = stockItemGroups(options);\n\n    if (!options.onSuccess) {\n        options.onSuccess = function(response) {\n            // If a single stock item has been created, follow it!\n            if (response.pk) {\n                var url = `/stock/item/${response.pk}/`;\n\n                addCachedAlert('{% trans \"Created new stock item\" %}', {\n                    icon: 'fas fa-boxes',\n                });\n\n                window.location.href = url;\n            } else {\n\n                // Multiple stock items have been created (i.e. serialized stock)\n                var details = `\n                <br>{% trans \"Quantity\" %}: ${response.quantity}\n                <br>{% trans \"Serial Numbers\" %}: ${response.serial_numbers}\n                `;\n\n                showMessage('{% trans \"Created multiple stock items\" %}', {\n                    icon: 'fas fa-boxes',\n                    details: details,\n                });\n\n                var table = options.table || '#stock-table';\n\n                // Reload the table\n                $(table).bootstrapTable('refresh');\n            }\n        };\n    }\n\n    constructForm(url, options);\n}\n\n/*\n * Launch a modal form to find a particular stock item by serial number.\n * Arguments:\n * - part: ID (PK) of the part in question\n */\n\nfunction findStockItemBySerialNumber(part_id) {\n\n    constructFormBody({}, {\n        title: '{% trans \"Find Serial Number\" %}',\n        fields: {\n            serial: {\n                label: '{% trans \"Serial Number\" %}',\n                help_text: '{% trans \"Enter serial number\" %}',\n                placeholder: '{% trans \"Enter serial number\" %}',\n                required: true,\n                type: 'string',\n                value: '',\n            }\n        },\n        onSubmit: function(fields, opts) {\n\n            var serial = getFormFieldValue('serial', fields['serial'], opts);\n\n            serial = serial.toString().trim();\n\n            if (!serial) {\n                handleFormErrors(\n                    {\n                        'serial': [\n                            '{% trans \"Enter a serial number\" %}',\n                        ]\n                    }, fields, opts\n                );\n                return;\n            }\n\n            inventreeGet(\n                '{% url \"api-stock-list\" %}',\n                {\n                    part_tree: part_id,\n                    serial: serial,\n                },\n                {\n                    success: function(response) {\n                        if (response.length == 0) {\n                            // No results!\n                            handleFormErrors(\n                                {\n                                    'serial': [\n                                        '{% trans \"No matching serial number\" %}',\n                                    ]\n                                }, fields, opts\n                            );\n                        } else if (response.length > 1) {\n                            // Too many results!\n                            handleFormErrors(\n                                {\n                                    'serial': [\n                                        '{% trans \"More than one matching result found\" %}',\n                                    ]\n                                }, fields, opts\n                            );\n                        } else {\n                            $(opts.modal).modal('hide');\n\n                            // Redirect\n                            var pk = response[0].pk;\n                            location.href = `/stock/item/${pk}/`;\n                        }\n                    },\n                    error: function(xhr) {\n                        showApiError(xhr, opts.url);\n                        $(opts.modal).modal('hide');\n                    }\n                }\n            );\n        }\n    });\n}\n\n\n/* Stock API functions\n * Requires api.js to be loaded first\n */\n\nfunction stockStatusCodes() {\n    return [\n        {% for code in StockStatus.list %}\n        {\n            key: {{ code.key }},\n            text: '{{ code.value }}',\n        },\n        {% endfor %}\n    ];\n}\n\n\n/**\n * Assign multiple stock items to a customer\n */\nfunction assignStockToCustomer(items, options={}) {\n\n    // Generate HTML content for the form\n    var html = `\n    <table class='table table-striped table-condensed' id='stock-assign-table'>\n    <thead>\n        <tr>\n            <th>{% trans \"Part\" %}</th>\n            <th>{% trans \"Stock Item\" %}</th>\n            <th>{% trans \"Location\" %}</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n    `;\n\n    for (var idx = 0; idx < items.length; idx++) {\n\n        var item = items[idx];\n\n        var pk = item.pk;\n\n        var part = item.part_detail;\n\n        var thumbnail = thumbnailImage(part.thumbnail || part.image);\n\n        var status = stockStatusDisplay(item.status, {classes: 'float-right'});\n\n        var quantity = '';\n\n        if (item.serial && item.quantity == 1) {\n            quantity = `{% trans \"Serial\" %}: ${item.serial}`;\n        } else {\n            quantity = `{% trans \"Quantity\" %}: ${item.quantity}`;\n        }\n\n        quantity += status;\n\n        var location = locationDetail(item, false);\n\n        var buttons = `<div class='btn-group' role='group'>`;\n\n        buttons += makeIconButton(\n            'fa-times icon-red',\n            'button-stock-item-remove',\n            pk,\n            '{% trans \"Remove row\" %}',\n        );\n\n        buttons += '</div>';\n\n        html += `\n        <tr id='stock_item_${pk}' class='stock-item-row'>\n            <td id='part_${pk}'>${thumbnail} ${part.full_name}</td>\n            <td id='stock_${pk}'>\n                <div id='div_id_items_item_${pk}'>\n                    ${quantity}\n                    <div id='errors-items_item_${pk}'></div>\n                </div>\n            </td>\n            <td id='location_${pk}'>${location}</td>\n            <td id='buttons_${pk}'>${buttons}</td>\n        </tr>\n        `;\n    }\n\n    html += `</tbody></table>`;\n\n    constructForm('{% url \"api-stock-assign\" %}', {\n        method: 'POST',\n        preFormContent: html,\n        fields: {\n            customer: {\n                value: options.customer,\n                filters: {\n                    is_customer: true,\n                },\n            },\n            notes: {},\n        },\n        confirm: true,\n        confirmMessage: '{% trans \"Confirm stock assignment\" %}',\n        title: '{% trans \"Assign Stock to Customer\" %}',\n        afterRender: function(fields, opts) {\n            // Add button callbacks to remove rows\n            $(opts.modal).find('.button-stock-item-remove').click(function() {\n                var pk = $(this).attr('pk');\n\n                $(opts.modal).find(`#stock_item_${pk}`).remove();\n            });\n        },\n        onSubmit: function(fields, opts) {\n\n            // Extract data elements from the form\n            var data = {\n                customer: getFormFieldValue('customer', {}, opts),\n                notes: getFormFieldValue('notes', {}, opts),\n                items: [],\n            };\n\n            var item_pk_values = [];\n\n            items.forEach(function(item) {\n                var pk = item.pk;\n\n                // Does the row exist in the form?\n                var row = $(opts.modal).find(`#stock_item_${pk}`);\n\n                if (row.exists()) {\n                    item_pk_values.push(pk);\n\n                    data.items.push({\n                        item: pk,\n                    });\n                }\n            });\n\n            opts.nested = {\n                'items': item_pk_values,\n            };\n\n            inventreePut(\n                '{% url \"api-stock-assign\" %}',\n                data,\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        $(opts.modal).modal('hide');\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        }\n    });\n}\n\n\n/**\n * Merge multiple stock items together\n */\nfunction mergeStockItems(items, options={}) {\n\n    // Generate HTML content for the form\n    var html = `\n    <div class='alert alert-block alert-danger'>\n    <h5>{% trans \"Warning: Merge operation cannot be reversed\" %}</h5>\n    <strong>{% trans \"Some information will be lost when merging stock items\" %}:</strong>\n    <ul>\n        <li>{% trans \"Stock transaction history will be deleted for merged items\" %}</li>\n        <li>{% trans \"Supplier part information will be deleted for merged items\" %}</li>\n    </ul>\n    </div>\n    `;\n\n    html += `\n    <table class='table table-striped table-condensed' id='stock-merge-table'>\n    <thead>\n        <tr>\n            <th>{% trans \"Part\" %}</th>\n            <th>{% trans \"Stock Item\" %}</th>\n            <th>{% trans \"Location\" %}</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n    `;\n\n    // Keep track of how many \"locations\" there are\n    var locations = [];\n\n    for (var idx = 0; idx < items.length; idx++) {\n        var item = items[idx];\n\n        var pk = item.pk;\n\n        if (item.location && !locations.includes(item.location)) {\n            locations.push(item.location);\n        }\n\n        var part = item.part_detail;\n        var location = locationDetail(item, false);\n\n        var thumbnail = thumbnailImage(part.thumbnail || part.image);\n\n        var quantity = '';\n\n        if (item.serial && item.quantity == 1) {\n            quantity = `{% trans \"Serial\" %}: ${item.serial}`;\n        } else {\n            quantity = `{% trans \"Quantity\" %}: ${item.quantity}`;\n        }\n\n        quantity += stockStatusDisplay(item.status, {classes: 'float-right'});\n\n        var buttons = `<div class='btn-group' role='group'>`;\n\n        buttons += makeIconButton(\n            'fa-times icon-red',\n            'button-stock-item-remove',\n            pk,\n            '{% trans \"Remove row\" %}',\n        );\n\n        html += `\n        <tr id='stock_item_${pk}' class='stock-item-row'>\n            <td id='part_${pk}'>${thumbnail} ${part.full_name}</td>\n            <td id='stock_${pk}'>\n                <div id='div_id_items_item_${pk}'>\n                    ${quantity}\n                    <div id='errors-items_item_${pk}'></div>\n                </div>\n            </td>\n            <td id='location_${pk}'>${location}</td>\n            <td id='buttons_${pk}'>${buttons}</td>\n        </tr>\n        `;\n    }\n\n    html += '</tbody></table>';\n\n    var location = locations.length == 1 ? locations[0] : null;\n\n    constructForm('{% url \"api-stock-merge\" %}', {\n        method: 'POST',\n        preFormContent: html,\n        fields: {\n            location: {\n                value: location,\n                icon: 'fa-sitemap',\n            },\n            notes: {},\n            allow_mismatched_suppliers: {},\n            allow_mismatched_status: {},\n        },\n        confirm: true,\n        confirmMessage: '{% trans \"Confirm stock item merge\" %}',\n        title: '{% trans \"Merge Stock Items\" %}',\n        afterRender: function(fields, opts) {\n            // Add button callbacks to remove rows\n            $(opts.modal).find('.button-stock-item-remove').click(function() {\n                var pk = $(this).attr('pk');\n\n                $(opts.modal).find(`#stock_item_${pk}`).remove();\n            });\n        },\n        onSubmit: function(fields, opts) {\n\n            // Extract data elements from the form\n            var data = {\n                items: [],\n            };\n\n            var item_pk_values = [];\n\n            items.forEach(function(item) {\n                var pk = item.pk;\n\n                // Does the row still exist in the form?\n                var row = $(opts.modal).find(`#stock_item_${pk}`);\n\n                if (row.exists()) {\n                    item_pk_values.push(pk);\n\n                    data.items.push({\n                        item: pk,\n                    });\n                }\n            });\n\n            var extra_fields = [\n                'location',\n                'notes',\n                'allow_mismatched_suppliers',\n                'allow_mismatched_status',\n            ];\n\n            extra_fields.forEach(function(field) {\n                data[field] = getFormFieldValue(field, fields[field], opts);\n            });\n\n            opts.nested = {\n                'items': item_pk_values\n            };\n\n            // Submit the form data\n            inventreePut(\n                '{% url \"api-stock-merge\" %}',\n                data,\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        $(opts.modal).modal('hide');\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        }\n    });\n}\n\n\n/**\n * Perform stock adjustments\n */\nfunction adjustStock(action, items, options={}) {\n\n    var formTitle = 'Form Title Here';\n    var actionTitle = null;\n\n    // API url\n    var url = null;\n\n    var specifyLocation = false;\n    var allowSerializedStock = false;\n\n    switch (action) {\n    case 'move':\n        formTitle = '{% trans \"Transfer Stock\" %}';\n        actionTitle = '{% trans \"Move\" %}';\n        specifyLocation = true;\n        allowSerializedStock = true;\n        url = '{% url \"api-stock-transfer\" %}';\n        break;\n    case 'count':\n        formTitle = '{% trans \"Count Stock\" %}';\n        actionTitle = '{% trans \"Count\" %}';\n        url = '{% url \"api-stock-count\" %}';\n        break;\n    case 'take':\n        formTitle = '{% trans \"Remove Stock\" %}';\n        actionTitle = '{% trans \"Take\" %}';\n        url = '{% url \"api-stock-remove\" %}';\n        break;\n    case 'add':\n        formTitle = '{% trans \"Add Stock\" %}';\n        actionTitle = '{% trans \"Add\" %}';\n        url = '{% url \"api-stock-add\" %}';\n        break;\n    case 'delete':\n        formTitle = '{% trans \"Delete Stock\" %}';\n        allowSerializedStock = true;\n        break;\n    default:\n        break;\n    }\n\n    // Generate modal HTML content\n    var html = `\n    <table class='table table-striped table-condensed' id='stock-adjust-table'>\n    <thead>\n    <tr>\n        <th>{% trans \"Part\" %}</th>\n        <th>{% trans \"Stock\" %}</th>\n        <th>{% trans \"Location\" %}</th>\n        <th>${actionTitle || ''}</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    `;\n\n    var itemCount = 0;\n\n    for (var idx = 0; idx < items.length; idx++) {\n\n        var item = items[idx];\n\n        if ((item.serial != null) && !allowSerializedStock) {\n            continue;\n        }\n\n        var pk = item.pk;\n\n        var readonly = (item.serial != null);\n        var minValue = null;\n        var maxValue = null;\n        var value = null;\n\n        switch (action) {\n        case 'move':\n            minValue = 0;\n            maxValue = item.quantity;\n            value = item.quantity;\n            break;\n        case 'add':\n            minValue = 0;\n            value = 0;\n            break;\n        case 'take':\n            minValue = 0;\n            value = 0;\n            break;\n        case 'count':\n            minValue = 0;\n            value = item.quantity;\n            break;\n        default:\n            break;\n        }\n\n        var thumb = thumbnailImage(item.part_detail.thumbnail || item.part_detail.image);\n\n        var status = stockStatusDisplay(item.status, {\n            classes: 'float-right'\n        });\n\n        var quantity = item.quantity;\n\n        var location = locationDetail(item, false);\n\n        if (item.location_detail) {\n            location = item.location_detail.pathstring;\n        }\n\n        if (item.serial != null) {\n            quantity = `#${item.serial}`;\n        }\n\n        if (item.batch) {\n            quantity += ` - <small>{% trans \"Batch\" %}: ${item.batch}</small>`;\n        }\n\n        var actionInput = '';\n\n        if (actionTitle != null) {\n            actionInput = constructField(\n                `items_quantity_${pk}`,\n                {\n                    type: 'decimal',\n                    min_value: minValue,\n                    max_value: maxValue,\n                    value: value,\n                    title: readonly ? '{% trans \"Quantity cannot be adjusted for serialized stock\" %}' : '{% trans \"Specify stock quantity\" %}',\n                    required: true,\n                },\n                {\n                    hideLabels: true,\n                }\n            );\n        }\n\n        var buttons = `<div class='btn-group float-right' role='group'>`;\n\n        buttons += makeIconButton(\n            'fa-times icon-red',\n            'button-stock-item-remove',\n            pk,\n            '{% trans \"Remove stock item\" %}',\n        );\n\n        buttons += `</div>`;\n\n        html += `\n        <tr id='stock_item_${pk}' class='stock-item-row'>\n            <td id='part_${pk}'>${thumb} ${item.part_detail.full_name}</td>\n            <td id='stock_${pk}'>${quantity}${status}</td>\n            <td id='location_${pk}'>${location}</td>\n            <td id='action_${pk}'>\n                <div id='div_id_${pk}'>\n                    ${actionInput}\n                    <div id='errors-${pk}'></div>\n                </div>\n            </td>\n            <td id='buttons_${pk}'>${buttons}</td>\n        </tr>`;\n\n        itemCount += 1;\n    }\n\n    if (itemCount == 0) {\n        showAlertDialog(\n            '{% trans \"Select Stock Items\" %}',\n            '{% trans \"You must select at least one available stock item\" %}',\n        );\n\n        return;\n    }\n\n    html += `</tbody></table>`;\n\n    var extraFields = {};\n\n    if (specifyLocation) {\n        extraFields.location = {};\n    }\n\n    if (action != 'delete') {\n        extraFields.notes = {};\n    }\n\n    constructForm(url, {\n        method: 'POST',\n        fields: extraFields,\n        preFormContent: html,\n        confirm: true,\n        confirmMessage: '{% trans \"Confirm stock adjustment\" %}',\n        title: formTitle,\n        afterRender: function(fields, opts) {\n            // Add button callbacks to remove rows\n            $(opts.modal).find('.button-stock-item-remove').click(function() {\n                var pk = $(this).attr('pk');\n\n                $(opts.modal).find(`#stock_item_${pk}`).remove();\n            });\n\n            // Initialize \"location\" field\n            if (specifyLocation) {\n                initializeRelatedField(\n                    {\n                        name: 'location',\n                        type: 'related field',\n                        model: 'stocklocation',\n                        required: true,\n                    },\n                    null,\n                    opts\n                );\n            }\n        },\n        onSubmit: function(fields, opts) {\n\n            // Extract data elements from the form\n            var data = {\n                items: [],\n            };\n\n            if (action != 'delete') {\n                data.notes = getFormFieldValue('notes', {}, opts);\n            }\n\n            if (specifyLocation) {\n                data.location = getFormFieldValue('location', {}, opts);\n            }\n\n            var item_pk_values = [];\n\n            items.forEach(function(item) {\n                var pk = item.pk;\n\n                // Does the row exist in the form?\n                var row = $(opts.modal).find(`#stock_item_${pk}`);\n\n                if (row.exists()) {\n\n                    item_pk_values.push(pk);\n\n                    var quantity = getFormFieldValue(`items_quantity_${pk}`, {}, opts);\n\n                    data.items.push({\n                        pk: pk,\n                        quantity: quantity,\n                    });\n                }\n            });\n\n            // Delete action is handled differently\n            if (action == 'delete') {\n                var requests = [];\n\n                item_pk_values.forEach(function(pk) {\n                    requests.push(\n                        inventreeDelete(\n                            `/api/stock/${pk}/`,\n                        )\n                    );\n                });\n\n                // Wait for *all* the requests to complete\n                $.when.apply($, requests).done(function() {\n                    // Destroy the modal window\n                    $(opts.modal).modal('hide');\n\n                    if (options.success) {\n                        options.success();\n                    }\n                });\n\n                return;\n            }\n\n            opts.nested = {\n                'items': item_pk_values,\n            };\n\n            inventreePut(\n                url,\n                data,\n                {\n                    method: 'POST',\n                    success: function(response) {\n                        // Hide the modal\n                        $(opts.modal).modal('hide');\n\n                        if (options.success) {\n                            options.success(response);\n                        }\n                    },\n                    error: function(xhr) {\n                        switch (xhr.status) {\n                        case 400:\n                            handleFormErrors(xhr.responseJSON, fields, opts);\n                            break;\n                        default:\n                            $(opts.modal).modal('hide');\n                            showApiError(xhr, opts.url);\n                            break;\n                        }\n                    }\n                }\n            );\n        }\n    });\n}\n\n\nfunction removeStockRow(e) {\n    // Remove a selected row from a stock modal form\n\n    e = e || window.event;\n    var src = e.target || e.srcElement;\n\n    var row = $(src).attr('row');\n\n    $('#' + row).remove();\n}\n\n\nfunction passFailBadge(result) {\n\n    if (result) {\n        return `<span class='badge badge-right rounded-pill bg-success'>{% trans \"PASS\" %}</span>`;\n    } else {\n        return `<span class='badge badge-right rounded-pill bg-danger'>{% trans \"FAIL\" %}</span>`;\n    }\n}\n\nfunction noResultBadge() {\n    return `<span class='badge badge-right rounded-pill bg-info'>{% trans \"NO RESULT\" %}</span>`;\n}\n\nfunction formatDate(row) {\n    // Function for formatting date field\n    var html = row.date;\n\n    if (row.user_detail) {\n        html += `<span class='badge badge-right rounded-pill bg-secondary'>${row.user_detail.username}</span>`;\n    }\n\n    return html;\n}\n\n/*\n * Load StockItemTestResult table\n */\nfunction loadStockTestResultsTable(table, options) {\n\n    // Setup filters for the table\n    var filterTarget = options.filterTarget || '#filter-list-stocktests';\n\n    var filterKey = options.filterKey || options.name || 'stocktests';\n\n    var filters = loadTableFilters(filterKey);\n\n    var params = {\n        part: options.part,\n    };\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n        filters[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterTarget);\n\n    function makeButtons(row, grouped) {\n\n        // Helper function for rendering buttons\n\n        var html = `<div class='btn-group float-right' role='group'>`;\n\n        if (row.requires_attachment == false && row.requires_value == false && !row.result) {\n            // Enable a \"quick tick\" option for this test result\n            html += makeIconButton('fa-check-circle icon-green', 'button-test-tick', row.test_name, '{% trans \"Pass test\" %}');\n        }\n\n        html += makeIconButton('fa-plus icon-green', 'button-test-add', row.test_name, '{% trans \"Add test result\" %}');\n\n        if (!grouped && row.result != null) {\n            var pk = row.pk;\n            html += makeIconButton('fa-edit icon-blue', 'button-test-edit', pk, '{% trans \"Edit test result\" %}');\n            html += makeIconButton('fa-trash-alt icon-red', 'button-test-delete', pk, '{% trans \"Delete test result\" %}');\n        }\n\n        html += '</div>';\n\n        return html;\n    }\n\n    var parent_node = 'parent node';\n\n    table.inventreeTable({\n        url: '{% url \"api-part-test-template-list\" %}',\n        method: 'get',\n        name: 'testresult',\n        treeEnable: true,\n        rootParentId: parent_node,\n        parentIdField: 'parent',\n        idField: 'pk',\n        uniqueId: 'pk',\n        treeShowField: 'test_name',\n        formatNoMatches: function() {\n            return '{% trans \"No test results found\" %}';\n        },\n        queryParams: filters,\n        original: original,\n        onPostBody: function() {\n            table.treegrid({\n                treeColumn: 0,\n            });\n            table.treegrid('collapseAll');\n        },\n        columns: [\n            {\n                field: 'pk',\n                title: 'ID',\n                visible: false,\n                switchable: false,\n            },\n            {\n                field: 'test_name',\n                title: '{% trans \"Test Name\" %}',\n                sortable: true,\n                formatter: function(value, row) {\n                    var html = value;\n\n                    if (row.required) {\n                        html = `<b>${value}</b>`;\n                    }\n\n                    if (row.result == null) {\n                        html += noResultBadge();\n                    } else {\n                        html += passFailBadge(row.result);\n                    }\n\n                    return html;\n                }\n            },\n            {\n                field: 'value',\n                title: '{% trans \"Value\" %}',\n                formatter: function(value, row) {\n                    var html = value;\n\n                    if (row.attachment) {\n                        html += `<a href='${row.attachment}'><span class='fas fa-file-alt float-right'></span></a>`;\n                    }\n\n                    return html;\n                }\n            },\n            {\n                field: 'notes',\n                title: '{% trans \"Notes\" %}',\n            },\n            {\n                field: 'date',\n                title: '{% trans \"Test Date\" %}',\n                sortable: true,\n                formatter: function(value, row) {\n                    return formatDate(row);\n                },\n            },\n            {\n                field: 'buttons',\n                formatter: function(value, row) {\n                    return makeButtons(row, false);\n                }\n            }\n        ],\n        onLoadSuccess: function(tableData) {\n\n            // Set \"parent\" for each existing row\n            tableData.forEach(function(item, idx) {\n                tableData[idx].parent = parent_node;\n            });\n\n            // Once the test template data are loaded, query for test results\n\n            var filters = loadTableFilters(filterKey);\n\n            var query_params = {\n                stock_item: options.stock_item,\n                user_detail: true,\n                attachment_detail: true,\n                ordering: '-date',\n            };\n\n            if ('result' in filters) {\n                query_params.result = filters.result;\n            }\n\n            if ('include_installed' in filters) {\n                query_params.include_installed = filters.include_installed;\n            }\n\n            inventreeGet(\n                '{% url \"api-stock-test-result-list\" %}',\n                query_params,\n                {\n                    success: function(data) {\n                        // Iterate through the returned test data\n                        data.forEach(function(item) {\n\n                            var match = false;\n                            var override = false;\n\n                            // Extract the simplified test key\n                            var key = item.key;\n\n                            // Attempt to associate this result with an existing test\n                            for (var idx = 0; idx < tableData.length; idx++) {\n\n                                var row = tableData[idx];\n\n                                if (key == row.key) {\n\n                                    item.test_name = row.test_name;\n                                    item.required = row.required;\n\n                                    if (row.result == null) {\n                                        item.parent = parent_node;\n                                        tableData[idx] = item;\n                                        override = true;\n                                    } else {\n                                        item.parent = row.pk;\n                                    }\n\n                                    match = true;\n\n                                    break;\n                                }\n                            }\n\n                            // No match could be found\n                            if (!match) {\n                                item.test_name = item.test;\n                                item.parent = parent_node;\n                            }\n\n                            if (!override) {\n                                tableData.push(item);\n                            }\n\n                        });\n\n                        // Push data back into the table\n                        table.bootstrapTable('load', tableData);\n                    }\n                }\n            );\n        }\n    });\n\n    /* Register button callbacks */\n\n    function reloadTestTable(response) {\n        $(table).bootstrapTable('refresh');\n    }\n\n    // \"tick\" a test result\n    $(table).on('click', '.button-test-tick', function() {\n        var button = $(this);\n\n        var test_name = button.attr('pk');\n\n        inventreePut(\n            '{% url \"api-stock-test-result-list\" %}',\n            {\n                test: test_name,\n                result: true,\n                stock_item: options.stock_item,\n            },\n            {\n                method: 'POST',\n                success: reloadTestTable,\n            }\n        );\n    });\n\n    // Add a test result\n    $(table).on('click', '.button-test-add', function() {\n        var button = $(this);\n\n        var test_name = button.attr('pk');\n\n        constructForm('{% url \"api-stock-test-result-list\" %}', {\n            method: 'POST',\n            fields: {\n                test: {\n                    value: test_name,\n                },\n                result: {},\n                value: {},\n                attachment: {},\n                notes: {},\n                stock_item: {\n                    value: options.stock_item,\n                    hidden: true,\n                }\n            },\n            title: '{% trans \"Add Test Result\" %}',\n            onSuccess: reloadTestTable,\n        });\n    });\n\n    // Edit a test result\n    $(table).on('click', '.button-test-edit', function() {\n        var button = $(this);\n\n        var pk = button.attr('pk');\n\n        var url = `/api/stock/test/${pk}/`;\n\n        constructForm(url, {\n            fields: {\n                test: {},\n                result: {},\n                value: {},\n                attachment: {},\n                notes: {},\n            },\n            title: '{% trans \"Edit Test Result\" %}',\n            onSuccess: reloadTestTable,\n        });\n    });\n\n    // Delete a test result\n    $(table).on('click', '.button-test-delete', function() {\n        var button = $(this);\n\n        var pk = button.attr('pk');\n\n        var url = `/api/stock/test/${pk}/`;\n\n        var row = $(table).bootstrapTable('getRowByUniqueId', pk);\n\n        var html = `\n        <div class='alert alert-block alert-danger'>\n        <strong>{% trans \"Delete test result\" %}:</strong> ${row.test_name || row.test || row.key}\n        </div>`;\n\n        constructForm(url, {\n            method: 'DELETE',\n            title: '{% trans \"Delete Test Result\" %}',\n            onSuccess: reloadTestTable,\n            preFormContent: html,\n        });\n    });\n}\n\n\nfunction locationDetail(row, showLink=true) {\n    /*\n     * Function to display a \"location\" of a StockItem.\n     *\n     * Complicating factors: A StockItem may not actually *be* in a location!\n     * - Could be at a customer\n     * - Could be installed in another stock item\n     * - Could be assigned to a sales order\n     * - Could be currently in production!\n     *\n     * So, instead of being naive, we'll check!\n     */\n\n    // Display text\n    var text = '';\n\n    // URL (optional)\n    var url = '';\n\n    if (row.is_building && row.build) {\n        // StockItem is currently being built!\n        text = '{% trans \"In production\" %}';\n        url = `/build/${row.build}/`;\n    } else if (row.belongs_to) {\n        // StockItem is installed inside a different StockItem\n        text = `{% trans \"Installed in Stock Item\" %} ${row.belongs_to}`;\n        url = `/stock/item/${row.belongs_to}/?display=installed-items`;\n    } else if (row.customer) {\n        // StockItem has been assigned to a customer\n        text = '{% trans \"Shipped to customer\" %}';\n        url = `/company/${row.customer}/?display=assigned-stock`;\n    } else if (row.sales_order) {\n        // StockItem has been assigned to a sales order\n        text = '{% trans \"Assigned to Sales Order\" %}';\n        url = `/order/sales-order/${row.sales_order}/`;\n    } else if (row.location && row.location_detail) {\n        text = row.location_detail.pathstring;\n        url = `/stock/location/${row.location}/`;\n    } else {\n        text = '<i>{% trans \"No stock location set\" %}</i>';\n        url = '';\n    }\n\n    if (showLink && url) {\n        return renderLink(text, url);\n    } else {\n        return text;\n    }\n}\n\n\nfunction loadStockTable(table, options) {\n    /* Load data into a stock table with adjustable options.\n     * Fetches data (via AJAX) and loads into a bootstrap table.\n     * Also links in default button callbacks.\n     *\n     * Options:\n     *  url - URL for the stock query\n     *  params - query params for augmenting stock data request\n     *  groupByField - Column for grouping stock items\n     *  buttons - Which buttons to link to stock selection callbacks\n     *  filterList - <ul> element where filters are displayed\n     *  disableFilters: If true, disable custom filters\n     */\n\n    // List of user-params which override the default filters\n\n    options.params['location_detail'] = true;\n    options.params['part_detail'] = true;\n\n    var params = options.params || {};\n\n    var filterTarget = options.filterTarget || '#filter-list-stock';\n\n    var filters = {};\n\n    var filterKey = options.filterKey || options.name || 'stock';\n\n    if (!options.disableFilters) {\n        filters = loadTableFilters(filterKey);\n    }\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterTarget, {download: true});\n\n    // Override the default values, or add new ones\n    for (var key in params) {\n        filters[key] = params[key];\n    }\n\n    var grouping = true;\n\n    if ('grouping' in options) {\n        grouping = options.grouping;\n    }\n\n    var col = null;\n\n    // Explicitly disable part grouping functionality\n    // Might be able to add this in later on,\n    // but there is a bug which makes this crash if paginating on the server side.\n    // Ref: https://github.com/wenzhixin/bootstrap-table/issues/3250\n    // eslint-disable-next-line no-unused-vars\n    grouping = false;\n\n    var columns = [\n        {\n            checkbox: true,\n            title: '{% trans \"Select\" %}',\n            searchable: false,\n            switchable: false,\n        },\n        {\n            field: 'pk',\n            title: 'ID',\n            visible: false,\n            switchable: false,\n        }\n    ];\n\n    col = {\n        field: 'part_detail.full_name',\n        title: '{% trans \"Part\" %}',\n        sortName: 'part__name',\n        visible: params['part_detail'],\n        switchable: params['part_detail'],\n        formatter: function(value, row) {\n\n            var url = `/stock/item/${row.pk}/`;\n            var thumb = row.part_detail.thumbnail;\n            var name = row.part_detail.full_name;\n\n            var html = imageHoverIcon(thumb) + renderLink(name, url);\n\n            html += makePartIcons(row.part_detail);\n\n            return html;\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'part_detail.IPN',\n        title: '{% trans \"IPN\" %}',\n        sortName: 'part__IPN',\n        visible: params['part_detail'],\n        switchable: params['part_detail'],\n        formatter: function(value, row) {\n            return row.part_detail.IPN;\n        },\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    columns.push({\n        field: 'part_detail.description',\n        title: '{% trans \"Description\" %}',\n        visible: params['part_detail'],\n        switchable: params['part_detail'],\n        formatter: function(value, row) {\n            return row.part_detail.description;\n        }\n    });\n\n    col = {\n        field: 'quantity',\n        sortName: 'stock',\n        title: '{% trans \"Stock\" %}',\n        sortable: true,\n        formatter: function(value, row) {\n\n            var val = '';\n\n            var available = Math.max(0, (row.quantity || 0) - (row.allocated || 0));\n\n            if (row.serial && row.quantity == 1) {\n                // If there is a single unit with a serial number, use the serial number\n                val = '# ' + row.serial;\n            } else if (row.quantity != available) {\n                // Some quantity is available, show available *and* quantity\n                var ava = +parseFloat(available).toFixed(5);\n                var tot = +parseFloat(row.quantity).toFixed(5);\n\n                val = `${ava} / ${tot}`;\n            } else {\n                // Format floating point numbers with this one weird trick\n                val = +parseFloat(value).toFixed(5);\n            }\n\n            var html = renderLink(val, `/stock/item/${row.pk}/`);\n\n            if (row.is_building) {\n                html += makeIconBadge('fa-tools', '{% trans \"Stock item is in production\" %}');\n            }\n\n            if (row.sales_order) {\n                // Stock item has been assigned to a sales order\n                html += makeIconBadge('fa-truck', '{% trans \"Stock item assigned to sales order\" %}');\n            } else if (row.customer) {\n                // StockItem has been assigned to a customer\n                html += makeIconBadge('fa-user', '{% trans \"Stock item assigned to customer\" %}');\n            } else if (row.allocated) {\n                if (row.serial != null && row.quantity == 1) {\n                    html += makeIconBadge('fa-bookmark icon-yellow', '{% trans \"Serialized stock item has been allocated\" %}');\n                } else if (row.allocated >= row.quantity) {\n                    html += makeIconBadge('fa-bookmark icon-yellow', '{% trans \"Stock item has been fully allocated\" %}');\n                } else {\n                    html += makeIconBadge('fa-bookmark', '{% trans \"Stock item has been partially allocated\" %}');\n                }\n            } else if (row.belongs_to) {\n                html += makeIconBadge('fa-box', '{% trans \"Stock item has been installed in another item\" %}');\n            }\n\n            if (row.expired) {\n                html += makeIconBadge('fa-calendar-times icon-red', '{% trans \"Stock item has expired\" %}');\n            } else if (row.stale) {\n                html += makeIconBadge('fa-stopwatch', '{% trans \"Stock item will expire soon\" %}');\n            }\n\n            // Special stock status codes\n\n            // REJECTED\n            if (row.status == {{ StockStatus.REJECTED }}) {\n                html += makeIconBadge('fa-times-circle icon-red', '{% trans \"Stock item has been rejected\" %}');\n            } else if (row.status == {{ StockStatus.LOST }}) {\n                html += makeIconBadge('fa-question-circle', '{% trans \"Stock item is lost\" %}');\n            } else if (row.status == {{ StockStatus.DESTROYED }}) {\n                html += makeIconBadge('fa-skull-crossbones', '{% trans \"Stock item is destroyed\" %}');\n            }\n\n            if (row.quantity <= 0) {\n                html += `<span class='badge badge-right rounded-pill bg-danger'>{% trans \"Depleted\" %}</span>`;\n            }\n\n            return html;\n        }\n    };\n\n    columns.push(col);\n\n    col = {\n        field: 'status',\n        title: '{% trans \"Status\" %}',\n        formatter: function(value) {\n            return stockStatusDisplay(value);\n        },\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'batch',\n        title: '{% trans \"Batch\" %}',\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'location_detail.pathstring',\n        title: '{% trans \"Location\" %}',\n        sortName: 'location',\n        formatter: function(value, row) {\n            return locationDetail(row);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'stocktake_date',\n        title: '{% trans \"Stocktake\" %}',\n        formatter: function(value) {\n            return renderDate(value);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'expiry_date',\n        title: '{% trans \"Expiry Date\" %}',\n        visible: global_settings.STOCK_ENABLE_EXPIRY,\n        switchable: global_settings.STOCK_ENABLE_EXPIRY,\n        formatter: function(value) {\n            return renderDate(value);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'updated',\n        title: '{% trans \"Last Updated\" %}',\n        formatter: function(value) {\n            return renderDate(value);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col['sortable'] = true;\n    }\n\n    columns.push(col);\n\n    columns.push({\n        field: 'purchase_order',\n        title: '{% trans \"Purchase Order\" %}',\n        formatter: function(value, row) {\n            if (!value) {\n                return '-';\n            }\n\n            var link = `/order/purchase-order/${row.purchase_order}/`;\n            var text = `${row.purchase_order}`;\n\n            if (row.purchase_order_reference) {\n\n                var prefix = global_settings.PURCHASEORDER_REFERENCE_PREFIX;\n\n                text = prefix + row.purchase_order_reference;\n            }\n\n            return renderLink(text, link);\n        }\n    });\n\n    col = {\n\n        field: 'supplier_part',\n        title: '{% trans \"Supplier Part\" %}',\n        visible: params['supplier_part_detail'] || false,\n        switchable: params['supplier_part_detail'] || false,\n        formatter: function(value, row) {\n            if (!value) {\n                return '-';\n            }\n\n            var link = `/supplier-part/${row.supplier_part}/?display=part-stock`;\n\n            var text = '';\n\n            if (row.supplier_part_detail) {\n                text = `${row.supplier_part_detail.SKU}`;\n            } else {\n                text = `<i>{% trans \"Supplier part not specified\" %}</i>`;\n            }\n\n            return renderLink(text, link);\n        }\n    };\n\n    if (!options.params.ordering) {\n        col.sortable = true;\n        col.sortName = 'SKU';\n    }\n\n    columns.push(col);\n\n    col = {\n        field: 'purchase_price_string',\n        title: '{% trans \"Purchase Price\" %}',\n    };\n\n    if (!options.params.ordering) {\n        col.sortable = true;\n        col.sortName = 'purchase_price';\n    }\n\n    columns.push(col);\n\n    columns.push({\n        field: 'packaging',\n        title: '{% trans \"Packaging\" %}',\n    },\n    {\n        field: 'notes',\n        title: '{% trans \"Notes\" %}',\n    });\n\n    table.inventreeTable({\n        method: 'get',\n        formatNoMatches: function() {\n            return '{% trans \"No stock items matching query\" %}';\n        },\n        url: options.url || '{% url \"api-stock-list\" %}',\n        queryParams: filters,\n        sidePagination: 'server',\n        name: 'stock',\n        original: original,\n        showColumns: true,\n        columns: columns,\n    });\n\n    var buttons = [\n        '#stock-print-options',\n        '#stock-options',\n    ];\n\n    if (global_settings.BARCODE_ENABLE) {\n        buttons.push('#stock-barcode-options');\n    }\n\n    linkButtonsToSelection(\n        table,\n        buttons,\n    );\n\n    function stockAdjustment(action) {\n        var items = $(table).bootstrapTable('getSelections');\n\n        adjustStock(action, items, {\n            success: function() {\n                $(table).bootstrapTable('refresh');\n            }\n        });\n    }\n\n    // Automatically link button callbacks\n\n    $('#multi-item-print-label').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var items = [];\n\n        selections.forEach(function(item) {\n            items.push(item.pk);\n        });\n\n        printStockItemLabels(items);\n    });\n\n    $('#multi-item-print-test-report').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var items = [];\n\n        selections.forEach(function(item) {\n            items.push(item.pk);\n        });\n\n        printTestReports(items);\n    });\n\n    if (global_settings.BARCODE_ENABLE) {\n        $('#multi-item-barcode-scan-into-location').click(function() {\n            var selections = $(table).bootstrapTable('getSelections');\n\n            var items = [];\n\n            selections.forEach(function(item) {\n                items.push(item);\n            });\n\n            scanItemsIntoLocation(items);\n        });\n    }\n\n    $('#multi-item-stocktake').click(function() {\n        stockAdjustment('count');\n    });\n\n    $('#multi-item-remove').click(function() {\n        stockAdjustment('take');\n    });\n\n    $('#multi-item-add').click(function() {\n        stockAdjustment('add');\n    });\n\n    $('#multi-item-move').click(function() {\n        stockAdjustment('move');\n    });\n\n    $('#multi-item-merge').click(function() {\n        var items = $(table).bootstrapTable('getSelections');\n\n        mergeStockItems(items, {\n            success: function(response) {\n                $(table).bootstrapTable('refresh');\n\n                showMessage('{% trans \"Merged stock items\" %}', {\n                    style: 'success',\n                });\n            }\n        });\n    });\n\n    $('#multi-item-assign').click(function() {\n\n        var items = $(table).bootstrapTable('getSelections');\n\n        assignStockToCustomer(items, {\n            success: function() {\n                $(table).bootstrapTable('refresh');\n            }\n        });\n    });\n\n    $('#multi-item-order').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var parts = [];\n\n        selections.forEach(function(item) {\n            var part = item.part_detail;\n\n            if (part) {\n                parts.push(part);\n            }\n        });\n\n        orderParts(parts, {});\n    });\n\n    $('#multi-item-set-status').click(function() {\n        // Select and set the STATUS field for selected stock items\n        var selections = $(table).bootstrapTable('getSelections');\n\n        // Select stock status\n        var modal = '#modal-form';\n\n        var status_list = makeOptionsList(\n            stockStatusCodes(),\n            function(item) {\n                return item.text;\n            },\n            function(item) {\n                return item.key;\n            }\n        );\n\n        // Add an empty option at the start of the list\n        status_list.unshift('<option value=\"\">---------</option>');\n\n        // Construct form\n        var html = `\n        <form method='post' action='' class='js-modal-form' enctype='multipart/form-data'>\n            <div class='form-group'>\n                <label class='control-label requiredField' for='id_status'>\n                {% trans \"Stock Status\" %}\n                </label>\n                <div class='controls'>\n                    <select id='id_status' class='select form-control' name='label'>\n                        ${status_list}\n                    </select>\n                </div>\n            </div>\n        </form>`;\n\n        openModal({\n            modal: modal,\n        });\n\n        modalEnable(modal, true);\n        modalSetTitle(modal, '{% trans \"Set Stock Status\" %}');\n        modalSetContent(modal, html);\n\n        attachSelect(modal);\n\n        modalSubmit(modal, function() {\n            var label = $(modal).find('#id_status');\n\n            var status_code = label.val();\n\n            closeModal(modal);\n\n            if (!status_code) {\n                showAlertDialog(\n                    '{% trans \"Select Status Code\" %}',\n                    '{% trans \"Status code must be selected\" %}'\n                );\n\n                return;\n            }\n\n            var requests = [];\n\n            selections.forEach(function(item) {\n                var url = `/api/stock/${item.pk}/`;\n\n                requests.push(\n                    inventreePut(\n                        url,\n                        {\n                            status: status_code,\n                        },\n                        {\n                            method: 'PATCH',\n                            success: function() {\n                            }\n                        }\n                    )\n                );\n            });\n\n            $.when.apply($, requests).done(function() {\n                $(table).bootstrapTable('refresh');\n            });\n        });\n    });\n\n    $('#multi-item-delete').click(function() {\n        var selections = $(table).bootstrapTable('getSelections');\n\n        var stock = [];\n\n        selections.forEach(function(item) {\n            stock.push(item.pk);\n        });\n\n        stockAdjustment('delete');\n    });\n}\n\n\n/*\n * Display a table of stock locations\n */\nfunction loadStockLocationTable(table, options) {\n\n    var params = options.params || {};\n\n    var filterListElement = options.filterList || '#filter-list-location';\n\n    var tree_view = options.allowTreeView && inventreeLoad('location-tree-view') == 1;\n\n    if (tree_view) {\n        params.cascade = true;\n    }\n\n    var filters = {};\n\n    var filterKey = options.filterKey || options.name || 'location';\n\n    if (!options.disableFilters) {\n        filters = loadTableFilters(filterKey);\n    }\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterListElement);\n\n    for (var key in params) {\n        filters[key] = params[key];\n    }\n\n    table.inventreeTable({\n        treeEnable: tree_view,\n        rootParentId: tree_view ? options.params.parent : null,\n        uniqueId: 'pk',\n        idField: 'pk',\n        treeShowField: 'name',\n        parentIdField: tree_view ? 'parent' : null,\n        disablePagination: tree_view,\n        sidePagination: tree_view ? 'client' : 'server',\n        serverSort: !tree_view,\n        search: !tree_view,\n        method: 'get',\n        url: options.url || '{% url \"api-location-list\" %}',\n        queryParams: filters,\n        name: 'location',\n        original: original,\n        showColumns: true,\n        onPostBody: function() {\n\n            if (options.allowTreeView) {\n\n                tree_view = inventreeLoad('location-tree-view') == 1;\n\n                if (tree_view) {\n\n                    $('#view-location-list').removeClass('btn-secondary').addClass('btn-outline-secondary');\n                    $('#view-location-tree').removeClass('btn-outline-secondary').addClass('btn-secondary');\n\n                    table.treegrid({\n                        treeColumn: 1,\n                        onChange: function() {\n                            table.bootstrapTable('resetView');\n                        },\n                        onExpand: function() {\n\n                        }\n                    });\n                } else {\n                    $('#view-location-tree').removeClass('btn-secondary').addClass('btn-outline-secondary');\n                    $('#view-location-list').removeClass('btn-outline-secondary').addClass('btn-secondary');\n                }\n            }\n        },\n        buttons: options.allowTreeView ? [\n            {\n                icon: 'fas fa-bars',\n                attributes: {\n                    title: '{% trans \"Display as list\" %}',\n                    id: 'view-location-list',\n                },\n                event: () => {\n                    inventreeSave('location-tree-view', 0);\n                    table.bootstrapTable(\n                        'refreshOptions',\n                        {\n                            treeEnable: false,\n                            serverSort: true,\n                            search: true,\n                            pagination: true,\n                        }\n                    );\n                }\n            },\n            {\n                icon: 'fas fa-sitemap',\n                attributes: {\n                    title: '{% trans \"Display as tree\" %}',\n                    id: 'view-location-tree',\n                },\n                event: () => {\n                    inventreeSave('location-tree-view', 1);\n                    table.bootstrapTable(\n                        'refreshOptions',\n                        {\n                            treeEnable: true,\n                            serverSort: false,\n                            search: false,\n                            pagination: false,\n                        }\n                    );\n                }\n            }\n        ] : [],\n        columns: [\n            {\n                checkbox: true,\n                title: '{% trans \"Select\" %}',\n                searchable: false,\n                switchable: false,\n            },\n            {\n                field: 'name',\n                title: '{% trans \"Name\" %}',\n                switchable: true,\n                sortable: true,\n                formatter: function(value, row) {\n                    return renderLink(\n                        value,\n                        `/stock/location/${row.pk}/`\n                    );\n                },\n            },\n            {\n                field: 'description',\n                title: '{% trans \"Description\" %}',\n                switchable: true,\n                sortable: false,\n            },\n            {\n                field: 'pathstring',\n                title: '{% trans \"Path\" %}',\n                switchable: true,\n                sortable: false,\n            },\n            {\n                field: 'items',\n                title: '{% trans \"Stock Items\" %}',\n                switchable: true,\n                sortable: false,\n                sortName: 'item_count',\n            }\n        ]\n    });\n}\n\nfunction loadStockTrackingTable(table, options) {\n\n    var cols = [];\n\n    var filterTarget = '#filter-list-stocktracking';\n\n    var filterKey = 'stocktracking';\n\n    var filters = loadTableFilters(filterKey);\n\n    var params = options.params;\n\n    var original = {};\n\n    for (var k in params) {\n        original[k] = params[k];\n        filters[k] = params[k];\n    }\n\n    setupFilterList(filterKey, table, filterTarget);\n\n    // Date\n    cols.push({\n        field: 'date',\n        title: '{% trans \"Date\" %}',\n        sortable: true,\n        formatter: function(value) {\n            return renderDate(value, {showTime: true});\n        }\n    });\n\n    // Stock transaction description\n    cols.push({\n        field: 'label',\n        title: '{% trans \"Description\" %}',\n        formatter: function(value, row) {\n            var html = '<b>' + value + '</b>';\n\n            if (row.notes) {\n                html += '<br><i>' + row.notes + '</i>';\n            }\n\n            return html;\n        }\n    });\n\n    // Stock transaction details\n    cols.push({\n        field: 'deltas',\n        title: '{% trans \"Details\" %}',\n        formatter: function(details, row) {\n            var html = `<table class='table table-condensed' id='tracking-table-${row.pk}'>`;\n\n            if (!details) {\n                html += '</table>';\n                return html;\n            }\n\n            // Part information\n            if (details.part) {\n                html += `<tr><th>{% trans \"Part\" %}</th><td>`;\n\n                if (details.part_detail) {\n                    html += renderLink(details.part_detail.full_name, `/part/${details.part}/`);\n                } else {\n                    html += `{% trans \"Part information unavailable\" %}`;\n                }\n\n                html += `</td></tr>`;\n            }\n\n            // Location information\n            if (details.location) {\n\n                html += `<tr><th>{% trans \"Location\" %}</th>`;\n\n                html += '<td>';\n\n                if (details.location_detail) {\n                    // A valid location is provided\n\n                    html += renderLink(\n                        details.location_detail.pathstring,\n                        details.location_detail.url,\n                    );\n                } else {\n                    // An invalid location (may have been deleted?)\n                    html += `<i>{% trans \"Location no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Purchase Order Information\n            if (details.purchaseorder) {\n\n                html += `<tr><th>{% trans \"Purchase Order\" %}</td>`;\n\n                html += '<td>';\n\n                if (details.purchaseorder_detail) {\n                    html += renderLink(\n                        details.purchaseorder_detail.reference,\n                        `/order/purchase-order/${details.purchaseorder}/`\n                    );\n                } else {\n                    html += `<i>{% trans \"Purchase order no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Customer information\n            if (details.customer) {\n\n                html += `<tr><th>{% trans \"Customer\" %}</td>`;\n\n                html += '<td>';\n\n                if (details.customer_detail) {\n                    html += renderLink(\n                        details.customer_detail.name,\n                        details.customer_detail.url\n                    );\n                } else {\n                    html += `<i>{% trans \"Customer no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Stockitem information\n            if (details.stockitem) {\n                html += '<tr><th>{% trans \"Stock Item\" %}</td>';\n\n                html += '<td>';\n\n                if (details.stockitem_detail) {\n                    html += renderLink(\n                        details.stockitem,\n                        `/stock/item/${details.stockitem}/`\n                    );\n                } else {\n                    html += `<i>{% trans \"Stock item no longer exists\" %}</i>`;\n                }\n\n                html += '</td></tr>';\n            }\n\n            // Status information\n            if (details.status) {\n                html += `<tr><th>{% trans \"Status\" %}</td>`;\n\n                html += '<td>';\n                html += stockStatusDisplay(\n                    details.status,\n                    {\n                        classes: 'float-right',\n                    }\n                );\n                html += '</td></tr>';\n\n            }\n\n            // Quantity information\n            if (details.added) {\n                html += '<tr><th>{% trans \"Added\" %}</th>';\n\n                html += `<td>${details.added}</td>`;\n\n                html += '</tr>';\n            }\n\n            if (details.removed) {\n                html += '<tr><th>{% trans \"Removed\" %}</th>';\n\n                html += `<td>${details.removed}</td>`;\n\n                html += '</tr>';\n            }\n\n            if (details.quantity) {\n                html += '<tr><th>{% trans \"Quantity\" %}</th>';\n\n                html += `<td>${details.quantity}</td>`;\n\n                html += '</tr>';\n            }\n\n            html += '</table>';\n\n            return html;\n        }\n    });\n\n    cols.push({\n        field: 'user',\n        title: '{% trans \"User\" %}',\n        formatter: function(value, row) {\n            if (value) {\n                // TODO - Format the user's first and last names\n                return row.user_detail.username;\n            } else {\n                return `<i>{% trans \"No user information\" %}</i>`;\n            }\n        }\n    });\n\n    table.inventreeTable({\n        method: 'get',\n        queryParams: filters,\n        original: original,\n        columns: cols,\n        url: options.url,\n    });\n\n    if (options.buttons) {\n        linkButtonsToSelection(table, options.buttons);\n    }\n\n    table.on('click', '.btn-entry-edit', function() {\n        var button = $(this);\n\n        launchModalForm(button.attr('url'), {\n            reload: true,\n        });\n    });\n\n    table.on('click', '.btn-entry-delete', function() {\n        var button = $(this);\n\n        launchModalForm(button.attr('url'), {\n            reload: true,\n        });\n    });\n}\n\n\nfunction loadInstalledInTable(table, options) {\n    /*\n    * Display a table showing the stock items which are installed in this stock item.\n    */\n\n    table.inventreeTable({\n        url: '{% url \"api-stock-list\" %}',\n        queryParams: {\n            installed_in: options.stock_item,\n            part_detail: true,\n        },\n        formatNoMatches: function() {\n            return '{% trans \"No installed items\" %}';\n        },\n        columns: [\n            {\n                field: 'part',\n                title: '{% trans \"Part\" %}',\n                formatter: function(value, row) {\n                    var html = '';\n\n                    html += imageHoverIcon(row.part_detail.thumbnail);\n                    html += renderLink(row.part_detail.full_name, `/stock/item/${row.pk}/`);\n\n                    return html;\n                }\n            },\n            {\n                field: 'quantity',\n                title: '{% trans \"Quantity\" %}',\n                formatter: function(value, row) {\n\n                    var html = '';\n\n                    if (row.serial && row.quantity == 1) {\n                        html += `{% trans \"Serial\" %}: ${row.serial}`;\n                    } else {\n                        html += `${row.quantity}`;\n                    }\n\n                    return renderLink(html, `/stock/item/${row.pk}/`);\n                }\n            },\n            {\n                field: 'status',\n                title: '{% trans \"Status\" %}',\n                formatter: function(value) {\n                    return stockStatusDisplay(value);\n                }\n            },\n            {\n                field: 'batch',\n                title: '{% trans \"Batch\" %}',\n            },\n            {\n                field: 'buttons',\n                title: '',\n                switchable: false,\n                formatter: function(value, row) {\n                    var pk = row.pk;\n                    var html = '';\n\n                    html += `<div class='btn-group float-right' role='group'>`;\n                    html += makeIconButton('fa-unlink', 'button-uninstall', pk, '{% trans \"Uninstall Stock Item\" %}');\n                    html += `</div>`;\n\n                    return html;\n                }\n            }\n        ],\n        onPostBody: function() {\n            // Assign callbacks to the buttons\n            table.find('.button-uninstall').click(function() {\n                var pk = $(this).attr('pk');\n\n                uninstallStockItem(\n                    pk,\n                    {\n                        onSuccess: function(response) {\n                            table.bootstrapTable('refresh');\n                        }\n                    }\n                );\n            });\n        }\n    });\n}\n\n\n/*\n * Launch a dialog to uninstall a stock item from another stock item\n*/\nfunction uninstallStockItem(installed_item_id, options={}) {\n\n    constructForm(\n        `/api/stock/${installed_item_id}/uninstall/`,\n        {\n            confirm: true,\n            method: 'POST',\n            title: '{% trans \"Uninstall Stock Item\" %}',\n            fields: {\n                location: {\n                    icon: 'fa-sitemap',\n                },\n                note: {},\n            },\n            preFormContent: function(opts) {\n                var html = '';\n\n                if (installed_item_id == null) {\n                    html += `\n                    <div class='alert alert-block alert-info'>\n                    {% trans \"Select stock item to uninstall\" %}\n                    </div>`;\n                }\n\n                return html;\n            },\n            onSuccess: function(response) {\n                handleFormSuccess(response, options);\n            }\n        }\n    );\n}\n\n\n/*\n * Launch a dialog to install a stock item into another stock item\n */\nfunction installStockItem(stock_item_id, part_id, options={}) {\n\n    var html = `\n    <div class='alert alert-block alert-info'>\n        <strong>{% trans \"Install another stock item into this item\" %}</strong><br>\n        {% trans \"Stock items can only be installed if they meet the following criteria\" %}:<br>\n        <ul>\n            <li>{% trans \"The Stock Item links to a Part which is the BOM for this Stock Item\" %}</li>\n            <li>{% trans \"The Stock Item is currently available in stock\" %}</li>\n            <li>{% trans \"The Stock Item is not already installed in another item\" %}</li>\n            <li>{% trans \"The Stock Item is tracked by either a batch code or serial number\" %}</li>\n        </ul>\n    </div>`;\n\n    constructForm(\n        `/api/stock/${stock_item_id}/install/`,\n        {\n            method: 'POST',\n            fields: {\n                part: {\n                    type: 'related field',\n                    required: 'true',\n                    label: '{% trans \"Part\" %}',\n                    help_text: '{% trans \"Select part to install\" %}',\n                    model: 'part',\n                    api_url: '{% url \"api-part-list\" %}',\n                    auto_fill: true,\n                    filters: {\n                        trackable: true,\n                        in_bom_for: part_id,\n                    }\n                },\n                stock_item: {\n                    filters: {\n                        part_detail: true,\n                        in_stock: true,\n                        tracked: true,\n                    },\n                    adjustFilters: function(filters, opts) {\n                        var part = getFormFieldValue('part', {}, opts);\n\n                        if (part) {\n                            filters.part = part;\n                        }\n\n                        return filters;\n                    }\n                }\n            },\n            confirm: true,\n            title: '{% trans \"Install Stock Item\" %}',\n            preFormContent: html,\n            onSuccess: function(response) {\n                if (options.onSuccess) {\n                    options.onSuccess(response);\n                }\n            }\n        }\n    );\n}\n", "patch": "@@ -1306,7 +1306,8 @@ function loadStockTestResultsTable(table, options) {\n                     var html = value;\n \n                     if (row.attachment) {\n-                        html += `<a href='${row.attachment}'><span class='fas fa-file-alt float-right'></span></a>`;\n+                        var text = `<span class='fas fa-file-alt float-right'></span>`;\n+                        html += renderLink(text, row.attachment, {download: true});\n                     }\n \n                     return html;", "file_path": "files/2022_6/426", "file_language": "js", "file_name": "InvenTree/templates/js/translated/stock.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/inventree/InvenTree/raw/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f/InvenTree%2Ftemplates%2Fjs%2Ftranslated%2Ftables.js", "code": "{% load i18n %}\n\n/* global\n    inventreeLoad,\n    inventreeSave,\n*/\n\n/* exported\n    customGroupSorter,\n    downloadTableData,\n    reloadtable,\n    renderLink,\n    reloadTableFilters,\n*/\n\n/**\n * Reload a named table\n * @param table\n */\nfunction reloadtable(table) {\n    $(table).bootstrapTable('refresh');\n}\n\n\n/**\n * Download data from a table, via the API.\n * This requires a number of conditions to be met:\n *\n * - The API endpoint supports data download (on the server side)\n * - The table is \"flat\" (does not support multi-level loading, etc)\n * - The table has been loaded using the inventreeTable() function, not bootstrapTable()\n *   (Refer to the \"reloadTableFilters\" function to see why!)\n */\nfunction downloadTableData(table, opts={}) {\n\n    // Extract table configuration options\n    var table_options = table.bootstrapTable('getOptions');\n\n    var url = table_options.url;\n\n    if (!url) {\n        console.error('downloadTableData could not find \"url\" parameter.');\n    }\n\n    var query_params = table_options.query_params || {};\n\n    url += '?';\n\n    constructFormBody({}, {\n        title: opts.title || '{% trans \"Export Table Data\" %}',\n        fields: {\n            format: {\n                label: '{% trans \"Format\" %}',\n                help_text: '{% trans \"Select File Format\" %}',\n                required: true,\n                type: 'choice',\n                value: 'csv',\n                choices: exportFormatOptions(),\n            }\n        },\n        onSubmit: function(fields, form_options) {\n            var format = getFormFieldValue('format', fields['format'], form_options);\n\n            // Hide the modal\n            $(form_options.modal).modal('hide');\n\n            for (const [key, value] of Object.entries(query_params)) {\n                url += `${key}=${value}&`;\n            }\n\n            url += `export=${format}`;\n\n            location.href = url;\n        }\n    });\n}\n\n\n\n\n/**\n * Render a URL for display\n * @param {String} text\n * @param {String} url\n * @param {object} options\n * @returns link text\n */\nfunction renderLink(text, url, options={}) {\n    if (url === null || url === undefined || url === '') {\n        return text;\n    }\n\n    var max_length = options.max_length || -1;\n\n    var extra = '';\n\n    if (options.download) {\n        var fn = url.split('/').at(-1);\n        extra += ` download='${fn}'`;\n    }\n\n    // Shorten the displayed length if required\n    if ((max_length > 0) && (text.length > max_length)) {\n        var slice_length = (max_length - 3) / 2;\n\n        var text_start = text.slice(0, slice_length);\n        var text_end = text.slice(-slice_length);\n\n        text = `${text_start}...${text_end}`;\n    }\n\n    return `<a href='${url}'${extra}>${text}</a>`;\n}\n\n\nfunction enableButtons(elements, enabled) {\n    for (let item of elements) {\n        $(item).prop('disabled', !enabled);\n    }\n}\n\n\n/* Link a bootstrap-table object to one or more buttons.\n * The buttons will only be enabled if there is at least one row selected\n */\nfunction linkButtonsToSelection(table, buttons) {\n\n    if (typeof table === 'string') {\n        table = $(table);\n    }\n\n    // Initially set the enable state of the buttons\n    enableButtons(buttons, table.bootstrapTable('getSelections').length > 0);\n\n    // Add a callback\n    table.on('check.bs.table uncheck.bs.table check-some.bs.table uncheck-some.bs.table check-all.bs.table uncheck-all.bs.table', function() {\n        enableButtons(buttons, table.bootstrapTable('getSelections').length > 0);\n    });\n}\n\n\n/**\n * Returns true if the input looks like a valid number\n * @param {String} n\n * @returns\n */\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n\n/*\n * Reload a table which has already been made into a bootstrap table.\n * New filters can be optionally provided, to change the query params.\n */\nfunction reloadTableFilters(table, filters) {\n\n    // Simply perform a refresh\n    if (filters == null) {\n        table.bootstrapTable('refresh');\n        return;\n    }\n\n    // More complex refresh with new filters supplied\n    var options = table.bootstrapTable('getOptions');\n\n    // Construct a new list of filters to use for the query\n    var params = {};\n\n    for (var k in filters) {\n        params[k] = filters[k];\n    }\n\n    // Original query params will override\n    if (options.original != null) {\n        for (var key in options.original) {\n            params[key] = options.original[key];\n        }\n    }\n\n    // Store the total set of query params\n    // This is necessary for the \"downloadTableData\" function to work\n    options.query_params = params;\n\n    options.queryParams = function(tableParams) {\n        return convertQueryParameters(tableParams, params);\n    };\n\n    table.bootstrapTable('refreshOptions', options);\n    table.bootstrapTable('refresh', filters);\n}\n\n\nfunction visibleColumnString(columns) {\n    /* Generate a list of \"visible\" columns to save to file. */\n\n    var fields = [];\n\n    columns.forEach(function(column) {\n        if (column.switchable && column.visible) {\n            fields.push(column.field);\n        }\n    });\n\n    return fields.join(',');\n}\n\n\n/*\n * Convert bootstrap-table style parameters to \"InvenTree\" style\n*/\nfunction convertQueryParameters(params, filters) {\n\n    // Override the way that we ask the server to sort results\n    // It seems bootstrap-table does not offer a \"native\" way to do this...\n    if ('sort' in params) {\n        var order = params['order'];\n\n        var ordering = params['sort'] || null;\n\n        if (ordering) {\n            if (order == 'desc') {\n                ordering = `-${ordering}`;\n            }\n\n            params['ordering'] = ordering;\n        }\n\n        delete params['sort'];\n        delete params['order'];\n\n    }\n\n    for (var key in filters) {\n        params[key] = filters[key];\n    }\n\n    // Add \"order\" back in (if it was originally specified by InvenTree)\n    // Annoyingly, \"order\" shadows some field names in InvenTree...\n    if ('order' in filters) {\n        params['order'] = filters['order'];\n    }\n\n    // Remove searchable[] array (generated by bootstrap-table)\n    if ('searchable' in params) {\n        delete params['searchable'];\n    }\n\n    if ('sortable' in params) {\n        delete params['sortable'];\n    }\n\n    // If \"original_search\" parameter is provided, add it to the \"search\"\n    if ('original_search' in params) {\n        var search = params['search'] || '';\n\n        params['search'] = search + ' ' + params['original_search'];\n\n        delete params['original_search'];\n    }\n\n    return params;\n}\n\n\n/* Wrapper function for bootstrapTable.\n * Sets some useful defaults, and manage persistent settings.\n */\n$.fn.inventreeTable = function(options) {\n\n    var table = this;\n\n    var tableName = options.name || 'table';\n\n    var varName = tableName + '-pagesize';\n\n    // Pagingation options (can be server-side or client-side as specified by the caller)\n    if (!options.disablePagination) {\n        options.pagination = true;\n        options.paginationVAlign = options.paginationVAlign || 'both';\n        options.pageSize = options.pageSize || inventreeLoad(varName, 25);\n        options.pageList = [25, 50, 100, 250, 'all'];\n        options.totalField = 'count';\n        options.dataField = 'results';\n    } else {\n        options.pagination = false;\n    }\n\n    // Extract query params\n    var filters = options.queryParams || options.filters || {};\n\n    options.escape = true;\n\n    // Store the total set of query params\n    options.query_params = filters;\n\n    options.queryParams = function(params) {\n        // Update the query parameters callback with the *new* filters\n        return convertQueryParameters(params, filters);\n    };\n\n    options.rememberOrder = true;\n\n    if (options.sortable == null) {\n        options.sortable = true;\n    }\n\n    if (options.search == null) {\n        options.search = true;\n    }\n\n    if (options.showColumns == null) {\n        options.showColumns = true;\n    }\n\n    // Callback to save pagination data\n    options.onPageChange = function(number, size) {\n        inventreeSave(varName, size);\n    };\n\n    // Callback when a column is changed\n    options.onColumnSwitch = function() {\n\n        var columns = table.bootstrapTable('getVisibleColumns');\n\n        var text = visibleColumnString(columns);\n\n        // Save visible columns\n        inventreeSave(`table_columns_${tableName}`, text);\n    };\n\n    // Standard options for all tables\n    table.bootstrapTable(options);\n\n    // Load visible column list from memory\n    // Load visible column list\n    var visibleColumns = inventreeLoad(`table_columns_${tableName}`, null);\n\n    // If a set of visible columns has been saved, load!\n    if (visibleColumns) {\n        var columns = visibleColumns.split(',');\n\n        // Which columns are currently visible?\n        var visible = table.bootstrapTable('getVisibleColumns');\n\n        if (visible && Array.isArray(visible)) {\n            visible.forEach(function(column) {\n\n                // Visible field should *not* be visible! (hide it!)\n                if (column.switchable && !columns.includes(column.field)) {\n                    table.bootstrapTable('hideColumn', column.field);\n                }\n            });\n        } else {\n            console.error(`Could not get list of visible columns for table '${tableName}'`);\n        }\n    }\n\n    // Optionally, link buttons to the table selection\n    if (options.buttons) {\n        linkButtonsToSelection(table, options.buttons);\n    }\n};\n\n\nfunction customGroupSorter(sortName, sortOrder, sortData) {\n\n    var order = sortOrder === 'desc' ? -1 : 1;\n\n    sortData.sort(function(a, b) {\n\n        // Extract default field values\n        // Allow multi-level access if required\n        // Ref: https://stackoverflow.com/a/6394168\n\n        function extract(obj, i) {\n            return obj[i];\n        }\n\n        var aa = sortName.split('.').reduce(extract, a);\n        var bb = sortName.split('.').reduce(extract, b);\n\n        // Extract parent information\n        var aparent = a._data && a._data['parent-index'];\n        var bparent = b._data && b._data['parent-index'];\n\n        // If either of the comparisons are in a group\n        if (aparent || bparent) {\n\n            // If the parents are different (or one item does not have a parent,\n            // then we need to extract the parent value for the selected column.\n\n            if (aparent != bparent) {\n                if (aparent) {\n                    aa = a._data['table'].options.groupByFormatter(sortName, 0, a._data['group-data']);\n                }\n\n                if (bparent) {\n                    bb = b._data['table'].options.groupByFormatter(sortName, 0, b._data['group-data']);\n                }\n            }\n        }\n\n        if (aa === undefined || aa === null) {\n            aa = '';\n        }\n        if (bb === undefined || bb === null) {\n            bb = '';\n        }\n\n        if (isNumeric(aa) && isNumeric(bb)) {\n            if (aa < bb) {\n                return order * -1;\n            } else if (aa > bb) {\n                return order;\n            } else {\n                return 0;\n            }\n        }\n\n        aa = aa.toString();\n        bb = bb.toString();\n\n        var cmp = aa.localeCompare(bb);\n\n        if (cmp === -1) {\n            return order * -1;\n        } else if (cmp === 1) {\n            return order;\n        } else {\n            return 0;\n        }\n    });\n}\n\n// Expose default bootstrap table string literals to translation layer\n(function($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['en-US-custom'] = {\n        formatLoadingMessage: function() {\n            return '{% trans \"Loading data\" %}';\n        },\n        formatRecordsPerPage: function(pageNumber) {\n            return `${pageNumber} {% trans \"rows per page\" %}`;\n        },\n        formatShowingRows: function(pageFrom, pageTo, totalRows) {\n\n            if (totalRows === undefined || totalRows === NaN) {\n                return '{% trans \"Showing all rows\" %}';\n            } else {\n                return `{% trans \"Showing\" %} ${pageFrom} {% trans \"to\" %} ${pageTo} {% trans \"of\" %} ${totalRows} {% trans \"rows\" %}`;\n            }\n        },\n        formatSearch: function() {\n            return '{% trans \"Search\" %}';\n        },\n        formatNoMatches: function() {\n            return '{% trans \"No matching results\" %}';\n        },\n        formatPaginationSwitch: function() {\n            return '{% trans \"Hide/Show pagination\" %}';\n        },\n        formatRefresh: function() {\n            return '{% trans \"Refresh\" %}';\n        },\n        formatToggle: function() {\n            return '{% trans \"Toggle\" %}';\n        },\n        formatColumns: function() {\n            return '{% trans \"Columns\" %}';\n        },\n        formatAllRows: function() {\n            return '{% trans \"All\" %}';\n        },\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['en-US-custom']);\n\n    // Enable HTML escaping by default\n    $.fn.bootstrapTable.escape = true;\n\n    // Override the 'calculateObjectValue' function at bootstrap-table.js:3525\n    // Allows us to escape any nasty HTML tags which are rendered to the DOM\n    $.fn.bootstrapTable.utils._calculateObjectValue = $.fn.bootstrapTable.utils.calculateObjectValue;\n\n    $.fn.bootstrapTable.utils.calculateObjectValue = function escapeCellValue(self, name, args, defaultValue) {\n\n        var args_list = [];\n\n        if (args) {\n\n            args_list.push(args[0]);\n\n            if (name && typeof(name) === 'function' && name.name == 'formatter') {\n                /* This is a custom \"formatter\" function for a particular cell,\n                * which may side-step regular HTML escaping, and inject malicious code into the DOM.\n                *\n                * Here we have access to the 'args' supplied to the custom 'formatter' function,\n                * which are in the order:\n                * args = [value, row, index, field]\n                *\n                * 'row' is the one we are interested in\n                */\n\n                var row = Object.assign({}, args[1]);\n\n                args_list.push(sanitizeData(row));\n            } else {\n                args_list.push(args[1]);\n            }\n\n            for (var ii = 2; ii < args.length; ii++) {\n                args_list.push(args[ii]);\n            }\n        }\n\n        var value = $.fn.bootstrapTable.utils._calculateObjectValue(self, name, args_list, defaultValue);\n\n        return value;\n    };\n\n})(jQuery);\n\n$.extend($.fn.treegrid.defaults, {\n    expanderExpandedClass: 'treegrid-expander-expanded',\n    expanderCollapsedClass: 'treegrid-expander-collapsed'\n});\n", "code_before": "{% load i18n %}\n\n/* global\n    inventreeLoad,\n    inventreeSave,\n*/\n\n/* exported\n    customGroupSorter,\n    downloadTableData,\n    reloadtable,\n    renderLink,\n    reloadTableFilters,\n*/\n\n/**\n * Reload a named table\n * @param table\n */\nfunction reloadtable(table) {\n    $(table).bootstrapTable('refresh');\n}\n\n\n/**\n * Download data from a table, via the API.\n * This requires a number of conditions to be met:\n *\n * - The API endpoint supports data download (on the server side)\n * - The table is \"flat\" (does not support multi-level loading, etc)\n * - The table has been loaded using the inventreeTable() function, not bootstrapTable()\n *   (Refer to the \"reloadTableFilters\" function to see why!)\n */\nfunction downloadTableData(table, opts={}) {\n\n    // Extract table configuration options\n    var table_options = table.bootstrapTable('getOptions');\n\n    var url = table_options.url;\n\n    if (!url) {\n        console.error('downloadTableData could not find \"url\" parameter.');\n    }\n\n    var query_params = table_options.query_params || {};\n\n    url += '?';\n\n    constructFormBody({}, {\n        title: opts.title || '{% trans \"Export Table Data\" %}',\n        fields: {\n            format: {\n                label: '{% trans \"Format\" %}',\n                help_text: '{% trans \"Select File Format\" %}',\n                required: true,\n                type: 'choice',\n                value: 'csv',\n                choices: exportFormatOptions(),\n            }\n        },\n        onSubmit: function(fields, form_options) {\n            var format = getFormFieldValue('format', fields['format'], form_options);\n\n            // Hide the modal\n            $(form_options.modal).modal('hide');\n\n            for (const [key, value] of Object.entries(query_params)) {\n                url += `${key}=${value}&`;\n            }\n\n            url += `export=${format}`;\n\n            location.href = url;\n        }\n    });\n}\n\n\n\n\n/**\n * Render a URL for display\n * @param {String} text\n * @param {String} url\n * @param {object} options\n * @returns link text\n */\nfunction renderLink(text, url, options={}) {\n    if (url === null || url === undefined || url === '') {\n        return text;\n    }\n\n    var max_length = options.max_length || -1;\n\n    // Shorten the displayed length if required\n    if ((max_length > 0) && (text.length > max_length)) {\n        var slice_length = (max_length - 3) / 2;\n\n        var text_start = text.slice(0, slice_length);\n        var text_end = text.slice(-slice_length);\n\n        text = `${text_start}...${text_end}`;\n    }\n\n    return '<a href=\"' + url + '\">' + text + '</a>';\n}\n\n\nfunction enableButtons(elements, enabled) {\n    for (let item of elements) {\n        $(item).prop('disabled', !enabled);\n    }\n}\n\n\n/* Link a bootstrap-table object to one or more buttons.\n * The buttons will only be enabled if there is at least one row selected\n */\nfunction linkButtonsToSelection(table, buttons) {\n\n    if (typeof table === 'string') {\n        table = $(table);\n    }\n\n    // Initially set the enable state of the buttons\n    enableButtons(buttons, table.bootstrapTable('getSelections').length > 0);\n\n    // Add a callback\n    table.on('check.bs.table uncheck.bs.table check-some.bs.table uncheck-some.bs.table check-all.bs.table uncheck-all.bs.table', function() {\n        enableButtons(buttons, table.bootstrapTable('getSelections').length > 0);\n    });\n}\n\n\n/**\n * Returns true if the input looks like a valid number\n * @param {String} n\n * @returns\n */\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n\n/*\n * Reload a table which has already been made into a bootstrap table.\n * New filters can be optionally provided, to change the query params.\n */\nfunction reloadTableFilters(table, filters) {\n\n    // Simply perform a refresh\n    if (filters == null) {\n        table.bootstrapTable('refresh');\n        return;\n    }\n\n    // More complex refresh with new filters supplied\n    var options = table.bootstrapTable('getOptions');\n\n    // Construct a new list of filters to use for the query\n    var params = {};\n\n    for (var k in filters) {\n        params[k] = filters[k];\n    }\n\n    // Original query params will override\n    if (options.original != null) {\n        for (var key in options.original) {\n            params[key] = options.original[key];\n        }\n    }\n\n    // Store the total set of query params\n    // This is necessary for the \"downloadTableData\" function to work\n    options.query_params = params;\n\n    options.queryParams = function(tableParams) {\n        return convertQueryParameters(tableParams, params);\n    };\n\n    table.bootstrapTable('refreshOptions', options);\n    table.bootstrapTable('refresh', filters);\n}\n\n\nfunction visibleColumnString(columns) {\n    /* Generate a list of \"visible\" columns to save to file. */\n\n    var fields = [];\n\n    columns.forEach(function(column) {\n        if (column.switchable && column.visible) {\n            fields.push(column.field);\n        }\n    });\n\n    return fields.join(',');\n}\n\n\n/*\n * Convert bootstrap-table style parameters to \"InvenTree\" style\n*/\nfunction convertQueryParameters(params, filters) {\n\n    // Override the way that we ask the server to sort results\n    // It seems bootstrap-table does not offer a \"native\" way to do this...\n    if ('sort' in params) {\n        var order = params['order'];\n\n        var ordering = params['sort'] || null;\n\n        if (ordering) {\n            if (order == 'desc') {\n                ordering = `-${ordering}`;\n            }\n\n            params['ordering'] = ordering;\n        }\n\n        delete params['sort'];\n        delete params['order'];\n\n    }\n\n    for (var key in filters) {\n        params[key] = filters[key];\n    }\n\n    // Add \"order\" back in (if it was originally specified by InvenTree)\n    // Annoyingly, \"order\" shadows some field names in InvenTree...\n    if ('order' in filters) {\n        params['order'] = filters['order'];\n    }\n\n    // Remove searchable[] array (generated by bootstrap-table)\n    if ('searchable' in params) {\n        delete params['searchable'];\n    }\n\n    if ('sortable' in params) {\n        delete params['sortable'];\n    }\n\n    // If \"original_search\" parameter is provided, add it to the \"search\"\n    if ('original_search' in params) {\n        var search = params['search'] || '';\n\n        params['search'] = search + ' ' + params['original_search'];\n\n        delete params['original_search'];\n    }\n\n    return params;\n}\n\n\n/* Wrapper function for bootstrapTable.\n * Sets some useful defaults, and manage persistent settings.\n */\n$.fn.inventreeTable = function(options) {\n\n    var table = this;\n\n    var tableName = options.name || 'table';\n\n    var varName = tableName + '-pagesize';\n\n    // Pagingation options (can be server-side or client-side as specified by the caller)\n    if (!options.disablePagination) {\n        options.pagination = true;\n        options.paginationVAlign = options.paginationVAlign || 'both';\n        options.pageSize = options.pageSize || inventreeLoad(varName, 25);\n        options.pageList = [25, 50, 100, 250, 'all'];\n        options.totalField = 'count';\n        options.dataField = 'results';\n    } else {\n        options.pagination = false;\n    }\n\n    // Extract query params\n    var filters = options.queryParams || options.filters || {};\n\n    // Store the total set of query params\n    options.query_params = filters;\n\n    options.queryParams = function(params) {\n        // Update the query parameters callback with the *new* filters\n        return convertQueryParameters(params, filters);\n    };\n\n    options.rememberOrder = true;\n\n    if (options.sortable == null) {\n        options.sortable = true;\n    }\n\n    if (options.search == null) {\n        options.search = true;\n    }\n\n    if (options.showColumns == null) {\n        options.showColumns = true;\n    }\n\n    // Callback to save pagination data\n    options.onPageChange = function(number, size) {\n        inventreeSave(varName, size);\n    };\n\n    // Callback when a column is changed\n    options.onColumnSwitch = function() {\n\n        var columns = table.bootstrapTable('getVisibleColumns');\n\n        var text = visibleColumnString(columns);\n\n        // Save visible columns\n        inventreeSave(`table_columns_${tableName}`, text);\n    };\n\n    // Standard options for all tables\n    table.bootstrapTable(options);\n\n    // Load visible column list from memory\n    // Load visible column list\n    var visibleColumns = inventreeLoad(`table_columns_${tableName}`, null);\n\n    // If a set of visible columns has been saved, load!\n    if (visibleColumns) {\n        var columns = visibleColumns.split(',');\n\n        // Which columns are currently visible?\n        var visible = table.bootstrapTable('getVisibleColumns');\n\n        if (visible && Array.isArray(visible)) {\n            visible.forEach(function(column) {\n\n                // Visible field should *not* be visible! (hide it!)\n                if (column.switchable && !columns.includes(column.field)) {\n                    table.bootstrapTable('hideColumn', column.field);\n                }\n            });\n        } else {\n            console.error(`Could not get list of visible columns for table '${tableName}'`);\n        }\n    }\n\n    // Optionally, link buttons to the table selection\n    if (options.buttons) {\n        linkButtonsToSelection(table, options.buttons);\n    }\n};\n\n\nfunction customGroupSorter(sortName, sortOrder, sortData) {\n\n    var order = sortOrder === 'desc' ? -1 : 1;\n\n    sortData.sort(function(a, b) {\n\n        // Extract default field values\n        // Allow multi-level access if required\n        // Ref: https://stackoverflow.com/a/6394168\n\n        function extract(obj, i) {\n            return obj[i];\n        }\n\n        var aa = sortName.split('.').reduce(extract, a);\n        var bb = sortName.split('.').reduce(extract, b);\n\n        // Extract parent information\n        var aparent = a._data && a._data['parent-index'];\n        var bparent = b._data && b._data['parent-index'];\n\n        // If either of the comparisons are in a group\n        if (aparent || bparent) {\n\n            // If the parents are different (or one item does not have a parent,\n            // then we need to extract the parent value for the selected column.\n\n            if (aparent != bparent) {\n                if (aparent) {\n                    aa = a._data['table'].options.groupByFormatter(sortName, 0, a._data['group-data']);\n                }\n\n                if (bparent) {\n                    bb = b._data['table'].options.groupByFormatter(sortName, 0, b._data['group-data']);\n                }\n            }\n        }\n\n        if (aa === undefined || aa === null) {\n            aa = '';\n        }\n        if (bb === undefined || bb === null) {\n            bb = '';\n        }\n\n        if (isNumeric(aa) && isNumeric(bb)) {\n            if (aa < bb) {\n                return order * -1;\n            } else if (aa > bb) {\n                return order;\n            } else {\n                return 0;\n            }\n        }\n\n        aa = aa.toString();\n        bb = bb.toString();\n\n        var cmp = aa.localeCompare(bb);\n\n        if (cmp === -1) {\n            return order * -1;\n        } else if (cmp === 1) {\n            return order;\n        } else {\n            return 0;\n        }\n    });\n}\n\n// Expose default bootstrap table string literals to translation layer\n(function($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['en-US-custom'] = {\n        formatLoadingMessage: function() {\n            return '{% trans \"Loading data\" %}';\n        },\n        formatRecordsPerPage: function(pageNumber) {\n            return `${pageNumber} {% trans \"rows per page\" %}`;\n        },\n        formatShowingRows: function(pageFrom, pageTo, totalRows) {\n\n            if (totalRows === undefined || totalRows === NaN) {\n                return '{% trans \"Showing all rows\" %}';\n            } else {\n                return `{% trans \"Showing\" %} ${pageFrom} {% trans \"to\" %} ${pageTo} {% trans \"of\" %} ${totalRows} {% trans \"rows\" %}`;\n            }\n        },\n        formatSearch: function() {\n            return '{% trans \"Search\" %}';\n        },\n        formatNoMatches: function() {\n            return '{% trans \"No matching results\" %}';\n        },\n        formatPaginationSwitch: function() {\n            return '{% trans \"Hide/Show pagination\" %}';\n        },\n        formatRefresh: function() {\n            return '{% trans \"Refresh\" %}';\n        },\n        formatToggle: function() {\n            return '{% trans \"Toggle\" %}';\n        },\n        formatColumns: function() {\n            return '{% trans \"Columns\" %}';\n        },\n        formatAllRows: function() {\n            return '{% trans \"All\" %}';\n        },\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['en-US-custom']);\n\n})(jQuery);\n\n$.extend($.fn.treegrid.defaults, {\n    expanderExpandedClass: 'treegrid-expander-expanded',\n    expanderCollapsedClass: 'treegrid-expander-collapsed'\n});\n", "patch": "@@ -92,6 +92,13 @@ function renderLink(text, url, options={}) {\n \n     var max_length = options.max_length || -1;\n \n+    var extra = '';\n+\n+    if (options.download) {\n+        var fn = url.split('/').at(-1);\n+        extra += ` download='${fn}'`;\n+    }\n+\n     // Shorten the displayed length if required\n     if ((max_length > 0) && (text.length > max_length)) {\n         var slice_length = (max_length - 3) / 2;\n@@ -102,7 +109,7 @@ function renderLink(text, url, options={}) {\n         text = `${text_start}...${text_end}`;\n     }\n \n-    return '<a href=\"' + url + '\">' + text + '</a>';\n+    return `<a href='${url}'${extra}>${text}</a>`;\n }\n \n \n@@ -282,6 +289,8 @@ $.fn.inventreeTable = function(options) {\n     // Extract query params\n     var filters = options.queryParams || options.filters || {};\n \n+    options.escape = true;\n+\n     // Store the total set of query params\n     options.query_params = filters;\n \n@@ -468,6 +477,49 @@ function customGroupSorter(sortName, sortOrder, sortData) {\n \n     $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['en-US-custom']);\n \n+    // Enable HTML escaping by default\n+    $.fn.bootstrapTable.escape = true;\n+\n+    // Override the 'calculateObjectValue' function at bootstrap-table.js:3525\n+    // Allows us to escape any nasty HTML tags which are rendered to the DOM\n+    $.fn.bootstrapTable.utils._calculateObjectValue = $.fn.bootstrapTable.utils.calculateObjectValue;\n+\n+    $.fn.bootstrapTable.utils.calculateObjectValue = function escapeCellValue(self, name, args, defaultValue) {\n+\n+        var args_list = [];\n+\n+        if (args) {\n+\n+            args_list.push(args[0]);\n+\n+            if (name && typeof(name) === 'function' && name.name == 'formatter') {\n+                /* This is a custom \"formatter\" function for a particular cell,\n+                * which may side-step regular HTML escaping, and inject malicious code into the DOM.\n+                *\n+                * Here we have access to the 'args' supplied to the custom 'formatter' function,\n+                * which are in the order:\n+                * args = [value, row, index, field]\n+                *\n+                * 'row' is the one we are interested in\n+                */\n+\n+                var row = Object.assign({}, args[1]);\n+\n+                args_list.push(sanitizeData(row));\n+            } else {\n+                args_list.push(args[1]);\n+            }\n+\n+            for (var ii = 2; ii < args.length; ii++) {\n+                args_list.push(args[ii]);\n+            }\n+        }\n+\n+        var value = $.fn.bootstrapTable.utils._calculateObjectValue(self, name, args_list, defaultValue);\n+\n+        return value;\n+    };\n+\n })(jQuery);\n \n $.extend($.fn.treegrid.defaults, {", "file_path": "files/2022_6/427", "file_language": "js", "file_name": "InvenTree/templates/js/translated/tables.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
