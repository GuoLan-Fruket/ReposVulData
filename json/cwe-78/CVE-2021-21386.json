{"index": 5540, "cve_id": "CVE-2021-21386", "cwe_id": ["CWE-88", "CWE-78"], "cve_language": "Python", "cve_description": "APKLeaks is an open-source project for scanning APK file for URIs, endpoints & secrets. APKLeaks prior to v2.0.3 allows remote attackers to execute arbitrary OS commands via package name inside application manifest. An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior through malicious package name. The problem is fixed in version v2.0.6-dev and above.", "cvss": "9.8", "publish_date": "March 24, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "a966e781499ff6fd4eea66876d7532301b13a382", "commit_message": "Escapes decompiling arguments", "commit_date": "2021-03-14T15:25:42Z", "project": "dwisiswant0/apkleaks", "url": "https://api.github.com/repos/dwisiswant0/apkleaks/commits/a966e781499ff6fd4eea66876d7532301b13a382", "html_url": "https://github.com/dwisiswant0/apkleaks/commit/a966e781499ff6fd4eea66876d7532301b13a382", "windows_before": [{"commit_id": "8577b7af6224bf0a5455b552963c46721308d2ff", "commit_date": "Sun Mar 14 22:24:32 2021 +0700", "commit_message": "Move security policy", "files_name": [".github/SECURITY.md"]}, {"commit_id": "40d17f97c39c2c825bcc7f66a2f17fb3889c8236", "commit_date": "Sun Mar 14 22:24:01 2021 +0700", "commit_message": "Merge branch 'master' into dev", "files_name": ["2ccdba69bd81643c2771635f0afbec4c35170426 - Sun Mar 14 20:40:28 2021 +0700 : Add security policy", "SECURITY.md"]}, {"commit_id": "e1256d990a1902d8e1274250d6191cdf85d81557", "commit_date": "Sat Mar 13 23:14:04 2021 +0700", "commit_message": "Add known bugs", "files_name": ["README.md"]}, {"commit_id": "c81688716db4d205d2bd2efe24979f4ec12f9ad0", "commit_date": "Thu Mar 11 23:45:19 2021 +0700", "commit_message": "Merge pull request #21 from saif-deepsource/master", "files_name": ["86ab99a5f3866a2de45acb46d8d485925c2c256d - Thu Mar 11 14:42:46 2021 +0530 : Merge pull request #7 from withshubh/patch-1", "339bda31f004eee8daf8723bd5ebf08d43c9f555 - Thu Mar 11 14:39:28 2021 +0530 : Update apkleaks.py", "apkleaks/apkleaks.py"]}, {"commit_id": "e5146e961f9639731ccb16e241568216aac27663", "commit_date": "Wed Mar 10 12:33:05 2021 +0530", "commit_message": "Refactor code quality issues", "files_name": [".gitignore", "apkleaks/apkleaks.py"]}, {"commit_id": "c59589b01001cde138f4b607ecb5cd8db0af345e", "commit_date": "Sun Mar 7 02:00:28 2021 +0700", "commit_message": "Remove res, kotlin & cordova from LinkFinder excludes", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "69fd87cfc89e5370cbb58173027ff8633b4c3424", "commit_date": "Sun Mar 7 01:59:12 2021 +0700", "commit_message": "Move results prompt to destructor module", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "2b80f12e01192cf54bc589806fdab14595e14c5b", "commit_date": "Sun Mar 7 01:58:48 2021 +0700", "commit_message": "Add default decompiling threading to 10", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "ccd656976ffe45bacd54459b1fc16879569ae3b3", "commit_date": "Fri Mar 5 20:55:11 2021 +0700", "commit_message": "Bump to v2.0.3", "files_name": ["README.md", "VERSION"]}, {"commit_id": "c71a6fe4f414db1a30dba2db52628e8326537b30", "commit_date": "Fri Mar 5 20:52:05 2021 +0700", "commit_message": "Auto deobfucation (--deobf flag) on decompile process using jadx (close #12)", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "e6bcd59a4deabb010d28195d139c9ba48170de91", "commit_date": "Fri Mar 5 12:25:26 2021 +0700", "commit_message": "Release v2.0.2", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "ce9f66601a644b083e78994c307bbdcccac6896f", "commit_date": "Fri Mar 5 12:16:35 2021 +0700", "commit_message": "Bump to v2.0.2", "files_name": ["README.md", "VERSION"]}, {"commit_id": "e04c9aaf3bcebbb718acc00272c72a1a8fac954c", "commit_date": "Fri Mar 5 11:56:16 2021 +0700", "commit_message": "Ignore jadx dir", "files_name": [".gitignore"]}, {"commit_id": "d63afed80a48a231d521f4867d5f53cfa230ffa6", "commit_date": "Thu Mar 4 10:15:04 2021 +0700", "commit_message": "Update documentation", "files_name": ["README.md"]}, {"commit_id": "ec15621adecf12f3f7ec9d6f38dccf28a6f89fe9", "commit_date": "Wed Mar 3 19:59:38 2021 +0700", "commit_message": "Merge branch 'dev'", "files_name": ["914ef4cf4a498d91d37884d21e7e2219e1bbfe82 - Wed Mar 3 19:59:00 2021 +0700 : Bump to v2.0.1", "README.md", "VERSION"]}, {"commit_id": "a6e443ba00f800641b8df631d62420f6c940a9b6", "commit_date": "Wed Mar 3 19:58:19 2021 +0700", "commit_message": "Add destructors module", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "f17e5c59c0c0974aa35f451c06ae04824960abc2", "commit_date": "Wed Mar 3 19:40:53 2021 +0700", "commit_message": "Merge pull request #11 from dwisiswant0/dev", "files_name": ["c38a2ebfb66996e6bcaf2adfeb623c3391e506b6 - Wed Mar 3 19:40:17 2021 +0700 : Update documentation", "README.md"]}, {"commit_id": "2491c559eae450e089082cc154e0d53405cb09fd", "commit_date": "Wed Mar 3 19:34:32 2021 +0700", "commit_message": "Prepare v2.0.0 (close #5)", "files_name": ["9e173d9213aecfa29ae4835f5f1163bcf2241a6b - Wed Mar 3 19:33:56 2021 +0700 : Update documentation", "README.md"]}, {"commit_id": "d12d41aeb591692d5ff3a420ffd1e9fed535976b", "commit_date": "Wed Mar 3 19:32:31 2021 +0700", "commit_message": "Increase header titles", "files_name": ["README.md"]}, {"commit_id": "23f241da661ee82da6848817e19542b893aba32e", "commit_date": "Wed Mar 3 19:29:28 2021 +0700", "commit_message": "Update documentation", "files_name": ["README.md"]}, {"commit_id": "e99739bd8c172224e1390b272286999cc22c4761", "commit_date": "Wed Mar 3 19:26:58 2021 +0700", "commit_message": "Update license", "files_name": ["LICENSE"]}, {"commit_id": "3accc78a132fc7d1b471c4f5222f38db56d9a79d", "commit_date": "Wed Mar 3 19:25:27 2021 +0700", "commit_message": "Porting code to Python3", "files_name": ["apkleaks.py", "apkleaks/apkleaks.py", "apkleaks/colors.py"]}, {"commit_id": "2d213073b1ec8d1e8da7ad7c1d2c35d17b07f371", "commit_date": "Wed Mar 3 19:24:40 2021 +0700", "commit_message": "Update documentation", "files_name": ["README.md"]}, {"commit_id": "7b64c97c2f088a0a1f3f384750b8c45b734c51ec", "commit_date": "Wed Mar 3 19:16:43 2021 +0700", "commit_message": "Bump to v2.0.0", "files_name": ["VERSION"]}, {"commit_id": "d1e996b9b6019ce1ebd4a37c6ccbc19d22ca5ed7", "commit_date": "Wed Mar 3 19:14:27 2021 +0700", "commit_message": "Using pyaxmlparser instead for Python3 support", "files_name": ["requirements.txt"]}, {"commit_id": "51e226f778f64ca3211d6b667cdb3f879b5febf6", "commit_date": "Wed Mar 3 06:26:43 2021 +0700", "commit_message": "Merge pull request #8 from anboo/patch-1", "files_name": ["303152778b5188f3ec5dc9d3ae2e31ac821c0ee2 - Sun Dec 27 17:35:43 2020 +0300 : Update README.md", "README.md"]}, {"commit_id": "09d7ee2545192aa6ebc92397e3de8bdaeef086da", "commit_date": "Mon Jun 1 11:53:02 2020 +0700", "commit_message": ":bookmark: Ready for v1.0.2", "files_name": ["README.md", "VERSION"]}, {"commit_id": "054c6240ecd098134fc43ff3cb05748749c0dbee", "commit_date": "Mon Jun 1 11:51:05 2020 +0700", "commit_message": ":pencil: Update README", "files_name": ["README.md"]}, {"commit_id": "5bdc65528a8f03fd6a70dd62f0b7cb21290c8dd0", "commit_date": "Mon Jun 1 11:48:52 2020 +0700", "commit_message": ":pencil: Update README", "files_name": ["README.md"]}, {"commit_id": "0aa177164ad24b27c5e4974d535d25afc9701ef8", "commit_date": "Mon Jun 1 11:47:40 2020 +0700", "commit_message": ":pencil: Update README", "files_name": ["README.md"]}, {"commit_id": "59f4f33aa54265b42c281e3e507f32b6519e8fe1", "commit_date": "Mon Jun 1 11:37:54 2020 +0700", "commit_message": ":twisted_rightwards_arrows: Merge branch 'master'  into development", "files_name": ["737931000cac27e8b5ccf7728e4acaebbfb8243a - Mon Jun 1 11:37:05 2020 +0700 : :zap: Add threading & LinkFinder exception", "apkleaks/apkleaks.py"]}, {"commit_id": "e1247ed6f8eb26858616214954deca6f17e8391a", "commit_date": "Mon Jun 1 10:35:21 2020 +0700", "commit_message": ":twisted_rightwards_arrows: Merge PR #4 from sprabowo/master", "files_name": ["1eda1c6fbe7cb27e5caaa34e9c0f90272bfeea6f - Mon Jun 1 07:41:56 2020 +0700 : add: instruction for OSX and python version", "README.md"]}, {"commit_id": "747f6038fee3d8d1d6810255fe1b095a1f6b02f7", "commit_date": "Sun May 31 19:28:46 2020 +0700", "commit_message": ":heavy_plus_sign: Add missing dependency", "files_name": ["requirements.txt"]}, {"commit_id": "2914e9456a70c37011eef8733a5455ee042cf1a4", "commit_date": "Sun May 31 19:17:19 2020 +0700", "commit_message": ":busts_in_silhouette: Add contributors", "files_name": ["README.md", "VERSION"]}, {"commit_id": "580109396aa49292537eb450ea7ce41f15c8d5e4", "commit_date": "Sun May 31 19:04:23 2020 +0700", "commit_message": ":recycle: Refactoring due to nested patterns", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "2725e9f80644a2d94553dcf41f42826dea04e964", "commit_date": "Sun May 31 19:03:17 2020 +0700", "commit_message": ":wrench: Fix & adding some patterns", "files_name": ["config/regexes.json"]}, {"commit_id": "1e9ed0e7105d25ab4fac51db47b0464ba0038df8", "commit_date": "Sun May 31 18:10:17 2020 +0700", "commit_message": ":speech_balloon: Updating Firebase pattern", "files_name": ["config/regexes.json"]}, {"commit_id": "948746028ee454dad3d26ba31db6582429b343fb", "commit_date": "Sun May 31 18:09:48 2020 +0700", "commit_message": ":wrench: Add some patterns (AWS & Firebase)", "files_name": ["config/regexes.json"]}, {"commit_id": "ec0b72f61478428df1a56153cfbddf251b0553ff", "commit_date": "Sun May 31 14:57:18 2020 +0700", "commit_message": ":dizzy: Add funding method", "files_name": [".github/FUNDING.yml"]}, {"commit_id": "c607e9688ae4da93a4165ec07688d826a5f18923", "commit_date": "Sun May 31 08:13:40 2020 +0700", "commit_message": ":dizzy: Add sponsor/funding", "files_name": [".github/FUNDING.yml"]}, {"commit_id": "f9495f6ea3ea8f90c4272488b1a829af0792a6fd", "commit_date": "Sat May 30 12:08:05 2020 +0700", "commit_message": ":heavy_plus_sign: Add requirements file", "files_name": ["requirements.txt"]}, {"commit_id": "b9db88653e5a72041f14d4583ba07c9bac46cf42", "commit_date": "Sat May 30 12:04:21 2020 +0700", "commit_message": ":twisted_rightwards_arrows: Merge tag 'v0.4.1-dev'", "files_name": ["36c214dd5ffaa1d955326deb9e34f5dce0e2eec1 - Sat May 30 12:02:10 2020 +0700 : :page_facing_up: Changing header descriptions", "apkleaks.py"]}, {"commit_id": "5e8eb77d0cefff709d08e57684015c25df0bfede", "commit_date": "Sat May 30 12:01:33 2020 +0700", "commit_message": ":camera_flash: Modify snapshots & :pencil2: mismatch linking", "files_name": ["README.md", "VERSION"]}, {"commit_id": "03ce2bf332f977d40eeadc5d3ab6291c0a2dd1a0", "commit_date": "Sat May 30 11:51:14 2020 +0700", "commit_message": ":recycle: Refactoring for dependencies", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "9c03a8ad8a8cd9146e16e3e955608ad9990729a2", "commit_date": "Sat May 30 11:49:40 2020 +0700", "commit_message": ":arrow_up: Using jadx for dissambler instead of apktool", "files_name": ["apkleaks.py"]}, {"commit_id": "1fc3f64fdd6e389bc7a5f6dea35a959085bc5323", "commit_date": "Sat May 30 05:06:26 2020 +0700", "commit_message": "Merge branch 'master' of github.com:dwisiswant0/apkleaks", "files_name": ["0f1e6c009c26ad2afd69bf33120aaf06cb49bd8a - Sat May 30 05:05:28 2020 +0700 : :bookmark: Release for v0.3.2-beta", "README.md", "VERSION"]}, {"commit_id": "5b5819fcfbf6ac099ac14ffd1fe7654e590030d7", "commit_date": "Sat May 30 05:04:53 2020 +0700", "commit_message": ":wrench: Add more flag on decompiling with apktool", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "dde70dfbe0e6547cdb7ca2c6b26534e5a4a8d10c", "commit_date": "Sat May 30 04:53:16 2020 +0700", "commit_message": ":pencil2: Update badges", "files_name": ["README.md"]}, {"commit_id": "92f103142b798f877372635d35b8661c941d9350", "commit_date": "Sat May 30 04:33:29 2020 +0700", "commit_message": ":bookmark: Release for v0.3.1-beta", "files_name": ["LICENSE", "README.md", "VERSION"]}, {"commit_id": "3e7e1f88bae9563af7a0104729b624e7af2b0a31", "commit_date": "Fri May 29 20:09:54 2020 +0700", "commit_message": ":bookmark: Release for v0.2.1-beta", "files_name": ["VERSION"]}, {"commit_id": "739b47fecc1ba572f7c7fab75824a23f0f508b21", "commit_date": "Fri May 29 20:09:00 2020 +0700", "commit_message": ":triangular_flag_on_post: Add custom pattern & saved output results", "files_name": ["apkleaks.py", "apkleaks/apkleaks.py"]}, {"commit_id": "98b241fffdba7b79fb7e245464a37c1758fddc29", "commit_date": "Fri May 29 16:49:59 2020 +0700", "commit_message": ":bookmark: Release for v0.1.0-beta1", "files_name": ["VERSION"]}, {"commit_id": "e8bb4c5749b344fabd08a190969222ebbed78ee3", "commit_date": "Fri May 29 16:49:24 2020 +0700", "commit_message": ":bug: Fix can't get real file location with realpath", "files_name": ["apkleaks.py", "apkleaks/apkleaks.py"]}, {"commit_id": "aa1fcbf279e94df18ce1022677a4f947d307a00b", "commit_date": "Fri May 29 16:31:32 2020 +0700", "commit_message": "First release candidate", "files_name": ["VERSION", "apkleaks.py", "apkleaks/__init__.py", "apkleaks/apkleaks.py", "apkleaks/colors.py", "config/regexes.json"]}, {"commit_id": "76ab53c339f640c2d9055f1cc1d43da255765205", "commit_date": "Fri May 29 16:30:43 2020 +0700", "commit_message": "Add .gitignore", "files_name": [".gitignore"]}], "windows_after": [{"commit_id": "7f0b9755f4844466542d8c8a00be5a6c9bd20ab5", "commit_date": "Sun Mar 14 22:25:49 2021 +0700", "commit_message": "Add acknowledments", "files_name": ["README.md"]}, {"commit_id": "10f0a56b39b33da93f77e23543bbfe8318e5ba16", "commit_date": "Sun Mar 14 22:41:43 2021 +0700", "commit_message": "Update current version info", "files_name": ["README.md"]}, {"commit_id": "023cbbf13593b17d2818c663a3a873b4cc1e0565", "commit_date": "Sun Mar 14 22:57:16 2021 +0700", "commit_message": "Add CodeQL analysis", "files_name": [".github/workflows/codeql.yaml"]}, {"commit_id": "0765d3217f3ff5e85d0f3efa22511f32f75bd9dd", "commit_date": "Mon Mar 15 06:33:24 2021 +0700", "commit_message": "Update acknowledment", "files_name": ["README.md"]}, {"commit_id": "41bb9c867e4ffa51095468fc58fb1be8377fc9b4", "commit_date": "Wed Mar 17 11:07:37 2021 +0700", "commit_message": "Add exception when downloading jadx", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "a0df6d0d91224c35136276694c93131bf349ca2b", "commit_date": "Wed Mar 17 11:17:59 2021 +0700", "commit_message": "Add passthrough scanning indicator", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "f91dbcd341ac783db8e49fd70f87afe61b5c7b87", "commit_date": "Wed Mar 17 11:24:51 2021 +0700", "commit_message": "Revert matches that caused ValueError", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "ddcf2d469fc8f9aa24aac408825e914e2f1f1d95", "commit_date": "Wed Mar 17 11:30:08 2021 +0700", "commit_message": "Discern if there are result of leaks", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "4975654d452a1e82126a47622895b3f417a1846b", "commit_date": "Wed Mar 17 20:34:46 2021 +0700", "commit_message": "Add JSON output format (close #23)", "files_name": ["apkleaks.py", "apkleaks/apkleaks.py"]}, {"commit_id": "c1cdc6b2fe6976d864dc71cdac50a2e3da556bca", "commit_date": "Wed Mar 17 20:36:22 2021 +0700", "commit_message": "Remove unnecessary return statement", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "0e8ded16110c4997c460335fff5019580666fb1d", "commit_date": "Wed Mar 17 21:04:35 2021 +0700", "commit_message": "Add handler for KeyboardInterrupt while scanning", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "4c693e94d43a2cf7e4270bda4e98ba9e2d91e1dc", "commit_date": "Wed Mar 17 21:18:31 2021 +0700", "commit_message": "Add handler for not callable object", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "67ef67905a4788ef47a508bea44f57eac471ffe8", "commit_date": "Wed Mar 17 21:22:10 2021 +0700", "commit_message": "Prep v2.0.6-dev", "files_name": ["VERSION"]}, {"commit_id": "be0b1d21ff3bafdb9955a489c794c58e42d499cd", "commit_date": "Thu Mar 18 17:08:22 2021 +0700", "commit_message": "Print banner to stderr (close #27)", "files_name": ["apkleaks.py"]}, {"commit_id": "74f983627b614e35c756f87481b56c19c6409ab8", "commit_date": "Fri Mar 19 07:16:00 2021 +0700", "commit_message": "Update readme", "files_name": ["README.md"]}, {"commit_id": "258f43b913daa01805b53f0b73762e49d8eed670", "commit_date": "Fri Mar 19 07:16:49 2021 +0700", "commit_message": "Linking known bug", "files_name": ["README.md"]}, {"commit_id": "55785263b3d857efaef90bf42ee237c7189530ef", "commit_date": "Fri Mar 19 07:29:52 2021 +0700", "commit_message": "Merge pull request #28 from dwisiswant0/dev", "files_name": ["cef07cd86d803102762373994a26dc85cfba5b00 - Sat Mar 20 08:07:44 2021 +0700 : Using final statement to clean instead of destructor module", "README.md", "VERSION", "apkleaks.py", "apkleaks/apkleaks.py"]}, {"commit_id": "37001b9a2eadb4c531dd6d214d4e2dedfc1eb380", "commit_date": "Sat Mar 20 08:17:37 2021 +0700", "commit_message": "Update pip requirements", "files_name": ["requirements.txt"]}, {"commit_id": "26475a9de883aa5bcaee82ed685be16dc45a4338", "commit_date": "Sat Mar 20 08:17:44 2021 +0700", "commit_message": "Update readme", "files_name": ["README.md"]}, {"commit_id": "81582261c82c092e813412d1cf29f2db8e0ea14b", "commit_date": "Sat Mar 20 17:14:07 2021 +0100", "commit_message": "Remove numpy dependency", "files_name": ["apkleaks/apkleaks.py", "requirements.txt"]}, {"commit_id": "076d2d332999fe8fc700c97e90d49be883972970", "commit_date": "Sat Mar 20 17:23:18 2021 +0100", "commit_message": "Decompile the entire APK and thus find leaks in the entire content of the APK (not just in DEX files)", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "64c9f86733dd73992f3c2d9f85df6ff1a9b2689e", "commit_date": "Sat Mar 20 23:48:44 2021 +0700", "commit_message": "Merge pull request #31 from U039b/master", "files_name": ["0206d0dc08c25983fe95b2638bdd2f9c54ad51d3 - Sat Mar 20 23:49:23 2021 +0700 : Prep v2.0.8", "VERSION"]}, {"commit_id": "0a6326d599485a02a9206d3aae6108628bbc5be2", "commit_date": "Sun Mar 21 04:01:52 2021 +0700", "commit_message": "Remove unused-import", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "073acdd19c3a4b77da1eef7c3e68a8b2660aa50c", "commit_date": "Sun Mar 21 05:03:57 2021 +0700", "commit_message": "Add .pylintrc", "files_name": [".pylintrc"]}, {"commit_id": "6609cc72fecc187aa220bac2649fe054edc85a9b", "commit_date": "Sun Mar 21 05:04:18 2021 +0700", "commit_message": "Add static methods for standalone methods", "files_name": ["apkleaks/utils.py"]}, {"commit_id": "8d0b8312e56856555c0ddc6d230203ebb73058fb", "commit_date": "Sun Mar 21 05:04:33 2021 +0700", "commit_message": "Fix linter", "files_name": ["apkleaks.py", "apkleaks/apkleaks.py", "apkleaks/colors.py"]}, {"commit_id": "131edd4324db0c80b4716e1813b9a734a4402838", "commit_date": "Sun Mar 21 05:15:14 2021 +0700", "commit_message": "Add KeyboardInterrupt handler in downloading jadx choices", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "3745501638ab3cd077f5586029f87679bbc73451", "commit_date": "Sun Mar 21 05:33:44 2021 +0700", "commit_message": "Using join path & pathlib", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "d5c4c957ec5a65b02b6983ec74b3dd46b7d06771", "commit_date": "Sun Mar 21 05:34:13 2021 +0700", "commit_message": "Remove newline", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "f650a32dfd239dabea5717759b334e620aa4e16d", "commit_date": "Sun Mar 21 05:41:39 2021 +0700", "commit_message": "Using singleton if true & join path when extracting jadx", "files_name": ["apkleaks/apkleaks.py"]}, {"commit_id": "9dec258389783cc2c52f09c8c488bcea7be0f9be", "commit_date": "Sun Mar 21 06:17:09 2021 +0700", "commit_message": "Fix lint", "files_name": ["apkleaks.py"]}, {"commit_id": "109c636d3a06929c520c68954ae7844ec490fdd2", "commit_date": "Sun Mar 21 08:02:18 2021 +0700", "commit_message": "Dockerize!", "files_name": [".github/workflows/publish.yaml", "Dockerfile"]}, {"commit_id": "118a626602448b02f8345e0736241bb02666950f", "commit_date": "Sun Mar 21 08:02:57 2021 +0700", "commit_message": "Prep v2.1.0", "files_name": ["README.md", "VERSION"]}, {"commit_id": "3d33ac09e54bfd7576b2ac4611555185d7512646", "commit_date": "Sat Mar 20 18:47:52 2021 +0100", "commit_message": "Add a `setup.py` file.", "files_name": ["setup.py"]}, {"commit_id": "cd80f8a9eceb9f03939671ea497aea728341fe8c", "commit_date": "Sat Mar 20 23:31:10 2021 +0100", "commit_message": "Read the version from the appropriate file", "files_name": ["setup.py"]}, {"commit_id": "a4bc7e73edbd4851e943a4023c218af3c7fda1d7", "commit_date": "Sun Mar 21 06:51:13 2021 +0700", "commit_message": "Add author_email", "files_name": ["setup.py"]}, {"commit_id": "697b22fbb8d8caf9cc840ee9cc0f644ebcbf318a", "commit_date": "Sun Mar 21 07:20:47 2021 +0700", "commit_message": "Update gitignore", "files_name": [".gitignore"]}, {"commit_id": "1b2a668fc382ef3f3e2e4b0894ff90faf0523ca2", "commit_date": "Sun Mar 21 11:50:50 2021 +0100", "commit_message": "Fix setup.py and Python packaging", "files_name": ["MANIFEST.in", "README.md", "apkleaks.py", "apkleaks/cli.py", "setup.py"]}, {"commit_id": "ff58426bdfcd47ab276d84c4374aa2a58229c545", "commit_date": "Sun Mar 21 20:17:37 2021 +0100", "commit_message": "Fix clr class renamed", "files_name": ["apkleaks/cli.py"]}, {"commit_id": "c4d26fb2d7ec803295a3cab0921be77236ff7f76", "commit_date": "Mon Mar 22 03:13:53 2021 +0700", "commit_message": "Fix conflicts", "files_name": ["setup.py"]}, {"commit_id": "192e80c15d2bd668090758394377dd8322e50673", "commit_date": "Mon Mar 22 03:14:49 2021 +0700", "commit_message": "Refactoring", "files_name": ["apkleaks.py", "apkleaks/cli.py"]}, {"commit_id": "3f059ca9b49a1cc379e84e536cf25134c19fdfba", "commit_date": "Mon Mar 22 03:14:59 2021 +0700", "commit_message": "Prep v2.2.0", "files_name": ["VERSION"]}, {"commit_id": "ee2fca65c7d3afd368f2b28df7cd308d46760add", "commit_date": "Mon Mar 22 03:26:04 2021 +0700", "commit_message": "Update usage", "files_name": ["README.md"]}, {"commit_id": "7e1da337d8ddee62aab50d37210bb5ed164f6d44", "commit_date": "Mon Mar 22 03:35:04 2021 +0700", "commit_message": "Remove known bugs section", "files_name": ["README.md"]}, {"commit_id": "f93cc02ed5a7cc42217b27ffc2f89c67177f40b5", "commit_date": "Mon Mar 22 03:40:31 2021 +0700", "commit_message": "Merge pull request #34 from dwisiswant0/dev", "files_name": ["73dcc6a712dc47668781b3598b23a7383b254142 - Mon Mar 22 07:54:35 2021 +0700 : Update readme", "README.md"]}, {"commit_id": "a9ac65a4884261926bbe08acecaedf12ab494dac", "commit_date": "Tue Mar 23 00:30:59 2021 +0700", "commit_message": "Replacing spaces with underscore in key pattern name", "files_name": ["config/regexes.json"]}, {"commit_id": "92d0bf6446ba1755554b80d901e6533cdb215f69", "commit_date": "Tue Mar 23 00:31:35 2021 +0700", "commit_message": "Add leading 'v' for version", "files_name": ["apkleaks/cli.py"]}, {"commit_id": "eaaf869a910293f0faae951f428034751b3966ce", "commit_date": "Tue Mar 23 00:37:03 2021 +0700", "commit_message": "Add long_description", "files_name": ["setup.py"]}, {"commit_id": "2edd30a2f31c7d969f9f42fb1c4da7b5ad50380c", "commit_date": "Tue Mar 23 00:37:36 2021 +0700", "commit_message": "Using double-quote instead", "files_name": ["setup.py"]}, {"commit_id": "a4daabbf421420dcb4639f3dcd39555efea83952", "commit_date": "Tue Mar 23 00:42:04 2021 +0700", "commit_message": "Using path join to base path file", "files_name": ["setup.py"]}, {"commit_id": "6f7b942b5911531aa695556e797e78e5d6d7b126", "commit_date": "Tue Mar 23 00:54:08 2021 +0700", "commit_message": "Add content-type for long_description", "files_name": ["setup.py"]}, {"commit_id": "175a862a85bfb308530cd80c762fc2a8d39119bf", "commit_date": "Tue Mar 23 00:56:45 2021 +0700", "commit_message": "Prep v2.2.1-dev", "files_name": ["VERSION"]}, {"commit_id": "5b8e8e914cdc4b041f5065a2337f2a4753d509a3", "commit_date": "Tue Mar 23 06:28:31 2021 +0700", "commit_message": "Add jadx directory", "files_name": ["MANIFEST.in"]}, {"commit_id": "d256292cc263bd722751c3aa67a0e5f6a80d44be", "commit_date": "Tue Mar 23 06:31:24 2021 +0700", "commit_message": "Add custom disassembler arguments (close #35)", "files_name": ["apkleaks/apkleaks.py", "apkleaks/cli.py"]}, {"commit_id": "f0b0a54fa1276430831f1006664edddf5237396a", "commit_date": "Tue Mar 23 06:31:46 2021 +0700", "commit_message": "Prep v2.3.0", "files_name": ["VERSION"]}, {"commit_id": "cf1302c0b013f18552115119747a1c30649ffa52", "commit_date": "Tue Mar 23 06:32:44 2021 +0700", "commit_message": "Update documentations:", "files_name": ["README.md"]}, {"commit_id": "d6d0a3be2b19fa814baf9a6dd9f1a3a9599c4039", "commit_date": "Tue Mar 23 06:33:55 2021 +0700", "commit_message": "Update example tables", "files_name": ["README.md"]}, {"commit_id": "5243c551419df71e62e6a25cb491911711d5b04b", "commit_date": "Tue Mar 23 06:43:28 2021 +0700", "commit_message": "Merge pull request #36 from dwisiswant0/dev", "files_name": ["06a6a32b530bf7386e881efadd1bd2794a92ce00 - Tue Mar 23 19:23:25 2021 +0700 : Fix NoneType of disassembler arguments", "apkleaks/apkleaks.py"]}, {"commit_id": "bdf1173b6a36a1f889d58cfbbb3ce30c8b1c1870", "commit_date": "Tue Mar 23 19:24:13 2021 +0700", "commit_message": "Prep v2.3.1", "files_name": ["VERSION"]}, {"commit_id": "929078e6720d322c2255b27b6dbde524fb769013", "commit_date": "Tue Mar 23 19:26:18 2021 +0700", "commit_message": "Merge pull request #38 from dwisiswant0/dev", "files_name": []}], "parents": [{"commit_id_before": "8577b7af6224bf0a5455b552963c46721308d2ff", "url_before": "https://api.github.com/repos/dwisiswant0/apkleaks/commits/8577b7af6224bf0a5455b552963c46721308d2ff", "html_url_before": "https://github.com/dwisiswant0/apkleaks/commit/8577b7af6224bf0a5455b552963c46721308d2ff"}], "details": [{"raw_url": "https://github.com/dwisiswant0/apkleaks/raw/a966e781499ff6fd4eea66876d7532301b13a382/apkleaks%2Fapkleaks.py", "code": "#!/usr/bin/env python3\nfrom apkleaks.colors import clr\nfrom contextlib import closing\nfrom distutils.spawn import find_executable\nfrom pipes import quote\nfrom pyaxmlparser import APK\nfrom urllib.request import urlopen\nfrom zipfile import ZipFile\nimport io\nimport json\nimport logging.config\nimport mimetypes\nimport numpy\nimport os\nimport re\nimport shutil\nimport sys\nimport tempfile\nimport threading\n\nclass APKLeaks:\n\tdef __init__(self, args):\n\t\tself.file = args.file\n\t\tself.prefix = \"apkleaks-\"\n\t\tself.tempdir = tempfile.mkdtemp(prefix=self.prefix)\n\t\tself.main_dir = os.path.dirname(os.path.realpath(__file__))\n\t\tself.output = tempfile.mkstemp(suffix=\".txt\", prefix=self.prefix)[1] if args.output is None else args.output\n\t\tself.pattern = self.main_dir + \"/../config/regexes.json\" if args.pattern is None else args.pattern\n\t\tself.jadx = find_executable(\"jadx\") if find_executable(\"jadx\") is not None else self.main_dir + \"/../jadx/bin/jadx%s\" % (\".bat\" if os.name == \"nt\" else \"\")\n\t\tlogging.config.dictConfig({\"version\": 1, \"disable_existing_loggers\": True})\n\n\tdef apk_info(self):\n\t\treturn APK(self.file)\n\n\tdef dependencies(self):\n\t\texter = \"https://github.com/skylot/jadx/releases/download/v1.2.0/jadx-1.2.0.zip\"\n\t\twith closing(urlopen(exter)) as jadx:\n\t\t\twith ZipFile(io.BytesIO(jadx.read())) as zfile:\n\t\t\t\tzfile.extractall(self.main_dir + \"/../jadx\")\n\t\tos.chmod(self.jadx, 33268)\n\n\tdef write(self, message, color):\n\t\tsys.stdout.write(\"%s%s%s\" % (color, message, clr.ENDC))\n\n\tdef writeln(self, message, color):\n\t\tself.write(message + \"\\n\", color)\n\n\tdef integrity(self):\n\t\tif os.path.exists(self.jadx) is False:\n\t\t\tself.writeln(\"Can't find jadx binary.\", clr.WARNING)\n\t\t\tvalid = {\"yes\": True, \"y\": True, \"ye\": True, \"no\": False, \"n\": False}\n\t\t\twhile True:\n\t\t\t\tself.write(\"Do you want to download jadx? (Y/n) \", clr.OKBLUE)\n\t\t\t\tchoice = input().lower()\n\t\t\t\tif choice == \"\":\n\t\t\t\t\tchoice = valid[\"y\"]\n\t\t\t\t\tbreak\n\t\t\t\telif choice in valid:\n\t\t\t\t\tchoice = valid[choice]\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tself.writeln(\"\\nPlease respond with 'yes' or 'no' (or 'y' or 'n').\", clr.WARNING)\n\t\t\tif choice:\n\t\t\t\tself.writeln(\"** Downloading jadx...\\n\", clr.OKBLUE)\n\t\t\t\tself.dependencies()\n\t\t\telse:\n\t\t\t\tsys.exit(self.writeln(\"Aborted.\", clr.FAIL))\n\n\t\tif os.path.isfile(self.file) is True:\n\t\t\ttry:\n\t\t\t\tself.apk = self.apk_info()\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\t\telse:\n\t\t\t\treturn self.apk\n\t\telse:\n\t\t\tsys.exit(self.writeln(\"It's not a valid file!\", clr.WARNING))\n\n\tdef decompile(self):\n\t\tself.writeln(\"** Decompiling APK...\", clr.OKBLUE)\n\t\twith ZipFile(self.file) as zipped:\n\t\t\ttry:\n\t\t\t\tdex = self.tempdir + \"/\" + self.apk.package + \".dex\"\n\t\t\t\twith open(dex, \"wb\") as classes:\n\t\t\t\t\tclasses.write(zipped.read(\"classes.dex\"))\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\targs = [self.jadx, dex, \"-d\", self.tempdir, \"--deobf\"]\n\t\tcomm = \"%s\" % (\" \".join(quote(arg) for arg in args))\n\t\tos.system(comm)\n\t\treturn self.tempdir\n\n\tdef unique(self, list): \n\t\tx = numpy.array(list) \n\t\treturn (numpy.unique(x))\n\n\tdef finder(self, pattern, path):\n\t\tmatcher = re.compile(pattern)\n\t\tfound = []\n\t\tfor path, _, files in os.walk(path):\n\t\t\tfor fn in files:\n\t\t\t\tfilepath = os.path.join(path, fn)\n\t\t\t\tif mimetypes.guess_type(filepath)[0] is None:\n\t\t\t\t\tcontinue\n\t\t\t\twith open(filepath) as handle:\n\t\t\t\t\tfor lineno, line in enumerate(handle):\n\t\t\t\t\t\tmo = matcher.search(line)\n\t\t\t\t\t\tif mo:\n\t\t\t\t\t\t\tfound.append(mo.group())\n\t\treturn self.unique(found)\n\n\tdef extract(self, name, matches):\n\t\toutput = open(self.output, \"a+\")\n\t\tif matches:\n\t\t\tstdout = (\"[%s]\" % (name))\n\t\t\tself.writeln(\"\\n\" + stdout, clr.OKGREEN)\n\t\t\toutput.write(stdout + \"\\n\")\n\t\t\tfor secret in matches:\n\t\t\t\tif name == \"LinkFinder\" and re.match(r\"^.(L[a-z]|application|audio|fonts|image|layout|multipart|plain|text|video).*\\/.+\", secret) is not None:\n\t\t\t\t\tcontinue\n\t\t\t\tstdout = (\"- %s\" % (secret))\n\t\t\t\tprint(stdout)\n\t\t\t\toutput.write(stdout + \"\\n\")\n\t\t\toutput.write(\"\\n\")\n\t\toutput.close()\n\n\tdef scanning(self):\n\t\tself.writeln(\"\\n** Scanning against '%s'\" % (self.apk.package), clr.OKBLUE)\n\t\twith open(self.pattern) as regexes:\n\t\t\tregex = json.load(regexes)\n\t\t\tfor name, pattern in regex.items():\n\t\t\t\tif isinstance(pattern, list):\n\t\t\t\t\tfor pattern in pattern:\n\t\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\t\tthread.start()\n\t\t\t\telse:\n\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\tthread.start()\n\n\tdef __del__(self):\n\t\tprint(\"%s\\n** Results saved into '%s%s%s%s'%s\" % (clr.OKBLUE, clr.ENDC, clr.OKGREEN, self.output, clr.OKBLUE, clr.ENDC))\n\t\ttry:\n\t\t\tshutil.rmtree(self.tempdir)\n\t\texcept Exception:\n\t\t\treturn\n", "code_before": "#!/usr/bin/env python3\nfrom apkleaks.colors import clr\nfrom contextlib import closing\nfrom distutils.spawn import find_executable\nfrom pyaxmlparser import APK\nfrom urllib.request import urlopen\nfrom zipfile import ZipFile\nimport io\nimport json\nimport logging.config\nimport mimetypes\nimport numpy\nimport os\nimport re\nimport shutil\nimport sys\nimport tempfile\nimport threading\n\nclass APKLeaks:\n\tdef __init__(self, args):\n\t\tself.file = args.file\n\t\tself.prefix = \"apkleaks-\"\n\t\tself.tempdir = tempfile.mkdtemp(prefix=self.prefix)\n\t\tself.main_dir = os.path.dirname(os.path.realpath(__file__))\n\t\tself.output = tempfile.mkstemp(suffix=\".txt\", prefix=self.prefix)[1] if args.output is None else args.output\n\t\tself.pattern = self.main_dir + \"/../config/regexes.json\" if args.pattern is None else args.pattern\n\t\tself.jadx = find_executable(\"jadx\") if find_executable(\"jadx\") is not None else self.main_dir + \"/../jadx/bin/jadx%s\" % (\".bat\" if os.name == \"nt\" else \"\")\n\t\tlogging.config.dictConfig({\"version\": 1, \"disable_existing_loggers\": True})\n\n\tdef apk_info(self):\n\t\treturn APK(self.file)\n\n\tdef dependencies(self):\n\t\texter = \"https://github.com/skylot/jadx/releases/download/v1.2.0/jadx-1.2.0.zip\"\n\t\twith closing(urlopen(exter)) as jadx:\n\t\t\twith ZipFile(io.BytesIO(jadx.read())) as zfile:\n\t\t\t\tzfile.extractall(self.main_dir + \"/../jadx\")\n\t\tos.chmod(self.jadx, 33268)\n\n\tdef write(self, message, color):\n\t\tsys.stdout.write(\"%s%s%s\" % (color, message, clr.ENDC))\n\n\tdef writeln(self, message, color):\n\t\tself.write(message + \"\\n\", color)\n\n\tdef integrity(self):\n\t\tif os.path.exists(self.jadx) is False:\n\t\t\tself.writeln(\"Can't find jadx binary.\", clr.WARNING)\n\t\t\tvalid = {\"yes\": True, \"y\": True, \"ye\": True, \"no\": False, \"n\": False}\n\t\t\twhile True:\n\t\t\t\tself.write(\"Do you want to download jadx? (Y/n) \", clr.OKBLUE)\n\t\t\t\tchoice = input().lower()\n\t\t\t\tif choice == \"\":\n\t\t\t\t\tchoice = valid[\"y\"]\n\t\t\t\t\tbreak\n\t\t\t\telif choice in valid:\n\t\t\t\t\tchoice = valid[choice]\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tself.writeln(\"\\nPlease respond with 'yes' or 'no' (or 'y' or 'n').\", clr.WARNING)\n\t\t\tif choice:\n\t\t\t\tself.writeln(\"** Downloading jadx...\\n\", clr.OKBLUE)\n\t\t\t\tself.dependencies()\n\t\t\telse:\n\t\t\t\tsys.exit(self.writeln(\"Aborted.\", clr.FAIL))\n\n\t\tif os.path.isfile(self.file) is True:\n\t\t\ttry:\n\t\t\t\tself.apk = self.apk_info()\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\t\telse:\n\t\t\t\treturn self.apk\n\t\telse:\n\t\t\tsys.exit(self.writeln(\"It's not a valid file!\", clr.WARNING))\n\n\tdef decompile(self):\n\t\tself.writeln(\"** Decompiling APK...\", clr.OKBLUE)\n\t\twith ZipFile(self.file) as zipped:\n\t\t\ttry:\n\t\t\t\tdex = self.tempdir + \"/\" + self.apk.package + \".dex\"\n\t\t\t\twith open(dex, \"wb\") as classes:\n\t\t\t\t\tclasses.write(zipped.read(\"classes.dex\"))\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\tdec = \"%s %s -d %s --deobf\" % (self.jadx, dex, self.tempdir)\n\t\tos.system(dec)\n\t\treturn self.tempdir\n\n\tdef unique(self, list): \n\t\tx = numpy.array(list) \n\t\treturn (numpy.unique(x))\n\n\tdef finder(self, pattern, path):\n\t\tmatcher = re.compile(pattern)\n\t\tfound = []\n\t\tfor path, _, files in os.walk(path):\n\t\t\tfor fn in files:\n\t\t\t\tfilepath = os.path.join(path, fn)\n\t\t\t\tif mimetypes.guess_type(filepath)[0] is None:\n\t\t\t\t\tcontinue\n\t\t\t\twith open(filepath) as handle:\n\t\t\t\t\tfor lineno, line in enumerate(handle):\n\t\t\t\t\t\tmo = matcher.search(line)\n\t\t\t\t\t\tif mo:\n\t\t\t\t\t\t\tfound.append(mo.group())\n\t\treturn self.unique(found)\n\n\tdef extract(self, name, matches):\n\t\toutput = open(self.output, \"a+\")\n\t\tif matches:\n\t\t\tstdout = (\"[%s]\" % (name))\n\t\t\tself.writeln(\"\\n\" + stdout, clr.OKGREEN)\n\t\t\toutput.write(stdout + \"\\n\")\n\t\t\tfor secret in matches:\n\t\t\t\tif name == \"LinkFinder\" and re.match(r\"^.(L[a-z]|application|audio|fonts|image|layout|multipart|plain|text|video).*\\/.+\", secret) is not None:\n\t\t\t\t\tcontinue\n\t\t\t\tstdout = (\"- %s\" % (secret))\n\t\t\t\tprint(stdout)\n\t\t\t\toutput.write(stdout + \"\\n\")\n\t\t\toutput.write(\"\\n\")\n\t\toutput.close()\n\n\tdef scanning(self):\n\t\tself.writeln(\"\\n** Scanning against '%s'\" % (self.apk.package), clr.OKBLUE)\n\t\twith open(self.pattern) as regexes:\n\t\t\tregex = json.load(regexes)\n\t\t\tfor name, pattern in regex.items():\n\t\t\t\tif isinstance(pattern, list):\n\t\t\t\t\tfor pattern in pattern:\n\t\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\t\tthread.start()\n\t\t\t\telse:\n\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\tthread.start()\n\n\tdef __del__(self):\n\t\tprint(\"%s\\n** Results saved into '%s%s%s%s'%s\" % (clr.OKBLUE, clr.ENDC, clr.OKGREEN, self.output, clr.OKBLUE, clr.ENDC))\n\t\ttry:\n\t\t\tshutil.rmtree(self.tempdir)\n\t\texcept Exception:\n\t\t\treturn\n", "patch": "@@ -2,6 +2,7 @@\n from apkleaks.colors import clr\n from contextlib import closing\n from distutils.spawn import find_executable\n+from pipes import quote\n from pyaxmlparser import APK\n from urllib.request import urlopen\n from zipfile import ZipFile\n@@ -84,8 +85,9 @@ def decompile(self):\n \t\t\t\t\tclasses.write(zipped.read(\"classes.dex\"))\n \t\t\texcept Exception as e:\n \t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n-\t\tdec = \"%s %s -d %s --deobf\" % (self.jadx, dex, self.tempdir)\n-\t\tos.system(dec)\n+\t\targs = [self.jadx, dex, \"-d\", self.tempdir, \"--deobf\"]\n+\t\tcomm = \"%s\" % (\" \".join(quote(arg) for arg in args))\n+\t\tos.system(comm)\n \t\treturn self.tempdir\n \n \tdef unique(self, list): ", "file_path": "files/2021_3/112", "file_language": "py", "file_name": "apkleaks/apkleaks.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [true, ["/data/rdhu/other/Static/tmp/2021_3_112.py:88: High: system\n\t\tos.system(dec)\nArgument 1 to this function call should be checked to ensure that it does not\ncome from an untrusted source without first verifying that it contains nothing\ndangerous.\n"]], "semgrep": [false, []]}, "target": 1, "function_before": [{"function": "class APKLeaks:\n\tdef __init__(self, args):\n\t\tself.file = args.file\n\t\tself.prefix = \"apkleaks-\"\n\t\tself.tempdir = tempfile.mkdtemp(prefix=self.prefix)\n\t\tself.main_dir = os.path.dirname(os.path.realpath(__file__))\n\t\tself.output = tempfile.mkstemp(suffix=\".txt\", prefix=self.prefix)[1] if args.output is None else args.output\n\t\tself.pattern = self.main_dir + \"/../config/regexes.json\" if args.pattern is None else args.pattern\n\t\tself.jadx = find_executable(\"jadx\") if find_executable(\"jadx\") is not None else self.main_dir + \"/../jadx/bin/jadx%s\" % (\".bat\" if os.name == \"nt\" else \"\")\n\t\tlogging.config.dictConfig({\"version\": 1, \"disable_existing_loggers\": True})\n\n\tdef apk_info(self):\n\t\treturn APK(self.file)\n\n\tdef dependencies(self):\n\t\texter = \"https://github.com/skylot/jadx/releases/download/v1.2.0/jadx-1.2.0.zip\"\n\t\twith closing(urlopen(exter)) as jadx:\n\t\t\twith ZipFile(io.BytesIO(jadx.read())) as zfile:\n\t\t\t\tzfile.extractall(self.main_dir + \"/../jadx\")\n\t\tos.chmod(self.jadx, 33268)\n\n\tdef write(self, message, color):\n\t\tsys.stdout.write(\"%s%s%s\" % (color, message, clr.ENDC))\n\n\tdef writeln(self, message, color):\n\t\tself.write(message + \"\\n\", color)\n\n\tdef integrity(self):\n\t\tif os.path.exists(self.jadx) is False:\n\t\t\tself.writeln(\"Can't find jadx binary.\", clr.WARNING)\n\t\t\tvalid = {\"yes\": True, \"y\": True, \"ye\": True, \"no\": False, \"n\": False}\n\t\t\twhile True:\n\t\t\t\tself.write(\"Do you want to download jadx? (Y/n) \", clr.OKBLUE)\n\t\t\t\tchoice = input().lower()\n\t\t\t\tif choice == \"\":\n\t\t\t\t\tchoice = valid[\"y\"]\n\t\t\t\t\tbreak\n\t\t\t\telif choice in valid:\n\t\t\t\t\tchoice = valid[choice]\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tself.writeln(\"\\nPlease respond with 'yes' or 'no' (or 'y' or 'n').\", clr.WARNING)\n\t\t\tif choice:\n\t\t\t\tself.writeln(\"** Downloading jadx...\\n\", clr.OKBLUE)\n\t\t\t\tself.dependencies()\n\t\t\telse:\n\t\t\t\tsys.exit(self.writeln(\"Aborted.\", clr.FAIL))\n\n\t\tif os.path.isfile(self.file) is True:\n\t\t\ttry:\n\t\t\t\tself.apk = self.apk_info()\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\t\telse:\n\t\t\t\treturn self.apk\n\t\telse:\n\t\t\tsys.exit(self.writeln(\"It's not a valid file!\", clr.WARNING))\n\n\tdef decompile(self):\n\t\tself.writeln(\"** Decompiling APK...\", clr.OKBLUE)\n\t\twith ZipFile(self.file) as zipped:\n\t\t\ttry:\n\t\t\t\tdex = self.tempdir + \"/\" + self.apk.package + \".dex\"\n\t\t\t\twith open(dex, \"wb\") as classes:\n\t\t\t\t\tclasses.write(zipped.read(\"classes.dex\"))\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\tdec = \"%s %s -d %s --deobf\" % (self.jadx, dex, self.tempdir)\n\t\tos.system(dec)\n\t\treturn self.tempdir\n\n\tdef unique(self, list): \n\t\tx = numpy.array(list) \n\t\treturn (numpy.unique(x))\n\n\tdef finder(self, pattern, path):\n\t\tmatcher = re.compile(pattern)\n\t\tfound = []\n\t\tfor path, _, files in os.walk(path):\n\t\t\tfor fn in files:\n\t\t\t\tfilepath = os.path.join(path, fn)\n\t\t\t\tif mimetypes.guess_type(filepath)[0] is None:\n\t\t\t\t\tcontinue\n\t\t\t\twith open(filepath) as handle:\n\t\t\t\t\tfor lineno, line in enumerate(handle):\n\t\t\t\t\t\tmo = matcher.search(line)\n\t\t\t\t\t\tif mo:\n\t\t\t\t\t\t\tfound.append(mo.group())\n\t\treturn self.unique(found)\n\n\tdef extract(self, name, matches):\n\t\toutput = open(self.output, \"a+\")\n\t\tif matches:\n\t\t\tstdout = (\"[%s]\" % (name))\n\t\t\tself.writeln(\"\\n\" + stdout, clr.OKGREEN)\n\t\t\toutput.write(stdout + \"\\n\")\n\t\t\tfor secret in matches:\n\t\t\t\tif name == \"LinkFinder\" and re.match(r\"^.(L[a-z]|application|audio|fonts|image|layout|multipart|plain|text|video).*\\/.+\", secret) is not None:\n\t\t\t\t\tcontinue\n\t\t\t\tstdout = (\"- %s\" % (secret))\n\t\t\t\tprint(stdout)\n\t\t\t\toutput.write(stdout + \"\\n\")\n\t\t\toutput.write(\"\\n\")\n\t\toutput.close()\n\n\tdef scanning(self):\n\t\tself.writeln(\"\\n** Scanning against '%s'\" % (self.apk.package), clr.OKBLUE)\n\t\twith open(self.pattern) as regexes:\n\t\t\tregex = json.load(regexes)\n\t\t\tfor name, pattern in regex.items():\n\t\t\t\tif isinstance(pattern, list):\n\t\t\t\t\tfor pattern in pattern:\n\t\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\t\tthread.start()\n\t\t\t\telse:\n\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\tthread.start()\n\n\tdef __del__(self):\n\t\tprint(\"%s\\n** Results saved into '%s%s%s%s'%s\" % (clr.OKBLUE, clr.ENDC, clr.OKGREEN, self.output, clr.OKBLUE, clr.ENDC))\n\t\ttry:\n\t\t\tshutil.rmtree(self.tempdir)\n\t\texcept Exception:\n\t\t\treturn", "target": 1, "line": "@@  -84,8 +85,9  @@ def decompile(self):\n \t\t\t\t\tclasses.write(zipped.read(\"classes.dex\"))\n \t\t\texcept Exception as e:\n \t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n-\t\tdec = \"%s %s -d %s --deobf\" % (self.jadx, dex, self.tempdir)\n-\t\tos.system(dec)\n+\t\targs = [self.jadx, dex, \"-d\", self.tempdir, \"--deobf\"]\n+\t\tcomm = \"%s\" % (\" \".join(quote(arg) for arg in args))\n+\t\tos.system(comm)\n \t\treturn self.tempdir\n \n \tdef unique(self, list): "}], "function_after": [{"function": "class APKLeaks:\n\tdef __init__(self, args):\n\t\tself.file = args.file\n\t\tself.prefix = \"apkleaks-\"\n\t\tself.tempdir = tempfile.mkdtemp(prefix=self.prefix)\n\t\tself.main_dir = os.path.dirname(os.path.realpath(__file__))\n\t\tself.output = tempfile.mkstemp(suffix=\".txt\", prefix=self.prefix)[1] if args.output is None else args.output\n\t\tself.pattern = self.main_dir + \"/../config/regexes.json\" if args.pattern is None else args.pattern\n\t\tself.jadx = find_executable(\"jadx\") if find_executable(\"jadx\") is not None else self.main_dir + \"/../jadx/bin/jadx%s\" % (\".bat\" if os.name == \"nt\" else \"\")\n\t\tlogging.config.dictConfig({\"version\": 1, \"disable_existing_loggers\": True})\n\n\tdef apk_info(self):\n\t\treturn APK(self.file)\n\n\tdef dependencies(self):\n\t\texter = \"https://github.com/skylot/jadx/releases/download/v1.2.0/jadx-1.2.0.zip\"\n\t\twith closing(urlopen(exter)) as jadx:\n\t\t\twith ZipFile(io.BytesIO(jadx.read())) as zfile:\n\t\t\t\tzfile.extractall(self.main_dir + \"/../jadx\")\n\t\tos.chmod(self.jadx, 33268)\n\n\tdef write(self, message, color):\n\t\tsys.stdout.write(\"%s%s%s\" % (color, message, clr.ENDC))\n\n\tdef writeln(self, message, color):\n\t\tself.write(message + \"\\n\", color)\n\n\tdef integrity(self):\n\t\tif os.path.exists(self.jadx) is False:\n\t\t\tself.writeln(\"Can't find jadx binary.\", clr.WARNING)\n\t\t\tvalid = {\"yes\": True, \"y\": True, \"ye\": True, \"no\": False, \"n\": False}\n\t\t\twhile True:\n\t\t\t\tself.write(\"Do you want to download jadx? (Y/n) \", clr.OKBLUE)\n\t\t\t\tchoice = input().lower()\n\t\t\t\tif choice == \"\":\n\t\t\t\t\tchoice = valid[\"y\"]\n\t\t\t\t\tbreak\n\t\t\t\telif choice in valid:\n\t\t\t\t\tchoice = valid[choice]\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tself.writeln(\"\\nPlease respond with 'yes' or 'no' (or 'y' or 'n').\", clr.WARNING)\n\t\t\tif choice:\n\t\t\t\tself.writeln(\"** Downloading jadx...\\n\", clr.OKBLUE)\n\t\t\t\tself.dependencies()\n\t\t\telse:\n\t\t\t\tsys.exit(self.writeln(\"Aborted.\", clr.FAIL))\n\n\t\tif os.path.isfile(self.file) is True:\n\t\t\ttry:\n\t\t\t\tself.apk = self.apk_info()\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\t\telse:\n\t\t\t\treturn self.apk\n\t\telse:\n\t\t\tsys.exit(self.writeln(\"It's not a valid file!\", clr.WARNING))\n\n\tdef decompile(self):\n\t\tself.writeln(\"** Decompiling APK...\", clr.OKBLUE)\n\t\twith ZipFile(self.file) as zipped:\n\t\t\ttry:\n\t\t\t\tdex = self.tempdir + \"/\" + self.apk.package + \".dex\"\n\t\t\t\twith open(dex, \"wb\") as classes:\n\t\t\t\t\tclasses.write(zipped.read(\"classes.dex\"))\n\t\t\texcept Exception as e:\n\t\t\t\tsys.exit(self.writeln(str(e), clr.WARNING))\n\t\targs = [self.jadx, dex, \"-d\", self.tempdir, \"--deobf\"]\n\t\tcomm = \"%s\" % (\" \".join(quote(arg) for arg in args))\n\t\tos.system(comm)\n\t\treturn self.tempdir\n\n\tdef unique(self, list): \n\t\tx = numpy.array(list) \n\t\treturn (numpy.unique(x))\n\n\tdef finder(self, pattern, path):\n\t\tmatcher = re.compile(pattern)\n\t\tfound = []\n\t\tfor path, _, files in os.walk(path):\n\t\t\tfor fn in files:\n\t\t\t\tfilepath = os.path.join(path, fn)\n\t\t\t\tif mimetypes.guess_type(filepath)[0] is None:\n\t\t\t\t\tcontinue\n\t\t\t\twith open(filepath) as handle:\n\t\t\t\t\tfor lineno, line in enumerate(handle):\n\t\t\t\t\t\tmo = matcher.search(line)\n\t\t\t\t\t\tif mo:\n\t\t\t\t\t\t\tfound.append(mo.group())\n\t\treturn self.unique(found)\n\n\tdef extract(self, name, matches):\n\t\toutput = open(self.output, \"a+\")\n\t\tif matches:\n\t\t\tstdout = (\"[%s]\" % (name))\n\t\t\tself.writeln(\"\\n\" + stdout, clr.OKGREEN)\n\t\t\toutput.write(stdout + \"\\n\")\n\t\t\tfor secret in matches:\n\t\t\t\tif name == \"LinkFinder\" and re.match(r\"^.(L[a-z]|application|audio|fonts|image|layout|multipart|plain|text|video).*\\/.+\", secret) is not None:\n\t\t\t\t\tcontinue\n\t\t\t\tstdout = (\"- %s\" % (secret))\n\t\t\t\tprint(stdout)\n\t\t\t\toutput.write(stdout + \"\\n\")\n\t\t\toutput.write(\"\\n\")\n\t\toutput.close()\n\n\tdef scanning(self):\n\t\tself.writeln(\"\\n** Scanning against '%s'\" % (self.apk.package), clr.OKBLUE)\n\t\twith open(self.pattern) as regexes:\n\t\t\tregex = json.load(regexes)\n\t\t\tfor name, pattern in regex.items():\n\t\t\t\tif isinstance(pattern, list):\n\t\t\t\t\tfor pattern in pattern:\n\t\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\t\tthread.start()\n\t\t\t\telse:\n\t\t\t\t\tthread = threading.Thread(target = self.extract, args = (name, self.finder(pattern, self.tempdir)))\n\t\t\t\t\tthread.start()\n\n\tdef __del__(self):\n\t\tprint(\"%s\\n** Results saved into '%s%s%s%s'%s\" % (clr.OKBLUE, clr.ENDC, clr.OKGREEN, self.output, clr.OKBLUE, clr.ENDC))\n\t\ttry:\n\t\t\tshutil.rmtree(self.tempdir)\n\t\texcept Exception:\n\t\t\treturn", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
