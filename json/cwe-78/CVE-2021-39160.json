{"index": 6270, "cve_id": "CVE-2021-39160", "cwe_id": ["CWE-94", "CWE-78"], "cve_language": "Python", "cve_description": "nbgitpuller is a Jupyter server extension to sync a git repository one-way to a local path. Due to unsanitized input, visiting maliciously crafted links could result in arbitrary code execution in the user environment. This has been resolved in version 0.10.2 and all users are advised to upgrade. No work around exist for users who can not upgrade.", "cvss": "8.8", "publish_date": "August 25, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "07690644f29a566011dd0d7ba14cae3eb0490481", "commit_message": "Merge pull request from GHSA-mq5p-2mcr-m52j\n\nmake positional args explicit", "commit_date": "2021-08-25T12:23:02Z", "project": "jupyterhub/nbgitpuller", "url": "https://api.github.com/repos/jupyterhub/nbgitpuller/commits/07690644f29a566011dd0d7ba14cae3eb0490481", "html_url": "https://github.com/jupyterhub/nbgitpuller/commit/07690644f29a566011dd0d7ba14cae3eb0490481", "windows_before": [{"commit_id": "2cad6147f1769a962f8d0733045967663add53cb", "commit_date": "Fri Aug 20 22:11:37 2021 +0530", "commit_message": "Merge pull request #197 from GeorgianaElena/fix-jupyter-server-extension", "files_name": ["2f58aa59b3d9bec5fa1469776cc1eda8362fef97 - Fri Aug 20 12:15:41 2021 +0300 : Use addon when calling fit and import xterm css", "nbgitpuller/static/js/index.js", "package.json", "webpack.config.js"]}, {"commit_id": "8401bd6bad8ce48cab89d69a348fe9ea42487730", "commit_date": "Tue Aug 17 23:27:07 2021 +0530", "commit_message": "Merge pull request #193 from GeorgianaElena/extension", "files_name": ["6e3f45c97d2b3993cc992cd6bc00693562c5e24a - Tue Aug 17 13:28:55 2021 +0300 : Update contributing docs", "docs/contributing.md"]}, {"commit_id": "7d06c2e46d13dfb7b0607d0b1125362bcb154096", "commit_date": "Wed Jul 28 13:07:04 2021 +0300", "commit_message": "Ammend temp debug changes", "files_name": [".github/workflows/test.yml", "tests/test_api.py"]}, {"commit_id": "1f56f1fbc45da2a938e15075e352f990658bcddb", "commit_date": "Wed Jul 28 13:06:47 2021 +0300", "commit_message": "Install nbclassic", "files_name": ["dev-requirements.txt"]}, {"commit_id": "389457f2b8908981a4642fa5b459c688b46109d5", "commit_date": "Wed Jul 28 12:22:33 2021 +0300", "commit_message": "Temporarly run the tests with output just for jupyter_server", "files_name": [".github/workflows/test.yml", "tests/test_api.py"]}, {"commit_id": "4803371ec79fd40273f5c8fa3d7c24aea17d5318", "commit_date": "Tue Jul 27 17:56:10 2021 +0300", "commit_message": "Run npm to build static assets in CI", "files_name": [".github/workflows/test.yml"]}, {"commit_id": "b019aa48b894208a6dfb987e9a61dfea7caf4138", "commit_date": "Tue Jul 27 17:50:28 2021 +0300", "commit_message": "Require jupyter_server too", "files_name": ["setup.py"]}, {"commit_id": "f60647eb058208e034f72f440a4b05f8f06d9ad0", "commit_date": "Tue Jul 27 17:45:13 2021 +0300", "commit_message": "Run the test_api with both jupyter notebook and server", "files_name": ["tests/test_api.py"]}, {"commit_id": "9adba0a594b9bda98ba0eccdb7d660ab64062964", "commit_date": "Tue Jul 27 16:44:24 2021 +0300", "commit_message": "Use the page template from jupyter_server instead", "files_name": ["nbgitpuller/templates/page.html"]}, {"commit_id": "26572451c2db3f6a451176f24038f293a8f8a7a3", "commit_date": "Mon Jul 19 14:37:02 2021 +0300", "commit_message": "Use webpack", "files_name": [".gitignore", "nbgitpuller/templates/status.html", "setup.py"]}, {"commit_id": "2d56f02e4164f048b9a8c1df873fca4eb3a1bf78", "commit_date": "Mon Jul 19 14:36:37 2021 +0300", "commit_message": "Move index.js to its dedicated dir", "files_name": ["nbgitpuller/static/index.js", "nbgitpuller/static/js/index.js"]}, {"commit_id": "6c42bf22dbe6daecdbcb68bb74f0dbcbe24815af", "commit_date": "Mon Jul 19 14:35:51 2021 +0300", "commit_message": "Add webpack config files", "files_name": ["package.json", "webpack.config.js"]}, {"commit_id": "2b1501825f07b21f7f23aef554e22cf963aeea2e", "commit_date": "Mon Jul 19 14:33:45 2021 +0300", "commit_message": "Copy page.html over to avoid notebook pkg dep", "files_name": ["nbgitpuller/templates/page.html"]}, {"commit_id": "2ef07d358650e777da8f26e953f37984b22e9f19", "commit_date": "Thu Jul 8 16:42:43 2021 +0300", "commit_message": "Migrate nbgitpuller to use jupyter_server", "files_name": ["nbgitpuller/__init__.py", "nbgitpuller/etc/jupyter_notebook_config.d/nbgitpuller.json", "nbgitpuller/etc/jupyter_server_config.d/nbgitpuller.json", "setup.py"]}, {"commit_id": "4d40c2d0445213e1b94a63e2940cccc841f1ced3", "commit_date": "Wed Jul 14 12:14:30 2021 +0530", "commit_message": "Merge pull request #189 from consideRatio/rename-nbgitpuller-repos-master-branch-to-main", "files_name": ["b5f23fd4886a710e4beeac0210727f37fc648200 - Thu Jun 24 13:37:08 2021 +0200 : back to dev", "nbgitpuller/version.py"]}, {"commit_id": "bd60d7659cb30c7029d8363f1fa0ace0aad93831", "commit_date": "Thu Jun 24 13:36:35 2021 +0200", "commit_message": "release 0.10.1", "files_name": ["nbgitpuller/version.py"]}, {"commit_id": "775fed28008da8fab21b07fe24cdeb16e891f4ec", "commit_date": "Thu Jun 24 16:43:12 2021 +0530", "commit_message": "Merge pull request #191 from consideRatio/pr/changelog-0.10.1", "files_name": ["6118a9ac919c6eb8dbbf4b125ad5f57741e39c63 - Thu Jun 24 12:51:52 2021 +0200 : Add changelog for 0.10.1", "CHANGELOG.md"]}, {"commit_id": "cf68d91d0a70acf20390996c9864db1325822ab3", "commit_date": "Thu Jun 24 12:35:41 2021 +0200", "commit_message": "Rename nbgitpuller repo's master branch to main", "files_name": [".circleci/config.yml", "RELEASE.md", "docs/conf.py"]}, {"commit_id": "e11fa15076b902f5daac4a1ef5e724e30ff81245", "commit_date": "Thu Jun 24 15:56:19 2021 +0530", "commit_message": "Merge pull request #188 from consideRatio/pr/test-ci", "files_name": ["4293c7bb40e4adddc970efe3aaf814ec0884c280 - Thu Jun 24 12:08:07 2021 +0200 : ci: stop using pip cache, add workflow_dispatch, and cleanup misc", ".github/workflows/test.yml", "README.md"]}, {"commit_id": "183e5e8cb18d1bedc1425d1f561204984d691964", "commit_date": "Thu Jun 24 12:06:05 2021 +0200", "commit_message": "Merge pull request #181 from yuvipanda/cleaner-lint", "files_name": ["51d924036b67ac9738cf88588bc2e58905c9c285 - Thu Jun 24 15:11:20 2021 +0530 : Merge pull request #185 from sean-morris/master", "1e5790467ae4a4bbf4d76c2763baf00f342d0c66 - Mon Jun 14 16:54:17 2021 -0700 : Added tests to catch command line execution errors", "nbgitpuller/pull.py", "tests/test_gitpuller.py"]}, {"commit_id": "66101be8952070c2d04416ebc6cd05a1181978a6", "commit_date": "Mon Jun 14 15:04:16 2021 -0700", "commit_message": "Removed master as default branch_name", "files_name": ["nbgitpuller/pull.py"]}, {"commit_id": "3c786e851f368d33c2e6e9c7b05025bf0b4376d0", "commit_date": "Thu Jun 10 10:44:36 2021 -0700", "commit_message": "Added branch name back to command-line usage", "files_name": ["nbgitpuller/pull.py"]}, {"commit_id": "3280fdde5d9abc64e4b6271375bd03e94886103d", "commit_date": "Wed Jun 9 11:08:16 2021 +0200", "commit_message": "back to dev", "files_name": ["nbgitpuller/version.py"]}, {"commit_id": "330dd1eab46ee4ef3f35da36f449c610200dfc07", "commit_date": "Wed Jun 9 11:07:33 2021 +0200", "commit_message": "release 0.10.0", "files_name": ["nbgitpuller/version.py"]}, {"commit_id": "0dc297cbe76dcc846ec123f430d12ce51f6c47eb", "commit_date": "Wed Jun 9 14:36:32 2021 +0530", "commit_message": "Merge pull request #183 from consideRatio/pr/changelog-for-1.0.0", "files_name": ["672722af6806a9537648f8d5fb6590245b9b8810 - Wed Jun 9 11:04:45 2021 +0200 : Apply suggestions from code review", "CHANGELOG.md"]}, {"commit_id": "73453e5ab1407922c09c16cc5027e5a0309245f4", "commit_date": "Wed Jun 9 08:24:12 2021 +0200", "commit_message": "Add changelog for 0.10.0", "files_name": ["CHANGELOG.md"]}, {"commit_id": "bb2daad4e5ef39bbaee9b254acfbdd55a841d289", "commit_date": "Wed Jun 9 08:21:44 2021 +0200", "commit_message": "Update past changelog format", "files_name": ["CHANGELOG.md"]}, {"commit_id": "8d65dfcbabf8bae8a67849313ffaba145e3e9750", "commit_date": "Wed Jun 9 03:35:53 2021 +0530", "commit_message": "Merge pull request #179 from sean-morris/master", "files_name": ["12f25dd45d09d140038a9f9c4b66d7b7cb3ea715 - Mon Jun 7 18:19:09 2021 -0700 : Cleaned up passing of branch on query string", "nbgitpuller/handlers.py", "nbgitpuller/pull.py", "nbgitpuller/static/index.js", "nbgitpuller/templates/status.html", "tests/test_gitpuller.py"]}, {"commit_id": "8423af43e56df865eb4ce9a787dde3f71f47b0d0", "commit_date": "Tue Jun 1 18:00:21 2021 -0700", "commit_message": "Updates to handling default or non-existing branch", "files_name": ["nbgitpuller/pull.py", "requirements.txt", "tests/test_gitpuller.py"]}, {"commit_id": "752b6a30bcd5c3851782cfe85035ab7304ef5cd5", "commit_date": "Wed Jun 2 19:43:26 2021 +0530", "commit_message": "Provide cleaner feedback for lint vs test failures", "files_name": [".flake8", ".github/workflows/test.yml", "dev-requirements.txt", "docs/conf.py", "docs/contributing.md", "nbgitpuller/__init__.py", "tox.ini"]}, {"commit_id": "79dd180114beca5f2a7d929dd97a162bb060e694", "commit_date": "Fri May 21 16:31:50 2021 -0700", "commit_message": "Handle default or non-existing branch name", "files_name": [".gitignore", "nbgitpuller/handlers.py", "nbgitpuller/pull.py", "requirements.txt", "tests/test_gitpuller.py"]}, {"commit_id": "814682bb1a3452212212bed8079bf3f6a8045bce", "commit_date": "Fri May 28 20:12:50 2021 +0200", "commit_message": "Merge pull request #178 from yuvipanda/contrib", "files_name": ["b3d1f7256c54481ff9d600de1dc303c8cb15aad1 - Fri May 28 23:10:08 2021 +0530 : Document restarting notebook process to see changes", "docs/contributing.md"]}, {"commit_id": "207e3b2e22b246239ed5d7942631cd38093da993", "commit_date": "Sun May 2 11:16:43 2021 +0530", "commit_message": "Merge pull request #175 from consideRatio/pr/update-badges", "files_name": ["d13737e1b5f564f22edd45bc8a83d39765c7bb5e - Sun May 2 02:47:03 2021 +0200 : docs: update README.md badges", "README.md"]}, {"commit_id": "d2731314653e98aa908c14d2a411affc9cb88001", "commit_date": "Fri Apr 23 18:14:15 2021 +0200", "commit_message": "Merge pull request #173 from yuvipanda/fix-trailing-slash", "files_name": ["ac44f2855df582db7977dd97e8434b257a6d729a - Fri Apr 23 18:12:12 2021 +0200 : Merge pull request #172 from yuvipanda/fix-152", "ebe3998a511d4758ed7ff11395f8771d4ad94f8f - Fri Apr 23 21:07:39 2021 +0530 : Handle lack of trailing slashes in hub URLs", "docs/_static/link_gen/link.js"]}, {"commit_id": "8384c6c4aa063dda2c1ea0930ab8e5c89018f035", "commit_date": "Fri Apr 23 21:02:04 2021 +0530", "commit_message": "Respect path component of JupyterHub url", "files_name": ["docs/_static/link_gen/link.js"]}, {"commit_id": "22e2e279b2c3dab8d4087838b518a8512b06411a", "commit_date": "Sun Mar 21 22:13:22 2021 +0100", "commit_message": "Merge pull request #170 from yuvipanda/no-master", "files_name": ["c269970466288007efa30fe9ee036f9b8ae6d6fc - Mon Mar 22 02:22:52 2021 +0530 : Tell users about `main` vs `master` branches", "docs/link.rst"]}, {"commit_id": "d243b0da5bf03833deda8171cbbb8dd9ee301f90", "commit_date": "Tue Feb 16 14:40:44 2021 +0100", "commit_message": "Merge pull request #169 from yuvipanda/best-practices", "files_name": ["31910e9dee6a6d4365e71ed26de48d0b61973548 - Thu Feb 11 00:14:10 2021 +0530 : Add note about .gitignore", "docs/topic/repo-best-practices.md"]}, {"commit_id": "1b8d00389579586f94a150a6c3b787e0ea213994", "commit_date": "Wed Feb 10 17:53:11 2021 +0530", "commit_message": "Add best practices recommendation documentation", "files_name": ["docs/index.rst", "docs/topic/repo-best-practices.md"]}, {"commit_id": "77488db400e2673a3d10a334691eb31a810f5855", "commit_date": "Fri Jan 8 08:12:27 2021 +0100", "commit_message": "Merge pull request #165 from yuvipanda/shiny-link", "files_name": ["e46c169ad6c43ac672ced2e26f7f4bb92db52c0a - Fri Jan 8 12:39:53 2021 +0530 : Update url-options docs for shiny", "docs/topic/url-options.rst"]}, {"commit_id": "63cb779b96a31634bd224f798a7d3c219688755c", "commit_date": "Fri Jan 8 10:30:52 2021 +0530", "commit_message": "Support generating shiny links", "files_name": ["docs/_static/link_gen/link.js", "docs/link.rst"]}, {"commit_id": "d7bdacf023242bd453ebcf391971e97b3cca2c4d", "commit_date": "Wed Jan 6 13:34:19 2021 +0100", "commit_message": "Merge pull request #162 from yuvipanda/contributing", "files_name": ["ef4a12b74c5729c1b1967c55aaf03307445cf8b0 - Wed Jan 6 13:39:28 2021 +0530 : Remove extreneous packages from doc-requirements", "docs/doc-requirements.txt"]}, {"commit_id": "5d443c6065d52f943a8311290277a3b80c218796", "commit_date": "Tue Jan 5 17:57:23 2021 +0530", "commit_message": "Remove unnecessary myst config", "files_name": ["docs/conf.py"]}, {"commit_id": "82a3352e17cf29ae7e26ec1ccdf25811ff80672f", "commit_date": "Thu Dec 17 15:17:16 2020 +0100", "commit_message": "Merge pull request #163 from yuvipanda/git-ssh", "files_name": ["a9c119a28024cb3a3ac55f662bb731115479d354 - Thu Dec 17 19:36:23 2020 +0530 : Mention that binder doesn't work with ssh urls", "docs/_static/link_gen/link.js"]}, {"commit_id": "6bd27c80f3d42d0723a8ef021a93a2d9d1d9621a", "commit_date": "Thu Dec 17 17:27:36 2020 +0530", "commit_message": "Parse ssh git URLs properly", "files_name": ["docs/_static/link_gen/link.js"]}, {"commit_id": "61c3603cbdaac60a21ae11c2920cb28b3f0dc9df", "commit_date": "Tue Dec 15 12:35:59 2020 +0530", "commit_message": "Add section on git cloning", "files_name": ["docs/contributing.md"]}, {"commit_id": "7c22dd1f30243c6f644ea86786119c3613a8a437", "commit_date": "Tue Dec 15 12:24:11 2020 +0530", "commit_message": "Move 'contributing' section after 'installation'", "files_name": ["docs/index.rst"]}, {"commit_id": "67e963cb855b0f88a290d30d292754188882ce6f", "commit_date": "Mon Dec 14 12:31:57 2020 +0530", "commit_message": "Document how to do local development", "files_name": ["docs/conf.py", "docs/contributing.md", "docs/doc-requirements.txt", "docs/index.rst"]}, {"commit_id": "92e2b7f812ef13829a80db46373a4f753c84140a", "commit_date": "Fri Dec 11 16:35:50 2020 +0100", "commit_message": "Merge pull request #161 from manics/github-workflow", "files_name": []}], "windows_after": [{"commit_id": "a1d5a953c2b2316c3766c759a3e70616bc600f8e", "commit_date": "Thu Aug 26 13:50:45 2021 -0400", "commit_message": "Update contributing guide to use `git-pull`", "files_name": ["docs/contributing.md"]}, {"commit_id": "58e61f6f74e6ce034e48b20738012fcf034087f8", "commit_date": "Thu Aug 26 20:07:23 2021 +0200", "commit_message": "Merge pull request #202 from jupyterhub/fperez-patch-1", "files_name": ["f18b3e1c405be404383e66bece0537409669ebac - Tue Aug 31 17:45:41 2021 +0200 : Add changelog for 1.0.0", "CHANGELOG.md"]}, {"commit_id": "d05f9cc15604b353301a978ab9bbc2be962ca121", "commit_date": "Wed Sep 1 13:42:30 2021 +0200", "commit_message": "Update changelog for 1.0.0", "files_name": ["CHANGELOG.md"]}, {"commit_id": "21c454fc9f1ecc8f3eaf9bb887471f7e7a609e97", "commit_date": "Wed Sep 1 18:11:56 2021 +0300", "commit_message": "Merge pull request #208 from consideRatio/pr/add-changelog-for-1.0.0", "files_name": ["7c18a14bd58ed54f098572247a8b8b5e4ea674f7 - Wed Sep 1 18:17:43 2021 +0300 : release 1.0.0", "nbgitpuller/version.py"]}, {"commit_id": "4ffd0097a6971f1f2c62821079051a6fb30830ae", "commit_date": "Wed Sep 1 18:19:02 2021 +0300", "commit_message": "back to dev", "files_name": ["nbgitpuller/version.py"]}, {"commit_id": "bcf98730a24ebcd7bad8001a45cac966d7fd32b0", "commit_date": "Wed Sep 1 23:04:16 2021 +0100", "commit_message": "Use jupyter-packaging for npm build", "files_name": ["dev-requirements.txt", "pyproject.toml", "setup.py"]}, {"commit_id": "1932cf3b7a25c06bef597b3abcc4c571aaee8c54", "commit_date": "Thu Sep 2 16:58:50 2021 +0200", "commit_message": "Add package.json to MANIFEST.in to support a js rebuild", "files_name": ["MANIFEST.in"]}, {"commit_id": "0f5de871aac8d08bb73b9ece3784cf526729f192", "commit_date": "Thu Sep 2 18:30:15 2021 +0200", "commit_message": "Slim package.json to avoid fields relevant to npm publication", "files_name": ["RELEASE.md", "package.json"]}, {"commit_id": "acce8116f8135a1342b297b2c1a5e50fa416a24b", "commit_date": "Thu Sep 2 18:51:29 2021 +0200", "commit_message": "Merge pull request #211 from manics/jupyter-packaging", "files_name": ["6221f9c93495d8df4d1f17124ee31a3487da5ecf - Thu Sep 2 18:46:48 2021 +0200 : Remove six from dev-requirements.txt", "dev-requirements.txt"]}, {"commit_id": "f1d2b630eebd6009401fa2dead937eacf0e58f3b", "commit_date": "Thu Sep 2 23:25:26 2021 +0530", "commit_message": "Merge pull request #213 from consideRatio/pr/cleanup-dev-req", "files_name": ["16ea3ba207f35f1278d940fba05ab7b0da485c48 - Thu Sep 2 19:20:56 2021 +0200 : Remove requirement of notebook", "dev-requirements.txt", "setup.py"]}, {"commit_id": "2b0d9a86df2046935e1f1f9e5dd969981f9cdc24", "commit_date": "Thu Sep 2 19:36:33 2021 +0100", "commit_message": "Merge pull request #214 from consideRatio/pr/remove-notebook-req", "files_name": ["2fe5339c55212c51c144718659e65b02b785210d - Thu Sep 2 19:42:55 2021 +0100 : Merge pull request #212 from consideRatio/pr/slim-package.json", "9509e599a8bbad7b0046c12d6bb70c8c9e66cab8 - Thu Sep 2 21:01:33 2021 +0200 : Revert \"Remove requirement of notebook\"", "dev-requirements.txt", "setup.py"]}, {"commit_id": "97f6139e497191174f4f5890f3cc8c7a5ebb158b", "commit_date": "Thu Sep 2 21:03:29 2021 +0200", "commit_message": "Merge pull request #218 from jupyterhub/revert-214-pr/remove-notebook-req", "files_name": ["30f0c5d50883d52d40b7031426eb5b10c29fcef3 - Thu Sep 2 20:48:27 2021 +0200 : Add changelog for 1.0.1", "CHANGELOG.md"]}, {"commit_id": "bc6d68a7ce28cb89838b06acd8521e227b499d27", "commit_date": "Thu Sep 2 21:58:38 2021 +0200", "commit_message": "Merge pull request #216 from consideRatio/pr/changelog-1.0.1", "files_name": ["bef2b919ab07fc9289dc31a826b96b852ee11cc6 - Thu Sep 2 21:59:56 2021 +0200 : release 1.0.1", "nbgitpuller/version.py"]}, {"commit_id": "7bc45a086b347c35baace1716ffc86174f9a4eba", "commit_date": "Thu Sep 2 22:00:17 2021 +0200", "commit_message": "back to dev", "files_name": ["nbgitpuller/version.py"]}, {"commit_id": "ceabbcfa395d24cebbc1b3f4b34b870830baf02b", "commit_date": "Fri Sep 3 01:27:04 2021 +0200", "commit_message": "Fix jupyter-packaging reference, use - instead of _", "files_name": ["dev-requirements.txt", "pyproject.toml"]}, {"commit_id": "e8580572969770430d33615505f7788d69c6ffab", "commit_date": "Fri Sep 3 01:30:13 2021 +0200", "commit_message": "Merge pull request #219 from consideRatio/pr/fix-jupyter-packaging-dep", "files_name": ["1042992c88e4eaf3eb4f9a3d3517b8a72b68431f - Fri Sep 3 01:34:37 2021 +0200 : Add changelog for 1.0.2", "CHANGELOG.md"]}, {"commit_id": "86fe531d418e2ec1a0888c665828a7fb73048663", "commit_date": "Fri Sep 3 01:35:16 2021 +0200", "commit_message": "Merge pull request #220 from consideRatio/pr/add-changelog-for-1.0.2", "files_name": ["1568ec72e266d4c4090d502fa39d2a2385ff2119 - Fri Sep 3 01:36:18 2021 +0200 : release 1.0.2", "nbgitpuller/version.py"]}, {"commit_id": "634f2be53053482a2bc2e4a95c2262352ec9d5e1", "commit_date": "Fri Sep 3 01:36:37 2021 +0200", "commit_message": "back to dev", "files_name": ["nbgitpuller/version.py"]}, {"commit_id": "343b5d5e8708e01edf82530c004fc25c5a8b4d9a", "commit_date": "Sun Sep 26 22:44:15 2021 +0100", "commit_message": "npm: auto-rebuild dist if js changed", "files_name": ["setup.py"]}, {"commit_id": "03d82f347c13cfd58eb9efe087549529027adfcb", "commit_date": "Thu Nov 4 00:48:03 2021 +0100", "commit_message": "Merge pull request #222 from manics/npm-if-changed", "files_name": ["9f1dd8732b43c97a900dd74f852de5ee61a25f56 - Fri Nov 5 01:31:42 2021 +0530 : Fix conf.py to work on newer versions of sphinx", "docs/conf.py"]}, {"commit_id": "54cba594c17b9254d4854e85c22c156429f3b471", "commit_date": "Thu Nov 4 17:33:48 2021 -0700", "commit_message": "Merge pull request #226 from yuvipanda/sphinx", "files_name": ["0ad732402700bc701a0d65d822f9734c60b37fba - Fri Nov 5 01:30:31 2021 +0530 : Add retrolab support to link generator", "docs/_static/link_gen/link.js", "docs/link.rst"]}, {"commit_id": "58d44d9418871bc96878f4c28cecf98559bf7d06", "commit_date": "Sun Nov 7 16:31:08 2021 +0100", "commit_message": "Merge pull request #225 from yuvipanda/retro", "files_name": ["d36dbb4f8feb164f2bddb425a37c6356dd9d6843 - Tue Nov 16 19:29:29 2021 +0530 : Point people to the browser extension", "docs/link.rst"]}, {"commit_id": "b260038f2aa265242000ef0c0fcbd4d617d3e4b0", "commit_date": "Tue Nov 16 19:55:57 2021 +0530", "commit_message": "Fix spacing", "files_name": ["docs/link.rst"]}, {"commit_id": "2928721657e8736316db993b4eec749ba38ade3f", "commit_date": "Tue Nov 16 15:33:22 2021 +0100", "commit_message": "Merge pull request #231 from yuvipanda/link-gen", "files_name": ["981f6f73c0707dc4ee965c9310f441a0296baa96 - Thu Dec 16 19:18:34 2021 -0600 : Remove unnecessary Sphinx configuration files", "docs/_templates/layout.html", "docs/conf.py"]}, {"commit_id": "8007266b1f9316259677d8bbf5275a25ae3e1ef9", "commit_date": "Thu Dec 16 19:19:09 2021 -0600", "commit_message": "DOCS: Update introduction and usage to generalize use-case", "files_name": ["docs/index.md", "docs/index.rst", "docs/install.rst", "docs/use.md"]}, {"commit_id": "cd663118589f1b8b0eb27b1cad4ee9ca9681e1b8", "commit_date": "Fri Dec 17 14:27:45 2021 -0600", "commit_message": "Apply suggestions from code review", "files_name": ["docs/index.md", "docs/install.rst", "docs/use.md"]}, {"commit_id": "982faa3b9e54ddfcac93f87596f6fb946f4cfc64", "commit_date": "Fri Dec 17 14:27:53 2021 -0600", "commit_message": "Update docs/use.md", "files_name": ["docs/use.md"]}, {"commit_id": "5994d773830b850fcca2ee81590021f991da93ee", "commit_date": "Sat Dec 18 13:19:01 2021 +0530", "commit_message": "Merge pull request #237 from choldgraf/docs", "files_name": ["40b4c531291997e39325500759588c20f404e4bb - Tue Nov 16 20:09:11 2021 +0530 : Move docs building workflow to GitHub Actions", ".circleci/config.yml", ".github/workflows/docs.yml"]}, {"commit_id": "4a38847229f42f2bbf03702c00ee33593d7d72fd", "commit_date": "Sat Dec 18 14:03:58 2021 +0100", "commit_message": "Apply suggestions from code review", "files_name": [".github/workflows/docs.yml"]}, {"commit_id": "586c82959a0ead3a9b2cce3bf25c56f511c56b52", "commit_date": "Sat Dec 18 14:10:45 2021 +0100", "commit_message": "ci: modernize docs Makefile to have devenv and linkcheck", "files_name": ["docs/Makefile"]}, {"commit_id": "5e3848c938d5a371f4f3d1f1c3fa9975f1b468bd", "commit_date": "Sat Dec 18 14:24:56 2021 +0100", "commit_message": "ci: add linkcheck job", "files_name": [".github/workflows/docs.yml"]}, {"commit_id": "991c8b94658f97ce0da11f8919f299649fff3688", "commit_date": "Sat Dec 18 14:25:48 2021 +0100", "commit_message": "ci: trigger only (once) when relevant", "files_name": [".github/workflows/docs.yml", ".github/workflows/publish.yml", ".github/workflows/test.yml"]}, {"commit_id": "a1dd2b0ebb549e0ab52a63eb5fa25b0bfa6983d0", "commit_date": "Sat Dec 18 14:26:37 2021 +0100", "commit_message": "ci: opinionated small tweaks", "files_name": [".github/workflows/docs.yml"]}, {"commit_id": "79a5308ce368f05c72d6b463b4c00bacbfce060d", "commit_date": "Sat Dec 18 14:34:45 2021 +0100", "commit_message": "ci: add colors to sphinx", "files_name": [".github/workflows/docs.yml"]}, {"commit_id": "7ac87b2091fe85199da4beaf5c9388992f5c15ad", "commit_date": "Sat Dec 18 14:37:57 2021 +0100", "commit_message": "docs: fix broken anchor, reference chrome webstore", "files_name": ["docs/link.rst"]}, {"commit_id": "d22c66b6d48890333f43829ba4614002adc739f3", "commit_date": "Mon Dec 20 14:17:51 2021 +0530", "commit_message": "Merge pull request #232 from yuvipanda/gha", "files_name": ["99e53ed0c670a0056266c1ce922ed0f253c6d650 - Tue Dec 28 15:32:11 2021 +0100 : DOC: Add link gen. screenshot, update example gif (#238)", "README.md", "docs/_static/nbgitpuller-demo.gif", "docs/_static/nbgitpuller-link-generator.png", "docs/_static/nbpuller.gif", "docs/index.md"]}, {"commit_id": "15333f1c56fc0a2f7cfb715eee47a7844d6430c3", "commit_date": "Mon Jan 3 12:59:08 2022 +0000", "commit_message": "Depend on jupyter-server only", "files_name": ["nbgitpuller/__init__.py", "nbgitpuller/handlers.py", "setup.py"]}, {"commit_id": "626eb5414850a7587fcfa06ef550019966695b96", "commit_date": "Mon Jan 3 13:11:12 2022 +0000", "commit_message": "Change Description to Jupyter instead of Notebook", "files_name": ["setup.py"]}, {"commit_id": "7e2c0e808473fd7e549bc57c6e06a195423d7b8e", "commit_date": "Tue Jan 18 05:24:12 2022 +0100", "commit_message": "ci: test against python 3.7-3.10", "files_name": [".github/workflows/publish.yml", ".github/workflows/test.yml"]}, {"commit_id": "fdd54bdd2b9c6452dcbeff8acf07a5accf7b1b64", "commit_date": "Tue Jan 18 11:15:23 2022 +0530", "commit_message": "Merge pull request #245 from consideRatio/pr/test-against-multiple-versions", "files_name": ["737540444fa5f3bc1a9df5759eabd32c940f9546 - Tue Jan 18 06:15:21 2022 +0100 : docs: add docstrings to legacy web request handlers", "nbgitpuller/handlers.py"]}, {"commit_id": "855f0ca122a83eec031d6dbe93bb8bed46db3909", "commit_date": "Tue Jan 18 04:49:25 2022 +0100", "commit_message": "docs: add docstrings to notebook/jupyter_server hooks", "files_name": ["nbgitpuller/__init__.py"]}, {"commit_id": "18a822cc4407ba3697780f5222466bd6ec90406c", "commit_date": "Tue Jan 18 03:38:48 2022 +0100", "commit_message": "refactor: replace gen.coroutine/yield with async/await", "files_name": ["nbgitpuller/handlers.py"]}, {"commit_id": "1704b7be99eefb61a8fede869c4ffd18f8be700c", "commit_date": "Tue Jan 18 05:49:25 2022 +0100", "commit_message": "refactor: await emit and flush", "files_name": ["nbgitpuller/handlers.py"]}, {"commit_id": "7589f74d6e7cff38083291fca1ea869b6ad8b204", "commit_date": "Tue Jan 18 21:01:33 2022 +0530", "commit_message": "Merge pull request #246 from consideRatio/pr/use-async-await", "files_name": ["8eaf9a4698f703bcc3fefcacaff0b6ca0902c35c - Tue Jan 18 05:02:15 2022 +0100 : refactor: rename to app from nbapp (NotebookApp, ServerApp)", "nbgitpuller/__init__.py"]}, {"commit_id": "a97022d95b6ea63471d7b4c1019b998266598e8f", "commit_date": "Tue Jan 18 21:51:16 2022 +0530", "commit_message": "Merge pull request #242 from consideRatio/pr/misc-maintenance", "files_name": ["75154c0b74d0c47a76c9c6116e0f5585f1cc3d43 - Thu Jan 20 17:23:57 2022 +0100 : Remove binder folder with link_generator.ipynb", "binder/link_generator.ipynb", "binder/postBuild", "binder/requirements.txt"]}, {"commit_id": "9bd3645f8d7713b91f55bf312f5fa1802cd4fc2b", "commit_date": "Sun Jan 23 16:02:04 2022 -0500", "commit_message": "Fix note format", "files_name": ["docs/install.rst"]}, {"commit_id": "78fcf9df354bceed219ef80bd3814b28b7867306", "commit_date": "Thu Jan 27 13:56:14 2022 +0200", "commit_message": "Merge pull request #250 from brian-rose/patch-1", "files_name": ["442b6cd0d1efffc1c8fab7b888c18ff4ef64da22 - Sun Jan 30 00:13:24 2022 +0100 : Merge pull request #249 from consideRatio/pr/remove-binder-folder", "0e00333441253083ad0dcef25df567b41cfb2d9d - Tue Mar 15 15:06:23 2022 -0700 : Use our own jinja2 template loader", "nbgitpuller/handlers.py", "nbgitpuller/templates/page.html"]}, {"commit_id": "50896eb33c9718f8412c2c0642a95ccaf99329bd", "commit_date": "Thu Mar 17 15:25:14 2022 +0100", "commit_message": "Test sync after deleting file that had a conflict", "files_name": ["tests/test_gitpuller.py"]}, {"commit_id": "04ed08f4f5cfc9056f2f7696205e94e31c5d3e53", "commit_date": "Thu Mar 17 15:26:23 2022 +0100", "commit_message": "Test sync after deleting file locally and remotely", "files_name": ["tests/test_gitpuller.py"]}, {"commit_id": "72d0c00b7b83166e37407e2d6fd917a1d9e538f1", "commit_date": "Thu Mar 17 15:28:09 2022 +0100", "commit_message": "Test that merge works after making a manual commit", "files_name": ["tests/test_gitpuller.py"]}], "parents": [{"commit_id_before": "2cad6147f1769a962f8d0733045967663add53cb", "url_before": "https://api.github.com/repos/jupyterhub/nbgitpuller/commits/2cad6147f1769a962f8d0733045967663add53cb", "html_url_before": "https://github.com/jupyterhub/nbgitpuller/commit/2cad6147f1769a962f8d0733045967663add53cb"}, {"commit_id_before": "f25d3f2685035c11bd668d48e71caf4fc245ba68", "url_before": "https://api.github.com/repos/jupyterhub/nbgitpuller/commits/f25d3f2685035c11bd668d48e71caf4fc245ba68", "html_url_before": "https://github.com/jupyterhub/nbgitpuller/commit/f25d3f2685035c11bd668d48e71caf4fc245ba68"}], "details": [{"raw_url": "https://github.com/jupyterhub/nbgitpuller/raw/07690644f29a566011dd0d7ba14cae3eb0490481/nbgitpuller%2Fpull.py", "code": "import os\nimport subprocess\nimport logging\nimport time\nimport argparse\nimport datetime\nfrom traitlets import Integer, default\nfrom traitlets.config import Configurable\nfrom functools import partial\n\n\ndef execute_cmd(cmd, **kwargs):\n    \"\"\"\n    Call given command, yielding output line by line\n    \"\"\"\n    yield '$ {}\\n'.format(' '.join(cmd))\n    kwargs['stdout'] = subprocess.PIPE\n    kwargs['stderr'] = subprocess.STDOUT\n\n    proc = subprocess.Popen(cmd, **kwargs)\n\n    # Capture output for logging.\n    # Each line will be yielded as text.\n    # This should behave the same as .readline(), but splits on `\\r` OR `\\n`,\n    # not just `\\n`.\n    buf = []\n\n    def flush():\n        line = b''.join(buf).decode('utf8', 'replace')\n        buf[:] = []\n        return line\n\n    c_last = ''\n    try:\n        for c in iter(partial(proc.stdout.read, 1), b''):\n            if c_last == b'\\r' and buf and c != b'\\n':\n                yield flush()\n            buf.append(c)\n            if c == b'\\n':\n                yield flush()\n            c_last = c\n    finally:\n        ret = proc.wait()\n        if ret != 0:\n            raise subprocess.CalledProcessError(ret, cmd)\n\n\nclass GitPuller(Configurable):\n    depth = Integer(\n        config=True,\n        help=\"\"\"\n        Depth (ie, commit count) of clone operations. Set this to 0 to make a\n        full depth clone.\n\n        Defaults to the value of the environment variable NBGITPULLER_DEPTH, or\n        1 if the the environment variable isn't set.\n        \"\"\"\n    )\n\n    @default('depth')\n    def _depth_default(self):\n        \"\"\"This is a workaround for setting the same default directly in the\n        definition of the traitlet above. Without it, the test fails because a\n        change in the environment variable has no impact. I think this is a\n        consequence of the tests not starting with a totally clean environment\n        where the GitPuller class hadn't been loaded already.\"\"\"\n        return int(os.environ.get('NBGITPULLER_DEPTH', 1))\n\n    def __init__(self, git_url, repo_dir, **kwargs):\n        assert git_url\n\n        self.git_url = git_url\n        self.branch_name = kwargs.pop(\"branch\")\n\n        if self.branch_name is None:\n            self.branch_name = self.resolve_default_branch()\n        elif not self.branch_exists(self.branch_name):\n            raise ValueError(f\"Branch: {self.branch_name} -- not found in repo: {self.git_url}\")\n\n        self.repo_dir = repo_dir\n        newargs = {k: v for k, v in kwargs.items() if v is not None}\n        super(GitPuller, self).__init__(**newargs)\n\n    def branch_exists(self, branch):\n        \"\"\"\n        This checks to make sure the branch we are told to access\n        exists in the repo\n        \"\"\"\n        try:\n            heads = subprocess.run(\n                [\"git\", \"ls-remote\", \"--heads\", \"--\", self.git_url],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            tags = subprocess.run(\n                [\"git\", \"ls-remote\", \"--tags\", \"--\", self.git_url],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            lines = heads.stdout.splitlines() + tags.stdout.splitlines()\n            branches = []\n            for line in lines:\n                _, ref = line.split()\n                refs, heads, branch_name = ref.split(\"/\", 2)\n                branches.append(branch_name)\n            return branch in branches\n        except subprocess.CalledProcessError:\n            m = f\"Problem accessing list of branches and/or tags: {self.git_url}\"\n            logging.exception(m)\n            raise ValueError(m)\n\n    def resolve_default_branch(self):\n        \"\"\"\n        This will resolve the default branch of the repo in\n        the case where the branch given does not exist\n        \"\"\"\n        try:\n            head_branch = subprocess.run(\n                [\"git\", \"ls-remote\", \"--symref\", \"--\", self.git_url, \"HEAD\"],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            for line in head_branch.stdout.splitlines():\n                if line.startswith(\"ref:\"):\n                    # line resembles --> ref: refs/heads/main HEAD\n                    _, ref, head = line.split()\n                    refs, heads, branch_name = ref.split(\"/\", 2)\n                    return branch_name\n            raise ValueError(f\"default branch not found in {self.git_url}\")\n        except subprocess.CalledProcessError:\n            m = f\"Problem accessing HEAD branch: {self.git_url}\"\n            logging.exception(m)\n            raise ValueError(m)\n\n    def pull(self):\n        \"\"\"\n        Pull selected repo from a remote git repository,\n        while preserving user changes\n        \"\"\"\n        if not os.path.exists(self.repo_dir):\n            yield from self.initialize_repo()\n        else:\n            yield from self.update()\n\n    def initialize_repo(self):\n        \"\"\"\n        Clones repository\n        \"\"\"\n        logging.info('Repo {} doesn\\'t exist. Cloning...'.format(self.repo_dir))\n        clone_args = ['git', 'clone']\n        if self.depth and self.depth > 0:\n            clone_args.extend(['--depth', str(self.depth)])\n        clone_args.extend(['--branch', self.branch_name])\n        clone_args.extend([\"--\", self.git_url, self.repo_dir])\n        yield from execute_cmd(clone_args)\n        logging.info('Repo {} initialized'.format(self.repo_dir))\n\n    def reset_deleted_files(self):\n        \"\"\"\n        Runs the equivalent of git checkout -- <file> for each file that was\n        deleted. This allows us to delete a file, hit an interact link, then get a\n        clean version of the file again.\n        \"\"\"\n\n        yield from self.ensure_lock()\n        deleted_files = subprocess.check_output([\n            'git', 'ls-files', '--deleted', '-z'\n        ], cwd=self.repo_dir).decode().strip().split('\\0')\n\n        for filename in deleted_files:\n            if filename:  # Filter out empty lines\n                yield from execute_cmd(['git', 'checkout', 'origin/{}'.format(self.branch_name), '--', filename], cwd=self.repo_dir)\n\n    def repo_is_dirty(self):\n        \"\"\"\n        Return true if repo is dirty\n        \"\"\"\n        try:\n            subprocess.check_call(['git', 'diff-files', '--quiet'], cwd=self.repo_dir)\n            # Return code is 0\n            return False\n        except subprocess.CalledProcessError:\n            return True\n\n    def update_remotes(self):\n        \"\"\"\n        Do a git fetch so our remotes are up to date\n        \"\"\"\n        yield from execute_cmd(['git', 'fetch'], cwd=self.repo_dir)\n\n    def find_upstream_changed(self, kind):\n        \"\"\"\n        Return list of files that have been changed upstream belonging to a particular kind of change\n        \"\"\"\n        output = subprocess.check_output([\n            'git', 'log', '..origin/{}'.format(self.branch_name),\n            '--oneline', '--name-status'\n        ], cwd=self.repo_dir).decode()\n        files = []\n        for line in output.split('\\n'):\n            if line.startswith(kind):\n                files.append(os.path.join(self.repo_dir, line.split('\\t', 1)[1]))\n\n        return files\n\n    def ensure_lock(self):\n        \"\"\"\n        Make sure we have the .git/lock required to do modifications on the repo\n\n        This must be called before any git commands that modify state. This isn't guaranteed\n        to be atomic, due to the nature of using files for locking. But it's the best we\n        can do right now.\n        \"\"\"\n        try:\n            lockpath = os.path.join(self.repo_dir, '.git', 'index.lock')\n            mtime = os.path.getmtime(lockpath)\n            # A lock file does exist\n            # If it's older than 10 minutes, we just assume it is stale and take over\n            # If not, we fail with an explicit error.\n            if time.time() - mtime > 600:\n                yield \"Stale .git/index.lock found, attempting to remove\"\n                os.remove(lockpath)\n                yield \"Stale .git/index.lock removed\"\n            else:\n                raise Exception('Recent .git/index.lock found, operation can not proceed. Try again in a few minutes.')\n        except FileNotFoundError:\n            # No lock is held by other processes, we are free to go\n            return\n\n    def rename_local_untracked(self):\n        \"\"\"\n        Rename local untracked files that would require pulls\n        \"\"\"\n        # Find what files have been added!\n        new_upstream_files = self.find_upstream_changed('A')\n        for f in new_upstream_files:\n            if os.path.exists(f):\n                # If there's a file extension, put the timestamp before that\n                ts = datetime.datetime.now().strftime('__%Y%m%d%H%M%S')\n                path_head, path_tail = os.path.split(f)\n                path_tail = ts.join(os.path.splitext(path_tail))\n                new_file_name = os.path.join(path_head, path_tail)\n                os.rename(f, new_file_name)\n                yield 'Renamed {} to {} to avoid conflict with upstream'.format(f, new_file_name)\n\n    def update(self):\n        \"\"\"\n        Do the pulling if necessary\n        \"\"\"\n        # Fetch remotes, so we know we're dealing with latest remote\n        yield from self.update_remotes()\n\n        # Rename local untracked files that might be overwritten by pull\n        yield from self.rename_local_untracked()\n\n        # Reset local files that have been deleted. We don't actually expect users to\n        # delete something that's present upstream and expect to keep it. This prevents\n        # unnecessary conflicts, and also allows users to click the link again to get\n        # a fresh copy of a file they might have screwed up.\n        yield from self.reset_deleted_files()\n\n        # If there are local changes, make a commit so we can do merges when pulling\n        # We also allow empty commits. On NFS (at least), sometimes repo_is_dirty returns a false\n        # positive, returning True even when there are no local changes (git diff-files seems to return\n        # bogus output?). While ideally that would not happen, allowing empty commits keeps us\n        # resilient to that issue.\n        # We explicitly set user info of the commits we are making, to keep that separate from\n        # whatever author info is set in system / repo config by the user. We pass '-c' to git\n        # itself (rather than to 'git commit') to temporarily set config variables. This is\n        # better than passing --author, since git treats author separately from committer.\n        if self.repo_is_dirty():\n            yield from self.ensure_lock()\n            yield from execute_cmd([\n                'git',\n                '-c', 'user.email=nbgitpuller@nbgitpuller.link',\n                '-c', 'user.name=nbgitpuller',\n                'commit',\n                '-am', 'Automatic commit by nbgitpuller',\n                '--allow-empty'\n            ], cwd=self.repo_dir)\n\n        # Merge master into local!\n        yield from self.ensure_lock()\n        yield from execute_cmd([\n            'git',\n            '-c', 'user.email=nbgitpuller@nbgitpuller.link',\n            '-c', 'user.name=nbgitpuller',\n            'merge',\n            '-Xours', 'origin/{}'.format(self.branch_name)\n        ], cwd=self.repo_dir)\n\n\ndef main():\n    \"\"\"\n    Synchronizes a github repository with a local repository.\n    \"\"\"\n    logging.basicConfig(\n        format='[%(asctime)s] %(levelname)s -- %(message)s',\n        level=logging.DEBUG)\n\n    parser = argparse.ArgumentParser(description='Synchronizes a github repository with a local repository.')\n    parser.add_argument('git_url', help='Url of the repo to sync')\n    parser.add_argument('branch_name', default=None, help='Branch of repo to sync', nargs='?')\n    parser.add_argument('repo_dir', default='.', help='Path to clone repo under', nargs='?')\n    args = parser.parse_args()\n\n    for line in GitPuller(\n        args.git_url,\n        args.repo_dir,\n        branch=args.branch_name if args.branch_name else None\n    ).pull():\n        print(line)\n\n\nif __name__ == '__main__':\n    main()\n", "code_before": "import os\nimport subprocess\nimport logging\nimport time\nimport argparse\nimport datetime\nfrom traitlets import Integer, default\nfrom traitlets.config import Configurable\nfrom functools import partial\n\n\ndef execute_cmd(cmd, **kwargs):\n    \"\"\"\n    Call given command, yielding output line by line\n    \"\"\"\n    yield '$ {}\\n'.format(' '.join(cmd))\n    kwargs['stdout'] = subprocess.PIPE\n    kwargs['stderr'] = subprocess.STDOUT\n\n    proc = subprocess.Popen(cmd, **kwargs)\n\n    # Capture output for logging.\n    # Each line will be yielded as text.\n    # This should behave the same as .readline(), but splits on `\\r` OR `\\n`,\n    # not just `\\n`.\n    buf = []\n\n    def flush():\n        line = b''.join(buf).decode('utf8', 'replace')\n        buf[:] = []\n        return line\n\n    c_last = ''\n    try:\n        for c in iter(partial(proc.stdout.read, 1), b''):\n            if c_last == b'\\r' and buf and c != b'\\n':\n                yield flush()\n            buf.append(c)\n            if c == b'\\n':\n                yield flush()\n            c_last = c\n    finally:\n        ret = proc.wait()\n        if ret != 0:\n            raise subprocess.CalledProcessError(ret, cmd)\n\n\nclass GitPuller(Configurable):\n    depth = Integer(\n        config=True,\n        help=\"\"\"\n        Depth (ie, commit count) of clone operations. Set this to 0 to make a\n        full depth clone.\n\n        Defaults to the value of the environment variable NBGITPULLER_DEPTH, or\n        1 if the the environment variable isn't set.\n        \"\"\"\n    )\n\n    @default('depth')\n    def _depth_default(self):\n        \"\"\"This is a workaround for setting the same default directly in the\n        definition of the traitlet above. Without it, the test fails because a\n        change in the environment variable has no impact. I think this is a\n        consequence of the tests not starting with a totally clean environment\n        where the GitPuller class hadn't been loaded already.\"\"\"\n        return int(os.environ.get('NBGITPULLER_DEPTH', 1))\n\n    def __init__(self, git_url, repo_dir, **kwargs):\n        assert git_url\n\n        self.git_url = git_url\n        self.branch_name = kwargs.pop(\"branch\")\n\n        if self.branch_name is None:\n            self.branch_name = self.resolve_default_branch()\n        elif not self.branch_exists(self.branch_name):\n            raise ValueError(f\"Branch: {self.branch_name} -- not found in repo: {self.git_url}\")\n\n        self.repo_dir = repo_dir\n        newargs = {k: v for k, v in kwargs.items() if v is not None}\n        super(GitPuller, self).__init__(**newargs)\n\n    def branch_exists(self, branch):\n        \"\"\"\n        This checks to make sure the branch we are told to access\n        exists in the repo\n        \"\"\"\n        try:\n            heads = subprocess.run(\n                [\"git\", \"ls-remote\", \"--heads\", \"--\", self.git_url],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            tags = subprocess.run(\n                [\"git\", \"ls-remote\", \"--tags\", \"--\", self.git_url],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            lines = heads.stdout.splitlines() + tags.stdout.splitlines()\n            branches = []\n            for line in lines:\n                _, ref = line.split()\n                refs, heads, branch_name = ref.split(\"/\", 2)\n                branches.append(branch_name)\n            return branch in branches\n        except subprocess.CalledProcessError:\n            m = f\"Problem accessing list of branches and/or tags: {self.git_url}\"\n            logging.exception(m)\n            raise ValueError(m)\n\n    def resolve_default_branch(self):\n        \"\"\"\n        This will resolve the default branch of the repo in\n        the case where the branch given does not exist\n        \"\"\"\n        try:\n            head_branch = subprocess.run(\n                [\"git\", \"ls-remote\", \"--symref\", \"--\", self.git_url, \"HEAD\"],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            for line in head_branch.stdout.splitlines():\n                if line.startswith(\"ref:\"):\n                    # line resembles --> ref: refs/heads/main HEAD\n                    _, ref, head = line.split()\n                    refs, heads, branch_name = ref.split(\"/\", 2)\n                    return branch_name\n            raise ValueError(f\"default branch not found in {self.git_url}\")\n        except subprocess.CalledProcessError:\n            m = f\"Problem accessing HEAD branch: {self.git_url}\"\n            logging.exception(m)\n            raise ValueError(m)\n\n    def pull(self):\n        \"\"\"\n        Pull selected repo from a remote git repository,\n        while preserving user changes\n        \"\"\"\n        if not os.path.exists(self.repo_dir):\n            yield from self.initialize_repo()\n        else:\n            yield from self.update()\n\n    def initialize_repo(self):\n        \"\"\"\n        Clones repository\n        \"\"\"\n        logging.info('Repo {} doesn\\'t exist. Cloning...'.format(self.repo_dir))\n        clone_args = ['git', 'clone']\n        if self.depth and self.depth > 0:\n            clone_args.extend(['--depth', str(self.depth)])\n        clone_args.extend(['--branch', self.branch_name])\n        clone_args.extend([\"--\", self.git_url, self.repo_dir])\n        yield from execute_cmd(clone_args)\n        logging.info('Repo {} initialized'.format(self.repo_dir))\n\n    def reset_deleted_files(self):\n        \"\"\"\n        Runs the equivalent of git checkout -- <file> for each file that was\n        deleted. This allows us to delete a file, hit an interact link, then get a\n        clean version of the file again.\n        \"\"\"\n\n        yield from self.ensure_lock()\n        deleted_files = subprocess.check_output([\n            'git', 'ls-files', '--deleted', '-z'\n        ], cwd=self.repo_dir).decode().strip().split('\\0')\n\n        for filename in deleted_files:\n            if filename:  # Filter out empty lines\n                yield from execute_cmd(['git', 'checkout', 'origin/{}'.format(self.branch_name), '--', filename], cwd=self.repo_dir)\n\n    def repo_is_dirty(self):\n        \"\"\"\n        Return true if repo is dirty\n        \"\"\"\n        try:\n            subprocess.check_call(['git', 'diff-files', '--quiet'], cwd=self.repo_dir)\n            # Return code is 0\n            return False\n        except subprocess.CalledProcessError:\n            return True\n\n    def update_remotes(self):\n        \"\"\"\n        Do a git fetch so our remotes are up to date\n        \"\"\"\n        yield from execute_cmd(['git', 'fetch'], cwd=self.repo_dir)\n\n    def find_upstream_changed(self, kind):\n        \"\"\"\n        Return list of files that have been changed upstream belonging to a particular kind of change\n        \"\"\"\n        output = subprocess.check_output([\n            'git', 'log', '..origin/{}'.format(self.branch_name),\n            '--oneline', '--name-status'\n        ], cwd=self.repo_dir).decode()\n        files = []\n        for line in output.split('\\n'):\n            if line.startswith(kind):\n                files.append(os.path.join(self.repo_dir, line.split('\\t', 1)[1]))\n\n        return files\n\n    def ensure_lock(self):\n        \"\"\"\n        Make sure we have the .git/lock required to do modifications on the repo\n\n        This must be called before any git commands that modify state. This isn't guaranteed\n        to be atomic, due to the nature of using files for locking. But it's the best we\n        can do right now.\n        \"\"\"\n        try:\n            lockpath = os.path.join(self.repo_dir, '.git', 'index.lock')\n            mtime = os.path.getmtime(lockpath)\n            # A lock file does exist\n            # If it's older than 10 minutes, we just assume it is stale and take over\n            # If not, we fail with an explicit error.\n            if time.time() - mtime > 600:\n                yield \"Stale .git/index.lock found, attempting to remove\"\n                os.remove(lockpath)\n                yield \"Stale .git/index.lock removed\"\n            else:\n                raise Exception('Recent .git/index.lock found, operation can not proceed. Try again in a few minutes.')\n        except FileNotFoundError:\n            # No lock is held by other processes, we are free to go\n            return\n\n    def rename_local_untracked(self):\n        \"\"\"\n        Rename local untracked files that would require pulls\n        \"\"\"\n        # Find what files have been added!\n        new_upstream_files = self.find_upstream_changed('A')\n        for f in new_upstream_files:\n            if os.path.exists(f):\n                # If there's a file extension, put the timestamp before that\n                ts = datetime.datetime.now().strftime('__%Y%m%d%H%M%S')\n                path_head, path_tail = os.path.split(f)\n                path_tail = ts.join(os.path.splitext(path_tail))\n                new_file_name = os.path.join(path_head, path_tail)\n                os.rename(f, new_file_name)\n                yield 'Renamed {} to {} to avoid conflict with upstream'.format(f, new_file_name)\n\n    def update(self):\n        \"\"\"\n        Do the pulling if necessary\n        \"\"\"\n        # Fetch remotes, so we know we're dealing with latest remote\n        yield from self.update_remotes()\n\n        # Rename local untracked files that might be overwritten by pull\n        yield from self.rename_local_untracked()\n\n        # Reset local files that have been deleted. We don't actually expect users to\n        # delete something that's present upstream and expect to keep it. This prevents\n        # unnecessary conflicts, and also allows users to click the link again to get\n        # a fresh copy of a file they might have screwed up.\n        yield from self.reset_deleted_files()\n\n        # If there are local changes, make a commit so we can do merges when pulling\n        # We also allow empty commits. On NFS (at least), sometimes repo_is_dirty returns a false\n        # positive, returning True even when there are no local changes (git diff-files seems to return\n        # bogus output?). While ideally that would not happen, allowing empty commits keeps us\n        # resilient to that issue.\n        # We explicitly set user info of the commits we are making, to keep that separate from\n        # whatever author info is set in system / repo config by the user. We pass '-c' to git\n        # itself (rather than to 'git commit') to temporarily set config variables. This is\n        # better than passing --author, since git treats author separately from committer.\n        if self.repo_is_dirty():\n            yield from self.ensure_lock()\n            yield from execute_cmd([\n                'git',\n                '-c', 'user.email=nbgitpuller@nbgitpuller.link',\n                '-c', 'user.name=nbgitpuller',\n                'commit',\n                '-am', 'Automatic commit by nbgitpuller',\n                '--allow-empty'\n            ], cwd=self.repo_dir)\n\n        # Merge master into local!\n        yield from self.ensure_lock()\n        yield from execute_cmd([\n            'git',\n            '-c', 'user.email=nbgitpuller@nbgitpuller.link',\n            '-c', 'user.name=nbgitpuller',\n            'merge',\n            '-Xours', 'origin/{}'.format(self.branch_name)\n        ], cwd=self.repo_dir)\n\n\ndef main():\n    \"\"\"\n    Synchronizes a github repository with a local repository.\n    \"\"\"\n    logging.basicConfig(\n        format='[%(asctime)s] %(levelname)s -- %(message)s',\n        level=logging.DEBUG)\n\n    parser = argparse.ArgumentParser(description='Synchronizes a github repository with a local repository.')\n    parser.add_argument('git_url', help='Url of the repo to sync')\n    parser.add_argument('branch_name', default=None, help='Branch of repo to sync', nargs='?')\n    parser.add_argument('repo_dir', default='.', help='Path to clone repo under', nargs='?')\n    args = parser.parse_args()\n\n    for line in GitPuller(\n        args.git_url,\n        args.repo_dir,\n        branch=args.branch_name if args.branch_name else None\n    ).pull():\n        print(line)\n\n\nif __name__ == '__main__':\n    main()\n", "patch": "@@ -88,13 +88,13 @@ def branch_exists(self, branch):\n         \"\"\"\n         try:\n             heads = subprocess.run(\n-                [\"git\", \"ls-remote\", \"--heads\", self.git_url],\n+                [\"git\", \"ls-remote\", \"--heads\", \"--\", self.git_url],\n                 capture_output=True,\n                 text=True,\n                 check=True\n             )\n             tags = subprocess.run(\n-                [\"git\", \"ls-remote\", \"--tags\", self.git_url],\n+                [\"git\", \"ls-remote\", \"--tags\", \"--\", self.git_url],\n                 capture_output=True,\n                 text=True,\n                 check=True\n@@ -118,7 +118,7 @@ def resolve_default_branch(self):\n         \"\"\"\n         try:\n             head_branch = subprocess.run(\n-                [\"git\", \"ls-remote\", \"--symref\", self.git_url, \"HEAD\"],\n+                [\"git\", \"ls-remote\", \"--symref\", \"--\", self.git_url, \"HEAD\"],\n                 capture_output=True,\n                 text=True,\n                 check=True\n@@ -154,7 +154,7 @@ def initialize_repo(self):\n         if self.depth and self.depth > 0:\n             clone_args.extend(['--depth', str(self.depth)])\n         clone_args.extend(['--branch', self.branch_name])\n-        clone_args.extend([self.git_url, self.repo_dir])\n+        clone_args.extend([\"--\", self.git_url, self.repo_dir])\n         yield from execute_cmd(clone_args)\n         logging.info('Repo {} initialized'.format(self.repo_dir))\n ", "file_path": "files/2021_8/247", "file_language": "py", "file_name": "nbgitpuller/pull.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
