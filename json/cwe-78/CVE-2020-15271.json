{"index": 5012, "cve_id": "CVE-2020-15271", "cwe_id": ["CWE-78"], "cve_language": "Python", "cve_description": "In lookatme (python/pypi package) versions prior to 2.3.0, the package automatically loaded the built-in \"terminal\" and \"file_loader\" extensions. Users that use lookatme to render untrusted markdown may have malicious shell commands automatically run on their system. This is fixed in version 2.3.0. As a workaround, the `lookatme/contrib/terminal.py` and `lookatme/contrib/file_loader.py` files may be manually deleted. Additionally, it is always recommended to be aware of what is being rendered with lookatme.", "cvss": "8.8", "publish_date": "October 26, 2020", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "72fe36b784b234548d49dae60b840c37f0eb8d84", "commit_message": "Merge pull request #110 from d0c-s4vage/feature/109-extension_warnings\n\nAdds warnings about loading extensions", "commit_date": "2020-10-23T05:28:53Z", "project": "d0c-s4vage/lookatme", "url": "https://api.github.com/repos/d0c-s4vage/lookatme/commits/72fe36b784b234548d49dae60b840c37f0eb8d84", "html_url": "https://github.com/d0c-s4vage/lookatme/commit/72fe36b784b234548d49dae60b840c37f0eb8d84", "windows_before": [{"commit_id": "e8253bba80f556f516ad386d864d33bfd36d9416", "commit_date": "Thu Oct 22 21:42:24 2020 -0700", "commit_message": "Added warnings and more robust extension handling", "files_name": ["README.md", "docs/source/getting_started.rst", "examples/calendar_contrib/lookatme/contrib/calendar.py", "examples/tour.md", "lookatme/__main__.py", "lookatme/ascii_art.py", "lookatme/contrib/__init__.py", "lookatme/contrib/file_loader.py", "lookatme/contrib/terminal.py", "lookatme/pres.py", "lookatme/prompt.py"]}, {"commit_id": "f5d5f8b907ec37e54d49dcc69b35fc009e1760d3", "commit_date": "Thu Oct 22 07:47:26 2020 -0700", "commit_message": "Updates travis-ci yml", "files_name": [".travis.yml"]}, {"commit_id": "94f1455df15e180d1ad6c9bc7eec3d303eb5de2f", "commit_date": "Thu Oct 22 07:16:31 2020 -0700", "commit_message": "Merge branch 'master' of github.com:d0c-s4vage/lookatme", "files_name": ["655a755d2e922f361baa195846dd73fb32b8744c - Thu Oct 22 07:16:25 2020 -0700 : Version bump, updates documentation for -e", "CHANGELOG.md", "README.md", "docs/source/getting_started.rst"]}, {"commit_id": "6da49b5331ec96e82cc21ec6e72b11c326787357", "commit_date": "Thu Oct 22 07:13:21 2020 -0700", "commit_message": "Merge pull request #108 from d0c-s4vage/hotfix/107-remove_copyrighted_image", "files_name": ["e034c8feb82fde917f82284dd2d52545a5d63281 - Thu Oct 22 07:08:17 2020 -0700 : Updated tour gif", "docs/source/_static/lookatme_tour.gif"]}, {"commit_id": "668a90c27c27abbc274c1ab23df977eda5df3013", "commit_date": "Thu Oct 22 07:07:24 2020 -0700", "commit_message": "Removes copyrighted image", "files_name": ["examples/napoleon_dynamite.jpg", "examples/nasa_orion.jpg", "examples/tour.md"]}, {"commit_id": "b2cd753fbeb9eada2d44e3843b1e278b0199b6ed", "commit_date": "Thu Oct 15 21:07:14 2020 -0700", "commit_message": "Merge pull request #106 from d0c-s4vage/feature/103-load_ext_via_args_env", "files_name": ["82131f07c098aa01c184968be881324bfb65db2c - Thu Oct 15 21:04:20 2020 -0700 : Adds -e|--exts|LOOKATME_EXTS", "lookatme/__main__.py", "lookatme/pres.py"]}, {"commit_id": "6f748de0c5c14938d4f169f298f09b33e9f26d2f", "commit_date": "Sat Oct 10 17:48:28 2020 -0700", "commit_message": "Update known extensions", "files_name": ["README.md"]}, {"commit_id": "0871c051dd8f16ea8c046dc22e5f6ebefb23d501", "commit_date": "Fri Oct 9 21:46:07 2020 -0700", "commit_message": "Version bump to v2.1.0", "files_name": ["CHANGELOG.md"]}, {"commit_id": "851e91294c40dec45dcf6f3a8e788851533bd9af", "commit_date": "Fri Oct 9 21:31:39 2020 -0700", "commit_message": "Merge pull request #104 from d0c-s4vage/feature/95-config_padding_margins", "files_name": ["a09c1e5e9a13f55682d574151f7ec61564849de2 - Fri Oct 9 21:24:38 2020 -0700 : Updates documentation, adds new tour gif", "docs/source/_static/lookatme_tour.gif", "docs/source/style_precendence.rst", "examples/napoleon_dynamite.jpg", "examples/tour.md", "lookatme/schemas.py", "lookatme/tui.py"]}, {"commit_id": "1a606ace76121704b60c59a46ad06c82d0c5f6e8", "commit_date": "Fri Oct 9 10:14:13 2020 -0700", "commit_message": "Slide margin/padding is now configurable", "files_name": ["lookatme/schemas.py", "lookatme/tui.py"]}, {"commit_id": "f87364d9efcf584d6a464977366af99e9ba77a2f", "commit_date": "Fri Oct 9 06:49:43 2020 -0700", "commit_message": "Add image_ueberzug to extension list", "files_name": ["README.md"]}, {"commit_id": "84975d24251b778a8d2d7a25b7a6304bb3fe6d6d", "commit_date": "Thu Oct 8 22:03:22 2020 -0700", "commit_message": "Version bump to v2.0.0", "files_name": ["CHANGELOG.md"]}, {"commit_id": "736a48bd431d7a873ec5fce610d2f84db0d5a83d", "commit_date": "Thu Oct 8 22:00:05 2020 -0700", "commit_message": "Merge pull request #102 from d0c-s4vage/feature/101-allow_inline_render_fns_widget", "files_name": ["84c5c58d9af682ab7c138435aafbb2228b552c0f - Thu Oct 8 21:58:18 2020 -0700 : Fixes tests", "lookatme/render/markdown_block.py", "lookatme/widgets/table.py"]}, {"commit_id": "7ff347b9c60ce95e409cc864f6d449831a2bdefc", "commit_date": "Sun Sep 27 14:06:35 2020 -0700", "commit_message": "Tests are failing, but images are rendering", "files_name": ["lookatme/render/markdown_block.py", "lookatme/widgets/table.py"]}, {"commit_id": "9258bfe731467a240fc8ab53f5a8c93c5db48229", "commit_date": "Wed Sep 23 06:55:01 2020 -0700", "commit_message": "Merge branch 'master' into feature/101-allow_inline_render_fns_widget", "files_name": ["a21289cf657b154e1d1db6313c893fe527ef1815 - Wed Sep 23 06:51:46 2020 -0700 : Forgot to include the new test in the feature/99 branch", "tests/test_contrib.py"]}, {"commit_id": "99d4d413713b367bb8928988a9bda0c0a6d15c39", "commit_date": "Wed Sep 23 06:40:37 2020 -0700", "commit_message": "Starts work of allowing inline render functions to return widgets", "files_name": ["lookatme/render/markdown_block.py", "lookatme/utils.py"]}, {"commit_id": "0c2557f8b1b6edbac2c45648493c88c32cb9aa41", "commit_date": "Wed Sep 23 06:38:45 2020 -0700", "commit_message": "Merge pull request #100 from d0c-s4vage/feature/99-overrideable_root_widget", "files_name": ["a8584582887ee8bad711d9b9fc4a750d81b25b90 - Wed Sep 23 06:33:07 2020 -0700 : Fixes small tox error", "tox.ini"]}, {"commit_id": "aff5b73aa3f03e1624239cbefcf56ddd6c43f869", "commit_date": "Wed Sep 23 06:02:01 2020 -0700", "commit_message": "Root urwid widget is now overridable by extensions", "files_name": ["docs/source/conf.py", "lookatme/tui.py"]}, {"commit_id": "ce0e9b7edd16921fe9870e8a54ff560edcf8a5cc", "commit_date": "Tue Sep 22 06:35:29 2020 -0700", "commit_message": "Added changelog entry for v1.3.0", "files_name": ["CHANGELOG.md"]}, {"commit_id": "ee20faf79703293b135c62ff831c6159c1fc1240", "commit_date": "Tue Sep 22 06:30:51 2020 -0700", "commit_message": "Merge pull request #98 from d0c-s4vage/feature/96-single_slide_option", "files_name": ["11f17f6d02de7046b75609424d3ae8a270fc9b6d - Tue Sep 22 06:26:51 2020 -0700 : Updates readme and docs with --single|--one option", "README.md", "docs/source/getting_started.rst"]}, {"commit_id": "1b5adba5a9bf05da12a0bd7ed369b731f89e8b1d", "commit_date": "Tue Sep 22 06:22:18 2020 -0700", "commit_message": "Adds --single|--one options and renders hrules", "files_name": ["docs/source/style_precendence.rst", "lookatme/__main__.py", "lookatme/parser.py", "lookatme/pres.py", "lookatme/render/markdown_block.py", "lookatme/schemas.py", "lookatme/themes/light.py", "tests/test_markdown.py", "tests/utils.py"]}, {"commit_id": "e03a694812092fdaa05d18270d63a146fff3afbf", "commit_date": "Tue Sep 22 05:07:35 2020 -0700", "commit_message": "Merge branch 'feature/29-vertically_scrollable'", "files_name": ["21f2d08d0d67b774f67ecc5276aad504b8751ab7 - Mon Sep 21 21:18:37 2020 -0700 : Update the readme with vertical scrolling instrs", "README.md"]}, {"commit_id": "cb86e6c20b39d1ff3a1e95877040cabb3c1a0c0b", "commit_date": "Mon Sep 21 21:13:40 2020 -0700", "commit_message": "Fixes tests that changed due to listbox vs pile", "files_name": ["tests/test_markdown.py"]}, {"commit_id": "70c9368dc2f504cc052f0829645a39b1ba7b4203", "commit_date": "Mon Sep 21 21:10:17 2020 -0700", "commit_message": "Removes up/down as slide advancement so that scrolling works", "files_name": ["lookatme/tui.py"]}, {"commit_id": "631db2f7b7107de1dc20acd55fb2baef7f5968ad", "commit_date": "Mon Sep 21 20:52:42 2020 -0700", "commit_message": "Merge branch 'master' into feature/29-vertically_scrollable", "files_name": ["9634c3382cd036cfbbfff3c6b7b2ce709a62fde0 - Sat Sep 19 09:05:49 2020 -0700 : Changelog update", "CHANGELOG.md"]}, {"commit_id": "c1feeaa336280d9ec99a16b3dcfac7b8e9621c4a", "commit_date": "Sat Sep 19 09:04:03 2020 -0700", "commit_message": "Merge pull request #94 from d0c-s4vage/93-numbered_list_support", "files_name": ["83c64f4bbbfb0eb65707fb412d23b59281c918bf - Sat Sep 19 09:02:39 2020 -0700 : Updated tour gif", "docs/source/_static/lookatme_tour.gif", "examples/tour.md"]}, {"commit_id": "62a40355cb0f109dafb279be1715410a04455f1f", "commit_date": "Sat Sep 19 08:07:42 2020 -0700", "commit_message": "Tests are passing now", "files_name": ["tests/test_markdown.py"]}, {"commit_id": "bfaf467b7e659ab85f6a593af87ae5566a2a8c04", "commit_date": "Sat Sep 19 08:01:04 2020 -0700", "commit_message": "Reworked lists - alignment is fixed now with variable markers", "files_name": ["docs/source/style_precendence.rst", "examples/tour.md", "lookatme/render/markdown_block.py", "lookatme/tui.py", "tests/test_markdown.py"]}, {"commit_id": "a1a2e5435575a75a5a90894ae30749c82ed820b8", "commit_date": "Sat Sep 19 06:25:26 2020 -0700", "commit_message": "Adds numbered list handling", "files_name": ["lookatme/render/markdown_block.py", "lookatme/schemas.py", "lookatme/utils.py", "tests/test_markdown.py"]}, {"commit_id": "bc24f71ce221257c8552a513263ec2b45a6b2275", "commit_date": "Fri Feb 28 10:56:18 2020 -0800", "commit_message": "Merge branch 'master' into feature/29-vertically_scrollable", "files_name": ["28d157d82d723c79448102c0b1df27c098716a97 - Fri Feb 28 10:54:29 2020 -0800 : Forgot to include CHANGELOG.md changes", "CHANGELOG.md"]}, {"commit_id": "9e0039e193e4ff5c90f58c40a557fe709f86e199", "commit_date": "Fri Feb 28 10:50:39 2020 -0800", "commit_message": "Merge pull request #87 from d0c-s4vage/feature/86-terminal_ex", "files_name": ["93d10e1dc14448500f5b7d93bce0086859b88531 - Fri Feb 28 10:48:13 2020 -0800 : Added  mode", "docs/source/builtin_extensions/terminal.rst", "lookatme/contrib/terminal.py", "lookatme/pres.py", "lookatme/render/markdown_block.py", "lookatme/utils.py"]}, {"commit_id": "3269143134abfa6031c585a0c4d89cced0c1245a", "commit_date": "Sun Dec 29 07:45:56 2019 -0800", "commit_message": "Made tests pass again - only works if using the new changes in urwid/urwid#382", "files_name": ["15fe94c15d926a37cf229564445f0e2f55df616e - Sun Dec 29 07:12:38 2019 -0800 : Merge branch 'master' into develop", "5a17c4052c4013351c5654873b1ca6ad2e18315b - Fri Dec 27 12:23:10 2019 -0800 : Added fix to changelog for v1.1.1", "CHANGELOG.md"]}, {"commit_id": "c44d6c460b7bab017d69eee26efb02d9051c17f7", "commit_date": "Fri Dec 27 12:21:12 2019 -0800", "commit_message": "Merge pull request #85 from d0c-s4vage/hotfix/84-keypresses_incorrect", "files_name": ["8c01fc23b3b8946bc98a2443ceb8b84ff5227e5f - Thu Dec 26 20:42:27 2019 -0800 : Fix keypress issue", "lookatme/tui.py"]}, {"commit_id": "cd95229a75676d5f3a8b19601dc0ea1d7790cc98", "commit_date": "Thu Dec 19 19:32:31 2019 -0800", "commit_message": "final update before presentation", "files_name": ["presentations/san_diego_python_meetup/2019-12-20.md", "presentations/san_diego_python_meetup/source/minimal_flask.py"]}, {"commit_id": "2fa5c275083e9007a8b77bc48b5ef53b8d559026", "commit_date": "Thu Dec 19 19:03:49 2019 -0800", "commit_message": "Updated slides", "files_name": ["presentations/san_diego_python_meetup/2019-12-20.md", "presentations/san_diego_python_meetup/examples/lookatme_qrcode.md", "presentations/san_diego_python_meetup/source/minimal_flask.py"]}, {"commit_id": "fbcd10bb474e0a0c76897bee979502b24ec06138", "commit_date": "Thu Dec 19 00:25:31 2019 -0800", "commit_message": "Added presentation for tomorrow", "files_name": [".gitignore", "presentations/san_diego_python_meetup/2019-12-20.md", "presentations/san_diego_python_meetup/examples/mdp.md", "presentations/san_diego_python_meetup/examples/patat.md", "presentations/san_diego_python_meetup/source/minimal_flask.py"]}, {"commit_id": "80fea0e948f2d9f6e0f63338659ec19191b4995e", "commit_date": "Wed Dec 18 23:30:44 2019 -0800", "commit_message": "Updated changelog for v1.1.0", "files_name": ["CHANGELOG.md"]}, {"commit_id": "b30a7ff76853933b109f4a478b8c22713e49ed84", "commit_date": "Wed Dec 18 23:28:23 2019 -0800", "commit_message": "Merge pull request #83 from d0c-s4vage/develop", "files_name": ["1438faff4daf391a370e235b79a6170bdde06792 - Wed Dec 18 23:24:08 2019 -0800 : Merge pull request #82 from d0c-s4vage/feature/81-file_code_block", "91baf39f9a7eb9a3f7f3a1fc9533ef06bf474c34 - Wed Dec 18 23:21:05 2019 -0800 : Added file loader examples, updated documentation and README", "README.md", "docs/source/_static/ext_file_loader_example.gif", "docs/source/_static/ext_terminal_example.gif", "docs/source/builtin_extensions/file_loader.rst", "docs/source/builtin_extensions/index.rst", "docs/source/builtin_extensions/terminal.rst", "docs/source/contrib_extensions.rst", "docs/source/index.rst", "docs/source/smart_splitting.rst", "examples/file_loader_ext/1x1.png", "examples/file_loader_ext/example.md"]}], "windows_after": [{"commit_id": "0eb09ae681b74e7ecd11c41b58339db4433a796b", "commit_date": "Sat May 22 20:48:02 2021 -0700", "commit_message": "Makes lookatme compatible with the latest marshmallow version", "files_name": ["lookatme/contrib/file_loader.py", "lookatme/schemas.py", "requirements.txt", "tox.ini"]}, {"commit_id": "d42128bea1e37351b30a1c679c3ab23ca8657cf7", "commit_date": "Sat May 22 20:53:23 2021 -0700", "commit_message": "Merge pull request #116 from d0c-s4vage/114-make_compatible_with_latest_marshmallow", "files_name": ["ca69ad9f2207318312562b0824dc15aa741a8471 - Sat May 22 20:59:43 2021 -0700 : Version bump in the changelog", "CHANGELOG.md"]}, {"commit_id": "c50407e70ef18e63c870ca5b269476e709c1e85e", "commit_date": "Sat May 22 22:48:18 2021 -0700", "commit_message": "Fixes default style generation", "files_name": ["lookatme/contrib/file_loader.py", "lookatme/schemas.py", "lookatme/themes/__init__.py", "tests/test_schemas.py"]}, {"commit_id": "eb65cf90cb3e417ada93684c954733716adc1de1", "commit_date": "Sat May 22 22:53:06 2021 -0700", "commit_message": "Merge pull request #118 from d0c-s4vage/117-fix_default_styles", "files_name": ["cf736bb23bed6a7c799829cabb8b3798b2937caf - Sat May 22 22:54:54 2021 -0700 : Changelog and version bump", "CHANGELOG.md"]}, {"commit_id": "0efad491e434389bf8b70cb9449a4930c801a61a", "commit_date": "Thu Jul 1 18:30:46 2021 +0200", "commit_message": "Add support for progressive slides", "files_name": ["examples/progressive.md", "lookatme/parser.py"]}, {"commit_id": "19bae232011ed6d13f3709261d13f2e62afbe0a9", "commit_date": "Thu Mar 31 20:31:48 2022 +0300", "commit_message": "Exclude tests from packages", "files_name": ["setup.py"]}, {"commit_id": "f149dbcf792230ae7501b908751bf82b0f76e5f7", "commit_date": "Sat Jun 25 11:00:38 2022 -0700", "commit_message": "(#140) click 8+ allowed by requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "507720f6ec1d47bc8914993a760d79efc124db0e", "commit_date": "Fri Jul 15 07:50:03 2022 -0700", "commit_message": "Merge pull request #141 from corydodt/patch-1", "files_name": ["5187dfa6c64ea494cb54d9d7450d81fd46688e40 - Sun Jul 17 07:27:36 2022 -0700 : See #126 - Fixes unit tests", "lookatme/contrib/file_loader.py", "lookatme/contrib/terminal.py", "lookatme/schemas.py", "requirements.test.txt", "requirements.txt", "tests/test_schemas.py", "tox.ini"]}, {"commit_id": "f50442ad4b7ccd5109f32e6ff410278d60b0b674", "commit_date": "Sun Jul 17 07:43:40 2022 -0700", "commit_message": "Merge pull request #144 from d0c-s4vage/126-fix_unit_test_failures", "files_name": ["cb57d6c74eb45071df545d64c6654d6e375f695c - Fri Jul 30 13:04:04 2021 +0200 : Resolve conflict between `-s` for `--style` and `-s` for `--safe`", "README.md", "docs/source/getting_started.rst", "lookatme/__main__.py"]}, {"commit_id": "5621b4393a5084b19fcf72943c596fa6b402c858", "commit_date": "Fri Sep 30 19:47:58 2022 -0700", "commit_message": "Merge pull request #133 from AMDmi3/patch-1", "files_name": ["018f4d882b361a2b0f91a6e52ecb00b537991b05 - Fri Sep 30 20:26:42 2022 -0700 : Merge pull request #125 from agateau/fix-s-option-conflict", "e2a6e9193cefe1f7e98657062e4d52dbb93e75a5 - Sat Oct 1 07:28:49 2022 -0700 : Apply suggestions from code review", "examples/progressive.md", "lookatme/parser.py"]}, {"commit_id": "81a869ac28b7d2a052dd99bb3a6588456e2f8c8c", "commit_date": "Sat Oct 1 07:29:15 2022 -0700", "commit_message": "Merge pull request #124 from agateau/add-support-for-progressive-slides", "files_name": ["badcde9bbf82240c7f7e7b9b550ef8972c32cef7 - Sat Oct 1 20:37:14 2022 -0700 : Testing out GitHub actions with lookatme (#150)", ".github/workflows/testing.yml", ".travis-ci.yml", ".travis.yml", "bin/_utils.sh", "bin/ci", "requirements.test.txt", "tox.ini"]}, {"commit_id": "475a749dadd210c00184b7b418f1a2b7ac8b9db3", "commit_date": "Sun Oct 2 20:52:58 2022 -0700", "commit_message": "#143 Fix issues from linting (#151)", "files_name": [".github/workflows/testing.yml", "bin/_utils.sh", "bin/ci", "lookatme/__main__.py", "lookatme/config.py", "lookatme/contrib/__init__.py", "lookatme/contrib/file_loader.py", "lookatme/contrib/terminal.py", "lookatme/exceptions.py", "lookatme/parser.py", "lookatme/pres.py", "lookatme/render/markdown_block.py", "lookatme/render/markdown_inline.py", "lookatme/render/pygments.py", "lookatme/schemas.py", "lookatme/slide.py", "lookatme/themes/__init__.py", "lookatme/themes/light.py", "lookatme/tui.py", "lookatme/utils.py", "lookatme/widgets/clickable_text.py", "lookatme/widgets/table.py", "tests/test_cli.py", "tests/test_contrib.py", "tests/test_file_loader.py", "tests/test_markdown.py", "tests/test_parse.py", "tests/test_schemas.py", "tests/test_table.py", "tests/utils.py"]}, {"commit_id": "b79262fb249b70e4f29cfea0785c27b814b52b80", "commit_date": "Mon Oct 3 06:04:15 2022 -0700", "commit_message": "Changelog and version bump", "files_name": ["CHANGELOG.md"]}, {"commit_id": "ffeda0056007a6e970741144a2d63322006277b7", "commit_date": "Mon Oct 3 19:16:13 2022 -0700", "commit_message": "Fixes date parsing error in the schema. (#153)", "files_name": ["docs/source/index.rst", "docs/source/slides.rst", "docs/source/style_precedence.rst", "lookatme/schemas.py", "tests/test_parse.py", "tests/test_schemas.py"]}, {"commit_id": "776aa6eba47a090b9551a1b5e6d5e71d246fd78a", "commit_date": "Sat Oct 15 23:15:29 2022 -0700", "commit_message": "Adds a new workflow that publishes tags to PyPI (#158)", "files_name": [".github/workflows/pypi_publish.yml"]}, {"commit_id": "637008fdd2c98536ae3029a335640228e4527d4c", "commit_date": "Sat Oct 15 23:18:08 2022 -0700", "commit_message": "test again...", "files_name": [".github/workflows/pypi_publish.yml"]}, {"commit_id": "421c9b7a0cb1e984ed89e322d9079275f57207be", "commit_date": "Sun Oct 16 09:51:49 2022 -0700", "commit_message": "Fixes style and theme issues. (#159)", "files_name": ["lookatme/parser.py", "lookatme/pres.py", "lookatme/schemas.py", "lookatme/themes/dark.py", "tests/test_cli.py"]}, {"commit_id": "564753d53c24cb08d8632a828c7302b6bafe461e", "commit_date": "Sun Oct 16 09:59:42 2022 -0700", "commit_message": "Update changelog (#160)", "files_name": ["CHANGELOG.md"]}, {"commit_id": "31274085b32b12c04731131af33a0dc14412a4ef", "commit_date": "Fri Oct 21 22:27:19 2022 -0700", "commit_message": "Updates documentation and README to include progressive slides (#171)", "files_name": ["README.md", "docs/source/getting_started.rst", "docs/source/index.rst", "examples/tour.md", "tests/test_parse.py"]}, {"commit_id": "9163dbff323aebc0501ce3ff917b560654e1616b", "commit_date": "Thu Oct 27 06:10:19 2022 -0700", "commit_message": "Adds tutorials! (#172)", "files_name": [".github/workflows/pypi_publish.yml", "README.md", "bin/fill_placeholders", "docs/source/getting_started.rst", "lookatme/__main__.py", "lookatme/config.py", "lookatme/parser.py", "lookatme/pres.py", "lookatme/render/markdown_block.py", "lookatme/render/markdown_inline.py", "lookatme/themes/__init__.py", "lookatme/tui.py", "lookatme/tutorial.py", "lookatme/utils.py", "tests/test_contrib.py", "tests/test_tutorial.py"]}, {"commit_id": "b197e9986f82cd3c49a21cbdbca78b0b70446c74", "commit_date": "Thu Oct 27 06:17:31 2022 -0700", "commit_message": "Version bump in the changelog to 2.5.0 (#173)", "files_name": ["CHANGELOG.md"]}, {"commit_id": "6c6a33cf0b34238b36ead2749e85d747b23819de", "commit_date": "Thu Oct 27 06:22:56 2022 -0700", "commit_message": "Install dependencies prior to filling placeholders", "files_name": [".github/workflows/pypi_publish.yml"]}, {"commit_id": "ce5feb4c86a02dc3e63255e2e868b0e28e0f4851", "commit_date": "Thu Oct 27 06:26:13 2022 -0700", "commit_message": "Install *actual* dependencies", "files_name": [".github/workflows/pypi_publish.yml"]}, {"commit_id": "e8f64f6b11e5e64cd3f872bef77d0f273dfd6090", "commit_date": "Thu Oct 27 06:43:46 2022 -0700", "commit_message": "Replace help placeholder first, then version", "files_name": ["bin/fill_placeholders"]}, {"commit_id": "bcc68e2fc3f4fa34b7461fc2d83a9333e80bb5f5", "commit_date": "Thu Oct 27 06:55:35 2022 -0700", "commit_message": "better placeholder replacement", "files_name": ["bin/fill_placeholders"]}, {"commit_id": "bb9d39aff2ff3bb8464c1653ecbe838cc176eb31", "commit_date": "Thu Dec 29 20:18:11 2022 -0800", "commit_message": "Adds grapevine git tagging support", "files_name": [".github/workflows/grapevine.yml", ".github/workflows/pypi_publish.yml"]}, {"commit_id": "429f82b6e7ef65ae905c8259bdc0e4150a48a076", "commit_date": "Thu Dec 29 20:20:42 2022 -0800", "commit_message": "Merge pull request #199 from d0c-s4vage/feature-198-grapevine_git_tagging", "files_name": ["7371847cc7e98d2978ab1d9bd2f6860309cd9277 - Thu Dec 29 20:23:56 2022 -0800 : v2.5.1 release with grapevine tagging", "CHANGELOG.md"]}, {"commit_id": "6ec6b30996d56c5952dc6c9fd53322a985bc3ecf", "commit_date": "Thu Dec 29 20:25:46 2022 -0800", "commit_message": "Use 2.5.5. instead", "files_name": ["CHANGELOG.md"]}, {"commit_id": "7c8693aaf943987c1758cb5fffd2b54ed2332fd2", "commit_date": "Thu Dec 29 20:36:20 2022 -0800", "commit_message": "Fix inherited secrets", "files_name": [".github/workflows/grapevine.yml"]}, {"commit_id": "61398f9f736e4b2202826a43a6001bc9f36e7759", "commit_date": "Fri Dec 30 07:50:22 2022 -0800", "commit_message": "Adds note about 3.0.0rc1", "files_name": ["README.md"]}, {"commit_id": "55154e65f526a0a740d5a13e6a497c5c1e3b4345", "commit_date": "Sun Jan 1 08:38:57 2023 -0800", "commit_message": "PR label and release automation via actions", "files_name": [".github/release.yml", ".github/workflows/grapevine.yml", ".github/workflows/new_release.yml", ".github/workflows/pull_requests.yml", ".github/workflows/pypi_publish.yml"]}, {"commit_id": "c05abe1804d93254e9139039937eed43fb6b49ab", "commit_date": "Tue Jan 24 06:24:56 2023 -0800", "commit_message": "Adds preview.yml to main so it will run on all issue comments", "files_name": [".github/workflows/preview.yml"]}], "parents": [{"commit_id_before": "f5d5f8b907ec37e54d49dcc69b35fc009e1760d3", "url_before": "https://api.github.com/repos/d0c-s4vage/lookatme/commits/f5d5f8b907ec37e54d49dcc69b35fc009e1760d3", "html_url_before": "https://github.com/d0c-s4vage/lookatme/commit/f5d5f8b907ec37e54d49dcc69b35fc009e1760d3"}, {"commit_id_before": "dc5a99b4a90df11e431a2eb93dec2ce4424d1887", "url_before": "https://api.github.com/repos/d0c-s4vage/lookatme/commits/dc5a99b4a90df11e431a2eb93dec2ce4424d1887", "html_url_before": "https://github.com/d0c-s4vage/lookatme/commit/dc5a99b4a90df11e431a2eb93dec2ce4424d1887"}], "details": [{"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/README.md", "code": "[![Master Build Status](https://travis-ci.org/d0c-s4vage/lookatme.svg?branch=master)](https://travis-ci.org/d0c-s4vage/lookatme)\n[![Coverage Status](https://coveralls.io/repos/github/d0c-s4vage/lookatme/badge.svg?branch=master)](https://coveralls.io/github/d0c-s4vage/lookatme?branch=master)\n[![PyPI Statistics](https://img.shields.io/pypi/dm/lookatme)](https://pypistats.org/packages/lookatme)\n[![Latest Release](https://img.shields.io/pypi/v/lookatme)](https://pypi.python.org/pypi/lookatme/)\n[![Documentation Status](https://readthedocs.org/projects/lookatme/badge/?version=latest)](https://lookatme.readthedocs.io/en/latest/)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/d0c_s4vage?style=plastic)](https://twitter.com/d0c_s4vage)\n\n# `lookatme`\n\n`lookatme` is an interactive, extensible, terminal-based markdown presentation\ntool.\n\n## TOC\n\n- [TOC](#toc)\n- [Features](#features)\n  * [Tour](#tour)\n- [Navigating the Presentation](#navigating-the-presentation)\n- [CLI Options](#cli-options)\n- [Known Extensions](#known-extensions)\n- [Documentation](#documentation)\n\n## Features\n\n* Markdown rendering\n* Live (input file modification time watching) and manual reloading\n* Live terminals embedded directly in slides\n* Syntax highlighting using [Pygments](https://pygments.org/)\n* Loading external files into code blocks\n* Support for contrib extensions\n* Smart slide splitting\n\n### Tour\n\nGeneral tour\n\n![lookatme_tour](docs/source/_static/lookatme_tour.gif)\n\nEmbedded terminal example\n\n![terminal example](docs/source/_static/ext_terminal_example.gif)\n\nSourcing external files example\n\n![file loader example](docs/source/_static/ext_file_loader_example.gif)\n\n## Navigating the Presentation\n\n| Action                         | Keys                             | Notes |\n|--------------------------------|----------------------------------|-------|\n| Next Slide                     | `l j right space`                |       |\n| Prev Slide                     | `h k left delete backspace`      |       |\n| Quit                           | `q Q`                            |       |\n| Terminal Focus                 | Click on the terminal            |       |\n| Exit Terminal                  | `ctrl+a` and then a slide action |       |\n| Vertically scroll within slide | `up/down or page up/page down`   |       |\n\n## CLI Options\n\n```\nUsage: lookatme [OPTIONS] [INPUT_FILES]...\n\n  lookatme - An interactive, terminal-based markdown presentation tool.\n\n  See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n\nOptions:\n  --debug\n  -l, --log PATH\n  -t, --theme [dark|light]\n  -s, --style [default|emacs|friendly|colorful|autumn|murphy|manni|monokai|perldoc|pastie|borland|trac|native|fruity|bw|vim|vs|tango|rrt|xcode|igor|paraiso-light|paraiso-dark|lovelace|algol|algol_nu|arduino|rainbow_dash|abap|solarized-dark|solarized-light|sas|stata|stata-light|stata-dark|inkpot]\n  --dump-styles                   Dump the resolved styles that will be used\n                                  with the presentation to stdout\n\n  --live, --live-reload           Watch the input filename for modifications\n                                  and automatically reload\n\n  -s, --safe                      Do not load any new extensions specified in\n                                  the source markdown. Extensions specified\n                                  via env var or -e are still loaded\n\n  --no-ext-warn                   Load new extensions specified in the source\n                                  markdown without warning\n\n  -i, --ignore-ext-failure        Ignore load failures of extensions\n  -e, --exts TEXT                 A comma-separated list of extension names to\n                                  automatically load (LOOKATME_EXTS)\n\n  --single, --one                 Render the source as a single slide\n  --version                       Show the version and exit.\n  --help                          Show this message and exit.\n```\n\n## Known Extensions\n\nBelow is a list of known extensions for lookatme:\n\n| Extension Name | Install Name                                                                                     | Notes                                                                                                                         |\n|----------------|--------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| qrcode         | [lookatme.contrib.qrcode](https://github.com/d0c-s4vage/lookatme.contrib.qrcode)                 | Renders QR codes from code blocks                                                                                             |\n| image_ueberzug | [lookatme.contrib.image_ueberzug](https://github.com/d0c-s4vage/lookatme.contrib.image_ueberzug) | Renders images with [ueberzug](https://github.com/seebye/ueberzug) (Linux only)                                               |\n| render         | [lookatme.contrib.render](https://github.com/d0c-s4vage/lookatme.contrib.render)                 | Renders supported code blocks (graphviz and mermaid-js) by calling an external program. requires an image-rendering extension |\n\n## Documentation\n\nSee the [documentation](https://lookatme.readthedocs.io/en/latest/) for details.\n", "code_before": "[![Master Build Status](https://travis-ci.org/d0c-s4vage/lookatme.svg?branch=master)](https://travis-ci.org/d0c-s4vage/lookatme)\n[![Coverage Status](https://coveralls.io/repos/github/d0c-s4vage/lookatme/badge.svg?branch=master)](https://coveralls.io/github/d0c-s4vage/lookatme?branch=master)\n[![PyPI Statistics](https://img.shields.io/pypi/dm/lookatme)](https://pypistats.org/packages/lookatme)\n[![Latest Release](https://img.shields.io/pypi/v/lookatme)](https://pypi.python.org/pypi/lookatme/)\n[![Documentation Status](https://readthedocs.org/projects/lookatme/badge/?version=latest)](https://lookatme.readthedocs.io/en/latest/)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/d0c_s4vage?style=plastic)](https://twitter.com/d0c_s4vage)\n\n# `lookatme`\n\n`lookatme` is an interactive, extensible, terminal-based markdown presentation\ntool.\n\n## TOC\n\n- [TOC](#toc)\n- [Features](#features)\n  * [Tour](#tour)\n- [Navigating the Presentation](#navigating-the-presentation)\n- [CLI Options](#cli-options)\n- [Known Extensions](#known-extensions)\n- [Documentation](#documentation)\n\n## Features\n\n* Markdown rendering\n* Live (input file modification time watching) and manual reloading\n* Live terminals embedded directly in slides\n* Syntax highlighting using [Pygments](https://pygments.org/)\n* Loading external files into code blocks\n* Support for contrib extensions\n* Smart slide splitting\n\n### Tour\n\nGeneral tour\n\n![lookatme_tour](docs/source/_static/lookatme_tour.gif)\n\nEmbedded terminal example\n\n![terminal example](docs/source/_static/ext_terminal_example.gif)\n\nSourcing external files example\n\n![file loader example](docs/source/_static/ext_file_loader_example.gif)\n\n## Navigating the Presentation\n\n| Action                         | Keys                             | Notes |\n|--------------------------------|----------------------------------|-------|\n| Next Slide                     | `l j right space`                |       |\n| Prev Slide                     | `h k left delete backspace`      |       |\n| Quit                           | `q Q`                            |       |\n| Terminal Focus                 | Click on the terminal            |       |\n| Exit Terminal                  | `ctrl+a` and then a slide action |       |\n| Vertically scroll within slide | `up/down or page up/page down`   |       |\n\n## CLI Options\n\n```\nUsage: lookatme [OPTIONS] [INPUT_FILES]...\n\n  lookatme - An interactive, terminal-based markdown presentation tool.\n\n  See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n\nOptions:\n  --debug\n  -l, --log PATH\n  -t, --theme [dark|light]\n  -s, --style [default|emacs|friendly|colorful|autumn|murphy|manni|monokai|perldoc|pastie|borland|trac|native|fruity|bw|vim|vs|tango|rrt|xcode|igor|paraiso-light|paraiso-dark|lovelace|algol|algol_nu|arduino|rainbow_dash|abap|solarized-dark|solarized-light|sas|stata|stata-light|stata-dark|inkpot]\n  --dump-styles                   Dump the resolved styles that will be used\n                                  with the presentation to stdout\n\n  --live, --live-reload           Watch the input filename for modifications\n                                  and automatically reload\n\n  -s, --safe                      Do not load any new extensions specified in\n                                  the source markdown. Extensions specified\n                                  via env var or -e are still loaded\n\n  --no-ext-warn                   Load new extensions specified in the source\n                                  markdown without warning\n\n  -i, --ignore-ext-failure        Ignore load failures of extensions\n  -e, --exts TEXT                 A comma-separated list of extension names to\n                                  automatically load (LOOKATME_EXTS)\n\n  --single, --one                 Render the source as a single slide\n  --version                       Show the version and exit.\n  --help                          Show this message and exit.\n```\n\n## Known Extensions\n\nBelow is a list of known extensions for lookatme:\n\n| Extension Name | Install Name                                                                                     | Notes                                                                                                                         |\n|----------------|--------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| qrcode         | [lookatme.contrib.qrcode](https://github.com/d0c-s4vage/lookatme.contrib.qrcode)                 | Renders QR codes from code blocks                                                                                             |\n| image_ueberzug | [lookatme.contrib.image_ueberzug](https://github.com/d0c-s4vage/lookatme.contrib.image_ueberzug) | Renders images with [ueberzug](https://github.com/seebye/ueberzug) (Linux only)                                               |\n| render         | [lookatme.contrib.render](https://github.com/d0c-s4vage/lookatme.contrib.render)                 | Renders supported code blocks (graphviz and mermaid-js) by calling an external program. requires an image-rendering extension |\n\n## Documentation\n\nSee the [documentation](https://lookatme.readthedocs.io/en/latest/) for details.\n", "patch": "@@ -63,6 +63,8 @@ Usage: lookatme [OPTIONS] [INPUT_FILES]...\n \n   lookatme - An interactive, terminal-based markdown presentation tool.\n \n+  See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n+\n Options:\n   --debug\n   -l, --log PATH\n@@ -74,6 +76,14 @@ Options:\n   --live, --live-reload           Watch the input filename for modifications\n                                   and automatically reload\n \n+  -s, --safe                      Do not load any new extensions specified in\n+                                  the source markdown. Extensions specified\n+                                  via env var or -e are still loaded\n+\n+  --no-ext-warn                   Load new extensions specified in the source\n+                                  markdown without warning\n+\n+  -i, --ignore-ext-failure        Ignore load failures of extensions\n   -e, --exts TEXT                 A comma-separated list of extension names to\n                                   automatically load (LOOKATME_EXTS)\n ", "file_path": "files/2020_10/57", "file_language": "md", "file_name": "README.md", "outdated_file_modify": 1, "outdated_file_before": 1, "outdated_file_after": 0}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/docs%2Fsource%2Fgetting_started.rst", "code": "\n.. _getting_started:\n\nGetting Started\n===============\n\nInstallation\n------------\n\n``lookatme`` can be installed with pip using the command:\n\n.. code-block:: bash\n\n    pip install lookatme\n\nUsage\n-----\n\nThe ``lookatme`` CLI has a few options to control it's behavior:\n\n.. code-block:: text\n\n    Usage: lookatme [OPTIONS] [INPUT_FILES]...\n\n      lookatme - An interactive, terminal-based markdown presentation tool.\n\n      See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n\n    Options:\n      --debug\n      -l, --log PATH\n      -t, --theme [dark|light]\n      -s, --style [default|emacs|friendly|colorful|autumn|murphy|manni|monokai|perldoc|pastie|borland|trac|native|fruity|bw|vim|vs|tango|rrt|xcode|igor|paraiso-light|paraiso-dark|lovelace|algol|algol_nu|arduino|rainbow_dash|abap|solarized-dark|solarized-light|sas|stata|stata-light|stata-dark|inkpot]\n      --dump-styles                   Dump the resolved styles that will be used\n                                      with the presentation to stdout\n\n      --live, --live-reload           Watch the input filename for modifications\n                                      and automatically reload\n\n      -s, --safe                      Do not load any new extensions specified in\n                                      the source markdown. Extensions specified\n                                      via env var or -e are still loaded\n\n      --no-ext-warn                   Load new extensions specified in the source\n                                      markdown without warning\n\n      -i, --ignore-ext-failure        Ignore load failures of extensions\n      -e, --exts TEXT                 A comma-separated list of extension names to\n                                      automatically load (LOOKATME_EXTS)\n\n      --single, --one                 Render the source as a single slide\n      --version                       Show the version and exit.\n      --help                          Show this message and exit.\n\n``--live`` / ``--live-reload``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis flag turns on live reloading within lookatme. If the input markdown\nis a filepath (and not stdin), the filepath with be watched for changes to its\nmodification time. If a change to the file's modification time is observed,\nthe slide deck is re-read and rendered, keeping the current slide in focus.\n\nIf your editor supports saving with every keystroke, instant slide updates\nare possible:\n\n.. image:: _static/lookatme_live_updates.gif\n  :width: 800\n  :alt: Live Updates\n\n``-e EXT_NAME1,EXT_NAME2`` / ``--exts EXT_NAME1,EXT_NAME2``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows a comma-separated list of extension names to be pre-loaded into lookatme\nwithout requring them to be declared in the Markdown source.\n\n``-s`` / ``--safe``\n^^^^^^^^^^^^^^^^^^^\n\nDo **NOT** load any new extensions specified in the markdown (ignore them). New\nextensions are extensions that have not manually been allowed via the ``-e``\nargument or the ``LOOKATME_EXTS`` environment variable.\n\n``--no-ext-warn``\n^^^^^^^^^^^^^^^^^\n\nDo not warn about new extensions that are to-be-loaded that are specified in\nthe source markdown. New extensions are extensions that have not manually been\nallowed via the ``-e`` argument or the ``LOOKATME_EXTS`` environment variable.\n\n``-i``\n^^^^^^\n\nIgnore failure loading extensions. This does not ignore warnings, but ignores\nany hard-errors during import, such as ``ImportError``.\n\n\n``--single`` / ``--one``\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nRender the markdown source as a single slide, ignoring all hrules. Scroll\noverflowing slides with the up/down arrow keys and page up/page down.\n\n``--debug`` and ``--log``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTurns on debug logging for lookatme. The debug log will be created in your platform's\ntemporary directory by default and will be named ``lookatme.log``:\n\n.. code-block:: bash\n\n    $> lookatme slides.md --debug\n    \n    # in another terminal\n    $> tail -f /tmp/lookatme.log\n    DEBUG:lookatme.RENDER:  Rendering token {'type': 'heading', 'level': 2, 'text': 'TOC'}\n    DEBUG:lookatme.RENDER:  Rendering token {'type': 'list_start', 'ordered': False}\n    DEBUG:lookatme.RENDER:    Rendering token {'type': 'list_item_start'}\n    DEBUG:lookatme.RENDER:      Rendering token {'type': 'text', 'text': '[Features](#features)'}\n    DEBUG:lookatme.RENDER:      Rendering token {'type': 'list_start', 'ordered': False}\n    DEBUG:lookatme.RENDER:        Rendering token {'type': 'list_item_start'}\n \nYou may set a custom log location with the ``--log`` flag\n\n``--theme``\n^^^^^^^^^^^\n\nThemes in lookatme are pre-defined stylings. Lookatme comes with two built-in\nthemes: ``dark`` and ``light``. These themes are intended to look good on\ndark terminals and light terminals.\n\nSee the :ref:`dark_theme` and :ref:`light_theme` pages for more details.\nSee the :ref:`style_precedence` page for details on the order style overrides\nand settings are applied.\n\n``--style``\n^^^^^^^^^^^\n\nThis option overrides the `Pygments <https://pygments.org/>`_  syntax highlighting\nstyle to use. See the :ref:`style_precedence` for details about style overriding\norder.\n\nAt the time of this writing, available Pygments style options include:\n\n  * default\n  * emacs\n  * friendly\n  * colorful\n  * autumn\n  * murphy\n  * manni\n  * monokai\n  * perldoc\n  * pastie\n  * borland\n  * trac\n  * native\n  * fruity\n  * bw\n  * vim\n  * vs\n  * tango\n  * rrt\n  * xcode\n  * igor\n  * paraiso-light\n  * paraiso-dark\n  * lovelace\n  * algol\n  * algol_nu\n  * arduino\n  * rainbow_dash\n  * abap\n  * solarized-dark\n  * solarized-light\n  * sas\n  * stata\n  * stata-light\n  * stata-dark\n\n``--dump-styles``\n^^^^^^^^^^^^^^^^^\n\nPrint the final, resolved style definition that will be used to render the\nmarkdown as currently specified on the command-line. See the :ref:`style_precedence`\nsection for details on how this works.\n\nE.g.:\n\n.. code-block:: bash\n\n    lookatme examples/tour.md -theme --style solarized-dark --dump-styles\n", "code_before": "\n.. _getting_started:\n\nGetting Started\n===============\n\nInstallation\n------------\n\n``lookatme`` can be installed with pip using the command:\n\n.. code-block:: bash\n\n    pip install lookatme\n\nUsage\n-----\n\nThe ``lookatme`` CLI has a few options to control it's behavior:\n\n.. code-block:: text\n\n    Usage: lookatme [OPTIONS] [INPUT_FILES]...\n\n      lookatme - An interactive, terminal-based markdown presentation tool.\n\n      See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n\n    Options:\n      --debug\n      -l, --log PATH\n      -t, --theme [dark|light]\n      -s, --style [default|emacs|friendly|colorful|autumn|murphy|manni|monokai|perldoc|pastie|borland|trac|native|fruity|bw|vim|vs|tango|rrt|xcode|igor|paraiso-light|paraiso-dark|lovelace|algol|algol_nu|arduino|rainbow_dash|abap|solarized-dark|solarized-light|sas|stata|stata-light|stata-dark|inkpot]\n      --dump-styles                   Dump the resolved styles that will be used\n                                      with the presentation to stdout\n\n      --live, --live-reload           Watch the input filename for modifications\n                                      and automatically reload\n\n      -s, --safe                      Do not load any new extensions specified in\n                                      the source markdown. Extensions specified\n                                      via env var or -e are still loaded\n\n      --no-ext-warn                   Load new extensions specified in the source\n                                      markdown without warning\n\n      -i, --ignore-ext-failure        Ignore load failures of extensions\n      -e, --exts TEXT                 A comma-separated list of extension names to\n                                      automatically load (LOOKATME_EXTS)\n\n      --single, --one                 Render the source as a single slide\n      --version                       Show the version and exit.\n      --help                          Show this message and exit.\n\n``--live`` / ``--live-reload``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis flag turns on live reloading within lookatme. If the input markdown\nis a filepath (and not stdin), the filepath with be watched for changes to its\nmodification time. If a change to the file's modification time is observed,\nthe slide deck is re-read and rendered, keeping the current slide in focus.\n\nIf your editor supports saving with every keystroke, instant slide updates\nare possible:\n\n.. image:: _static/lookatme_live_updates.gif\n  :width: 800\n  :alt: Live Updates\n\n``-e EXT_NAME1,EXT_NAME2`` / ``--exts EXT_NAME1,EXT_NAME2``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows a comma-separated list of extension names to be pre-loaded into lookatme\nwithout requring them to be declared in the Markdown source.\n\n``-s`` / ``--safe``\n^^^^^^^^^^^^^^^^^^^\n\nDo **NOT** load any new extensions specified in the markdown (ignore them). New\nextensions are extensions that have not manually been allowed via the ``-e``\nargument or the ``LOOKATME_EXTS`` environment variable.\n\n``--no-ext-warn``\n^^^^^^^^^^^^^^^^^\n\nDo not warn about new extensions that are to-be-loaded that are specified in\nthe source markdown. New extensions are extensions that have not manually been\nallowed via the ``-e`` argument or the ``LOOKATME_EXTS`` environment variable.\n\n``-i``\n^^^^^^\n\nIgnore failure loading extensions. This does not ignore warnings, but ignores\nany hard-errors during import, such as ``ImportError``.\n\n\n``--single`` / ``--one``\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nRender the markdown source as a single slide, ignoring all hrules. Scroll\noverflowing slides with the up/down arrow keys and page up/page down.\n\n``--debug`` and ``--log``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTurns on debug logging for lookatme. The debug log will be created in your platform's\ntemporary directory by default and will be named ``lookatme.log``:\n\n.. code-block:: bash\n\n    $> lookatme slides.md --debug\n    \n    # in another terminal\n    $> tail -f /tmp/lookatme.log\n    DEBUG:lookatme.RENDER:  Rendering token {'type': 'heading', 'level': 2, 'text': 'TOC'}\n    DEBUG:lookatme.RENDER:  Rendering token {'type': 'list_start', 'ordered': False}\n    DEBUG:lookatme.RENDER:    Rendering token {'type': 'list_item_start'}\n    DEBUG:lookatme.RENDER:      Rendering token {'type': 'text', 'text': '[Features](#features)'}\n    DEBUG:lookatme.RENDER:      Rendering token {'type': 'list_start', 'ordered': False}\n    DEBUG:lookatme.RENDER:        Rendering token {'type': 'list_item_start'}\n \nYou may set a custom log location with the ``--log`` flag\n\n``--theme``\n^^^^^^^^^^^\n\nThemes in lookatme are pre-defined stylings. Lookatme comes with two built-in\nthemes: ``dark`` and ``light``. These themes are intended to look good on\ndark terminals and light terminals.\n\nSee the :ref:`dark_theme` and :ref:`light_theme` pages for more details.\nSee the :ref:`style_precedence` page for details on the order style overrides\nand settings are applied.\n\n``--style``\n^^^^^^^^^^^\n\nThis option overrides the `Pygments <https://pygments.org/>`_  syntax highlighting\nstyle to use. See the :ref:`style_precedence` for details about style overriding\norder.\n\nAt the time of this writing, available Pygments style options include:\n\n  * default\n  * emacs\n  * friendly\n  * colorful\n  * autumn\n  * murphy\n  * manni\n  * monokai\n  * perldoc\n  * pastie\n  * borland\n  * trac\n  * native\n  * fruity\n  * bw\n  * vim\n  * vs\n  * tango\n  * rrt\n  * xcode\n  * igor\n  * paraiso-light\n  * paraiso-dark\n  * lovelace\n  * algol\n  * algol_nu\n  * arduino\n  * rainbow_dash\n  * abap\n  * solarized-dark\n  * solarized-light\n  * sas\n  * stata\n  * stata-light\n  * stata-dark\n\n``--dump-styles``\n^^^^^^^^^^^^^^^^^\n\nPrint the final, resolved style definition that will be used to render the\nmarkdown as currently specified on the command-line. See the :ref:`style_precedence`\nsection for details on how this works.\n\nE.g.:\n\n.. code-block:: bash\n\n    lookatme examples/tour.md -theme --style solarized-dark --dump-styles\n", "patch": "@@ -24,6 +24,8 @@ The ``lookatme`` CLI has a few options to control it's behavior:\n \n       lookatme - An interactive, terminal-based markdown presentation tool.\n \n+      See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n+\n     Options:\n       --debug\n       -l, --log PATH\n@@ -35,6 +37,14 @@ The ``lookatme`` CLI has a few options to control it's behavior:\n       --live, --live-reload           Watch the input filename for modifications\n                                       and automatically reload\n \n+      -s, --safe                      Do not load any new extensions specified in\n+                                      the source markdown. Extensions specified\n+                                      via env var or -e are still loaded\n+\n+      --no-ext-warn                   Load new extensions specified in the source\n+                                      markdown without warning\n+\n+      -i, --ignore-ext-failure        Ignore load failures of extensions\n       -e, --exts TEXT                 A comma-separated list of extension names to\n                                       automatically load (LOOKATME_EXTS)\n \n@@ -58,11 +68,31 @@ are possible:\n   :alt: Live Updates\n \n ``-e EXT_NAME1,EXT_NAME2`` / ``--exts EXT_NAME1,EXT_NAME2``\n-^^^^^^^^^^^^^^^^^^^\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Allows a comma-separated list of extension names to be pre-loaded into lookatme\n without requring them to be declared in the Markdown source.\n \n+``-s`` / ``--safe``\n+^^^^^^^^^^^^^^^^^^^\n+\n+Do **NOT** load any new extensions specified in the markdown (ignore them). New\n+extensions are extensions that have not manually been allowed via the ``-e``\n+argument or the ``LOOKATME_EXTS`` environment variable.\n+\n+``--no-ext-warn``\n+^^^^^^^^^^^^^^^^^\n+\n+Do not warn about new extensions that are to-be-loaded that are specified in\n+the source markdown. New extensions are extensions that have not manually been\n+allowed via the ``-e`` argument or the ``LOOKATME_EXTS`` environment variable.\n+\n+``-i``\n+^^^^^^\n+\n+Ignore failure loading extensions. This does not ignore warnings, but ignores\n+any hard-errors during import, such as ``ImportError``.\n+\n \n ``--single`` / ``--one``\n ^^^^^^^^^^^^^^^^^^^^^^^^", "file_path": "files/2020_10/59", "file_language": "rst", "file_name": "docs/source/getting_started.rst", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/examples%2Fcalendar_contrib%2Flookatme%2Fcontrib%2Fcalendar.py", "code": "\"\"\"\nDefines a calendar extension that overrides code block rendering if the\nlanguage type is calendar\n\"\"\"\n\n\nimport datetime\nimport calendar\nimport urwid\n\n\nfrom lookatme.exceptions import IgnoredByContrib\n\n\ndef user_warnings():\n    \"\"\"No warnings exist for this extension. Anything you want to warn the\n    user about, such as security risks in processing untrusted markdown, should\n    go here.\n    \"\"\"\n    return []\n\n\ndef render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n    if lang != \"calendar\":\n        raise IgnoredByContrib()\n    \n    today = datetime.datetime.utcnow()\n    return urwid.Text(calendar.month(today.year, today.month))\n", "code_before": "\"\"\"\nDefines a calendar extension that overrides code block rendering if the\nlanguage type is calendar\n\"\"\"\n\n\nimport datetime\nimport calendar\nimport urwid\n\n\nfrom lookatme.exceptions import IgnoredByContrib\n\n\ndef user_warnings():\n    \"\"\"No warnings exist for this extension. Anything you want to warn the\n    user about, such as security risks in processing untrusted markdown, should\n    go here.\n    \"\"\"\n    return []\n\n\ndef render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n    if lang != \"calendar\":\n        raise IgnoredByContrib()\n    \n    today = datetime.datetime.utcnow()\n    return urwid.Text(calendar.month(today.year, today.month))\n", "patch": "@@ -12,6 +12,14 @@\n from lookatme.exceptions import IgnoredByContrib\n \n \n+def user_warnings():\n+    \"\"\"No warnings exist for this extension. Anything you want to warn the\n+    user about, such as security risks in processing untrusted markdown, should\n+    go here.\n+    \"\"\"\n+    return []\n+\n+\n def render_code(token, body, stack, loop):\n     lang = token[\"lang\"] or \"\"\n     if lang != \"calendar\":", "file_path": "files/2020_10/60", "file_language": "py", "file_name": "examples/calendar_contrib/lookatme/contrib/calendar.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def user_warnings():\n    \"\"\"No warnings exist for this extension. Anything you want to warn the\n    user about, such as security risks in processing untrusted markdown, should\n    go here.\n    \"\"\"\n    return []", "target": 0}, {"function": "def render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n    if lang != \"calendar\":\n        raise IgnoredByContrib()\n    \n    today = datetime.datetime.utcnow()\n    return urwid.Text(calendar.month(today.year, today.month))", "target": 0}], "function_after": [{"function": "def user_warnings():\n    \"\"\"No warnings exist for this extension. Anything you want to warn the\n    user about, such as security risks in processing untrusted markdown, should\n    go here.\n    \"\"\"\n    return []", "target": 0}, {"function": "def render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n    if lang != \"calendar\":\n        raise IgnoredByContrib()\n    \n    today = datetime.datetime.utcnow()\n    return urwid.Text(calendar.month(today.year, today.month))", "target": 0}]}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/examples%2Ftour.md", "code": "---\ntitle: lookatme Tour\ndate: 2020-10-09\nauthor: James Johnson\nextensions:\n  - terminal\n  - qrcode\n  - image_ueberzug\nstyles:\n  style: monokai\n  table:\n    column_spacing: 15\n  margin:\n    top: 3\n    bottom: 0\n  padding:\n    top: 3\n    bottom: 3\n---\n\n# Markdown Support: Inline\n\n|                         Markdown | Result                         |\n|---------------------------------:|--------------------------------|\n|                       `*italic*` | *italic*                       |\n|                       `_italic_` | _italic_                       |\n|                       `**bold**` | **bold**                       |\n|                       `__bold__` | __bold__                       |\n|           `***bold underline***` | ***bold underline***           |\n|           `___bold underline___` | ___bold underline___           |\n|              `~~strikethrough~~` | ~~strikethrough~~              |\n| `[CLICK ME](https://google.com)` | [CLICK ME](https://google.com) |\n|                     `` `code` `` | `code`                         |\n\n---\n\n# Markdown Support: Headers\n\n## Heading 2\n\n### Heading 3\n\n#### Heading 4\n\nMore text\n\n---\n\n# Markdown Support: Code Blocks & Quotes\n\nCode blocks with language syntax highlighting\n\n~~~python\ndef a_function(arg1, arg2):\n    \"\"\"This is a function\n    \"\"\"\n    print(arg1)\n~~~\n\nA quote is below:\n\n> This is a quote more quote contents\n\n---\n\n# Markdown Support: Lists\n\n* Top level\n    * Level 2\n        * Level 3\n            * Level 4\n    * Level 2\n        * Level 3\n            * Level 4\n    * Level 2\n        * Level 3\n            * Level 4\n\n---\n\n# Markdown Support: Numbered Lists\n\n* Top level\n    1. Level 2\n        1. Level 3\n        1. Level 3\n        1. Level 3\n            * Level 4\n    1. Level 2\n        1. Level 3\n            1. Level 4\n            1. Level 4\n            1. Level 4\n    1. Level 2\n        * Level 3\n            * Level 4\n\n---\n\n# Extensions\n\nlookatme supports extensions that can add additional functionality to lookatme\npresentations.\n\n---\n\n# Extensions > QR Codes\n\nE.g., with the [qrcode](https://github.com/d0c-s4vage/lookatme.contrib.qrcode)\nextension enabled, this:\n\n~~~\n```qrcode\nhello\n```\n~~~\n\nbecomes\n\n```qrcode\nhello\n```\n---\n\n# Extensions > Images\n\n![15](./nasa_orion.jpg)\n\nExtensions can also provide support for images! the\n[image_ueberzug](https://github.com/d0c-s4vage/lookatme.contrib.image_ueberzug)\nplugin makes images work in slides!\n\n---\n\n# Embeddable Terminals\n\nTerminals can be embedded directly into slides!\n\nThe markdown below:\n\n~~~md\n```terminal8\nbash -il\n```\n~~~\n\nbecomes\n\n```terminal8\nbash -il\n```\n\n---\n\n# Embeddable Terminals: Docker containers\n\nWant to drop directly into a docker container for a clean environment\nin the middle of a slide?\n\n~~~md\n```terminal8\ndocker run --rm -it ubuntu:18.04\n```\n~~~\n\n```terminal8\ndocker run --rm -it ubuntu:18.04\n```\n\n---\n\n# Live Editing\n\nHello from vim! The `--live` flag makes lookatme watch the source input\nfor file changes and auto-reloads the slides.\n\n---\n\n# Live Editing: Including Styles!\n\n```python\ndef a_function(test):\n    print \"Hello again from vim again\"\n```\n\n| h1     | h2     | h3    |\n|--------|--------|-------|\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n\n--- \n\n# Slide Scrolling\n\n* Slides\n* Can\n* Be\n* Scrolled\n* With\n* Up\n* And\n* Down\n* Arrows\n* **NOTE**\n  - Does\n  - Not\n  - Work\n  - Well\n  - With\n  - Images\n", "code_before": "---\ntitle: lookatme Tour\ndate: 2020-10-09\nauthor: James Johnson\nextensions:\n  - terminal\n  - qrcode\n  - image_ueberzug\nstyles:\n  style: monokai\n  table:\n    column_spacing: 15\n  margin:\n    top: 3\n    bottom: 0\n  padding:\n    top: 3\n    bottom: 3\n---\n\n# Markdown Support: Inline\n\n|                         Markdown | Result                         |\n|---------------------------------:|--------------------------------|\n|                       `*italic*` | *italic*                       |\n|                       `_italic_` | _italic_                       |\n|                       `**bold**` | **bold**                       |\n|                       `__bold__` | __bold__                       |\n|           `***bold underline***` | ***bold underline***           |\n|           `___bold underline___` | ___bold underline___           |\n|              `~~strikethrough~~` | ~~strikethrough~~              |\n| `[CLICK ME](https://google.com)` | [CLICK ME](https://google.com) |\n|                     `` `code` `` | `code`                         |\n\n---\n\n# Markdown Support: Headers\n\n## Heading 2\n\n### Heading 3\n\n#### Heading 4\n\nMore text\n\n---\n\n# Markdown Support: Code Blocks & Quotes\n\nCode blocks with language syntax highlighting\n\n~~~python\ndef a_function(arg1, arg2):\n    \"\"\"This is a function\n    \"\"\"\n    print(arg1)\n~~~\n\nA quote is below:\n\n> This is a quote more quote contents\n\n---\n\n# Markdown Support: Lists\n\n* Top level\n    * Level 2\n        * Level 3\n            * Level 4\n    * Level 2\n        * Level 3\n            * Level 4\n    * Level 2\n        * Level 3\n            * Level 4\n\n---\n\n# Markdown Support: Numbered Lists\n\n* Top level\n    1. Level 2\n        1. Level 3\n        1. Level 3\n        1. Level 3\n            * Level 4\n    1. Level 2\n        1. Level 3\n            1. Level 4\n            1. Level 4\n            1. Level 4\n    1. Level 2\n        * Level 3\n            * Level 4\n\n---\n\n# Extensions\n\nlookatme supports extensions that can add additional functionality to lookatme\npresentations.\n\n---\n\n# Extensions > QR Codes\n\nE.g., with the [qrcode](https://github.com/d0c-s4vage/lookatme.contrib.qrcode)\nextension enabled, this:\n\n~~~\n```qrcode\nhello\n```\n~~~\n\nbecomes\n\n```qrcode\nhello\n```\n---\n\n# Extensions > Images\n\n![15](./nasa_orion.jpg)\n\nExtensions can also provide support for images! the\n[image_ueberzug](https://github.com/d0c-s4vage/lookatme.contrib.image_ueberzug)\nplugin makes images work in slides!\n\n---\n\n# Embeddable Terminals\n\nTerminals can be embedded directly into slides!\n\nThe markdown below:\n\n~~~md\n```terminal8\nbash -il\n```\n~~~\n\nbecomes\n\n```terminal8\nbash -il\n```\n\n---\n\n# Embeddable Terminals: Docker containers\n\nWant to drop directly into a docker container for a clean environment\nin the middle of a slide?\n\n~~~md\n```terminal8\ndocker run --rm -it ubuntu:18.04\n```\n~~~\n\n```terminal8\ndocker run --rm -it ubuntu:18.04\n```\n\n---\n\n# Live Editing\n\nHello from vim! The `--live` flag makes lookatme watch the source input\nfor file changes and auto-reloads the slides.\n\n---\n\n# Live Editing: Including Styles!\n\n```python\ndef a_function(test):\n    print \"Hello again from vim again\"\n```\n\n| h1     | h2     | h3    |\n|--------|--------|-------|\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n| value1 | value2 | value3 |\n\n--- \n\n# Slide Scrolling\n\n* Slides\n* Can\n* Be\n* Scrolled\n* With\n* Up\n* And\n* Down\n* Arrows\n* **NOTE**\n  - Does\n  - Not\n  - Work\n  - Well\n  - With\n  - Images\n", "patch": "@@ -3,18 +3,19 @@ title: lookatme Tour\n date: 2020-10-09\n author: James Johnson\n extensions:\n+  - terminal\n   - qrcode\n   - image_ueberzug\n styles:\n-  style: solarized-dark\n+  style: monokai\n   table:\n-    column_spacing: 5\n+    column_spacing: 15\n   margin:\n     top: 3\n     bottom: 0\n   padding:\n-    top: 1\n-    bottom: 1\n+    top: 3\n+    bottom: 3\n ---\n \n # Markdown Support: Inline\n@@ -170,16 +171,16 @@ docker run --rm -it ubuntu:18.04\n \n # Live Editing\n \n-When run with the `--live` option, lookatme watches for file changes and\n-auto-reloads the source markdown \n+Hello from vim! The `--live` flag makes lookatme watch the source input\n+for file changes and auto-reloads the slides.\n \n ---\n \n # Live Editing: Including Styles!\n \n ```python\n def a_function(test):\n-    print \"Hello again from vim\"\n+    print \"Hello again from vim again\"\n ```\n \n | h1     | h2     | h3    |", "file_path": "files/2020_10/61", "file_language": "md", "file_name": "examples/tour.md", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/lookatme%2F__main__.py", "code": "#!/usr/bin/env python3\n\n\"\"\"\nThis is the main CLI for lookatme\n\"\"\"\n\n\nimport click\nimport logging\nimport io\nimport os\nimport pygments.styles\nimport sys\nimport tempfile\n\n\nimport lookatme.tui\nimport lookatme.log\nimport lookatme.config\nfrom lookatme.pres import Presentation\nfrom lookatme.schemas import StyleSchema\n\n\n@click.command(\"lookatme\")\n@click.option(\"--debug\", \"debug\", is_flag=\"True\", default=False)\n@click.option(\n    \"-l\",\n    \"--log\",\n    \"log_path\",\n    type=click.Path(writable=True),\n    default=os.path.join(tempfile.gettempdir(), \"lookatme.log\"),\n)\n@click.option(\n    \"-t\",\n    \"--theme\",\n    \"theme\",\n    type=click.Choice([\"dark\", \"light\"]),\n    default=\"dark\",\n)\n@click.option(\n    \"-s\",\n    \"--style\",\n    \"code_style\",\n    default=None,\n    type=click.Choice(list(pygments.styles.get_all_styles())),\n)\n@click.option(\n    \"--dump-styles\",\n    help=\"Dump the resolved styles that will be used with the presentation to stdout\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"--live\",\n    \"--live-reload\",\n    \"live_reload\",\n    help=\"Watch the input filename for modifications and automatically reload\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"-s\",\n    \"--safe\",\n    help=\"Do not load any new extensions specified in the source markdown. \"\n         \"Extensions specified via env var or -e are still loaded\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"--no-ext-warn\",\n    help=\"Load new extensions specified in the source markdown without warning\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"-i\",\n    \"--ignore-ext-failure\",\n    help=\"Ignore load failures of extensions\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"-e\",\n    \"--exts\",\n    \"extensions\",\n    help=\"A comma-separated list of extension names to automatically load\"\n         \" (LOOKATME_EXTS)\",\n    envvar=\"LOOKATME_EXTS\",\n    default=\"\",\n)\n@click.option(\n    \"--single\",\n    \"--one\",\n    \"single_slide\",\n    help=\"Render the source as a single slide\",\n    is_flag=True,\n    default=False\n)\n@click.version_option(lookatme.__version__)\n@click.argument(\n    \"input_files\",\n    type=click.File(\"r\"),\n    nargs=-1,\n)\ndef main(debug, log_path, theme, code_style, dump_styles,\n         input_files, live_reload, extensions, single_slide, safe, no_ext_warn,\n         ignore_ext_failure):\n    \"\"\"lookatme - An interactive, terminal-based markdown presentation tool.\n    \n    See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n    \"\"\"\n    if debug:\n        lookatme.config.LOG = lookatme.log.create_log(log_path)\n    else:\n        lookatme.config.LOG = lookatme.log.create_null_log()\n\n    if len(input_files) == 0:\n        input_files = [io.StringIO(\"\")]\n\n    preload_exts = [x.strip() for x in extensions.split(',')]\n    preload_exts = list(filter(lambda x: x != '', preload_exts))\n    pres = Presentation(\n        input_files[0],\n        theme,\n        code_style,\n        live_reload=live_reload,\n        single_slide=single_slide,\n        preload_extensions=preload_exts,\n        safe=safe,\n        no_ext_warn=no_ext_warn,\n        ignore_ext_failure=ignore_ext_failure,\n    )\n\n    if dump_styles:\n        print(StyleSchema().dumps(pres.styles))\n        return 0\n\n    try:\n        pres.run()\n    except Exception as e:\n        number = pres.tui.curr_slide.number + 1\n        click.echo(f\"Error rendering slide {number}: {e}\")\n        if not debug:\n            click.echo(\"Rerun with --debug to view the full traceback in logs\")\n        else:\n            lookatme.config.LOG.exception(f\"Error rendering slide {number}: {e}\")\n            click.echo(f\"See {log_path} for traceback\")\n        raise click.Abort()\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_before": "#!/usr/bin/env python3\n\n\"\"\"\nThis is the main CLI for lookatme\n\"\"\"\n\n\nimport click\nimport logging\nimport io\nimport os\nimport pygments.styles\nimport sys\nimport tempfile\n\n\nimport lookatme.tui\nimport lookatme.log\nimport lookatme.config\nfrom lookatme.pres import Presentation\nfrom lookatme.schemas import StyleSchema\n\n\n@click.command(\"lookatme\")\n@click.option(\"--debug\", \"debug\", is_flag=\"True\", default=False)\n@click.option(\n    \"-l\",\n    \"--log\",\n    \"log_path\",\n    type=click.Path(writable=True),\n    default=os.path.join(tempfile.gettempdir(), \"lookatme.log\"),\n)\n@click.option(\n    \"-t\",\n    \"--theme\",\n    \"theme\",\n    type=click.Choice([\"dark\", \"light\"]),\n    default=\"dark\",\n)\n@click.option(\n    \"-s\",\n    \"--style\",\n    \"code_style\",\n    default=None,\n    type=click.Choice(list(pygments.styles.get_all_styles())),\n)\n@click.option(\n    \"--dump-styles\",\n    help=\"Dump the resolved styles that will be used with the presentation to stdout\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"--live\",\n    \"--live-reload\",\n    \"live_reload\",\n    help=\"Watch the input filename for modifications and automatically reload\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"-s\",\n    \"--safe\",\n    help=\"Do not load any new extensions specified in the source markdown. \"\n         \"Extensions specified via env var or -e are still loaded\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"--no-ext-warn\",\n    help=\"Load new extensions specified in the source markdown without warning\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"-i\",\n    \"--ignore-ext-failure\",\n    help=\"Ignore load failures of extensions\",\n    is_flag=True,\n    default=False,\n)\n@click.option(\n    \"-e\",\n    \"--exts\",\n    \"extensions\",\n    help=\"A comma-separated list of extension names to automatically load\"\n         \" (LOOKATME_EXTS)\",\n    envvar=\"LOOKATME_EXTS\",\n    default=\"\",\n)\n@click.option(\n    \"--single\",\n    \"--one\",\n    \"single_slide\",\n    help=\"Render the source as a single slide\",\n    is_flag=True,\n    default=False\n)\n@click.version_option(lookatme.__version__)\n@click.argument(\n    \"input_files\",\n    type=click.File(\"r\"),\n    nargs=-1,\n)\ndef main(debug, log_path, theme, code_style, dump_styles,\n         input_files, live_reload, extensions, single_slide, safe, no_ext_warn,\n         ignore_ext_failure):\n    \"\"\"lookatme - An interactive, terminal-based markdown presentation tool.\n    \n    See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n    \"\"\"\n    if debug:\n        lookatme.config.LOG = lookatme.log.create_log(log_path)\n    else:\n        lookatme.config.LOG = lookatme.log.create_null_log()\n\n    if len(input_files) == 0:\n        input_files = [io.StringIO(\"\")]\n\n    preload_exts = [x.strip() for x in extensions.split(',')]\n    preload_exts = list(filter(lambda x: x != '', preload_exts))\n    pres = Presentation(\n        input_files[0],\n        theme,\n        code_style,\n        live_reload=live_reload,\n        single_slide=single_slide,\n        preload_extensions=preload_exts,\n        safe=safe,\n        no_ext_warn=no_ext_warn,\n        ignore_ext_failure=ignore_ext_failure,\n    )\n\n    if dump_styles:\n        print(StyleSchema().dumps(pres.styles))\n        return 0\n\n    try:\n        pres.run()\n    except Exception as e:\n        number = pres.tui.curr_slide.number + 1\n        click.echo(f\"Error rendering slide {number}: {e}\")\n        if not debug:\n            click.echo(\"Rerun with --debug to view the full traceback in logs\")\n        else:\n            lookatme.config.LOG.exception(f\"Error rendering slide {number}: {e}\")\n            click.echo(f\"See {log_path} for traceback\")\n        raise click.Abort()\n\n\nif __name__ == \"__main__\":\n    main()\n", "patch": "@@ -58,6 +58,27 @@\n     is_flag=True,\n     default=False,\n )\n+@click.option(\n+    \"-s\",\n+    \"--safe\",\n+    help=\"Do not load any new extensions specified in the source markdown. \"\n+         \"Extensions specified via env var or -e are still loaded\",\n+    is_flag=True,\n+    default=False,\n+)\n+@click.option(\n+    \"--no-ext-warn\",\n+    help=\"Load new extensions specified in the source markdown without warning\",\n+    is_flag=True,\n+    default=False,\n+)\n+@click.option(\n+    \"-i\",\n+    \"--ignore-ext-failure\",\n+    help=\"Ignore load failures of extensions\",\n+    is_flag=True,\n+    default=False,\n+)\n @click.option(\n     \"-e\",\n     \"--exts\",\n@@ -82,8 +103,11 @@\n     nargs=-1,\n )\n def main(debug, log_path, theme, code_style, dump_styles,\n-         input_files, live_reload, extensions, single_slide):\n+         input_files, live_reload, extensions, single_slide, safe, no_ext_warn,\n+         ignore_ext_failure):\n     \"\"\"lookatme - An interactive, terminal-based markdown presentation tool.\n+    \n+    See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n     \"\"\"\n     if debug:\n         lookatme.config.LOG = lookatme.log.create_log(log_path)\n@@ -102,6 +126,9 @@ def main(debug, log_path, theme, code_style, dump_styles,\n         live_reload=live_reload,\n         single_slide=single_slide,\n         preload_extensions=preload_exts,\n+        safe=safe,\n+        no_ext_warn=no_ext_warn,\n+        ignore_ext_failure=ignore_ext_failure,\n     )\n \n     if dump_styles:", "file_path": "files/2020_10/62", "file_language": "py", "file_name": "lookatme/__main__.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/lookatme%2Fascii_art.py", "code": "\"\"\"\nMisc ASCII art\n\"\"\"\n\nWARNING = r\"\"\"\n               _mBma\n              sQf \"QL\n             jW(   -$g.\n            jW'     -$m,\n          .y@'  _aa.  4m,\n         .mD`  ]QQWQ.  4Q,\n        _mP`   ]QQQQ    ?Q/\n       _QF     )WQQ@     ?Qc\n      <QF       QQQF      )Qa\n     jW(        QQQf       \"QL\n    jW'         ]H8'        -Q6.\n  .y@'          _as.         -$m.\n .m@`          ]QQWQ.         -4m,\n_mP`           -?$8!            4Q,\nmE                               $m\n?$gyygggggggggwywgyygggggggygggggD(\n\"\"\"\n", "code_before": "\"\"\"\nMisc ASCII art\n\"\"\"\n\nWARNING = r\"\"\"\n               _mBma\n              sQf \"QL\n             jW(   -$g.\n            jW'     -$m,\n          .y@'  _aa.  4m,\n         .mD`  ]QQWQ.  4Q,\n        _mP`   ]QQQQ    ?Q/\n       _QF     )WQQ@     ?Qc\n      <QF       QQQF      )Qa\n     jW(        QQQf       \"QL\n    jW'         ]H8'        -Q6.\n  .y@'          _as.         -$m.\n .m@`          ]QQWQ.         -4m,\n_mP`           -?$8!            4Q,\nmE                               $m\n?$gyygggggggggwywgyygggggggygggggD(\n\"\"\"\n", "patch": "@@ -0,0 +1,22 @@\n+\"\"\"\n+Misc ASCII art\n+\"\"\"\n+\n+WARNING = r\"\"\"\n+               _mBma\n+              sQf \"QL\n+             jW(   -$g.\n+            jW'     -$m,\n+          .y@'  _aa.  4m,\n+         .mD`  ]QQWQ.  4Q,\n+        _mP`   ]QQQQ    ?Q/\n+       _QF     )WQQ@     ?Qc\n+      <QF       QQQF      )Qa\n+     jW(        QQQf       \"QL\n+    jW'         ]H8'        -Q6.\n+  .y@'          _as.         -$m.\n+ .m@`          ]QQWQ.         -4m,\n+_mP`           -?$8!            4Q,\n+mE                               $m\n+?$gyygggggggggwywgyygggggggygggggD(\n+\"\"\"", "file_path": "files/2020_10/63", "file_language": "py", "file_name": "lookatme/ascii_art.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/lookatme%2Fcontrib%2F__init__.py", "code": "\"\"\"\nThis module handles loading and using lookatme_contriba modules\n\nContrib modules are directly used \n\"\"\"\n\n\nimport contextlib\n\n\nimport lookatme.ascii_art\nfrom lookatme.exceptions import IgnoredByContrib\nimport lookatme.prompt\nfrom . import terminal\nfrom . import file_loader\n\n\nCONTRIB_MODULES = []\n\n\ndef validate_extension_mod(ext_name, ext_mod):\n    \"\"\"Validate the extension, returns an array of warnings associated with the\n    module\n    \"\"\"\n    res = []\n    if not hasattr(ext_mod, \"user_warnings\"):\n        res.append(\"'user_warnings' is missing. Extension is not able to \"\n                   \"provide user warnings.\")\n    else:\n        res += ext_mod.user_warnings()\n\n    return res\n\n\ndef load_contribs(contrib_names, safe_contribs, ignore_load_failure=False):\n    \"\"\"Load all contrib modules specified by ``contrib_names``. These should\n    all be namespaced packages under the ``lookatmecontrib`` namespace. E.g.\n    ``lookatmecontrib.calendar`` would be an extension provided by a\n    contrib module, and would be added to an ``extensions`` list in a slide's\n    YAML header as ``calendar``.\n\n    ``safe_contribs`` is a set of contrib names that are manually provided\n    by the user by the ``-e`` flag or env variable of extensions to auto-load.\n    \"\"\"\n    if contrib_names is None:\n        return\n\n    errors = []\n    all_warnings = []\n    for contrib_name in contrib_names:\n        module_name = f\"lookatme.contrib.{contrib_name}\"\n        try:\n            mod = __import__(module_name, fromlist=[contrib_name])\n        except Exception as e:\n            if ignore_load_failure:\n                continue\n            errors.append(str(e))\n        else:\n            if contrib_name not in safe_contribs:\n                ext_warnings = validate_extension_mod(contrib_name, mod)\n                if len(ext_warnings) > 0:\n                    all_warnings.append((contrib_name, ext_warnings))\n            CONTRIB_MODULES.append(mod)\n\n    if len(errors) > 0:\n        raise Exception(\n            \"Error loading one or more extensions:\\n\\n\" + \"\\n\".join(errors),\n        )\n\n    if len(all_warnings) == 0:\n        return\n\n    print(\"\\nExtension-provided user warnings:\")\n    for ext_name, ext_warnings in all_warnings:\n        print(\"\\n  {!r}:\\n\".format(ext_name))\n        for ext_warning in ext_warnings:\n            print(\"    * {}\".format(ext_warning))\n    print(\"\")\n\n    if not lookatme.prompt.yes(\"Continue anyways?\"):\n        exit(1)\n\n\ndef contrib_first(fn):\n    \"\"\"A decorator that allows contrib modules to override default behavior\n    of lookatme. E.g., a contrib module may override how a table is displayed\n    to enable sorting, or enable displaying images rendered with ANSII color\n    codes and box drawing characters, etc.\n\n    Contrib modules may ignore chances to override default behavior by raising\n    the ``lookatme.contrib.IgnoredByContrib`` exception.\n    \"\"\"\n    fn_name = fn.__name__\n\n    @contextlib.wraps(fn)\n    def inner(*args, **kwargs):\n        for mod in CONTRIB_MODULES:\n            if not hasattr(mod, fn_name):\n                continue\n            try:\n                return getattr(mod, fn_name)(*args, **kwargs)\n            except IgnoredByContrib:\n                pass\n\n        return fn(*args, **kwargs)\n\n    return inner\n\n\ndef shutdown_contribs():\n    \"\"\"Call the shutdown function on all contrib modules\n    \"\"\"\n    for mod in CONTRIB_MODULES:\n        getattr(mod, \"shutdown\", lambda: 1)()\n", "code_before": "\"\"\"\nThis module handles loading and using lookatme_contriba modules\n\nContrib modules are directly used \n\"\"\"\n\n\nimport contextlib\n\n\nimport lookatme.ascii_art\nfrom lookatme.exceptions import IgnoredByContrib\nimport lookatme.prompt\nfrom . import terminal\nfrom . import file_loader\n\n\nCONTRIB_MODULES = []\n\n\ndef validate_extension_mod(ext_name, ext_mod):\n    \"\"\"Validate the extension, returns an array of warnings associated with the\n    module\n    \"\"\"\n    res = []\n    if not hasattr(ext_mod, \"user_warnings\"):\n        res.append(\"'user_warnings' is missing. Extension is not able to \"\n                   \"provide user warnings.\")\n    else:\n        res += ext_mod.user_warnings()\n\n    return res\n\n\ndef load_contribs(contrib_names, safe_contribs, ignore_load_failure=False):\n    \"\"\"Load all contrib modules specified by ``contrib_names``. These should\n    all be namespaced packages under the ``lookatmecontrib`` namespace. E.g.\n    ``lookatmecontrib.calendar`` would be an extension provided by a\n    contrib module, and would be added to an ``extensions`` list in a slide's\n    YAML header as ``calendar``.\n\n    ``safe_contribs`` is a set of contrib names that are manually provided\n    by the user by the ``-e`` flag or env variable of extensions to auto-load.\n    \"\"\"\n    if contrib_names is None:\n        return\n\n    errors = []\n    all_warnings = []\n    for contrib_name in contrib_names:\n        module_name = f\"lookatme.contrib.{contrib_name}\"\n        try:\n            mod = __import__(module_name, fromlist=[contrib_name])\n        except Exception as e:\n            if ignore_load_failure:\n                continue\n            errors.append(str(e))\n        else:\n            if contrib_name not in safe_contribs:\n                ext_warnings = validate_extension_mod(contrib_name, mod)\n                if len(ext_warnings) > 0:\n                    all_warnings.append((contrib_name, ext_warnings))\n            CONTRIB_MODULES.append(mod)\n\n    if len(errors) > 0:\n        raise Exception(\n            \"Error loading one or more extensions:\\n\\n\" + \"\\n\".join(errors),\n        )\n\n    if len(all_warnings) == 0:\n        return\n\n    print(\"\\nExtension-provided user warnings:\")\n    for ext_name, ext_warnings in all_warnings:\n        print(\"\\n  {!r}:\\n\".format(ext_name))\n        for ext_warning in ext_warnings:\n            print(\"    * {}\".format(ext_warning))\n    print(\"\")\n\n    if not lookatme.prompt.yes(\"Continue anyways?\"):\n        exit(1)\n\n\ndef contrib_first(fn):\n    \"\"\"A decorator that allows contrib modules to override default behavior\n    of lookatme. E.g., a contrib module may override how a table is displayed\n    to enable sorting, or enable displaying images rendered with ANSII color\n    codes and box drawing characters, etc.\n\n    Contrib modules may ignore chances to override default behavior by raising\n    the ``lookatme.contrib.IgnoredByContrib`` exception.\n    \"\"\"\n    fn_name = fn.__name__\n\n    @contextlib.wraps(fn)\n    def inner(*args, **kwargs):\n        for mod in CONTRIB_MODULES:\n            if not hasattr(mod, fn_name):\n                continue\n            try:\n                return getattr(mod, fn_name)(*args, **kwargs)\n            except IgnoredByContrib:\n                pass\n\n        return fn(*args, **kwargs)\n\n    return inner\n\n\ndef shutdown_contribs():\n    \"\"\"Call the shutdown function on all contrib modules\n    \"\"\"\n    for mod in CONTRIB_MODULES:\n        getattr(mod, \"shutdown\", lambda: 1)()\n", "patch": "@@ -8,41 +8,78 @@\n import contextlib\n \n \n+import lookatme.ascii_art\n from lookatme.exceptions import IgnoredByContrib\n+import lookatme.prompt\n from . import terminal\n from . import file_loader\n \n \n-CONTRIB_MODULES = [\n-    terminal,\n-    file_loader,\n-]\n+CONTRIB_MODULES = []\n \n \n-def load_contribs(contrib_names):\n+def validate_extension_mod(ext_name, ext_mod):\n+    \"\"\"Validate the extension, returns an array of warnings associated with the\n+    module\n+    \"\"\"\n+    res = []\n+    if not hasattr(ext_mod, \"user_warnings\"):\n+        res.append(\"'user_warnings' is missing. Extension is not able to \"\n+                   \"provide user warnings.\")\n+    else:\n+        res += ext_mod.user_warnings()\n+\n+    return res\n+\n+\n+def load_contribs(contrib_names, safe_contribs, ignore_load_failure=False):\n     \"\"\"Load all contrib modules specified by ``contrib_names``. These should\n     all be namespaced packages under the ``lookatmecontrib`` namespace. E.g.\n     ``lookatmecontrib.calendar`` would be an extension provided by a\n     contrib module, and would be added to an ``extensions`` list in a slide's\n     YAML header as ``calendar``.\n+\n+    ``safe_contribs`` is a set of contrib names that are manually provided\n+    by the user by the ``-e`` flag or env variable of extensions to auto-load.\n     \"\"\"\n     if contrib_names is None:\n         return\n \n     errors = []\n+    all_warnings = []\n     for contrib_name in contrib_names:\n         module_name = f\"lookatme.contrib.{contrib_name}\"\n         try:\n             mod = __import__(module_name, fromlist=[contrib_name])\n-            CONTRIB_MODULES.append(mod)\n         except Exception as e:\n+            if ignore_load_failure:\n+                continue\n             errors.append(str(e))\n+        else:\n+            if contrib_name not in safe_contribs:\n+                ext_warnings = validate_extension_mod(contrib_name, mod)\n+                if len(ext_warnings) > 0:\n+                    all_warnings.append((contrib_name, ext_warnings))\n+            CONTRIB_MODULES.append(mod)\n \n     if len(errors) > 0:\n         raise Exception(\n             \"Error loading one or more extensions:\\n\\n\" + \"\\n\".join(errors),\n         )\n \n+    if len(all_warnings) == 0:\n+        return\n+\n+    print(\"\\nExtension-provided user warnings:\")\n+    for ext_name, ext_warnings in all_warnings:\n+        print(\"\\n  {!r}:\\n\".format(ext_name))\n+        for ext_warning in ext_warnings:\n+            print(\"    * {}\".format(ext_warning))\n+    print(\"\")\n+\n+    if not lookatme.prompt.yes(\"Continue anyways?\"):\n+        exit(1)\n+\n \n def contrib_first(fn):\n     \"\"\"A decorator that allows contrib modules to override default behavior", "file_path": "files/2020_10/64", "file_language": "py", "file_name": "lookatme/contrib/__init__.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def validate_extension_mod(ext_name, ext_mod):\n    \"\"\"Validate the extension, returns an array of warnings associated with the\n    module\n    \"\"\"\n    res = []\n    if not hasattr(ext_mod, \"user_warnings\"):\n        res.append(\"'user_warnings' is missing. Extension is not able to \"\n                   \"provide user warnings.\")\n    else:\n        res += ext_mod.user_warnings()\n\n    return res", "target": 0}, {"function": "def load_contribs(contrib_names, safe_contribs, ignore_load_failure=False):\n    \"\"\"Load all contrib modules specified by ``contrib_names``. These should\n    all be namespaced packages under the ``lookatmecontrib`` namespace. E.g.\n    ``lookatmecontrib.calendar`` would be an extension provided by a\n    contrib module, and would be added to an ``extensions`` list in a slide's\n    YAML header as ``calendar``.\n\n    ``safe_contribs`` is a set of contrib names that are manually provided\n    by the user by the ``-e`` flag or env variable of extensions to auto-load.\n    \"\"\"\n    if contrib_names is None:\n        return\n\n    errors = []\n    all_warnings = []\n    for contrib_name in contrib_names:\n        module_name = f\"lookatme.contrib.{contrib_name}\"\n        try:\n            mod = __import__(module_name, fromlist=[contrib_name])\n        except Exception as e:\n            if ignore_load_failure:\n                continue\n            errors.append(str(e))\n        else:\n            if contrib_name not in safe_contribs:\n                ext_warnings = validate_extension_mod(contrib_name, mod)\n                if len(ext_warnings) > 0:\n                    all_warnings.append((contrib_name, ext_warnings))\n            CONTRIB_MODULES.append(mod)\n\n    if len(errors) > 0:\n        raise Exception(\n            \"Error loading one or more extensions:\\n\\n\" + \"\\n\".join(errors),\n        )\n\n    if len(all_warnings) == 0:\n        return\n\n    print(\"\\nExtension-provided user warnings:\")\n    for ext_name, ext_warnings in all_warnings:\n        print(\"\\n  {!r}:\\n\".format(ext_name))\n        for ext_warning in ext_warnings:\n            print(\"    * {}\".format(ext_warning))\n    print(\"\")\n\n    if not lookatme.prompt.yes(\"Continue anyways?\"):\n        exit(1)", "target": 0}, {"function": "def contrib_first(fn):\n    \"\"\"A decorator that allows contrib modules to override default behavior\n    of lookatme. E.g., a contrib module may override how a table is displayed\n    to enable sorting, or enable displaying images rendered with ANSII color\n    codes and box drawing characters, etc.\n\n    Contrib modules may ignore chances to override default behavior by raising\n    the ``lookatme.contrib.IgnoredByContrib`` exception.\n    \"\"\"\n    fn_name = fn.__name__\n\n    @contextlib.wraps(fn)\n    def inner(*args, **kwargs):\n        for mod in CONTRIB_MODULES:\n            if not hasattr(mod, fn_name):\n                continue\n            try:\n                return getattr(mod, fn_name)(*args, **kwargs)\n            except IgnoredByContrib:\n                pass\n\n        return fn(*args, **kwargs)\n\n    return inner", "target": 0}, {"function": "def shutdown_contribs():\n    \"\"\"Call the shutdown function on all contrib modules\n    \"\"\"\n    for mod in CONTRIB_MODULES:\n        getattr(mod, \"shutdown\", lambda: 1)()", "target": 0}], "function_after": [{"function": "def validate_extension_mod(ext_name, ext_mod):\n    \"\"\"Validate the extension, returns an array of warnings associated with the\n    module\n    \"\"\"\n    res = []\n    if not hasattr(ext_mod, \"user_warnings\"):\n        res.append(\"'user_warnings' is missing. Extension is not able to \"\n                   \"provide user warnings.\")\n    else:\n        res += ext_mod.user_warnings()\n\n    return res", "target": 0}, {"function": "def load_contribs(contrib_names, safe_contribs, ignore_load_failure=False):\n    \"\"\"Load all contrib modules specified by ``contrib_names``. These should\n    all be namespaced packages under the ``lookatmecontrib`` namespace. E.g.\n    ``lookatmecontrib.calendar`` would be an extension provided by a\n    contrib module, and would be added to an ``extensions`` list in a slide's\n    YAML header as ``calendar``.\n\n    ``safe_contribs`` is a set of contrib names that are manually provided\n    by the user by the ``-e`` flag or env variable of extensions to auto-load.\n    \"\"\"\n    if contrib_names is None:\n        return\n\n    errors = []\n    all_warnings = []\n    for contrib_name in contrib_names:\n        module_name = f\"lookatme.contrib.{contrib_name}\"\n        try:\n            mod = __import__(module_name, fromlist=[contrib_name])\n        except Exception as e:\n            if ignore_load_failure:\n                continue\n            errors.append(str(e))\n        else:\n            if contrib_name not in safe_contribs:\n                ext_warnings = validate_extension_mod(contrib_name, mod)\n                if len(ext_warnings) > 0:\n                    all_warnings.append((contrib_name, ext_warnings))\n            CONTRIB_MODULES.append(mod)\n\n    if len(errors) > 0:\n        raise Exception(\n            \"Error loading one or more extensions:\\n\\n\" + \"\\n\".join(errors),\n        )\n\n    if len(all_warnings) == 0:\n        return\n\n    print(\"\\nExtension-provided user warnings:\")\n    for ext_name, ext_warnings in all_warnings:\n        print(\"\\n  {!r}:\\n\".format(ext_name))\n        for ext_warning in ext_warnings:\n            print(\"    * {}\".format(ext_warning))\n    print(\"\")\n\n    if not lookatme.prompt.yes(\"Continue anyways?\"):\n        exit(1)", "target": 0}, {"function": "def contrib_first(fn):\n    \"\"\"A decorator that allows contrib modules to override default behavior\n    of lookatme. E.g., a contrib module may override how a table is displayed\n    to enable sorting, or enable displaying images rendered with ANSII color\n    codes and box drawing characters, etc.\n\n    Contrib modules may ignore chances to override default behavior by raising\n    the ``lookatme.contrib.IgnoredByContrib`` exception.\n    \"\"\"\n    fn_name = fn.__name__\n\n    @contextlib.wraps(fn)\n    def inner(*args, **kwargs):\n        for mod in CONTRIB_MODULES:\n            if not hasattr(mod, fn_name):\n                continue\n            try:\n                return getattr(mod, fn_name)(*args, **kwargs)\n            except IgnoredByContrib:\n                pass\n\n        return fn(*args, **kwargs)\n\n    return inner", "target": 0}, {"function": "def shutdown_contribs():\n    \"\"\"Call the shutdown function on all contrib modules\n    \"\"\"\n    for mod in CONTRIB_MODULES:\n        getattr(mod, \"shutdown\", lambda: 1)()", "target": 0}]}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/lookatme%2Fcontrib%2Ffile_loader.py", "code": "\"\"\"\nThis module defines a built-in contrib module that enables external files to\nbe included within the slide. This is extremely useful when having source\ncode displayed in a code block, and then running/doing something with the\nsource data in a terminal on the same slide.\n\"\"\"\n\n\nfrom marshmallow import fields, Schema\nimport os\nimport subprocess\nimport yaml\n\n\nimport lookatme.config\nfrom lookatme.exceptions import IgnoredByContrib\n\n\ndef user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'file' may cause shell\",\n        \"  commands from the source markdown to be run if the 'transform'\",\n        \"  field is set\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/file_loader.html\",\n        \"  for more details\",\n    ]\n\n\nclass YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)\n\n\nclass LineRange(Schema):\n    start = fields.Integer(default=0, missing=0)\n    end = fields.Integer(default=None, missing=None)\n\n\nclass FileSchema(Schema):\n    path = fields.Str()\n    relative = fields.Boolean(default=True, missing=True)\n    lang = fields.Str(default=\"auto\", missing=\"auto\")\n    transform = fields.Str(default=None, missing=None)\n    lines = fields.Nested(\n        LineRange,\n        default=LineRange().dump(LineRange()),\n        missing=LineRange().dump(LineRange()),\n    )\n\n    class Meta:\n        render_module = YamlRender\n\n\ndef transform_data(transform_shell_cmd, input_data):\n    \"\"\"Transform the ``input_data`` using the ``transform_shell_cmd``\n    shell command.\n    \"\"\"\n    proc = subprocess.Popen(\n        transform_shell_cmd,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        stdin=subprocess.PIPE,\n    )\n    stdout, _ = proc.communicate(input=input_data)\n    return stdout\n\n\ndef render_code(token, body, stack, loop):\n    \"\"\"Render the code, ignoring all code blocks except ones with the language\n    set to ``file``.\n    \"\"\"\n    lang = token[\"lang\"] or \"\"\n    if lang != \"file\":\n        raise IgnoredByContrib\n\n    file_info_data = token[\"text\"]\n    file_info = FileSchema().loads(file_info_data)\n\n    # relative to the slide source\n    if file_info[\"relative\"]:\n        base_dir = lookatme.config.SLIDE_SOURCE_DIR\n    else:\n        base_dir = os.getcwd()\n\n    full_path = os.path.join(base_dir, file_info[\"path\"])\n    if not os.path.exists(full_path):\n        token[\"text\"] = \"File not found\"\n        token[\"lang\"] = \"text\"\n        raise IgnoredByContrib\n    \n    with open(full_path, \"rb\") as f:\n        file_data = f.read()\n\n    if file_info[\"transform\"] is not None:\n        file_data = transform_data(file_info[\"transform\"], file_data)\n\n    lines = file_data.split(b\"\\n\")\n    lines = lines[file_info[\"lines\"][\"start\"]:file_info[\"lines\"][\"end\"]]\n    file_data = b\"\\n\".join(lines)\n    token[\"text\"] = file_data\n    token[\"lang\"] = file_info[\"lang\"]\n    raise IgnoredByContrib\n", "code_before": "\"\"\"\nThis module defines a built-in contrib module that enables external files to\nbe included within the slide. This is extremely useful when having source\ncode displayed in a code block, and then running/doing something with the\nsource data in a terminal on the same slide.\n\"\"\"\n\n\nfrom marshmallow import fields, Schema\nimport os\nimport subprocess\nimport yaml\n\n\nimport lookatme.config\nfrom lookatme.exceptions import IgnoredByContrib\n\n\ndef user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'file' may cause shell\",\n        \"  commands from the source markdown to be run if the 'transform'\",\n        \"  field is set\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/file_loader.html\",\n        \"  for more details\",\n    ]\n\n\nclass YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)\n\n\nclass LineRange(Schema):\n    start = fields.Integer(default=0, missing=0)\n    end = fields.Integer(default=None, missing=None)\n\n\nclass FileSchema(Schema):\n    path = fields.Str()\n    relative = fields.Boolean(default=True, missing=True)\n    lang = fields.Str(default=\"auto\", missing=\"auto\")\n    transform = fields.Str(default=None, missing=None)\n    lines = fields.Nested(\n        LineRange,\n        default=LineRange().dump(LineRange()),\n        missing=LineRange().dump(LineRange()),\n    )\n\n    class Meta:\n        render_module = YamlRender\n\n\ndef transform_data(transform_shell_cmd, input_data):\n    \"\"\"Transform the ``input_data`` using the ``transform_shell_cmd``\n    shell command.\n    \"\"\"\n    proc = subprocess.Popen(\n        transform_shell_cmd,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        stdin=subprocess.PIPE,\n    )\n    stdout, _ = proc.communicate(input=input_data)\n    return stdout\n\n\ndef render_code(token, body, stack, loop):\n    \"\"\"Render the code, ignoring all code blocks except ones with the language\n    set to ``file``.\n    \"\"\"\n    lang = token[\"lang\"] or \"\"\n    if lang != \"file\":\n        raise IgnoredByContrib\n\n    file_info_data = token[\"text\"]\n    file_info = FileSchema().loads(file_info_data)\n\n    # relative to the slide source\n    if file_info[\"relative\"]:\n        base_dir = lookatme.config.SLIDE_SOURCE_DIR\n    else:\n        base_dir = os.getcwd()\n\n    full_path = os.path.join(base_dir, file_info[\"path\"])\n    if not os.path.exists(full_path):\n        token[\"text\"] = \"File not found\"\n        token[\"lang\"] = \"text\"\n        raise IgnoredByContrib\n    \n    with open(full_path, \"rb\") as f:\n        file_data = f.read()\n\n    if file_info[\"transform\"] is not None:\n        file_data = transform_data(file_info[\"transform\"], file_data)\n\n    lines = file_data.split(b\"\\n\")\n    lines = lines[file_info[\"lines\"][\"start\"]:file_info[\"lines\"][\"end\"]]\n    file_data = b\"\\n\".join(lines)\n    token[\"text\"] = file_data\n    token[\"lang\"] = file_info[\"lang\"]\n    raise IgnoredByContrib\n", "patch": "@@ -16,6 +16,19 @@\n from lookatme.exceptions import IgnoredByContrib\n \n \n+def user_warnings():\n+    \"\"\"Provide warnings to the user that loading this extension may cause\n+    shell commands specified in the markdown to be run.\n+    \"\"\"\n+    return [\n+        \"Code-blocks with a language starting with 'file' may cause shell\",\n+        \"  commands from the source markdown to be run if the 'transform'\",\n+        \"  field is set\",\n+        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/file_loader.html\",\n+        \"  for more details\",\n+    ]\n+\n+\n class YamlRender:\n     loads = lambda data: yaml.safe_load(data)\n     dumps = lambda data: yaml.safe_dump(data)", "file_path": "files/2020_10/65", "file_language": "py", "file_name": "lookatme/contrib/file_loader.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 1, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'file' may cause shell\",\n        \"  commands from the source markdown to be run if the 'transform'\",\n        \"  field is set\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/file_loader.html\",\n        \"  for more details\",\n    ]", "target": 0}, {"function": "class YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)", "target": 0}, {"function": "class LineRange(Schema):\n    start = fields.Integer(default=0, missing=0)\n    end = fields.Integer(default=None, missing=None)", "target": 0}, {"function": "class FileSchema(Schema):\n    path = fields.Str()\n    relative = fields.Boolean(default=True, missing=True)\n    lang = fields.Str(default=\"auto\", missing=\"auto\")\n    transform = fields.Str(default=None, missing=None)\n    lines = fields.Nested(\n        LineRange,\n        default=LineRange().dump(LineRange()),\n        missing=LineRange().dump(LineRange()),\n    )\n\n    class Meta:\n        render_module = YamlRender", "target": 0}, {"function": "def transform_data(transform_shell_cmd, input_data):\n    \"\"\"Transform the ``input_data`` using the ``transform_shell_cmd``\n    shell command.\n    \"\"\"\n    proc = subprocess.Popen(\n        transform_shell_cmd,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        stdin=subprocess.PIPE,\n    )\n    stdout, _ = proc.communicate(input=input_data)\n    return stdout", "target": 0}, {"function": "def render_code(token, body, stack, loop):\n    \"\"\"Render the code, ignoring all code blocks except ones with the language\n    set to ``file``.\n    \"\"\"\n    lang = token[\"lang\"] or \"\"\n    if lang != \"file\":\n        raise IgnoredByContrib\n\n    file_info_data = token[\"text\"]\n    file_info = FileSchema().loads(file_info_data)\n\n    # relative to the slide source\n    if file_info[\"relative\"]:\n        base_dir = lookatme.config.SLIDE_SOURCE_DIR\n    else:\n        base_dir = os.getcwd()\n\n    full_path = os.path.join(base_dir, file_info[\"path\"])\n    if not os.path.exists(full_path):\n        token[\"text\"] = \"File not found\"\n        token[\"lang\"] = \"text\"\n        raise IgnoredByContrib\n    \n    with open(full_path, \"rb\") as f:\n        file_data = f.read()\n\n    if file_info[\"transform\"] is not None:\n        file_data = transform_data(file_info[\"transform\"], file_data)\n\n    lines = file_data.split(b\"\\n\")\n    lines = lines[file_info[\"lines\"][\"start\"]:file_info[\"lines\"][\"end\"]]\n    file_data = b\"\\n\".join(lines)\n    token[\"text\"] = file_data\n    token[\"lang\"] = file_info[\"lang\"]\n    raise IgnoredByContrib", "target": 0}], "function_after": [{"function": "def user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'file' may cause shell\",\n        \"  commands from the source markdown to be run if the 'transform'\",\n        \"  field is set\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/file_loader.html\",\n        \"  for more details\",\n    ]", "target": 0}, {"function": "class YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)", "target": 0}, {"function": "class LineRange(Schema):\n    start = fields.Integer(default=0, missing=0)\n    end = fields.Integer(default=None, missing=None)", "target": 0}, {"function": "class FileSchema(Schema):\n    path = fields.Str()\n    relative = fields.Boolean(default=True, missing=True)\n    lang = fields.Str(default=\"auto\", missing=\"auto\")\n    transform = fields.Str(default=None, missing=None)\n    lines = fields.Nested(\n        LineRange,\n        default=LineRange().dump(LineRange()),\n        missing=LineRange().dump(LineRange()),\n    )\n\n    class Meta:\n        render_module = YamlRender", "target": 0}, {"function": "def transform_data(transform_shell_cmd, input_data):\n    \"\"\"Transform the ``input_data`` using the ``transform_shell_cmd``\n    shell command.\n    \"\"\"\n    proc = subprocess.Popen(\n        transform_shell_cmd,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        stdin=subprocess.PIPE,\n    )\n    stdout, _ = proc.communicate(input=input_data)\n    return stdout", "target": 0}, {"function": "def render_code(token, body, stack, loop):\n    \"\"\"Render the code, ignoring all code blocks except ones with the language\n    set to ``file``.\n    \"\"\"\n    lang = token[\"lang\"] or \"\"\n    if lang != \"file\":\n        raise IgnoredByContrib\n\n    file_info_data = token[\"text\"]\n    file_info = FileSchema().loads(file_info_data)\n\n    # relative to the slide source\n    if file_info[\"relative\"]:\n        base_dir = lookatme.config.SLIDE_SOURCE_DIR\n    else:\n        base_dir = os.getcwd()\n\n    full_path = os.path.join(base_dir, file_info[\"path\"])\n    if not os.path.exists(full_path):\n        token[\"text\"] = \"File not found\"\n        token[\"lang\"] = \"text\"\n        raise IgnoredByContrib\n    \n    with open(full_path, \"rb\") as f:\n        file_data = f.read()\n\n    if file_info[\"transform\"] is not None:\n        file_data = transform_data(file_info[\"transform\"], file_data)\n\n    lines = file_data.split(b\"\\n\")\n    lines = lines[file_info[\"lines\"][\"start\"]:file_info[\"lines\"][\"end\"]]\n    file_data = b\"\\n\".join(lines)\n    token[\"text\"] = file_data\n    token[\"lang\"] = file_info[\"lang\"]\n    raise IgnoredByContrib", "target": 0}]}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/lookatme%2Fcontrib%2Fterminal.py", "code": "\"\"\"\nThis module defines a built-in contrib module that enables terminal embedding\nwithin a slide.\n\"\"\"\n\n\nfrom marshmallow import fields, Schema\nimport os\nimport re\nimport shlex\nimport signal\nimport urwid\nimport yaml\n\n\nimport lookatme.render\nfrom lookatme.exceptions import IgnoredByContrib\nimport lookatme.config\n\n\ndef user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'terminal' will cause shell\",\n        \"  commands from the source markdown to be run\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/terminal.html\",\n        \"  for more details\",\n    ]\n\n\nclass YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)\n\n\nclass TerminalExSchema(Schema):\n    \"\"\"The schema used for ``terminal-ex`` code blocks.\n    \"\"\"\n    command = fields.Str()\n    rows = fields.Int(default=10, missing=10)\n    init_text = fields.Str(default=None, missing=None)\n    init_wait = fields.Str(default=None, missing=None)\n    init_codeblock = fields.Bool(default=True, missing=True)\n    init_codeblock_lang = fields.Str(default=\"text\", missing=\"text\")\n\n    class Meta:\n        render_module = YamlRender\n\n\nCREATED_TERMS = []\n\n\ndef render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n\n    numbered_term_match = re.match(r'terminal(\\d+)', lang)\n    if lang != \"terminal-ex\" and numbered_term_match is None:\n        raise IgnoredByContrib\n\n    if numbered_term_match is not None:\n        term_data = TerminalExSchema().load({\n            \"command\": token[\"text\"].strip(),\n            \"rows\": int(numbered_term_match.group(1)),\n            \"init_codeblock\": False,\n        })\n\n    else:\n        term_data = TerminalExSchema().loads(token[\"text\"])\n\n        if term_data[\"init_text\"] is not None and term_data[\"init_wait\"] is not None:\n            orig_command = term_data[\"command\"]\n            term_data[\"command\"] = \" \".join([shlex.quote(x) for x in [\n                \"expect\", \"-c\", \";\".join([\n                   'spawn -noecho {}'.format(term_data[\"command\"]),\n                    'expect {{{}}}'.format(term_data[\"init_wait\"]),\n                    'send {{{}}}'.format(term_data[\"init_text\"]),\n                    'interact',\n                    'exit',\n                ])\n            ]])\n            \n\n    term = urwid.Terminal(\n        shlex.split(term_data[\"command\"].strip()),\n        main_loop=loop,\n        encoding=\"utf8\",\n    )\n    CREATED_TERMS.append(term)\n\n    line_box = urwid.LineBox(urwid.BoxAdapter(term, height=term_data[\"rows\"]))\n    line_box.no_cache = [\"render\"]\n\n    res = []\n\n    if term_data[\"init_codeblock\"] is True:\n        fake_token = {\n            \"text\": term_data[\"init_text\"],\n            \"lang\": term_data[\"init_codeblock_lang\"],\n        }\n        res += lookatme.render.markdown_block.render_code(\n            fake_token, body, stack, loop\n        )\n    \n    res += [\n        urwid.Divider(),\n        line_box,\n        urwid.Divider(),\n    ]\n\n    return res\n\n\ndef shutdown():\n    for idx, term in enumerate(CREATED_TERMS):\n        lookatme.config.LOG.debug(f\"Terminating terminal {idx+1}/{len(CREATED_TERMS)}\")\n        if term.pid is not None:\n            term.terminate()\n", "code_before": "\"\"\"\nThis module defines a built-in contrib module that enables terminal embedding\nwithin a slide.\n\"\"\"\n\n\nfrom marshmallow import fields, Schema\nimport os\nimport re\nimport shlex\nimport signal\nimport urwid\nimport yaml\n\n\nimport lookatme.render\nfrom lookatme.exceptions import IgnoredByContrib\nimport lookatme.config\n\n\ndef user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'terminal' will cause shell\",\n        \"  commands from the source markdown to be run\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/terminal.html\",\n        \"  for more details\",\n    ]\n\n\nclass YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)\n\n\nclass TerminalExSchema(Schema):\n    \"\"\"The schema used for ``terminal-ex`` code blocks.\n    \"\"\"\n    command = fields.Str()\n    rows = fields.Int(default=10, missing=10)\n    init_text = fields.Str(default=None, missing=None)\n    init_wait = fields.Str(default=None, missing=None)\n    init_codeblock = fields.Bool(default=True, missing=True)\n    init_codeblock_lang = fields.Str(default=\"text\", missing=\"text\")\n\n    class Meta:\n        render_module = YamlRender\n\n\nCREATED_TERMS = []\n\n\ndef render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n\n    numbered_term_match = re.match(r'terminal(\\d+)', lang)\n    if lang != \"terminal-ex\" and numbered_term_match is None:\n        raise IgnoredByContrib\n\n    if numbered_term_match is not None:\n        term_data = TerminalExSchema().load({\n            \"command\": token[\"text\"].strip(),\n            \"rows\": int(numbered_term_match.group(1)),\n            \"init_codeblock\": False,\n        })\n\n    else:\n        term_data = TerminalExSchema().loads(token[\"text\"])\n\n        if term_data[\"init_text\"] is not None and term_data[\"init_wait\"] is not None:\n            orig_command = term_data[\"command\"]\n            term_data[\"command\"] = \" \".join([shlex.quote(x) for x in [\n                \"expect\", \"-c\", \";\".join([\n                   'spawn -noecho {}'.format(term_data[\"command\"]),\n                    'expect {{{}}}'.format(term_data[\"init_wait\"]),\n                    'send {{{}}}'.format(term_data[\"init_text\"]),\n                    'interact',\n                    'exit',\n                ])\n            ]])\n            \n\n    term = urwid.Terminal(\n        shlex.split(term_data[\"command\"].strip()),\n        main_loop=loop,\n        encoding=\"utf8\",\n    )\n    CREATED_TERMS.append(term)\n\n    line_box = urwid.LineBox(urwid.BoxAdapter(term, height=term_data[\"rows\"]))\n    line_box.no_cache = [\"render\"]\n\n    res = []\n\n    if term_data[\"init_codeblock\"] is True:\n        fake_token = {\n            \"text\": term_data[\"init_text\"],\n            \"lang\": term_data[\"init_codeblock_lang\"],\n        }\n        res += lookatme.render.markdown_block.render_code(\n            fake_token, body, stack, loop\n        )\n    \n    res += [\n        urwid.Divider(),\n        line_box,\n        urwid.Divider(),\n    ]\n\n    return res\n\n\ndef shutdown():\n    for idx, term in enumerate(CREATED_TERMS):\n        lookatme.config.LOG.debug(f\"Terminating terminal {idx+1}/{len(CREATED_TERMS)}\")\n        if term.pid is not None:\n            term.terminate()\n", "patch": "@@ -18,6 +18,18 @@\n import lookatme.config\n \n \n+def user_warnings():\n+    \"\"\"Provide warnings to the user that loading this extension may cause\n+    shell commands specified in the markdown to be run.\n+    \"\"\"\n+    return [\n+        \"Code-blocks with a language starting with 'terminal' will cause shell\",\n+        \"  commands from the source markdown to be run\",\n+        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/terminal.html\",\n+        \"  for more details\",\n+    ]\n+\n+\n class YamlRender:\n     loads = lambda data: yaml.safe_load(data)\n     dumps = lambda data: yaml.safe_dump(data)", "file_path": "files/2020_10/66", "file_language": "py", "file_name": "lookatme/contrib/terminal.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'terminal' will cause shell\",\n        \"  commands from the source markdown to be run\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/terminal.html\",\n        \"  for more details\",\n    ]", "target": 0}, {"function": "class YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)", "target": 0}, {"function": "class TerminalExSchema(Schema):\n    \"\"\"The schema used for ``terminal-ex`` code blocks.\n    \"\"\"\n    command = fields.Str()\n    rows = fields.Int(default=10, missing=10)\n    init_text = fields.Str(default=None, missing=None)\n    init_wait = fields.Str(default=None, missing=None)\n    init_codeblock = fields.Bool(default=True, missing=True)\n    init_codeblock_lang = fields.Str(default=\"text\", missing=\"text\")\n\n    class Meta:\n        render_module = YamlRender", "target": 0}, {"function": "def render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n\n    numbered_term_match = re.match(r'terminal(\\d+)', lang)\n    if lang != \"terminal-ex\" and numbered_term_match is None:\n        raise IgnoredByContrib\n\n    if numbered_term_match is not None:\n        term_data = TerminalExSchema().load({\n            \"command\": token[\"text\"].strip(),\n            \"rows\": int(numbered_term_match.group(1)),\n            \"init_codeblock\": False,\n        })\n\n    else:\n        term_data = TerminalExSchema().loads(token[\"text\"])\n\n        if term_data[\"init_text\"] is not None and term_data[\"init_wait\"] is not None:\n            orig_command = term_data[\"command\"]\n            term_data[\"command\"] = \" \".join([shlex.quote(x) for x in [\n                \"expect\", \"-c\", \";\".join([\n                   'spawn -noecho {}'.format(term_data[\"command\"]),\n                    'expect {{{}}}'.format(term_data[\"init_wait\"]),\n                    'send {{{}}}'.format(term_data[\"init_text\"]),\n                    'interact',\n                    'exit',\n                ])\n            ]])\n            \n\n    term = urwid.Terminal(\n        shlex.split(term_data[\"command\"].strip()),\n        main_loop=loop,\n        encoding=\"utf8\",\n    )\n    CREATED_TERMS.append(term)\n\n    line_box = urwid.LineBox(urwid.BoxAdapter(term, height=term_data[\"rows\"]))\n    line_box.no_cache = [\"render\"]\n\n    res = []\n\n    if term_data[\"init_codeblock\"] is True:\n        fake_token = {\n            \"text\": term_data[\"init_text\"],\n            \"lang\": term_data[\"init_codeblock_lang\"],\n        }\n        res += lookatme.render.markdown_block.render_code(\n            fake_token, body, stack, loop\n        )\n    \n    res += [\n        urwid.Divider(),\n        line_box,\n        urwid.Divider(),\n    ]\n\n    return res", "target": 0}, {"function": "def shutdown():\n    for idx, term in enumerate(CREATED_TERMS):\n        lookatme.config.LOG.debug(f\"Terminating terminal {idx+1}/{len(CREATED_TERMS)}\")\n        if term.pid is not None:\n            term.terminate()", "target": 0}], "function_after": [{"function": "def user_warnings():\n    \"\"\"Provide warnings to the user that loading this extension may cause\n    shell commands specified in the markdown to be run.\n    \"\"\"\n    return [\n        \"Code-blocks with a language starting with 'terminal' will cause shell\",\n        \"  commands from the source markdown to be run\",\n        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/terminal.html\",\n        \"  for more details\",\n    ]", "target": 0}, {"function": "class YamlRender:\n    loads = lambda data: yaml.safe_load(data)\n    dumps = lambda data: yaml.safe_dump(data)", "target": 0}, {"function": "class TerminalExSchema(Schema):\n    \"\"\"The schema used for ``terminal-ex`` code blocks.\n    \"\"\"\n    command = fields.Str()\n    rows = fields.Int(default=10, missing=10)\n    init_text = fields.Str(default=None, missing=None)\n    init_wait = fields.Str(default=None, missing=None)\n    init_codeblock = fields.Bool(default=True, missing=True)\n    init_codeblock_lang = fields.Str(default=\"text\", missing=\"text\")\n\n    class Meta:\n        render_module = YamlRender", "target": 0}, {"function": "def render_code(token, body, stack, loop):\n    lang = token[\"lang\"] or \"\"\n\n    numbered_term_match = re.match(r'terminal(\\d+)', lang)\n    if lang != \"terminal-ex\" and numbered_term_match is None:\n        raise IgnoredByContrib\n\n    if numbered_term_match is not None:\n        term_data = TerminalExSchema().load({\n            \"command\": token[\"text\"].strip(),\n            \"rows\": int(numbered_term_match.group(1)),\n            \"init_codeblock\": False,\n        })\n\n    else:\n        term_data = TerminalExSchema().loads(token[\"text\"])\n\n        if term_data[\"init_text\"] is not None and term_data[\"init_wait\"] is not None:\n            orig_command = term_data[\"command\"]\n            term_data[\"command\"] = \" \".join([shlex.quote(x) for x in [\n                \"expect\", \"-c\", \";\".join([\n                   'spawn -noecho {}'.format(term_data[\"command\"]),\n                    'expect {{{}}}'.format(term_data[\"init_wait\"]),\n                    'send {{{}}}'.format(term_data[\"init_text\"]),\n                    'interact',\n                    'exit',\n                ])\n            ]])\n            \n\n    term = urwid.Terminal(\n        shlex.split(term_data[\"command\"].strip()),\n        main_loop=loop,\n        encoding=\"utf8\",\n    )\n    CREATED_TERMS.append(term)\n\n    line_box = urwid.LineBox(urwid.BoxAdapter(term, height=term_data[\"rows\"]))\n    line_box.no_cache = [\"render\"]\n\n    res = []\n\n    if term_data[\"init_codeblock\"] is True:\n        fake_token = {\n            \"text\": term_data[\"init_text\"],\n            \"lang\": term_data[\"init_codeblock_lang\"],\n        }\n        res += lookatme.render.markdown_block.render_code(\n            fake_token, body, stack, loop\n        )\n    \n    res += [\n        urwid.Divider(),\n        line_box,\n        urwid.Divider(),\n    ]\n\n    return res", "target": 0}, {"function": "def shutdown():\n    for idx, term in enumerate(CREATED_TERMS):\n        lookatme.config.LOG.debug(f\"Terminating terminal {idx+1}/{len(CREATED_TERMS)}\")\n        if term.pid is not None:\n            term.terminate()", "target": 0}]}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/lookatme%2Fpres.py", "code": "\"\"\"\nDefines Presentation specific objects\n\"\"\"\n\n\nimport mistune\nimport os\nimport threading\nimport time\n\n\nimport lookatme.config\nimport lookatme.contrib\nfrom lookatme.parser import Parser\nimport lookatme.prompt\nimport lookatme.themes\nimport lookatme.tui\nfrom lookatme.utils import dict_deep_update\n\n\nclass Presentation(object):\n    \"\"\"Defines a presentation\n    \"\"\"\n    def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n                 single_slide=False, preload_extensions=None, safe=False,\n                 no_ext_warn=False, ignore_ext_failure=False):\n        \"\"\"Creates a new Presentation\n\n        :param stream input_stream: An input stream from which to read the\n            slide data\n        \"\"\"\n        self.preload_extensions = preload_extensions or []\n        self.input_filename = None\n        if hasattr(input_stream, \"name\"):\n            lookatme.config.SLIDE_SOURCE_DIR = os.path.dirname(input_stream.name)\n            self.input_filename = input_stream.name\n\n        self.style_override = style_override\n        self.live_reload = live_reload\n        self.tui = None\n        self.single_slide = single_slide\n        self.safe = safe\n        self.no_ext_warn = no_ext_warn\n        self.ignore_ext_failure = ignore_ext_failure\n        self.initial_load_complete = False\n\n        self.theme_mod = __import__(\"lookatme.themes.\" + theme, fromlist=[theme])\n\n        if self.live_reload:\n            self.reload_thread = threading.Thread(target=self.reload_watcher)\n            self.reload_thread.daemon = True\n            self.reload_thread.start()\n\n        self.reload(data=input_stream.read())\n        self.initial_load_complete = True\n\n    def reload_watcher(self):\n        \"\"\"Watch for changes to the input filename, automatically reloading\n        when the modified time has changed.\n        \"\"\"\n        if self.input_filename is None:\n            return\n        \n        last_mod_time = os.path.getmtime(self.input_filename)\n        while True:\n            try:\n                curr_mod_time = os.path.getmtime(self.input_filename)\n                if curr_mod_time != last_mod_time:\n                    self.tui.reload()\n                    self.tui.loop.draw_screen()\n                    last_mod_time = curr_mod_time\n            except Exception:\n                pass\n            finally:\n                time.sleep(0.25)\n\n    def reload(self, data=None):\n        \"\"\"Reload this presentation\n\n        :param str data: The data to render for this slide deck (optional)\n        \"\"\"\n        if data is None:\n            with open(self.input_filename, \"r\") as f:\n                data = f.read()\n\n        parser = Parser(single_slide=self.single_slide)\n        self.meta, self.slides = parser.parse(data)\n\n        # only load extensions once! Live editing does not support\n        # auto-extension reloading\n        if not self.initial_load_complete:\n            safe_exts = set(self.preload_extensions)\n            new_exts = set()\n            # only load if running with safe=False\n            if not self.safe:\n                source_exts = set(self.meta.get(\"extensions\", []))\n                new_exts = source_exts - safe_exts\n                self.warn_exts(new_exts)\n\n            all_exts = safe_exts | new_exts\n\n            lookatme.contrib.load_contribs(\n                all_exts,\n                safe_exts,\n                self.ignore_ext_failure,\n            )\n\n        self.styles = lookatme.themes.ensure_defaults(self.theme_mod)\n        dict_deep_update(self.styles, self.meta.get(\"styles\", {}))\n\n        # now apply any command-line style overrides\n        if self.style_override is not None:\n            self.styles[\"style\"] = self.style_override\n\n        lookatme.config.STYLE = self.styles\n        self.initial_load_complete = True\n\n    def warn_exts(self, exts):\n        \"\"\"Warn about source-provided extensions that are to-be-loaded\n        \"\"\"\n        if len(exts) == 0 or self.no_ext_warn:\n            return\n\n        warning = lookatme.ascii_art.WARNING\n        print(\"\\n\".join([\"    \" + x for x in warning.split(\"\\n\")]))\n\n        print(\"New extensions required by {!r} are about to be loaded:\\n\".format(\n            self.input_filename\n        ))\n        for ext in exts:\n            print(\"  - {!r}\".format(\"lookatme.contrib.\" + ext))\n        print(\"\")\n\n        if not lookatme.prompt.yes(\"Are you ok with attempting to load them?\"):\n            print(\"Bailing due to unacceptance of source-required extensions\")\n            exit(1)\n\n    def run(self, start_slide=0):\n        \"\"\"Run the presentation!\n        \"\"\"\n        self.tui = lookatme.tui.create_tui(self, start_slide=start_slide)\n        self.tui.run()\n", "code_before": "\"\"\"\nDefines Presentation specific objects\n\"\"\"\n\n\nimport mistune\nimport os\nimport threading\nimport time\n\n\nimport lookatme.config\nimport lookatme.contrib\nfrom lookatme.parser import Parser\nimport lookatme.prompt\nimport lookatme.themes\nimport lookatme.tui\nfrom lookatme.utils import dict_deep_update\n\n\nclass Presentation(object):\n    \"\"\"Defines a presentation\n    \"\"\"\n    def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n                 single_slide=False, preload_extensions=None, safe=False,\n                 no_ext_warn=False, ignore_ext_failure=False):\n        \"\"\"Creates a new Presentation\n\n        :param stream input_stream: An input stream from which to read the\n            slide data\n        \"\"\"\n        self.preload_extensions = preload_extensions or []\n        self.input_filename = None\n        if hasattr(input_stream, \"name\"):\n            lookatme.config.SLIDE_SOURCE_DIR = os.path.dirname(input_stream.name)\n            self.input_filename = input_stream.name\n\n        self.style_override = style_override\n        self.live_reload = live_reload\n        self.tui = None\n        self.single_slide = single_slide\n        self.safe = safe\n        self.no_ext_warn = no_ext_warn\n        self.ignore_ext_failure = ignore_ext_failure\n        self.initial_load_complete = False\n\n        self.theme_mod = __import__(\"lookatme.themes.\" + theme, fromlist=[theme])\n\n        if self.live_reload:\n            self.reload_thread = threading.Thread(target=self.reload_watcher)\n            self.reload_thread.daemon = True\n            self.reload_thread.start()\n\n        self.reload(data=input_stream.read())\n        self.initial_load_complete = True\n\n    def reload_watcher(self):\n        \"\"\"Watch for changes to the input filename, automatically reloading\n        when the modified time has changed.\n        \"\"\"\n        if self.input_filename is None:\n            return\n        \n        last_mod_time = os.path.getmtime(self.input_filename)\n        while True:\n            try:\n                curr_mod_time = os.path.getmtime(self.input_filename)\n                if curr_mod_time != last_mod_time:\n                    self.tui.reload()\n                    self.tui.loop.draw_screen()\n                    last_mod_time = curr_mod_time\n            except Exception:\n                pass\n            finally:\n                time.sleep(0.25)\n\n    def reload(self, data=None):\n        \"\"\"Reload this presentation\n\n        :param str data: The data to render for this slide deck (optional)\n        \"\"\"\n        if data is None:\n            with open(self.input_filename, \"r\") as f:\n                data = f.read()\n\n        parser = Parser(single_slide=self.single_slide)\n        self.meta, self.slides = parser.parse(data)\n\n        # only load extensions once! Live editing does not support\n        # auto-extension reloading\n        if not self.initial_load_complete:\n            safe_exts = set(self.preload_extensions)\n            new_exts = set()\n            # only load if running with safe=False\n            if not self.safe:\n                source_exts = set(self.meta.get(\"extensions\", []))\n                new_exts = source_exts - safe_exts\n                self.warn_exts(new_exts)\n\n            all_exts = safe_exts | new_exts\n\n            lookatme.contrib.load_contribs(\n                all_exts,\n                safe_exts,\n                self.ignore_ext_failure,\n            )\n\n        self.styles = lookatme.themes.ensure_defaults(self.theme_mod)\n        dict_deep_update(self.styles, self.meta.get(\"styles\", {}))\n\n        # now apply any command-line style overrides\n        if self.style_override is not None:\n            self.styles[\"style\"] = self.style_override\n\n        lookatme.config.STYLE = self.styles\n        self.initial_load_complete = True\n\n    def warn_exts(self, exts):\n        \"\"\"Warn about source-provided extensions that are to-be-loaded\n        \"\"\"\n        if len(exts) == 0 or self.no_ext_warn:\n            return\n\n        warning = lookatme.ascii_art.WARNING\n        print(\"\\n\".join([\"    \" + x for x in warning.split(\"\\n\")]))\n\n        print(\"New extensions required by {!r} are about to be loaded:\\n\".format(\n            self.input_filename\n        ))\n        for ext in exts:\n            print(\"  - {!r}\".format(\"lookatme.contrib.\" + ext))\n        print(\"\")\n\n        if not lookatme.prompt.yes(\"Are you ok with attempting to load them?\"):\n            print(\"Bailing due to unacceptance of source-required extensions\")\n            exit(1)\n\n    def run(self, start_slide=0):\n        \"\"\"Run the presentation!\n        \"\"\"\n        self.tui = lookatme.tui.create_tui(self, start_slide=start_slide)\n        self.tui.run()\n", "patch": "@@ -12,6 +12,7 @@\n import lookatme.config\n import lookatme.contrib\n from lookatme.parser import Parser\n+import lookatme.prompt\n import lookatme.themes\n import lookatme.tui\n from lookatme.utils import dict_deep_update\n@@ -21,7 +22,8 @@ class Presentation(object):\n     \"\"\"Defines a presentation\n     \"\"\"\n     def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n-                 single_slide=False, preload_extensions=None):\n+                 single_slide=False, preload_extensions=None, safe=False,\n+                 no_ext_warn=False, ignore_ext_failure=False):\n         \"\"\"Creates a new Presentation\n \n         :param stream input_stream: An input stream from which to read the\n@@ -37,6 +39,10 @@ def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n         self.live_reload = live_reload\n         self.tui = None\n         self.single_slide = single_slide\n+        self.safe = safe\n+        self.no_ext_warn = no_ext_warn\n+        self.ignore_ext_failure = ignore_ext_failure\n+        self.initial_load_complete = False\n \n         self.theme_mod = __import__(\"lookatme.themes.\" + theme, fromlist=[theme])\n \n@@ -46,6 +52,7 @@ def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n             self.reload_thread.start()\n \n         self.reload(data=input_stream.read())\n+        self.initial_load_complete = True\n \n     def reload_watcher(self):\n         \"\"\"Watch for changes to the input filename, automatically reloading\n@@ -79,9 +86,24 @@ def reload(self, data=None):\n         parser = Parser(single_slide=self.single_slide)\n         self.meta, self.slides = parser.parse(data)\n \n-        all_exts = set(self.preload_extensions)\n-        all_exts |= set(self.meta.get(\"extensions\", []))\n-        lookatme.contrib.load_contribs(all_exts)\n+        # only load extensions once! Live editing does not support\n+        # auto-extension reloading\n+        if not self.initial_load_complete:\n+            safe_exts = set(self.preload_extensions)\n+            new_exts = set()\n+            # only load if running with safe=False\n+            if not self.safe:\n+                source_exts = set(self.meta.get(\"extensions\", []))\n+                new_exts = source_exts - safe_exts\n+                self.warn_exts(new_exts)\n+\n+            all_exts = safe_exts | new_exts\n+\n+            lookatme.contrib.load_contribs(\n+                all_exts,\n+                safe_exts,\n+                self.ignore_ext_failure,\n+            )\n \n         self.styles = lookatme.themes.ensure_defaults(self.theme_mod)\n         dict_deep_update(self.styles, self.meta.get(\"styles\", {}))\n@@ -91,6 +113,27 @@ def reload(self, data=None):\n             self.styles[\"style\"] = self.style_override\n \n         lookatme.config.STYLE = self.styles\n+        self.initial_load_complete = True\n+\n+    def warn_exts(self, exts):\n+        \"\"\"Warn about source-provided extensions that are to-be-loaded\n+        \"\"\"\n+        if len(exts) == 0 or self.no_ext_warn:\n+            return\n+\n+        warning = lookatme.ascii_art.WARNING\n+        print(\"\\n\".join([\"    \" + x for x in warning.split(\"\\n\")]))\n+\n+        print(\"New extensions required by {!r} are about to be loaded:\\n\".format(\n+            self.input_filename\n+        ))\n+        for ext in exts:\n+            print(\"  - {!r}\".format(\"lookatme.contrib.\" + ext))\n+        print(\"\")\n+\n+        if not lookatme.prompt.yes(\"Are you ok with attempting to load them?\"):\n+            print(\"Bailing due to unacceptance of source-required extensions\")\n+            exit(1)\n \n     def run(self, start_slide=0):\n         \"\"\"Run the presentation!", "file_path": "files/2020_10/67", "file_language": "py", "file_name": "lookatme/pres.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class Presentation(object):\n    \"\"\"Defines a presentation\n    \"\"\"\n    def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n                 single_slide=False, preload_extensions=None, safe=False,\n                 no_ext_warn=False, ignore_ext_failure=False):\n        \"\"\"Creates a new Presentation\n\n        :param stream input_stream: An input stream from which to read the\n            slide data\n        \"\"\"\n        self.preload_extensions = preload_extensions or []\n        self.input_filename = None\n        if hasattr(input_stream, \"name\"):\n            lookatme.config.SLIDE_SOURCE_DIR = os.path.dirname(input_stream.name)\n            self.input_filename = input_stream.name\n\n        self.style_override = style_override\n        self.live_reload = live_reload\n        self.tui = None\n        self.single_slide = single_slide\n        self.safe = safe\n        self.no_ext_warn = no_ext_warn\n        self.ignore_ext_failure = ignore_ext_failure\n        self.initial_load_complete = False\n\n        self.theme_mod = __import__(\"lookatme.themes.\" + theme, fromlist=[theme])\n\n        if self.live_reload:\n            self.reload_thread = threading.Thread(target=self.reload_watcher)\n            self.reload_thread.daemon = True\n            self.reload_thread.start()\n\n        self.reload(data=input_stream.read())\n        self.initial_load_complete = True\n\n    def reload_watcher(self):\n        \"\"\"Watch for changes to the input filename, automatically reloading\n        when the modified time has changed.\n        \"\"\"\n        if self.input_filename is None:\n            return\n        \n        last_mod_time = os.path.getmtime(self.input_filename)\n        while True:\n            try:\n                curr_mod_time = os.path.getmtime(self.input_filename)\n                if curr_mod_time != last_mod_time:\n                    self.tui.reload()\n                    self.tui.loop.draw_screen()\n                    last_mod_time = curr_mod_time\n            except Exception:\n                pass\n            finally:\n                time.sleep(0.25)\n\n    def reload(self, data=None):\n        \"\"\"Reload this presentation\n\n        :param str data: The data to render for this slide deck (optional)\n        \"\"\"\n        if data is None:\n            with open(self.input_filename, \"r\") as f:\n                data = f.read()\n\n        parser = Parser(single_slide=self.single_slide)\n        self.meta, self.slides = parser.parse(data)\n\n        # only load extensions once! Live editing does not support\n        # auto-extension reloading\n        if not self.initial_load_complete:\n            safe_exts = set(self.preload_extensions)\n            new_exts = set()\n            # only load if running with safe=False\n            if not self.safe:\n                source_exts = set(self.meta.get(\"extensions\", []))\n                new_exts = source_exts - safe_exts\n                self.warn_exts(new_exts)\n\n            all_exts = safe_exts | new_exts\n\n            lookatme.contrib.load_contribs(\n                all_exts,\n                safe_exts,\n                self.ignore_ext_failure,\n            )\n\n        self.styles = lookatme.themes.ensure_defaults(self.theme_mod)\n        dict_deep_update(self.styles, self.meta.get(\"styles\", {}))\n\n        # now apply any command-line style overrides\n        if self.style_override is not None:\n            self.styles[\"style\"] = self.style_override\n\n        lookatme.config.STYLE = self.styles\n        self.initial_load_complete = True\n\n    def warn_exts(self, exts):\n        \"\"\"Warn about source-provided extensions that are to-be-loaded\n        \"\"\"\n        if len(exts) == 0 or self.no_ext_warn:\n            return\n\n        warning = lookatme.ascii_art.WARNING\n        print(\"\\n\".join([\"    \" + x for x in warning.split(\"\\n\")]))\n\n        print(\"New extensions required by {!r} are about to be loaded:\\n\".format(\n            self.input_filename\n        ))\n        for ext in exts:\n            print(\"  - {!r}\".format(\"lookatme.contrib.\" + ext))\n        print(\"\")\n\n        if not lookatme.prompt.yes(\"Are you ok with attempting to load them?\"):\n            print(\"Bailing due to unacceptance of source-required extensions\")\n            exit(1)\n\n    def run(self, start_slide=0):\n        \"\"\"Run the presentation!\n        \"\"\"\n        self.tui = lookatme.tui.create_tui(self, start_slide=start_slide)\n        self.tui.run()", "target": 0}], "function_after": [{"function": "class Presentation(object):\n    \"\"\"Defines a presentation\n    \"\"\"\n    def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n                 single_slide=False, preload_extensions=None, safe=False,\n                 no_ext_warn=False, ignore_ext_failure=False):\n        \"\"\"Creates a new Presentation\n\n        :param stream input_stream: An input stream from which to read the\n            slide data\n        \"\"\"\n        self.preload_extensions = preload_extensions or []\n        self.input_filename = None\n        if hasattr(input_stream, \"name\"):\n            lookatme.config.SLIDE_SOURCE_DIR = os.path.dirname(input_stream.name)\n            self.input_filename = input_stream.name\n\n        self.style_override = style_override\n        self.live_reload = live_reload\n        self.tui = None\n        self.single_slide = single_slide\n        self.safe = safe\n        self.no_ext_warn = no_ext_warn\n        self.ignore_ext_failure = ignore_ext_failure\n        self.initial_load_complete = False\n\n        self.theme_mod = __import__(\"lookatme.themes.\" + theme, fromlist=[theme])\n\n        if self.live_reload:\n            self.reload_thread = threading.Thread(target=self.reload_watcher)\n            self.reload_thread.daemon = True\n            self.reload_thread.start()\n\n        self.reload(data=input_stream.read())\n        self.initial_load_complete = True\n\n    def reload_watcher(self):\n        \"\"\"Watch for changes to the input filename, automatically reloading\n        when the modified time has changed.\n        \"\"\"\n        if self.input_filename is None:\n            return\n        \n        last_mod_time = os.path.getmtime(self.input_filename)\n        while True:\n            try:\n                curr_mod_time = os.path.getmtime(self.input_filename)\n                if curr_mod_time != last_mod_time:\n                    self.tui.reload()\n                    self.tui.loop.draw_screen()\n                    last_mod_time = curr_mod_time\n            except Exception:\n                pass\n            finally:\n                time.sleep(0.25)\n\n    def reload(self, data=None):\n        \"\"\"Reload this presentation\n\n        :param str data: The data to render for this slide deck (optional)\n        \"\"\"\n        if data is None:\n            with open(self.input_filename, \"r\") as f:\n                data = f.read()\n\n        parser = Parser(single_slide=self.single_slide)\n        self.meta, self.slides = parser.parse(data)\n\n        # only load extensions once! Live editing does not support\n        # auto-extension reloading\n        if not self.initial_load_complete:\n            safe_exts = set(self.preload_extensions)\n            new_exts = set()\n            # only load if running with safe=False\n            if not self.safe:\n                source_exts = set(self.meta.get(\"extensions\", []))\n                new_exts = source_exts - safe_exts\n                self.warn_exts(new_exts)\n\n            all_exts = safe_exts | new_exts\n\n            lookatme.contrib.load_contribs(\n                all_exts,\n                safe_exts,\n                self.ignore_ext_failure,\n            )\n\n        self.styles = lookatme.themes.ensure_defaults(self.theme_mod)\n        dict_deep_update(self.styles, self.meta.get(\"styles\", {}))\n\n        # now apply any command-line style overrides\n        if self.style_override is not None:\n            self.styles[\"style\"] = self.style_override\n\n        lookatme.config.STYLE = self.styles\n        self.initial_load_complete = True\n\n    def warn_exts(self, exts):\n        \"\"\"Warn about source-provided extensions that are to-be-loaded\n        \"\"\"\n        if len(exts) == 0 or self.no_ext_warn:\n            return\n\n        warning = lookatme.ascii_art.WARNING\n        print(\"\\n\".join([\"    \" + x for x in warning.split(\"\\n\")]))\n\n        print(\"New extensions required by {!r} are about to be loaded:\\n\".format(\n            self.input_filename\n        ))\n        for ext in exts:\n            print(\"  - {!r}\".format(\"lookatme.contrib.\" + ext))\n        print(\"\")\n\n        if not lookatme.prompt.yes(\"Are you ok with attempting to load them?\"):\n            print(\"Bailing due to unacceptance of source-required extensions\")\n            exit(1)\n\n    def run(self, start_slide=0):\n        \"\"\"Run the presentation!\n        \"\"\"\n        self.tui = lookatme.tui.create_tui(self, start_slide=start_slide)\n        self.tui.run()", "target": 0}]}, {"raw_url": "https://github.com/d0c-s4vage/lookatme/raw/72fe36b784b234548d49dae60b840c37f0eb8d84/lookatme%2Fprompt.py", "code": "\"\"\"\nBasic user-prompting helper functions\n\"\"\"\n\n\ndef yes(msg):\n    \"\"\"Prompt the user for a yes/no answer. Returns bool\n    \"\"\"\n    answer = input(\"{} (Y/N) \".format(msg))\n    return answer.strip().lower() in [\"y\", \"yes\"]\n", "code_before": "\"\"\"\nBasic user-prompting helper functions\n\"\"\"\n\n\ndef yes(msg):\n    \"\"\"Prompt the user for a yes/no answer. Returns bool\n    \"\"\"\n    answer = input(\"{} (Y/N) \".format(msg))\n    return answer.strip().lower() in [\"y\", \"yes\"]\n", "patch": "@@ -0,0 +1,10 @@\n+\"\"\"\n+Basic user-prompting helper functions\n+\"\"\"\n+\n+\n+def yes(msg):\n+    \"\"\"Prompt the user for a yes/no answer. Returns bool\n+    \"\"\"\n+    answer = input(\"{} (Y/N) \".format(msg))\n+    return answer.strip().lower() in [\"y\", \"yes\"]", "file_path": "files/2020_10/68", "file_language": "py", "file_name": "lookatme/prompt.py", "outdated_file_modify": 0, "outdated_file_before": 1, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def yes(msg):\n    \"\"\"Prompt the user for a yes/no answer. Returns bool\n    \"\"\"\n    answer = input(\"{} (Y/N) \".format(msg))\n    return answer.strip().lower() in [\"y\", \"yes\"]", "target": 0}], "function_after": [{"function": "def yes(msg):\n    \"\"\"Prompt the user for a yes/no answer. Returns bool\n    \"\"\"\n    answer = input(\"{} (Y/N) \".format(msg))\n    return answer.strip().lower() in [\"y\", \"yes\"]", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
