{"index": 6861, "cve_id": "CVE-2021-43857", "cwe_id": ["CWE-78", "NVD-CWE-noinfo"], "cve_language": "Python", "cve_description": "Gerapy is a distributed crawler management framework. Gerapy prior to version 0.9.8 is vulnerable to remote code execution, and this issue is patched in version 0.9.8.", "cvss": "8.8", "publish_date": "December 27, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "49bcb19be5e0320e7e1535f34fe00f16a3cf3b28", "commit_message": "fix remote execute", "commit_date": "2021-12-26T09:50:00Z", "project": "gerapy/gerapy", "url": "https://api.github.com/repos/Gerapy/Gerapy/commits/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28", "html_url": "https://github.com/Gerapy/Gerapy/commit/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28", "windows_before": [{"commit_id": "f1cd46d80328497c016fbac12c9239b9dcaef047", "commit_date": "Sun Dec 26 15:40:53 2021 +0800", "commit_message": "fixed 401 for issue #207 (#208)", "files_name": ["gerapy/server/core/urls.py"]}, {"commit_id": "2f18f513117c27628c4e1b525f175e9e12839e9f", "commit_date": "Mon Sep 20 15:06:44 2021 +0000", "commit_message": "update gitignore", "files_name": [".gitignore"]}, {"commit_id": "f053b26e7571121e9c300cee4312e46bf1daa6e1", "commit_date": "Sat Sep 18 17:18:07 2021 +0000", "commit_message": "update ignore", "files_name": [".gitignore"]}, {"commit_id": "660deef2e656ac390ab8297ed0c22a4828d670ab", "commit_date": "Sat Aug 28 14:24:24 2021 +0800", "commit_message": "Bump path-parse from 1.0.6 to 1.0.7 in /gerapy/client (#206)", "files_name": ["gerapy/client/package-lock.json"]}, {"commit_id": "30ce0d8ab1af6235702e05c5755d12a2ae4e6f70", "commit_date": "Sun Aug 1 01:16:59 2021 +0800", "commit_message": "Update sync_docs.yml", "files_name": [".github/workflows/sync_docs.yml"]}, {"commit_id": "282c6c0035efc0d91745d5f5f8ad52d0b12512c6", "commit_date": "Sun Aug 1 01:13:44 2021 +0800", "commit_message": "Update build.yml", "files_name": [".github/workflows/build.yml"]}, {"commit_id": "e5a8ea1bc603419d48d23e2aa6eb5cd933ff4408", "commit_date": "Sun Aug 1 01:12:28 2021 +0800", "commit_message": "Update build_docker_image_release.yml", "files_name": [".github/workflows/build_docker_image_release.yml"]}, {"commit_id": "796491d2ff9ac6a5c61348d9d3059e84946d0c77", "commit_date": "Sun Aug 1 01:11:25 2021 +0800", "commit_message": "Update build_docker_image_master.yml", "files_name": [".github/workflows/build_docker_image_master.yml"]}, {"commit_id": "2f97a49947b9a64d3464b878ef53b9837ab15869", "commit_date": "Sun Aug 1 01:08:18 2021 +0800", "commit_message": "Update build_docker_image_release.yml", "files_name": [".github/workflows/build_docker_image_release.yml"]}, {"commit_id": "94dd845a403abd24d4b04cee7c55c42c6f2dd374", "commit_date": "Sun Aug 1 01:08:04 2021 +0800", "commit_message": "Update build_docker_image_master.yml", "files_name": [".github/workflows/build_docker_image_master.yml"]}, {"commit_id": "0ba173c920b5e5c62eb364b750c12c56d32e5d4c", "commit_date": "Sun Aug 1 01:06:51 2021 +0800", "commit_message": "change version", "files_name": ["gerapy/__version__.py"]}, {"commit_id": "2a181adca8cfaaed8cdc88b22af2835cda19d04b", "commit_date": "Sun Aug 1 01:05:36 2021 +0800", "commit_message": "update build", "files_name": ["gerapy/client/babel.config.js", "gerapy/client/package-lock.json", "gerapy/client/public/index.html", "gerapy/client/src/App.vue", "gerapy/client/src/assets/scss/components/_animation.scss", "gerapy/client/src/assets/scss/components/_base.scss", "gerapy/client/src/assets/scss/components/_editor.scss", "gerapy/client/src/assets/scss/components/_layout.scss", "gerapy/client/src/assets/scss/components/_pm.scss", "gerapy/client/src/assets/scss/components/_reset.scss", "gerapy/client/src/assets/scss/components/_scroll-bar.scss", "gerapy/client/src/assets/scss/components/_start_loading.scss", "gerapy/client/src/assets/scss/element.scss", "gerapy/client/src/assets/scss/main.scss", "gerapy/client/src/components/BottomBar.vue", "gerapy/client/src/components/CodeEditor.vue", "gerapy/client/src/components/Footer.vue", "gerapy/client/src/components/Header.vue", "gerapy/client/src/components/LangSwitch.vue", "gerapy/client/src/components/Left.vue", "gerapy/client/src/components/PanelTitle.vue", "gerapy/client/src/components/User.vue", "gerapy/client/src/components/Wrapper.vue", "gerapy/client/src/http.js", "gerapy/client/src/main.js", "gerapy/client/src/router.js", "gerapy/client/src/store.js", "gerapy/client/src/views/client/Create.vue", "gerapy/client/src/views/client/Edit.vue", "gerapy/client/src/views/client/Index.vue", "gerapy/client/src/views/client/Schedule.vue", "gerapy/client/src/views/home/Index.vue", "gerapy/client/src/views/login/Login.vue", "gerapy/client/src/views/project/Browser.vue", "gerapy/client/src/views/project/Configure.vue", "gerapy/client/src/views/project/Cookies.vue", "gerapy/client/src/views/project/Deploy.vue", "gerapy/client/src/views/project/Edit.vue", "gerapy/client/src/views/project/Extractor.vue", "gerapy/client/src/views/project/Extractors.vue", "gerapy/client/src/views/project/Index.vue", "gerapy/client/src/views/project/Item.vue", "gerapy/client/src/views/project/Mongodb.vue", "gerapy/client/src/views/project/Mysql.vue", "gerapy/client/src/views/project/Parser.vue", "gerapy/client/src/views/project/Proxy.vue", "gerapy/client/src/views/project/Rule.vue", "gerapy/client/src/views/project/Rules.vue", "gerapy/client/src/views/project/Spider.vue", "gerapy/client/src/views/project/Storage.vue", "gerapy/client/src/views/project/Web.vue", "gerapy/client/src/views/task/Create.vue", "gerapy/client/src/views/task/Edit.vue", "gerapy/client/src/views/task/Index.vue", "gerapy/client/src/views/task/Status.vue", "gerapy/client/src/views/task/Substance.vue", "gerapy/client/vue.config.js", "gerapy/server/core/parser.py", "gerapy/server/core/templates/index.html", "gerapy/server/core/templates/static/css/app.5805a989.css", "gerapy/server/core/templates/static/css/app.5805a989.css.map", "gerapy/server/core/templates/static/css/app.eb291bc8.css", "gerapy/server/core/templates/static/css/app.eb291bc8.css.map", "gerapy/server/core/templates/static/css/chunk-10b2edc2.79f68610.css", "gerapy/server/core/templates/static/css/chunk-10b2edc2.79f68610.css.map", "gerapy/server/core/templates/static/css/chunk-12e7e66d.8f856d8c.css", "gerapy/server/core/templates/static/css/chunk-12e7e66d.8f856d8c.css.map", "gerapy/server/core/templates/static/css/chunk-12e7e66d.94b672e1.css.map", "gerapy/server/core/templates/static/css/chunk-39423506.15941b6d.css.map", "gerapy/server/core/templates/static/css/chunk-39423506.2eb0fec8.css", "gerapy/server/core/templates/static/css/chunk-39423506.2eb0fec8.css.map", "gerapy/server/core/templates/static/css/chunk-3a6102b3.0fe5e5eb.css", "gerapy/server/core/templates/static/css/chunk-3a6102b3.0fe5e5eb.css.map", "gerapy/server/core/templates/static/css/chunk-3a6102b3.46e1b93d.css", "gerapy/server/core/templates/static/css/chunk-3a6102b3.46e1b93d.css.map", "gerapy/server/core/templates/static/css/chunk-4a7237a2.19df386b.css", "gerapy/server/core/templates/static/css/chunk-4a7237a2.19df386b.css.map", "gerapy/server/core/templates/static/css/chunk-4a7237a2.32bdda61.css", "gerapy/server/core/templates/static/css/chunk-4a7237a2.32bdda61.css.map", "gerapy/server/core/templates/static/css/chunk-531d1845.b0b0d9e4.css", "gerapy/server/core/templates/static/css/chunk-531d1845.b0b0d9e4.css.map", "gerapy/server/core/templates/static/css/chunk-582dc9b0.d60b5161.css", "gerapy/server/core/templates/static/css/chunk-582dc9b0.d60b5161.css.map", "gerapy/server/core/templates/static/css/chunk-5cb4de70.1fdb3cbd.css", "gerapy/server/core/templates/static/css/chunk-5cb4de70.1fdb3cbd.css.map", "gerapy/server/core/templates/static/css/chunk-5cd9d886.212b12ed.css.map", "gerapy/server/core/templates/static/css/chunk-5cd9d886.3dbe65b9.css", "gerapy/server/core/templates/static/css/chunk-5cd9d886.3dbe65b9.css.map", "gerapy/server/core/templates/static/css/chunk-612d9832.ee49a942.css", "gerapy/server/core/templates/static/css/chunk-612d9832.ee49a942.css.map", "gerapy/server/core/templates/static/css/chunk-6a3bce8f.ca9c0275.css.map", "gerapy/server/core/templates/static/css/chunk-736ea204.347b1790.css", "gerapy/server/core/templates/static/css/chunk-736ea204.347b1790.css.map", "gerapy/server/core/templates/static/css/chunk-736ea204.b9207071.css", "gerapy/server/core/templates/static/css/chunk-736ea204.b9207071.css.map", "gerapy/server/core/templates/static/css/chunk-74cc1e94.47f3c0a9.css.map", "gerapy/server/core/templates/static/css/chunk-74cc1e94.c8be3c1c.css", "gerapy/server/core/templates/static/css/chunk-74cc1e94.c8be3c1c.css.map", "gerapy/server/core/templates/static/css/chunk-vendors.8f471f8e.css", "gerapy/server/core/templates/static/css/chunk-vendors.8f471f8e.css.map", "gerapy/server/core/templates/static/js/app.21167fa2.js", "gerapy/server/core/templates/static/js/app.21167fa2.js.map", "gerapy/server/core/templates/static/js/app.747409e0.js", "gerapy/server/core/templates/static/js/app.747409e0.js.map", "gerapy/server/core/templates/static/js/chunk-10b2edc2.2177f918.js", "gerapy/server/core/templates/static/js/chunk-10b2edc2.2177f918.js.map", "gerapy/server/core/templates/static/js/chunk-12e7e66d.81b687df.js", "gerapy/server/core/templates/static/js/chunk-12e7e66d.81b687df.js.map", "gerapy/server/core/templates/static/js/chunk-12e7e66d.fc49e6fc.js", "gerapy/server/core/templates/static/js/chunk-12e7e66d.fc49e6fc.js.map", "gerapy/server/core/templates/static/js/chunk-193b04f2.2d5472f1.js", "gerapy/server/core/templates/static/js/chunk-193b04f2.2d5472f1.js.map", "gerapy/server/core/templates/static/js/chunk-193b04f2.6fedc7d2.js.map", "gerapy/server/core/templates/static/js/chunk-2d0a3191.84665408.js.map", "gerapy/server/core/templates/static/js/chunk-2d0a3191.bf64fc6c.js", "gerapy/server/core/templates/static/js/chunk-2d0a3191.bf64fc6c.js.map", "gerapy/server/core/templates/static/js/chunk-2d0e450e.3b0645c1.js", "gerapy/server/core/templates/static/js/chunk-2d0e450e.3b0645c1.js.map", "gerapy/server/core/templates/static/js/chunk-2d0e450e.b1c42466.js.map", "gerapy/server/core/templates/static/js/chunk-39423506.0991e2ac.js", "gerapy/server/core/templates/static/js/chunk-39423506.0991e2ac.js.map", "gerapy/server/core/templates/static/js/chunk-3a6102b3.b8de0426.js", "gerapy/server/core/templates/static/js/chunk-3a6102b3.b8de0426.js.map", "gerapy/server/core/templates/static/js/chunk-3a6102b3.f5479903.js", "gerapy/server/core/templates/static/js/chunk-3a6102b3.f5479903.js.map", "gerapy/server/core/templates/static/js/chunk-4a7237a2.32f43b23.js", "gerapy/server/core/templates/static/js/chunk-4a7237a2.32f43b23.js.map", "gerapy/server/core/templates/static/js/chunk-4a7237a2.c87062ce.js", "gerapy/server/core/templates/static/js/chunk-4a7237a2.c87062ce.js.map", "gerapy/server/core/templates/static/js/chunk-531d1845.bcfd1cad.js", "gerapy/server/core/templates/static/js/chunk-531d1845.bcfd1cad.js.map", "gerapy/server/core/templates/static/js/chunk-55d43787.51c83f15.js", "gerapy/server/core/templates/static/js/chunk-55d43787.51c83f15.js.map", "gerapy/server/core/templates/static/js/chunk-55d43787.70b6383b.js", "gerapy/server/core/templates/static/js/chunk-55d43787.70b6383b.js.map", "gerapy/server/core/templates/static/js/chunk-55d4e541.00e829c1.js", "gerapy/server/core/templates/static/js/chunk-55d4e541.00e829c1.js.map", "gerapy/server/core/templates/static/js/chunk-55d4e541.349979af.js.map", "gerapy/server/core/templates/static/js/chunk-582dc9b0.1813595d.js", "gerapy/server/core/templates/static/js/chunk-582dc9b0.1813595d.js.map", "gerapy/server/core/templates/static/js/chunk-5cb4de70.697d67bf.js", "gerapy/server/core/templates/static/js/chunk-5cb4de70.697d67bf.js.map", "gerapy/server/core/templates/static/js/chunk-5cd9d886.545ea914.js", "gerapy/server/core/templates/static/js/chunk-5cd9d886.545ea914.js.map", "gerapy/server/core/templates/static/js/chunk-5cd9d886.b175c193.js", "gerapy/server/core/templates/static/js/chunk-5cd9d886.b175c193.js.map", "gerapy/server/core/templates/static/js/chunk-612d9832.9dde355d.js", "gerapy/server/core/templates/static/js/chunk-612d9832.9dde355d.js.map", "gerapy/server/core/templates/static/js/chunk-6a3bce8f.6d0fca0d.js", "gerapy/server/core/templates/static/js/chunk-6a3bce8f.6d0fca0d.js.map", "gerapy/server/core/templates/static/js/chunk-736ea204.11157dea.js", "gerapy/server/core/templates/static/js/chunk-736ea204.11157dea.js.map", "gerapy/server/core/templates/static/js/chunk-736ea204.2f07cc85.js", "gerapy/server/core/templates/static/js/chunk-736ea204.2f07cc85.js.map", "gerapy/server/core/templates/static/js/chunk-74cc1e94.3e33ae0e.js", "gerapy/server/core/templates/static/js/chunk-74cc1e94.3e33ae0e.js.map", "gerapy/server/core/templates/static/js/chunk-74cc1e94.7f0ef74a.js", "gerapy/server/core/templates/static/js/chunk-74cc1e94.7f0ef74a.js.map", "gerapy/server/core/templates/static/js/chunk-8cbdea46.d4e8ca7b.js", "gerapy/server/core/templates/static/js/chunk-8cbdea46.d4e8ca7b.js.map", "gerapy/server/core/templates/static/js/chunk-8cbdea46.e9e70c1a.js", "gerapy/server/core/templates/static/js/chunk-8cbdea46.e9e70c1a.js.map", "gerapy/server/core/templates/static/js/chunk-vendors.2a0f4af0.js"]}], "windows_after": [{"commit_id": "79d637530323974c9232ca83351c898f05fe1b4a", "commit_date": "Sun Dec 26 17:50:46 2021 +0800", "commit_message": "fix wrong date zone", "files_name": ["gerapy/client/src/store.js", "gerapy/client/src/views/task/Substance.vue"]}, {"commit_id": "229e1bd3b2ad774d2348089ff002d4e0d3f343ed", "commit_date": "Sun Dec 26 17:51:07 2021 +0800", "commit_message": "fix depracate warning", "files_name": ["gerapy/server/core/build.py"]}, {"commit_id": "3fe592f01010bc22caf72efb986ea0fbd715e5c6", "commit_date": "Sun Dec 26 17:51:20 2021 +0800", "commit_message": "add loading effect", "files_name": ["gerapy/client/src/views/client/Schedule.vue"]}, {"commit_id": "7b3d96f932ff0e5cce7ac64a1cbaf265aec09808", "commit_date": "Sun Dec 26 17:51:46 2021 +0800", "commit_message": "fix bugs", "files_name": ["gerapy/client/src/langs/en.js", "gerapy/client/src/langs/zh.js", "gerapy/server/core/scheduler.py", "requirements.txt"]}, {"commit_id": "40abe6412f9176908818a661bee5079bdf64b47b", "commit_date": "Sun Dec 26 17:52:01 2021 +0800", "commit_message": "add lock file", "files_name": ["gerapy/client/yarn.lock"]}, {"commit_id": "eee8bf387102857061f5931f22862f971b03a8f6", "commit_date": "Sun Dec 26 18:33:29 2021 +0800", "commit_message": "update logs catcher", "files_name": ["gerapy/__version__.py", "gerapy/server/core/utils.py", "gerapy/server/core/views.py"]}, {"commit_id": "a821f5dc75f027f5a2c77aa40ed23f20efe85a5c", "commit_date": "Sun Dec 26 18:49:34 2021 +0800", "commit_message": "update build", "files_name": ["gerapy/server/core/templates/index.html", "gerapy/server/core/templates/static/css/app.5805a989.css", "gerapy/server/core/templates/static/css/app.5805a989.css.map", "gerapy/server/core/templates/static/css/app.6008ee66.css", "gerapy/server/core/templates/static/css/app.6008ee66.css.map", "gerapy/server/core/templates/static/css/chunk-2ab4c347.b0b0d9e4.css", "gerapy/server/core/templates/static/css/chunk-2ab4c347.b0b0d9e4.css.map", "gerapy/server/core/templates/static/css/chunk-4a7237a2.0d5cdefa.css", "gerapy/server/core/templates/static/css/chunk-4a7237a2.0d5cdefa.css.map", "gerapy/server/core/templates/static/css/chunk-4a7237a2.19df386b.css", "gerapy/server/core/templates/static/css/chunk-4a7237a2.19df386b.css.map", "gerapy/server/core/templates/static/css/chunk-74cc1e94.55aed300.css", "gerapy/server/core/templates/static/css/chunk-74cc1e94.55aed300.css.map", "gerapy/server/core/templates/static/css/chunk-74cc1e94.c8be3c1c.css", "gerapy/server/core/templates/static/css/chunk-74cc1e94.c8be3c1c.css.map", "gerapy/server/core/templates/static/css/chunk-vendors.8f471f8e.css.map", "gerapy/server/core/templates/static/css/chunk-vendors.cdc47d51.css", "gerapy/server/core/templates/static/css/chunk-vendors.cdc47d51.css.map", "gerapy/server/core/templates/static/js/app.21167fa2.js", "gerapy/server/core/templates/static/js/app.21167fa2.js.map", "gerapy/server/core/templates/static/js/app.6999e9f7.js", "gerapy/server/core/templates/static/js/app.6999e9f7.js.map", "gerapy/server/core/templates/static/js/chunk-10b2edc2.2177f918.js", "gerapy/server/core/templates/static/js/chunk-10b2edc2.2177f918.js.map", "gerapy/server/core/templates/static/js/chunk-10b2edc2.4c1051de.js", "gerapy/server/core/templates/static/js/chunk-10b2edc2.4c1051de.js.map", "gerapy/server/core/templates/static/js/chunk-12e7e66d.81b687df.js", "gerapy/server/core/templates/static/js/chunk-12e7e66d.81b687df.js.map", "gerapy/server/core/templates/static/js/chunk-12e7e66d.b659c47b.js", "gerapy/server/core/templates/static/js/chunk-12e7e66d.b659c47b.js.map", "gerapy/server/core/templates/static/js/chunk-193b04f2.245d8247.js", "gerapy/server/core/templates/static/js/chunk-193b04f2.245d8247.js.map", "gerapy/server/core/templates/static/js/chunk-2ab4c347.56006b9a.js", "gerapy/server/core/templates/static/js/chunk-2ab4c347.56006b9a.js.map", "gerapy/server/core/templates/static/js/chunk-2d0a3191.a358356c.js", "gerapy/server/core/templates/static/js/chunk-2d0a3191.a358356c.js.map", "gerapy/server/core/templates/static/js/chunk-2d0e450e.93a43154.js", "gerapy/server/core/templates/static/js/chunk-2d0e450e.93a43154.js.map", "gerapy/server/core/templates/static/js/chunk-39423506.a3b4969e.js", "gerapy/server/core/templates/static/js/chunk-39423506.a3b4969e.js.map", "gerapy/server/core/templates/static/js/chunk-3a6102b3.420fd925.js", "gerapy/server/core/templates/static/js/chunk-3a6102b3.420fd925.js.map", "gerapy/server/core/templates/static/js/chunk-3a6102b3.b8de0426.js.map", "gerapy/server/core/templates/static/js/chunk-4a7237a2.96bd6ddc.js", "gerapy/server/core/templates/static/js/chunk-4a7237a2.96bd6ddc.js.map", "gerapy/server/core/templates/static/js/chunk-4a7237a2.c87062ce.js", "gerapy/server/core/templates/static/js/chunk-4a7237a2.c87062ce.js.map", "gerapy/server/core/templates/static/js/chunk-531d1845.bcfd1cad.js", "gerapy/server/core/templates/static/js/chunk-531d1845.bcfd1cad.js.map", "gerapy/server/core/templates/static/js/chunk-55d43787.fdaa6be8.js", "gerapy/server/core/templates/static/js/chunk-55d43787.fdaa6be8.js.map", "gerapy/server/core/templates/static/js/chunk-55d4e541.78df458d.js", "gerapy/server/core/templates/static/js/chunk-55d4e541.78df458d.js.map", "gerapy/server/core/templates/static/js/chunk-582dc9b0.1813595d.js", "gerapy/server/core/templates/static/js/chunk-582dc9b0.1813595d.js.map", "gerapy/server/core/templates/static/js/chunk-582dc9b0.817098e5.js", "gerapy/server/core/templates/static/js/chunk-582dc9b0.817098e5.js.map", "gerapy/server/core/templates/static/js/chunk-5cd9d886.06f344ef.js", "gerapy/server/core/templates/static/js/chunk-5cd9d886.06f344ef.js.map", "gerapy/server/core/templates/static/js/chunk-5cd9d886.545ea914.js", "gerapy/server/core/templates/static/js/chunk-5cd9d886.545ea914.js.map", "gerapy/server/core/templates/static/js/chunk-736ea204.11157dea.js.map", "gerapy/server/core/templates/static/js/chunk-736ea204.c7da3745.js", "gerapy/server/core/templates/static/js/chunk-736ea204.c7da3745.js.map", "gerapy/server/core/templates/static/js/chunk-74cc1e94.7f0ef74a.js", "gerapy/server/core/templates/static/js/chunk-74cc1e94.7f0ef74a.js.map", "gerapy/server/core/templates/static/js/chunk-74cc1e94.ad661798.js", "gerapy/server/core/templates/static/js/chunk-74cc1e94.ad661798.js.map", "gerapy/server/core/templates/static/js/chunk-8cbdea46.f63bf7d8.js", "gerapy/server/core/templates/static/js/chunk-8cbdea46.f63bf7d8.js.map", "gerapy/server/core/templates/static/js/chunk-vendors.3b3513d2.js", "gerapy/server/core/templates/static/js/chunk-vendors.3b3513d2.js.map", "gerapy/server/core/templates/static/js/chunk-vendors.e1925d78.js", "gerapy/server/core/templates/static/js/chunk-vendors.e1925d78.js.map"]}, {"commit_id": "3f9a4904ed08f55ae892ea8aaed3a5fea0fd58d4", "commit_date": "Sun Dec 26 18:58:35 2021 +0800", "commit_message": "Create SECURITY.md", "files_name": ["SECURITY.md"]}, {"commit_id": "270ce0d0f4b971bb2c2c0bb34e2bf166c7fe324f", "commit_date": "Sun Dec 26 19:03:18 2021 +0800", "commit_message": "Create codeql-analysis.yml", "files_name": [".github/workflows/codeql-analysis.yml"]}, {"commit_id": "98092528a72392447fef05539fadbc4a295e9d60", "commit_date": "Sun Dec 26 20:00:57 2021 +0800", "commit_message": "fix security issue", "files_name": ["gerapy/__version__.py", "gerapy/server/core/utils.py", "gerapy/server/core/views.py", "requirements.txt"]}, {"commit_id": "157fe7966876640414efbf126edddfcfb1ab6dfd", "commit_date": "Sun Dec 26 20:01:41 2021 +0800", "commit_message": "Merge branch 'master' of github.com:Gerapy/Gerapy", "files_name": ["e9af5da988c3ba25a7d7b5f1c52384e4a8d2289b - Thu Dec 30 15:42:45 2021 +0800 : fix auth", "gerapy/client/src/http.js"]}, {"commit_id": "0a8edbaecd3fa15bcb63a141625306698ff1a5ae", "commit_date": "Thu Dec 30 15:58:34 2021 +0800", "commit_message": "new build", "files_name": ["gerapy/__init__.py", "gerapy/__version__.py", "gerapy/cmd/__init__.py", "gerapy/server/core/templates/index.html", "gerapy/server/core/templates/static/js/app.6999e9f7.js.map", "gerapy/server/core/templates/static/js/app.f77d6452.js", "gerapy/server/core/templates/static/js/app.f77d6452.js.map", "gerapy/server/core/utils.py"]}, {"commit_id": "bdbaf274321bb8ec98c7581dd13df2439b29cb09", "commit_date": "Thu Dec 30 16:03:06 2021 +0800", "commit_message": "to 0910", "files_name": ["gerapy/__version__.py"]}, {"commit_id": "09afdb34d72688aea733af4f638088e4e97a699b", "commit_date": "Fri Jan 14 10:11:30 2022 +0800", "commit_message": "Bump follow-redirects from 1.13.1 to 1.14.7 in /gerapy/client (#222)", "files_name": ["gerapy/client/package-lock.json", "gerapy/client/yarn.lock"]}, {"commit_id": "ed0961b1003568c700a8637742e5b7860344647a", "commit_date": "Sun Feb 13 04:01:08 2022 +0800", "commit_message": "Bump node-sass from 4.13.1 to 7.0.0 in /gerapy/client (#223)", "files_name": ["gerapy/client/package-lock.json", "gerapy/client/package.json", "gerapy/client/yarn.lock"]}, {"commit_id": "991db5aa8f4f1be169c0fcb49d2d0df8d1a1e832", "commit_date": "Sun Feb 13 10:12:53 2022 +0800", "commit_message": "Bump ini from 1.3.5 to 1.3.8 in /gerapy/client (#225)", "files_name": ["gerapy/client/package-lock.json"]}, {"commit_id": "661f5b3607a5f9e18ce79ef77959acef774b233a", "commit_date": "Sun Feb 13 10:13:05 2022 +0800", "commit_message": "Bump follow-redirects from 1.14.7 to 1.14.8 in /gerapy/client (#226)", "files_name": ["gerapy/client/package-lock.json", "gerapy/client/yarn.lock"]}, {"commit_id": "29f1d893146d1062c5b475de8682811557f50e14", "commit_date": "Sun Feb 13 10:13:13 2022 +0800", "commit_message": "Bump tar from 4.4.8 to 4.4.19 in /gerapy/client (#224)", "files_name": ["gerapy/client/package-lock.json"]}, {"commit_id": "57364c5f6bf16c2581a8f08c4e655f5b1b678af6", "commit_date": "Sun Feb 13 11:01:59 2022 +0800", "commit_message": "update yarn dependencies", "files_name": [".github/workflows/build_docker_image_master.yml", ".github/workflows/build_docker_image_release.yml", "gerapy/client/package-lock.json", "gerapy/client/package.json", "gerapy/client/yarn.lock", "gerapy/server/core/templates/index.html", "gerapy/server/core/templates/static/css/app.6008ee66.css", "gerapy/server/core/templates/static/css/app.6008ee66.css.map", "gerapy/server/core/templates/static/css/app.e8b12703.css", "gerapy/server/core/templates/static/css/app.e8b12703.css.map", "gerapy/server/core/templates/static/css/chunk-12e7e66d.8f856d8c.css.map", "gerapy/server/core/templates/static/css/chunk-12e7e66d.f5a4d5cd.css", "gerapy/server/core/templates/static/css/chunk-12e7e66d.f5a4d5cd.css.map", "gerapy/server/core/templates/static/css/chunk-2ab4c347.a74091e8.css", "gerapy/server/core/templates/static/css/chunk-2ab4c347.a74091e8.css.map", "gerapy/server/core/templates/static/css/chunk-39423506.309b39ca.css", "gerapy/server/core/templates/static/css/chunk-39423506.309b39ca.css.map", "gerapy/server/core/templates/static/css/chunk-582dc9b0.94c01b9b.css", "gerapy/server/core/templates/static/css/chunk-582dc9b0.94c01b9b.css.map", "gerapy/server/core/templates/static/css/chunk-582dc9b0.d60b5161.css.map", "gerapy/server/core/templates/static/css/chunk-5cd9d886.d235bd2d.css", "gerapy/server/core/templates/static/css/chunk-5cd9d886.d235bd2d.css.map", "gerapy/server/core/templates/static/css/chunk-736ea204.31923c28.css", "gerapy/server/core/templates/static/css/chunk-736ea204.31923c28.css.map", "gerapy/server/core/templates/static/css/chunk-74cc1e94.55aed300.css.map", "gerapy/server/core/templates/static/css/chunk-74cc1e94.d031c5e4.css", "gerapy/server/core/templates/static/css/chunk-74cc1e94.d031c5e4.css.map", "gerapy/server/core/templates/static/css/chunk-vendors.2c7ad440.css", "gerapy/server/core/templates/static/css/chunk-vendors.2c7ad440.css.map", "gerapy/server/core/templates/static/css/chunk-vendors.cdc47d51.css", "gerapy/server/core/templates/static/css/chunk-vendors.cdc47d51.css.map", "gerapy/server/core/templates/static/js/app.c76ee343.js", "gerapy/server/core/templates/static/js/app.c76ee343.js.map", "gerapy/server/core/templates/static/js/app.f77d6452.js.map", "gerapy/server/core/templates/static/js/chunk-10b2edc2.4c1051de.js.map", "gerapy/server/core/templates/static/js/chunk-10b2edc2.6db9c9b5.js", "gerapy/server/core/templates/static/js/chunk-10b2edc2.6db9c9b5.js.map", "gerapy/server/core/templates/static/js/chunk-12e7e66d.b659c47b.js.map", "gerapy/server/core/templates/static/js/chunk-12e7e66d.fd5050d7.js", "gerapy/server/core/templates/static/js/chunk-12e7e66d.fd5050d7.js.map", "gerapy/server/core/templates/static/js/chunk-193b04f2.245d8247.js.map", "gerapy/server/core/templates/static/js/chunk-193b04f2.bad183bb.js", "gerapy/server/core/templates/static/js/chunk-193b04f2.bad183bb.js.map", "gerapy/server/core/templates/static/js/chunk-2ab4c347.56006b9a.js.map", "gerapy/server/core/templates/static/js/chunk-2ab4c347.d7e45ee9.js", "gerapy/server/core/templates/static/js/chunk-2ab4c347.d7e45ee9.js.map", "gerapy/server/core/templates/static/js/chunk-2d0a3191.a358356c.js.map", "gerapy/server/core/templates/static/js/chunk-2d0a3191.e91bf98e.js"]}], "parents": [{"commit_id_before": "f1cd46d80328497c016fbac12c9239b9dcaef047", "url_before": "https://api.github.com/repos/Gerapy/Gerapy/commits/f1cd46d80328497c016fbac12c9239b9dcaef047", "html_url_before": "https://github.com/Gerapy/Gerapy/commit/f1cd46d80328497c016fbac12c9239b9dcaef047"}], "details": [{"raw_url": "https://github.com/Gerapy/Gerapy/raw/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28/gerapy%2Fserver%2Fcore%2Fviews.py", "code": "import re\nfrom pathlib import Path\nfrom urllib.parse import unquote\nimport base64\nimport json\nimport os\nimport requests\nimport time\nimport pytz\nimport pymongo\nfrom shutil import rmtree\nfrom requests.exceptions import ConnectionError\nfrom os.path import join, exists\nfrom django.shortcuts import render\nfrom django.core.serializers import serialize\nfrom django.http import HttpResponse\nfrom django.forms.models import model_to_dict\nfrom django.utils import timezone\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom subprocess import Popen, PIPE\nfrom gerapy import get_logger\nfrom gerapy.server.core.response import JsonResponse\nfrom gerapy.cmd.init import PROJECTS_FOLDER\nfrom gerapy.server.server.settings import TIME_ZONE\nfrom gerapy.server.core.models import Client, Project, Deploy, Monitor, Task\nfrom gerapy.server.core.build import build_project, find_egg\nfrom gerapy.server.core.utils import IGNORES, scrapyd_url, log_url, get_tree, get_scrapyd, process_html, bytes2str, \\\n    clients_of_task, get_job_id\nfrom django_apscheduler.models import DjangoJob, DjangoJobExecution\nfrom django.core.files.storage import FileSystemStorage\nimport zipfile\n\nlogger = get_logger(__name__)\n\n\n@api_view(['GET'])\n# @permission_classes([IsAuthenticated])\ndef index(request):\n    \"\"\"\n    render index page\n    :param request: request object\n    :return: page\n    \"\"\"\n    return render(request, 'index.html')\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef index_status(request):\n    \"\"\"\n    index statistics\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        clients = Client.objects.all()\n        data = {\n            'success': 0,\n            'error': 0,\n            'project': 0,\n        }\n        # clients info\n        for client in clients:\n            try:\n                requests.get(scrapyd_url(client.ip, client.port), timeout=1)\n                data['success'] += 1\n            except ConnectionError:\n                data['error'] += 1\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        # projects info\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                data['project'] += 1\n        return JsonResponse(data)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_index(request):\n    \"\"\"\n    get client list\n    :param request: request object\n    :return: client list\n    \"\"\"\n    return HttpResponse(serialize('json', Client.objects.order_by('-id')))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_info(request, client_id):\n    \"\"\"\n    get client info\n    :param request: request object\n    :param id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_status(request, client_id):\n    \"\"\"\n    get client status\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        # get client object\n        client = Client.objects.get(id=client_id)\n        requests.get(scrapyd_url(client.ip, client.port), timeout=3)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_update(request, client_id):\n    \"\"\"\n    update client info\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.filter(id=client_id)\n        data = json.loads(request.body)\n        client.update(**data)\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_create(request):\n    \"\"\"\n    create a client\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        client = Client.objects.create(**data)\n        return JsonResponse(model_to_dict(client))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_remove(request, client_id):\n    \"\"\"\n    remove a client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.get(id=client_id)\n        # delete deploy\n        Deploy.objects.filter(client=client).delete()\n        # delete client\n        Client.objects.filter(id=client_id).delete()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_list(request, client_id, project_name):\n    \"\"\"\n    get spider list from one client\n    :param request: request Object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        spiders = scrapyd.list_spiders(project_name)\n        spiders = [{'name': spider, 'id': index + 1}\n                   for index, spider in enumerate(spiders)]\n        return JsonResponse(spiders)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_start(request, client_id, project_name, spider_name):\n    \"\"\"\n    start a spider\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        job = scrapyd.schedule(project_name, spider_name)\n        return JsonResponse({'job': job})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_list(request, client_id):\n    \"\"\"\n    project deployed list on one client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        projects = scrapyd.list_projects()\n        return JsonResponse(projects)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_index(request):\n    \"\"\"\n    project index list\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        project_list = []\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                project_list.append({'name': file})\n        return JsonResponse(project_list)\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_configure(request, project_name):\n    \"\"\"\n    get configuration\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get configuration\n    if request.method == 'GET':\n        project = Project.objects.get(name=project_name)\n        project = model_to_dict(project)\n        project['configuration'] = json.loads(\n            project['configuration']) if project['configuration'] else None\n        return JsonResponse(project)\n\n    # update configuration\n    elif request.method == 'POST':\n        project = Project.objects.filter(name=project_name)\n        data = json.loads(request.body)\n        configuration = json.dumps(\n            data.get('configuration'), ensure_ascii=False)\n        project.update(**{'configuration': configuration})\n        # for safe protection\n        project_name = re.sub(\n            '[\\s\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n        # execute generate cmd\n        cmd = ['gerapy', 'generate', project_name]\n        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n\n        if not stderr:\n            return JsonResponse({'status': '1'})\n        else:\n            return JsonResponse({'status': '0', 'message': stderr})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_tree(request, project_name):\n    \"\"\"\n    get file tree of project\n    :param request: request object\n    :param project_name: project name\n    :return: json of tree\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        # get tree data\n        tree = get_tree(join(path, project_name))\n        return JsonResponse(tree)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_create(request):\n    \"\"\"\n    create a configurable project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data['configurable'] = 1\n        project, result = Project.objects.update_or_create(**data)\n        # generate a single project folder\n        path = join(os.path.abspath(\n            join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n        os.mkdir(path)\n        return JsonResponse(model_to_dict(project))\n\n\n@api_view(['POST'])\n# @permission_classes([IsAuthenticated])\ndef project_upload(request):\n    \"\"\"\n    upload project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        file = request.FILES['file']\n        file_name = file.name\n        fs = FileSystemStorage(PROJECTS_FOLDER)\n        zip_file_name = fs.save(file_name, file)\n        logger.debug('zip file name %s', zip_file_name)\n        # extract zip file\n        with zipfile.ZipFile(join(PROJECTS_FOLDER, zip_file_name), 'r') as zip_ref:\n            zip_ref.extractall(PROJECTS_FOLDER)\n        logger.debug('extracted files to %s', PROJECTS_FOLDER)\n        return JsonResponse({'status': True})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_clone(request):\n    \"\"\"\n    clone project from github\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        address = data.get('address')\n        if not address.startswith('http'):\n            return JsonResponse({'status': False})\n        address = address + '.git' if not address.endswith('.git') else address\n        cmd = ['git', 'clone', 'address', join(PROJECTS_FOLDER, Path(address).stem)]\n        logger.debug('clone cmd %s', cmd)\n        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('clone run result %s', stdout)\n        if stderr:\n            logger.error(stderr)\n        return JsonResponse({'status': True}) if not stderr else JsonResponse({'status': False})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_remove(request, project_name):\n    \"\"\"\n    remove project from disk and db\n    :param request: request object\n    :param project_name: project name\n    :return: result of remove\n    \"\"\"\n    if request.method == 'POST':\n        # delete deployments\n        project = Project.objects.get(name=project_name)\n        Deploy.objects.filter(project=project).delete()\n        # delete project\n        result = Project.objects.filter(name=project_name).delete()\n        # get project path\n        path = join(os.path.abspath(os.getcwd()), PROJECTS_FOLDER)\n        project_path = join(path, project_name)\n        # delete project file tree\n        if exists(project_path):\n            rmtree(project_path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_version(request, client_id, project_name):\n    \"\"\"\n    get project deploy version\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: deploy version of project\n    \"\"\"\n    if request.method == 'GET':\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        scrapyd = get_scrapyd(client)\n        # if deploy info exists in db, return it\n        if Deploy.objects.filter(client=client, project=project):\n            deploy = Deploy.objects.get(client=client, project=project)\n        # if deploy info does not exists in db, create deploy info\n        else:\n            try:\n                versions = scrapyd.list_versions(project_name)\n            except ConnectionError:\n                return JsonResponse({'message': 'Connect Error'}, status=500)\n            if len(versions) > 0:\n                version = versions[-1]\n                deployed_at = timezone.datetime.fromtimestamp(\n                    int(version), tz=pytz.timezone(TIME_ZONE))\n            else:\n                deployed_at = None\n            deploy, result = Deploy.objects.update_or_create(\n                client=client, project=project, deployed_at=deployed_at)\n        # return deploy json info\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_deploy(request, client_id, project_name):\n    \"\"\"\n    deploy project operation\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json of deploy result\n    \"\"\"\n    if request.method == 'POST':\n        # get project folder\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        project_path = join(path, project_name)\n        # find egg file\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        egg_file = open(join(project_path, egg), 'rb')\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        # execute deploy operation\n        scrapyd = get_scrapyd(client)\n        scrapyd.add_version(project_name, int(time.time()), egg_file.read())\n        # update deploy info\n        deployed_at = timezone.now()\n        Deploy.objects.filter(client=client, project=project).delete()\n        deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at,\n                                                         description=project.description)\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_build(request, project_name):\n    \"\"\"\n    get build info or execute build operation\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get project folder\n    path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n    project_path = join(path, project_name)\n\n    # get build version\n    if request.method == 'GET':\n        egg = find_egg(project_path)\n        # if built, save or update project to db\n        if egg:\n            built_at = timezone.datetime.fromtimestamp(os.path.getmtime(join(project_path, egg)),\n                                                       tz=pytz.timezone(TIME_ZONE))\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name, built_at=built_at, egg=egg).save()\n                model = Project.objects.get(name=project_name)\n            else:\n                model = Project.objects.get(name=project_name)\n                model.built_at = built_at\n                model.egg = egg\n                model.save()\n        # if not built, just save project name to db\n        else:\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name).save()\n            model = Project.objects.get(name=project_name)\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n\n    # build operation manually by clicking button\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        description = data['description']\n        build_project(project_name)\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        # update built_at info\n        built_at = timezone.now()\n        # if project does not exists in db, create it\n        if not Project.objects.filter(name=project_name):\n            Project(name=project_name, description=description,\n                    built_at=built_at, egg=egg).save()\n            model = Project.objects.get(name=project_name)\n        # if project exists, update egg, description, built_at info\n        else:\n            model = Project.objects.get(name=project_name)\n            model.built_at = built_at\n            model.egg = egg\n            model.description = description\n            model.save()\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_parse(request, project_name):\n    \"\"\"\n    parse project\n    :param request: request object\n    :param project_name: project name\n    :return: requests, items, response\n    \"\"\"\n    if request.method == 'POST':\n        project_path = join(PROJECTS_FOLDER, project_name)\n        data = json.loads(request.body)\n        logger.debug('post data %s', data)\n        spider_name = data.get('spider')\n        args = {\n            'start': data.get('start', False),\n            'method': data.get('method', 'GET'),\n            'url': data.get('url'),\n            'callback': data.get('callback'),\n            'cookies': \"'\" + json.dumps(data.get('cookies', {}), ensure_ascii=False) + \"'\",\n            'headers': \"'\" + json.dumps(data.get('headers', {}), ensure_ascii=False) + \"'\",\n            'meta': \"'\" + json.dumps(data.get('meta', {}), ensure_ascii=False) + \"'\",\n            'dont_filter': data.get('dont_filter', False),\n            'priority': data.get('priority', 0),\n        }\n        # set request body\n        body = data.get('body', '')\n        if args.get('method').lower() != 'get':\n            args['body'] = \"'\" + json.dumps(body, ensure_ascii=False) + \"'\"\n\n        args_array = []\n        for arg, value in args.items():\n            args_array.append(f'--{arg}')\n            args_array.append(f'{value}')\n        cmd = ['gerapy', 'parse'] + args_array + [project_path] + [spider_name]\n        print('cmd', cmd)\n        logger.debug('parse cmd %s', cmd)\n        p = Popen(cmd, shell=False, stdin=PIPE,\n                         stdout=PIPE, stderr=PIPE, close_fds=True)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('stdout %s, stderr %s', stdout, stderr)\n        if not stderr:\n            return JsonResponse({'status': True, 'result': json.loads(stdout)})\n        else:\n            return JsonResponse({'status': False, 'message': stderr})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_read(request):\n    \"\"\"\n    get content of project file\n    :param request: request object\n    :return: file content\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        # binary file\n        with open(path, 'rb') as f:\n            return HttpResponse(f.read().decode('utf-8'))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_update(request):\n    \"\"\"\n    update project file\n    :param request: request object\n    :return: result of update\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        code = data['code']\n        with open(path, 'w', encoding='utf-8') as f:\n            f.write(code)\n            return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_create(request):\n    \"\"\"\n    create project file\n    :param request: request object\n    :return: result of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['name'])\n        open(path, 'w', encoding='utf-8').close()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_delete(request):\n    \"\"\"\n    delete project file\n    :param request: request object\n    :return: result of delete\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        result = os.remove(path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_rename(request):\n    \"\"\"\n    rename file name\n    :param request: request object\n    :return: result of rename\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        pre = join(data['path'], data['pre'])\n        new = join(data['path'], data['new'])\n        os.rename(pre, new)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_list(request, client_id, project_name):\n    \"\"\"\n    get job list of project from one client\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: list of jobs\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.list_jobs(project_name)\n        jobs = []\n        statuses = ['pending', 'running', 'finished']\n        for status in statuses:\n            for job in result.get(status):\n                job['status'] = status\n                jobs.append(job)\n        return JsonResponse(jobs)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_log(request, client_id, project_name, spider_name, job_id):\n    \"\"\"\n    get log of jog\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :param job_id: job id\n    :return: log of job\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        # get log url\n        url = log_url(client.ip, client.port,\n                      project_name, spider_name, job_id)\n        # get last 1000 bytes of log\n        response = requests.get(url, timeout=5, headers={\n            'Range': 'bytes=-1000'\n        }, auth=(client.username, client.password) if client.auth else None)\n        # Get encoding\n        encoding = response.apparent_encoding\n        # log not found\n        if response.status_code == 404:\n            return JsonResponse({'message': 'Log Not Found'}, status=404)\n        # bytes to string\n        text = response.content.decode(encoding, errors='replace')\n        return HttpResponse(text)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_cancel(request, client_id, project_name, job_id):\n    \"\"\"\n    cancel a job\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param job_id: job id\n    :return: json of cancel\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.cancel(project_name, job_id)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_version(request, client_id, project, version):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_version(project=project, version=version)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_project(request, client_id, project):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_project(project=project)\n        return JsonResponse(result)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_db_list(request):\n    \"\"\"\n    get monitor db list\n    :param request: request object\n    :return: json of db list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            dbs = client.list_database_names()\n            return JsonResponse(dbs)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_collection_list(request):\n    \"\"\"\n    get monitor collection list\n    :param request: request object\n    :return: json of collection list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        db = data['db']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            db = client[db]\n            collections = db.collection_names()\n            return JsonResponse(collections)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_create(request):\n    \"\"\"\n    create a monitor\n    :param request: request object\n    :return: json of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data = data['form']\n        data['configuration'] = json.dumps(\n            data['configuration'], ensure_ascii=False)\n        monitor = Monitor.objects.create(**data)\n        return JsonResponse(model_to_dict(monitor))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_create(request):\n    \"\"\"\n    add task\n    :param request: request object\n    :return: Bool\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        task = Task.objects.create(clients=json.dumps(data.get('clients'), ensure_ascii=False),\n                                   project=data.get('project'),\n                                   name=data.get('name'),\n                                   spider=data.get('spider'),\n                                   trigger=data.get('trigger'),\n                                   configuration=json.dumps(\n                                       data.get('configuration'), ensure_ascii=False),\n                                   modified=1)\n        return JsonResponse({'result': '1', 'data': model_to_dict(task)})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_update(request, task_id):\n    \"\"\"\n    update task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        task = Task.objects.filter(id=task_id)\n        data = json.loads(request.body)\n        data['clients'] = json.dumps(data.get('clients'), ensure_ascii=False)\n        data['configuration'] = json.dumps(\n            data.get('configuration'), ensure_ascii=False)\n        data['modified'] = 1\n        task.update(**data)\n        return JsonResponse(model_to_dict(Task.objects.get(id=task_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_remove(request, task_id):\n    \"\"\"\n    remove task by task_id\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST':\n        # delete job from DjangoJob\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            DjangoJob.objects.filter(id=job_id).delete()\n        # delete task\n        Task.objects.filter(id=task_id).delete()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_info(request, task_id):\n    \"\"\"\n    get task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        task = Task.objects.get(id=task_id)\n        data = model_to_dict(task)\n        data['clients'] = json.loads(data.get('clients'))\n        data['configuration'] = json.loads(data.get('configuration'))\n        return JsonResponse({'data': data})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_index(request):\n    \"\"\"\n    get all tasks\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        tasks = Task.objects.values()\n        return JsonResponse({'result': '1', 'data': tasks})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_status(request, task_id):\n    \"\"\"\n    get task status info\n    :param request: request object\n    :param task_id: task id\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        result = []\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            jobs = DjangoJob.objects.filter(id=job_id)\n            logger.debug('jobs from djangojob %s', jobs)\n            # if job does not exist, for date mode exceed time\n            if not jobs:\n                continue\n            job = DjangoJob.objects.get(id=job_id)\n            executions = serialize(\n                'json', DjangoJobExecution.objects.filter(job=job))\n            result.append({\n                'client': model_to_dict(client),\n                'next': job.next_run_time,\n                'executions': json.loads(executions)\n            })\n        return JsonResponse({'data': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef render_html(request):\n    \"\"\"\n    render html with url\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        url = request.GET.get('url')\n        url = unquote(base64.b64decode(url).decode('utf-8'))\n        js = request.GET.get('js', 0)\n        script = request.GET.get('script')\n        response = requests.get(url, timeout=5)\n        response.encoding = response.apparent_encoding\n        html = process_html(response.text)\n        return HttpResponse(html)\n", "code_before": "import re\nfrom pathlib import Path\nfrom urllib.parse import unquote\nimport base64\nimport json, os, requests, time, pytz, pymongo\nfrom shutil import rmtree\nfrom requests.exceptions import ConnectionError\nfrom os.path import join, exists\nfrom django.shortcuts import render\nfrom django.core.serializers import serialize\nfrom django.http import HttpResponse\nfrom django.forms.models import model_to_dict\nfrom django.utils import timezone\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom subprocess import Popen, PIPE\nfrom gerapy import get_logger\nfrom gerapy.server.core.response import JsonResponse\nfrom gerapy.cmd.init import PROJECTS_FOLDER\nfrom gerapy.server.server.settings import TIME_ZONE\nfrom gerapy.server.core.models import Client, Project, Deploy, Monitor, Task\nfrom gerapy.server.core.build import build_project, find_egg\nfrom gerapy.server.core.utils import IGNORES, scrapyd_url, log_url, get_tree, get_scrapyd, process_html, bytes2str, \\\n    clients_of_task, get_job_id\nfrom django_apscheduler.models import DjangoJob, DjangoJobExecution\nfrom django.core.files.storage import FileSystemStorage\nimport zipfile\n\nlogger = get_logger(__name__)\n\n\n@api_view(['GET'])\n# @permission_classes([IsAuthenticated])\ndef index(request):\n    \"\"\"\n    render index page\n    :param request: request object\n    :return: page\n    \"\"\"\n    return render(request, 'index.html')\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef index_status(request):\n    \"\"\"\n    index statistics\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        clients = Client.objects.all()\n        data = {\n            'success': 0,\n            'error': 0,\n            'project': 0,\n        }\n        # clients info\n        for client in clients:\n            try:\n                requests.get(scrapyd_url(client.ip, client.port), timeout=1)\n                data['success'] += 1\n            except ConnectionError:\n                data['error'] += 1\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        # projects info\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                data['project'] += 1\n        return JsonResponse(data)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_index(request):\n    \"\"\"\n    get client list\n    :param request: request object\n    :return: client list\n    \"\"\"\n    return HttpResponse(serialize('json', Client.objects.order_by('-id')))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_info(request, client_id):\n    \"\"\"\n    get client info\n    :param request: request object\n    :param id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_status(request, client_id):\n    \"\"\"\n    get client status\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        # get client object\n        client = Client.objects.get(id=client_id)\n        requests.get(scrapyd_url(client.ip, client.port), timeout=3)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_update(request, client_id):\n    \"\"\"\n    update client info\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.filter(id=client_id)\n        data = json.loads(request.body)\n        client.update(**data)\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_create(request):\n    \"\"\"\n    create a client\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        client = Client.objects.create(**data)\n        return JsonResponse(model_to_dict(client))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_remove(request, client_id):\n    \"\"\"\n    remove a client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.get(id=client_id)\n        # delete deploy\n        Deploy.objects.filter(client=client).delete()\n        # delete client\n        Client.objects.filter(id=client_id).delete()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_list(request, client_id, project_name):\n    \"\"\"\n    get spider list from one client\n    :param request: request Object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        spiders = scrapyd.list_spiders(project_name)\n        spiders = [{'name': spider, 'id': index + 1} for index, spider in enumerate(spiders)]\n        return JsonResponse(spiders)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_start(request, client_id, project_name, spider_name):\n    \"\"\"\n    start a spider\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        job = scrapyd.schedule(project_name, spider_name)\n        return JsonResponse({'job': job})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_list(request, client_id):\n    \"\"\"\n    project deployed list on one client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        projects = scrapyd.list_projects()\n        return JsonResponse(projects)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_index(request):\n    \"\"\"\n    project index list\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        project_list = []\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                project_list.append({'name': file})\n        return JsonResponse(project_list)\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_configure(request, project_name):\n    \"\"\"\n    get configuration\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get configuration\n    if request.method == 'GET':\n        project = Project.objects.get(name=project_name)\n        project = model_to_dict(project)\n        project['configuration'] = json.loads(project['configuration']) if project['configuration'] else None\n        return JsonResponse(project)\n    \n    # update configuration\n    elif request.method == 'POST':\n        project = Project.objects.filter(name=project_name)\n        data = json.loads(request.body)\n        configuration = json.dumps(data.get('configuration'), ensure_ascii=False)\n        project.update(**{'configuration': configuration})\n        \n        # for safe protection\n        project_name = re.sub('[\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n        # execute generate cmd\n        cmd = ' '.join(['gerapy', 'generate', project_name])\n        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        \n        if not stderr:\n            return JsonResponse({'status': '1'})\n        else:\n            return JsonResponse({'status': '0', 'message': stderr})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_tree(request, project_name):\n    \"\"\"\n    get file tree of project\n    :param request: request object\n    :param project_name: project name\n    :return: json of tree\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        # get tree data\n        tree = get_tree(join(path, project_name))\n        return JsonResponse(tree)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_create(request):\n    \"\"\"\n    create a configurable project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data['configurable'] = 1\n        project, result = Project.objects.update_or_create(**data)\n        # generate a single project folder\n        path = join(os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n        os.mkdir(path)\n        return JsonResponse(model_to_dict(project))\n\n\n@api_view(['POST'])\n# @permission_classes([IsAuthenticated])\ndef project_upload(request):\n    \"\"\"\n    upload project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        file = request.FILES['file']\n        file_name = file.name\n        fs = FileSystemStorage(PROJECTS_FOLDER)\n        zip_file_name = fs.save(file_name, file)\n        logger.debug('zip file name %s', zip_file_name)\n        # extract zip file\n        with zipfile.ZipFile(join(PROJECTS_FOLDER, zip_file_name), 'r') as zip_ref:\n            zip_ref.extractall(PROJECTS_FOLDER)\n        logger.debug('extracted files to %s', PROJECTS_FOLDER)\n        return JsonResponse({'status': True})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_clone(request):\n    \"\"\"\n    clone project from github\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        address = data.get('address')\n        if not address.startswith('http'):\n            return JsonResponse({'status': False})\n        address = address + '.git' if not address.endswith('.git') else address\n        cmd = 'git clone {address} {target}'.format(address=address, target=join(PROJECTS_FOLDER, Path(address).stem))\n        logger.debug('clone cmd %s', cmd)\n        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('clone run result %s', stdout)\n        if stderr: logger.error(stderr)\n        return JsonResponse({'status': True}) if not stderr else JsonResponse({'status': False})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_remove(request, project_name):\n    \"\"\"\n    remove project from disk and db\n    :param request: request object\n    :param project_name: project name\n    :return: result of remove\n    \"\"\"\n    if request.method == 'POST':\n        # delete deployments\n        project = Project.objects.get(name=project_name)\n        Deploy.objects.filter(project=project).delete()\n        # delete project\n        result = Project.objects.filter(name=project_name).delete()\n        # get project path\n        path = join(os.path.abspath(os.getcwd()), PROJECTS_FOLDER)\n        project_path = join(path, project_name)\n        # delete project file tree\n        if exists(project_path):\n            rmtree(project_path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_version(request, client_id, project_name):\n    \"\"\"\n    get project deploy version\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: deploy version of project\n    \"\"\"\n    if request.method == 'GET':\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        scrapyd = get_scrapyd(client)\n        # if deploy info exists in db, return it\n        if Deploy.objects.filter(client=client, project=project):\n            deploy = Deploy.objects.get(client=client, project=project)\n        # if deploy info does not exists in db, create deploy info\n        else:\n            try:\n                versions = scrapyd.list_versions(project_name)\n            except ConnectionError:\n                return JsonResponse({'message': 'Connect Error'}, status=500)\n            if len(versions) > 0:\n                version = versions[-1]\n                deployed_at = timezone.datetime.fromtimestamp(int(version), tz=pytz.timezone(TIME_ZONE))\n            else:\n                deployed_at = None\n            deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at)\n        # return deploy json info\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_deploy(request, client_id, project_name):\n    \"\"\"\n    deploy project operation\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json of deploy result\n    \"\"\"\n    if request.method == 'POST':\n        # get project folder\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        project_path = join(path, project_name)\n        # find egg file\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        egg_file = open(join(project_path, egg), 'rb')\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        # execute deploy operation\n        scrapyd = get_scrapyd(client)\n        scrapyd.add_version(project_name, int(time.time()), egg_file.read())\n        # update deploy info\n        deployed_at = timezone.now()\n        Deploy.objects.filter(client=client, project=project).delete()\n        deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at,\n                                                         description=project.description)\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_build(request, project_name):\n    \"\"\"\n    get build info or execute build operation\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get project folder\n    path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n    project_path = join(path, project_name)\n    \n    # get build version\n    if request.method == 'GET':\n        egg = find_egg(project_path)\n        # if built, save or update project to db\n        if egg:\n            built_at = timezone.datetime.fromtimestamp(os.path.getmtime(join(project_path, egg)),\n                                                       tz=pytz.timezone(TIME_ZONE))\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name, built_at=built_at, egg=egg).save()\n                model = Project.objects.get(name=project_name)\n            else:\n                model = Project.objects.get(name=project_name)\n                model.built_at = built_at\n                model.egg = egg\n                model.save()\n        # if not built, just save project name to db\n        else:\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name).save()\n            model = Project.objects.get(name=project_name)\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n    \n    # build operation manually by clicking button\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        description = data['description']\n        build_project(project_name)\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        # update built_at info\n        built_at = timezone.now()\n        # if project does not exists in db, create it\n        if not Project.objects.filter(name=project_name):\n            Project(name=project_name, description=description, built_at=built_at, egg=egg).save()\n            model = Project.objects.get(name=project_name)\n        # if project exists, update egg, description, built_at info\n        else:\n            model = Project.objects.get(name=project_name)\n            model.built_at = built_at\n            model.egg = egg\n            model.description = description\n            model.save()\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_parse(request, project_name):\n    \"\"\"\n    parse project\n    :param request: request object\n    :param project_name: project name\n    :return: requests, items, response\n    \"\"\"\n    if request.method == 'POST':\n        project_path = join(PROJECTS_FOLDER, project_name)\n        data = json.loads(request.body)\n        logger.debug('post data %s', data)\n        spider_name = data.get('spider')\n        args = {\n            'start': data.get('start', False),\n            'method': data.get('method', 'GET'),\n            'url': data.get('url'),\n            'callback': data.get('callback'),\n            'cookies': \"'\" + json.dumps(data.get('cookies', {}), ensure_ascii=False) + \"'\",\n            'headers': \"'\" + json.dumps(data.get('headers', {}), ensure_ascii=False) + \"'\",\n            'meta': \"'\" + json.dumps(data.get('meta', {}), ensure_ascii=False) + \"'\",\n            'dont_filter': data.get('dont_filter', False),\n            'priority': data.get('priority', 0),\n        }\n        # set request body\n        body = data.get('body', '')\n        if args.get('method').lower() != 'get':\n            args['body'] = \"'\" + json.dumps(body, ensure_ascii=False) + \"'\"\n        \n        args_cmd = ' '.join(\n            ['--{arg} {value}'.format(arg=arg, value=value) for arg, value in args.items()])\n        logger.debug('args cmd %s', args_cmd)\n        cmd = 'gerapy parse {args_cmd} {project_path} {spider_name}'.format(\n            args_cmd=args_cmd,\n            project_path=project_path,\n            spider_name=spider_name\n        )\n        logger.debug('parse cmd %s', cmd)\n        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('stdout %s, stderr %s', stdout, stderr)\n        if not stderr:\n            return JsonResponse({'status': True, 'result': json.loads(stdout)})\n        else:\n            return JsonResponse({'status': False, 'message': stderr})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_read(request):\n    \"\"\"\n    get content of project file\n    :param request: request object\n    :return: file content\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        # binary file\n        with open(path, 'rb') as f:\n            return HttpResponse(f.read().decode('utf-8'))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_update(request):\n    \"\"\"\n    update project file\n    :param request: request object\n    :return: result of update\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        code = data['code']\n        with open(path, 'w', encoding='utf-8') as f:\n            f.write(code)\n            return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_create(request):\n    \"\"\"\n    create project file\n    :param request: request object\n    :return: result of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['name'])\n        open(path, 'w', encoding='utf-8').close()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_delete(request):\n    \"\"\"\n    delete project file\n    :param request: request object\n    :return: result of delete\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        result = os.remove(path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_rename(request):\n    \"\"\"\n    rename file name\n    :param request: request object\n    :return: result of rename\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        pre = join(data['path'], data['pre'])\n        new = join(data['path'], data['new'])\n        os.rename(pre, new)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_list(request, client_id, project_name):\n    \"\"\"\n    get job list of project from one client\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: list of jobs\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.list_jobs(project_name)\n        jobs = []\n        statuses = ['pending', 'running', 'finished']\n        for status in statuses:\n            for job in result.get(status):\n                job['status'] = status\n                jobs.append(job)\n        return JsonResponse(jobs)\n    \n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_log(request, client_id, project_name, spider_name, job_id):\n    \"\"\"\n    get log of jog\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :param job_id: job id\n    :return: log of job\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        # get log url\n        url = log_url(client.ip, client.port, project_name, spider_name, job_id)\n        # get last 1000 bytes of log\n        response = requests.get(url, timeout=5, headers={\n            'Range': 'bytes=-1000'\n        }, auth=(client.username, client.password) if client.auth else None)\n        # Get encoding\n        encoding = response.apparent_encoding\n        # log not found\n        if response.status_code == 404:\n            return JsonResponse({'message': 'Log Not Found'}, status=404)\n        # bytes to string\n        text = response.content.decode(encoding, errors='replace')\n        return HttpResponse(text)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_cancel(request, client_id, project_name, job_id):\n    \"\"\"\n    cancel a job\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param job_id: job id\n    :return: json of cancel\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.cancel(project_name, job_id)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_version(request, client_id, project, version):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_version(project=project, version=version)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_project(request, client_id, project):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_project(project=project)\n        return JsonResponse(result)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_db_list(request):\n    \"\"\"\n    get monitor db list\n    :param request: request object\n    :return: json of db list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            dbs = client.list_database_names()\n            return JsonResponse(dbs)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_collection_list(request):\n    \"\"\"\n    get monitor collection list\n    :param request: request object\n    :return: json of collection list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        db = data['db']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            db = client[db]\n            collections = db.collection_names()\n            return JsonResponse(collections)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_create(request):\n    \"\"\"\n    create a monitor\n    :param request: request object\n    :return: json of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data = data['form']\n        data['configuration'] = json.dumps(data['configuration'], ensure_ascii=False)\n        monitor = Monitor.objects.create(**data)\n        return JsonResponse(model_to_dict(monitor))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_create(request):\n    \"\"\"\n    add task\n    :param request: request object\n    :return: Bool\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        task = Task.objects.create(clients=json.dumps(data.get('clients'), ensure_ascii=False),\n                                   project=data.get('project'),\n                                   name=data.get('name'),\n                                   spider=data.get('spider'),\n                                   trigger=data.get('trigger'),\n                                   configuration=json.dumps(data.get('configuration'), ensure_ascii=False),\n                                   modified=1)\n        return JsonResponse({'result': '1', 'data': model_to_dict(task)})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_update(request, task_id):\n    \"\"\"\n    update task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        task = Task.objects.filter(id=task_id)\n        data = json.loads(request.body)\n        data['clients'] = json.dumps(data.get('clients'), ensure_ascii=False)\n        data['configuration'] = json.dumps(data.get('configuration'), ensure_ascii=False)\n        data['modified'] = 1\n        task.update(**data)\n        return JsonResponse(model_to_dict(Task.objects.get(id=task_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_remove(request, task_id):\n    \"\"\"\n    remove task by task_id\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST':\n        # delete job from DjangoJob\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            DjangoJob.objects.filter(name=job_id).delete()\n        # delete task\n        Task.objects.filter(id=task_id).delete()\n        return JsonResponse({'result': '1'})\n    \n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_info(request, task_id):\n    \"\"\"\n    get task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        task = Task.objects.get(id=task_id)\n        data = model_to_dict(task)\n        data['clients'] = json.loads(data.get('clients'))\n        data['configuration'] = json.loads(data.get('configuration'))\n        return JsonResponse({'data': data})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_index(request):\n    \"\"\"\n    get all tasks\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        tasks = Task.objects.values()\n        return JsonResponse({'result': '1', 'data': tasks})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_status(request, task_id):\n    \"\"\"\n    get task status info\n    :param request: request object\n    :param task_id: task id\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        result = []\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            jobs = DjangoJob.objects.filter(name=job_id)\n            logger.debug('jobs from djangojob %s', jobs)\n            # if job does not exist, for date mode exceed time\n            if not jobs: continue\n            job = DjangoJob.objects.get(name=job_id)\n            executions = serialize('json', DjangoJobExecution.objects.filter(job=job))\n            result.append({\n                'client': model_to_dict(client),\n                'next': job.next_run_time,\n                'executions': json.loads(executions)\n            })\n        return JsonResponse({'data': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef render_html(request):\n    \"\"\"\n    render html with url\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        url = request.GET.get('url')\n        url = unquote(base64.b64decode(url).decode('utf-8'))\n        js = request.GET.get('js', 0)\n        script = request.GET.get('script')\n        response = requests.get(url, timeout=5)\n        response.encoding = response.apparent_encoding\n        html = process_html(response.text)\n        return HttpResponse(html)\n", "patch": "@@ -2,7 +2,12 @@\n from pathlib import Path\n from urllib.parse import unquote\n import base64\n-import json, os, requests, time, pytz, pymongo\n+import json\n+import os\n+import requests\n+import time\n+import pytz\n+import pymongo\n from shutil import rmtree\n from requests.exceptions import ConnectionError\n from os.path import join, exists\n@@ -173,7 +178,8 @@ def spider_list(request, client_id, project_name):\n         client = Client.objects.get(id=client_id)\n         scrapyd = get_scrapyd(client)\n         spiders = scrapyd.list_spiders(project_name)\n-        spiders = [{'name': spider, 'id': index + 1} for index, spider in enumerate(spiders)]\n+        spiders = [{'name': spider, 'id': index + 1}\n+                   for index, spider in enumerate(spiders)]\n         return JsonResponse(spiders)\n \n \n@@ -242,23 +248,25 @@ def project_configure(request, project_name):\n     if request.method == 'GET':\n         project = Project.objects.get(name=project_name)\n         project = model_to_dict(project)\n-        project['configuration'] = json.loads(project['configuration']) if project['configuration'] else None\n+        project['configuration'] = json.loads(\n+            project['configuration']) if project['configuration'] else None\n         return JsonResponse(project)\n-    \n+\n     # update configuration\n     elif request.method == 'POST':\n         project = Project.objects.filter(name=project_name)\n         data = json.loads(request.body)\n-        configuration = json.dumps(data.get('configuration'), ensure_ascii=False)\n+        configuration = json.dumps(\n+            data.get('configuration'), ensure_ascii=False)\n         project.update(**{'configuration': configuration})\n-        \n         # for safe protection\n-        project_name = re.sub('[\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n+        project_name = re.sub(\n+            '[\\s\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n         # execute generate cmd\n-        cmd = ' '.join(['gerapy', 'generate', project_name])\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n+        cmd = ['gerapy', 'generate', project_name]\n+        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n-        \n+\n         if not stderr:\n             return JsonResponse({'status': '1'})\n         else:\n@@ -294,7 +302,8 @@ def project_create(request):\n         data['configurable'] = 1\n         project, result = Project.objects.update_or_create(**data)\n         # generate a single project folder\n-        path = join(os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n+        path = join(os.path.abspath(\n+            join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n         os.mkdir(path)\n         return JsonResponse(model_to_dict(project))\n \n@@ -334,12 +343,13 @@ def project_clone(request):\n         if not address.startswith('http'):\n             return JsonResponse({'status': False})\n         address = address + '.git' if not address.endswith('.git') else address\n-        cmd = 'git clone {address} {target}'.format(address=address, target=join(PROJECTS_FOLDER, Path(address).stem))\n+        cmd = ['git', 'clone', 'address', join(PROJECTS_FOLDER, Path(address).stem)]\n         logger.debug('clone cmd %s', cmd)\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n+        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n         logger.debug('clone run result %s', stdout)\n-        if stderr: logger.error(stderr)\n+        if stderr:\n+            logger.error(stderr)\n         return JsonResponse({'status': True}) if not stderr else JsonResponse({'status': False})\n \n \n@@ -393,10 +403,12 @@ def project_version(request, client_id, project_name):\n                 return JsonResponse({'message': 'Connect Error'}, status=500)\n             if len(versions) > 0:\n                 version = versions[-1]\n-                deployed_at = timezone.datetime.fromtimestamp(int(version), tz=pytz.timezone(TIME_ZONE))\n+                deployed_at = timezone.datetime.fromtimestamp(\n+                    int(version), tz=pytz.timezone(TIME_ZONE))\n             else:\n                 deployed_at = None\n-            deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at)\n+            deploy, result = Deploy.objects.update_or_create(\n+                client=client, project=project, deployed_at=deployed_at)\n         # return deploy json info\n         return JsonResponse(model_to_dict(deploy))\n \n@@ -446,7 +458,7 @@ def project_build(request, project_name):\n     # get project folder\n     path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n     project_path = join(path, project_name)\n-    \n+\n     # get build version\n     if request.method == 'GET':\n         egg = find_egg(project_path)\n@@ -470,7 +482,7 @@ def project_build(request, project_name):\n         # transfer model to dict then dumps it to json\n         data = model_to_dict(model)\n         return JsonResponse(data)\n-    \n+\n     # build operation manually by clicking button\n     elif request.method == 'POST':\n         data = json.loads(request.body)\n@@ -483,7 +495,8 @@ def project_build(request, project_name):\n         built_at = timezone.now()\n         # if project does not exists in db, create it\n         if not Project.objects.filter(name=project_name):\n-            Project(name=project_name, description=description, built_at=built_at, egg=egg).save()\n+            Project(name=project_name, description=description,\n+                    built_at=built_at, egg=egg).save()\n             model = Project.objects.get(name=project_name)\n         # if project exists, update egg, description, built_at info\n         else:\n@@ -526,17 +539,16 @@ def project_parse(request, project_name):\n         body = data.get('body', '')\n         if args.get('method').lower() != 'get':\n             args['body'] = \"'\" + json.dumps(body, ensure_ascii=False) + \"'\"\n-        \n-        args_cmd = ' '.join(\n-            ['--{arg} {value}'.format(arg=arg, value=value) for arg, value in args.items()])\n-        logger.debug('args cmd %s', args_cmd)\n-        cmd = 'gerapy parse {args_cmd} {project_path} {spider_name}'.format(\n-            args_cmd=args_cmd,\n-            project_path=project_path,\n-            spider_name=spider_name\n-        )\n+\n+        args_array = []\n+        for arg, value in args.items():\n+            args_array.append(f'--{arg}')\n+            args_array.append(f'{value}')\n+        cmd = ['gerapy', 'parse'] + args_array + [project_path] + [spider_name]\n+        print('cmd', cmd)\n         logger.debug('parse cmd %s', cmd)\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n+        p = Popen(cmd, shell=False, stdin=PIPE,\n+                         stdout=PIPE, stderr=PIPE, close_fds=True)\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n         logger.debug('stdout %s, stderr %s', stdout, stderr)\n         if not stderr:\n@@ -645,7 +657,6 @@ def job_list(request, client_id, project_name):\n                 job['status'] = status\n                 jobs.append(job)\n         return JsonResponse(jobs)\n-    \n \n \n @api_view(['GET'])\n@@ -663,7 +674,8 @@ def job_log(request, client_id, project_name, spider_name, job_id):\n     if request.method == 'GET':\n         client = Client.objects.get(id=client_id)\n         # get log url\n-        url = log_url(client.ip, client.port, project_name, spider_name, job_id)\n+        url = log_url(client.ip, client.port,\n+                      project_name, spider_name, job_id)\n         # get last 1000 bytes of log\n         response = requests.get(url, timeout=5, headers={\n             'Range': 'bytes=-1000'\n@@ -765,7 +777,8 @@ def monitor_create(request):\n     if request.method == 'POST':\n         data = json.loads(request.body)\n         data = data['form']\n-        data['configuration'] = json.dumps(data['configuration'], ensure_ascii=False)\n+        data['configuration'] = json.dumps(\n+            data['configuration'], ensure_ascii=False)\n         monitor = Monitor.objects.create(**data)\n         return JsonResponse(model_to_dict(monitor))\n \n@@ -785,7 +798,8 @@ def task_create(request):\n                                    name=data.get('name'),\n                                    spider=data.get('spider'),\n                                    trigger=data.get('trigger'),\n-                                   configuration=json.dumps(data.get('configuration'), ensure_ascii=False),\n+                                   configuration=json.dumps(\n+                                       data.get('configuration'), ensure_ascii=False),\n                                    modified=1)\n         return JsonResponse({'result': '1', 'data': model_to_dict(task)})\n \n@@ -803,7 +817,8 @@ def task_update(request, task_id):\n         task = Task.objects.filter(id=task_id)\n         data = json.loads(request.body)\n         data['clients'] = json.dumps(data.get('clients'), ensure_ascii=False)\n-        data['configuration'] = json.dumps(data.get('configuration'), ensure_ascii=False)\n+        data['configuration'] = json.dumps(\n+            data.get('configuration'), ensure_ascii=False)\n         data['modified'] = 1\n         task.update(**data)\n         return JsonResponse(model_to_dict(Task.objects.get(id=task_id)))\n@@ -823,11 +838,10 @@ def task_remove(request, task_id):\n         clients = clients_of_task(task)\n         for client in clients:\n             job_id = get_job_id(client, task)\n-            DjangoJob.objects.filter(name=job_id).delete()\n+            DjangoJob.objects.filter(id=job_id).delete()\n         # delete task\n         Task.objects.filter(id=task_id).delete()\n         return JsonResponse({'result': '1'})\n-    \n \n \n @api_view(['GET'])\n@@ -875,12 +889,14 @@ def task_status(request, task_id):\n         clients = clients_of_task(task)\n         for client in clients:\n             job_id = get_job_id(client, task)\n-            jobs = DjangoJob.objects.filter(name=job_id)\n+            jobs = DjangoJob.objects.filter(id=job_id)\n             logger.debug('jobs from djangojob %s', jobs)\n             # if job does not exist, for date mode exceed time\n-            if not jobs: continue\n-            job = DjangoJob.objects.get(name=job_id)\n-            executions = serialize('json', DjangoJobExecution.objects.filter(job=job))\n+            if not jobs:\n+                continue\n+            job = DjangoJob.objects.get(id=job_id)\n+            executions = serialize(\n+                'json', DjangoJobExecution.objects.filter(job=job))\n             result.append({\n                 'client': model_to_dict(client),\n                 'next': job.next_run_time,", "file_path": "files/2021_12/66", "file_language": "py", "file_name": "gerapy/server/core/views.py", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.lang.security.audit.subprocess-shell-true.subprocess-shell-true                         \n          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call  \n          will spawn the command using a shell process. Doing so propagates current shell settings and\n          variables, which makes it much easier for a malicious actor to execute commands. Use        \n          'shell=False' instead.                                                                      \n          Details: https://sg.run/J92w                                                                \n\n           \u25b6\u25b6\u2506 Autofix \u25b6 Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n          539\u2506 p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)", "       python.django.security.injection.command.subprocess-injection.subprocess-injection             \n          Detected user input entering a `subprocess` call unsafely. This could result in a command   \n          injection vulnerability. An attacker could use this vulnerability to execute arbitrary      \n          commands on the host, which allows them to download malware, scan sensitive data, or run any\n          command they wish on the server. Do not let users choose the command to run. In general,    \n          prefer to use Python API versions of system commands. If you must use subprocess, use a     \n          dictionary to allowlist a set of commands.                                                  \n          Details: https://sg.run/49BE                                                                \n\n          539\u2506 p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)", "       python.lang.security.audit.subprocess-shell-true.subprocess-shell-true                         \n          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call  \n          will spawn the command using a shell process. Doing so propagates current shell settings and\n          variables, which makes it much easier for a malicious actor to execute commands. Use        \n          'shell=False' instead.                                                                      \n          Details: https://sg.run/J92w                                                                \n\n           \u25b6\u25b6\u2506 Autofix \u25b6 Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n          339\u2506 p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)", "       python.django.security.injection.command.subprocess-injection.subprocess-injection             \n          Detected user input entering a `subprocess` call unsafely. This could result in a command   \n          injection vulnerability. An attacker could use this vulnerability to execute arbitrary      \n          commands on the host, which allows them to download malware, scan sensitive data, or run any\n          command they wish on the server. Do not let users choose the command to run. In general,    \n          prefer to use Python API versions of system commands. If you must use subprocess, use a     \n          dictionary to allowlist a set of commands.                                                  \n          Details: https://sg.run/49BE                                                                \n\n          339\u2506 p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)", "       python.lang.security.audit.subprocess-shell-true.subprocess-shell-true                         \n          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call  \n          will spawn the command using a shell process. Doing so propagates current shell settings and\n          variables, which makes it much easier for a malicious actor to execute commands. Use        \n          'shell=False' instead.                                                                      \n          Details: https://sg.run/J92w                                                                \n\n           \u25b6\u25b6\u2506 Autofix \u25b6 Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n          259\u2506 p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)"]]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
