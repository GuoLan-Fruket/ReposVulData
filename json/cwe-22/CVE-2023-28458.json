{"index": 11209, "cve_id": "CVE-2023-28458", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "pretalx 2.3.1 before 2.3.2 allows path traversal in HTML export (a non-default feature). Organizers can trigger the overwriting (with the standard pretalx 404 page content) of an arbitrary file.", "cvss": "4.3", "publish_date": "April 20, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "NONE", "S": "UNCHANGED", "C": "NONE", "I": "LOW", "A": "NONE", "commit_id": "60722c43cf975f319e94102e6bff320723776890", "commit_message": "Fix path traversal in static HTML export\n\nThis vulnerability was discovered by Sonar,\nhttps://www.sonarsource.com/, who provided a detailled description of\nthe vulnerability, and also the fix as it is applied here.\n\nThe fix will be backported to the last release, v2.3.1, and released as\nv2.3.2. A blog post will be published on pretalx.com.", "commit_date": "2023-03-07T12:04:03Z", "project": "pretalx/pretalx", "url": "https://api.github.com/repos/pretalx/pretalx/commits/60722c43cf975f319e94102e6bff320723776890", "html_url": "https://github.com/pretalx/pretalx/commit/60722c43cf975f319e94102e6bff320723776890", "windows_before": [{"commit_id": "4732e8f5592eeeb3c75233a783985158e3dd12bb", "commit_date": "Thu Mar 2 11:13:24 2023 +0100", "commit_message": "Document nginx gzip settings", "files_name": ["doc/administrator/installation.rst", "doc/changelog.rst"]}, {"commit_id": "efd3700491f48deb8e51df17c2aab2374662cd15", "commit_date": "Tue Feb 28 19:43:40 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Italian)", "files_name": ["src/pretalx/locale/it/LC_MESSAGES/django.po"]}, {"commit_id": "749bcd436696b29e9209c52ce653f59e884500b5", "commit_date": "Tue Feb 28 19:43:40 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Indonesian)", "files_name": ["src/pretalx/locale/id/LC_MESSAGES/django.po"]}, {"commit_id": "d67f3e05a7db61072f0cd4b96256da42177f16a5", "commit_date": "Tue Feb 28 19:43:40 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Chinese (Traditional))", "files_name": ["src/pretalx/locale/zh_TW/LC_MESSAGES/django.po"]}, {"commit_id": "6a55a6c6db50f0c04736522780910eb0c9c2a296", "commit_date": "Tue Feb 28 23:04:29 2023 +0100", "commit_message": "Fix content locale display on submission pages", "files_name": ["src/pretalx/submission/models/submission.py"]}, {"commit_id": "07f8f049099300f213127f7bba24d446ae7a93ec", "commit_date": "Tue Feb 28 20:43:28 2023 +0100", "commit_message": "Update whitenoise", "files_name": ["src/setup.py"]}, {"commit_id": "86595aef4bfbd47c31fa31285bbfa3ea0d5b85c6", "commit_date": "Thu Feb 23 20:28:00 2023 +0100", "commit_message": "Fix broken site for review-only users", "files_name": ["src/pretalx/orga/templates/orga/base.html"]}, {"commit_id": "c21f66407344f8e1a608ccfa7933e93563ab6fc4", "commit_date": "Sun Feb 19 18:52:33 2023 +0100", "commit_message": "Fix localStorage handling", "files_name": ["src/pretalx/static/orga/js/load_late.js"]}, {"commit_id": "024556001d9925f76d7c0b4d1591ef5f03bc8c8e", "commit_date": "Sun Feb 19 18:30:06 2023 +0100", "commit_message": "Make sidebar collapsible and default collapsed", "files_name": ["src/pretalx/orga/templates/orga/base.html", "src/pretalx/static/orga/js/load_late.js", "src/pretalx/static/orga/scss/_layout.scss"]}, {"commit_id": "dadeb47c628766961eafae597d2706253f7fc06d", "commit_date": "Sun Feb 19 16:38:21 2023 +0100", "commit_message": "Update translations", "files_name": ["src/pretalx/locale/ar/LC_MESSAGES/django.po", "src/pretalx/locale/ca/LC_MESSAGES/django.po", "src/pretalx/locale/cs/LC_MESSAGES/django.po", "src/pretalx/locale/de_DE/LC_MESSAGES/django.po", "src/pretalx/locale/de_Formal/LC_MESSAGES/django.po", "src/pretalx/locale/django.pot", "src/pretalx/locale/el/LC_MESSAGES/django.po", "src/pretalx/locale/es/LC_MESSAGES/django.po", "src/pretalx/locale/es_MX/LC_MESSAGES/django.po", "src/pretalx/locale/fr_FR/LC_MESSAGES/django.po", "src/pretalx/locale/it/LC_MESSAGES/django.po", "src/pretalx/locale/ja_JP/LC_MESSAGES/django.po", "src/pretalx/locale/pt_BR/LC_MESSAGES/django.po", "src/pretalx/locale/pt_PT/LC_MESSAGES/django.po", "src/pretalx/locale/zh_TW/LC_MESSAGES/django.po"]}, {"commit_id": "8e239e561f80059402dcd1d86a4ede585cb39932", "commit_date": "Mon Jan 23 16:02:37 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (German)", "files_name": ["src/pretalx/locale/de_DE/LC_MESSAGES/django.po"]}, {"commit_id": "155a98afc555978472883f32ff263710b4213c4e", "commit_date": "Mon Jan 23 16:02:37 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (French)", "files_name": ["src/pretalx/locale/fr_FR/LC_MESSAGES/django.po"]}, {"commit_id": "f7f294f26054189b7896faa642db37a7389ce171", "commit_date": "Sun Feb 19 15:24:07 2023 +0100", "commit_message": "Clarify that mails won't be sent immediately", "files_name": ["src/pretalx/orga/templates/orga/mails/send_form.html"]}, {"commit_id": "3cb714e6e9a651b6e44154642d54f5f4e68806ad", "commit_date": "Mon Feb 13 12:25:00 2023 +0100", "commit_message": "Make extra sure locales can be shown", "files_name": ["src/pretalx/event/models/event.py"]}, {"commit_id": "39193f9c0e7965a863e39f930e312ad1a2bc6c4d", "commit_date": "Mon Feb 13 12:01:19 2023 +0100", "commit_message": "Fix breaking test", "files_name": ["src/tests/orga/test_orga_forms.py"]}, {"commit_id": "08be91369488d5722823b7c86e5dacaa3bf4e75c", "commit_date": "Mon Feb 13 12:00:46 2023 +0100", "commit_message": "Fix code style", "files_name": ["src/pretalx/common/templatetags/rich_text.py", "src/tests/common/test_common_management_commands.py", "src/tests/common/test_common_signals.py", "src/tests/mail/test_mail_models.py", "src/tests/orga/test_orga_frab_import.py", "src/tests/person/test_user_model.py", "src/tests/schedule/test_schedule_model.py", "src/tests/submission/test_submission_model.py", "src/tests/submission/test_submission_permissions.py"]}, {"commit_id": "65a7796bb6009206b5576c21be47465f10b357c9", "commit_date": "Mon Feb 13 11:52:36 2023 +0100", "commit_message": "Update bleach", "files_name": ["src/pretalx/common/templatetags/rich_text.py", "src/pretalx/orga/views/mails.py", "src/setup.py"]}, {"commit_id": "48e09f7be472877816effb8ce3b65d8dbf5217bc", "commit_date": "Mon Feb 13 11:33:16 2023 +0100", "commit_message": "Update redis", "files_name": ["src/setup.py"]}, {"commit_id": "4e5df7f0e991cdf263217bb74c187920aa4768b1", "commit_date": "Fri Feb 3 02:20:56 2023 +0100", "commit_message": "Fix permissions for admin-only accounts", "files_name": ["src/pretalx/orga/permissions.py"]}, {"commit_id": "696a148d48601b3862e62c1d3bbc6961218a46d6", "commit_date": "Fri Feb 3 02:10:26 2023 +0100", "commit_message": "Update moment.js timezone data", "files_name": ["src/pretalx/cfp/templates/cfp/event/submission_profile.html", "src/pretalx/cfp/templates/cfp/event/user_profile.html", "src/pretalx/cfp/templates/cfp/event/user_submission_confirm.html", "src/pretalx/common/templates/common/base.html", "src/pretalx/orga/templates/orga/cfp/access_code_form.html", "src/pretalx/orga/templates/orga/cfp/question_form.html", "src/pretalx/orga/templates/orga/cfp/submission_type_form.html", "src/pretalx/orga/templates/orga/cfp/text.html", "src/pretalx/orga/templates/orga/event/wizard/timeline.html", "src/pretalx/orga/templates/orga/schedule/index.html", "src/pretalx/orga/templates/orga/schedule/room_form.html", "src/pretalx/orga/templates/orga/settings/form.html", "src/pretalx/orga/templates/orga/settings/review.html", "src/pretalx/orga/templates/orga/speaker/form.html", "src/pretalx/orga/templates/orga/submission/content.html", "src/pretalx/static/vendored/moment-timezone-with-data-10-year-range.js"]}, {"commit_id": "ed833a8ad00175365f8bb0013255d2b5cc3e785f", "commit_date": "Thu Feb 2 03:27:56 2023 +0100", "commit_message": "Update black", "files_name": ["src/pretalx/agenda/views/feed.py", "src/pretalx/cfp/phrases.py", "src/pretalx/cfp/views/locale.py", "src/pretalx/cfp/views/user.py", "src/pretalx/common/migrations/0001_initial.py", "src/pretalx/common/migrations/0002_auto_20170429_1018.py", "src/pretalx/common/migrations/0003_activitylog_is_orga_action.py", "src/pretalx/common/migrations/0004_auto_20170526_0437.py", "src/pretalx/common/migrations/0005_auto_20180202_1116.py", "src/pretalx/common/mixins/forms.py", "src/pretalx/common/mixins/views.py", "src/pretalx/common/views.py", "src/pretalx/event/migrations/0001_initial.py", "src/pretalx/event/migrations/0002_auto_20170429_1018.py", "src/pretalx/event/migrations/0003_auto_20170715_0655.py", "src/pretalx/event/migrations/0004_event_update_template.py", "src/pretalx/event/migrations/0005_event_custom_css.py", "src/pretalx/event/migrations/0006_auto_20170906_0205.py", "src/pretalx/event/migrations/0007_auto_20170924_0505.py", "src/pretalx/event/migrations/0008_event_logo.py", "src/pretalx/event/migrations/0009_event_landing_page_text.py", "src/pretalx/event/migrations/0010_event_plugins.py", "src/pretalx/event/migrations/0011_event_question_template.py", "src/pretalx/event/migrations/0012_auto_20180407_0814.py", "src/pretalx/event/migrations/0013_auto_20180407_0817.py", "src/pretalx/event/migrations/0014_auto_20180407_0826.py", "src/pretalx/event/migrations/0015_remove_event_subtitle.py", "src/pretalx/event/migrations/0016_remove_event_permitted.py", "src/pretalx/event/migrations/0017_auto_20180922_0511.py", "src/pretalx/event/migrations/0018_auto_20190223_1543.py", "src/pretalx/event/migrations/0019_auto_20190224_0856.py", "src/pretalx/event/migrations/0020_event_header_image.py", "src/pretalx/event/migrations/0021_auto_20190429_0750.py", "src/pretalx/event/migrations/0022_auto_20200124_1213.py", "src/pretalx/event/migrations/0023_update_featured_visibility.py", "src/pretalx/event/migrations/0024_remove_team_review_override_votes.py", "src/pretalx/event/migrations/0025_event_featured_sessions_text.py", "src/pretalx/event/migrations/0026_team_force_hide_speaker_names.py", "src/pretalx/event/migrations/0027_event_settings.py", "src/pretalx/event/migrations/0028_custom_event_data.py", "src/pretalx/event/migrations/0029_event_domain.py", "src/pretalx/event/migrations/0030_event_content_locale_array.py", "src/pretalx/event/migrations/0031_initial_content_locale.py", "src/pretalx/mail/migrations/0001_initial.py", "src/pretalx/mail/migrations/0002_queuedmail_sent.py", "src/pretalx/mail/migrations/0003_auto_20171001_1358.py", "src/pretalx/mail/migrations/0004_auto_20190222_2215.py", "src/pretalx/mail/migrations/0005_queuedmail_to_users.py", "src/pretalx/mail/migrations/0006_populate_mail_users.py", "src/pretalx/mail/migrations/0007_auto_20190327_2241.py", "src/pretalx/mail/migrations/0008_auto_20210830_2352.py", "src/pretalx/mail/migrations/0009_queuedmail_locale.py", "src/pretalx/mail/migrations/0010_queuedmail_attachments.py", "src/pretalx/orga/phrases.py", "src/pretalx/orga/views/cfp.py", "src/pretalx/orga/views/review.py", "src/pretalx/orga/views/submission.py", "src/pretalx/person/exporters.py", "src/pretalx/person/migrations/0001_initial.py", "src/pretalx/person/migrations/0002_auto_20170715_0655.py", "src/pretalx/person/migrations/0003_auto_20170908_0548.py", "src/pretalx/person/migrations/0004_auto_20171001_1358.py", "src/pretalx/person/migrations/0005_user_avatar.py", "src/pretalx/person/migrations/0006_user_get_gravatar.py", "src/pretalx/person/migrations/0007_user_code.py", "src/pretalx/person/migrations/0008_data_populate_user_code.py", "src/pretalx/person/migrations/0009_auto_20171106_0608.py", "src/pretalx/person/migrations/0010_eventpermission_review_override_count.py", "src/pretalx/person/migrations/0011_speakerprofile_has_arrived.py", "src/pretalx/person/migrations/0012_user_is_administrator.py", "src/pretalx/person/migrations/0013_auto_20180122_1615.py", "src/pretalx/person/migrations/0014_speakerinformation.py", "src/pretalx/person/migrations/0015_speakerinformation_resource.py", "src/pretalx/person/migrations/0016_auto_20180425_0647.py", "src/pretalx/person/migrations/0017_auto_20180530_1434.py", "src/pretalx/person/migrations/0018_auto_20180812_1523.py", "src/pretalx/person/migrations/0019_auto_20180821_1346.py", "src/pretalx/person/migrations/0020_auto_20180922_0511.py", "src/pretalx/person/migrations/0021_auto_20200124_1213.py", "src/pretalx/person/migrations/0022_filter_information_by_type_and_track.py", "src/pretalx/person/migrations/0023_speakerinformation_target_group.py", "src/pretalx/person/migrations/0024_date_migration_information_target_group.py", "src/pretalx/person/migrations/0025_drop_unused_speakerinformation_fields.py", "src/pretalx/schedule/migrations/0001_initial.py", "src/pretalx/schedule/migrations/0002_auto_20170523_0134.py", "src/pretalx/schedule/migrations/0003_auto_20170523_1144.py", "src/pretalx/schedule/migrations/0004_auto_20170715_0655.py", "src/pretalx/schedule/migrations/0005_schedule_published.py", "src/pretalx/schedule/migrations/0006_talkslot_is_visible.py", "src/pretalx/schedule/migrations/0007_auto_20170806_0931.py", "src/pretalx/schedule/migrations/0008_auto_20170916_0421.py", "src/pretalx/schedule/migrations/0009_auto_20171001_0433.py", "src/pretalx/schedule/migrations/0010_auto_20171001_0439.py", "src/pretalx/schedule/migrations/0010_auto_20171001_1358.py"]}], "windows_after": [{"commit_id": "215380118030eb5c64155f641926bde57c416334", "commit_date": "Fri Mar 10 23:33:01 2023 +0100", "commit_message": "We don't actually need to show organiser slugs", "files_name": ["src/pretalx/orga/templates/orga/organiser/list.html"]}, {"commit_id": "52b674b93960d73a2c05eea80058726009508fbd", "commit_date": "Sat Mar 11 00:35:35 2023 +0100", "commit_message": "Sort team members by name", "files_name": ["doc/changelog.rst", "src/pretalx/orga/templates/orga/settings/team_detail.html", "src/pretalx/orga/views/organiser.py"]}, {"commit_id": "4d859ac118823083cdad9f69b9e99f1e7304a030", "commit_date": "Sat Mar 11 00:37:39 2023 +0100", "commit_message": "Update djhtml", "files_name": ["src/pretalx/agenda/templates/agenda/session_block.html", "src/pretalx/agenda/templates/agenda/talk.html", "src/pretalx/cfp/templates/cfp/event/cfp.html", "src/pretalx/cfp/templates/cfp/event/user_submission_confirm.html", "src/pretalx/cfp/templates/cfp/event/user_submission_edit.html", "src/pretalx/cfp/templates/cfp/event/user_submission_withdraw.html", "src/pretalx/cfp/templates/cfp/event/user_submissions.html", "src/pretalx/common/templates/common/base.html", "src/pretalx/common/templates/common/logs.html", "src/pretalx/orga/templates/orga/base.html", "src/pretalx/orga/templates/orga/cfp/access_code_view.html", "src/pretalx/orga/templates/orga/cfp/question_detail.html", "src/pretalx/orga/templates/orga/cfp/question_form.html", "src/pretalx/orga/templates/orga/cfp/question_view.html", "src/pretalx/orga/templates/orga/cfp/submission_type_view.html", "src/pretalx/orga/templates/orga/cfp/track_view.html", "src/pretalx/orga/templates/orga/mails/outbox_list.html", "src/pretalx/orga/templates/orga/organiser/detail.html", "src/pretalx/orga/templates/orga/schedule/room_list.html", "src/pretalx/orga/templates/orga/settings/form.html", "src/pretalx/orga/templates/orga/settings/review.html", "src/pretalx/orga/templates/orga/submission/list.html", "src/pretalx/orga/templates/orga/submission/speakers.html", "src/pretalx/orga/templates/orga/submission/tag_list.html"]}, {"commit_id": "bc68fd8df7234c89458d9dd3aa36523431a31578", "commit_date": "Mon Mar 13 16:25:42 2023 +0100", "commit_message": "fix crontab install step documentation", "files_name": ["doc/administrator/installation.rst"]}, {"commit_id": "06b2b113a63bd13326a6a51ed647bb1a4a8d421b", "commit_date": "Thu Mar 16 23:42:43 2023 +0100", "commit_message": "Bump dev version, oops", "files_name": ["src/pretalx/__init__.py"]}, {"commit_id": "3994c3161234d79f01f5ead7c0c008a70dfdd373", "commit_date": "Fri Mar 17 02:44:54 2023 +0100", "commit_message": "Don't say that duration is optional", "files_name": ["src/pretalx/submission/models/submission.py"]}, {"commit_id": "9168026d23f70e415da37cefe79cf250a4172e53", "commit_date": "Wed Mar 22 22:31:00 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Chinese (Traditional))", "files_name": ["src/pretalx/locale/zh_TW/LC_MESSAGES/django.po"]}, {"commit_id": "cbb77cba1acd4ce678b61b76f827e05de6b6332b", "commit_date": "Wed Mar 22 22:31:00 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Italian)", "files_name": ["src/pretalx/locale/it/LC_MESSAGES/django.po"]}, {"commit_id": "ed4c911158baf1b5fd101920f35cc495ab27a71f", "commit_date": "Wed Mar 22 22:31:00 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Czech)", "files_name": ["src/pretalx/locale/cs/LC_MESSAGES/django.po"]}, {"commit_id": "7f64ea2dd4b38a1e77554910eabc88ec1db013e3", "commit_date": "Wed Mar 22 23:34:43 2023 +0100", "commit_message": "Add new locale: Czech", "files_name": ["src/pretalx/settings.py"]}, {"commit_id": "939f47561b34ffaf1159bbbe8ada87e808533acc", "commit_date": "Wed Mar 22 23:36:17 2023 +0100", "commit_message": "Add fullcalendar locale for Czech", "files_name": ["src/pretalx/static/vendored/fullcalendar/cs.js"]}, {"commit_id": "20457fd12148f2fa0a92479a582f18c52393e37e", "commit_date": "Wed Mar 22 23:55:59 2023 +0100", "commit_message": "Update beautifulsoup4", "files_name": ["src/setup.py"]}, {"commit_id": "3ec00d5b58d3d882d0458cd5c24c552a165e13e0", "commit_date": "Sat Mar 25 19:48:33 2023 +0100", "commit_message": "ci: update installed packages for Ubuntu 22.04", "files_name": [".github/workflows/docs.yml"]}, {"commit_id": "3faa6dfb76d2bb49fb839c6ddeffdb82df268e0c", "commit_date": "Sat Mar 25 19:49:57 2023 +0100", "commit_message": "ci: pin Ubuntu version to current LTS (22.04)", "files_name": [".github/workflows/docs.yml", ".github/workflows/style.yml", ".github/workflows/tests.yml"]}, {"commit_id": "678b468280cea3fac323637b3149820170d24a73", "commit_date": "Sun Mar 26 22:26:27 2023 +0200", "commit_message": "Fix breaking tests", "files_name": ["src/pretalx/orga/views/organiser.py"]}, {"commit_id": "655cd8ba00339294fb4d649fda2d424476e722b0", "commit_date": "Mon Mar 27 22:18:16 2023 +0200", "commit_message": "Update django-filter", "files_name": ["src/setup.py"]}, {"commit_id": "da1ca88d7cc014e4894f80714dc14a7eb22fb57c", "commit_date": "Tue Mar 28 00:38:53 2023 +0200", "commit_message": "Update django-formtools", "files_name": ["src/setup.py"]}, {"commit_id": "9a73c292962075fd10ec7ef53deff73a6216e502", "commit_date": "Tue Mar 28 12:25:08 2023 +0200", "commit_message": "Improve markdown docs", "files_name": ["doc/_themes/pretalx_theme/static/css/pretalx.css", "doc/user/markdown.rst"]}, {"commit_id": "5fbe025763f0be2a53f842c91478e7d03d129918", "commit_date": "Thu Apr 6 16:25:31 2023 +0200", "commit_message": "Add prefetch in periodic task", "files_name": ["src/pretalx/event/services.py"]}, {"commit_id": "d041f6bd7a8a1bdf2937c64d22910f79c8b8df1a", "commit_date": "Thu Apr 6 16:28:50 2023 +0200", "commit_message": "Prefetch more data in periodic task", "files_name": ["src/pretalx/event/services.py"]}, {"commit_id": "804114369eaafe9a6d3d0978a9bfc812e8bb3365", "commit_date": "Tue Apr 11 04:11:46 2023 +0200", "commit_message": "Revert \"Add prefetch in periodic task\"", "files_name": ["src/pretalx/event/services.py"]}, {"commit_id": "71b1133edc6b34dfff6fda23aa215770c1088f4b", "commit_date": "Tue Apr 11 21:21:15 2023 +0200", "commit_message": "Revert \"Update django-formtools\"", "files_name": ["src/setup.py"]}, {"commit_id": "5c4340446a75bb9db488cb26790cc57a0577b1d0", "commit_date": "Wed Apr 12 02:42:46 2023 +0200", "commit_message": "Make sure the form is actually working", "files_name": ["src/pretalx/cfp/flow.py"]}, {"commit_id": "f26a6581dfe34b1b8847f40f6cbd41cceb51c903", "commit_date": "Wed Apr 12 03:05:58 2023 +0200", "commit_message": "Revert \"Make sure the form is actually working\"", "files_name": ["src/pretalx/cfp/flow.py"]}, {"commit_id": "1e8658ef944c221680b718ec4463a75f69e1a316", "commit_date": "Wed Apr 19 15:45:04 2023 +0200", "commit_message": "Update fullcalendar.js from v3 to v6", "files_name": ["src/pretalx/common/templates/common/availabilities.html", "src/pretalx/orga/views/schedule.py", "src/pretalx/static/common/js/availabilities.js", "src/pretalx/static/vendored/fullcalendar/fullcalendar.min.js", "src/pretalx/static/vendored/fullcalendar/moment-timezone-plugin.min.js"]}, {"commit_id": "004b15d7e652b6b8b2239c295a18cd64f4322a6e", "commit_date": "Wed Apr 19 17:16:13 2023 +0200", "commit_message": "Update fullcalendar locales", "files_name": ["doc/maintainer/release.rst", "src/pretalx/common/templates/common/availabilities.html", "src/pretalx/static/vendored/fullcalendar/ar.js", "src/pretalx/static/vendored/fullcalendar/cs.js", "src/pretalx/static/vendored/fullcalendar/de.js", "src/pretalx/static/vendored/fullcalendar/es.js", "src/pretalx/static/vendored/fullcalendar/fr.js", "src/pretalx/static/vendored/fullcalendar/ja.js", "src/pretalx/static/vendored/fullcalendar/pt.js", "src/pretalx/static/vendored/fullcalendar/zh.js"]}, {"commit_id": "f4abc0788860c4ef7fab8ee456ccef1ab26029f3", "commit_date": "Thu Apr 20 00:31:08 2023 +0200", "commit_message": "Limit speaker availabilities to room availabilities", "files_name": ["doc/changelog.rst", "src/pretalx/cfp/views/user.py", "src/pretalx/person/forms.py", "src/pretalx/schedule/forms.py", "src/pretalx/static/common/js/availabilities.js"]}, {"commit_id": "d45ece0326ab56943c3c2f7419d07ab719bb3370", "commit_date": "Mon Apr 24 16:25:26 2023 +0200", "commit_message": "Fix remaining bugs in updated FullCalendar", "files_name": ["src/pretalx/common/templates/common/availabilities.html", "src/pretalx/static/common/js/availabilities.js"]}, {"commit_id": "98ff0f59de34b1e1528ed2b48ad481088b244594", "commit_date": "Mon Apr 24 16:39:16 2023 +0200", "commit_message": "Make sure limited avails work across days", "files_name": ["src/pretalx/schedule/forms.py"]}, {"commit_id": "3bdbfd0b1659326ee31b3de3f551b465f0081625", "commit_date": "Thu Apr 27 14:29:11 2023 +0200", "commit_message": "Fix Czech language flag", "files_name": ["src/pretalx/static/common/scss/_flags.scss"]}, {"commit_id": "736fb5c31ddd3dbf55edf90cb262c638d01b4bd1", "commit_date": "Fri Apr 28 10:06:37 2023 +0200", "commit_message": "Update requests", "files_name": ["src/setup.py"]}, {"commit_id": "3084ebdd8071ad9052a3a6be54cef284c159b4c6", "commit_date": "Sat Apr 29 23:05:25 2023 +0200", "commit_message": "Allow to make additional speakers required", "files_name": ["src/pretalx/submission/forms/submission.py"]}, {"commit_id": "3057d73cb3926a4416fb551bc239b98c1476dc40", "commit_date": "Sun Apr 30 02:52:12 2023 +0200", "commit_message": "Make RequestRequireField more resilient", "files_name": ["src/pretalx/common/mixins/forms.py"]}, {"commit_id": "847dc8f9ef7275cb4b0c3d3a118c3afaa15d9ba7", "commit_date": "Sun Apr 30 02:53:43 2023 +0200", "commit_message": "Make RequestRequireField more resilient", "files_name": ["src/pretalx/common/mixins/forms.py"]}, {"commit_id": "ebe5a6f0ff979714caa1d9f83eaa36dd5ac4164b", "commit_date": "Sun Apr 30 22:02:08 2023 +0200", "commit_message": "Fix additional speakers not being requested", "files_name": ["src/pretalx/submission/forms/submission.py"]}, {"commit_id": "d80da6245984097959919344ec1fad9770b3bde8", "commit_date": "Tue May 2 16:28:30 2023 +0200", "commit_message": "Fix bug in required availabilities handling", "files_name": ["src/pretalx/cfp/templates/cfp/event/submission_profile.html", "src/pretalx/person/forms.py"]}, {"commit_id": "9bc004b08f5594af03d8e0fc743cfe39dce0a75d", "commit_date": "Tue Apr 11 04:08:29 2023 +0200", "commit_message": "Revert \"Prefetch more data in periodic task\"", "files_name": ["src/pretalx/event/services.py"]}, {"commit_id": "f4662c3d7138409a725237b30d6e01c6dcae06f9", "commit_date": "Sat Mar 25 21:11:42 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Czech)", "files_name": ["src/pretalx/locale/cs/LC_MESSAGES/django.po"]}, {"commit_id": "6b20bf4e2969d7ee30da7838a0fce544387dd86e", "commit_date": "Fri May 5 10:55:39 2023 +0200", "commit_message": "Fix weblate merge problem", "files_name": ["src/pretalx/event/services.py"]}, {"commit_id": "fd0e4c73e55fa6c972b59bb7645791b217502495", "commit_date": "Fri May 5 11:00:03 2023 +0200", "commit_message": "Update translation stats", "files_name": ["src/pretalx/settings.py"]}, {"commit_id": "9a74ac97b878ce93ec30db73bf7db0c8ef1503e8", "commit_date": "Fri May 5 11:00:42 2023 +0200", "commit_message": "Update requests", "files_name": ["src/setup.py"]}, {"commit_id": "5fd4be4e0d2e1031cf6e24bf0d0781493e29d6e2", "commit_date": "Sun May 7 15:48:41 2023 +0200", "commit_message": "Update publicsuffixlist", "files_name": ["src/setup.py"]}, {"commit_id": "35633a3c1270320f5ef66b60e4a69ca821f85f3d", "commit_date": "Sun May 7 15:49:49 2023 +0200", "commit_message": "Update django-filter", "files_name": ["src/setup.py"]}, {"commit_id": "59eb79dc0dd85dd9984d4fbc9f0b29a8728c7351", "commit_date": "Fri May 12 12:16:43 2023 +0000", "commit_message": "\ud83d\uddfa Update translations (Chinese (Traditional))", "files_name": ["src/pretalx/locale/zh_TW/LC_MESSAGES/django.po"]}, {"commit_id": "e6889682c2bd8dbc34892ad144608cbe4608b033", "commit_date": "Thu May 11 13:52:57 2023 +0300", "commit_message": "Completed Greek translation", "files_name": ["src/pretalx/locale/el/LC_MESSAGES/django.po"]}, {"commit_id": "07305719d8a3c93e22462ad74189ac174e737bad", "commit_date": "Sat May 13 04:43:15 2023 +0200", "commit_message": "Fix missing availability form on confirm site", "files_name": ["src/pretalx/cfp/templates/cfp/event/user_submission_confirm.html", "src/pretalx/static/common/js/availabilities.js", "src/pretalx/static/common/scss/_availabilities.scss"]}, {"commit_id": "c6620a827c563fbcbe7610e56839d0a24b14cf57", "commit_date": "Sat May 13 04:51:48 2023 +0200", "commit_message": "Fix broken anonymisation on first highlighted word", "files_name": ["src/pretalx/static/orga/js/anonymise.js"]}, {"commit_id": "23f26c11f0288cc36ff33bbe55cdf8b3a28c50a8", "commit_date": "Sat May 13 04:57:41 2023 +0200", "commit_message": "Fix anonymisation indicator not scrolling", "files_name": ["src/pretalx/static/orga/js/anonymise.js"]}, {"commit_id": "ae9d73c78ab8ba6b8e56b32a57c8f77e927cdd97", "commit_date": "Sat May 13 05:03:01 2023 +0200", "commit_message": "Fix broken translation file", "files_name": ["src/pretalx/locale/zh_TW/LC_MESSAGES/django.po"]}, {"commit_id": "22c45d5f47b8c8b41f598760db5a774dc480e397", "commit_date": "Mon May 15 23:13:24 2023 +0200", "commit_message": "Add anonymisation indicator to proposal list", "files_name": []}], "parents": [{"commit_id_before": "4732e8f5592eeeb3c75233a783985158e3dd12bb", "url_before": "https://api.github.com/repos/pretalx/pretalx/commits/4732e8f5592eeeb3c75233a783985158e3dd12bb", "html_url_before": "https://github.com/pretalx/pretalx/commit/4732e8f5592eeeb3c75233a783985158e3dd12bb"}], "details": [{"raw_url": "https://github.com/pretalx/pretalx/raw/60722c43cf975f319e94102e6bff320723776890/src%2Fpretalx%2Fagenda%2Fmanagement%2Fcommands%2Fexport_schedule_html.py", "code": "import contextlib\nimport logging\nimport re\nimport shutil\nimport urllib.parse\nfrom pathlib import Path\nfrom shutil import make_archive\n\nfrom bs4 import BeautifulSoup\nfrom django.conf import settings\nfrom django.core.management.base import BaseCommand, CommandError\nfrom django.test import Client, override_settings\nfrom django.utils.timezone import override as override_timezone\nfrom django_scopes import scope, scopes_disabled\n\nfrom pretalx.common.signals import register_data_exporters\nfrom pretalx.common.utils import rolledback_transaction\nfrom pretalx.event.models import Event\n\n\n@contextlib.contextmanager\ndef fake_admin(event):\n    with rolledback_transaction():\n        event.is_public = True\n        event.save()\n        client = Client()\n\n        def get(url):\n            try:\n                # Try getting the file from disk directly first, \u2026\n                return get_mediastatic_content(url)\n            except FileNotFoundError:\n                # \u2026 then fall back to asking the views.\n                response = client.get(url, is_html_export=True, HTTP_ACCEPT=\"text/html\")\n                content = get_content(response)\n                return content\n\n        yield get\n\n\ndef find_assets(html):\n    \"\"\"Find URLs of images, style sheets and scripts included in `html`.\"\"\"\n    soup = BeautifulSoup(html, \"lxml\")\n\n    for asset in soup.find_all([\"script\", \"img\"]):\n        yield asset.attrs[\"src\"]\n    for asset in soup.find_all([\"link\"]):\n        if asset.attrs[\"rel\"][0] in [\"icon\", \"stylesheet\"]:\n            yield asset.attrs[\"href\"]\n\n\ndef find_urls(css):\n    return re.findall(r'url\\(\"?(/[^\")]+)\"?\\)', css.decode(\"utf-8\"), re.IGNORECASE)\n\n\ndef event_talk_urls(event):\n    for talk in event.talks:\n        yield talk.urls.public\n        yield talk.urls.ical\n\n        for resource in talk.active_resources:\n            if resource.resource and resource.resource.url:\n                yield resource.resource.url\n\n\ndef event_speaker_urls(event):\n    for speaker in event.speakers:\n        profile = speaker.event_profile(event)\n        yield profile.urls.public\n        yield profile.urls.talks_ical\n\n\ndef event_exporter_urls(event):\n    for _, exporter in register_data_exporters.send(event):\n        if exporter.public:\n            yield exporter(event).urls.base\n\n\ndef schedule_version_urls(event):\n    for schedule in event.schedules.filter(version__isnull=False):\n        yield schedule.urls.public\n        yield schedule.urls.widget_data\n        yield schedule.urls.nojs\n\n\ndef event_urls(event):\n    yield event.urls.base\n    yield event.urls.schedule\n    yield event.urls.schedule_nojs\n    yield event.urls.widget_data\n    yield from schedule_version_urls(event)\n    yield event.urls.featured\n    yield event.urls.talks\n    yield from event_talk_urls(event)\n    yield event.urls.speakers\n    yield from event_speaker_urls(event)\n    yield from event_exporter_urls(event)\n    yield event.urls.changelog\n    yield event.urls.feed\n\n\ndef get_path(url):\n    return urllib.parse.urlparse(url).path\n\n\ndef get_content(response):\n    return (\n        b\"\".join(response.streaming_content) if response.streaming else response.content\n    )\n\n\ndef dump_content(destination, path, getter):\n    logging.debug(path)\n    content = getter(path)\n    if path.endswith(\"/\"):\n        path = path + \"index.html\"\n\n    path = (Path(destination) / path.lstrip(\"/\")).resolve()\n    if not Path(destination) in path.parents:\n        raise CommandError(\"Path traversal detected, aborting.\")\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(path, \"wb\") as f:\n        f.write(content)\n    return content\n\n\ndef get_mediastatic_content(url):\n    if url.startswith(settings.STATIC_URL):\n        local_path = settings.STATIC_ROOT / url[len(settings.STATIC_URL) :]\n    elif url.startswith(settings.MEDIA_URL):\n        local_path = settings.MEDIA_ROOT / url[len(settings.MEDIA_URL) :]\n    else:\n        raise FileNotFoundError()\n\n    # Prevent directory traversal, make sure the path is inside the media or static root\n    local_path = local_path.resolve(strict=True)\n    if not any(\n        path in local_path.parents\n        for path in (settings.MEDIA_ROOT, settings.STATIC_ROOT)\n    ):\n        raise FileNotFoundError()\n\n    with open(local_path, \"rb\") as f:\n        return f.read()\n\n\ndef export_event(event, destination):\n    with override_settings(\n        COMPRESS_ENABLED=True, COMPRESS_OFFLINE=True\n    ), override_timezone(event.timezone):\n        with fake_admin(event) as get:\n            logging.info(\"Collecting URLs for export\")\n            urls = [*event_urls(event)]\n            assets = set()\n\n            logging.info(f\"Exporting {len(urls)} pages\")\n            for url in map(get_path, urls):\n                content = dump_content(destination, url, get)\n                assets |= set(map(get_path, find_assets(content)))\n\n            css_assets = set()\n\n            logging.info(f\"Exporting {len(assets)} static files from HTML links\")\n            for url in assets:\n                content = dump_content(destination, url, get)\n\n                if url.endswith(\".css\"):\n                    css_assets |= set(find_urls(content))\n\n            logging.info(f\"Exporting {len(css_assets)} files from CSS links\")\n            for url_path in (get_path(urllib.parse.unquote(url)) for url in css_assets):\n                dump_content(destination, url_path, get)\n\n\ndef delete_directory(path):\n    with contextlib.suppress(FileNotFoundError):\n        shutil.rmtree(path)\n\n\ndef get_export_path(event):\n    return settings.HTMLEXPORT_ROOT / event.slug\n\n\ndef get_export_zip_path(event):\n    return get_export_path(event).with_suffix(\".zip\")\n\n\nclass Command(BaseCommand):\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\"event\", type=str)\n        parser.add_argument(\"--zip\", action=\"store_true\")\n\n    def handle(self, *args, **options):\n        event_slug = options.get(\"event\")\n\n        with scopes_disabled():\n            try:\n                event = Event.objects.get(slug__iexact=event_slug)\n            except Event.DoesNotExist:\n                raise CommandError(f'Could not find event with slug \"{event_slug}\".')\n\n        with scope(event=event):\n            logging.info(f\"Exporting {event.name}\")\n            export_dir = get_export_path(event)\n            zip_path = get_export_zip_path(event)\n            tmp_dir = export_dir.with_name(export_dir.name + \"-new\")\n\n            delete_directory(tmp_dir)\n            tmp_dir.mkdir()\n\n            try:\n                export_event(event, tmp_dir)\n                delete_directory(export_dir)\n                tmp_dir.rename(export_dir)\n            finally:\n                delete_directory(tmp_dir)\n\n            logging.info(f\"Exported to {export_dir}\")\n\n            if options.get(\"zip\"):\n                make_archive(\n                    root_dir=settings.HTMLEXPORT_ROOT,\n                    base_dir=event.slug,\n                    base_name=zip_path.parent / zip_path.stem,\n                    format=\"zip\",\n                )\n\n                logging.info(f\"Exported to {zip_path}\")\n", "code_before": "import contextlib\nimport logging\nimport re\nimport shutil\nimport urllib.parse\nfrom pathlib import Path\nfrom shutil import make_archive\n\nfrom bs4 import BeautifulSoup\nfrom django.conf import settings\nfrom django.core.management.base import BaseCommand, CommandError\nfrom django.test import Client, override_settings\nfrom django.utils.timezone import override as override_timezone\nfrom django_scopes import scope, scopes_disabled\n\nfrom pretalx.common.signals import register_data_exporters\nfrom pretalx.common.utils import rolledback_transaction\nfrom pretalx.event.models import Event\n\n\n@contextlib.contextmanager\ndef fake_admin(event):\n    with rolledback_transaction():\n        event.is_public = True\n        event.save()\n        client = Client()\n\n        def get(url):\n            try:\n                # Try getting the file from disk directly first, \u2026\n                return get_mediastatic_content(url)\n            except FileNotFoundError:\n                # \u2026 then fall back to asking the views.\n                response = client.get(url, is_html_export=True, HTTP_ACCEPT=\"text/html\")\n                content = get_content(response)\n                return content\n\n        yield get\n\n\ndef find_assets(html):\n    \"\"\"Find URLs of images, style sheets and scripts included in `html`.\"\"\"\n    soup = BeautifulSoup(html, \"lxml\")\n\n    for asset in soup.find_all([\"script\", \"img\"]):\n        yield asset.attrs[\"src\"]\n    for asset in soup.find_all([\"link\"]):\n        if asset.attrs[\"rel\"][0] in [\"icon\", \"stylesheet\"]:\n            yield asset.attrs[\"href\"]\n\n\ndef find_urls(css):\n    return re.findall(r'url\\(\"?(/[^\")]+)\"?\\)', css.decode(\"utf-8\"), re.IGNORECASE)\n\n\ndef event_talk_urls(event):\n    for talk in event.talks:\n        yield talk.urls.public\n        yield talk.urls.ical\n\n        for resource in talk.active_resources:\n            if resource.resource and resource.resource.url:\n                yield resource.resource.url\n\n\ndef event_speaker_urls(event):\n    for speaker in event.speakers:\n        profile = speaker.event_profile(event)\n        yield profile.urls.public\n        yield profile.urls.talks_ical\n\n\ndef event_exporter_urls(event):\n    for _, exporter in register_data_exporters.send(event):\n        if exporter.public:\n            yield exporter(event).urls.base\n\n\ndef schedule_version_urls(event):\n    for schedule in event.schedules.filter(version__isnull=False):\n        yield schedule.urls.public\n        yield schedule.urls.widget_data\n        yield schedule.urls.nojs\n\n\ndef event_urls(event):\n    yield event.urls.base\n    yield event.urls.schedule\n    yield event.urls.schedule_nojs\n    yield event.urls.widget_data\n    yield from schedule_version_urls(event)\n    yield event.urls.featured\n    yield event.urls.talks\n    yield from event_talk_urls(event)\n    yield event.urls.speakers\n    yield from event_speaker_urls(event)\n    yield from event_exporter_urls(event)\n    yield event.urls.changelog\n    yield event.urls.feed\n\n\ndef get_path(url):\n    return urllib.parse.urlparse(url).path\n\n\ndef get_content(response):\n    return (\n        b\"\".join(response.streaming_content) if response.streaming else response.content\n    )\n\n\ndef dump_content(destination, path, getter):\n    logging.debug(path)\n    content = getter(path)\n    if path.endswith(\"/\"):\n        path = path + \"index.html\"\n\n    path = Path(destination) / path.lstrip(\"/\")\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(path, \"wb\") as f:\n        f.write(content)\n    return content\n\n\ndef get_mediastatic_content(url):\n    if url.startswith(settings.STATIC_URL):\n        local_path = settings.STATIC_ROOT / url[len(settings.STATIC_URL) :]\n    elif url.startswith(settings.MEDIA_URL):\n        local_path = settings.MEDIA_ROOT / url[len(settings.MEDIA_URL) :]\n    else:\n        raise FileNotFoundError()\n\n    with open(local_path, \"rb\") as f:\n        return f.read()\n\n\ndef export_event(event, destination):\n    with override_settings(\n        COMPRESS_ENABLED=True, COMPRESS_OFFLINE=True\n    ), override_timezone(event.timezone):\n        with fake_admin(event) as get:\n            logging.info(\"Collecting URLs for export\")\n            urls = [*event_urls(event)]\n            assets = set()\n\n            logging.info(f\"Exporting {len(urls)} pages\")\n            for url in map(get_path, urls):\n                content = dump_content(destination, url, get)\n                assets |= set(map(get_path, find_assets(content)))\n\n            css_assets = set()\n\n            logging.info(f\"Exporting {len(assets)} static files from HTML links\")\n            for url in assets:\n                content = dump_content(destination, url, get)\n\n                if url.endswith(\".css\"):\n                    css_assets |= set(find_urls(content))\n\n            logging.info(f\"Exporting {len(css_assets)} files from CSS links\")\n            for url_path in (get_path(urllib.parse.unquote(url)) for url in css_assets):\n                dump_content(destination, url_path, get)\n\n\ndef delete_directory(path):\n    with contextlib.suppress(FileNotFoundError):\n        shutil.rmtree(path)\n\n\ndef get_export_path(event):\n    return settings.HTMLEXPORT_ROOT / event.slug\n\n\ndef get_export_zip_path(event):\n    return get_export_path(event).with_suffix(\".zip\")\n\n\nclass Command(BaseCommand):\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\"event\", type=str)\n        parser.add_argument(\"--zip\", action=\"store_true\")\n\n    def handle(self, *args, **options):\n        event_slug = options.get(\"event\")\n\n        with scopes_disabled():\n            try:\n                event = Event.objects.get(slug__iexact=event_slug)\n            except Event.DoesNotExist:\n                raise CommandError(f'Could not find event with slug \"{event_slug}\".')\n\n        with scope(event=event):\n            logging.info(f\"Exporting {event.name}\")\n            export_dir = get_export_path(event)\n            zip_path = get_export_zip_path(event)\n            tmp_dir = export_dir.with_name(export_dir.name + \"-new\")\n\n            delete_directory(tmp_dir)\n            tmp_dir.mkdir()\n\n            try:\n                export_event(event, tmp_dir)\n                delete_directory(export_dir)\n                tmp_dir.rename(export_dir)\n            finally:\n                delete_directory(tmp_dir)\n\n            logging.info(f\"Exported to {export_dir}\")\n\n            if options.get(\"zip\"):\n                make_archive(\n                    root_dir=settings.HTMLEXPORT_ROOT,\n                    base_dir=event.slug,\n                    base_name=zip_path.parent / zip_path.stem,\n                    format=\"zip\",\n                )\n\n                logging.info(f\"Exported to {zip_path}\")\n", "patch": "@@ -115,7 +115,9 @@ def dump_content(destination, path, getter):\n     if path.endswith(\"/\"):\n         path = path + \"index.html\"\n \n-    path = Path(destination) / path.lstrip(\"/\")\n+    path = (Path(destination) / path.lstrip(\"/\")).resolve()\n+    if not Path(destination) in path.parents:\n+        raise CommandError(\"Path traversal detected, aborting.\")\n     path.parent.mkdir(parents=True, exist_ok=True)\n \n     with open(path, \"wb\") as f:\n@@ -131,6 +133,14 @@ def get_mediastatic_content(url):\n     else:\n         raise FileNotFoundError()\n \n+    # Prevent directory traversal, make sure the path is inside the media or static root\n+    local_path = local_path.resolve(strict=True)\n+    if not any(\n+        path in local_path.parents\n+        for path in (settings.MEDIA_ROOT, settings.STATIC_ROOT)\n+    ):\n+        raise FileNotFoundError()\n+\n     with open(local_path, \"rb\") as f:\n         return f.read()\n ", "file_path": "files/2023_4/264", "file_language": "py", "file_name": "src/pretalx/agenda/management/commands/export_schedule_html.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
