{"index": 3770, "cve_id": "CVE-2019-14751", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "NLTK Downloader before 3.4.5 is vulnerable to a directory traversal, allowing attackers to write arbitrary files via a ../ (dot dot slash) in an NLTK package (ZIP archive) that is mishandled during extraction.", "cvss": "7.5", "publish_date": "August 22, 2019", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "NONE", "I": "HIGH", "A": "NONE", "commit_id": "f59d7ed8df2e0e957f7f247fe218032abdbe9a10", "commit_message": "CVE-2019-14751:\nFixed security bug in downloader\n(https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-14751)", "commit_date": "2019-08-20T10:35:00Z", "project": "nltk/nltk", "url": "https://api.github.com/repos/nltk/nltk/commits/f59d7ed8df2e0e957f7f247fe218032abdbe9a10", "html_url": "https://github.com/nltk/nltk/commit/f59d7ed8df2e0e957f7f247fe218032abdbe9a10", "windows_before": [{"commit_id": "403d9f1d04d08c995b74a9e1298b5443e215eaad", "commit_date": "Tue Aug 20 10:05:48 2019 +0800", "commit_message": "Merge branch 'develop' into Update_Vader_Rules", "files_name": ["c52e47737ed06473590cb0d5fd64b6899b5c6c21 - Tue Aug 20 10:01:53 2019 +0800 : refactoring to minimize sentiment.util code", "nltk/sentiment/sentiment_analyzer.py", "nltk/sentiment/util.py", "nltk/sentiment/vader.py", "nltk/util.py"]}, {"commit_id": "6028f2c62ff460f313803d5f05c9e9167b3d8fcb", "commit_date": "Tue Aug 20 06:50:56 2019 +0930", "commit_message": "Merge pull request #2368 from henchc/henchc-syllable-patch-1", "files_name": ["6b6b4b267a0c0404976ce93151c9db0de7a183ac - Mon Aug 19 12:05:48 2019 -0300 : Add myself to AUTHORS", "AUTHORS.md", "CONTRIBUTING.md"]}, {"commit_id": "de8a5bc961cf41ac4c565866dc12b31dc86194b4", "commit_date": "Mon Aug 19 11:47:49 2019 -0300", "commit_message": "Add unit tests for JSON serialization of taggers", "files_name": ["nltk/tag/sequential.py", "nltk/test/unit/test_json_serialization.py"]}, {"commit_id": "289f560fe4b58c25a842e4c5b1a1c820af4a840e", "commit_date": "Mon Aug 19 17:55:37 2019 +0930", "commit_message": "Merge pull request #2370 from nltk/alvations-patch-ci-1", "files_name": ["2e034108c008df31c3b5f4ec0036814120b31e06 - Mon Aug 19 09:49:03 2019 +0800 : Isolate imports for parallelization inside function.", "nltk/util.py"]}, {"commit_id": "fcf01472b6cb874f402019f9c2251f8304d3e49d", "commit_date": "Sun Aug 18 13:13:42 2019 -0400", "commit_message": "add SyllableTokenizer import to docstring", "files_name": ["nltk/tokenize/sonority_sequencing.py"]}, {"commit_id": "58a5e0ff9f2a825bdd758d3358844175536ad153", "commit_date": "Thu Aug 15 16:14:09 2019 -0300", "commit_message": "Remove Python 2 class notation", "files_name": ["nltk/tbl/feature.py", "nltk/tbl/rule.py", "nltk/tbl/template.py"]}, {"commit_id": "51f562aea135775b14e4049f646f47c0ec74e33f", "commit_date": "Thu Aug 15 14:54:41 2019 -0300", "commit_message": "Fix JSON serialization of Rule", "files_name": ["nltk/tbl/rule.py"]}, {"commit_id": "4fce4180f4b2e73556572aa85b5f895aa8075061", "commit_date": "Thu Aug 15 11:15:36 2019 -0300", "commit_message": "Add JSON serialization to PerceptronTagger", "files_name": ["nltk/tag/perceptron.py"]}, {"commit_id": "2b572e4323802d11feaa7666ef12ef4c6f359b93", "commit_date": "Thu Aug 15 00:33:14 2019 -0300", "commit_message": "Fix JSON encoding and decoding of NgramTaggers", "files_name": ["nltk/tag/sequential.py"]}, {"commit_id": "509e8821c8543bf823d459c4e00d82fb5979c4c8", "commit_date": "Wed Aug 14 19:45:34 2019 -0300", "commit_message": "Fix typo in RegexpTagger's encode_json_obj", "files_name": ["nltk/tag/sequential.py"]}, {"commit_id": "81490305bbbb42c6b7fa62a4694d65607b7f420f", "commit_date": "Thu Aug 15 16:05:44 2019 +0930", "commit_message": "Merge pull request #2364 from hervenicol/formatargspec_DeprecationWarning", "files_name": ["c26d8754c3b779e668eea37a664d109bb9aec8d6 - Mon Aug 12 22:38:51 2019 +0930 : Merge pull request #2363 from Copper-Head/2332-lm-unseen-tokens-zero-prob", "8b0b5a5e53e8214cb4eeab3145246919ec9b5be4 - Mon Aug 12 22:33:09 2019 +0930 : Merge pull request #2362 from Copper-Head/git-ignore-envs", "386ffb620f52615f1591cf7eb7720ed641d54493 - Sun Aug 11 19:34:21 2019 +0200 : decorators: renamed cleansignatureparam to legacysignature and improved docstring for improved clarity", "nltk/decorators.py"]}, {"commit_id": "e9e34350566fe280db43e119099109d1882cc79b", "commit_date": "Sun Aug 11 18:41:17 2019 +0200", "commit_message": "small fixes to make pylint happier", "files_name": ["nltk/decorators.py"]}, {"commit_id": "1609861ad35efe7dc9a8b9298d6515941c5f5c3c", "commit_date": "Sun Aug 11 18:28:47 2019 +0200", "commit_message": "simplify by removing p2.x compatibility code", "files_name": ["nltk/decorators.py"]}, {"commit_id": "76047d491401e0ace20e458f1447aebfa8167db4", "commit_date": "Sun Aug 11 18:21:09 2019 +0200", "commit_message": "Added myself to AUTHORS", "files_name": ["AUTHORS.md"]}, {"commit_id": "549e3cabe4c770b59f9285506d6f1d82c49ca404", "commit_date": "Sun Aug 11 18:18:59 2019 +0200", "commit_message": "DeprecationWarning: `formatargspec` is deprecated since Python 3.5.", "files_name": ["nltk/decorators.py"]}, {"commit_id": "7551ab90cf9274a6eac8bac48f8b9654abfb6b37", "commit_date": "Sun Aug 11 12:46:14 2019 +0200", "commit_message": "keyword args passed correctly", "files_name": ["nltk/lm/smoothing.py"]}, {"commit_id": "31db070627edb98aa00346bf3c9f4bd568612972", "commit_date": "Sun Aug 11 12:39:31 2019 +0200", "commit_message": "remove print statement", "files_name": ["nltk/lm/models.py"]}, {"commit_id": "60ac089b59dcfd8615aeeb573b7e18b2d5dc691c", "commit_date": "Sun Aug 11 11:45:40 2019 +0200", "commit_message": "autoformatting", "files_name": ["nltk/lm/smoothing.py", "nltk/test/unit/lm/test_vocabulary.py"]}, {"commit_id": "ce74e449dc9526e19596b1c4a9c510bbb35812cc", "commit_date": "Sun Aug 11 11:41:36 2019 +0200", "commit_message": "Simplify smoothing classes by removing extra methods", "files_name": ["nltk/lm/smoothing.py"]}, {"commit_id": "a2c53cc26ef6cb341fbadeae3e3ebf4b6cc24036", "commit_date": "Sun Aug 11 11:40:47 2019 +0200", "commit_message": "Unknown contexts don't trigger division by zero #2332", "files_name": ["nltk/lm/models.py", "nltk/test/unit/lm/test_models.py"]}, {"commit_id": "c58ffd3ffe8d74d6f92f9c9518084bb0096300b3", "commit_date": "Sun Aug 11 12:00:13 2019 +0200", "commit_message": "Git ignores common virtualenvs set up locally", "files_name": [".gitignore"]}, {"commit_id": "e07570930e12eb218b7f591a3c30e7df1305fdf1", "commit_date": "Sun Aug 11 01:07:33 2019 +0200", "commit_message": "Drop support for Python 2 completely", "files_name": ["nltk/lm/__init__.py", "nltk/lm/api.py", "nltk/lm/counter.py", "nltk/lm/models.py", "nltk/lm/preprocessing.py", "nltk/lm/smoothing.py", "nltk/lm/util.py", "nltk/lm/vocabulary.py", "nltk/test/unit/lm/test_counter.py", "nltk/test/unit/lm/test_models.py", "nltk/test/unit/lm/test_preprocessing.py", "nltk/test/unit/lm/test_vocabulary.py"]}, {"commit_id": "81ec20c0611a02b605975c2ee2ea935f24b70326", "commit_date": "Sun Aug 11 00:59:54 2019 +0200", "commit_message": "Remove unneeded argument", "files_name": ["nltk/lm/smoothing.py"]}, {"commit_id": "85b7c31d8e2eb8f419bf765b22500e1cd3f507f2", "commit_date": "Sat Aug 10 21:48:26 2019 +0200", "commit_message": "Improve documentation", "files_name": ["nltk/lm/api.py", "nltk/lm/models.py", "nltk/lm/vocabulary.py", "nltk/test/unit/lm/test_models.py"]}, {"commit_id": "14c701fbc99ce2242a2c912b6c82177b03fad744", "commit_date": "Thu Aug 8 20:25:25 2019 +0800", "commit_message": "clean up old style print statements", "files_name": ["nltk/ccg/lexicon.py", "nltk/classify/__init__.py", "nltk/classify/maxent.py", "nltk/classify/naivebayes.py", "nltk/cluster/em.py", "nltk/corpus/reader/nombank.py", "nltk/corpus/reader/propbank.py", "nltk/downloader.py", "nltk/draw/util.py", "nltk/inference/discourse.py", "nltk/inference/mace.py", "nltk/parse/malt.py", "nltk/parse/nonprojectivedependencyparser.py", "nltk/parse/pchart.py", "nltk/parse/projectivedependencyparser.py", "nltk/sem/chat80.py", "nltk/sem/relextract.py", "nltk/tag/hmm.py", "nltk/tag/tnt.py", "nltk/test/all.py", "nltk/tgrep.py", "nltk/tokenize/repp.py", "nltk/tokenize/toktok.py", "nltk/translate/bleu_score.py", "nltk/translate/gale_church.py"]}, {"commit_id": "10450a402ff4a1d3698b2b6c6c36b7a7159cfb83", "commit_date": "Wed Aug 7 19:58:31 2019 +0800", "commit_message": "Merge branch 'develop' of https://github.com/nltk/nltk into develop", "files_name": ["e5a882fd9beaa9a3a5d677880076fac84aff2c2e - Wed Aug 7 19:58:05 2019 +0800 : updates for NLTK 3.5", "ChangeLog", "nltk/VERSION", "web/conf.py", "web/news.rst"]}, {"commit_id": "3a5d02bf43ec5360f2759a3274fba11de71f840c", "commit_date": "Wed Aug 7 19:56:37 2019 +0800", "commit_message": "dropping support for Python 2.7", "files_name": ["CONTRIBUTING.md"]}, {"commit_id": "cdf2ff6fdb866a4a15d21e1ee49a978375a398d8", "commit_date": "Wed Aug 7 19:56:25 2019 +0800", "commit_message": "dropping support for Python 2.7", "files_name": ["tools/run_doctests.py"]}, {"commit_id": "3ba6ea4af0d6a680ce7a0d4cb45f1a55373eb413", "commit_date": "Wed Aug 7 19:56:12 2019 +0800", "commit_message": "dropping support for Python 2.7", "files_name": ["nltk/data.py", "setup.py", "tools/jenkins/pre-install.sh", "tox.ini"]}, {"commit_id": "e5857c6d21e242f3a023753db2d8297ba456dfd4", "commit_date": "Wed Aug 7 19:38:47 2019 +0800", "commit_message": "Merge pull request #2353 from pombredanne/patch-2", "files_name": ["fb7c5bdbfdd9013672ed8d5d226b2f62a9e353d7 - Wed Aug 7 19:36:50 2019 +0800 : use built-in implementation of unzip", "nltk/downloader.py"]}, {"commit_id": "08772a31072c2d0eb58f67035fa98f0ab81cb31a", "commit_date": "Mon Aug 5 17:06:42 2019 +0800", "commit_message": "remove old dotdotdot pattern for dotdot* pattern.", "files_name": ["nltk/tokenize/nltk_tokenize.py"]}, {"commit_id": "ccf4392cc9445d33d920ea258b312c45b358923d", "commit_date": "Mon Aug 5 16:52:24 2019 +0800", "commit_message": "fix typos", "files_name": ["nltk/tokenize/nltk_tokenize.py"]}, {"commit_id": "9635e077fb904d2ab1facb263fc004030613d582", "commit_date": "Mon Aug 5 10:51:53 2019 +0800", "commit_message": "Create nltk own's Tokenizer class", "files_name": ["nltk/tokenize/__init__.py", "nltk/tokenize/nltk_tokenize.py", "nltk/tokenize/treebank.py"]}, {"commit_id": "128503a24b95a76ca6afaa55f12c95d755e0a90c", "commit_date": "Sat Aug 3 22:04:44 2019 +0200", "commit_message": "Provide  actionable error message in RegexpTagger", "files_name": ["nltk/tag/sequential.py"]}, {"commit_id": "73e031f83530f939786e2e27d22a7fdcdf226f2a", "commit_date": "Wed Jul 31 05:28:24 2019 +0800", "commit_message": "Merge pull request #2311 from GerhardKa/none-bool-feature-values-for-decision-tree", "files_name": ["640a4ec37f5be6ffbbcd96316f11429c46c7dbad - Wed Jul 31 05:28:09 2019 +0800 : Merge branch 'develop' into none-bool-feature-values-for-decision-tree", "65167babeb787260524a8036b789409412294283 - Wed Jul 31 05:16:35 2019 +0800 : Merge pull request #2348 from ndarr/patch-1", "c46296ef771d8b5fd93b3b995b1b1101b52f1303 - Wed Jul 31 05:14:30 2019 +0800 : Merge pull request #2349 from ndarr/meteor-custom-stemmer-fix", "d0facbb5705062231f6ad1b6627d79aa5a06b6ed - Tue Jul 30 18:43:33 2019 +0200 : Added missing pass of custom stemmer object in meteor score", "nltk/translate/meteor_score.py"]}, {"commit_id": "1eec738043a014655716693f252e7171dc71edc7", "commit_date": "Tue Jul 30 18:35:34 2019 +0200", "commit_message": "added name", "files_name": ["AUTHORS.md"]}, {"commit_id": "8b9d3b10ac6474c82bae759c71d2ac22ac8628c0", "commit_date": "Tue Jul 30 20:07:39 2019 +0800", "commit_message": "Merge pull request #2322 from oya163/patch-1", "files_name": ["93c60b963e8af8ab3a9f73150bf758306d073922 - Wed Jul 24 19:18:43 2019 +0200 : deterministic sorting of most informative feature output", "nltk/classify/naivebayes.py"]}, {"commit_id": "82673844b90436287d232ac92cdd423b197b2f6d", "commit_date": "Mon Jul 22 17:31:22 2019 +0200", "commit_message": "sort most_informative_features deterministically (for regression test)", "files_name": ["nltk/classify/naivebayes.py"]}, {"commit_id": "47d1793199f3767759b08f15b82e07e97f3b80c3", "commit_date": "Mon Jul 22 16:54:44 2019 +0200", "commit_message": "merged", "files_name": ["8a1e506cc4cb7a809f24096c757d1256dcb0bd1b - Mon Jul 22 16:53:15 2019 +0200 : modified None train line", "nltk/test/classify.doctest"]}, {"commit_id": "f8461da22797124bab744310d194fd506f51501e", "commit_date": "Mon Jul 22 12:22:36 2019 +0800", "commit_message": "Merge pull request #2342 from alvations/fix-bleu", "files_name": ["fa7397effc3bbd604f5712817b62310ea632bee0 - Mon Jul 22 11:58:56 2019 +0800 : Checks DTrees with None values.", "nltk/test/classify.doctest"]}, {"commit_id": "95cc7d577d10bca011690a938ac4b9fad880ab23", "commit_date": "Mon Jul 22 11:56:11 2019 +0800", "commit_message": "patched missing denominator in smoothing function 4.", "files_name": ["nltk/translate/bleu_score.py"]}, {"commit_id": "330babed229fbd89323d1b0b6f9f96c3442219fa", "commit_date": "Mon Jul 22 10:24:20 2019 +0800", "commit_message": "Fixed typo", "files_name": ["nltk/classify/naivebayes.py"]}, {"commit_id": "9b4d6edcbba4657706effbe9f34492dada9fe22b", "commit_date": "Mon Jul 22 10:23:39 2019 +0800", "commit_message": "Put back original doctest for dtrees without None", "files_name": ["nltk/test/classify.doctest"]}, {"commit_id": "9a11b1b12cb4d60d4ae0a219650c1c692dc0f780", "commit_date": "Mon Jul 22 10:06:44 2019 +0800", "commit_message": "Fixed typo", "files_name": []}], "windows_after": [{"commit_id": "614289f9883e9e7eea9e0f162be65f122ece7e7a", "commit_date": "Tue Aug 20 20:52:15 2019 +0930", "commit_message": "add 3.4.5 release", "files_name": ["web/news.rst"]}, {"commit_id": "3bf1254da2567418e6168021a2b9f29bec582ab3", "commit_date": "Tue Aug 20 20:53:29 2019 +0930", "commit_message": "add 3.4.5 release", "files_name": ["ChangeLog"]}, {"commit_id": "0513d85a9448a76695277e30ae368c08c14a1adb", "commit_date": "Tue Aug 20 10:48:57 2019 -0300", "commit_message": "Drop Python 2 support", "files_name": ["nltk/tag/brill_trainer.py", "nltk/tag/perceptron.py", "nltk/tag/sequential.py"]}, {"commit_id": "6889c2f086cfdb682f7a4f86c9d22f26781bff55", "commit_date": "Fri Aug 23 17:09:59 2019 +0930", "commit_message": "Merge pull request #2366 from alexandredias3d/hotfix/tagger-json-serialization", "files_name": ["abd7037e309a03e8eaff35e65c6dcb59f761aef1 - Tue Aug 27 08:36:39 2019 +0800 : renamed tokenizer", "nltk/tokenize/__init__.py", "nltk/tokenize/destructive.py"]}, {"commit_id": "51bce177db3d5a9c49e3f22fd77089c028b3d780", "commit_date": "Tue Aug 27 08:36:57 2019 +0800", "commit_message": "renamed tokenizer", "files_name": ["nltk/tokenize/__init__.py"]}, {"commit_id": "ac358f558f27a0d6f847d94d14f42335f6e5efcf", "commit_date": "Tue Aug 27 08:38:41 2019 +0800", "commit_message": "renamed tokenizer", "files_name": ["nltk/tokenize/treebank.py"]}, {"commit_id": "33451ac190063ed8373a6ef76e62c6c45e73436e", "commit_date": "Tue Aug 27 08:51:49 2019 +0800", "commit_message": "remove nltk_tokenize", "files_name": ["nltk/tokenize/nltk_tokenize.py"]}, {"commit_id": "95b01111101ccad22ba861179b98e77722b75a14", "commit_date": "Wed Aug 28 13:57:55 2019 +0800", "commit_message": "collocation_list returns a list of tuples", "files_name": ["nltk/text.py"]}, {"commit_id": "0990bd084b227c100c0c8e5eff81c2ee3163f604", "commit_date": "Wed Aug 28 14:06:36 2019 +0800", "commit_message": "Added test for collocation_list()", "files_name": ["nltk/text.py"]}, {"commit_id": "398c25da30d57400fac1f036bc555fbe09f252ad", "commit_date": "Wed Aug 28 14:10:02 2019 +0800", "commit_message": "Added test for collocations()", "files_name": ["nltk/text.py"]}, {"commit_id": "42d48aaecb932dcf81a617b71fbe8b0c9a8a9ace", "commit_date": "Wed Aug 28 16:53:53 2019 +0800", "commit_message": "Use ellipsis for doctest", "files_name": ["nltk/text.py"]}, {"commit_id": "b3418487a75e60fbdd327c3d5ec7ee6d76a9d963", "commit_date": "Wed Aug 28 17:24:34 2019 +0800", "commit_message": "Correct output for the doctest.", "files_name": ["nltk/text.py"]}, {"commit_id": "d9599890e999846eabc46f3982a122deadcddfd6", "commit_date": "Wed Aug 28 19:28:30 2019 +0930", "commit_message": "Merge pull request #2377 from nltk/alvations-patch-text", "files_name": ["94d599dd4bba26d9b9bc2b7063c1d75e184345c2 - Tue Aug 20 10:17:10 2019 +0800 : refactoring with VaderConstant class", "nltk/sentiment/vader.py"]}, {"commit_id": "1a12f305d555cdee56ea9f4b900e13dd2d652a1b", "commit_date": "Tue Aug 20 10:24:05 2019 +0800", "commit_message": "remove save_file", "files_name": ["nltk/sentiment/util.py", "nltk/sentiment/vader.py"]}, {"commit_id": "a5f06c8c6010f03732c0e36af907cbfc6a6218c9", "commit_date": "Tue Aug 20 10:39:34 2019 +0800", "commit_message": "allow empty sentitext", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "917f4b037efc10484b8ce088186f2b7359e8f9f8", "commit_date": "Tue Aug 20 10:43:31 2019 +0800", "commit_message": "localize sentitext in the polarity_score and valency", "files_name": ["nltk/sentiment/util.py", "nltk/sentiment/vader.py", "nltk/util.py"]}, {"commit_id": "429ba3b5dad7d6e4dcb3609ec1a663db943a12c7", "commit_date": "Tue Aug 20 11:30:03 2019 +0800", "commit_message": "move punctuations and punc regex to VaderConstant", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "0f36f4aae8fbdd387a34a88d5e270716d987559e", "commit_date": "Tue Sep 3 08:44:51 2019 +0800", "commit_message": "optimize MWE rules", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "3a57233ad5f551d13c0e2878d73c768b02402d70", "commit_date": "Tue Sep 3 08:51:50 2019 +0800", "commit_message": "cleaned up comments", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "da299330e9674ae141ac2fbd8248658f986dc3ab", "commit_date": "Tue Sep 3 08:56:44 2019 +0800", "commit_message": "supports extended booster dict addition", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "e209e61a46bf1a692a54101b871eb5187230b3c6", "commit_date": "Tue Sep 3 09:09:05 2019 +0800", "commit_message": "remove proposed extension from original vader algorithm", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "15feb835f0e798cdbd924e5cf0653146a4e4aa7d", "commit_date": "Tue Sep 3 09:16:43 2019 +0800", "commit_message": "remove unused import, subclass of object", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "59ffb3fda800609fcc9d2386b0f9ea5d6399f321", "commit_date": "Tue Sep 3 09:32:47 2019 +0800", "commit_message": "remove trace of extension", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "d2e56cdba617091c807ba8694e1d1b2267467720", "commit_date": "Tue Sep 3 09:48:08 2019 +0800", "commit_message": "use the correct index for sentiment words", "files_name": ["nltk/sentiment/vader.py"]}, {"commit_id": "4c7367cf3df5c3104450ae3fb16c473219f4de61", "commit_date": "Fri Sep 6 15:21:22 2019 +0930", "commit_message": "Merge pull request #2307 from itsmemala/Update_Vader_Rules", "files_name": ["615e72f7d7a7d16d38fbe1478095a3471e099049 - Wed Sep 18 09:01:52 2019 +0800 : use regex instead of re, resolves #2409; add regex dependency", "nltk/tokenize/casual.py", "pip-req.txt", "tox.ini"]}, {"commit_id": "bd9d21a2dfcf2b4db2f31617286992bbb69ac928", "commit_date": "Fri Sep 20 16:50:10 2019 +1000", "commit_message": "Fixed typo in a docstring", "files_name": ["nltk/tag/__init__.py"]}, {"commit_id": "90bc243ff8b071741467ce1b29bd9d7ab5273706", "commit_date": "Sat Sep 21 21:42:09 2019 +0800", "commit_message": "Merge pull request #2413 from xmcgcg/patch-1", "files_name": ["6fbad0476dbba20aedbbf88a5ff8352e2e7a383f - Sat Sep 28 10:28:14 2019 +0800 : Add regex dependency to setup.py", "setup.py"]}, {"commit_id": "1d7f0d5806bde06b54c6d5185232dd7f3b925e5d", "commit_date": "Sat Sep 28 18:31:14 2019 +0930", "commit_message": "Merge pull request #2422 from BLKSerene/develop", "files_name": ["c256fd67611f6715f9e18be3bc56a8a5b4c25f85 - Mon Oct 14 13:08:35 2019 +0200 : added tag formatting to support spanish POS", "nltk/tag/stanford.py"]}, {"commit_id": "125d3ba456498366cd20c9a991562f4a1f8df77e", "commit_date": "Wed Oct 16 19:47:53 2019 +0930", "commit_message": "Merge pull request #2355 from alvations/nltk-tokenize", "files_name": ["2a5aece8624504ebdaf363b2005e01f81dedade7 - Wed Oct 16 19:58:02 2019 +0930 : update for 3.5", "ChangeLog"]}, {"commit_id": "6492ad9438ed25f50ed863617f359f32b859a5cb", "commit_date": "Thu Oct 17 17:54:28 2019 +0200", "commit_message": "Reproduce Python 3.x incompatibility bug for pl196x corpus reader.", "files_name": ["nltk/test/unit/test_pl196x.py"]}, {"commit_id": "661f48e2edd5e52a2e670a63b259aa69d01a0db9", "commit_date": "Thu Oct 17 17:55:41 2019 +0200", "commit_message": "Fix Python 3.x incompatibility bug for pl196x corpus reader. In Python2.x, filter returns a list, but in Python3 it returns an iterator.", "files_name": ["nltk/corpus/reader/pl196x.py"]}, {"commit_id": "769c62f74d2ed3e05bde71b5654262a12aa84122", "commit_date": "Thu Oct 17 17:56:45 2019 +0200", "commit_message": "Add Maciej Gawinecki to AUTHORS.md", "files_name": ["AUTHORS.md"]}, {"commit_id": "ef937a6a7463fa1e4b2a3f926be55f41e8aa1d12", "commit_date": "Fri Oct 18 15:22:57 2019 -0700", "commit_message": "fixes tests in py3.8", "files_name": ["nltk/parse/earleychart.py", "nltk/parse/featurechart.py", "nltk/treeprettyprinter.py"]}, {"commit_id": "198b2cf80f4c09f9ee210392ad5dc64b6fd31717", "commit_date": "Fri Oct 25 15:59:20 2019 -0700", "commit_message": "Only remove top node if it's non-branching", "files_name": ["nltk/corpus/reader/bracket_parse.py"]}, {"commit_id": "ea7a4514d594c952f9e23a06650e9b5c9a8e0107", "commit_date": "Mon Oct 28 07:31:11 2019 +0800", "commit_message": "Patching #2440", "files_name": ["nltk/data.py"]}, {"commit_id": "e051dabef5f40154dc20744c6ea49d070e7390fc", "commit_date": "Sun Nov 3 01:17:50 2019 -0500", "commit_message": "Fix error in grammar.CFG.eliminate_start", "files_name": ["AUTHORS.md", "nltk/grammar.py"]}, {"commit_id": "8b36a8a7097205d66953e300bc3f8c4f02aacfeb", "commit_date": "Sun Nov 3 01:07:23 2019 -0600", "commit_message": "Fix nonetype return from grammar.CFG.chomsky_normal_form", "files_name": ["nltk/grammar.py"]}, {"commit_id": "cb02e757257d6ee57d934433f484e7048b709434", "commit_date": "Tue Nov 12 20:44:50 2019 +0930", "commit_message": "Merge pull request #2437 from rmalouf/trees", "files_name": ["46b703ca2d8acc5762ddd454d81c67ae362a9582 - Tue Nov 12 20:48:14 2019 +0930 : Merge pull request #2453 from jacobdweightman/bugfix/eliminate_start", "2ac2faa459b16c7c5ba0e4fd951f0f9e1e980263 - Tue Nov 12 20:48:52 2019 +0930 : Merge pull request #2455 from jacobdweightman/bugfix/chomsky_normal_form", "b4507a2f0f9a49631372194a8d06a6e960fd6526 - Mon Nov 18 15:36:49 2019 +0800 : Force redownload and reinstall, hopefully also re-unzipping", "tools/travis/install.sh"]}, {"commit_id": "0c8121ffaf608b59d7d7841d3977cb534319c416", "commit_date": "Mon Nov 18 18:47:40 2019 +0930", "commit_message": "Merge pull request #2462 from alvations/patch-ci", "files_name": ["90d6779613fc698a39229e383f93b5c69bae672b - Mon Nov 18 19:58:04 2019 +0930 : Merge pull request #2430 from dzieciou/hotfix/pl196x", "230d07bf1517339d0ee7ad76fc4c4ec2ef75d032 - Fri Oct 18 15:22:57 2019 -0700 : fixes tests in py3.8", "nltk/parse/earleychart.py", "nltk/parse/featurechart.py", "nltk/treeprettyprinter.py"]}, {"commit_id": "0a14b22e6878640764454cd5e4961d7cd61087db", "commit_date": "Sat Nov 30 18:04:06 2019 -0300", "commit_message": "make FreqDist iterable by implementing __iter__", "files_name": ["nltk/probability.py", "nltk/test/unit/test_freqdist.py"]}, {"commit_id": "eae8bb0aa8d03b8a337c364b15d0bf06429b0c51", "commit_date": "Sat Nov 30 18:05:57 2019 -0300", "commit_message": "add myself to AUTHORS.md", "files_name": ["AUTHORS.md"]}, {"commit_id": "56e3c71977adbad5d50c9eaca1b14069d80c0704", "commit_date": "Sun Dec 1 10:14:24 2019 +0100", "commit_message": "Merge pull request #2466 from Bonifacio2/iterable-FreqDist", "files_name": ["71149b9088b154fb8172ae793c6c69a74fa2c92b - Mon Dec 2 13:20:56 2019 -0500 : Bug fix for Issue 2334", "nltk/probability.py"]}, {"commit_id": "265c98820d81f98639603f4599222faf057cb1c9", "commit_date": "Wed Dec 18 09:46:30 2019 -0500", "commit_message": "Fixed invalid target position when extracting phrases.", "files_name": ["nltk/translate/phrase_based.py"]}, {"commit_id": "367d9264645fd077fa58888f5f37ae527a179b2b", "commit_date": "Thu Dec 19 15:07:47 2019 +0100", "commit_message": "Merge pull request #2480 from SamuelLarkin/bug.phrase_based", "files_name": ["51b1d8b29e47e878a777a2c30e7b5633156345f9 - Fri Dec 20 17:46:59 2019 +0100 : simplify expressions in snowball stemmers", "nltk/stem/snowball.py"]}, {"commit_id": "c769a4938cf516dd10e19576300201ebedd28cc0", "commit_date": "Tue Dec 31 11:32:42 2019 +1100", "commit_message": "Merge pull request #2482 from noviluni/simplify-expressions", "files_name": ["7701d7c74a763fcb537cec630f45a570eb349745 - Tue Dec 31 11:34:54 2019 +1100 : Merge pull request #2468 from EeshitaBiswas/bugfix_2334", "5a2867210db7795dfba9165b9e267050df52d4f3 - Tue Jan 7 22:27:09 2020 +0530 : Use html.escape instead of cgi.escape that was removed in Python 3.8.", "nltk/treeprettyprinter.py"]}, {"commit_id": "7730e436b025d53a585d90b3e2060d057cb9f7d1", "commit_date": "Fri Jan 10 16:05:08 2020 +0300", "commit_message": "`is` operator is exclusive to None", "files_name": ["nltk/parse/malt.py"]}, {"commit_id": "e4579ff010b198c5cac68c8268d8f3bbd9250a5e", "commit_date": "Sun Jan 12 11:12:02 2020 +0530", "commit_message": "Use time.perf_counter instead of time.clock for python 3.8 compatibility.", "files_name": ["nltk/compat.py", "nltk/parse/earleychart.py", "nltk/parse/featurechart.py"]}, {"commit_id": "067bf0b4b2be0aec1a084d764943a5083f61994f", "commit_date": "Tue Jan 21 18:34:45 2020 +0930", "commit_message": "Merge pull request #2486 from ramazanpolat/patch-1", "files_name": ["33535b17d5d748d0dd318892ab2150daa61949db - Tue Jan 21 18:36:07 2020 +0930 : Merge pull request #2485 from tirkarthi/fix-cgi-escape-import", "762663e95a1b60affb9d8b9ab40e6a65cec366b8 - Tue Jan 21 18:37:27 2020 +0930 : Merge pull request #2487 from tirkarthi/fix-time-clock", "9a58c2079629bed65dcbf5d24aaaab0b6a99cafa - Mon Jan 27 16:13:18 2020 -0800 : merges develop branch from upstream", "74a283e3f684639c63779f3b7e207c40c2abd2d4 - Mon Jan 27 16:29:34 2020 -0800 : updates tox.ini to support py38 after confirming that the tests pass.", "tox.ini"]}, {"commit_id": "a2d00dd0a7fcc0a25543e57ebb172d1517270a71", "commit_date": "Mon Jan 27 16:32:08 2020 -0800", "commit_message": "fixes upstream changes", "files_name": ["681809f39c647c66bef86202fe4b3b352fa2a9fc - Mon Jan 27 20:24:32 2020 -0800 : adds python 3.8 config item to travis yml", ".travis.yml"]}, {"commit_id": "b0dcafc6d976fcdf0f274871e49293aabaaec3ac", "commit_date": "Thu Feb 6 08:44:46 2020 +0930", "commit_message": "Merge pull request #2432 from srhrshr/py38-compat", "files_name": ["2134db779b90b075f935000e31f400b31cdf6911 - Sun Feb 23 16:33:06 2020 +0100 : FreqDist ordering based on partial order", "nltk/probability.py"]}, {"commit_id": "e097246e0e56150cb33379c8f41c5e3c4021db38", "commit_date": "Sun Feb 23 17:11:56 2020 +0100", "commit_message": "Remove all __future__ imports from .py files", "files_name": ["nltk/app/chartparser_app.py", "nltk/app/chunkparser_app.py", "nltk/app/collocations_app.py", "nltk/app/rdparser_app.py", "nltk/app/wordnet_app.py", "nltk/classify/senna.py", "nltk/corpus/reader/panlex_swadesh.py", "nltk/corpus/reader/reviews.py", "nltk/parse/earleychart.py", "nltk/test/childes_fixt.py", "nltk/test/classify_fixt.py", "nltk/test/compat_fixt.py"]}], "parents": [{"commit_id_before": "2554ff48feed878ba7e830ada9825196f3eaa86a", "url_before": "https://api.github.com/repos/nltk/nltk/commits/2554ff48feed878ba7e830ada9825196f3eaa86a", "html_url_before": "https://github.com/nltk/nltk/commit/2554ff48feed878ba7e830ada9825196f3eaa86a"}], "details": [{"raw_url": "https://github.com/nltk/nltk/raw/f59d7ed8df2e0e957f7f247fe218032abdbe9a10/nltk%2Fdownloader.py", "code": "# Natural Language Toolkit: Corpus & Model Downloader\n#\n# Copyright (C) 2001-2019 NLTK Project\n# Author: Edward Loper <edloper@gmail.com>\n# URL: <http://nltk.org/>\n# For license information, see LICENSE.TXT\n\n\"\"\"\nThe NLTK corpus and module downloader.  This module defines several\ninterfaces which can be used to download corpora, models, and other\ndata packages that can be used with NLTK.\n\nDownloading Packages\n====================\nIf called with no arguments, ``download()`` will display an interactive\ninterface which can be used to download and install new packages.\nIf Tkinter is available, then a graphical interface will be shown,\notherwise a simple text interface will be provided.\n\nIndividual packages can be downloaded by calling the ``download()``\nfunction with a single argument, giving the package identifier for the\npackage that should be downloaded:\n\n    >>> download('treebank') # doctest: +SKIP\n    [nltk_data] Downloading package 'treebank'...\n    [nltk_data]   Unzipping corpora/treebank.zip.\n\nNLTK also provides a number of \\\"package collections\\\", consisting of\na group of related packages.  To download all packages in a\ncolleciton, simply call ``download()`` with the collection's\nidentifier:\n\n    >>> download('all-corpora') # doctest: +SKIP\n    [nltk_data] Downloading package 'abc'...\n    [nltk_data]   Unzipping corpora/abc.zip.\n    [nltk_data] Downloading package 'alpino'...\n    [nltk_data]   Unzipping corpora/alpino.zip.\n      ...\n    [nltk_data] Downloading package 'words'...\n    [nltk_data]   Unzipping corpora/words.zip.\n\nDownload Directory\n==================\nBy default, packages are installed in either a system-wide directory\n(if Python has sufficient access to write to it); or in the current\nuser's home directory.  However, the ``download_dir`` argument may be\nused to specify a different installation target, if desired.\n\nSee ``Downloader.default_download_dir()`` for more a detailed\ndescription of how the default download directory is chosen.\n\nNLTK Download Server\n====================\nBefore downloading any packages, the corpus and module downloader\ncontacts the NLTK download server, to retrieve an index file\ndescribing the available packages.  By default, this index file is\nloaded from ``https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml``.\nIf necessary, it is possible to create a new ``Downloader`` object,\nspecifying a different URL for the package index file.\n\nUsage::\n\n    python nltk/downloader.py [-d DATADIR] [-q] [-f] [-k] PACKAGE_IDS\n\nor::\n\n    python -m nltk.downloader [-d DATADIR] [-q] [-f] [-k] PACKAGE_IDS\n\"\"\"\n# ----------------------------------------------------------------------\nfrom __future__ import print_function, division, unicode_literals\n\n\"\"\"\n\n  0     1  2    3\n[label][----][label][----]\n[column  ][column     ]\n\nNotes\n=====\nHandling data files..  Some questions:\n\n* Should the data files be kept zipped or unzipped?  I say zipped.\n\n* Should the data files be kept in svn at all?  Advantages: history;\n  automatic version numbers; 'svn up' could be used rather than the\n  downloader to update the corpora.  Disadvantages: they're big,\n  which makes working from svn a bit of a pain.  And we're planning\n  to potentially make them much bigger.  I don't think we want\n  people to have to download 400MB corpora just to use nltk from svn.\n\n* Compromise: keep the data files in trunk/data rather than in\n  trunk/nltk.  That way you can check them out in svn if you want\n  to; but you don't need to, and you can use the downloader instead.\n\n* Also: keep models in mind.  When we change the code, we'd\n  potentially like the models to get updated.  This could require a\n  little thought.\n\n* So.. let's assume we have a trunk/data directory, containing a bunch\n  of packages.  The packages should be kept as zip files, because we\n  really shouldn't be editing them much (well -- we may edit models\n  more, but they tend to be binary-ish files anyway, where diffs\n  aren't that helpful).  So we'll have trunk/data, with a bunch of\n  files like abc.zip and treebank.zip and propbank.zip.  For each\n  package we could also have eg treebank.xml and propbank.xml,\n  describing the contents of the package (name, copyright, license,\n  etc).  Collections would also have .xml files.  Finally, we would\n  pull all these together to form a single index.xml file.  Some\n  directory structure wouldn't hurt.  So how about::\n\n    /trunk/data/ ....................... root of data svn\n      index.xml ........................ main index file\n      src/ ............................. python scripts\n      packages/ ........................ dir for packages\n        corpora/ ....................... zip & xml files for corpora\n        grammars/ ...................... zip & xml files for grammars\n        taggers/ ....................... zip & xml files for taggers\n        tokenizers/ .................... zip & xml files for tokenizers\n        etc.\n      collections/ ..................... xml files for collections\n\n  Where the root (/trunk/data) would contain a makefile; and src/\n  would contain a script to update the info.xml file.  It could also\n  contain scripts to rebuild some of the various model files.  The\n  script that builds index.xml should probably check that each zip\n  file expands entirely into a single subdir, whose name matches the\n  package's uid.\n\nChanges I need to make:\n  - in index: change \"size\" to \"filesize\" or \"compressed-size\"\n  - in index: add \"unzipped-size\"\n  - when checking status: check both compressed & uncompressed size.\n    uncompressed size is important to make sure we detect a problem\n    if something got partially unzipped.  define new status values\n    to differentiate stale vs corrupt vs corruptly-uncompressed??\n    (we shouldn't need to re-download the file if the zip file is ok\n    but it didn't get uncompressed fully.)\n  - add other fields to the index: author, license, copyright, contact,\n    etc.\n\nthe current grammars/ package would become a single new package (eg\ntoy-grammars or book-grammars).\n\nxml file should have:\n  - authorship info\n  - license info\n  - copyright info\n  - contact info\n  - info about what type of data/annotation it contains?\n  - recommended corpus reader?\n\ncollections can contain other collections.  they can also contain\nmultiple package types (corpora & models).  Have a single 'basics'\npackage that includes everything we talk about in the book?\n\nn.b.: there will have to be a fallback to the punkt tokenizer, in case\nthey didn't download that model.\n\ndefault: unzip or not?\n\n\"\"\"\nimport time, os, zipfile, sys, textwrap, threading, itertools, shutil, functools\nimport subprocess\nfrom hashlib import md5\nfrom xml.etree import ElementTree\n\ntry:\n    TKINTER = True\n    from six.moves.tkinter import (\n        Tk,\n        Frame,\n        Label,\n        Entry,\n        Button,\n        Canvas,\n        Menu,\n        IntVar,\n        TclError,\n    )\n    from six.moves.tkinter_messagebox import showerror\n    from nltk.draw.table import Table\n    from nltk.draw.util import ShowText\nexcept ImportError:\n    TKINTER = False\n    TclError = ValueError\n\nfrom six import string_types, text_type\nfrom six.moves import input\nfrom six.moves.urllib.request import urlopen\nfrom six.moves.urllib.error import HTTPError, URLError\n\nimport nltk\nfrom nltk.compat import python_2_unicode_compatible\n\n# urllib2 = nltk.internals.import_from_stdlib('urllib2')\n\n\n######################################################################\n# Directory entry objects (from the data server's index file)\n######################################################################\n\n\n@python_2_unicode_compatible\nclass Package(object):\n    \"\"\"\n    A directory entry for a downloadable package.  These entries are\n    extracted from the XML index file that is downloaded by\n    ``Downloader``.  Each package consists of a single file; but if\n    that file is a zip file, then it can be automatically decompressed\n    when the package is installed.\n    \"\"\"\n\n    def __init__(\n        self,\n        id,\n        url,\n        name=None,\n        subdir='',\n        size=None,\n        unzipped_size=None,\n        checksum=None,\n        svn_revision=None,\n        copyright='Unknown',\n        contact='Unknown',\n        license='Unknown',\n        author='Unknown',\n        unzip=True,\n        **kw\n    ):\n        self.id = id\n        \"\"\"A unique identifier for this package.\"\"\"\n\n        self.name = name or id\n        \"\"\"A string name for this package.\"\"\"\n\n        self.subdir = subdir\n        \"\"\"The subdirectory where this package should be installed.\n           E.g., ``'corpora'`` or ``'taggers'``.\"\"\"\n\n        self.url = url\n        \"\"\"A URL that can be used to download this package's file.\"\"\"\n\n        self.size = int(size)\n        \"\"\"The filesize (in bytes) of the package file.\"\"\"\n\n        self.unzipped_size = int(unzipped_size)\n        \"\"\"The total filesize of the files contained in the package's\n           zipfile.\"\"\"\n\n        self.checksum = checksum\n        \"\"\"The MD-5 checksum of the package file.\"\"\"\n\n        self.svn_revision = svn_revision\n        \"\"\"A subversion revision number for this package.\"\"\"\n\n        self.copyright = copyright\n        \"\"\"Copyright holder for this package.\"\"\"\n\n        self.contact = contact\n        \"\"\"Name & email of the person who should be contacted with\n           questions about this package.\"\"\"\n\n        self.license = license\n        \"\"\"License information for this package.\"\"\"\n\n        self.author = author\n        \"\"\"Author of this package.\"\"\"\n\n        ext = os.path.splitext(url.split('/')[-1])[1]\n        self.filename = os.path.join(subdir, id + ext)\n        \"\"\"The filename that should be used for this package's file.  It\n           is formed by joining ``self.subdir`` with ``self.id``, and\n           using the same extension as ``url``.\"\"\"\n\n        self.unzip = bool(int(unzip))  # '0' or '1'\n        \"\"\"A flag indicating whether this corpus should be unzipped by\n           default.\"\"\"\n\n        # Include any other attributes provided by the XML file.\n        self.__dict__.update(kw)\n\n    @staticmethod\n    def fromxml(xml):\n        if isinstance(xml, string_types):\n            xml = ElementTree.parse(xml)\n        for key in xml.attrib:\n            xml.attrib[key] = text_type(xml.attrib[key])\n        return Package(**xml.attrib)\n\n    def __lt__(self, other):\n        return self.id < other.id\n\n    def __repr__(self):\n        return '<Package %s>' % self.id\n\n\n@python_2_unicode_compatible\nclass Collection(object):\n    \"\"\"\n    A directory entry for a collection of downloadable packages.\n    These entries are extracted from the XML index file that is\n    downloaded by ``Downloader``.\n    \"\"\"\n\n    def __init__(self, id, children, name=None, **kw):\n        self.id = id\n        \"\"\"A unique identifier for this collection.\"\"\"\n\n        self.name = name or id\n        \"\"\"A string name for this collection.\"\"\"\n\n        self.children = children\n        \"\"\"A list of the ``Collections`` or ``Packages`` directly\n           contained by this collection.\"\"\"\n\n        self.packages = None\n        \"\"\"A list of ``Packages`` contained by this collection or any\n           collections it recursively contains.\"\"\"\n\n        # Include any other attributes provided by the XML file.\n        self.__dict__.update(kw)\n\n    @staticmethod\n    def fromxml(xml):\n        if isinstance(xml, string_types):\n            xml = ElementTree.parse(xml)\n        for key in xml.attrib:\n            xml.attrib[key] = text_type(xml.attrib[key])\n        children = [child.get('ref') for child in xml.findall('item')]\n        return Collection(children=children, **xml.attrib)\n\n    def __lt__(self, other):\n        return self.id < other.id\n\n    def __repr__(self):\n        return '<Collection %s>' % self.id\n\n\n######################################################################\n# Message Passing Objects\n######################################################################\n\n\nclass DownloaderMessage(object):\n    \"\"\"A status message object, used by ``incr_download`` to\n       communicate its progress.\"\"\"\n\n\nclass StartCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection\n\n\nclass FinishCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection\n\n\nclass StartPackageMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass FinishPackageMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass StartDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has started downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass FinishDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has finished downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass StartUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has started unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass FinishUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has finished unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass UpToDateMessage(DownloaderMessage):\n    \"\"\"The package download file is already up-to-date\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass StaleMessage(DownloaderMessage):\n    \"\"\"The package download file is out-of-date or corrupt\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass ErrorMessage(DownloaderMessage):\n    \"\"\"Data server encountered an error\"\"\"\n\n    def __init__(self, package, message):\n        self.package = package\n        if isinstance(message, Exception):\n            self.message = str(message)\n        else:\n            self.message = message\n\n\nclass ProgressMessage(DownloaderMessage):\n    \"\"\"Indicates how much progress the data server has made\"\"\"\n\n    def __init__(self, progress):\n        self.progress = progress\n\n\nclass SelectDownloadDirMessage(DownloaderMessage):\n    \"\"\"Indicates what download directory the data server is using\"\"\"\n\n    def __init__(self, download_dir):\n        self.download_dir = download_dir\n\n\n######################################################################\n# NLTK Data Server\n######################################################################\n\n\nclass Downloader(object):\n    \"\"\"\n    A class used to access the NLTK data server, which can be used to\n    download corpora and other data packages.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    INDEX_TIMEOUT = 60 * 60  # 1 hour\n    \"\"\"The amount of time after which the cached copy of the data\n       server index will be considered 'stale,' and will be\n       re-downloaded.\"\"\"\n\n    DEFAULT_URL = 'https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml'\n    \"\"\"The default URL for the NLTK data server's index.  An\n       alternative URL can be specified when creating a new\n       ``Downloader`` object.\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Status Constants\n    # /////////////////////////////////////////////////////////////////\n\n    INSTALLED = 'installed'\n    \"\"\"A status string indicating that a package or collection is\n       installed and up-to-date.\"\"\"\n    NOT_INSTALLED = 'not installed'\n    \"\"\"A status string indicating that a package or collection is\n       not installed.\"\"\"\n    STALE = 'out of date'\n    \"\"\"A status string indicating that a package or collection is\n       corrupt or out-of-date.\"\"\"\n    PARTIAL = 'partial'\n    \"\"\"A status string indicating that a collection is partially\n       installed (i.e., only some of its packages are installed.)\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Cosntructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, server_index_url=None, download_dir=None):\n        self._url = server_index_url or self.DEFAULT_URL\n        \"\"\"The URL for the data server's index file.\"\"\"\n\n        self._collections = {}\n        \"\"\"Dictionary from collection identifier to ``Collection``\"\"\"\n\n        self._packages = {}\n        \"\"\"Dictionary from package identifier to ``Package``\"\"\"\n\n        self._download_dir = download_dir\n        \"\"\"The default directory to which packages will be downloaded.\"\"\"\n\n        self._index = None\n        \"\"\"The XML index file downloaded from the data server\"\"\"\n\n        self._index_timestamp = None\n        \"\"\"Time at which ``self._index`` was downloaded.  If it is more\n           than ``INDEX_TIMEOUT`` seconds old, it will be re-downloaded.\"\"\"\n\n        self._status_cache = {}\n        \"\"\"Dictionary from package/collection identifier to status\n           string (``INSTALLED``, ``NOT_INSTALLED``, ``STALE``, or\n           ``PARTIAL``).  Cache is used for packages only, not\n           collections.\"\"\"\n\n        self._errors = None\n        \"\"\"Flag for telling if all packages got successfully downloaded or not.\"\"\"\n\n        # decide where we're going to save things to.\n        if self._download_dir is None:\n            self._download_dir = self.default_download_dir()\n\n    # /////////////////////////////////////////////////////////////////\n    # Information\n    # /////////////////////////////////////////////////////////////////\n\n    def list(\n        self,\n        download_dir=None,\n        show_packages=True,\n        show_collections=True,\n        header=True,\n        more_prompt=False,\n        skip_installed=False,\n    ):\n        lines = 0  # for more_prompt\n        if download_dir is None:\n            download_dir = self._download_dir\n            print('Using default data directory (%s)' % download_dir)\n        if header:\n            print('=' * (26 + len(self._url)))\n            print(' Data server index for <%s>' % self._url)\n            print('=' * (26 + len(self._url)))\n            lines += 3  # for more_prompt\n        stale = partial = False\n\n        categories = []\n        if show_packages:\n            categories.append('packages')\n        if show_collections:\n            categories.append('collections')\n        for category in categories:\n            print('%s:' % category.capitalize())\n            lines += 1  # for more_prompt\n            for info in sorted(getattr(self, category)(), key=str):\n                status = self.status(info, download_dir)\n                if status == self.INSTALLED and skip_installed:\n                    continue\n                if status == self.STALE:\n                    stale = True\n                if status == self.PARTIAL:\n                    partial = True\n                prefix = {\n                    self.INSTALLED: '*',\n                    self.STALE: '-',\n                    self.PARTIAL: 'P',\n                    self.NOT_INSTALLED: ' ',\n                }[status]\n                name = textwrap.fill(\n                    '-' * 27 + (info.name or info.id), 75, subsequent_indent=27 * ' '\n                )[27:]\n                print('  [%s] %s %s' % (prefix, info.id.ljust(20, '.'), name))\n                lines += len(name.split('\\n'))  # for more_prompt\n                if more_prompt and lines > 20:\n                    user_input = input(\"Hit Enter to continue: \")\n                    if user_input.lower() in ('x', 'q'):\n                        return\n                    lines = 0\n            print()\n        msg = '([*] marks installed packages'\n        if stale:\n            msg += '; [-] marks out-of-date or corrupt packages'\n        if partial:\n            msg += '; [P] marks partially installed collections'\n        print(textwrap.fill(msg + ')', subsequent_indent=' ', width=76))\n\n    def packages(self):\n        self._update_index()\n        return self._packages.values()\n\n    def corpora(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir == 'corpora']\n\n    def models(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir != 'corpora']\n\n    def collections(self):\n        self._update_index()\n        return self._collections.values()\n\n    # /////////////////////////////////////////////////////////////////\n    # Downloading\n    # /////////////////////////////////////////////////////////////////\n\n    def _info_or_id(self, info_or_id):\n        if isinstance(info_or_id, string_types):\n            return self.info(info_or_id)\n        else:\n            return info_or_id\n\n    # [xx] When during downloading is it 'safe' to abort?  Only unsafe\n    # time is *during* an unzip -- we don't want to leave a\n    # partially-unzipped corpus in place because we wouldn't notice\n    # it.  But if we had the exact total size of the unzipped corpus,\n    # then that would be fine.  Then we could abort anytime we want!\n    # So this is really what we should do.  That way the threaded\n    # downloader in the gui can just kill the download thread anytime\n    # it wants.\n\n    def incr_download(self, info_or_id, download_dir=None, force=False):\n        # If they didn't specify a download_dir, then use the default one.\n        if download_dir is None:\n            download_dir = self._download_dir\n            yield SelectDownloadDirMessage(download_dir)\n\n        # If they gave us a list of ids, then download each one.\n        if isinstance(info_or_id, (list, tuple)):\n            for msg in self._download_list(info_or_id, download_dir, force):\n                yield msg\n            return\n\n        # Look up the requested collection or package.\n        try:\n            info = self._info_or_id(info_or_id)\n        except (IOError, ValueError) as e:\n            yield ErrorMessage(None, 'Error loading %s: %s' % (info_or_id, e))\n            return\n\n        # Handle collections.\n        if isinstance(info, Collection):\n            yield StartCollectionMessage(info)\n            for msg in self.incr_download(info.children, download_dir, force):\n                yield msg\n            yield FinishCollectionMessage(info)\n\n        # Handle Packages (delegate to a helper function).\n        else:\n            for msg in self._download_package(info, download_dir, force):\n                yield msg\n\n    def _num_packages(self, item):\n        if isinstance(item, Package):\n            return 1\n        else:\n            return len(item.packages)\n\n    def _download_list(self, items, download_dir, force):\n        # Look up the requested items.\n        for i in range(len(items)):\n            try:\n                items[i] = self._info_or_id(items[i])\n            except (IOError, ValueError) as e:\n                yield ErrorMessage(items[i], e)\n                return\n\n        # Download each item, re-scaling their progress.\n        num_packages = sum(self._num_packages(item) for item in items)\n        progress = 0\n        for i, item in enumerate(items):\n            if isinstance(item, Package):\n                delta = 1.0 / num_packages\n            else:\n                delta = len(item.packages) / num_packages\n            for msg in self.incr_download(item, download_dir, force):\n                if isinstance(msg, ProgressMessage):\n                    yield ProgressMessage(progress + msg.progress * delta)\n                else:\n                    yield msg\n\n            progress += 100 * delta\n\n    def _download_package(self, info, download_dir, force):\n        yield StartPackageMessage(info)\n        yield ProgressMessage(0)\n\n        # Do we already have the current version?\n        status = self.status(info, download_dir)\n        if not force and status == self.INSTALLED:\n            yield UpToDateMessage(info)\n            yield ProgressMessage(100)\n            yield FinishPackageMessage(info)\n            return\n\n        # Remove the package from our status cache\n        self._status_cache.pop(info.id, None)\n\n        # Check for (and remove) any old/stale version.\n        filepath = os.path.join(download_dir, info.filename)\n        if os.path.exists(filepath):\n            if status == self.STALE:\n                yield StaleMessage(info)\n            os.remove(filepath)\n\n        # Ensure the download_dir exists\n        if not os.path.exists(download_dir):\n            os.mkdir(download_dir)\n        if not os.path.exists(os.path.join(download_dir, info.subdir)):\n            os.mkdir(os.path.join(download_dir, info.subdir))\n\n        # Download the file.  This will raise an IOError if the url\n        # is not found.\n        yield StartDownloadMessage(info)\n        yield ProgressMessage(5)\n        try:\n            infile = urlopen(info.url)\n            with open(filepath, 'wb') as outfile:\n                # print info.size\n                num_blocks = max(1, info.size / (1024 * 16))\n                for block in itertools.count():\n                    s = infile.read(1024 * 16)  # 16k blocks.\n                    outfile.write(s)\n                    if not s:\n                        break\n                    if block % 2 == 0:  # how often?\n                        yield ProgressMessage(min(80, 5 + 75 * (block / num_blocks)))\n            infile.close()\n        except IOError as e:\n            yield ErrorMessage(\n                info,\n                'Error downloading %r from <%s>:' '\\n  %s' % (info.id, info.url, e),\n            )\n            return\n        yield FinishDownloadMessage(info)\n        yield ProgressMessage(80)\n\n        # If it's a zipfile, uncompress it.\n        if info.filename.endswith('.zip'):\n            zipdir = os.path.join(download_dir, info.subdir)\n            # Unzip if we're unzipping by default; *or* if it's already\n            # been unzipped (presumably a previous version).\n            if info.unzip or os.path.exists(os.path.join(zipdir, info.id)):\n                yield StartUnzipMessage(info)\n                for msg in _unzip_iter(filepath, zipdir, verbose=False):\n                    # Somewhat of a hack, but we need a proper package reference\n                    msg.package = info\n                    yield msg\n                yield FinishUnzipMessage(info)\n\n        yield FinishPackageMessage(info)\n\n    def download(\n        self,\n        info_or_id=None,\n        download_dir=None,\n        quiet=False,\n        force=False,\n        prefix='[nltk_data] ',\n        halt_on_error=True,\n        raise_on_error=False,\n        print_error_to=sys.stderr,\n    ):\n\n        print_to = functools.partial(print, file=print_error_to)\n        # If no info or id is given, then use the interactive shell.\n        if info_or_id is None:\n            # [xx] hmm -- changing self._download_dir here seems like\n            # the wrong thing to do.  Maybe the _interactive_download\n            # function should make a new copy of self to use?\n            if download_dir is not None:\n                self._download_dir = download_dir\n            self._interactive_download()\n            return True\n\n        else:\n            # Define a helper function for displaying output:\n            def show(s, prefix2=''):\n                print_to(\n                    textwrap.fill(\n                        s,\n                        initial_indent=prefix + prefix2,\n                        subsequent_indent=prefix + prefix2 + ' ' * 4,\n                    )\n                )\n\n            for msg in self.incr_download(info_or_id, download_dir, force):\n                # Error messages\n                if isinstance(msg, ErrorMessage):\n                    show(msg.message)\n                    if raise_on_error:\n                        raise ValueError(msg.message)\n                    if halt_on_error:\n                        return False\n                    self._errors = True\n                    if not quiet:\n                        print_to(\"Error installing package. Retry? [n/y/e]\")\n                        choice = input().strip()\n                        if choice in ['y', 'Y']:\n                            if not self.download(\n                                msg.package.id,\n                                download_dir,\n                                quiet,\n                                force,\n                                prefix,\n                                halt_on_error,\n                                raise_on_error,\n                            ):\n                                return False\n                        elif choice in ['e', 'E']:\n                            return False\n\n                # All other messages\n                if not quiet:\n                    # Collection downloading messages:\n                    if isinstance(msg, StartCollectionMessage):\n                        show('Downloading collection %r' % msg.collection.id)\n                        prefix += '   | '\n                        print_to(prefix)\n                    elif isinstance(msg, FinishCollectionMessage):\n                        print_to(prefix)\n                        prefix = prefix[:-4]\n                        if self._errors:\n                            show(\n                                'Downloaded collection %r with errors'\n                                % msg.collection.id\n                            )\n                        else:\n                            show('Done downloading collection %s' % msg.collection.id)\n\n                    # Package downloading messages:\n                    elif isinstance(msg, StartPackageMessage):\n                        show(\n                            'Downloading package %s to %s...'\n                            % (msg.package.id, download_dir)\n                        )\n                    elif isinstance(msg, UpToDateMessage):\n                        show('Package %s is already up-to-date!' % msg.package.id, '  ')\n                    # elif isinstance(msg, StaleMessage):\n                    #    show('Package %s is out-of-date or corrupt' %\n                    #         msg.package.id, '  ')\n                    elif isinstance(msg, StartUnzipMessage):\n                        show('Unzipping %s.' % msg.package.filename, '  ')\n\n                    # Data directory message:\n                    elif isinstance(msg, SelectDownloadDirMessage):\n                        download_dir = msg.download_dir\n        return True\n\n    def is_stale(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.STALE\n\n    def is_installed(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.INSTALLED\n\n    def clear_status_cache(self, id=None):\n        if id is None:\n            self._status_cache.clear()\n        else:\n            self._status_cache.pop(id, None)\n\n    def status(self, info_or_id, download_dir=None):\n        \"\"\"\n        Return a constant describing the status of the given package\n        or collection.  Status can be one of ``INSTALLED``,\n        ``NOT_INSTALLED``, ``STALE``, or ``PARTIAL``.\n        \"\"\"\n        if download_dir is None:\n            download_dir = self._download_dir\n        info = self._info_or_id(info_or_id)\n\n        # Handle collections:\n        if isinstance(info, Collection):\n            pkg_status = [self.status(pkg.id) for pkg in info.packages]\n            if self.STALE in pkg_status:\n                return self.STALE\n            elif self.PARTIAL in pkg_status:\n                return self.PARTIAL\n            elif self.INSTALLED in pkg_status and self.NOT_INSTALLED in pkg_status:\n                return self.PARTIAL\n            elif self.NOT_INSTALLED in pkg_status:\n                return self.NOT_INSTALLED\n            else:\n                return self.INSTALLED\n\n        # Handle packages:\n        else:\n            filepath = os.path.join(download_dir, info.filename)\n            if download_dir != self._download_dir:\n                return self._pkg_status(info, filepath)\n            else:\n                if info.id not in self._status_cache:\n                    self._status_cache[info.id] = self._pkg_status(info, filepath)\n                return self._status_cache[info.id]\n\n    def _pkg_status(self, info, filepath):\n        if not os.path.exists(filepath):\n            return self.NOT_INSTALLED\n\n        # Check if the file has the correct size.\n        try:\n            filestat = os.stat(filepath)\n        except OSError:\n            return self.NOT_INSTALLED\n        if filestat.st_size != int(info.size):\n            return self.STALE\n\n        # Check if the file's checksum matches\n        if md5_hexdigest(filepath) != info.checksum:\n            return self.STALE\n\n        # If it's a zipfile, and it's been at least partially\n        # unzipped, then check if it's been fully unzipped.\n        if filepath.endswith('.zip'):\n            unzipdir = filepath[:-4]\n            if not os.path.exists(unzipdir):\n                return self.INSTALLED  # but not unzipped -- ok!\n            if not os.path.isdir(unzipdir):\n                return self.STALE\n\n            unzipped_size = sum(\n                os.stat(os.path.join(d, f)).st_size\n                for d, _, files in os.walk(unzipdir)\n                for f in files\n            )\n            if unzipped_size != info.unzipped_size:\n                return self.STALE\n\n        # Otherwise, everything looks good.\n        return self.INSTALLED\n\n    def update(self, quiet=False, prefix='[nltk_data] '):\n        \"\"\"\n        Re-download any packages whose status is STALE.\n        \"\"\"\n        self.clear_status_cache()\n        for pkg in self.packages():\n            if self.status(pkg) == self.STALE:\n                self.download(pkg, quiet=quiet, prefix=prefix)\n\n    # /////////////////////////////////////////////////////////////////\n    # Index\n    # /////////////////////////////////////////////////////////////////\n\n    def _update_index(self, url=None):\n        \"\"\"A helper function that ensures that self._index is\n        up-to-date.  If the index is older than self.INDEX_TIMEOUT,\n        then download it again.\"\"\"\n        # Check if the index is aleady up-to-date.  If so, do nothing.\n        if not (\n            self._index is None\n            or url is not None\n            or time.time() - self._index_timestamp > self.INDEX_TIMEOUT\n        ):\n            return\n\n        # If a URL was specified, then update our URL.\n        self._url = url or self._url\n\n        # Download the index file.\n        self._index = nltk.internals.ElementWrapper(\n            ElementTree.parse(urlopen(self._url)).getroot()\n        )\n        self._index_timestamp = time.time()\n\n        # Build a dictionary of packages.\n        packages = [Package.fromxml(p) for p in self._index.findall('packages/package')]\n        self._packages = dict((p.id, p) for p in packages)\n\n        # Build a dictionary of collections.\n        collections = [\n            Collection.fromxml(c) for c in self._index.findall('collections/collection')\n        ]\n        self._collections = dict((c.id, c) for c in collections)\n\n        # Replace identifiers with actual children in collection.children.\n        for collection in self._collections.values():\n            for i, child_id in enumerate(collection.children):\n                if child_id in self._packages:\n                    collection.children[i] = self._packages[child_id]\n                elif child_id in self._collections:\n                    collection.children[i] = self._collections[child_id]\n                else:\n                    print(\n                        'removing collection member with no package: {}'.format(\n                            child_id\n                        )\n                    )\n                    del collection.children[i]\n\n        # Fill in collection.packages for each collection.\n        for collection in self._collections.values():\n            packages = {}\n            queue = [collection]\n            for child in queue:\n                if isinstance(child, Collection):\n                    queue.extend(child.children)\n                elif isinstance(child, Package):\n                    packages[child.id] = child\n                else:\n                    pass\n            collection.packages = packages.values()\n\n        # Flush the status cache\n        self._status_cache.clear()\n\n    def index(self):\n        \"\"\"\n        Return the XML index describing the packages available from\n        the data server.  If necessary, this index will be downloaded\n        from the data server.\n        \"\"\"\n        self._update_index()\n        return self._index\n\n    def info(self, id):\n        \"\"\"Return the ``Package`` or ``Collection`` record for the\n           given item.\"\"\"\n        self._update_index()\n        if id in self._packages:\n            return self._packages[id]\n        if id in self._collections:\n            return self._collections[id]\n        raise ValueError('Package %r not found in index' % id)\n\n    def xmlinfo(self, id):\n        \"\"\"Return the XML info record for the given item\"\"\"\n        self._update_index()\n        for package in self._index.findall('packages/package'):\n            if package.get('id') == id:\n                return package\n        for collection in self._index.findall('collections/collection'):\n            if collection.get('id') == id:\n                return collection\n        raise ValueError('Package %r not found in index' % id)\n\n    # /////////////////////////////////////////////////////////////////\n    # URL & Data Directory\n    # /////////////////////////////////////////////////////////////////\n\n    def _get_url(self):\n        \"\"\"The URL for the data server's index file.\"\"\"\n        return self._url\n\n    def _set_url(self, url):\n        \"\"\"\n        Set a new URL for the data server. If we're unable to contact\n        the given url, then the original url is kept.\n        \"\"\"\n        original_url = self._url\n        try:\n            self._update_index(url)\n        except:\n            self._url = original_url\n            raise\n\n    url = property(_get_url, _set_url)\n\n    def default_download_dir(self):\n        \"\"\"\n        Return the directory to which packages will be downloaded by\n        default.  This value can be overridden using the constructor,\n        or on a case-by-case basis using the ``download_dir`` argument when\n        calling ``download()``.\n\n        On Windows, the default download directory is\n        ``PYTHONHOME/lib/nltk``, where *PYTHONHOME* is the\n        directory containing Python, e.g. ``C:\\\\Python25``.\n\n        On all other platforms, the default directory is the first of\n        the following which exists or which can be created with write\n        permission: ``/usr/share/nltk_data``, ``/usr/local/share/nltk_data``,\n        ``/usr/lib/nltk_data``, ``/usr/local/lib/nltk_data``, ``~/nltk_data``.\n        \"\"\"\n        # Check if we are on GAE where we cannot write into filesystem.\n        if 'APPENGINE_RUNTIME' in os.environ:\n            return\n\n        # Check if we have sufficient permissions to install in a\n        # variety of system-wide locations.\n        for nltkdir in nltk.data.path:\n            if os.path.exists(nltkdir) and nltk.internals.is_writable(nltkdir):\n                return nltkdir\n\n        # On Windows, use %APPDATA%\n        if sys.platform == 'win32' and 'APPDATA' in os.environ:\n            homedir = os.environ['APPDATA']\n\n        # Otherwise, install in the user's home directory.\n        else:\n            homedir = os.path.expanduser('~/')\n            if homedir == '~/':\n                raise ValueError(\"Could not find a default download directory\")\n\n        # append \"nltk_data\" to the home directory\n        return os.path.join(homedir, 'nltk_data')\n\n    def _get_download_dir(self):\n        \"\"\"\n        The default directory to which packages will be downloaded.\n        This defaults to the value returned by ``default_download_dir()``.\n        To override this default on a case-by-case basis, use the\n        ``download_dir`` argument when calling ``download()``.\n        \"\"\"\n        return self._download_dir\n\n    def _set_download_dir(self, download_dir):\n        self._download_dir = download_dir\n        # Clear the status cache.\n        self._status_cache.clear()\n\n    download_dir = property(_get_download_dir, _set_download_dir)\n\n    # /////////////////////////////////////////////////////////////////\n    # Interactive Shell\n    # /////////////////////////////////////////////////////////////////\n\n    def _interactive_download(self):\n        # Try the GUI first; if that doesn't work, try the simple\n        # interactive shell.\n        if TKINTER:\n            try:\n                DownloaderGUI(self).mainloop()\n            except TclError:\n                DownloaderShell(self).run()\n        else:\n            DownloaderShell(self).run()\n\n\nclass DownloaderShell(object):\n    def __init__(self, dataserver):\n        self._ds = dataserver\n\n    def _simple_interactive_menu(self, *options):\n        print('-' * 75)\n        spc = (68 - sum(len(o) for o in options)) // (len(options) - 1) * ' '\n        print('    ' + spc.join(options))\n        # w = 76/len(options)\n        # fmt = '  ' + ('%-'+str(w)+'s')*(len(options)-1) + '%s'\n        # print fmt % options\n        print('-' * 75)\n\n    def run(self):\n        print('NLTK Downloader')\n        while True:\n            self._simple_interactive_menu(\n                'd) Download',\n                'l) List',\n                ' u) Update',\n                'c) Config',\n                'h) Help',\n                'q) Quit',\n            )\n            user_input = input('Downloader> ').strip()\n            if not user_input:\n                print()\n                continue\n            command = user_input.lower().split()[0]\n            args = user_input.split()[1:]\n            try:\n                if command == 'l':\n                    print()\n                    self._ds.list(self._ds.download_dir, header=False, more_prompt=True)\n                elif command == 'h':\n                    self._simple_interactive_help()\n                elif command == 'c':\n                    self._simple_interactive_config()\n                elif command in ('q', 'x'):\n                    return\n                elif command == 'd':\n                    self._simple_interactive_download(args)\n                elif command == 'u':\n                    self._simple_interactive_update()\n                else:\n                    print('Command %r unrecognized' % user_input)\n            except HTTPError as e:\n                print('Error reading from server: %s' % e)\n            except URLError as e:\n                print('Error connecting to server: %s' % e.reason)\n            # try checking if user_input is a package name, &\n            # downloading it?\n            print()\n\n    def _simple_interactive_download(self, args):\n        if args:\n            for arg in args:\n                try:\n                    self._ds.download(arg, prefix='    ')\n                except (IOError, ValueError) as e:\n                    print(e)\n        else:\n            while True:\n                print()\n                print('Download which package (l=list; x=cancel)?')\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'l':\n                    self._ds.list(\n                        self._ds.download_dir,\n                        header=False,\n                        more_prompt=True,\n                        skip_installed=True,\n                    )\n                    continue\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n                elif user_input:\n                    for id in user_input.split():\n                        try:\n                            self._ds.download(id, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n\n    def _simple_interactive_update(self):\n        while True:\n            stale_packages = []\n            stale = partial = False\n            for info in sorted(getattr(self._ds, 'packages')(), key=str):\n                if self._ds.status(info) == self._ds.STALE:\n                    stale_packages.append((info.id, info.name))\n\n            print()\n            if stale_packages:\n                print('Will update following packages (o=ok; x=cancel)')\n                for pid, pname in stale_packages:\n                    name = textwrap.fill(\n                        '-' * 27 + (pname), 75, subsequent_indent=27 * ' '\n                    )[27:]\n                    print('  [ ] %s %s' % (pid.ljust(20, '.'), name))\n                print()\n\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'o':\n                    for pid, pname in stale_packages:\n                        try:\n                            self._ds.download(pid, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n            else:\n                print('Nothing to update.')\n                return\n\n    def _simple_interactive_help(self):\n        print()\n        print('Commands:')\n        print(\n            '  d) Download a package or collection     u) Update out of date packages'\n        )\n        print('  l) List packages & collections          h) Help')\n        print('  c) View & Modify Configuration          q) Quit')\n\n    def _show_config(self):\n        print()\n        print('Data Server:')\n        print('  - URL: <%s>' % self._ds.url)\n        print(('  - %d Package Collections Available' % len(self._ds.collections())))\n        print(('  - %d Individual Packages Available' % len(self._ds.packages())))\n        print()\n        print('Local Machine:')\n        print('  - Data directory: %s' % self._ds.download_dir)\n\n    def _simple_interactive_config(self):\n        self._show_config()\n        while True:\n            print()\n            self._simple_interactive_menu(\n                's) Show Config', 'u) Set Server URL', 'd) Set Data Dir', 'm) Main Menu'\n            )\n            user_input = input('Config> ').strip().lower()\n            if user_input == 's':\n                self._show_config()\n            elif user_input == 'd':\n                new_dl_dir = input('  New Directory> ').strip()\n                if new_dl_dir in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                elif os.path.isdir(new_dl_dir):\n                    self._ds.download_dir = new_dl_dir\n                else:\n                    print(('Directory %r not found!  Create it first.' % new_dl_dir))\n            elif user_input == 'u':\n                new_url = input('  New URL> ').strip()\n                if new_url in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                else:\n                    if not new_url.startswith(('http://', 'https://')):\n                        new_url = 'http://' + new_url\n                    try:\n                        self._ds.url = new_url\n                    except Exception as e:\n                        print('Error reading <%r>:\\n  %s' % (new_url, e))\n            elif user_input == 'm':\n                break\n\n\nclass DownloaderGUI(object):\n    \"\"\"\n    Graphical interface for downloading packages from the NLTK data\n    server.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Column Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    COLUMNS = [\n        '',\n        'Identifier',\n        'Name',\n        'Size',\n        'Status',\n        'Unzipped Size',\n        'Copyright',\n        'Contact',\n        'License',\n        'Author',\n        'Subdir',\n        'Checksum',\n    ]\n    \"\"\"A list of the names of columns.  This controls the order in\n       which the columns will appear.  If this is edited, then\n       ``_package_to_columns()`` may need to be edited to match.\"\"\"\n\n    COLUMN_WEIGHTS = {'': 0, 'Name': 5, 'Size': 0, 'Status': 0}\n    \"\"\"A dictionary specifying how columns should be resized when the\n       table is resized.  Columns with weight 0 will not be resized at\n       all; and columns with high weight will be resized more.\n       Default weight (for columns not explicitly listed) is 1.\"\"\"\n\n    COLUMN_WIDTHS = {\n        '': 1,\n        'Identifier': 20,\n        'Name': 45,\n        'Size': 10,\n        'Unzipped Size': 10,\n        'Status': 12,\n    }\n    \"\"\"A dictionary specifying how wide each column should be, in\n       characters.  The default width (for columns not explicitly\n       listed) is specified by ``DEFAULT_COLUMN_WIDTH``.\"\"\"\n\n    DEFAULT_COLUMN_WIDTH = 30\n    \"\"\"The default width for columns that are not explicitly listed\n       in ``COLUMN_WIDTHS``.\"\"\"\n\n    INITIAL_COLUMNS = ['', 'Identifier', 'Name', 'Size', 'Status']\n    \"\"\"The set of columns that should be displayed by default.\"\"\"\n\n    # Perform a few import-time sanity checks to make sure that the\n    # column configuration variables are defined consistently:\n    for c in COLUMN_WEIGHTS:\n        assert c in COLUMNS\n    for c in COLUMN_WIDTHS:\n        assert c in COLUMNS\n    for c in INITIAL_COLUMNS:\n        assert c in COLUMNS\n\n    # /////////////////////////////////////////////////////////////////\n    # Color Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    _BACKDROP_COLOR = ('#000', '#ccc')\n\n    _ROW_COLOR = {\n        Downloader.INSTALLED: ('#afa', '#080'),\n        Downloader.PARTIAL: ('#ffa', '#880'),\n        Downloader.STALE: ('#faa', '#800'),\n        Downloader.NOT_INSTALLED: ('#fff', '#888'),\n    }\n\n    _MARK_COLOR = ('#000', '#ccc')\n\n    # _FRONT_TAB_COLOR = ('#ccf', '#008')\n    # _BACK_TAB_COLOR = ('#88a', '#448')\n    _FRONT_TAB_COLOR = ('#fff', '#45c')\n    _BACK_TAB_COLOR = ('#aaa', '#67a')\n\n    _PROGRESS_COLOR = ('#f00', '#aaa')\n\n    _TAB_FONT = 'helvetica -16 bold'\n\n    # /////////////////////////////////////////////////////////////////\n    # Constructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, dataserver, use_threads=True):\n        self._ds = dataserver\n        self._use_threads = use_threads\n\n        # For the threaded downloader:\n        self._download_lock = threading.Lock()\n        self._download_msg_queue = []\n        self._download_abort_queue = []\n        self._downloading = False\n\n        # For tkinter after callbacks:\n        self._afterid = {}\n\n        # A message log.\n        self._log_messages = []\n        self._log_indent = 0\n        self._log('NLTK Downloader Started!')\n\n        # Create the main window.\n        top = self.top = Tk()\n        top.geometry('+50+50')\n        top.title('NLTK Downloader')\n        top.configure(background=self._BACKDROP_COLOR[1])\n\n        # Set up some bindings now, in case anything goes wrong.\n        top.bind('<Control-q>', self.destroy)\n        top.bind('<Control-x>', self.destroy)\n        self._destroyed = False\n\n        self._column_vars = {}\n\n        # Initialize the GUI.\n        self._init_widgets()\n        self._init_menu()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n        self._show_info()\n        self._select_columns()\n        self._table.select(0)\n\n        # Make sure we get notified when we're destroyed, so we can\n        # cancel any download in progress.\n        self._table.bind('<Destroy>', self._destroy)\n\n    def _log(self, msg):\n        self._log_messages.append(\n            '%s %s%s' % (time.ctime(), ' | ' * self._log_indent, msg)\n        )\n\n    # /////////////////////////////////////////////////////////////////\n    # Internals\n    # /////////////////////////////////////////////////////////////////\n\n    def _init_widgets(self):\n        # Create the top-level frame structures\n        f1 = Frame(self.top, relief='raised', border=2, padx=8, pady=0)\n        f1.pack(sid='top', expand=True, fill='both')\n        f1.grid_rowconfigure(2, weight=1)\n        f1.grid_columnconfigure(0, weight=1)\n        Frame(f1, height=8).grid(column=0, row=0)  # spacer\n        tabframe = Frame(f1)\n        tabframe.grid(column=0, row=1, sticky='news')\n        tableframe = Frame(f1)\n        tableframe.grid(column=0, row=2, sticky='news')\n        buttonframe = Frame(f1)\n        buttonframe.grid(column=0, row=3, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=4)  # spacer\n        infoframe = Frame(f1)\n        infoframe.grid(column=0, row=5, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=6)  # spacer\n        progressframe = Frame(\n            self.top, padx=3, pady=3, background=self._BACKDROP_COLOR[1]\n        )\n        progressframe.pack(side='bottom', fill='x')\n        self.top['border'] = 0\n        self.top['highlightthickness'] = 0\n\n        # Create the tabs\n        self._tab_names = ['Collections', 'Corpora', 'Models', 'All Packages']\n        self._tabs = {}\n        for i, tab in enumerate(self._tab_names):\n            label = Label(tabframe, text=tab, font=self._TAB_FONT)\n            label.pack(side='left', padx=((i + 1) % 2) * 10)\n            label.bind('<Button-1>', self._select_tab)\n            self._tabs[tab.lower()] = label\n\n        # Create the table.\n        column_weights = [self.COLUMN_WEIGHTS.get(column, 1) for column in self.COLUMNS]\n        self._table = Table(\n            tableframe,\n            self.COLUMNS,\n            column_weights=column_weights,\n            highlightthickness=0,\n            listbox_height=16,\n            reprfunc=self._table_reprfunc,\n        )\n        self._table.columnconfig(0, foreground=self._MARK_COLOR[0])  # marked\n        for i, column in enumerate(self.COLUMNS):\n            width = self.COLUMN_WIDTHS.get(column, self.DEFAULT_COLUMN_WIDTH)\n            self._table.columnconfig(i, width=width)\n        self._table.pack(expand=True, fill='both')\n        self._table.focus()\n        self._table.bind_to_listboxes('<Double-Button-1>', self._download)\n        self._table.bind('<space>', self._table_mark)\n        self._table.bind('<Return>', self._download)\n        self._table.bind('<Left>', self._prev_tab)\n        self._table.bind('<Right>', self._next_tab)\n        self._table.bind('<Control-a>', self._mark_all)\n\n        # Create entry boxes for URL & download_dir\n        infoframe.grid_columnconfigure(1, weight=1)\n\n        info = [\n            ('url', 'Server Index:', self._set_url),\n            ('download_dir', 'Download Directory:', self._set_download_dir),\n        ]\n        self._info = {}\n        for (i, (key, label, callback)) in enumerate(info):\n            Label(infoframe, text=label).grid(column=0, row=i, sticky='e')\n            entry = Entry(\n                infoframe, font='courier', relief='groove', disabledforeground='black'\n            )\n            self._info[key] = (entry, callback)\n            entry.bind('<Return>', self._info_save)\n            entry.bind('<Button-1>', lambda e, key=key: self._info_edit(key))\n            entry.grid(column=1, row=i, sticky='ew')\n\n        # If the user edits url or download_dir, and then clicks outside\n        # the entry box, then save their results.\n        self.top.bind('<Button-1>', self._info_save)\n\n        # Create Download & Refresh buttons.\n        self._download_button = Button(\n            buttonframe, text='Download', command=self._download, width=8\n        )\n        self._download_button.pack(side='left')\n        self._refresh_button = Button(\n            buttonframe, text='Refresh', command=self._refresh, width=8\n        )\n        self._refresh_button.pack(side='right')\n\n        # Create Progress bar\n        self._progresslabel = Label(\n            progressframe,\n            text='',\n            foreground=self._BACKDROP_COLOR[0],\n            background=self._BACKDROP_COLOR[1],\n        )\n        self._progressbar = Canvas(\n            progressframe,\n            width=200,\n            height=16,\n            background=self._PROGRESS_COLOR[1],\n            relief='sunken',\n            border=1,\n        )\n        self._init_progressbar()\n        self._progressbar.pack(side='right')\n        self._progresslabel.pack(side='left')\n\n    def _init_menu(self):\n        menubar = Menu(self.top)\n\n        filemenu = Menu(menubar, tearoff=0)\n        filemenu.add_command(\n            label='Download', underline=0, command=self._download, accelerator='Return'\n        )\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Change Server Index',\n            underline=7,\n            command=lambda: self._info_edit('url'),\n        )\n        filemenu.add_command(\n            label='Change Download Directory',\n            underline=0,\n            command=lambda: self._info_edit('download_dir'),\n        )\n        filemenu.add_separator()\n        filemenu.add_command(label='Show Log', underline=5, command=self._show_log)\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Exit', underline=1, command=self.destroy, accelerator='Ctrl-x'\n        )\n        menubar.add_cascade(label='File', underline=0, menu=filemenu)\n\n        # Create a menu to control which columns of the table are\n        # shown.  n.b.: we never hide the first two columns (mark and\n        # identifier).\n        viewmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[2:]:\n            var = IntVar(self.top)\n            assert column not in self._column_vars\n            self._column_vars[column] = var\n            if column in self.INITIAL_COLUMNS:\n                var.set(1)\n            viewmenu.add_checkbutton(\n                label=column, underline=0, variable=var, command=self._select_columns\n            )\n        menubar.add_cascade(label='View', underline=0, menu=viewmenu)\n\n        # Create a sort menu\n        # [xx] this should be selectbuttons; and it should include\n        # reversed sorts as options.\n        sortmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'ascending')),\n            )\n        sortmenu.add_separator()\n        # sortmenu.add_command(label='Descending Sort:')\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Reverse sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'descending')),\n            )\n        menubar.add_cascade(label='Sort', underline=0, menu=sortmenu)\n\n        helpmenu = Menu(menubar, tearoff=0)\n        helpmenu.add_command(label='About', underline=0, command=self.about)\n        helpmenu.add_command(\n            label='Instructions', underline=0, command=self.help, accelerator='F1'\n        )\n        menubar.add_cascade(label='Help', underline=0, menu=helpmenu)\n        self.top.bind('<F1>', self.help)\n\n        self.top.config(menu=menubar)\n\n    def _select_columns(self):\n        for (column, var) in self._column_vars.items():\n            if var.get():\n                self._table.show_column(column)\n            else:\n                self._table.hide_column(column)\n\n    def _refresh(self):\n        self._ds.clear_status_cache()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._table.select(0)\n\n    def _info_edit(self, info_key):\n        self._info_save()  # just in case.\n        (entry, callback) = self._info[info_key]\n        entry['state'] = 'normal'\n        entry['relief'] = 'sunken'\n        entry.focus()\n\n    def _info_save(self, e=None):\n        focus = self._table\n        for entry, callback in self._info.values():\n            if entry['state'] == 'disabled':\n                continue\n            if e is not None and e.widget is entry and e.keysym != 'Return':\n                focus = entry\n            else:\n                entry['state'] = 'disabled'\n                entry['relief'] = 'groove'\n                callback(entry.get())\n        focus.focus()\n\n    def _table_reprfunc(self, row, col, val):\n        if self._table.column_names[col].endswith('Size'):\n            if isinstance(val, string_types):\n                return '  %s' % val\n            elif val < 1024 ** 2:\n                return '  %.1f KB' % (val / 1024.0 ** 1)\n            elif val < 1024 ** 3:\n                return '  %.1f MB' % (val / 1024.0 ** 2)\n            else:\n                return '  %.1f GB' % (val / 1024.0 ** 3)\n\n        if col in (0, ''):\n            return str(val)\n        else:\n            return '  %s' % val\n\n    def _set_url(self, url):\n        if url == self._ds.url:\n            return\n        try:\n            self._ds.url = url\n            self._fill_table()\n        except IOError as e:\n            showerror('Error Setting Server Index', str(e))\n        self._show_info()\n\n    def _set_download_dir(self, download_dir):\n        if self._ds.download_dir == download_dir:\n            return\n        # check if the dir exists, and if not, ask if we should create it?\n\n        # Clear our status cache, & re-check what's installed\n        self._ds.download_dir = download_dir\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._show_info()\n\n    def _show_info(self):\n        print('showing info', self._ds.url)\n        for entry, cb in self._info.values():\n            entry['state'] = 'normal'\n            entry.delete(0, 'end')\n        self._info['url'][0].insert(0, self._ds.url)\n        self._info['download_dir'][0].insert(0, self._ds.download_dir)\n        for entry, cb in self._info.values():\n            entry['state'] = 'disabled'\n\n    def _prev_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i > 0:\n                self._tab = self._tab_names[i - 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _next_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i < (len(self._tabs) - 1):\n                self._tab = self._tab_names[i + 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _select_tab(self, event):\n        self._tab = event.widget['text'].lower()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n    _tab = 'collections'\n    # _tab = 'corpora'\n    _rows = None\n\n    def _fill_table(self):\n        selected_row = self._table.selected_row()\n        self._table.clear()\n        if self._tab == 'all packages':\n            items = self._ds.packages()\n        elif self._tab == 'corpora':\n            items = self._ds.corpora()\n        elif self._tab == 'models':\n            items = self._ds.models()\n        elif self._tab == 'collections':\n            items = self._ds.collections()\n        else:\n            assert 0, 'bad tab value %r' % self._tab\n        rows = [self._package_to_columns(item) for item in items]\n        self._table.extend(rows)\n\n        # Highlight the active tab.\n        for tab, label in self._tabs.items():\n            if tab == self._tab:\n                label.configure(\n                    foreground=self._FRONT_TAB_COLOR[0],\n                    background=self._FRONT_TAB_COLOR[1],\n                )\n            else:\n                label.configure(\n                    foreground=self._BACK_TAB_COLOR[0],\n                    background=self._BACK_TAB_COLOR[1],\n                )\n\n        self._table.sort_by('Identifier', order='ascending')\n        self._color_table()\n        self._table.select(selected_row)\n\n        # This is a hack, because the scrollbar isn't updating its\n        # position right -- I'm not sure what the underlying cause is\n        # though.  (This is on OS X w/ python 2.5)  The length of\n        # delay that's necessary seems to depend on how fast the\n        # comptuer is. :-/\n        self.top.after(150, self._table._scrollbar.set, *self._table._mlb.yview())\n        self.top.after(300, self._table._scrollbar.set, *self._table._mlb.yview())\n\n    def _update_table_status(self):\n        for row_num in range(len(self._table)):\n            status = self._ds.status(self._table[row_num, 'Identifier'])\n            self._table[row_num, 'Status'] = status\n        self._color_table()\n\n    def _download(self, *e):\n        # If we're using threads, then delegate to the threaded\n        # downloader instead.\n        if self._use_threads:\n            return self._download_threaded(*e)\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        download_iter = self._ds.incr_download(marked, self._ds.download_dir)\n        self._log_indent = 0\n        self._download_cb(download_iter, marked)\n\n    _DL_DELAY = 10\n\n    def _download_cb(self, download_iter, ids):\n        try:\n            msg = next(download_iter)\n        except StopIteration:\n            # self._fill_table(sort=False)\n            self._update_table_status()\n            afterid = self.top.after(10, self._show_progress, 0)\n            self._afterid['_download_cb'] = afterid\n            return\n\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        if isinstance(msg, ProgressMessage):\n            self._show_progress(msg.progress)\n        elif isinstance(msg, ErrorMessage):\n            show(msg.message)\n            if msg.package is not None:\n                self._select(msg.package.id)\n            self._show_progress(None)\n            return  # halt progress.\n        elif isinstance(msg, StartCollectionMessage):\n            show('Downloading collection %s' % msg.collection.id)\n            self._log_indent += 1\n        elif isinstance(msg, StartPackageMessage):\n            show('Downloading package %s' % msg.package.id)\n        elif isinstance(msg, UpToDateMessage):\n            show('Package %s is up-to-date!' % msg.package.id)\n        # elif isinstance(msg, StaleMessage):\n        #    show('Package %s is out-of-date or corrupt' % msg.package.id)\n        elif isinstance(msg, FinishDownloadMessage):\n            show('Finished downloading %r.' % msg.package.id)\n        elif isinstance(msg, StartUnzipMessage):\n            show('Unzipping %s' % msg.package.filename)\n        elif isinstance(msg, FinishCollectionMessage):\n            self._log_indent -= 1\n            show('Finished downloading collection %r.' % msg.collection.id)\n            self._clear_mark(msg.collection.id)\n        elif isinstance(msg, FinishPackageMessage):\n            self._clear_mark(msg.package.id)\n        afterid = self.top.after(self._DL_DELAY, self._download_cb, download_iter, ids)\n        self._afterid['_download_cb'] = afterid\n\n    def _select(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table.select(row)\n                return\n\n    def _color_table(self):\n        # Color rows according to status.\n        for row in range(len(self._table)):\n            bg, sbg = self._ROW_COLOR[self._table[row, 'Status']]\n            fg, sfg = ('black', 'white')\n            self._table.rowconfig(\n                row,\n                foreground=fg,\n                selectforeground=sfg,\n                background=bg,\n                selectbackground=sbg,\n            )\n            # Color the marked column\n            self._table.itemconfigure(\n                row, 0, foreground=self._MARK_COLOR[0], background=self._MARK_COLOR[1]\n            )\n\n    def _clear_mark(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table[row, 0] = ''\n\n    def _mark_all(self, *e):\n        for row in range(len(self._table)):\n            self._table[row, 0] = 'X'\n\n    def _table_mark(self, *e):\n        selection = self._table.selected_row()\n        if selection >= 0:\n            if self._table[selection][0] != '':\n                self._table[selection, 0] = ''\n            else:\n                self._table[selection, 0] = 'X'\n        self._table.select(delta=1)\n\n    def _show_log(self):\n        text = '\\n'.join(self._log_messages)\n        ShowText(self.top, 'NLTK Downloader Log', text)\n\n    def _package_to_columns(self, pkg):\n        \"\"\"\n        Given a package, return a list of values describing that\n        package, one for each column in ``self.COLUMNS``.\n        \"\"\"\n        row = []\n        for column_index, column_name in enumerate(self.COLUMNS):\n            if column_index == 0:  # Mark:\n                row.append('')\n            elif column_name == 'Identifier':\n                row.append(pkg.id)\n            elif column_name == 'Status':\n                row.append(self._ds.status(pkg))\n            else:\n                attr = column_name.lower().replace(' ', '_')\n                row.append(getattr(pkg, attr, 'n/a'))\n        return row\n\n    # /////////////////////////////////////////////////////////////////\n    # External Interface\n    # /////////////////////////////////////////////////////////////////\n\n    def destroy(self, *e):\n        if self._destroyed:\n            return\n        self.top.destroy()\n        self._destroyed = True\n\n    def _destroy(self, *e):\n        if self.top is not None:\n            for afterid in self._afterid.values():\n                self.top.after_cancel(afterid)\n\n        # Abort any download in progress.\n        if self._downloading and self._use_threads:\n            self._abort_download()\n\n        # Make sure the garbage collector destroys these now;\n        # otherwise, they may get destroyed when we're not in the main\n        # thread, which would make Tkinter unhappy.\n        self._column_vars.clear()\n\n    def mainloop(self, *args, **kwargs):\n        self.top.mainloop(*args, **kwargs)\n\n    # /////////////////////////////////////////////////////////////////\n    # HELP\n    # /////////////////////////////////////////////////////////////////\n\n    HELP = textwrap.dedent(\n        \"\"\"\\\n    This tool can be used to download a variety of corpora and models\n    that can be used with NLTK.  Each corpus or model is distributed\n    in a single zip file, known as a \\\"package file.\\\"  You can\n    download packages individually, or you can download pre-defined\n    collections of packages.\n\n    When you download a package, it will be saved to the \\\"download\n    directory.\\\"  A default download directory is chosen when you run\n\n    the downloader; but you may also select a different download\n    directory.  On Windows, the default download directory is\n\n\n    \\\"package.\\\"\n\n    The NLTK downloader can be used to download a variety of corpora,\n    models, and other data packages.\n\n    Keyboard shortcuts::\n      [return]\\t Download\n      [up]\\t Select previous package\n      [down]\\t Select next package\n      [left]\\t Select previous tab\n      [right]\\t Select next tab\n    \"\"\"\n    )\n\n    def help(self, *e):\n        # The default font's not very legible; try using 'fixed' instead.\n        try:\n            ShowText(\n                self.top,\n                'Help: NLTK Dowloader',\n                self.HELP.strip(),\n                width=75,\n                font='fixed',\n            )\n        except:\n            ShowText(self.top, 'Help: NLTK Downloader', self.HELP.strip(), width=75)\n\n    def about(self, *e):\n        ABOUT = \"NLTK Downloader\\n\" + \"Written by Edward Loper\"\n        TITLE = 'About: NLTK Downloader'\n        try:\n            from six.moves.tkinter_messagebox import Message\n\n            Message(message=ABOUT, title=TITLE).show()\n        except ImportError:\n            ShowText(self.top, TITLE, ABOUT)\n\n    # /////////////////////////////////////////////////////////////////\n    # Progress Bar\n    # /////////////////////////////////////////////////////////////////\n\n    _gradient_width = 5\n\n    def _init_progressbar(self):\n        c = self._progressbar\n        width, height = int(c['width']), int(c['height'])\n        for i in range(0, (int(c['width']) * 2) // self._gradient_width):\n            c.create_line(\n                i * self._gradient_width + 20,\n                -20,\n                i * self._gradient_width - height - 20,\n                height + 20,\n                width=self._gradient_width,\n                fill='#%02x0000' % (80 + abs(i % 6 - 3) * 12),\n            )\n        c.addtag_all('gradient')\n        c.itemconfig('gradient', state='hidden')\n\n        # This is used to display progress\n        c.addtag_withtag(\n            'redbox', c.create_rectangle(0, 0, 0, 0, fill=self._PROGRESS_COLOR[0])\n        )\n\n    def _show_progress(self, percent):\n        c = self._progressbar\n        if percent is None:\n            c.coords('redbox', 0, 0, 0, 0)\n            c.itemconfig('gradient', state='hidden')\n        else:\n            width, height = int(c['width']), int(c['height'])\n            x = percent * int(width) // 100 + 1\n            c.coords('redbox', 0, 0, x, height + 1)\n\n    def _progress_alive(self):\n        c = self._progressbar\n        if not self._downloading:\n            c.itemconfig('gradient', state='hidden')\n        else:\n            c.itemconfig('gradient', state='normal')\n            x1, y1, x2, y2 = c.bbox('gradient')\n            if x1 <= -100:\n                c.move('gradient', (self._gradient_width * 6) - 4, 0)\n            else:\n                c.move('gradient', -4, 0)\n            afterid = self.top.after(200, self._progress_alive)\n            self._afterid['_progress_alive'] = afterid\n\n    # /////////////////////////////////////////////////////////////////\n    # Threaded downloader\n    # /////////////////////////////////////////////////////////////////\n\n    def _download_threaded(self, *e):\n        # If the user tries to start a new download while we're already\n        # downloading something, then abort the current download instead.\n        if self._downloading:\n            self._abort_download()\n            return\n\n        # Change the 'download' button to an 'abort' button.\n        self._download_button['text'] = 'Cancel'\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        # Create a new data server object for the download operation,\n        # just in case the user modifies our data server during the\n        # download (e.g., clicking 'refresh' or editing the index url).\n        ds = Downloader(self._ds.url, self._ds.download_dir)\n\n        # Start downloading in a separate thread.\n        assert self._download_msg_queue == []\n        assert self._download_abort_queue == []\n        self._DownloadThread(\n            ds,\n            marked,\n            self._download_lock,\n            self._download_msg_queue,\n            self._download_abort_queue,\n        ).start()\n\n        # Monitor the download message queue & display its progress.\n        self._log_indent = 0\n        self._downloading = True\n        self._monitor_message_queue()\n\n        # Display an indication that we're still alive and well by\n        # cycling the progress bar.\n        self._progress_alive()\n\n    def _abort_download(self):\n        if self._downloading:\n            self._download_lock.acquire()\n            self._download_abort_queue.append('abort')\n            self._download_lock.release()\n\n    class _DownloadThread(threading.Thread):\n        def __init__(self, data_server, items, lock, message_queue, abort):\n            self.data_server = data_server\n            self.items = items\n            self.lock = lock\n            self.message_queue = message_queue\n            self.abort = abort\n            threading.Thread.__init__(self)\n\n        def run(self):\n            for msg in self.data_server.incr_download(self.items):\n                self.lock.acquire()\n                self.message_queue.append(msg)\n                # Check if we've been told to kill ourselves:\n                if self.abort:\n                    self.message_queue.append('aborted')\n                    self.lock.release()\n                    return\n                self.lock.release()\n            self.lock.acquire()\n            self.message_queue.append('finished')\n            self.lock.release()\n\n    _MONITOR_QUEUE_DELAY = 100\n\n    def _monitor_message_queue(self):\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        # Try to acquire the lock; if it's busy, then just try again later.\n        if not self._download_lock.acquire():\n            return\n        for msg in self._download_msg_queue:\n\n            # Done downloading?\n            if msg == 'finished' or msg == 'aborted':\n                # self._fill_table(sort=False)\n                self._update_table_status()\n                self._downloading = False\n                self._download_button['text'] = 'Download'\n                del self._download_msg_queue[:]\n                del self._download_abort_queue[:]\n                self._download_lock.release()\n                if msg == 'aborted':\n                    show('Download aborted!')\n                    self._show_progress(None)\n                else:\n                    afterid = self.top.after(100, self._show_progress, None)\n                    self._afterid['_monitor_message_queue'] = afterid\n                return\n\n            # All other messages\n            elif isinstance(msg, ProgressMessage):\n                self._show_progress(msg.progress)\n            elif isinstance(msg, ErrorMessage):\n                show(msg.message)\n                if msg.package is not None:\n                    self._select(msg.package.id)\n                self._show_progress(None)\n                self._downloading = False\n                return  # halt progress.\n            elif isinstance(msg, StartCollectionMessage):\n                show('Downloading collection %r' % msg.collection.id)\n                self._log_indent += 1\n            elif isinstance(msg, StartPackageMessage):\n                self._ds.clear_status_cache(msg.package.id)\n                show('Downloading package %r' % msg.package.id)\n            elif isinstance(msg, UpToDateMessage):\n                show('Package %s is up-to-date!' % msg.package.id)\n            # elif isinstance(msg, StaleMessage):\n            #    show('Package %s is out-of-date or corrupt; updating it' %\n            #         msg.package.id)\n            elif isinstance(msg, FinishDownloadMessage):\n                show('Finished downloading %r.' % msg.package.id)\n            elif isinstance(msg, StartUnzipMessage):\n                show('Unzipping %s' % msg.package.filename)\n            elif isinstance(msg, FinishUnzipMessage):\n                show('Finished installing %s' % msg.package.id)\n            elif isinstance(msg, FinishCollectionMessage):\n                self._log_indent -= 1\n                show('Finished downloading collection %r.' % msg.collection.id)\n                self._clear_mark(msg.collection.id)\n            elif isinstance(msg, FinishPackageMessage):\n                self._update_table_status()\n                self._clear_mark(msg.package.id)\n\n        # Let the user know when we're aborting a download (but\n        # waiting for a good point to abort it, so we don't end up\n        # with a partially unzipped package or anything like that).\n        if self._download_abort_queue:\n            self._progresslabel['text'] = 'Aborting download...'\n\n        # Clear the message queue and then release the lock\n        del self._download_msg_queue[:]\n        self._download_lock.release()\n\n        # Check the queue again after MONITOR_QUEUE_DELAY msec.\n        afterid = self.top.after(self._MONITOR_QUEUE_DELAY, self._monitor_message_queue)\n        self._afterid['_monitor_message_queue'] = afterid\n\n\n######################################################################\n# Helper Functions\n######################################################################\n# [xx] It may make sense to move these to nltk.internals.\n\n\ndef md5_hexdigest(file):\n    \"\"\"\n    Calculate and return the MD5 checksum for a given file.\n    ``file`` may either be a filename or an open stream.\n    \"\"\"\n    if isinstance(file, string_types):\n        with open(file, 'rb') as infile:\n            return _md5_hexdigest(infile)\n    return _md5_hexdigest(file)\n\n\ndef _md5_hexdigest(fp):\n    md5_digest = md5()\n    while True:\n        block = fp.read(1024 * 16)  # 16k blocks\n        if not block:\n            break\n        md5_digest.update(block)\n    return md5_digest.hexdigest()\n\n\n# change this to periodically yield progress messages?\n# [xx] get rid of topdir parameter -- we should be checking\n# this when we build the index, anyway.\ndef unzip(filename, root, verbose=True):\n    \"\"\"\n    Extract the contents of the zip file ``filename`` into the\n    directory ``root``.\n    \"\"\"\n    for message in _unzip_iter(filename, root, verbose):\n        if isinstance(message, ErrorMessage):\n            raise Exception(message)\n\n\ndef _unzip_iter(filename, root, verbose=True):\n    if verbose:\n        sys.stdout.write('Unzipping %s' % os.path.split(filename)[1])\n        sys.stdout.flush()\n\n    try:\n        zf = zipfile.ZipFile(filename)\n    except zipfile.error as e:\n        yield ErrorMessage(filename, 'Error with downloaded zip file')\n        return\n    except Exception as e:\n        yield ErrorMessage(filename, e)\n        return\n\n    zf.extractall(root)\n\n    if verbose:\n        print()\n\n\n######################################################################\n# Index Builder\n######################################################################\n# This may move to a different file sometime.\n\n\ndef build_index(root, base_url):\n    \"\"\"\n    Create a new data.xml index file, by combining the xml description\n    files for various packages and collections.  ``root`` should be the\n    path to a directory containing the package xml and zip files; and\n    the collection xml files.  The ``root`` directory is expected to\n    have the following subdirectories::\n\n      root/\n        packages/ .................. subdirectory for packages\n          corpora/ ................. zip & xml files for corpora\n          grammars/ ................ zip & xml files for grammars\n          taggers/ ................. zip & xml files for taggers\n          tokenizers/ .............. zip & xml files for tokenizers\n          etc.\n        collections/ ............... xml files for collections\n\n    For each package, there should be two files: ``package.zip``\n    (where *package* is the package name)\n    which contains the package itself as a compressed zip file; and\n    ``package.xml``, which is an xml description of the package.  The\n    zipfile ``package.zip`` should expand to a single subdirectory\n    named ``package/``.  The base filename ``package`` must match\n    the identifier given in the package's xml file.\n\n    For each collection, there should be a single file ``collection.zip``\n    describing the collection, where *collection* is the name of the collection.\n\n    All identifiers (for both packages and collections) must be unique.\n    \"\"\"\n    # Find all packages.\n    packages = []\n    for pkg_xml, zf, subdir in _find_packages(os.path.join(root, 'packages')):\n        zipstat = os.stat(zf.filename)\n        url = '%s/%s/%s' % (base_url, subdir, os.path.split(zf.filename)[1])\n        unzipped_size = sum(zf_info.file_size for zf_info in zf.infolist())\n\n        # Fill in several fields of the package xml with calculated values.\n        pkg_xml.set('unzipped_size', '%s' % unzipped_size)\n        pkg_xml.set('size', '%s' % zipstat.st_size)\n        pkg_xml.set('checksum', '%s' % md5_hexdigest(zf.filename))\n        pkg_xml.set('subdir', subdir)\n        # pkg_xml.set('svn_revision', _svn_revision(zf.filename))\n        if not pkg_xml.get('url'):\n            pkg_xml.set('url', url)\n\n        # Record the package.\n        packages.append(pkg_xml)\n\n    # Find all collections\n    collections = list(_find_collections(os.path.join(root, 'collections')))\n\n    # Check that all UIDs are unique\n    uids = set()\n    for item in packages + collections:\n        if item.get('id') in uids:\n            raise ValueError('Duplicate UID: %s' % item.get('id'))\n        uids.add(item.get('id'))\n\n    # Put it all together\n    top_elt = ElementTree.Element('nltk_data')\n    top_elt.append(ElementTree.Element('packages'))\n    for package in packages:\n        top_elt[0].append(package)\n    top_elt.append(ElementTree.Element('collections'))\n    for collection in collections:\n        top_elt[1].append(collection)\n\n    _indent_xml(top_elt)\n    return top_elt\n\n\ndef _indent_xml(xml, prefix=''):\n    \"\"\"\n    Helper for ``build_index()``: Given an XML ``ElementTree``, modify it\n    (and its descendents) ``text`` and ``tail`` attributes to generate\n    an indented tree, where each nested element is indented by 2\n    spaces with respect to its parent.\n    \"\"\"\n    if len(xml) > 0:\n        xml.text = (xml.text or '').strip() + '\\n' + prefix + '  '\n        for child in xml:\n            _indent_xml(child, prefix + '  ')\n        for child in xml[:-1]:\n            child.tail = (child.tail or '').strip() + '\\n' + prefix + '  '\n        xml[-1].tail = (xml[-1].tail or '').strip() + '\\n' + prefix\n\n\ndef _check_package(pkg_xml, zipfilename, zf):\n    \"\"\"\n    Helper for ``build_index()``: Perform some checks to make sure that\n    the given package is consistent.\n    \"\"\"\n    # The filename must patch the id given in the XML file.\n    uid = os.path.splitext(os.path.split(zipfilename)[1])[0]\n    if pkg_xml.get('id') != uid:\n        raise ValueError(\n            'package identifier mismatch (%s vs %s)' % (pkg_xml.get('id'), uid)\n        )\n\n    # Zip file must expand to a subdir whose name matches uid.\n    if sum((name != uid and not name.startswith(uid + '/')) for name in zf.namelist()):\n        raise ValueError(\n            'Zipfile %s.zip does not expand to a single '\n            'subdirectory %s/' % (uid, uid)\n        )\n\n\n# update for git?\ndef _svn_revision(filename):\n    \"\"\"\n    Helper for ``build_index()``: Calculate the subversion revision\n    number for a given file (by using ``subprocess`` to run ``svn``).\n    \"\"\"\n    p = subprocess.Popen(\n        ['svn', 'status', '-v', filename],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n    )\n    (stdout, stderr) = p.communicate()\n    if p.returncode != 0 or stderr or not stdout:\n        raise ValueError(\n            'Error determining svn_revision for %s: %s'\n            % (os.path.split(filename)[1], textwrap.fill(stderr))\n        )\n    return stdout.split()[2]\n\n\ndef _find_collections(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of ElementTree.Element\n    objects, each holding the xml for a single package collection.\n    \"\"\"\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfile = os.path.join(dirname, filename)\n                yield ElementTree.parse(xmlfile).getroot()\n\n\ndef _find_packages(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of tuples\n    ``(pkg_xml, zf, subdir)``, where:\n      - ``pkg_xml`` is an ``ElementTree.Element`` holding the xml for a\n        package\n      - ``zf`` is a ``zipfile.ZipFile`` for the package's contents.\n      - ``subdir`` is the subdirectory (relative to ``root``) where\n        the package was found (e.g. 'corpora' or 'grammars').\n    \"\"\"\n    from nltk.corpus.reader.util import _path_from\n\n    # Find all packages.\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        relpath = '/'.join(_path_from(root, dirname))\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfilename = os.path.join(dirname, filename)\n                zipfilename = xmlfilename[:-4] + '.zip'\n                try:\n                    zf = zipfile.ZipFile(zipfilename)\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (zipfilename, e))\n                try:\n                    pkg_xml = ElementTree.parse(xmlfilename).getroot()\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (xmlfilename, e))\n\n                # Check that the UID matches the filename\n                uid = os.path.split(xmlfilename[:-4])[1]\n                if pkg_xml.get('id') != uid:\n                    raise ValueError(\n                        'package identifier mismatch (%s '\n                        'vs %s)' % (pkg_xml.get('id'), uid)\n                    )\n\n                # Check that the zipfile expands to a subdir whose\n                # name matches the uid.\n                if sum(\n                    (name != uid and not name.startswith(uid + '/'))\n                    for name in zf.namelist()\n                ):\n                    raise ValueError(\n                        'Zipfile %s.zip does not expand to a '\n                        'single subdirectory %s/' % (uid, uid)\n                    )\n\n                yield pkg_xml, zf, relpath\n        # Don't recurse into svn subdirectories:\n        try:\n            subdirs.remove('.svn')\n        except ValueError:\n            pass\n\n\n######################################################################\n# Main:\n######################################################################\n\n# There should be a command-line interface\n\n# Aliases\n_downloader = Downloader()\ndownload = _downloader.download\n\n\ndef download_shell():\n    DownloaderShell(_downloader).run()\n\n\ndef download_gui():\n    DownloaderGUI(_downloader).mainloop()\n\n\ndef update():\n    _downloader.update()\n\n\nif __name__ == '__main__':\n    from optparse import OptionParser\n\n    parser = OptionParser()\n    parser.add_option(\n        \"-d\",\n        \"--dir\",\n        dest=\"dir\",\n        help=\"download package to directory DIR\",\n        metavar=\"DIR\",\n    )\n    parser.add_option(\n        \"-q\",\n        \"--quiet\",\n        dest=\"quiet\",\n        action=\"store_true\",\n        default=False,\n        help=\"work quietly\",\n    )\n    parser.add_option(\n        \"-f\",\n        \"--force\",\n        dest=\"force\",\n        action=\"store_true\",\n        default=False,\n        help=\"download even if already installed\",\n    )\n    parser.add_option(\n        \"-e\",\n        \"--exit-on-error\",\n        dest=\"halt_on_error\",\n        action=\"store_true\",\n        default=False,\n        help=\"exit if an error occurs\",\n    )\n    parser.add_option(\n        \"-u\",\n        \"--url\",\n        dest=\"server_index_url\",\n        default=os.environ.get('NLTK_DOWNLOAD_URL'),\n        help=\"download server index url\",\n    )\n\n    (options, args) = parser.parse_args()\n\n    downloader = Downloader(server_index_url=options.server_index_url)\n\n    if args:\n        for pkg_id in args:\n            rv = downloader.download(\n                info_or_id=pkg_id,\n                download_dir=options.dir,\n                quiet=options.quiet,\n                force=options.force,\n                halt_on_error=options.halt_on_error,\n            )\n            if rv == False and options.halt_on_error:\n                break\n    else:\n        downloader.download(\n            download_dir=options.dir,\n            quiet=options.quiet,\n            force=options.force,\n            halt_on_error=options.halt_on_error,\n        )\n", "code_before": "# Natural Language Toolkit: Corpus & Model Downloader\n#\n# Copyright (C) 2001-2019 NLTK Project\n# Author: Edward Loper <edloper@gmail.com>\n# URL: <http://nltk.org/>\n# For license information, see LICENSE.TXT\n\n\"\"\"\nThe NLTK corpus and module downloader.  This module defines several\ninterfaces which can be used to download corpora, models, and other\ndata packages that can be used with NLTK.\n\nDownloading Packages\n====================\nIf called with no arguments, ``download()`` will display an interactive\ninterface which can be used to download and install new packages.\nIf Tkinter is available, then a graphical interface will be shown,\notherwise a simple text interface will be provided.\n\nIndividual packages can be downloaded by calling the ``download()``\nfunction with a single argument, giving the package identifier for the\npackage that should be downloaded:\n\n    >>> download('treebank') # doctest: +SKIP\n    [nltk_data] Downloading package 'treebank'...\n    [nltk_data]   Unzipping corpora/treebank.zip.\n\nNLTK also provides a number of \\\"package collections\\\", consisting of\na group of related packages.  To download all packages in a\ncolleciton, simply call ``download()`` with the collection's\nidentifier:\n\n    >>> download('all-corpora') # doctest: +SKIP\n    [nltk_data] Downloading package 'abc'...\n    [nltk_data]   Unzipping corpora/abc.zip.\n    [nltk_data] Downloading package 'alpino'...\n    [nltk_data]   Unzipping corpora/alpino.zip.\n      ...\n    [nltk_data] Downloading package 'words'...\n    [nltk_data]   Unzipping corpora/words.zip.\n\nDownload Directory\n==================\nBy default, packages are installed in either a system-wide directory\n(if Python has sufficient access to write to it); or in the current\nuser's home directory.  However, the ``download_dir`` argument may be\nused to specify a different installation target, if desired.\n\nSee ``Downloader.default_download_dir()`` for more a detailed\ndescription of how the default download directory is chosen.\n\nNLTK Download Server\n====================\nBefore downloading any packages, the corpus and module downloader\ncontacts the NLTK download server, to retrieve an index file\ndescribing the available packages.  By default, this index file is\nloaded from ``https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml``.\nIf necessary, it is possible to create a new ``Downloader`` object,\nspecifying a different URL for the package index file.\n\nUsage::\n\n    python nltk/downloader.py [-d DATADIR] [-q] [-f] [-k] PACKAGE_IDS\n\nor::\n\n    python -m nltk.downloader [-d DATADIR] [-q] [-f] [-k] PACKAGE_IDS\n\"\"\"\n# ----------------------------------------------------------------------\nfrom __future__ import print_function, division, unicode_literals\n\n\"\"\"\n\n  0     1  2    3\n[label][----][label][----]\n[column  ][column     ]\n\nNotes\n=====\nHandling data files..  Some questions:\n\n* Should the data files be kept zipped or unzipped?  I say zipped.\n\n* Should the data files be kept in svn at all?  Advantages: history;\n  automatic version numbers; 'svn up' could be used rather than the\n  downloader to update the corpora.  Disadvantages: they're big,\n  which makes working from svn a bit of a pain.  And we're planning\n  to potentially make them much bigger.  I don't think we want\n  people to have to download 400MB corpora just to use nltk from svn.\n\n* Compromise: keep the data files in trunk/data rather than in\n  trunk/nltk.  That way you can check them out in svn if you want\n  to; but you don't need to, and you can use the downloader instead.\n\n* Also: keep models in mind.  When we change the code, we'd\n  potentially like the models to get updated.  This could require a\n  little thought.\n\n* So.. let's assume we have a trunk/data directory, containing a bunch\n  of packages.  The packages should be kept as zip files, because we\n  really shouldn't be editing them much (well -- we may edit models\n  more, but they tend to be binary-ish files anyway, where diffs\n  aren't that helpful).  So we'll have trunk/data, with a bunch of\n  files like abc.zip and treebank.zip and propbank.zip.  For each\n  package we could also have eg treebank.xml and propbank.xml,\n  describing the contents of the package (name, copyright, license,\n  etc).  Collections would also have .xml files.  Finally, we would\n  pull all these together to form a single index.xml file.  Some\n  directory structure wouldn't hurt.  So how about::\n\n    /trunk/data/ ....................... root of data svn\n      index.xml ........................ main index file\n      src/ ............................. python scripts\n      packages/ ........................ dir for packages\n        corpora/ ....................... zip & xml files for corpora\n        grammars/ ...................... zip & xml files for grammars\n        taggers/ ....................... zip & xml files for taggers\n        tokenizers/ .................... zip & xml files for tokenizers\n        etc.\n      collections/ ..................... xml files for collections\n\n  Where the root (/trunk/data) would contain a makefile; and src/\n  would contain a script to update the info.xml file.  It could also\n  contain scripts to rebuild some of the various model files.  The\n  script that builds index.xml should probably check that each zip\n  file expands entirely into a single subdir, whose name matches the\n  package's uid.\n\nChanges I need to make:\n  - in index: change \"size\" to \"filesize\" or \"compressed-size\"\n  - in index: add \"unzipped-size\"\n  - when checking status: check both compressed & uncompressed size.\n    uncompressed size is important to make sure we detect a problem\n    if something got partially unzipped.  define new status values\n    to differentiate stale vs corrupt vs corruptly-uncompressed??\n    (we shouldn't need to re-download the file if the zip file is ok\n    but it didn't get uncompressed fully.)\n  - add other fields to the index: author, license, copyright, contact,\n    etc.\n\nthe current grammars/ package would become a single new package (eg\ntoy-grammars or book-grammars).\n\nxml file should have:\n  - authorship info\n  - license info\n  - copyright info\n  - contact info\n  - info about what type of data/annotation it contains?\n  - recommended corpus reader?\n\ncollections can contain other collections.  they can also contain\nmultiple package types (corpora & models).  Have a single 'basics'\npackage that includes everything we talk about in the book?\n\nn.b.: there will have to be a fallback to the punkt tokenizer, in case\nthey didn't download that model.\n\ndefault: unzip or not?\n\n\"\"\"\nimport time, os, zipfile, sys, textwrap, threading, itertools, shutil, functools\nimport subprocess\nfrom hashlib import md5\nfrom xml.etree import ElementTree\n\ntry:\n    TKINTER = True\n    from six.moves.tkinter import (\n        Tk,\n        Frame,\n        Label,\n        Entry,\n        Button,\n        Canvas,\n        Menu,\n        IntVar,\n        TclError,\n    )\n    from six.moves.tkinter_messagebox import showerror\n    from nltk.draw.table import Table\n    from nltk.draw.util import ShowText\nexcept ImportError:\n    TKINTER = False\n    TclError = ValueError\n\nfrom six import string_types, text_type\nfrom six.moves import input\nfrom six.moves.urllib.request import urlopen\nfrom six.moves.urllib.error import HTTPError, URLError\n\nimport nltk\nfrom nltk.compat import python_2_unicode_compatible\n\n# urllib2 = nltk.internals.import_from_stdlib('urllib2')\n\n\n######################################################################\n# Directory entry objects (from the data server's index file)\n######################################################################\n\n\n@python_2_unicode_compatible\nclass Package(object):\n    \"\"\"\n    A directory entry for a downloadable package.  These entries are\n    extracted from the XML index file that is downloaded by\n    ``Downloader``.  Each package consists of a single file; but if\n    that file is a zip file, then it can be automatically decompressed\n    when the package is installed.\n    \"\"\"\n\n    def __init__(\n        self,\n        id,\n        url,\n        name=None,\n        subdir='',\n        size=None,\n        unzipped_size=None,\n        checksum=None,\n        svn_revision=None,\n        copyright='Unknown',\n        contact='Unknown',\n        license='Unknown',\n        author='Unknown',\n        unzip=True,\n        **kw\n    ):\n        self.id = id\n        \"\"\"A unique identifier for this package.\"\"\"\n\n        self.name = name or id\n        \"\"\"A string name for this package.\"\"\"\n\n        self.subdir = subdir\n        \"\"\"The subdirectory where this package should be installed.\n           E.g., ``'corpora'`` or ``'taggers'``.\"\"\"\n\n        self.url = url\n        \"\"\"A URL that can be used to download this package's file.\"\"\"\n\n        self.size = int(size)\n        \"\"\"The filesize (in bytes) of the package file.\"\"\"\n\n        self.unzipped_size = int(unzipped_size)\n        \"\"\"The total filesize of the files contained in the package's\n           zipfile.\"\"\"\n\n        self.checksum = checksum\n        \"\"\"The MD-5 checksum of the package file.\"\"\"\n\n        self.svn_revision = svn_revision\n        \"\"\"A subversion revision number for this package.\"\"\"\n\n        self.copyright = copyright\n        \"\"\"Copyright holder for this package.\"\"\"\n\n        self.contact = contact\n        \"\"\"Name & email of the person who should be contacted with\n           questions about this package.\"\"\"\n\n        self.license = license\n        \"\"\"License information for this package.\"\"\"\n\n        self.author = author\n        \"\"\"Author of this package.\"\"\"\n\n        ext = os.path.splitext(url.split('/')[-1])[1]\n        self.filename = os.path.join(subdir, id + ext)\n        \"\"\"The filename that should be used for this package's file.  It\n           is formed by joining ``self.subdir`` with ``self.id``, and\n           using the same extension as ``url``.\"\"\"\n\n        self.unzip = bool(int(unzip))  # '0' or '1'\n        \"\"\"A flag indicating whether this corpus should be unzipped by\n           default.\"\"\"\n\n        # Include any other attributes provided by the XML file.\n        self.__dict__.update(kw)\n\n    @staticmethod\n    def fromxml(xml):\n        if isinstance(xml, string_types):\n            xml = ElementTree.parse(xml)\n        for key in xml.attrib:\n            xml.attrib[key] = text_type(xml.attrib[key])\n        return Package(**xml.attrib)\n\n    def __lt__(self, other):\n        return self.id < other.id\n\n    def __repr__(self):\n        return '<Package %s>' % self.id\n\n\n@python_2_unicode_compatible\nclass Collection(object):\n    \"\"\"\n    A directory entry for a collection of downloadable packages.\n    These entries are extracted from the XML index file that is\n    downloaded by ``Downloader``.\n    \"\"\"\n\n    def __init__(self, id, children, name=None, **kw):\n        self.id = id\n        \"\"\"A unique identifier for this collection.\"\"\"\n\n        self.name = name or id\n        \"\"\"A string name for this collection.\"\"\"\n\n        self.children = children\n        \"\"\"A list of the ``Collections`` or ``Packages`` directly\n           contained by this collection.\"\"\"\n\n        self.packages = None\n        \"\"\"A list of ``Packages`` contained by this collection or any\n           collections it recursively contains.\"\"\"\n\n        # Include any other attributes provided by the XML file.\n        self.__dict__.update(kw)\n\n    @staticmethod\n    def fromxml(xml):\n        if isinstance(xml, string_types):\n            xml = ElementTree.parse(xml)\n        for key in xml.attrib:\n            xml.attrib[key] = text_type(xml.attrib[key])\n        children = [child.get('ref') for child in xml.findall('item')]\n        return Collection(children=children, **xml.attrib)\n\n    def __lt__(self, other):\n        return self.id < other.id\n\n    def __repr__(self):\n        return '<Collection %s>' % self.id\n\n\n######################################################################\n# Message Passing Objects\n######################################################################\n\n\nclass DownloaderMessage(object):\n    \"\"\"A status message object, used by ``incr_download`` to\n       communicate its progress.\"\"\"\n\n\nclass StartCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection\n\n\nclass FinishCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection\n\n\nclass StartPackageMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass FinishPackageMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass StartDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has started downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass FinishDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has finished downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass StartUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has started unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass FinishUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has finished unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass UpToDateMessage(DownloaderMessage):\n    \"\"\"The package download file is already up-to-date\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass StaleMessage(DownloaderMessage):\n    \"\"\"The package download file is out-of-date or corrupt\"\"\"\n\n    def __init__(self, package):\n        self.package = package\n\n\nclass ErrorMessage(DownloaderMessage):\n    \"\"\"Data server encountered an error\"\"\"\n\n    def __init__(self, package, message):\n        self.package = package\n        if isinstance(message, Exception):\n            self.message = str(message)\n        else:\n            self.message = message\n\n\nclass ProgressMessage(DownloaderMessage):\n    \"\"\"Indicates how much progress the data server has made\"\"\"\n\n    def __init__(self, progress):\n        self.progress = progress\n\n\nclass SelectDownloadDirMessage(DownloaderMessage):\n    \"\"\"Indicates what download directory the data server is using\"\"\"\n\n    def __init__(self, download_dir):\n        self.download_dir = download_dir\n\n\n######################################################################\n# NLTK Data Server\n######################################################################\n\n\nclass Downloader(object):\n    \"\"\"\n    A class used to access the NLTK data server, which can be used to\n    download corpora and other data packages.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    INDEX_TIMEOUT = 60 * 60  # 1 hour\n    \"\"\"The amount of time after which the cached copy of the data\n       server index will be considered 'stale,' and will be\n       re-downloaded.\"\"\"\n\n    DEFAULT_URL = 'https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml'\n    \"\"\"The default URL for the NLTK data server's index.  An\n       alternative URL can be specified when creating a new\n       ``Downloader`` object.\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Status Constants\n    # /////////////////////////////////////////////////////////////////\n\n    INSTALLED = 'installed'\n    \"\"\"A status string indicating that a package or collection is\n       installed and up-to-date.\"\"\"\n    NOT_INSTALLED = 'not installed'\n    \"\"\"A status string indicating that a package or collection is\n       not installed.\"\"\"\n    STALE = 'out of date'\n    \"\"\"A status string indicating that a package or collection is\n       corrupt or out-of-date.\"\"\"\n    PARTIAL = 'partial'\n    \"\"\"A status string indicating that a collection is partially\n       installed (i.e., only some of its packages are installed.)\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Cosntructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, server_index_url=None, download_dir=None):\n        self._url = server_index_url or self.DEFAULT_URL\n        \"\"\"The URL for the data server's index file.\"\"\"\n\n        self._collections = {}\n        \"\"\"Dictionary from collection identifier to ``Collection``\"\"\"\n\n        self._packages = {}\n        \"\"\"Dictionary from package identifier to ``Package``\"\"\"\n\n        self._download_dir = download_dir\n        \"\"\"The default directory to which packages will be downloaded.\"\"\"\n\n        self._index = None\n        \"\"\"The XML index file downloaded from the data server\"\"\"\n\n        self._index_timestamp = None\n        \"\"\"Time at which ``self._index`` was downloaded.  If it is more\n           than ``INDEX_TIMEOUT`` seconds old, it will be re-downloaded.\"\"\"\n\n        self._status_cache = {}\n        \"\"\"Dictionary from package/collection identifier to status\n           string (``INSTALLED``, ``NOT_INSTALLED``, ``STALE``, or\n           ``PARTIAL``).  Cache is used for packages only, not\n           collections.\"\"\"\n\n        self._errors = None\n        \"\"\"Flag for telling if all packages got successfully downloaded or not.\"\"\"\n\n        # decide where we're going to save things to.\n        if self._download_dir is None:\n            self._download_dir = self.default_download_dir()\n\n    # /////////////////////////////////////////////////////////////////\n    # Information\n    # /////////////////////////////////////////////////////////////////\n\n    def list(\n        self,\n        download_dir=None,\n        show_packages=True,\n        show_collections=True,\n        header=True,\n        more_prompt=False,\n        skip_installed=False,\n    ):\n        lines = 0  # for more_prompt\n        if download_dir is None:\n            download_dir = self._download_dir\n            print('Using default data directory (%s)' % download_dir)\n        if header:\n            print('=' * (26 + len(self._url)))\n            print(' Data server index for <%s>' % self._url)\n            print('=' * (26 + len(self._url)))\n            lines += 3  # for more_prompt\n        stale = partial = False\n\n        categories = []\n        if show_packages:\n            categories.append('packages')\n        if show_collections:\n            categories.append('collections')\n        for category in categories:\n            print('%s:' % category.capitalize())\n            lines += 1  # for more_prompt\n            for info in sorted(getattr(self, category)(), key=str):\n                status = self.status(info, download_dir)\n                if status == self.INSTALLED and skip_installed:\n                    continue\n                if status == self.STALE:\n                    stale = True\n                if status == self.PARTIAL:\n                    partial = True\n                prefix = {\n                    self.INSTALLED: '*',\n                    self.STALE: '-',\n                    self.PARTIAL: 'P',\n                    self.NOT_INSTALLED: ' ',\n                }[status]\n                name = textwrap.fill(\n                    '-' * 27 + (info.name or info.id), 75, subsequent_indent=27 * ' '\n                )[27:]\n                print('  [%s] %s %s' % (prefix, info.id.ljust(20, '.'), name))\n                lines += len(name.split('\\n'))  # for more_prompt\n                if more_prompt and lines > 20:\n                    user_input = input(\"Hit Enter to continue: \")\n                    if user_input.lower() in ('x', 'q'):\n                        return\n                    lines = 0\n            print()\n        msg = '([*] marks installed packages'\n        if stale:\n            msg += '; [-] marks out-of-date or corrupt packages'\n        if partial:\n            msg += '; [P] marks partially installed collections'\n        print(textwrap.fill(msg + ')', subsequent_indent=' ', width=76))\n\n    def packages(self):\n        self._update_index()\n        return self._packages.values()\n\n    def corpora(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir == 'corpora']\n\n    def models(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir != 'corpora']\n\n    def collections(self):\n        self._update_index()\n        return self._collections.values()\n\n    # /////////////////////////////////////////////////////////////////\n    # Downloading\n    # /////////////////////////////////////////////////////////////////\n\n    def _info_or_id(self, info_or_id):\n        if isinstance(info_or_id, string_types):\n            return self.info(info_or_id)\n        else:\n            return info_or_id\n\n    # [xx] When during downloading is it 'safe' to abort?  Only unsafe\n    # time is *during* an unzip -- we don't want to leave a\n    # partially-unzipped corpus in place because we wouldn't notice\n    # it.  But if we had the exact total size of the unzipped corpus,\n    # then that would be fine.  Then we could abort anytime we want!\n    # So this is really what we should do.  That way the threaded\n    # downloader in the gui can just kill the download thread anytime\n    # it wants.\n\n    def incr_download(self, info_or_id, download_dir=None, force=False):\n        # If they didn't specify a download_dir, then use the default one.\n        if download_dir is None:\n            download_dir = self._download_dir\n            yield SelectDownloadDirMessage(download_dir)\n\n        # If they gave us a list of ids, then download each one.\n        if isinstance(info_or_id, (list, tuple)):\n            for msg in self._download_list(info_or_id, download_dir, force):\n                yield msg\n            return\n\n        # Look up the requested collection or package.\n        try:\n            info = self._info_or_id(info_or_id)\n        except (IOError, ValueError) as e:\n            yield ErrorMessage(None, 'Error loading %s: %s' % (info_or_id, e))\n            return\n\n        # Handle collections.\n        if isinstance(info, Collection):\n            yield StartCollectionMessage(info)\n            for msg in self.incr_download(info.children, download_dir, force):\n                yield msg\n            yield FinishCollectionMessage(info)\n\n        # Handle Packages (delegate to a helper function).\n        else:\n            for msg in self._download_package(info, download_dir, force):\n                yield msg\n\n    def _num_packages(self, item):\n        if isinstance(item, Package):\n            return 1\n        else:\n            return len(item.packages)\n\n    def _download_list(self, items, download_dir, force):\n        # Look up the requested items.\n        for i in range(len(items)):\n            try:\n                items[i] = self._info_or_id(items[i])\n            except (IOError, ValueError) as e:\n                yield ErrorMessage(items[i], e)\n                return\n\n        # Download each item, re-scaling their progress.\n        num_packages = sum(self._num_packages(item) for item in items)\n        progress = 0\n        for i, item in enumerate(items):\n            if isinstance(item, Package):\n                delta = 1.0 / num_packages\n            else:\n                delta = len(item.packages) / num_packages\n            for msg in self.incr_download(item, download_dir, force):\n                if isinstance(msg, ProgressMessage):\n                    yield ProgressMessage(progress + msg.progress * delta)\n                else:\n                    yield msg\n\n            progress += 100 * delta\n\n    def _download_package(self, info, download_dir, force):\n        yield StartPackageMessage(info)\n        yield ProgressMessage(0)\n\n        # Do we already have the current version?\n        status = self.status(info, download_dir)\n        if not force and status == self.INSTALLED:\n            yield UpToDateMessage(info)\n            yield ProgressMessage(100)\n            yield FinishPackageMessage(info)\n            return\n\n        # Remove the package from our status cache\n        self._status_cache.pop(info.id, None)\n\n        # Check for (and remove) any old/stale version.\n        filepath = os.path.join(download_dir, info.filename)\n        if os.path.exists(filepath):\n            if status == self.STALE:\n                yield StaleMessage(info)\n            os.remove(filepath)\n\n        # Ensure the download_dir exists\n        if not os.path.exists(download_dir):\n            os.mkdir(download_dir)\n        if not os.path.exists(os.path.join(download_dir, info.subdir)):\n            os.mkdir(os.path.join(download_dir, info.subdir))\n\n        # Download the file.  This will raise an IOError if the url\n        # is not found.\n        yield StartDownloadMessage(info)\n        yield ProgressMessage(5)\n        try:\n            infile = urlopen(info.url)\n            with open(filepath, 'wb') as outfile:\n                # print info.size\n                num_blocks = max(1, info.size / (1024 * 16))\n                for block in itertools.count():\n                    s = infile.read(1024 * 16)  # 16k blocks.\n                    outfile.write(s)\n                    if not s:\n                        break\n                    if block % 2 == 0:  # how often?\n                        yield ProgressMessage(min(80, 5 + 75 * (block / num_blocks)))\n            infile.close()\n        except IOError as e:\n            yield ErrorMessage(\n                info,\n                'Error downloading %r from <%s>:' '\\n  %s' % (info.id, info.url, e),\n            )\n            return\n        yield FinishDownloadMessage(info)\n        yield ProgressMessage(80)\n\n        # If it's a zipfile, uncompress it.\n        if info.filename.endswith('.zip'):\n            zipdir = os.path.join(download_dir, info.subdir)\n            # Unzip if we're unzipping by default; *or* if it's already\n            # been unzipped (presumably a previous version).\n            if info.unzip or os.path.exists(os.path.join(zipdir, info.id)):\n                yield StartUnzipMessage(info)\n                for msg in _unzip_iter(filepath, zipdir, verbose=False):\n                    # Somewhat of a hack, but we need a proper package reference\n                    msg.package = info\n                    yield msg\n                yield FinishUnzipMessage(info)\n\n        yield FinishPackageMessage(info)\n\n    def download(\n        self,\n        info_or_id=None,\n        download_dir=None,\n        quiet=False,\n        force=False,\n        prefix='[nltk_data] ',\n        halt_on_error=True,\n        raise_on_error=False,\n        print_error_to=sys.stderr,\n    ):\n\n        print_to = functools.partial(print, file=print_error_to)\n        # If no info or id is given, then use the interactive shell.\n        if info_or_id is None:\n            # [xx] hmm -- changing self._download_dir here seems like\n            # the wrong thing to do.  Maybe the _interactive_download\n            # function should make a new copy of self to use?\n            if download_dir is not None:\n                self._download_dir = download_dir\n            self._interactive_download()\n            return True\n\n        else:\n            # Define a helper function for displaying output:\n            def show(s, prefix2=''):\n                print_to(\n                    textwrap.fill(\n                        s,\n                        initial_indent=prefix + prefix2,\n                        subsequent_indent=prefix + prefix2 + ' ' * 4,\n                    )\n                )\n\n            for msg in self.incr_download(info_or_id, download_dir, force):\n                # Error messages\n                if isinstance(msg, ErrorMessage):\n                    show(msg.message)\n                    if raise_on_error:\n                        raise ValueError(msg.message)\n                    if halt_on_error:\n                        return False\n                    self._errors = True\n                    if not quiet:\n                        print_to(\"Error installing package. Retry? [n/y/e]\")\n                        choice = input().strip()\n                        if choice in ['y', 'Y']:\n                            if not self.download(\n                                msg.package.id,\n                                download_dir,\n                                quiet,\n                                force,\n                                prefix,\n                                halt_on_error,\n                                raise_on_error,\n                            ):\n                                return False\n                        elif choice in ['e', 'E']:\n                            return False\n\n                # All other messages\n                if not quiet:\n                    # Collection downloading messages:\n                    if isinstance(msg, StartCollectionMessage):\n                        show('Downloading collection %r' % msg.collection.id)\n                        prefix += '   | '\n                        print_to(prefix)\n                    elif isinstance(msg, FinishCollectionMessage):\n                        print_to(prefix)\n                        prefix = prefix[:-4]\n                        if self._errors:\n                            show(\n                                'Downloaded collection %r with errors'\n                                % msg.collection.id\n                            )\n                        else:\n                            show('Done downloading collection %s' % msg.collection.id)\n\n                    # Package downloading messages:\n                    elif isinstance(msg, StartPackageMessage):\n                        show(\n                            'Downloading package %s to %s...'\n                            % (msg.package.id, download_dir)\n                        )\n                    elif isinstance(msg, UpToDateMessage):\n                        show('Package %s is already up-to-date!' % msg.package.id, '  ')\n                    # elif isinstance(msg, StaleMessage):\n                    #    show('Package %s is out-of-date or corrupt' %\n                    #         msg.package.id, '  ')\n                    elif isinstance(msg, StartUnzipMessage):\n                        show('Unzipping %s.' % msg.package.filename, '  ')\n\n                    # Data directory message:\n                    elif isinstance(msg, SelectDownloadDirMessage):\n                        download_dir = msg.download_dir\n        return True\n\n    def is_stale(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.STALE\n\n    def is_installed(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.INSTALLED\n\n    def clear_status_cache(self, id=None):\n        if id is None:\n            self._status_cache.clear()\n        else:\n            self._status_cache.pop(id, None)\n\n    def status(self, info_or_id, download_dir=None):\n        \"\"\"\n        Return a constant describing the status of the given package\n        or collection.  Status can be one of ``INSTALLED``,\n        ``NOT_INSTALLED``, ``STALE``, or ``PARTIAL``.\n        \"\"\"\n        if download_dir is None:\n            download_dir = self._download_dir\n        info = self._info_or_id(info_or_id)\n\n        # Handle collections:\n        if isinstance(info, Collection):\n            pkg_status = [self.status(pkg.id) for pkg in info.packages]\n            if self.STALE in pkg_status:\n                return self.STALE\n            elif self.PARTIAL in pkg_status:\n                return self.PARTIAL\n            elif self.INSTALLED in pkg_status and self.NOT_INSTALLED in pkg_status:\n                return self.PARTIAL\n            elif self.NOT_INSTALLED in pkg_status:\n                return self.NOT_INSTALLED\n            else:\n                return self.INSTALLED\n\n        # Handle packages:\n        else:\n            filepath = os.path.join(download_dir, info.filename)\n            if download_dir != self._download_dir:\n                return self._pkg_status(info, filepath)\n            else:\n                if info.id not in self._status_cache:\n                    self._status_cache[info.id] = self._pkg_status(info, filepath)\n                return self._status_cache[info.id]\n\n    def _pkg_status(self, info, filepath):\n        if not os.path.exists(filepath):\n            return self.NOT_INSTALLED\n\n        # Check if the file has the correct size.\n        try:\n            filestat = os.stat(filepath)\n        except OSError:\n            return self.NOT_INSTALLED\n        if filestat.st_size != int(info.size):\n            return self.STALE\n\n        # Check if the file's checksum matches\n        if md5_hexdigest(filepath) != info.checksum:\n            return self.STALE\n\n        # If it's a zipfile, and it's been at least partially\n        # unzipped, then check if it's been fully unzipped.\n        if filepath.endswith('.zip'):\n            unzipdir = filepath[:-4]\n            if not os.path.exists(unzipdir):\n                return self.INSTALLED  # but not unzipped -- ok!\n            if not os.path.isdir(unzipdir):\n                return self.STALE\n\n            unzipped_size = sum(\n                os.stat(os.path.join(d, f)).st_size\n                for d, _, files in os.walk(unzipdir)\n                for f in files\n            )\n            if unzipped_size != info.unzipped_size:\n                return self.STALE\n\n        # Otherwise, everything looks good.\n        return self.INSTALLED\n\n    def update(self, quiet=False, prefix='[nltk_data] '):\n        \"\"\"\n        Re-download any packages whose status is STALE.\n        \"\"\"\n        self.clear_status_cache()\n        for pkg in self.packages():\n            if self.status(pkg) == self.STALE:\n                self.download(pkg, quiet=quiet, prefix=prefix)\n\n    # /////////////////////////////////////////////////////////////////\n    # Index\n    # /////////////////////////////////////////////////////////////////\n\n    def _update_index(self, url=None):\n        \"\"\"A helper function that ensures that self._index is\n        up-to-date.  If the index is older than self.INDEX_TIMEOUT,\n        then download it again.\"\"\"\n        # Check if the index is aleady up-to-date.  If so, do nothing.\n        if not (\n            self._index is None\n            or url is not None\n            or time.time() - self._index_timestamp > self.INDEX_TIMEOUT\n        ):\n            return\n\n        # If a URL was specified, then update our URL.\n        self._url = url or self._url\n\n        # Download the index file.\n        self._index = nltk.internals.ElementWrapper(\n            ElementTree.parse(urlopen(self._url)).getroot()\n        )\n        self._index_timestamp = time.time()\n\n        # Build a dictionary of packages.\n        packages = [Package.fromxml(p) for p in self._index.findall('packages/package')]\n        self._packages = dict((p.id, p) for p in packages)\n\n        # Build a dictionary of collections.\n        collections = [\n            Collection.fromxml(c) for c in self._index.findall('collections/collection')\n        ]\n        self._collections = dict((c.id, c) for c in collections)\n\n        # Replace identifiers with actual children in collection.children.\n        for collection in self._collections.values():\n            for i, child_id in enumerate(collection.children):\n                if child_id in self._packages:\n                    collection.children[i] = self._packages[child_id]\n                elif child_id in self._collections:\n                    collection.children[i] = self._collections[child_id]\n                else:\n                    print(\n                        'removing collection member with no package: {}'.format(\n                            child_id\n                        )\n                    )\n                    del collection.children[i]\n\n        # Fill in collection.packages for each collection.\n        for collection in self._collections.values():\n            packages = {}\n            queue = [collection]\n            for child in queue:\n                if isinstance(child, Collection):\n                    queue.extend(child.children)\n                elif isinstance(child, Package):\n                    packages[child.id] = child\n                else:\n                    pass\n            collection.packages = packages.values()\n\n        # Flush the status cache\n        self._status_cache.clear()\n\n    def index(self):\n        \"\"\"\n        Return the XML index describing the packages available from\n        the data server.  If necessary, this index will be downloaded\n        from the data server.\n        \"\"\"\n        self._update_index()\n        return self._index\n\n    def info(self, id):\n        \"\"\"Return the ``Package`` or ``Collection`` record for the\n           given item.\"\"\"\n        self._update_index()\n        if id in self._packages:\n            return self._packages[id]\n        if id in self._collections:\n            return self._collections[id]\n        raise ValueError('Package %r not found in index' % id)\n\n    def xmlinfo(self, id):\n        \"\"\"Return the XML info record for the given item\"\"\"\n        self._update_index()\n        for package in self._index.findall('packages/package'):\n            if package.get('id') == id:\n                return package\n        for collection in self._index.findall('collections/collection'):\n            if collection.get('id') == id:\n                return collection\n        raise ValueError('Package %r not found in index' % id)\n\n    # /////////////////////////////////////////////////////////////////\n    # URL & Data Directory\n    # /////////////////////////////////////////////////////////////////\n\n    def _get_url(self):\n        \"\"\"The URL for the data server's index file.\"\"\"\n        return self._url\n\n    def _set_url(self, url):\n        \"\"\"\n        Set a new URL for the data server. If we're unable to contact\n        the given url, then the original url is kept.\n        \"\"\"\n        original_url = self._url\n        try:\n            self._update_index(url)\n        except:\n            self._url = original_url\n            raise\n\n    url = property(_get_url, _set_url)\n\n    def default_download_dir(self):\n        \"\"\"\n        Return the directory to which packages will be downloaded by\n        default.  This value can be overridden using the constructor,\n        or on a case-by-case basis using the ``download_dir`` argument when\n        calling ``download()``.\n\n        On Windows, the default download directory is\n        ``PYTHONHOME/lib/nltk``, where *PYTHONHOME* is the\n        directory containing Python, e.g. ``C:\\\\Python25``.\n\n        On all other platforms, the default directory is the first of\n        the following which exists or which can be created with write\n        permission: ``/usr/share/nltk_data``, ``/usr/local/share/nltk_data``,\n        ``/usr/lib/nltk_data``, ``/usr/local/lib/nltk_data``, ``~/nltk_data``.\n        \"\"\"\n        # Check if we are on GAE where we cannot write into filesystem.\n        if 'APPENGINE_RUNTIME' in os.environ:\n            return\n\n        # Check if we have sufficient permissions to install in a\n        # variety of system-wide locations.\n        for nltkdir in nltk.data.path:\n            if os.path.exists(nltkdir) and nltk.internals.is_writable(nltkdir):\n                return nltkdir\n\n        # On Windows, use %APPDATA%\n        if sys.platform == 'win32' and 'APPDATA' in os.environ:\n            homedir = os.environ['APPDATA']\n\n        # Otherwise, install in the user's home directory.\n        else:\n            homedir = os.path.expanduser('~/')\n            if homedir == '~/':\n                raise ValueError(\"Could not find a default download directory\")\n\n        # append \"nltk_data\" to the home directory\n        return os.path.join(homedir, 'nltk_data')\n\n    def _get_download_dir(self):\n        \"\"\"\n        The default directory to which packages will be downloaded.\n        This defaults to the value returned by ``default_download_dir()``.\n        To override this default on a case-by-case basis, use the\n        ``download_dir`` argument when calling ``download()``.\n        \"\"\"\n        return self._download_dir\n\n    def _set_download_dir(self, download_dir):\n        self._download_dir = download_dir\n        # Clear the status cache.\n        self._status_cache.clear()\n\n    download_dir = property(_get_download_dir, _set_download_dir)\n\n    # /////////////////////////////////////////////////////////////////\n    # Interactive Shell\n    # /////////////////////////////////////////////////////////////////\n\n    def _interactive_download(self):\n        # Try the GUI first; if that doesn't work, try the simple\n        # interactive shell.\n        if TKINTER:\n            try:\n                DownloaderGUI(self).mainloop()\n            except TclError:\n                DownloaderShell(self).run()\n        else:\n            DownloaderShell(self).run()\n\n\nclass DownloaderShell(object):\n    def __init__(self, dataserver):\n        self._ds = dataserver\n\n    def _simple_interactive_menu(self, *options):\n        print('-' * 75)\n        spc = (68 - sum(len(o) for o in options)) // (len(options) - 1) * ' '\n        print('    ' + spc.join(options))\n        # w = 76/len(options)\n        # fmt = '  ' + ('%-'+str(w)+'s')*(len(options)-1) + '%s'\n        # print fmt % options\n        print('-' * 75)\n\n    def run(self):\n        print('NLTK Downloader')\n        while True:\n            self._simple_interactive_menu(\n                'd) Download',\n                'l) List',\n                ' u) Update',\n                'c) Config',\n                'h) Help',\n                'q) Quit',\n            )\n            user_input = input('Downloader> ').strip()\n            if not user_input:\n                print()\n                continue\n            command = user_input.lower().split()[0]\n            args = user_input.split()[1:]\n            try:\n                if command == 'l':\n                    print()\n                    self._ds.list(self._ds.download_dir, header=False, more_prompt=True)\n                elif command == 'h':\n                    self._simple_interactive_help()\n                elif command == 'c':\n                    self._simple_interactive_config()\n                elif command in ('q', 'x'):\n                    return\n                elif command == 'd':\n                    self._simple_interactive_download(args)\n                elif command == 'u':\n                    self._simple_interactive_update()\n                else:\n                    print('Command %r unrecognized' % user_input)\n            except HTTPError as e:\n                print('Error reading from server: %s' % e)\n            except URLError as e:\n                print('Error connecting to server: %s' % e.reason)\n            # try checking if user_input is a package name, &\n            # downloading it?\n            print()\n\n    def _simple_interactive_download(self, args):\n        if args:\n            for arg in args:\n                try:\n                    self._ds.download(arg, prefix='    ')\n                except (IOError, ValueError) as e:\n                    print(e)\n        else:\n            while True:\n                print()\n                print('Download which package (l=list; x=cancel)?')\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'l':\n                    self._ds.list(\n                        self._ds.download_dir,\n                        header=False,\n                        more_prompt=True,\n                        skip_installed=True,\n                    )\n                    continue\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n                elif user_input:\n                    for id in user_input.split():\n                        try:\n                            self._ds.download(id, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n\n    def _simple_interactive_update(self):\n        while True:\n            stale_packages = []\n            stale = partial = False\n            for info in sorted(getattr(self._ds, 'packages')(), key=str):\n                if self._ds.status(info) == self._ds.STALE:\n                    stale_packages.append((info.id, info.name))\n\n            print()\n            if stale_packages:\n                print('Will update following packages (o=ok; x=cancel)')\n                for pid, pname in stale_packages:\n                    name = textwrap.fill(\n                        '-' * 27 + (pname), 75, subsequent_indent=27 * ' '\n                    )[27:]\n                    print('  [ ] %s %s' % (pid.ljust(20, '.'), name))\n                print()\n\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'o':\n                    for pid, pname in stale_packages:\n                        try:\n                            self._ds.download(pid, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n            else:\n                print('Nothing to update.')\n                return\n\n    def _simple_interactive_help(self):\n        print()\n        print('Commands:')\n        print(\n            '  d) Download a package or collection     u) Update out of date packages'\n        )\n        print('  l) List packages & collections          h) Help')\n        print('  c) View & Modify Configuration          q) Quit')\n\n    def _show_config(self):\n        print()\n        print('Data Server:')\n        print('  - URL: <%s>' % self._ds.url)\n        print(('  - %d Package Collections Available' % len(self._ds.collections())))\n        print(('  - %d Individual Packages Available' % len(self._ds.packages())))\n        print()\n        print('Local Machine:')\n        print('  - Data directory: %s' % self._ds.download_dir)\n\n    def _simple_interactive_config(self):\n        self._show_config()\n        while True:\n            print()\n            self._simple_interactive_menu(\n                's) Show Config', 'u) Set Server URL', 'd) Set Data Dir', 'm) Main Menu'\n            )\n            user_input = input('Config> ').strip().lower()\n            if user_input == 's':\n                self._show_config()\n            elif user_input == 'd':\n                new_dl_dir = input('  New Directory> ').strip()\n                if new_dl_dir in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                elif os.path.isdir(new_dl_dir):\n                    self._ds.download_dir = new_dl_dir\n                else:\n                    print(('Directory %r not found!  Create it first.' % new_dl_dir))\n            elif user_input == 'u':\n                new_url = input('  New URL> ').strip()\n                if new_url in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                else:\n                    if not new_url.startswith(('http://', 'https://')):\n                        new_url = 'http://' + new_url\n                    try:\n                        self._ds.url = new_url\n                    except Exception as e:\n                        print('Error reading <%r>:\\n  %s' % (new_url, e))\n            elif user_input == 'm':\n                break\n\n\nclass DownloaderGUI(object):\n    \"\"\"\n    Graphical interface for downloading packages from the NLTK data\n    server.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Column Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    COLUMNS = [\n        '',\n        'Identifier',\n        'Name',\n        'Size',\n        'Status',\n        'Unzipped Size',\n        'Copyright',\n        'Contact',\n        'License',\n        'Author',\n        'Subdir',\n        'Checksum',\n    ]\n    \"\"\"A list of the names of columns.  This controls the order in\n       which the columns will appear.  If this is edited, then\n       ``_package_to_columns()`` may need to be edited to match.\"\"\"\n\n    COLUMN_WEIGHTS = {'': 0, 'Name': 5, 'Size': 0, 'Status': 0}\n    \"\"\"A dictionary specifying how columns should be resized when the\n       table is resized.  Columns with weight 0 will not be resized at\n       all; and columns with high weight will be resized more.\n       Default weight (for columns not explicitly listed) is 1.\"\"\"\n\n    COLUMN_WIDTHS = {\n        '': 1,\n        'Identifier': 20,\n        'Name': 45,\n        'Size': 10,\n        'Unzipped Size': 10,\n        'Status': 12,\n    }\n    \"\"\"A dictionary specifying how wide each column should be, in\n       characters.  The default width (for columns not explicitly\n       listed) is specified by ``DEFAULT_COLUMN_WIDTH``.\"\"\"\n\n    DEFAULT_COLUMN_WIDTH = 30\n    \"\"\"The default width for columns that are not explicitly listed\n       in ``COLUMN_WIDTHS``.\"\"\"\n\n    INITIAL_COLUMNS = ['', 'Identifier', 'Name', 'Size', 'Status']\n    \"\"\"The set of columns that should be displayed by default.\"\"\"\n\n    # Perform a few import-time sanity checks to make sure that the\n    # column configuration variables are defined consistently:\n    for c in COLUMN_WEIGHTS:\n        assert c in COLUMNS\n    for c in COLUMN_WIDTHS:\n        assert c in COLUMNS\n    for c in INITIAL_COLUMNS:\n        assert c in COLUMNS\n\n    # /////////////////////////////////////////////////////////////////\n    # Color Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    _BACKDROP_COLOR = ('#000', '#ccc')\n\n    _ROW_COLOR = {\n        Downloader.INSTALLED: ('#afa', '#080'),\n        Downloader.PARTIAL: ('#ffa', '#880'),\n        Downloader.STALE: ('#faa', '#800'),\n        Downloader.NOT_INSTALLED: ('#fff', '#888'),\n    }\n\n    _MARK_COLOR = ('#000', '#ccc')\n\n    # _FRONT_TAB_COLOR = ('#ccf', '#008')\n    # _BACK_TAB_COLOR = ('#88a', '#448')\n    _FRONT_TAB_COLOR = ('#fff', '#45c')\n    _BACK_TAB_COLOR = ('#aaa', '#67a')\n\n    _PROGRESS_COLOR = ('#f00', '#aaa')\n\n    _TAB_FONT = 'helvetica -16 bold'\n\n    # /////////////////////////////////////////////////////////////////\n    # Constructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, dataserver, use_threads=True):\n        self._ds = dataserver\n        self._use_threads = use_threads\n\n        # For the threaded downloader:\n        self._download_lock = threading.Lock()\n        self._download_msg_queue = []\n        self._download_abort_queue = []\n        self._downloading = False\n\n        # For tkinter after callbacks:\n        self._afterid = {}\n\n        # A message log.\n        self._log_messages = []\n        self._log_indent = 0\n        self._log('NLTK Downloader Started!')\n\n        # Create the main window.\n        top = self.top = Tk()\n        top.geometry('+50+50')\n        top.title('NLTK Downloader')\n        top.configure(background=self._BACKDROP_COLOR[1])\n\n        # Set up some bindings now, in case anything goes wrong.\n        top.bind('<Control-q>', self.destroy)\n        top.bind('<Control-x>', self.destroy)\n        self._destroyed = False\n\n        self._column_vars = {}\n\n        # Initialize the GUI.\n        self._init_widgets()\n        self._init_menu()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n        self._show_info()\n        self._select_columns()\n        self._table.select(0)\n\n        # Make sure we get notified when we're destroyed, so we can\n        # cancel any download in progress.\n        self._table.bind('<Destroy>', self._destroy)\n\n    def _log(self, msg):\n        self._log_messages.append(\n            '%s %s%s' % (time.ctime(), ' | ' * self._log_indent, msg)\n        )\n\n    # /////////////////////////////////////////////////////////////////\n    # Internals\n    # /////////////////////////////////////////////////////////////////\n\n    def _init_widgets(self):\n        # Create the top-level frame structures\n        f1 = Frame(self.top, relief='raised', border=2, padx=8, pady=0)\n        f1.pack(sid='top', expand=True, fill='both')\n        f1.grid_rowconfigure(2, weight=1)\n        f1.grid_columnconfigure(0, weight=1)\n        Frame(f1, height=8).grid(column=0, row=0)  # spacer\n        tabframe = Frame(f1)\n        tabframe.grid(column=0, row=1, sticky='news')\n        tableframe = Frame(f1)\n        tableframe.grid(column=0, row=2, sticky='news')\n        buttonframe = Frame(f1)\n        buttonframe.grid(column=0, row=3, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=4)  # spacer\n        infoframe = Frame(f1)\n        infoframe.grid(column=0, row=5, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=6)  # spacer\n        progressframe = Frame(\n            self.top, padx=3, pady=3, background=self._BACKDROP_COLOR[1]\n        )\n        progressframe.pack(side='bottom', fill='x')\n        self.top['border'] = 0\n        self.top['highlightthickness'] = 0\n\n        # Create the tabs\n        self._tab_names = ['Collections', 'Corpora', 'Models', 'All Packages']\n        self._tabs = {}\n        for i, tab in enumerate(self._tab_names):\n            label = Label(tabframe, text=tab, font=self._TAB_FONT)\n            label.pack(side='left', padx=((i + 1) % 2) * 10)\n            label.bind('<Button-1>', self._select_tab)\n            self._tabs[tab.lower()] = label\n\n        # Create the table.\n        column_weights = [self.COLUMN_WEIGHTS.get(column, 1) for column in self.COLUMNS]\n        self._table = Table(\n            tableframe,\n            self.COLUMNS,\n            column_weights=column_weights,\n            highlightthickness=0,\n            listbox_height=16,\n            reprfunc=self._table_reprfunc,\n        )\n        self._table.columnconfig(0, foreground=self._MARK_COLOR[0])  # marked\n        for i, column in enumerate(self.COLUMNS):\n            width = self.COLUMN_WIDTHS.get(column, self.DEFAULT_COLUMN_WIDTH)\n            self._table.columnconfig(i, width=width)\n        self._table.pack(expand=True, fill='both')\n        self._table.focus()\n        self._table.bind_to_listboxes('<Double-Button-1>', self._download)\n        self._table.bind('<space>', self._table_mark)\n        self._table.bind('<Return>', self._download)\n        self._table.bind('<Left>', self._prev_tab)\n        self._table.bind('<Right>', self._next_tab)\n        self._table.bind('<Control-a>', self._mark_all)\n\n        # Create entry boxes for URL & download_dir\n        infoframe.grid_columnconfigure(1, weight=1)\n\n        info = [\n            ('url', 'Server Index:', self._set_url),\n            ('download_dir', 'Download Directory:', self._set_download_dir),\n        ]\n        self._info = {}\n        for (i, (key, label, callback)) in enumerate(info):\n            Label(infoframe, text=label).grid(column=0, row=i, sticky='e')\n            entry = Entry(\n                infoframe, font='courier', relief='groove', disabledforeground='black'\n            )\n            self._info[key] = (entry, callback)\n            entry.bind('<Return>', self._info_save)\n            entry.bind('<Button-1>', lambda e, key=key: self._info_edit(key))\n            entry.grid(column=1, row=i, sticky='ew')\n\n        # If the user edits url or download_dir, and then clicks outside\n        # the entry box, then save their results.\n        self.top.bind('<Button-1>', self._info_save)\n\n        # Create Download & Refresh buttons.\n        self._download_button = Button(\n            buttonframe, text='Download', command=self._download, width=8\n        )\n        self._download_button.pack(side='left')\n        self._refresh_button = Button(\n            buttonframe, text='Refresh', command=self._refresh, width=8\n        )\n        self._refresh_button.pack(side='right')\n\n        # Create Progress bar\n        self._progresslabel = Label(\n            progressframe,\n            text='',\n            foreground=self._BACKDROP_COLOR[0],\n            background=self._BACKDROP_COLOR[1],\n        )\n        self._progressbar = Canvas(\n            progressframe,\n            width=200,\n            height=16,\n            background=self._PROGRESS_COLOR[1],\n            relief='sunken',\n            border=1,\n        )\n        self._init_progressbar()\n        self._progressbar.pack(side='right')\n        self._progresslabel.pack(side='left')\n\n    def _init_menu(self):\n        menubar = Menu(self.top)\n\n        filemenu = Menu(menubar, tearoff=0)\n        filemenu.add_command(\n            label='Download', underline=0, command=self._download, accelerator='Return'\n        )\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Change Server Index',\n            underline=7,\n            command=lambda: self._info_edit('url'),\n        )\n        filemenu.add_command(\n            label='Change Download Directory',\n            underline=0,\n            command=lambda: self._info_edit('download_dir'),\n        )\n        filemenu.add_separator()\n        filemenu.add_command(label='Show Log', underline=5, command=self._show_log)\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Exit', underline=1, command=self.destroy, accelerator='Ctrl-x'\n        )\n        menubar.add_cascade(label='File', underline=0, menu=filemenu)\n\n        # Create a menu to control which columns of the table are\n        # shown.  n.b.: we never hide the first two columns (mark and\n        # identifier).\n        viewmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[2:]:\n            var = IntVar(self.top)\n            assert column not in self._column_vars\n            self._column_vars[column] = var\n            if column in self.INITIAL_COLUMNS:\n                var.set(1)\n            viewmenu.add_checkbutton(\n                label=column, underline=0, variable=var, command=self._select_columns\n            )\n        menubar.add_cascade(label='View', underline=0, menu=viewmenu)\n\n        # Create a sort menu\n        # [xx] this should be selectbuttons; and it should include\n        # reversed sorts as options.\n        sortmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'ascending')),\n            )\n        sortmenu.add_separator()\n        # sortmenu.add_command(label='Descending Sort:')\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Reverse sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'descending')),\n            )\n        menubar.add_cascade(label='Sort', underline=0, menu=sortmenu)\n\n        helpmenu = Menu(menubar, tearoff=0)\n        helpmenu.add_command(label='About', underline=0, command=self.about)\n        helpmenu.add_command(\n            label='Instructions', underline=0, command=self.help, accelerator='F1'\n        )\n        menubar.add_cascade(label='Help', underline=0, menu=helpmenu)\n        self.top.bind('<F1>', self.help)\n\n        self.top.config(menu=menubar)\n\n    def _select_columns(self):\n        for (column, var) in self._column_vars.items():\n            if var.get():\n                self._table.show_column(column)\n            else:\n                self._table.hide_column(column)\n\n    def _refresh(self):\n        self._ds.clear_status_cache()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._table.select(0)\n\n    def _info_edit(self, info_key):\n        self._info_save()  # just in case.\n        (entry, callback) = self._info[info_key]\n        entry['state'] = 'normal'\n        entry['relief'] = 'sunken'\n        entry.focus()\n\n    def _info_save(self, e=None):\n        focus = self._table\n        for entry, callback in self._info.values():\n            if entry['state'] == 'disabled':\n                continue\n            if e is not None and e.widget is entry and e.keysym != 'Return':\n                focus = entry\n            else:\n                entry['state'] = 'disabled'\n                entry['relief'] = 'groove'\n                callback(entry.get())\n        focus.focus()\n\n    def _table_reprfunc(self, row, col, val):\n        if self._table.column_names[col].endswith('Size'):\n            if isinstance(val, string_types):\n                return '  %s' % val\n            elif val < 1024 ** 2:\n                return '  %.1f KB' % (val / 1024.0 ** 1)\n            elif val < 1024 ** 3:\n                return '  %.1f MB' % (val / 1024.0 ** 2)\n            else:\n                return '  %.1f GB' % (val / 1024.0 ** 3)\n\n        if col in (0, ''):\n            return str(val)\n        else:\n            return '  %s' % val\n\n    def _set_url(self, url):\n        if url == self._ds.url:\n            return\n        try:\n            self._ds.url = url\n            self._fill_table()\n        except IOError as e:\n            showerror('Error Setting Server Index', str(e))\n        self._show_info()\n\n    def _set_download_dir(self, download_dir):\n        if self._ds.download_dir == download_dir:\n            return\n        # check if the dir exists, and if not, ask if we should create it?\n\n        # Clear our status cache, & re-check what's installed\n        self._ds.download_dir = download_dir\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._show_info()\n\n    def _show_info(self):\n        print('showing info', self._ds.url)\n        for entry, cb in self._info.values():\n            entry['state'] = 'normal'\n            entry.delete(0, 'end')\n        self._info['url'][0].insert(0, self._ds.url)\n        self._info['download_dir'][0].insert(0, self._ds.download_dir)\n        for entry, cb in self._info.values():\n            entry['state'] = 'disabled'\n\n    def _prev_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i > 0:\n                self._tab = self._tab_names[i - 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _next_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i < (len(self._tabs) - 1):\n                self._tab = self._tab_names[i + 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _select_tab(self, event):\n        self._tab = event.widget['text'].lower()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n    _tab = 'collections'\n    # _tab = 'corpora'\n    _rows = None\n\n    def _fill_table(self):\n        selected_row = self._table.selected_row()\n        self._table.clear()\n        if self._tab == 'all packages':\n            items = self._ds.packages()\n        elif self._tab == 'corpora':\n            items = self._ds.corpora()\n        elif self._tab == 'models':\n            items = self._ds.models()\n        elif self._tab == 'collections':\n            items = self._ds.collections()\n        else:\n            assert 0, 'bad tab value %r' % self._tab\n        rows = [self._package_to_columns(item) for item in items]\n        self._table.extend(rows)\n\n        # Highlight the active tab.\n        for tab, label in self._tabs.items():\n            if tab == self._tab:\n                label.configure(\n                    foreground=self._FRONT_TAB_COLOR[0],\n                    background=self._FRONT_TAB_COLOR[1],\n                )\n            else:\n                label.configure(\n                    foreground=self._BACK_TAB_COLOR[0],\n                    background=self._BACK_TAB_COLOR[1],\n                )\n\n        self._table.sort_by('Identifier', order='ascending')\n        self._color_table()\n        self._table.select(selected_row)\n\n        # This is a hack, because the scrollbar isn't updating its\n        # position right -- I'm not sure what the underlying cause is\n        # though.  (This is on OS X w/ python 2.5)  The length of\n        # delay that's necessary seems to depend on how fast the\n        # comptuer is. :-/\n        self.top.after(150, self._table._scrollbar.set, *self._table._mlb.yview())\n        self.top.after(300, self._table._scrollbar.set, *self._table._mlb.yview())\n\n    def _update_table_status(self):\n        for row_num in range(len(self._table)):\n            status = self._ds.status(self._table[row_num, 'Identifier'])\n            self._table[row_num, 'Status'] = status\n        self._color_table()\n\n    def _download(self, *e):\n        # If we're using threads, then delegate to the threaded\n        # downloader instead.\n        if self._use_threads:\n            return self._download_threaded(*e)\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        download_iter = self._ds.incr_download(marked, self._ds.download_dir)\n        self._log_indent = 0\n        self._download_cb(download_iter, marked)\n\n    _DL_DELAY = 10\n\n    def _download_cb(self, download_iter, ids):\n        try:\n            msg = next(download_iter)\n        except StopIteration:\n            # self._fill_table(sort=False)\n            self._update_table_status()\n            afterid = self.top.after(10, self._show_progress, 0)\n            self._afterid['_download_cb'] = afterid\n            return\n\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        if isinstance(msg, ProgressMessage):\n            self._show_progress(msg.progress)\n        elif isinstance(msg, ErrorMessage):\n            show(msg.message)\n            if msg.package is not None:\n                self._select(msg.package.id)\n            self._show_progress(None)\n            return  # halt progress.\n        elif isinstance(msg, StartCollectionMessage):\n            show('Downloading collection %s' % msg.collection.id)\n            self._log_indent += 1\n        elif isinstance(msg, StartPackageMessage):\n            show('Downloading package %s' % msg.package.id)\n        elif isinstance(msg, UpToDateMessage):\n            show('Package %s is up-to-date!' % msg.package.id)\n        # elif isinstance(msg, StaleMessage):\n        #    show('Package %s is out-of-date or corrupt' % msg.package.id)\n        elif isinstance(msg, FinishDownloadMessage):\n            show('Finished downloading %r.' % msg.package.id)\n        elif isinstance(msg, StartUnzipMessage):\n            show('Unzipping %s' % msg.package.filename)\n        elif isinstance(msg, FinishCollectionMessage):\n            self._log_indent -= 1\n            show('Finished downloading collection %r.' % msg.collection.id)\n            self._clear_mark(msg.collection.id)\n        elif isinstance(msg, FinishPackageMessage):\n            self._clear_mark(msg.package.id)\n        afterid = self.top.after(self._DL_DELAY, self._download_cb, download_iter, ids)\n        self._afterid['_download_cb'] = afterid\n\n    def _select(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table.select(row)\n                return\n\n    def _color_table(self):\n        # Color rows according to status.\n        for row in range(len(self._table)):\n            bg, sbg = self._ROW_COLOR[self._table[row, 'Status']]\n            fg, sfg = ('black', 'white')\n            self._table.rowconfig(\n                row,\n                foreground=fg,\n                selectforeground=sfg,\n                background=bg,\n                selectbackground=sbg,\n            )\n            # Color the marked column\n            self._table.itemconfigure(\n                row, 0, foreground=self._MARK_COLOR[0], background=self._MARK_COLOR[1]\n            )\n\n    def _clear_mark(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table[row, 0] = ''\n\n    def _mark_all(self, *e):\n        for row in range(len(self._table)):\n            self._table[row, 0] = 'X'\n\n    def _table_mark(self, *e):\n        selection = self._table.selected_row()\n        if selection >= 0:\n            if self._table[selection][0] != '':\n                self._table[selection, 0] = ''\n            else:\n                self._table[selection, 0] = 'X'\n        self._table.select(delta=1)\n\n    def _show_log(self):\n        text = '\\n'.join(self._log_messages)\n        ShowText(self.top, 'NLTK Downloader Log', text)\n\n    def _package_to_columns(self, pkg):\n        \"\"\"\n        Given a package, return a list of values describing that\n        package, one for each column in ``self.COLUMNS``.\n        \"\"\"\n        row = []\n        for column_index, column_name in enumerate(self.COLUMNS):\n            if column_index == 0:  # Mark:\n                row.append('')\n            elif column_name == 'Identifier':\n                row.append(pkg.id)\n            elif column_name == 'Status':\n                row.append(self._ds.status(pkg))\n            else:\n                attr = column_name.lower().replace(' ', '_')\n                row.append(getattr(pkg, attr, 'n/a'))\n        return row\n\n    # /////////////////////////////////////////////////////////////////\n    # External Interface\n    # /////////////////////////////////////////////////////////////////\n\n    def destroy(self, *e):\n        if self._destroyed:\n            return\n        self.top.destroy()\n        self._destroyed = True\n\n    def _destroy(self, *e):\n        if self.top is not None:\n            for afterid in self._afterid.values():\n                self.top.after_cancel(afterid)\n\n        # Abort any download in progress.\n        if self._downloading and self._use_threads:\n            self._abort_download()\n\n        # Make sure the garbage collector destroys these now;\n        # otherwise, they may get destroyed when we're not in the main\n        # thread, which would make Tkinter unhappy.\n        self._column_vars.clear()\n\n    def mainloop(self, *args, **kwargs):\n        self.top.mainloop(*args, **kwargs)\n\n    # /////////////////////////////////////////////////////////////////\n    # HELP\n    # /////////////////////////////////////////////////////////////////\n\n    HELP = textwrap.dedent(\n        \"\"\"\\\n    This tool can be used to download a variety of corpora and models\n    that can be used with NLTK.  Each corpus or model is distributed\n    in a single zip file, known as a \\\"package file.\\\"  You can\n    download packages individually, or you can download pre-defined\n    collections of packages.\n\n    When you download a package, it will be saved to the \\\"download\n    directory.\\\"  A default download directory is chosen when you run\n\n    the downloader; but you may also select a different download\n    directory.  On Windows, the default download directory is\n\n\n    \\\"package.\\\"\n\n    The NLTK downloader can be used to download a variety of corpora,\n    models, and other data packages.\n\n    Keyboard shortcuts::\n      [return]\\t Download\n      [up]\\t Select previous package\n      [down]\\t Select next package\n      [left]\\t Select previous tab\n      [right]\\t Select next tab\n    \"\"\"\n    )\n\n    def help(self, *e):\n        # The default font's not very legible; try using 'fixed' instead.\n        try:\n            ShowText(\n                self.top,\n                'Help: NLTK Dowloader',\n                self.HELP.strip(),\n                width=75,\n                font='fixed',\n            )\n        except:\n            ShowText(self.top, 'Help: NLTK Downloader', self.HELP.strip(), width=75)\n\n    def about(self, *e):\n        ABOUT = \"NLTK Downloader\\n\" + \"Written by Edward Loper\"\n        TITLE = 'About: NLTK Downloader'\n        try:\n            from six.moves.tkinter_messagebox import Message\n\n            Message(message=ABOUT, title=TITLE).show()\n        except ImportError:\n            ShowText(self.top, TITLE, ABOUT)\n\n    # /////////////////////////////////////////////////////////////////\n    # Progress Bar\n    # /////////////////////////////////////////////////////////////////\n\n    _gradient_width = 5\n\n    def _init_progressbar(self):\n        c = self._progressbar\n        width, height = int(c['width']), int(c['height'])\n        for i in range(0, (int(c['width']) * 2) // self._gradient_width):\n            c.create_line(\n                i * self._gradient_width + 20,\n                -20,\n                i * self._gradient_width - height - 20,\n                height + 20,\n                width=self._gradient_width,\n                fill='#%02x0000' % (80 + abs(i % 6 - 3) * 12),\n            )\n        c.addtag_all('gradient')\n        c.itemconfig('gradient', state='hidden')\n\n        # This is used to display progress\n        c.addtag_withtag(\n            'redbox', c.create_rectangle(0, 0, 0, 0, fill=self._PROGRESS_COLOR[0])\n        )\n\n    def _show_progress(self, percent):\n        c = self._progressbar\n        if percent is None:\n            c.coords('redbox', 0, 0, 0, 0)\n            c.itemconfig('gradient', state='hidden')\n        else:\n            width, height = int(c['width']), int(c['height'])\n            x = percent * int(width) // 100 + 1\n            c.coords('redbox', 0, 0, x, height + 1)\n\n    def _progress_alive(self):\n        c = self._progressbar\n        if not self._downloading:\n            c.itemconfig('gradient', state='hidden')\n        else:\n            c.itemconfig('gradient', state='normal')\n            x1, y1, x2, y2 = c.bbox('gradient')\n            if x1 <= -100:\n                c.move('gradient', (self._gradient_width * 6) - 4, 0)\n            else:\n                c.move('gradient', -4, 0)\n            afterid = self.top.after(200, self._progress_alive)\n            self._afterid['_progress_alive'] = afterid\n\n    # /////////////////////////////////////////////////////////////////\n    # Threaded downloader\n    # /////////////////////////////////////////////////////////////////\n\n    def _download_threaded(self, *e):\n        # If the user tries to start a new download while we're already\n        # downloading something, then abort the current download instead.\n        if self._downloading:\n            self._abort_download()\n            return\n\n        # Change the 'download' button to an 'abort' button.\n        self._download_button['text'] = 'Cancel'\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        # Create a new data server object for the download operation,\n        # just in case the user modifies our data server during the\n        # download (e.g., clicking 'refresh' or editing the index url).\n        ds = Downloader(self._ds.url, self._ds.download_dir)\n\n        # Start downloading in a separate thread.\n        assert self._download_msg_queue == []\n        assert self._download_abort_queue == []\n        self._DownloadThread(\n            ds,\n            marked,\n            self._download_lock,\n            self._download_msg_queue,\n            self._download_abort_queue,\n        ).start()\n\n        # Monitor the download message queue & display its progress.\n        self._log_indent = 0\n        self._downloading = True\n        self._monitor_message_queue()\n\n        # Display an indication that we're still alive and well by\n        # cycling the progress bar.\n        self._progress_alive()\n\n    def _abort_download(self):\n        if self._downloading:\n            self._download_lock.acquire()\n            self._download_abort_queue.append('abort')\n            self._download_lock.release()\n\n    class _DownloadThread(threading.Thread):\n        def __init__(self, data_server, items, lock, message_queue, abort):\n            self.data_server = data_server\n            self.items = items\n            self.lock = lock\n            self.message_queue = message_queue\n            self.abort = abort\n            threading.Thread.__init__(self)\n\n        def run(self):\n            for msg in self.data_server.incr_download(self.items):\n                self.lock.acquire()\n                self.message_queue.append(msg)\n                # Check if we've been told to kill ourselves:\n                if self.abort:\n                    self.message_queue.append('aborted')\n                    self.lock.release()\n                    return\n                self.lock.release()\n            self.lock.acquire()\n            self.message_queue.append('finished')\n            self.lock.release()\n\n    _MONITOR_QUEUE_DELAY = 100\n\n    def _monitor_message_queue(self):\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        # Try to acquire the lock; if it's busy, then just try again later.\n        if not self._download_lock.acquire():\n            return\n        for msg in self._download_msg_queue:\n\n            # Done downloading?\n            if msg == 'finished' or msg == 'aborted':\n                # self._fill_table(sort=False)\n                self._update_table_status()\n                self._downloading = False\n                self._download_button['text'] = 'Download'\n                del self._download_msg_queue[:]\n                del self._download_abort_queue[:]\n                self._download_lock.release()\n                if msg == 'aborted':\n                    show('Download aborted!')\n                    self._show_progress(None)\n                else:\n                    afterid = self.top.after(100, self._show_progress, None)\n                    self._afterid['_monitor_message_queue'] = afterid\n                return\n\n            # All other messages\n            elif isinstance(msg, ProgressMessage):\n                self._show_progress(msg.progress)\n            elif isinstance(msg, ErrorMessage):\n                show(msg.message)\n                if msg.package is not None:\n                    self._select(msg.package.id)\n                self._show_progress(None)\n                self._downloading = False\n                return  # halt progress.\n            elif isinstance(msg, StartCollectionMessage):\n                show('Downloading collection %r' % msg.collection.id)\n                self._log_indent += 1\n            elif isinstance(msg, StartPackageMessage):\n                self._ds.clear_status_cache(msg.package.id)\n                show('Downloading package %r' % msg.package.id)\n            elif isinstance(msg, UpToDateMessage):\n                show('Package %s is up-to-date!' % msg.package.id)\n            # elif isinstance(msg, StaleMessage):\n            #    show('Package %s is out-of-date or corrupt; updating it' %\n            #         msg.package.id)\n            elif isinstance(msg, FinishDownloadMessage):\n                show('Finished downloading %r.' % msg.package.id)\n            elif isinstance(msg, StartUnzipMessage):\n                show('Unzipping %s' % msg.package.filename)\n            elif isinstance(msg, FinishUnzipMessage):\n                show('Finished installing %s' % msg.package.id)\n            elif isinstance(msg, FinishCollectionMessage):\n                self._log_indent -= 1\n                show('Finished downloading collection %r.' % msg.collection.id)\n                self._clear_mark(msg.collection.id)\n            elif isinstance(msg, FinishPackageMessage):\n                self._update_table_status()\n                self._clear_mark(msg.package.id)\n\n        # Let the user know when we're aborting a download (but\n        # waiting for a good point to abort it, so we don't end up\n        # with a partially unzipped package or anything like that).\n        if self._download_abort_queue:\n            self._progresslabel['text'] = 'Aborting download...'\n\n        # Clear the message queue and then release the lock\n        del self._download_msg_queue[:]\n        self._download_lock.release()\n\n        # Check the queue again after MONITOR_QUEUE_DELAY msec.\n        afterid = self.top.after(self._MONITOR_QUEUE_DELAY, self._monitor_message_queue)\n        self._afterid['_monitor_message_queue'] = afterid\n\n\n######################################################################\n# Helper Functions\n######################################################################\n# [xx] It may make sense to move these to nltk.internals.\n\n\ndef md5_hexdigest(file):\n    \"\"\"\n    Calculate and return the MD5 checksum for a given file.\n    ``file`` may either be a filename or an open stream.\n    \"\"\"\n    if isinstance(file, string_types):\n        with open(file, 'rb') as infile:\n            return _md5_hexdigest(infile)\n    return _md5_hexdigest(file)\n\n\ndef _md5_hexdigest(fp):\n    md5_digest = md5()\n    while True:\n        block = fp.read(1024 * 16)  # 16k blocks\n        if not block:\n            break\n        md5_digest.update(block)\n    return md5_digest.hexdigest()\n\n\n# change this to periodically yield progress messages?\n# [xx] get rid of topdir parameter -- we should be checking\n# this when we build the index, anyway.\ndef unzip(filename, root, verbose=True):\n    \"\"\"\n    Extract the contents of the zip file ``filename`` into the\n    directory ``root``.\n    \"\"\"\n    for message in _unzip_iter(filename, root, verbose):\n        if isinstance(message, ErrorMessage):\n            raise Exception(message)\n\n\ndef _unzip_iter(filename, root, verbose=True):\n    if verbose:\n        sys.stdout.write('Unzipping %s' % os.path.split(filename)[1])\n        sys.stdout.flush()\n\n    try:\n        zf = zipfile.ZipFile(filename)\n    except zipfile.error as e:\n        yield ErrorMessage(filename, 'Error with downloaded zip file')\n        return\n    except Exception as e:\n        yield ErrorMessage(filename, e)\n        return\n\n    # Get lists of directories & files\n    namelist = zf.namelist()\n    dirlist = set()\n    for x in namelist:\n        if x.endswith('/'):\n            dirlist.add(x)\n        else:\n            dirlist.add(x.rsplit('/', 1)[0] + '/')\n    filelist = [x for x in namelist if not x.endswith('/')]\n\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(root):\n        os.mkdir(root)\n\n    # Create the directory structure\n    for dirname in sorted(dirlist):\n        pieces = dirname[:-1].split('/')\n        for i in range(len(pieces)):\n            dirpath = os.path.join(root, *pieces[: i + 1])\n            if not os.path.exists(dirpath):\n                os.mkdir(dirpath)\n\n    # Extract files.\n    for i, filename in enumerate(filelist):\n        filepath = os.path.join(root, *filename.split('/'))\n\n        try:\n            with open(filepath, 'wb') as dstfile, zf.open(filename) as srcfile:\n                shutil.copyfileobj(srcfile, dstfile)\n        except Exception as e:\n            yield ErrorMessage(filename, e)\n            return\n\n        if verbose and (i * 10 / len(filelist) > (i - 1) * 10 / len(filelist)):\n            sys.stdout.write('.')\n            sys.stdout.flush()\n    if verbose:\n        print()\n\n\n######################################################################\n# Index Builder\n######################################################################\n# This may move to a different file sometime.\n\n\ndef build_index(root, base_url):\n    \"\"\"\n    Create a new data.xml index file, by combining the xml description\n    files for various packages and collections.  ``root`` should be the\n    path to a directory containing the package xml and zip files; and\n    the collection xml files.  The ``root`` directory is expected to\n    have the following subdirectories::\n\n      root/\n        packages/ .................. subdirectory for packages\n          corpora/ ................. zip & xml files for corpora\n          grammars/ ................ zip & xml files for grammars\n          taggers/ ................. zip & xml files for taggers\n          tokenizers/ .............. zip & xml files for tokenizers\n          etc.\n        collections/ ............... xml files for collections\n\n    For each package, there should be two files: ``package.zip``\n    (where *package* is the package name)\n    which contains the package itself as a compressed zip file; and\n    ``package.xml``, which is an xml description of the package.  The\n    zipfile ``package.zip`` should expand to a single subdirectory\n    named ``package/``.  The base filename ``package`` must match\n    the identifier given in the package's xml file.\n\n    For each collection, there should be a single file ``collection.zip``\n    describing the collection, where *collection* is the name of the collection.\n\n    All identifiers (for both packages and collections) must be unique.\n    \"\"\"\n    # Find all packages.\n    packages = []\n    for pkg_xml, zf, subdir in _find_packages(os.path.join(root, 'packages')):\n        zipstat = os.stat(zf.filename)\n        url = '%s/%s/%s' % (base_url, subdir, os.path.split(zf.filename)[1])\n        unzipped_size = sum(zf_info.file_size for zf_info in zf.infolist())\n\n        # Fill in several fields of the package xml with calculated values.\n        pkg_xml.set('unzipped_size', '%s' % unzipped_size)\n        pkg_xml.set('size', '%s' % zipstat.st_size)\n        pkg_xml.set('checksum', '%s' % md5_hexdigest(zf.filename))\n        pkg_xml.set('subdir', subdir)\n        # pkg_xml.set('svn_revision', _svn_revision(zf.filename))\n        if not pkg_xml.get('url'):\n            pkg_xml.set('url', url)\n\n        # Record the package.\n        packages.append(pkg_xml)\n\n    # Find all collections\n    collections = list(_find_collections(os.path.join(root, 'collections')))\n\n    # Check that all UIDs are unique\n    uids = set()\n    for item in packages + collections:\n        if item.get('id') in uids:\n            raise ValueError('Duplicate UID: %s' % item.get('id'))\n        uids.add(item.get('id'))\n\n    # Put it all together\n    top_elt = ElementTree.Element('nltk_data')\n    top_elt.append(ElementTree.Element('packages'))\n    for package in packages:\n        top_elt[0].append(package)\n    top_elt.append(ElementTree.Element('collections'))\n    for collection in collections:\n        top_elt[1].append(collection)\n\n    _indent_xml(top_elt)\n    return top_elt\n\n\ndef _indent_xml(xml, prefix=''):\n    \"\"\"\n    Helper for ``build_index()``: Given an XML ``ElementTree``, modify it\n    (and its descendents) ``text`` and ``tail`` attributes to generate\n    an indented tree, where each nested element is indented by 2\n    spaces with respect to its parent.\n    \"\"\"\n    if len(xml) > 0:\n        xml.text = (xml.text or '').strip() + '\\n' + prefix + '  '\n        for child in xml:\n            _indent_xml(child, prefix + '  ')\n        for child in xml[:-1]:\n            child.tail = (child.tail or '').strip() + '\\n' + prefix + '  '\n        xml[-1].tail = (xml[-1].tail or '').strip() + '\\n' + prefix\n\n\ndef _check_package(pkg_xml, zipfilename, zf):\n    \"\"\"\n    Helper for ``build_index()``: Perform some checks to make sure that\n    the given package is consistent.\n    \"\"\"\n    # The filename must patch the id given in the XML file.\n    uid = os.path.splitext(os.path.split(zipfilename)[1])[0]\n    if pkg_xml.get('id') != uid:\n        raise ValueError(\n            'package identifier mismatch (%s vs %s)' % (pkg_xml.get('id'), uid)\n        )\n\n    # Zip file must expand to a subdir whose name matches uid.\n    if sum((name != uid and not name.startswith(uid + '/')) for name in zf.namelist()):\n        raise ValueError(\n            'Zipfile %s.zip does not expand to a single '\n            'subdirectory %s/' % (uid, uid)\n        )\n\n\n# update for git?\ndef _svn_revision(filename):\n    \"\"\"\n    Helper for ``build_index()``: Calculate the subversion revision\n    number for a given file (by using ``subprocess`` to run ``svn``).\n    \"\"\"\n    p = subprocess.Popen(\n        ['svn', 'status', '-v', filename],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n    )\n    (stdout, stderr) = p.communicate()\n    if p.returncode != 0 or stderr or not stdout:\n        raise ValueError(\n            'Error determining svn_revision for %s: %s'\n            % (os.path.split(filename)[1], textwrap.fill(stderr))\n        )\n    return stdout.split()[2]\n\n\ndef _find_collections(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of ElementTree.Element\n    objects, each holding the xml for a single package collection.\n    \"\"\"\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfile = os.path.join(dirname, filename)\n                yield ElementTree.parse(xmlfile).getroot()\n\n\ndef _find_packages(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of tuples\n    ``(pkg_xml, zf, subdir)``, where:\n      - ``pkg_xml`` is an ``ElementTree.Element`` holding the xml for a\n        package\n      - ``zf`` is a ``zipfile.ZipFile`` for the package's contents.\n      - ``subdir`` is the subdirectory (relative to ``root``) where\n        the package was found (e.g. 'corpora' or 'grammars').\n    \"\"\"\n    from nltk.corpus.reader.util import _path_from\n\n    # Find all packages.\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        relpath = '/'.join(_path_from(root, dirname))\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfilename = os.path.join(dirname, filename)\n                zipfilename = xmlfilename[:-4] + '.zip'\n                try:\n                    zf = zipfile.ZipFile(zipfilename)\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (zipfilename, e))\n                try:\n                    pkg_xml = ElementTree.parse(xmlfilename).getroot()\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (xmlfilename, e))\n\n                # Check that the UID matches the filename\n                uid = os.path.split(xmlfilename[:-4])[1]\n                if pkg_xml.get('id') != uid:\n                    raise ValueError(\n                        'package identifier mismatch (%s '\n                        'vs %s)' % (pkg_xml.get('id'), uid)\n                    )\n\n                # Check that the zipfile expands to a subdir whose\n                # name matches the uid.\n                if sum(\n                    (name != uid and not name.startswith(uid + '/'))\n                    for name in zf.namelist()\n                ):\n                    raise ValueError(\n                        'Zipfile %s.zip does not expand to a '\n                        'single subdirectory %s/' % (uid, uid)\n                    )\n\n                yield pkg_xml, zf, relpath\n        # Don't recurse into svn subdirectories:\n        try:\n            subdirs.remove('.svn')\n        except ValueError:\n            pass\n\n\n######################################################################\n# Main:\n######################################################################\n\n# There should be a command-line interface\n\n# Aliases\n_downloader = Downloader()\ndownload = _downloader.download\n\n\ndef download_shell():\n    DownloaderShell(_downloader).run()\n\n\ndef download_gui():\n    DownloaderGUI(_downloader).mainloop()\n\n\ndef update():\n    _downloader.update()\n\n\nif __name__ == '__main__':\n    from optparse import OptionParser\n\n    parser = OptionParser()\n    parser.add_option(\n        \"-d\",\n        \"--dir\",\n        dest=\"dir\",\n        help=\"download package to directory DIR\",\n        metavar=\"DIR\",\n    )\n    parser.add_option(\n        \"-q\",\n        \"--quiet\",\n        dest=\"quiet\",\n        action=\"store_true\",\n        default=False,\n        help=\"work quietly\",\n    )\n    parser.add_option(\n        \"-f\",\n        \"--force\",\n        dest=\"force\",\n        action=\"store_true\",\n        default=False,\n        help=\"download even if already installed\",\n    )\n    parser.add_option(\n        \"-e\",\n        \"--exit-on-error\",\n        dest=\"halt_on_error\",\n        action=\"store_true\",\n        default=False,\n        help=\"exit if an error occurs\",\n    )\n    parser.add_option(\n        \"-u\",\n        \"--url\",\n        dest=\"server_index_url\",\n        default=os.environ.get('NLTK_DOWNLOAD_URL'),\n        help=\"download server index url\",\n    )\n\n    (options, args) = parser.parse_args()\n\n    downloader = Downloader(server_index_url=options.server_index_url)\n\n    if args:\n        for pkg_id in args:\n            rv = downloader.download(\n                info_or_id=pkg_id,\n                download_dir=options.dir,\n                quiet=options.quiet,\n                force=options.force,\n                halt_on_error=options.halt_on_error,\n            )\n            if rv == False and options.halt_on_error:\n                break\n    else:\n        downloader.download(\n            download_dir=options.dir,\n            quiet=options.quiet,\n            force=options.force,\n            halt_on_error=options.halt_on_error,\n        )\n", "patch": "@@ -2260,42 +2260,8 @@ def _unzip_iter(filename, root, verbose=True):\n         yield ErrorMessage(filename, e)\n         return\n \n-    # Get lists of directories & files\n-    namelist = zf.namelist()\n-    dirlist = set()\n-    for x in namelist:\n-        if x.endswith('/'):\n-            dirlist.add(x)\n-        else:\n-            dirlist.add(x.rsplit('/', 1)[0] + '/')\n-    filelist = [x for x in namelist if not x.endswith('/')]\n-\n-    # Create the target directory if it doesn't exist\n-    if not os.path.exists(root):\n-        os.mkdir(root)\n-\n-    # Create the directory structure\n-    for dirname in sorted(dirlist):\n-        pieces = dirname[:-1].split('/')\n-        for i in range(len(pieces)):\n-            dirpath = os.path.join(root, *pieces[: i + 1])\n-            if not os.path.exists(dirpath):\n-                os.mkdir(dirpath)\n-\n-    # Extract files.\n-    for i, filename in enumerate(filelist):\n-        filepath = os.path.join(root, *filename.split('/'))\n-\n-        try:\n-            with open(filepath, 'wb') as dstfile, zf.open(filename) as srcfile:\n-                shutil.copyfileobj(srcfile, dstfile)\n-        except Exception as e:\n-            yield ErrorMessage(filename, e)\n-            return\n+    zf.extractall(root)\n \n-        if verbose and (i * 10 / len(filelist) > (i - 1) * 10 / len(filelist)):\n-            sys.stdout.write('.')\n-            sys.stdout.flush()\n     if verbose:\n         print()\n ", "file_path": "files/2019_8\\102", "file_language": "py", "file_name": "nltk/downloader.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class DownloaderMessage(object):\n    \"\"\"A status message object, used by ``incr_download`` to\n       communicate its progress.\"\"\"", "target": 0}, {"function": "class StartCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection", "target": 0}, {"function": "class FinishCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection", "target": 0}, {"function": "class StartPackageMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class FinishPackageMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class StartDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has started downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class FinishDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has finished downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class StartUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has started unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class FinishUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has finished unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class UpToDateMessage(DownloaderMessage):\n    \"\"\"The package download file is already up-to-date\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class StaleMessage(DownloaderMessage):\n    \"\"\"The package download file is out-of-date or corrupt\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class ErrorMessage(DownloaderMessage):\n    \"\"\"Data server encountered an error\"\"\"\n\n    def __init__(self, package, message):\n        self.package = package\n        if isinstance(message, Exception):\n            self.message = str(message)\n        else:\n            self.message = message", "target": 0}, {"function": "class ProgressMessage(DownloaderMessage):\n    \"\"\"Indicates how much progress the data server has made\"\"\"\n\n    def __init__(self, progress):\n        self.progress = progress", "target": 0}, {"function": "class SelectDownloadDirMessage(DownloaderMessage):\n    \"\"\"Indicates what download directory the data server is using\"\"\"\n\n    def __init__(self, download_dir):\n        self.download_dir = download_dir", "target": 0}, {"function": "class Downloader(object):\n    \"\"\"\n    A class used to access the NLTK data server, which can be used to\n    download corpora and other data packages.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    INDEX_TIMEOUT = 60 * 60  # 1 hour\n    \"\"\"The amount of time after which the cached copy of the data\n       server index will be considered 'stale,' and will be\n       re-downloaded.\"\"\"\n\n    DEFAULT_URL = 'https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml'\n    \"\"\"The default URL for the NLTK data server's index.  An\n       alternative URL can be specified when creating a new\n       ``Downloader`` object.\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Status Constants\n    # /////////////////////////////////////////////////////////////////\n\n    INSTALLED = 'installed'\n    \"\"\"A status string indicating that a package or collection is\n       installed and up-to-date.\"\"\"\n    NOT_INSTALLED = 'not installed'\n    \"\"\"A status string indicating that a package or collection is\n       not installed.\"\"\"\n    STALE = 'out of date'\n    \"\"\"A status string indicating that a package or collection is\n       corrupt or out-of-date.\"\"\"\n    PARTIAL = 'partial'\n    \"\"\"A status string indicating that a collection is partially\n       installed (i.e., only some of its packages are installed.)\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Cosntructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, server_index_url=None, download_dir=None):\n        self._url = server_index_url or self.DEFAULT_URL\n        \"\"\"The URL for the data server's index file.\"\"\"\n\n        self._collections = {}\n        \"\"\"Dictionary from collection identifier to ``Collection``\"\"\"\n\n        self._packages = {}\n        \"\"\"Dictionary from package identifier to ``Package``\"\"\"\n\n        self._download_dir = download_dir\n        \"\"\"The default directory to which packages will be downloaded.\"\"\"\n\n        self._index = None\n        \"\"\"The XML index file downloaded from the data server\"\"\"\n\n        self._index_timestamp = None\n        \"\"\"Time at which ``self._index`` was downloaded.  If it is more\n           than ``INDEX_TIMEOUT`` seconds old, it will be re-downloaded.\"\"\"\n\n        self._status_cache = {}\n        \"\"\"Dictionary from package/collection identifier to status\n           string (``INSTALLED``, ``NOT_INSTALLED``, ``STALE``, or\n           ``PARTIAL``).  Cache is used for packages only, not\n           collections.\"\"\"\n\n        self._errors = None\n        \"\"\"Flag for telling if all packages got successfully downloaded or not.\"\"\"\n\n        # decide where we're going to save things to.\n        if self._download_dir is None:\n            self._download_dir = self.default_download_dir()\n\n    # /////////////////////////////////////////////////////////////////\n    # Information\n    # /////////////////////////////////////////////////////////////////\n\n    def list(\n        self,\n        download_dir=None,\n        show_packages=True,\n        show_collections=True,\n        header=True,\n        more_prompt=False,\n        skip_installed=False,\n    ):\n        lines = 0  # for more_prompt\n        if download_dir is None:\n            download_dir = self._download_dir\n            print('Using default data directory (%s)' % download_dir)\n        if header:\n            print('=' * (26 + len(self._url)))\n            print(' Data server index for <%s>' % self._url)\n            print('=' * (26 + len(self._url)))\n            lines += 3  # for more_prompt\n        stale = partial = False\n\n        categories = []\n        if show_packages:\n            categories.append('packages')\n        if show_collections:\n            categories.append('collections')\n        for category in categories:\n            print('%s:' % category.capitalize())\n            lines += 1  # for more_prompt\n            for info in sorted(getattr(self, category)(), key=str):\n                status = self.status(info, download_dir)\n                if status == self.INSTALLED and skip_installed:\n                    continue\n                if status == self.STALE:\n                    stale = True\n                if status == self.PARTIAL:\n                    partial = True\n                prefix = {\n                    self.INSTALLED: '*',\n                    self.STALE: '-',\n                    self.PARTIAL: 'P',\n                    self.NOT_INSTALLED: ' ',\n                }[status]\n                name = textwrap.fill(\n                    '-' * 27 + (info.name or info.id), 75, subsequent_indent=27 * ' '\n                )[27:]\n                print('  [%s] %s %s' % (prefix, info.id.ljust(20, '.'), name))\n                lines += len(name.split('\\n'))  # for more_prompt\n                if more_prompt and lines > 20:\n                    user_input = input(\"Hit Enter to continue: \")\n                    if user_input.lower() in ('x', 'q'):\n                        return\n                    lines = 0\n            print()\n        msg = '([*] marks installed packages'\n        if stale:\n            msg += '; [-] marks out-of-date or corrupt packages'\n        if partial:\n            msg += '; [P] marks partially installed collections'\n        print(textwrap.fill(msg + ')', subsequent_indent=' ', width=76))\n\n    def packages(self):\n        self._update_index()\n        return self._packages.values()\n\n    def corpora(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir == 'corpora']\n\n    def models(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir != 'corpora']\n\n    def collections(self):\n        self._update_index()\n        return self._collections.values()\n\n    # /////////////////////////////////////////////////////////////////\n    # Downloading\n    # /////////////////////////////////////////////////////////////////\n\n    def _info_or_id(self, info_or_id):\n        if isinstance(info_or_id, string_types):\n            return self.info(info_or_id)\n        else:\n            return info_or_id\n\n    # [xx] When during downloading is it 'safe' to abort?  Only unsafe\n    # time is *during* an unzip -- we don't want to leave a\n    # partially-unzipped corpus in place because we wouldn't notice\n    # it.  But if we had the exact total size of the unzipped corpus,\n    # then that would be fine.  Then we could abort anytime we want!\n    # So this is really what we should do.  That way the threaded\n    # downloader in the gui can just kill the download thread anytime\n    # it wants.\n\n    def incr_download(self, info_or_id, download_dir=None, force=False):\n        # If they didn't specify a download_dir, then use the default one.\n        if download_dir is None:\n            download_dir = self._download_dir\n            yield SelectDownloadDirMessage(download_dir)\n\n        # If they gave us a list of ids, then download each one.\n        if isinstance(info_or_id, (list, tuple)):\n            for msg in self._download_list(info_or_id, download_dir, force):\n                yield msg\n            return\n\n        # Look up the requested collection or package.\n        try:\n            info = self._info_or_id(info_or_id)\n        except (IOError, ValueError) as e:\n            yield ErrorMessage(None, 'Error loading %s: %s' % (info_or_id, e))\n            return\n\n        # Handle collections.\n        if isinstance(info, Collection):\n            yield StartCollectionMessage(info)\n            for msg in self.incr_download(info.children, download_dir, force):\n                yield msg\n            yield FinishCollectionMessage(info)\n\n        # Handle Packages (delegate to a helper function).\n        else:\n            for msg in self._download_package(info, download_dir, force):\n                yield msg\n\n    def _num_packages(self, item):\n        if isinstance(item, Package):\n            return 1\n        else:\n            return len(item.packages)\n\n    def _download_list(self, items, download_dir, force):\n        # Look up the requested items.\n        for i in range(len(items)):\n            try:\n                items[i] = self._info_or_id(items[i])\n            except (IOError, ValueError) as e:\n                yield ErrorMessage(items[i], e)\n                return\n\n        # Download each item, re-scaling their progress.\n        num_packages = sum(self._num_packages(item) for item in items)\n        progress = 0\n        for i, item in enumerate(items):\n            if isinstance(item, Package):\n                delta = 1.0 / num_packages\n            else:\n                delta = len(item.packages) / num_packages\n            for msg in self.incr_download(item, download_dir, force):\n                if isinstance(msg, ProgressMessage):\n                    yield ProgressMessage(progress + msg.progress * delta)\n                else:\n                    yield msg\n\n            progress += 100 * delta\n\n    def _download_package(self, info, download_dir, force):\n        yield StartPackageMessage(info)\n        yield ProgressMessage(0)\n\n        # Do we already have the current version?\n        status = self.status(info, download_dir)\n        if not force and status == self.INSTALLED:\n            yield UpToDateMessage(info)\n            yield ProgressMessage(100)\n            yield FinishPackageMessage(info)\n            return\n\n        # Remove the package from our status cache\n        self._status_cache.pop(info.id, None)\n\n        # Check for (and remove) any old/stale version.\n        filepath = os.path.join(download_dir, info.filename)\n        if os.path.exists(filepath):\n            if status == self.STALE:\n                yield StaleMessage(info)\n            os.remove(filepath)\n\n        # Ensure the download_dir exists\n        if not os.path.exists(download_dir):\n            os.mkdir(download_dir)\n        if not os.path.exists(os.path.join(download_dir, info.subdir)):\n            os.mkdir(os.path.join(download_dir, info.subdir))\n\n        # Download the file.  This will raise an IOError if the url\n        # is not found.\n        yield StartDownloadMessage(info)\n        yield ProgressMessage(5)\n        try:\n            infile = urlopen(info.url)\n            with open(filepath, 'wb') as outfile:\n                # print info.size\n                num_blocks = max(1, info.size / (1024 * 16))\n                for block in itertools.count():\n                    s = infile.read(1024 * 16)  # 16k blocks.\n                    outfile.write(s)\n                    if not s:\n                        break\n                    if block % 2 == 0:  # how often?\n                        yield ProgressMessage(min(80, 5 + 75 * (block / num_blocks)))\n            infile.close()\n        except IOError as e:\n            yield ErrorMessage(\n                info,\n                'Error downloading %r from <%s>:' '\\n  %s' % (info.id, info.url, e),\n            )\n            return\n        yield FinishDownloadMessage(info)\n        yield ProgressMessage(80)\n\n        # If it's a zipfile, uncompress it.\n        if info.filename.endswith('.zip'):\n            zipdir = os.path.join(download_dir, info.subdir)\n            # Unzip if we're unzipping by default; *or* if it's already\n            # been unzipped (presumably a previous version).\n            if info.unzip or os.path.exists(os.path.join(zipdir, info.id)):\n                yield StartUnzipMessage(info)\n                for msg in _unzip_iter(filepath, zipdir, verbose=False):\n                    # Somewhat of a hack, but we need a proper package reference\n                    msg.package = info\n                    yield msg\n                yield FinishUnzipMessage(info)\n\n        yield FinishPackageMessage(info)\n\n    def download(\n        self,\n        info_or_id=None,\n        download_dir=None,\n        quiet=False,\n        force=False,\n        prefix='[nltk_data] ',\n        halt_on_error=True,\n        raise_on_error=False,\n        print_error_to=sys.stderr,\n    ):\n\n        print_to = functools.partial(print, file=print_error_to)\n        # If no info or id is given, then use the interactive shell.\n        if info_or_id is None:\n            # [xx] hmm -- changing self._download_dir here seems like\n            # the wrong thing to do.  Maybe the _interactive_download\n            # function should make a new copy of self to use?\n            if download_dir is not None:\n                self._download_dir = download_dir\n            self._interactive_download()\n            return True\n\n        else:\n            # Define a helper function for displaying output:\n            def show(s, prefix2=''):\n                print_to(\n                    textwrap.fill(\n                        s,\n                        initial_indent=prefix + prefix2,\n                        subsequent_indent=prefix + prefix2 + ' ' * 4,\n                    )\n                )\n\n            for msg in self.incr_download(info_or_id, download_dir, force):\n                # Error messages\n                if isinstance(msg, ErrorMessage):\n                    show(msg.message)\n                    if raise_on_error:\n                        raise ValueError(msg.message)\n                    if halt_on_error:\n                        return False\n                    self._errors = True\n                    if not quiet:\n                        print_to(\"Error installing package. Retry? [n/y/e]\")\n                        choice = input().strip()\n                        if choice in ['y', 'Y']:\n                            if not self.download(\n                                msg.package.id,\n                                download_dir,\n                                quiet,\n                                force,\n                                prefix,\n                                halt_on_error,\n                                raise_on_error,\n                            ):\n                                return False\n                        elif choice in ['e', 'E']:\n                            return False\n\n                # All other messages\n                if not quiet:\n                    # Collection downloading messages:\n                    if isinstance(msg, StartCollectionMessage):\n                        show('Downloading collection %r' % msg.collection.id)\n                        prefix += '   | '\n                        print_to(prefix)\n                    elif isinstance(msg, FinishCollectionMessage):\n                        print_to(prefix)\n                        prefix = prefix[:-4]\n                        if self._errors:\n                            show(\n                                'Downloaded collection %r with errors'\n                                % msg.collection.id\n                            )\n                        else:\n                            show('Done downloading collection %s' % msg.collection.id)\n\n                    # Package downloading messages:\n                    elif isinstance(msg, StartPackageMessage):\n                        show(\n                            'Downloading package %s to %s...'\n                            % (msg.package.id, download_dir)\n                        )\n                    elif isinstance(msg, UpToDateMessage):\n                        show('Package %s is already up-to-date!' % msg.package.id, '  ')\n                    # elif isinstance(msg, StaleMessage):\n                    #    show('Package %s is out-of-date or corrupt' %\n                    #         msg.package.id, '  ')\n                    elif isinstance(msg, StartUnzipMessage):\n                        show('Unzipping %s.' % msg.package.filename, '  ')\n\n                    # Data directory message:\n                    elif isinstance(msg, SelectDownloadDirMessage):\n                        download_dir = msg.download_dir\n        return True\n\n    def is_stale(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.STALE\n\n    def is_installed(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.INSTALLED\n\n    def clear_status_cache(self, id=None):\n        if id is None:\n            self._status_cache.clear()\n        else:\n            self._status_cache.pop(id, None)\n\n    def status(self, info_or_id, download_dir=None):\n        \"\"\"\n        Return a constant describing the status of the given package\n        or collection.  Status can be one of ``INSTALLED``,\n        ``NOT_INSTALLED``, ``STALE``, or ``PARTIAL``.\n        \"\"\"\n        if download_dir is None:\n            download_dir = self._download_dir\n        info = self._info_or_id(info_or_id)\n\n        # Handle collections:\n        if isinstance(info, Collection):\n            pkg_status = [self.status(pkg.id) for pkg in info.packages]\n            if self.STALE in pkg_status:\n                return self.STALE\n            elif self.PARTIAL in pkg_status:\n                return self.PARTIAL\n            elif self.INSTALLED in pkg_status and self.NOT_INSTALLED in pkg_status:\n                return self.PARTIAL\n            elif self.NOT_INSTALLED in pkg_status:\n                return self.NOT_INSTALLED\n            else:\n                return self.INSTALLED\n\n        # Handle packages:\n        else:\n            filepath = os.path.join(download_dir, info.filename)\n            if download_dir != self._download_dir:\n                return self._pkg_status(info, filepath)\n            else:\n                if info.id not in self._status_cache:\n                    self._status_cache[info.id] = self._pkg_status(info, filepath)\n                return self._status_cache[info.id]\n\n    def _pkg_status(self, info, filepath):\n        if not os.path.exists(filepath):\n            return self.NOT_INSTALLED\n\n        # Check if the file has the correct size.\n        try:\n            filestat = os.stat(filepath)\n        except OSError:\n            return self.NOT_INSTALLED\n        if filestat.st_size != int(info.size):\n            return self.STALE\n\n        # Check if the file's checksum matches\n        if md5_hexdigest(filepath) != info.checksum:\n            return self.STALE\n\n        # If it's a zipfile, and it's been at least partially\n        # unzipped, then check if it's been fully unzipped.\n        if filepath.endswith('.zip'):\n            unzipdir = filepath[:-4]\n            if not os.path.exists(unzipdir):\n                return self.INSTALLED  # but not unzipped -- ok!\n            if not os.path.isdir(unzipdir):\n                return self.STALE\n\n            unzipped_size = sum(\n                os.stat(os.path.join(d, f)).st_size\n                for d, _, files in os.walk(unzipdir)\n                for f in files\n            )\n            if unzipped_size != info.unzipped_size:\n                return self.STALE\n\n        # Otherwise, everything looks good.\n        return self.INSTALLED\n\n    def update(self, quiet=False, prefix='[nltk_data] '):\n        \"\"\"\n        Re-download any packages whose status is STALE.\n        \"\"\"\n        self.clear_status_cache()\n        for pkg in self.packages():\n            if self.status(pkg) == self.STALE:\n                self.download(pkg, quiet=quiet, prefix=prefix)\n\n    # /////////////////////////////////////////////////////////////////\n    # Index\n    # /////////////////////////////////////////////////////////////////\n\n    def _update_index(self, url=None):\n        \"\"\"A helper function that ensures that self._index is\n        up-to-date.  If the index is older than self.INDEX_TIMEOUT,\n        then download it again.\"\"\"\n        # Check if the index is aleady up-to-date.  If so, do nothing.\n        if not (\n            self._index is None\n            or url is not None\n            or time.time() - self._index_timestamp > self.INDEX_TIMEOUT\n        ):\n            return\n\n        # If a URL was specified, then update our URL.\n        self._url = url or self._url\n\n        # Download the index file.\n        self._index = nltk.internals.ElementWrapper(\n            ElementTree.parse(urlopen(self._url)).getroot()\n        )\n        self._index_timestamp = time.time()\n\n        # Build a dictionary of packages.\n        packages = [Package.fromxml(p) for p in self._index.findall('packages/package')]\n        self._packages = dict((p.id, p) for p in packages)\n\n        # Build a dictionary of collections.\n        collections = [\n            Collection.fromxml(c) for c in self._index.findall('collections/collection')\n        ]\n        self._collections = dict((c.id, c) for c in collections)\n\n        # Replace identifiers with actual children in collection.children.\n        for collection in self._collections.values():\n            for i, child_id in enumerate(collection.children):\n                if child_id in self._packages:\n                    collection.children[i] = self._packages[child_id]\n                elif child_id in self._collections:\n                    collection.children[i] = self._collections[child_id]\n                else:\n                    print(\n                        'removing collection member with no package: {}'.format(\n                            child_id\n                        )\n                    )\n                    del collection.children[i]\n\n        # Fill in collection.packages for each collection.\n        for collection in self._collections.values():\n            packages = {}\n            queue = [collection]\n            for child in queue:\n                if isinstance(child, Collection):\n                    queue.extend(child.children)\n                elif isinstance(child, Package):\n                    packages[child.id] = child\n                else:\n                    pass\n            collection.packages = packages.values()\n\n        # Flush the status cache\n        self._status_cache.clear()\n\n    def index(self):\n        \"\"\"\n        Return the XML index describing the packages available from\n        the data server.  If necessary, this index will be downloaded\n        from the data server.\n        \"\"\"\n        self._update_index()\n        return self._index\n\n    def info(self, id):\n        \"\"\"Return the ``Package`` or ``Collection`` record for the\n           given item.\"\"\"\n        self._update_index()\n        if id in self._packages:\n            return self._packages[id]\n        if id in self._collections:\n            return self._collections[id]\n        raise ValueError('Package %r not found in index' % id)\n\n    def xmlinfo(self, id):\n        \"\"\"Return the XML info record for the given item\"\"\"\n        self._update_index()\n        for package in self._index.findall('packages/package'):\n            if package.get('id') == id:\n                return package\n        for collection in self._index.findall('collections/collection'):\n            if collection.get('id') == id:\n                return collection\n        raise ValueError('Package %r not found in index' % id)\n\n    # /////////////////////////////////////////////////////////////////\n    # URL & Data Directory\n    # /////////////////////////////////////////////////////////////////\n\n    def _get_url(self):\n        \"\"\"The URL for the data server's index file.\"\"\"\n        return self._url\n\n    def _set_url(self, url):\n        \"\"\"\n        Set a new URL for the data server. If we're unable to contact\n        the given url, then the original url is kept.\n        \"\"\"\n        original_url = self._url\n        try:\n            self._update_index(url)\n        except:\n            self._url = original_url\n            raise\n\n    url = property(_get_url, _set_url)\n\n    def default_download_dir(self):\n        \"\"\"\n        Return the directory to which packages will be downloaded by\n        default.  This value can be overridden using the constructor,\n        or on a case-by-case basis using the ``download_dir`` argument when\n        calling ``download()``.\n\n        On Windows, the default download directory is\n        ``PYTHONHOME/lib/nltk``, where *PYTHONHOME* is the\n        directory containing Python, e.g. ``C:\\\\Python25``.\n\n        On all other platforms, the default directory is the first of\n        the following which exists or which can be created with write\n        permission: ``/usr/share/nltk_data``, ``/usr/local/share/nltk_data``,\n        ``/usr/lib/nltk_data``, ``/usr/local/lib/nltk_data``, ``~/nltk_data``.\n        \"\"\"\n        # Check if we are on GAE where we cannot write into filesystem.\n        if 'APPENGINE_RUNTIME' in os.environ:\n            return\n\n        # Check if we have sufficient permissions to install in a\n        # variety of system-wide locations.\n        for nltkdir in nltk.data.path:\n            if os.path.exists(nltkdir) and nltk.internals.is_writable(nltkdir):\n                return nltkdir\n\n        # On Windows, use %APPDATA%\n        if sys.platform == 'win32' and 'APPDATA' in os.environ:\n            homedir = os.environ['APPDATA']\n\n        # Otherwise, install in the user's home directory.\n        else:\n            homedir = os.path.expanduser('~/')\n            if homedir == '~/':\n                raise ValueError(\"Could not find a default download directory\")\n\n        # append \"nltk_data\" to the home directory\n        return os.path.join(homedir, 'nltk_data')\n\n    def _get_download_dir(self):\n        \"\"\"\n        The default directory to which packages will be downloaded.\n        This defaults to the value returned by ``default_download_dir()``.\n        To override this default on a case-by-case basis, use the\n        ``download_dir`` argument when calling ``download()``.\n        \"\"\"\n        return self._download_dir\n\n    def _set_download_dir(self, download_dir):\n        self._download_dir = download_dir\n        # Clear the status cache.\n        self._status_cache.clear()\n\n    download_dir = property(_get_download_dir, _set_download_dir)\n\n    # /////////////////////////////////////////////////////////////////\n    # Interactive Shell\n    # /////////////////////////////////////////////////////////////////\n\n    def _interactive_download(self):\n        # Try the GUI first; if that doesn't work, try the simple\n        # interactive shell.\n        if TKINTER:\n            try:\n                DownloaderGUI(self).mainloop()\n            except TclError:\n                DownloaderShell(self).run()\n        else:\n            DownloaderShell(self).run()", "target": 0}, {"function": "class DownloaderShell(object):\n    def __init__(self, dataserver):\n        self._ds = dataserver\n\n    def _simple_interactive_menu(self, *options):\n        print('-' * 75)\n        spc = (68 - sum(len(o) for o in options)) // (len(options) - 1) * ' '\n        print('    ' + spc.join(options))\n        # w = 76/len(options)\n        # fmt = '  ' + ('%-'+str(w)+'s')*(len(options)-1) + '%s'\n        # print fmt % options\n        print('-' * 75)\n\n    def run(self):\n        print('NLTK Downloader')\n        while True:\n            self._simple_interactive_menu(\n                'd) Download',\n                'l) List',\n                ' u) Update',\n                'c) Config',\n                'h) Help',\n                'q) Quit',\n            )\n            user_input = input('Downloader> ').strip()\n            if not user_input:\n                print()\n                continue\n            command = user_input.lower().split()[0]\n            args = user_input.split()[1:]\n            try:\n                if command == 'l':\n                    print()\n                    self._ds.list(self._ds.download_dir, header=False, more_prompt=True)\n                elif command == 'h':\n                    self._simple_interactive_help()\n                elif command == 'c':\n                    self._simple_interactive_config()\n                elif command in ('q', 'x'):\n                    return\n                elif command == 'd':\n                    self._simple_interactive_download(args)\n                elif command == 'u':\n                    self._simple_interactive_update()\n                else:\n                    print('Command %r unrecognized' % user_input)\n            except HTTPError as e:\n                print('Error reading from server: %s' % e)\n            except URLError as e:\n                print('Error connecting to server: %s' % e.reason)\n            # try checking if user_input is a package name, &\n            # downloading it?\n            print()\n\n    def _simple_interactive_download(self, args):\n        if args:\n            for arg in args:\n                try:\n                    self._ds.download(arg, prefix='    ')\n                except (IOError, ValueError) as e:\n                    print(e)\n        else:\n            while True:\n                print()\n                print('Download which package (l=list; x=cancel)?')\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'l':\n                    self._ds.list(\n                        self._ds.download_dir,\n                        header=False,\n                        more_prompt=True,\n                        skip_installed=True,\n                    )\n                    continue\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n                elif user_input:\n                    for id in user_input.split():\n                        try:\n                            self._ds.download(id, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n\n    def _simple_interactive_update(self):\n        while True:\n            stale_packages = []\n            stale = partial = False\n            for info in sorted(getattr(self._ds, 'packages')(), key=str):\n                if self._ds.status(info) == self._ds.STALE:\n                    stale_packages.append((info.id, info.name))\n\n            print()\n            if stale_packages:\n                print('Will update following packages (o=ok; x=cancel)')\n                for pid, pname in stale_packages:\n                    name = textwrap.fill(\n                        '-' * 27 + (pname), 75, subsequent_indent=27 * ' '\n                    )[27:]\n                    print('  [ ] %s %s' % (pid.ljust(20, '.'), name))\n                print()\n\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'o':\n                    for pid, pname in stale_packages:\n                        try:\n                            self._ds.download(pid, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n            else:\n                print('Nothing to update.')\n                return\n\n    def _simple_interactive_help(self):\n        print()\n        print('Commands:')\n        print(\n            '  d) Download a package or collection     u) Update out of date packages'\n        )\n        print('  l) List packages & collections          h) Help')\n        print('  c) View & Modify Configuration          q) Quit')\n\n    def _show_config(self):\n        print()\n        print('Data Server:')\n        print('  - URL: <%s>' % self._ds.url)\n        print(('  - %d Package Collections Available' % len(self._ds.collections())))\n        print(('  - %d Individual Packages Available' % len(self._ds.packages())))\n        print()\n        print('Local Machine:')\n        print('  - Data directory: %s' % self._ds.download_dir)\n\n    def _simple_interactive_config(self):\n        self._show_config()\n        while True:\n            print()\n            self._simple_interactive_menu(\n                's) Show Config', 'u) Set Server URL', 'd) Set Data Dir', 'm) Main Menu'\n            )\n            user_input = input('Config> ').strip().lower()\n            if user_input == 's':\n                self._show_config()\n            elif user_input == 'd':\n                new_dl_dir = input('  New Directory> ').strip()\n                if new_dl_dir in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                elif os.path.isdir(new_dl_dir):\n                    self._ds.download_dir = new_dl_dir\n                else:\n                    print(('Directory %r not found!  Create it first.' % new_dl_dir))\n            elif user_input == 'u':\n                new_url = input('  New URL> ').strip()\n                if new_url in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                else:\n                    if not new_url.startswith(('http://', 'https://')):\n                        new_url = 'http://' + new_url\n                    try:\n                        self._ds.url = new_url\n                    except Exception as e:\n                        print('Error reading <%r>:\\n  %s' % (new_url, e))\n            elif user_input == 'm':\n                break", "target": 0}, {"function": "class DownloaderGUI(object):\n    \"\"\"\n    Graphical interface for downloading packages from the NLTK data\n    server.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Column Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    COLUMNS = [\n        '',\n        'Identifier',\n        'Name',\n        'Size',\n        'Status',\n        'Unzipped Size',\n        'Copyright',\n        'Contact',\n        'License',\n        'Author',\n        'Subdir',\n        'Checksum',\n    ]\n    \"\"\"A list of the names of columns.  This controls the order in\n       which the columns will appear.  If this is edited, then\n       ``_package_to_columns()`` may need to be edited to match.\"\"\"\n\n    COLUMN_WEIGHTS = {'': 0, 'Name': 5, 'Size': 0, 'Status': 0}\n    \"\"\"A dictionary specifying how columns should be resized when the\n       table is resized.  Columns with weight 0 will not be resized at\n       all; and columns with high weight will be resized more.\n       Default weight (for columns not explicitly listed) is 1.\"\"\"\n\n    COLUMN_WIDTHS = {\n        '': 1,\n        'Identifier': 20,\n        'Name': 45,\n        'Size': 10,\n        'Unzipped Size': 10,\n        'Status': 12,\n    }\n    \"\"\"A dictionary specifying how wide each column should be, in\n       characters.  The default width (for columns not explicitly\n       listed) is specified by ``DEFAULT_COLUMN_WIDTH``.\"\"\"\n\n    DEFAULT_COLUMN_WIDTH = 30\n    \"\"\"The default width for columns that are not explicitly listed\n       in ``COLUMN_WIDTHS``.\"\"\"\n\n    INITIAL_COLUMNS = ['', 'Identifier', 'Name', 'Size', 'Status']\n    \"\"\"The set of columns that should be displayed by default.\"\"\"\n\n    # Perform a few import-time sanity checks to make sure that the\n    # column configuration variables are defined consistently:\n    for c in COLUMN_WEIGHTS:\n        assert c in COLUMNS\n    for c in COLUMN_WIDTHS:\n        assert c in COLUMNS\n    for c in INITIAL_COLUMNS:\n        assert c in COLUMNS\n\n    # /////////////////////////////////////////////////////////////////\n    # Color Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    _BACKDROP_COLOR = ('#000', '#ccc')\n\n    _ROW_COLOR = {\n        Downloader.INSTALLED: ('#afa', '#080'),\n        Downloader.PARTIAL: ('#ffa', '#880'),\n        Downloader.STALE: ('#faa', '#800'),\n        Downloader.NOT_INSTALLED: ('#fff', '#888'),\n    }\n\n    _MARK_COLOR = ('#000', '#ccc')\n\n    # _FRONT_TAB_COLOR = ('#ccf', '#008')\n    # _BACK_TAB_COLOR = ('#88a', '#448')\n    _FRONT_TAB_COLOR = ('#fff', '#45c')\n    _BACK_TAB_COLOR = ('#aaa', '#67a')\n\n    _PROGRESS_COLOR = ('#f00', '#aaa')\n\n    _TAB_FONT = 'helvetica -16 bold'\n\n    # /////////////////////////////////////////////////////////////////\n    # Constructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, dataserver, use_threads=True):\n        self._ds = dataserver\n        self._use_threads = use_threads\n\n        # For the threaded downloader:\n        self._download_lock = threading.Lock()\n        self._download_msg_queue = []\n        self._download_abort_queue = []\n        self._downloading = False\n\n        # For tkinter after callbacks:\n        self._afterid = {}\n\n        # A message log.\n        self._log_messages = []\n        self._log_indent = 0\n        self._log('NLTK Downloader Started!')\n\n        # Create the main window.\n        top = self.top = Tk()\n        top.geometry('+50+50')\n        top.title('NLTK Downloader')\n        top.configure(background=self._BACKDROP_COLOR[1])\n\n        # Set up some bindings now, in case anything goes wrong.\n        top.bind('<Control-q>', self.destroy)\n        top.bind('<Control-x>', self.destroy)\n        self._destroyed = False\n\n        self._column_vars = {}\n\n        # Initialize the GUI.\n        self._init_widgets()\n        self._init_menu()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n        self._show_info()\n        self._select_columns()\n        self._table.select(0)\n\n        # Make sure we get notified when we're destroyed, so we can\n        # cancel any download in progress.\n        self._table.bind('<Destroy>', self._destroy)\n\n    def _log(self, msg):\n        self._log_messages.append(\n            '%s %s%s' % (time.ctime(), ' | ' * self._log_indent, msg)\n        )\n\n    # /////////////////////////////////////////////////////////////////\n    # Internals\n    # /////////////////////////////////////////////////////////////////\n\n    def _init_widgets(self):\n        # Create the top-level frame structures\n        f1 = Frame(self.top, relief='raised', border=2, padx=8, pady=0)\n        f1.pack(sid='top', expand=True, fill='both')\n        f1.grid_rowconfigure(2, weight=1)\n        f1.grid_columnconfigure(0, weight=1)\n        Frame(f1, height=8).grid(column=0, row=0)  # spacer\n        tabframe = Frame(f1)\n        tabframe.grid(column=0, row=1, sticky='news')\n        tableframe = Frame(f1)\n        tableframe.grid(column=0, row=2, sticky='news')\n        buttonframe = Frame(f1)\n        buttonframe.grid(column=0, row=3, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=4)  # spacer\n        infoframe = Frame(f1)\n        infoframe.grid(column=0, row=5, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=6)  # spacer\n        progressframe = Frame(\n            self.top, padx=3, pady=3, background=self._BACKDROP_COLOR[1]\n        )\n        progressframe.pack(side='bottom', fill='x')\n        self.top['border'] = 0\n        self.top['highlightthickness'] = 0\n\n        # Create the tabs\n        self._tab_names = ['Collections', 'Corpora', 'Models', 'All Packages']\n        self._tabs = {}\n        for i, tab in enumerate(self._tab_names):\n            label = Label(tabframe, text=tab, font=self._TAB_FONT)\n            label.pack(side='left', padx=((i + 1) % 2) * 10)\n            label.bind('<Button-1>', self._select_tab)\n            self._tabs[tab.lower()] = label\n\n        # Create the table.\n        column_weights = [self.COLUMN_WEIGHTS.get(column, 1) for column in self.COLUMNS]\n        self._table = Table(\n            tableframe,\n            self.COLUMNS,\n            column_weights=column_weights,\n            highlightthickness=0,\n            listbox_height=16,\n            reprfunc=self._table_reprfunc,\n        )\n        self._table.columnconfig(0, foreground=self._MARK_COLOR[0])  # marked\n        for i, column in enumerate(self.COLUMNS):\n            width = self.COLUMN_WIDTHS.get(column, self.DEFAULT_COLUMN_WIDTH)\n            self._table.columnconfig(i, width=width)\n        self._table.pack(expand=True, fill='both')\n        self._table.focus()\n        self._table.bind_to_listboxes('<Double-Button-1>', self._download)\n        self._table.bind('<space>', self._table_mark)\n        self._table.bind('<Return>', self._download)\n        self._table.bind('<Left>', self._prev_tab)\n        self._table.bind('<Right>', self._next_tab)\n        self._table.bind('<Control-a>', self._mark_all)\n\n        # Create entry boxes for URL & download_dir\n        infoframe.grid_columnconfigure(1, weight=1)\n\n        info = [\n            ('url', 'Server Index:', self._set_url),\n            ('download_dir', 'Download Directory:', self._set_download_dir),\n        ]\n        self._info = {}\n        for (i, (key, label, callback)) in enumerate(info):\n            Label(infoframe, text=label).grid(column=0, row=i, sticky='e')\n            entry = Entry(\n                infoframe, font='courier', relief='groove', disabledforeground='black'\n            )\n            self._info[key] = (entry, callback)\n            entry.bind('<Return>', self._info_save)\n            entry.bind('<Button-1>', lambda e, key=key: self._info_edit(key))\n            entry.grid(column=1, row=i, sticky='ew')\n\n        # If the user edits url or download_dir, and then clicks outside\n        # the entry box, then save their results.\n        self.top.bind('<Button-1>', self._info_save)\n\n        # Create Download & Refresh buttons.\n        self._download_button = Button(\n            buttonframe, text='Download', command=self._download, width=8\n        )\n        self._download_button.pack(side='left')\n        self._refresh_button = Button(\n            buttonframe, text='Refresh', command=self._refresh, width=8\n        )\n        self._refresh_button.pack(side='right')\n\n        # Create Progress bar\n        self._progresslabel = Label(\n            progressframe,\n            text='',\n            foreground=self._BACKDROP_COLOR[0],\n            background=self._BACKDROP_COLOR[1],\n        )\n        self._progressbar = Canvas(\n            progressframe,\n            width=200,\n            height=16,\n            background=self._PROGRESS_COLOR[1],\n            relief='sunken',\n            border=1,\n        )\n        self._init_progressbar()\n        self._progressbar.pack(side='right')\n        self._progresslabel.pack(side='left')\n\n    def _init_menu(self):\n        menubar = Menu(self.top)\n\n        filemenu = Menu(menubar, tearoff=0)\n        filemenu.add_command(\n            label='Download', underline=0, command=self._download, accelerator='Return'\n        )\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Change Server Index',\n            underline=7,\n            command=lambda: self._info_edit('url'),\n        )\n        filemenu.add_command(\n            label='Change Download Directory',\n            underline=0,\n            command=lambda: self._info_edit('download_dir'),\n        )\n        filemenu.add_separator()\n        filemenu.add_command(label='Show Log', underline=5, command=self._show_log)\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Exit', underline=1, command=self.destroy, accelerator='Ctrl-x'\n        )\n        menubar.add_cascade(label='File', underline=0, menu=filemenu)\n\n        # Create a menu to control which columns of the table are\n        # shown.  n.b.: we never hide the first two columns (mark and\n        # identifier).\n        viewmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[2:]:\n            var = IntVar(self.top)\n            assert column not in self._column_vars\n            self._column_vars[column] = var\n            if column in self.INITIAL_COLUMNS:\n                var.set(1)\n            viewmenu.add_checkbutton(\n                label=column, underline=0, variable=var, command=self._select_columns\n            )\n        menubar.add_cascade(label='View', underline=0, menu=viewmenu)\n\n        # Create a sort menu\n        # [xx] this should be selectbuttons; and it should include\n        # reversed sorts as options.\n        sortmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'ascending')),\n            )\n        sortmenu.add_separator()\n        # sortmenu.add_command(label='Descending Sort:')\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Reverse sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'descending')),\n            )\n        menubar.add_cascade(label='Sort', underline=0, menu=sortmenu)\n\n        helpmenu = Menu(menubar, tearoff=0)\n        helpmenu.add_command(label='About', underline=0, command=self.about)\n        helpmenu.add_command(\n            label='Instructions', underline=0, command=self.help, accelerator='F1'\n        )\n        menubar.add_cascade(label='Help', underline=0, menu=helpmenu)\n        self.top.bind('<F1>', self.help)\n\n        self.top.config(menu=menubar)\n\n    def _select_columns(self):\n        for (column, var) in self._column_vars.items():\n            if var.get():\n                self._table.show_column(column)\n            else:\n                self._table.hide_column(column)\n\n    def _refresh(self):\n        self._ds.clear_status_cache()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._table.select(0)\n\n    def _info_edit(self, info_key):\n        self._info_save()  # just in case.\n        (entry, callback) = self._info[info_key]\n        entry['state'] = 'normal'\n        entry['relief'] = 'sunken'\n        entry.focus()\n\n    def _info_save(self, e=None):\n        focus = self._table\n        for entry, callback in self._info.values():\n            if entry['state'] == 'disabled':\n                continue\n            if e is not None and e.widget is entry and e.keysym != 'Return':\n                focus = entry\n            else:\n                entry['state'] = 'disabled'\n                entry['relief'] = 'groove'\n                callback(entry.get())\n        focus.focus()\n\n    def _table_reprfunc(self, row, col, val):\n        if self._table.column_names[col].endswith('Size'):\n            if isinstance(val, string_types):\n                return '  %s' % val\n            elif val < 1024 ** 2:\n                return '  %.1f KB' % (val / 1024.0 ** 1)\n            elif val < 1024 ** 3:\n                return '  %.1f MB' % (val / 1024.0 ** 2)\n            else:\n                return '  %.1f GB' % (val / 1024.0 ** 3)\n\n        if col in (0, ''):\n            return str(val)\n        else:\n            return '  %s' % val\n\n    def _set_url(self, url):\n        if url == self._ds.url:\n            return\n        try:\n            self._ds.url = url\n            self._fill_table()\n        except IOError as e:\n            showerror('Error Setting Server Index', str(e))\n        self._show_info()\n\n    def _set_download_dir(self, download_dir):\n        if self._ds.download_dir == download_dir:\n            return\n        # check if the dir exists, and if not, ask if we should create it?\n\n        # Clear our status cache, & re-check what's installed\n        self._ds.download_dir = download_dir\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._show_info()\n\n    def _show_info(self):\n        print('showing info', self._ds.url)\n        for entry, cb in self._info.values():\n            entry['state'] = 'normal'\n            entry.delete(0, 'end')\n        self._info['url'][0].insert(0, self._ds.url)\n        self._info['download_dir'][0].insert(0, self._ds.download_dir)\n        for entry, cb in self._info.values():\n            entry['state'] = 'disabled'\n\n    def _prev_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i > 0:\n                self._tab = self._tab_names[i - 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _next_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i < (len(self._tabs) - 1):\n                self._tab = self._tab_names[i + 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _select_tab(self, event):\n        self._tab = event.widget['text'].lower()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n    _tab = 'collections'\n    # _tab = 'corpora'\n    _rows = None\n\n    def _fill_table(self):\n        selected_row = self._table.selected_row()\n        self._table.clear()\n        if self._tab == 'all packages':\n            items = self._ds.packages()\n        elif self._tab == 'corpora':\n            items = self._ds.corpora()\n        elif self._tab == 'models':\n            items = self._ds.models()\n        elif self._tab == 'collections':\n            items = self._ds.collections()\n        else:\n            assert 0, 'bad tab value %r' % self._tab\n        rows = [self._package_to_columns(item) for item in items]\n        self._table.extend(rows)\n\n        # Highlight the active tab.\n        for tab, label in self._tabs.items():\n            if tab == self._tab:\n                label.configure(\n                    foreground=self._FRONT_TAB_COLOR[0],\n                    background=self._FRONT_TAB_COLOR[1],\n                )\n            else:\n                label.configure(\n                    foreground=self._BACK_TAB_COLOR[0],\n                    background=self._BACK_TAB_COLOR[1],\n                )\n\n        self._table.sort_by('Identifier', order='ascending')\n        self._color_table()\n        self._table.select(selected_row)\n\n        # This is a hack, because the scrollbar isn't updating its\n        # position right -- I'm not sure what the underlying cause is\n        # though.  (This is on OS X w/ python 2.5)  The length of\n        # delay that's necessary seems to depend on how fast the\n        # comptuer is. :-/\n        self.top.after(150, self._table._scrollbar.set, *self._table._mlb.yview())\n        self.top.after(300, self._table._scrollbar.set, *self._table._mlb.yview())\n\n    def _update_table_status(self):\n        for row_num in range(len(self._table)):\n            status = self._ds.status(self._table[row_num, 'Identifier'])\n            self._table[row_num, 'Status'] = status\n        self._color_table()\n\n    def _download(self, *e):\n        # If we're using threads, then delegate to the threaded\n        # downloader instead.\n        if self._use_threads:\n            return self._download_threaded(*e)\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        download_iter = self._ds.incr_download(marked, self._ds.download_dir)\n        self._log_indent = 0\n        self._download_cb(download_iter, marked)\n\n    _DL_DELAY = 10\n\n    def _download_cb(self, download_iter, ids):\n        try:\n            msg = next(download_iter)\n        except StopIteration:\n            # self._fill_table(sort=False)\n            self._update_table_status()\n            afterid = self.top.after(10, self._show_progress, 0)\n            self._afterid['_download_cb'] = afterid\n            return\n\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        if isinstance(msg, ProgressMessage):\n            self._show_progress(msg.progress)\n        elif isinstance(msg, ErrorMessage):\n            show(msg.message)\n            if msg.package is not None:\n                self._select(msg.package.id)\n            self._show_progress(None)\n            return  # halt progress.\n        elif isinstance(msg, StartCollectionMessage):\n            show('Downloading collection %s' % msg.collection.id)\n            self._log_indent += 1\n        elif isinstance(msg, StartPackageMessage):\n            show('Downloading package %s' % msg.package.id)\n        elif isinstance(msg, UpToDateMessage):\n            show('Package %s is up-to-date!' % msg.package.id)\n        # elif isinstance(msg, StaleMessage):\n        #    show('Package %s is out-of-date or corrupt' % msg.package.id)\n        elif isinstance(msg, FinishDownloadMessage):\n            show('Finished downloading %r.' % msg.package.id)\n        elif isinstance(msg, StartUnzipMessage):\n            show('Unzipping %s' % msg.package.filename)\n        elif isinstance(msg, FinishCollectionMessage):\n            self._log_indent -= 1\n            show('Finished downloading collection %r.' % msg.collection.id)\n            self._clear_mark(msg.collection.id)\n        elif isinstance(msg, FinishPackageMessage):\n            self._clear_mark(msg.package.id)\n        afterid = self.top.after(self._DL_DELAY, self._download_cb, download_iter, ids)\n        self._afterid['_download_cb'] = afterid\n\n    def _select(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table.select(row)\n                return\n\n    def _color_table(self):\n        # Color rows according to status.\n        for row in range(len(self._table)):\n            bg, sbg = self._ROW_COLOR[self._table[row, 'Status']]\n            fg, sfg = ('black', 'white')\n            self._table.rowconfig(\n                row,\n                foreground=fg,\n                selectforeground=sfg,\n                background=bg,\n                selectbackground=sbg,\n            )\n            # Color the marked column\n            self._table.itemconfigure(\n                row, 0, foreground=self._MARK_COLOR[0], background=self._MARK_COLOR[1]\n            )\n\n    def _clear_mark(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table[row, 0] = ''\n\n    def _mark_all(self, *e):\n        for row in range(len(self._table)):\n            self._table[row, 0] = 'X'\n\n    def _table_mark(self, *e):\n        selection = self._table.selected_row()\n        if selection >= 0:\n            if self._table[selection][0] != '':\n                self._table[selection, 0] = ''\n            else:\n                self._table[selection, 0] = 'X'\n        self._table.select(delta=1)\n\n    def _show_log(self):\n        text = '\\n'.join(self._log_messages)\n        ShowText(self.top, 'NLTK Downloader Log', text)\n\n    def _package_to_columns(self, pkg):\n        \"\"\"\n        Given a package, return a list of values describing that\n        package, one for each column in ``self.COLUMNS``.\n        \"\"\"\n        row = []\n        for column_index, column_name in enumerate(self.COLUMNS):\n            if column_index == 0:  # Mark:\n                row.append('')\n            elif column_name == 'Identifier':\n                row.append(pkg.id)\n            elif column_name == 'Status':\n                row.append(self._ds.status(pkg))\n            else:\n                attr = column_name.lower().replace(' ', '_')\n                row.append(getattr(pkg, attr, 'n/a'))\n        return row\n\n    # /////////////////////////////////////////////////////////////////\n    # External Interface\n    # /////////////////////////////////////////////////////////////////\n\n    def destroy(self, *e):\n        if self._destroyed:\n            return\n        self.top.destroy()\n        self._destroyed = True\n\n    def _destroy(self, *e):\n        if self.top is not None:\n            for afterid in self._afterid.values():\n                self.top.after_cancel(afterid)\n\n        # Abort any download in progress.\n        if self._downloading and self._use_threads:\n            self._abort_download()\n\n        # Make sure the garbage collector destroys these now;\n        # otherwise, they may get destroyed when we're not in the main\n        # thread, which would make Tkinter unhappy.\n        self._column_vars.clear()\n\n    def mainloop(self, *args, **kwargs):\n        self.top.mainloop(*args, **kwargs)\n\n    # /////////////////////////////////////////////////////////////////\n    # HELP\n    # /////////////////////////////////////////////////////////////////\n\n    HELP = textwrap.dedent(\n        \"\"\"\\\n    This tool can be used to download a variety of corpora and models\n    that can be used with NLTK.  Each corpus or model is distributed\n    in a single zip file, known as a \\\"package file.\\\"  You can\n    download packages individually, or you can download pre-defined\n    collections of packages.\n\n    When you download a package, it will be saved to the \\\"download\n    directory.\\\"  A default download directory is chosen when you run\n\n    the downloader; but you may also select a different download\n    directory.  On Windows, the default download directory is\n\n\n    \\\"package.\\\"\n\n    The NLTK downloader can be used to download a variety of corpora,\n    models, and other data packages.\n\n    Keyboard shortcuts::\n      [return]\\t Download\n      [up]\\t Select previous package\n      [down]\\t Select next package\n      [left]\\t Select previous tab\n      [right]\\t Select next tab\n    \"\"\"\n    )\n\n    def help(self, *e):\n        # The default font's not very legible; try using 'fixed' instead.\n        try:\n            ShowText(\n                self.top,\n                'Help: NLTK Dowloader',\n                self.HELP.strip(),\n                width=75,\n                font='fixed',\n            )\n        except:\n            ShowText(self.top, 'Help: NLTK Downloader', self.HELP.strip(), width=75)\n\n    def about(self, *e):\n        ABOUT = \"NLTK Downloader\\n\" + \"Written by Edward Loper\"\n        TITLE = 'About: NLTK Downloader'\n        try:\n            from six.moves.tkinter_messagebox import Message\n\n            Message(message=ABOUT, title=TITLE).show()\n        except ImportError:\n            ShowText(self.top, TITLE, ABOUT)\n\n    # /////////////////////////////////////////////////////////////////\n    # Progress Bar\n    # /////////////////////////////////////////////////////////////////\n\n    _gradient_width = 5\n\n    def _init_progressbar(self):\n        c = self._progressbar\n        width, height = int(c['width']), int(c['height'])\n        for i in range(0, (int(c['width']) * 2) // self._gradient_width):\n            c.create_line(\n                i * self._gradient_width + 20,\n                -20,\n                i * self._gradient_width - height - 20,\n                height + 20,\n                width=self._gradient_width,\n                fill='#%02x0000' % (80 + abs(i % 6 - 3) * 12),\n            )\n        c.addtag_all('gradient')\n        c.itemconfig('gradient', state='hidden')\n\n        # This is used to display progress\n        c.addtag_withtag(\n            'redbox', c.create_rectangle(0, 0, 0, 0, fill=self._PROGRESS_COLOR[0])\n        )\n\n    def _show_progress(self, percent):\n        c = self._progressbar\n        if percent is None:\n            c.coords('redbox', 0, 0, 0, 0)\n            c.itemconfig('gradient', state='hidden')\n        else:\n            width, height = int(c['width']), int(c['height'])\n            x = percent * int(width) // 100 + 1\n            c.coords('redbox', 0, 0, x, height + 1)\n\n    def _progress_alive(self):\n        c = self._progressbar\n        if not self._downloading:\n            c.itemconfig('gradient', state='hidden')\n        else:\n            c.itemconfig('gradient', state='normal')\n            x1, y1, x2, y2 = c.bbox('gradient')\n            if x1 <= -100:\n                c.move('gradient', (self._gradient_width * 6) - 4, 0)\n            else:\n                c.move('gradient', -4, 0)\n            afterid = self.top.after(200, self._progress_alive)\n            self._afterid['_progress_alive'] = afterid\n\n    # /////////////////////////////////////////////////////////////////\n    # Threaded downloader\n    # /////////////////////////////////////////////////////////////////\n\n    def _download_threaded(self, *e):\n        # If the user tries to start a new download while we're already\n        # downloading something, then abort the current download instead.\n        if self._downloading:\n            self._abort_download()\n            return\n\n        # Change the 'download' button to an 'abort' button.\n        self._download_button['text'] = 'Cancel'\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        # Create a new data server object for the download operation,\n        # just in case the user modifies our data server during the\n        # download (e.g., clicking 'refresh' or editing the index url).\n        ds = Downloader(self._ds.url, self._ds.download_dir)\n\n        # Start downloading in a separate thread.\n        assert self._download_msg_queue == []\n        assert self._download_abort_queue == []\n        self._DownloadThread(\n            ds,\n            marked,\n            self._download_lock,\n            self._download_msg_queue,\n            self._download_abort_queue,\n        ).start()\n\n        # Monitor the download message queue & display its progress.\n        self._log_indent = 0\n        self._downloading = True\n        self._monitor_message_queue()\n\n        # Display an indication that we're still alive and well by\n        # cycling the progress bar.\n        self._progress_alive()\n\n    def _abort_download(self):\n        if self._downloading:\n            self._download_lock.acquire()\n            self._download_abort_queue.append('abort')\n            self._download_lock.release()\n\n    class _DownloadThread(threading.Thread):\n        def __init__(self, data_server, items, lock, message_queue, abort):\n            self.data_server = data_server\n            self.items = items\n            self.lock = lock\n            self.message_queue = message_queue\n            self.abort = abort\n            threading.Thread.__init__(self)\n\n        def run(self):\n            for msg in self.data_server.incr_download(self.items):\n                self.lock.acquire()\n                self.message_queue.append(msg)\n                # Check if we've been told to kill ourselves:\n                if self.abort:\n                    self.message_queue.append('aborted')\n                    self.lock.release()\n                    return\n                self.lock.release()\n            self.lock.acquire()\n            self.message_queue.append('finished')\n            self.lock.release()\n\n    _MONITOR_QUEUE_DELAY = 100\n\n    def _monitor_message_queue(self):\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        # Try to acquire the lock; if it's busy, then just try again later.\n        if not self._download_lock.acquire():\n            return\n        for msg in self._download_msg_queue:\n\n            # Done downloading?\n            if msg == 'finished' or msg == 'aborted':\n                # self._fill_table(sort=False)\n                self._update_table_status()\n                self._downloading = False\n                self._download_button['text'] = 'Download'\n                del self._download_msg_queue[:]\n                del self._download_abort_queue[:]\n                self._download_lock.release()\n                if msg == 'aborted':\n                    show('Download aborted!')\n                    self._show_progress(None)\n                else:\n                    afterid = self.top.after(100, self._show_progress, None)\n                    self._afterid['_monitor_message_queue'] = afterid\n                return\n\n            # All other messages\n            elif isinstance(msg, ProgressMessage):\n                self._show_progress(msg.progress)\n            elif isinstance(msg, ErrorMessage):\n                show(msg.message)\n                if msg.package is not None:\n                    self._select(msg.package.id)\n                self._show_progress(None)\n                self._downloading = False\n                return  # halt progress.\n            elif isinstance(msg, StartCollectionMessage):\n                show('Downloading collection %r' % msg.collection.id)\n                self._log_indent += 1\n            elif isinstance(msg, StartPackageMessage):\n                self._ds.clear_status_cache(msg.package.id)\n                show('Downloading package %r' % msg.package.id)\n            elif isinstance(msg, UpToDateMessage):\n                show('Package %s is up-to-date!' % msg.package.id)\n            # elif isinstance(msg, StaleMessage):\n            #    show('Package %s is out-of-date or corrupt; updating it' %\n            #         msg.package.id)\n            elif isinstance(msg, FinishDownloadMessage):\n                show('Finished downloading %r.' % msg.package.id)\n            elif isinstance(msg, StartUnzipMessage):\n                show('Unzipping %s' % msg.package.filename)\n            elif isinstance(msg, FinishUnzipMessage):\n                show('Finished installing %s' % msg.package.id)\n            elif isinstance(msg, FinishCollectionMessage):\n                self._log_indent -= 1\n                show('Finished downloading collection %r.' % msg.collection.id)\n                self._clear_mark(msg.collection.id)\n            elif isinstance(msg, FinishPackageMessage):\n                self._update_table_status()\n                self._clear_mark(msg.package.id)\n\n        # Let the user know when we're aborting a download (but\n        # waiting for a good point to abort it, so we don't end up\n        # with a partially unzipped package or anything like that).\n        if self._download_abort_queue:\n            self._progresslabel['text'] = 'Aborting download...'\n\n        # Clear the message queue and then release the lock\n        del self._download_msg_queue[:]\n        self._download_lock.release()\n\n        # Check the queue again after MONITOR_QUEUE_DELAY msec.\n        afterid = self.top.after(self._MONITOR_QUEUE_DELAY, self._monitor_message_queue)\n        self._afterid['_monitor_message_queue'] = afterid", "target": 0}, {"function": "def md5_hexdigest(file):\n    \"\"\"\n    Calculate and return the MD5 checksum for a given file.\n    ``file`` may either be a filename or an open stream.\n    \"\"\"\n    if isinstance(file, string_types):\n        with open(file, 'rb') as infile:\n            return _md5_hexdigest(infile)\n    return _md5_hexdigest(file)", "target": 0}, {"function": "def _md5_hexdigest(fp):\n    md5_digest = md5()\n    while True:\n        block = fp.read(1024 * 16)  # 16k blocks\n        if not block:\n            break\n        md5_digest.update(block)\n    return md5_digest.hexdigest()", "target": 0}, {"function": "def unzip(filename, root, verbose=True):\n    \"\"\"\n    Extract the contents of the zip file ``filename`` into the\n    directory ``root``.\n    \"\"\"\n    for message in _unzip_iter(filename, root, verbose):\n        if isinstance(message, ErrorMessage):\n            raise Exception(message)", "target": 0}, {"function": "def _unzip_iter(filename, root, verbose=True):\n    if verbose:\n        sys.stdout.write('Unzipping %s' % os.path.split(filename)[1])\n        sys.stdout.flush()\n\n    try:\n        zf = zipfile.ZipFile(filename)\n    except zipfile.error as e:\n        yield ErrorMessage(filename, 'Error with downloaded zip file')\n        return\n    except Exception as e:\n        yield ErrorMessage(filename, e)\n        return\n\n    # Get lists of directories & files\n    namelist = zf.namelist()\n    dirlist = set()\n    for x in namelist:\n        if x.endswith('/'):\n            dirlist.add(x)\n        else:\n            dirlist.add(x.rsplit('/', 1)[0] + '/')\n    filelist = [x for x in namelist if not x.endswith('/')]\n\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(root):\n        os.mkdir(root)\n\n    # Create the directory structure\n    for dirname in sorted(dirlist):\n        pieces = dirname[:-1].split('/')\n        for i in range(len(pieces)):\n            dirpath = os.path.join(root, *pieces[: i + 1])\n            if not os.path.exists(dirpath):\n                os.mkdir(dirpath)\n\n    # Extract files.\n    for i, filename in enumerate(filelist):\n        filepath = os.path.join(root, *filename.split('/'))\n\n        try:\n            with open(filepath, 'wb') as dstfile, zf.open(filename) as srcfile:\n                shutil.copyfileobj(srcfile, dstfile)\n        except Exception as e:\n            yield ErrorMessage(filename, e)\n            return\n\n        if verbose and (i * 10 / len(filelist) > (i - 1) * 10 / len(filelist)):\n            sys.stdout.write('.')\n            sys.stdout.flush()\n    if verbose:\n        print()", "target": 0}, {"function": "def build_index(root, base_url):\n    \"\"\"\n    Create a new data.xml index file, by combining the xml description\n    files for various packages and collections.  ``root`` should be the\n    path to a directory containing the package xml and zip files; and\n    the collection xml files.  The ``root`` directory is expected to\n    have the following subdirectories::\n\n      root/\n        packages/ .................. subdirectory for packages\n          corpora/ ................. zip & xml files for corpora\n          grammars/ ................ zip & xml files for grammars\n          taggers/ ................. zip & xml files for taggers\n          tokenizers/ .............. zip & xml files for tokenizers\n          etc.\n        collections/ ............... xml files for collections\n\n    For each package, there should be two files: ``package.zip``\n    (where *package* is the package name)\n    which contains the package itself as a compressed zip file; and\n    ``package.xml``, which is an xml description of the package.  The\n    zipfile ``package.zip`` should expand to a single subdirectory\n    named ``package/``.  The base filename ``package`` must match\n    the identifier given in the package's xml file.\n\n    For each collection, there should be a single file ``collection.zip``\n    describing the collection, where *collection* is the name of the collection.\n\n    All identifiers (for both packages and collections) must be unique.\n    \"\"\"\n    # Find all packages.\n    packages = []\n    for pkg_xml, zf, subdir in _find_packages(os.path.join(root, 'packages')):\n        zipstat = os.stat(zf.filename)\n        url = '%s/%s/%s' % (base_url, subdir, os.path.split(zf.filename)[1])\n        unzipped_size = sum(zf_info.file_size for zf_info in zf.infolist())\n\n        # Fill in several fields of the package xml with calculated values.\n        pkg_xml.set('unzipped_size', '%s' % unzipped_size)\n        pkg_xml.set('size', '%s' % zipstat.st_size)\n        pkg_xml.set('checksum', '%s' % md5_hexdigest(zf.filename))\n        pkg_xml.set('subdir', subdir)\n        # pkg_xml.set('svn_revision', _svn_revision(zf.filename))\n        if not pkg_xml.get('url'):\n            pkg_xml.set('url', url)\n\n        # Record the package.\n        packages.append(pkg_xml)\n\n    # Find all collections\n    collections = list(_find_collections(os.path.join(root, 'collections')))\n\n    # Check that all UIDs are unique\n    uids = set()\n    for item in packages + collections:\n        if item.get('id') in uids:\n            raise ValueError('Duplicate UID: %s' % item.get('id'))\n        uids.add(item.get('id'))\n\n    # Put it all together\n    top_elt = ElementTree.Element('nltk_data')\n    top_elt.append(ElementTree.Element('packages'))\n    for package in packages:\n        top_elt[0].append(package)\n    top_elt.append(ElementTree.Element('collections'))\n    for collection in collections:\n        top_elt[1].append(collection)\n\n    _indent_xml(top_elt)\n    return top_elt", "target": 0}, {"function": "def _indent_xml(xml, prefix=''):\n    \"\"\"\n    Helper for ``build_index()``: Given an XML ``ElementTree``, modify it\n    (and its descendents) ``text`` and ``tail`` attributes to generate\n    an indented tree, where each nested element is indented by 2\n    spaces with respect to its parent.\n    \"\"\"\n    if len(xml) > 0:\n        xml.text = (xml.text or '').strip() + '\\n' + prefix + '  '\n        for child in xml:\n            _indent_xml(child, prefix + '  ')\n        for child in xml[:-1]:\n            child.tail = (child.tail or '').strip() + '\\n' + prefix + '  '\n        xml[-1].tail = (xml[-1].tail or '').strip() + '\\n' + prefix", "target": 0}, {"function": "def _check_package(pkg_xml, zipfilename, zf):\n    \"\"\"\n    Helper for ``build_index()``: Perform some checks to make sure that\n    the given package is consistent.\n    \"\"\"\n    # The filename must patch the id given in the XML file.\n    uid = os.path.splitext(os.path.split(zipfilename)[1])[0]\n    if pkg_xml.get('id') != uid:\n        raise ValueError(\n            'package identifier mismatch (%s vs %s)' % (pkg_xml.get('id'), uid)\n        )\n\n    # Zip file must expand to a subdir whose name matches uid.\n    if sum((name != uid and not name.startswith(uid + '/')) for name in zf.namelist()):\n        raise ValueError(\n            'Zipfile %s.zip does not expand to a single '\n            'subdirectory %s/' % (uid, uid)\n        )", "target": 0}, {"function": "def _svn_revision(filename):\n    \"\"\"\n    Helper for ``build_index()``: Calculate the subversion revision\n    number for a given file (by using ``subprocess`` to run ``svn``).\n    \"\"\"\n    p = subprocess.Popen(\n        ['svn', 'status', '-v', filename],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n    )\n    (stdout, stderr) = p.communicate()\n    if p.returncode != 0 or stderr or not stdout:\n        raise ValueError(\n            'Error determining svn_revision for %s: %s'\n            % (os.path.split(filename)[1], textwrap.fill(stderr))\n        )\n    return stdout.split()[2]", "target": 0}, {"function": "def _find_collections(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of ElementTree.Element\n    objects, each holding the xml for a single package collection.\n    \"\"\"\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfile = os.path.join(dirname, filename)\n                yield ElementTree.parse(xmlfile).getroot()", "target": 0}, {"function": "def _find_packages(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of tuples\n    ``(pkg_xml, zf, subdir)``, where:\n      - ``pkg_xml`` is an ``ElementTree.Element`` holding the xml for a\n        package\n      - ``zf`` is a ``zipfile.ZipFile`` for the package's contents.\n      - ``subdir`` is the subdirectory (relative to ``root``) where\n        the package was found (e.g. 'corpora' or 'grammars').\n    \"\"\"\n    from nltk.corpus.reader.util import _path_from\n\n    # Find all packages.\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        relpath = '/'.join(_path_from(root, dirname))\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfilename = os.path.join(dirname, filename)\n                zipfilename = xmlfilename[:-4] + '.zip'\n                try:\n                    zf = zipfile.ZipFile(zipfilename)\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (zipfilename, e))\n                try:\n                    pkg_xml = ElementTree.parse(xmlfilename).getroot()\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (xmlfilename, e))\n\n                # Check that the UID matches the filename\n                uid = os.path.split(xmlfilename[:-4])[1]\n                if pkg_xml.get('id') != uid:\n                    raise ValueError(\n                        'package identifier mismatch (%s '\n                        'vs %s)' % (pkg_xml.get('id'), uid)\n                    )\n\n                # Check that the zipfile expands to a subdir whose\n                # name matches the uid.\n                if sum(\n                    (name != uid and not name.startswith(uid + '/'))\n                    for name in zf.namelist()\n                ):\n                    raise ValueError(\n                        'Zipfile %s.zip does not expand to a '\n                        'single subdirectory %s/' % (uid, uid)\n                    )\n\n                yield pkg_xml, zf, relpath\n        # Don't recurse into svn subdirectories:\n        try:\n            subdirs.remove('.svn')\n        except ValueError:\n            pass", "target": 0}, {"function": "def download_shell():\n    DownloaderShell(_downloader).run()", "target": 0}, {"function": "def download_gui():\n    DownloaderGUI(_downloader).mainloop()", "target": 0}, {"function": "def update():\n    _downloader.update()", "target": 0}], "function_after": [{"function": "class DownloaderMessage(object):\n    \"\"\"A status message object, used by ``incr_download`` to\n       communicate its progress.\"\"\"", "target": 0}, {"function": "class StartCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection", "target": 0}, {"function": "class FinishCollectionMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a collection of packages.\"\"\"\n\n    def __init__(self, collection):\n        self.collection = collection", "target": 0}, {"function": "class StartPackageMessage(DownloaderMessage):\n    \"\"\"Data server has started working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class FinishPackageMessage(DownloaderMessage):\n    \"\"\"Data server has finished working on a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class StartDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has started downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class FinishDownloadMessage(DownloaderMessage):\n    \"\"\"Data server has finished downloading a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class StartUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has started unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class FinishUnzipMessage(DownloaderMessage):\n    \"\"\"Data server has finished unzipping a package.\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class UpToDateMessage(DownloaderMessage):\n    \"\"\"The package download file is already up-to-date\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class StaleMessage(DownloaderMessage):\n    \"\"\"The package download file is out-of-date or corrupt\"\"\"\n\n    def __init__(self, package):\n        self.package = package", "target": 0}, {"function": "class ErrorMessage(DownloaderMessage):\n    \"\"\"Data server encountered an error\"\"\"\n\n    def __init__(self, package, message):\n        self.package = package\n        if isinstance(message, Exception):\n            self.message = str(message)\n        else:\n            self.message = message", "target": 0}, {"function": "class ProgressMessage(DownloaderMessage):\n    \"\"\"Indicates how much progress the data server has made\"\"\"\n\n    def __init__(self, progress):\n        self.progress = progress", "target": 0}, {"function": "class SelectDownloadDirMessage(DownloaderMessage):\n    \"\"\"Indicates what download directory the data server is using\"\"\"\n\n    def __init__(self, download_dir):\n        self.download_dir = download_dir", "target": 0}, {"function": "class Downloader(object):\n    \"\"\"\n    A class used to access the NLTK data server, which can be used to\n    download corpora and other data packages.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    INDEX_TIMEOUT = 60 * 60  # 1 hour\n    \"\"\"The amount of time after which the cached copy of the data\n       server index will be considered 'stale,' and will be\n       re-downloaded.\"\"\"\n\n    DEFAULT_URL = 'https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml'\n    \"\"\"The default URL for the NLTK data server's index.  An\n       alternative URL can be specified when creating a new\n       ``Downloader`` object.\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Status Constants\n    # /////////////////////////////////////////////////////////////////\n\n    INSTALLED = 'installed'\n    \"\"\"A status string indicating that a package or collection is\n       installed and up-to-date.\"\"\"\n    NOT_INSTALLED = 'not installed'\n    \"\"\"A status string indicating that a package or collection is\n       not installed.\"\"\"\n    STALE = 'out of date'\n    \"\"\"A status string indicating that a package or collection is\n       corrupt or out-of-date.\"\"\"\n    PARTIAL = 'partial'\n    \"\"\"A status string indicating that a collection is partially\n       installed (i.e., only some of its packages are installed.)\"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Cosntructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, server_index_url=None, download_dir=None):\n        self._url = server_index_url or self.DEFAULT_URL\n        \"\"\"The URL for the data server's index file.\"\"\"\n\n        self._collections = {}\n        \"\"\"Dictionary from collection identifier to ``Collection``\"\"\"\n\n        self._packages = {}\n        \"\"\"Dictionary from package identifier to ``Package``\"\"\"\n\n        self._download_dir = download_dir\n        \"\"\"The default directory to which packages will be downloaded.\"\"\"\n\n        self._index = None\n        \"\"\"The XML index file downloaded from the data server\"\"\"\n\n        self._index_timestamp = None\n        \"\"\"Time at which ``self._index`` was downloaded.  If it is more\n           than ``INDEX_TIMEOUT`` seconds old, it will be re-downloaded.\"\"\"\n\n        self._status_cache = {}\n        \"\"\"Dictionary from package/collection identifier to status\n           string (``INSTALLED``, ``NOT_INSTALLED``, ``STALE``, or\n           ``PARTIAL``).  Cache is used for packages only, not\n           collections.\"\"\"\n\n        self._errors = None\n        \"\"\"Flag for telling if all packages got successfully downloaded or not.\"\"\"\n\n        # decide where we're going to save things to.\n        if self._download_dir is None:\n            self._download_dir = self.default_download_dir()\n\n    # /////////////////////////////////////////////////////////////////\n    # Information\n    # /////////////////////////////////////////////////////////////////\n\n    def list(\n        self,\n        download_dir=None,\n        show_packages=True,\n        show_collections=True,\n        header=True,\n        more_prompt=False,\n        skip_installed=False,\n    ):\n        lines = 0  # for more_prompt\n        if download_dir is None:\n            download_dir = self._download_dir\n            print('Using default data directory (%s)' % download_dir)\n        if header:\n            print('=' * (26 + len(self._url)))\n            print(' Data server index for <%s>' % self._url)\n            print('=' * (26 + len(self._url)))\n            lines += 3  # for more_prompt\n        stale = partial = False\n\n        categories = []\n        if show_packages:\n            categories.append('packages')\n        if show_collections:\n            categories.append('collections')\n        for category in categories:\n            print('%s:' % category.capitalize())\n            lines += 1  # for more_prompt\n            for info in sorted(getattr(self, category)(), key=str):\n                status = self.status(info, download_dir)\n                if status == self.INSTALLED and skip_installed:\n                    continue\n                if status == self.STALE:\n                    stale = True\n                if status == self.PARTIAL:\n                    partial = True\n                prefix = {\n                    self.INSTALLED: '*',\n                    self.STALE: '-',\n                    self.PARTIAL: 'P',\n                    self.NOT_INSTALLED: ' ',\n                }[status]\n                name = textwrap.fill(\n                    '-' * 27 + (info.name or info.id), 75, subsequent_indent=27 * ' '\n                )[27:]\n                print('  [%s] %s %s' % (prefix, info.id.ljust(20, '.'), name))\n                lines += len(name.split('\\n'))  # for more_prompt\n                if more_prompt and lines > 20:\n                    user_input = input(\"Hit Enter to continue: \")\n                    if user_input.lower() in ('x', 'q'):\n                        return\n                    lines = 0\n            print()\n        msg = '([*] marks installed packages'\n        if stale:\n            msg += '; [-] marks out-of-date or corrupt packages'\n        if partial:\n            msg += '; [P] marks partially installed collections'\n        print(textwrap.fill(msg + ')', subsequent_indent=' ', width=76))\n\n    def packages(self):\n        self._update_index()\n        return self._packages.values()\n\n    def corpora(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir == 'corpora']\n\n    def models(self):\n        self._update_index()\n        return [pkg for (id, pkg) in self._packages.items() if pkg.subdir != 'corpora']\n\n    def collections(self):\n        self._update_index()\n        return self._collections.values()\n\n    # /////////////////////////////////////////////////////////////////\n    # Downloading\n    # /////////////////////////////////////////////////////////////////\n\n    def _info_or_id(self, info_or_id):\n        if isinstance(info_or_id, string_types):\n            return self.info(info_or_id)\n        else:\n            return info_or_id\n\n    # [xx] When during downloading is it 'safe' to abort?  Only unsafe\n    # time is *during* an unzip -- we don't want to leave a\n    # partially-unzipped corpus in place because we wouldn't notice\n    # it.  But if we had the exact total size of the unzipped corpus,\n    # then that would be fine.  Then we could abort anytime we want!\n    # So this is really what we should do.  That way the threaded\n    # downloader in the gui can just kill the download thread anytime\n    # it wants.\n\n    def incr_download(self, info_or_id, download_dir=None, force=False):\n        # If they didn't specify a download_dir, then use the default one.\n        if download_dir is None:\n            download_dir = self._download_dir\n            yield SelectDownloadDirMessage(download_dir)\n\n        # If they gave us a list of ids, then download each one.\n        if isinstance(info_or_id, (list, tuple)):\n            for msg in self._download_list(info_or_id, download_dir, force):\n                yield msg\n            return\n\n        # Look up the requested collection or package.\n        try:\n            info = self._info_or_id(info_or_id)\n        except (IOError, ValueError) as e:\n            yield ErrorMessage(None, 'Error loading %s: %s' % (info_or_id, e))\n            return\n\n        # Handle collections.\n        if isinstance(info, Collection):\n            yield StartCollectionMessage(info)\n            for msg in self.incr_download(info.children, download_dir, force):\n                yield msg\n            yield FinishCollectionMessage(info)\n\n        # Handle Packages (delegate to a helper function).\n        else:\n            for msg in self._download_package(info, download_dir, force):\n                yield msg\n\n    def _num_packages(self, item):\n        if isinstance(item, Package):\n            return 1\n        else:\n            return len(item.packages)\n\n    def _download_list(self, items, download_dir, force):\n        # Look up the requested items.\n        for i in range(len(items)):\n            try:\n                items[i] = self._info_or_id(items[i])\n            except (IOError, ValueError) as e:\n                yield ErrorMessage(items[i], e)\n                return\n\n        # Download each item, re-scaling their progress.\n        num_packages = sum(self._num_packages(item) for item in items)\n        progress = 0\n        for i, item in enumerate(items):\n            if isinstance(item, Package):\n                delta = 1.0 / num_packages\n            else:\n                delta = len(item.packages) / num_packages\n            for msg in self.incr_download(item, download_dir, force):\n                if isinstance(msg, ProgressMessage):\n                    yield ProgressMessage(progress + msg.progress * delta)\n                else:\n                    yield msg\n\n            progress += 100 * delta\n\n    def _download_package(self, info, download_dir, force):\n        yield StartPackageMessage(info)\n        yield ProgressMessage(0)\n\n        # Do we already have the current version?\n        status = self.status(info, download_dir)\n        if not force and status == self.INSTALLED:\n            yield UpToDateMessage(info)\n            yield ProgressMessage(100)\n            yield FinishPackageMessage(info)\n            return\n\n        # Remove the package from our status cache\n        self._status_cache.pop(info.id, None)\n\n        # Check for (and remove) any old/stale version.\n        filepath = os.path.join(download_dir, info.filename)\n        if os.path.exists(filepath):\n            if status == self.STALE:\n                yield StaleMessage(info)\n            os.remove(filepath)\n\n        # Ensure the download_dir exists\n        if not os.path.exists(download_dir):\n            os.mkdir(download_dir)\n        if not os.path.exists(os.path.join(download_dir, info.subdir)):\n            os.mkdir(os.path.join(download_dir, info.subdir))\n\n        # Download the file.  This will raise an IOError if the url\n        # is not found.\n        yield StartDownloadMessage(info)\n        yield ProgressMessage(5)\n        try:\n            infile = urlopen(info.url)\n            with open(filepath, 'wb') as outfile:\n                # print info.size\n                num_blocks = max(1, info.size / (1024 * 16))\n                for block in itertools.count():\n                    s = infile.read(1024 * 16)  # 16k blocks.\n                    outfile.write(s)\n                    if not s:\n                        break\n                    if block % 2 == 0:  # how often?\n                        yield ProgressMessage(min(80, 5 + 75 * (block / num_blocks)))\n            infile.close()\n        except IOError as e:\n            yield ErrorMessage(\n                info,\n                'Error downloading %r from <%s>:' '\\n  %s' % (info.id, info.url, e),\n            )\n            return\n        yield FinishDownloadMessage(info)\n        yield ProgressMessage(80)\n\n        # If it's a zipfile, uncompress it.\n        if info.filename.endswith('.zip'):\n            zipdir = os.path.join(download_dir, info.subdir)\n            # Unzip if we're unzipping by default; *or* if it's already\n            # been unzipped (presumably a previous version).\n            if info.unzip or os.path.exists(os.path.join(zipdir, info.id)):\n                yield StartUnzipMessage(info)\n                for msg in _unzip_iter(filepath, zipdir, verbose=False):\n                    # Somewhat of a hack, but we need a proper package reference\n                    msg.package = info\n                    yield msg\n                yield FinishUnzipMessage(info)\n\n        yield FinishPackageMessage(info)\n\n    def download(\n        self,\n        info_or_id=None,\n        download_dir=None,\n        quiet=False,\n        force=False,\n        prefix='[nltk_data] ',\n        halt_on_error=True,\n        raise_on_error=False,\n        print_error_to=sys.stderr,\n    ):\n\n        print_to = functools.partial(print, file=print_error_to)\n        # If no info or id is given, then use the interactive shell.\n        if info_or_id is None:\n            # [xx] hmm -- changing self._download_dir here seems like\n            # the wrong thing to do.  Maybe the _interactive_download\n            # function should make a new copy of self to use?\n            if download_dir is not None:\n                self._download_dir = download_dir\n            self._interactive_download()\n            return True\n\n        else:\n            # Define a helper function for displaying output:\n            def show(s, prefix2=''):\n                print_to(\n                    textwrap.fill(\n                        s,\n                        initial_indent=prefix + prefix2,\n                        subsequent_indent=prefix + prefix2 + ' ' * 4,\n                    )\n                )\n\n            for msg in self.incr_download(info_or_id, download_dir, force):\n                # Error messages\n                if isinstance(msg, ErrorMessage):\n                    show(msg.message)\n                    if raise_on_error:\n                        raise ValueError(msg.message)\n                    if halt_on_error:\n                        return False\n                    self._errors = True\n                    if not quiet:\n                        print_to(\"Error installing package. Retry? [n/y/e]\")\n                        choice = input().strip()\n                        if choice in ['y', 'Y']:\n                            if not self.download(\n                                msg.package.id,\n                                download_dir,\n                                quiet,\n                                force,\n                                prefix,\n                                halt_on_error,\n                                raise_on_error,\n                            ):\n                                return False\n                        elif choice in ['e', 'E']:\n                            return False\n\n                # All other messages\n                if not quiet:\n                    # Collection downloading messages:\n                    if isinstance(msg, StartCollectionMessage):\n                        show('Downloading collection %r' % msg.collection.id)\n                        prefix += '   | '\n                        print_to(prefix)\n                    elif isinstance(msg, FinishCollectionMessage):\n                        print_to(prefix)\n                        prefix = prefix[:-4]\n                        if self._errors:\n                            show(\n                                'Downloaded collection %r with errors'\n                                % msg.collection.id\n                            )\n                        else:\n                            show('Done downloading collection %s' % msg.collection.id)\n\n                    # Package downloading messages:\n                    elif isinstance(msg, StartPackageMessage):\n                        show(\n                            'Downloading package %s to %s...'\n                            % (msg.package.id, download_dir)\n                        )\n                    elif isinstance(msg, UpToDateMessage):\n                        show('Package %s is already up-to-date!' % msg.package.id, '  ')\n                    # elif isinstance(msg, StaleMessage):\n                    #    show('Package %s is out-of-date or corrupt' %\n                    #         msg.package.id, '  ')\n                    elif isinstance(msg, StartUnzipMessage):\n                        show('Unzipping %s.' % msg.package.filename, '  ')\n\n                    # Data directory message:\n                    elif isinstance(msg, SelectDownloadDirMessage):\n                        download_dir = msg.download_dir\n        return True\n\n    def is_stale(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.STALE\n\n    def is_installed(self, info_or_id, download_dir=None):\n        return self.status(info_or_id, download_dir) == self.INSTALLED\n\n    def clear_status_cache(self, id=None):\n        if id is None:\n            self._status_cache.clear()\n        else:\n            self._status_cache.pop(id, None)\n\n    def status(self, info_or_id, download_dir=None):\n        \"\"\"\n        Return a constant describing the status of the given package\n        or collection.  Status can be one of ``INSTALLED``,\n        ``NOT_INSTALLED``, ``STALE``, or ``PARTIAL``.\n        \"\"\"\n        if download_dir is None:\n            download_dir = self._download_dir\n        info = self._info_or_id(info_or_id)\n\n        # Handle collections:\n        if isinstance(info, Collection):\n            pkg_status = [self.status(pkg.id) for pkg in info.packages]\n            if self.STALE in pkg_status:\n                return self.STALE\n            elif self.PARTIAL in pkg_status:\n                return self.PARTIAL\n            elif self.INSTALLED in pkg_status and self.NOT_INSTALLED in pkg_status:\n                return self.PARTIAL\n            elif self.NOT_INSTALLED in pkg_status:\n                return self.NOT_INSTALLED\n            else:\n                return self.INSTALLED\n\n        # Handle packages:\n        else:\n            filepath = os.path.join(download_dir, info.filename)\n            if download_dir != self._download_dir:\n                return self._pkg_status(info, filepath)\n            else:\n                if info.id not in self._status_cache:\n                    self._status_cache[info.id] = self._pkg_status(info, filepath)\n                return self._status_cache[info.id]\n\n    def _pkg_status(self, info, filepath):\n        if not os.path.exists(filepath):\n            return self.NOT_INSTALLED\n\n        # Check if the file has the correct size.\n        try:\n            filestat = os.stat(filepath)\n        except OSError:\n            return self.NOT_INSTALLED\n        if filestat.st_size != int(info.size):\n            return self.STALE\n\n        # Check if the file's checksum matches\n        if md5_hexdigest(filepath) != info.checksum:\n            return self.STALE\n\n        # If it's a zipfile, and it's been at least partially\n        # unzipped, then check if it's been fully unzipped.\n        if filepath.endswith('.zip'):\n            unzipdir = filepath[:-4]\n            if not os.path.exists(unzipdir):\n                return self.INSTALLED  # but not unzipped -- ok!\n            if not os.path.isdir(unzipdir):\n                return self.STALE\n\n            unzipped_size = sum(\n                os.stat(os.path.join(d, f)).st_size\n                for d, _, files in os.walk(unzipdir)\n                for f in files\n            )\n            if unzipped_size != info.unzipped_size:\n                return self.STALE\n\n        # Otherwise, everything looks good.\n        return self.INSTALLED\n\n    def update(self, quiet=False, prefix='[nltk_data] '):\n        \"\"\"\n        Re-download any packages whose status is STALE.\n        \"\"\"\n        self.clear_status_cache()\n        for pkg in self.packages():\n            if self.status(pkg) == self.STALE:\n                self.download(pkg, quiet=quiet, prefix=prefix)\n\n    # /////////////////////////////////////////////////////////////////\n    # Index\n    # /////////////////////////////////////////////////////////////////\n\n    def _update_index(self, url=None):\n        \"\"\"A helper function that ensures that self._index is\n        up-to-date.  If the index is older than self.INDEX_TIMEOUT,\n        then download it again.\"\"\"\n        # Check if the index is aleady up-to-date.  If so, do nothing.\n        if not (\n            self._index is None\n            or url is not None\n            or time.time() - self._index_timestamp > self.INDEX_TIMEOUT\n        ):\n            return\n\n        # If a URL was specified, then update our URL.\n        self._url = url or self._url\n\n        # Download the index file.\n        self._index = nltk.internals.ElementWrapper(\n            ElementTree.parse(urlopen(self._url)).getroot()\n        )\n        self._index_timestamp = time.time()\n\n        # Build a dictionary of packages.\n        packages = [Package.fromxml(p) for p in self._index.findall('packages/package')]\n        self._packages = dict((p.id, p) for p in packages)\n\n        # Build a dictionary of collections.\n        collections = [\n            Collection.fromxml(c) for c in self._index.findall('collections/collection')\n        ]\n        self._collections = dict((c.id, c) for c in collections)\n\n        # Replace identifiers with actual children in collection.children.\n        for collection in self._collections.values():\n            for i, child_id in enumerate(collection.children):\n                if child_id in self._packages:\n                    collection.children[i] = self._packages[child_id]\n                elif child_id in self._collections:\n                    collection.children[i] = self._collections[child_id]\n                else:\n                    print(\n                        'removing collection member with no package: {}'.format(\n                            child_id\n                        )\n                    )\n                    del collection.children[i]\n\n        # Fill in collection.packages for each collection.\n        for collection in self._collections.values():\n            packages = {}\n            queue = [collection]\n            for child in queue:\n                if isinstance(child, Collection):\n                    queue.extend(child.children)\n                elif isinstance(child, Package):\n                    packages[child.id] = child\n                else:\n                    pass\n            collection.packages = packages.values()\n\n        # Flush the status cache\n        self._status_cache.clear()\n\n    def index(self):\n        \"\"\"\n        Return the XML index describing the packages available from\n        the data server.  If necessary, this index will be downloaded\n        from the data server.\n        \"\"\"\n        self._update_index()\n        return self._index\n\n    def info(self, id):\n        \"\"\"Return the ``Package`` or ``Collection`` record for the\n           given item.\"\"\"\n        self._update_index()\n        if id in self._packages:\n            return self._packages[id]\n        if id in self._collections:\n            return self._collections[id]\n        raise ValueError('Package %r not found in index' % id)\n\n    def xmlinfo(self, id):\n        \"\"\"Return the XML info record for the given item\"\"\"\n        self._update_index()\n        for package in self._index.findall('packages/package'):\n            if package.get('id') == id:\n                return package\n        for collection in self._index.findall('collections/collection'):\n            if collection.get('id') == id:\n                return collection\n        raise ValueError('Package %r not found in index' % id)\n\n    # /////////////////////////////////////////////////////////////////\n    # URL & Data Directory\n    # /////////////////////////////////////////////////////////////////\n\n    def _get_url(self):\n        \"\"\"The URL for the data server's index file.\"\"\"\n        return self._url\n\n    def _set_url(self, url):\n        \"\"\"\n        Set a new URL for the data server. If we're unable to contact\n        the given url, then the original url is kept.\n        \"\"\"\n        original_url = self._url\n        try:\n            self._update_index(url)\n        except:\n            self._url = original_url\n            raise\n\n    url = property(_get_url, _set_url)\n\n    def default_download_dir(self):\n        \"\"\"\n        Return the directory to which packages will be downloaded by\n        default.  This value can be overridden using the constructor,\n        or on a case-by-case basis using the ``download_dir`` argument when\n        calling ``download()``.\n\n        On Windows, the default download directory is\n        ``PYTHONHOME/lib/nltk``, where *PYTHONHOME* is the\n        directory containing Python, e.g. ``C:\\\\Python25``.\n\n        On all other platforms, the default directory is the first of\n        the following which exists or which can be created with write\n        permission: ``/usr/share/nltk_data``, ``/usr/local/share/nltk_data``,\n        ``/usr/lib/nltk_data``, ``/usr/local/lib/nltk_data``, ``~/nltk_data``.\n        \"\"\"\n        # Check if we are on GAE where we cannot write into filesystem.\n        if 'APPENGINE_RUNTIME' in os.environ:\n            return\n\n        # Check if we have sufficient permissions to install in a\n        # variety of system-wide locations.\n        for nltkdir in nltk.data.path:\n            if os.path.exists(nltkdir) and nltk.internals.is_writable(nltkdir):\n                return nltkdir\n\n        # On Windows, use %APPDATA%\n        if sys.platform == 'win32' and 'APPDATA' in os.environ:\n            homedir = os.environ['APPDATA']\n\n        # Otherwise, install in the user's home directory.\n        else:\n            homedir = os.path.expanduser('~/')\n            if homedir == '~/':\n                raise ValueError(\"Could not find a default download directory\")\n\n        # append \"nltk_data\" to the home directory\n        return os.path.join(homedir, 'nltk_data')\n\n    def _get_download_dir(self):\n        \"\"\"\n        The default directory to which packages will be downloaded.\n        This defaults to the value returned by ``default_download_dir()``.\n        To override this default on a case-by-case basis, use the\n        ``download_dir`` argument when calling ``download()``.\n        \"\"\"\n        return self._download_dir\n\n    def _set_download_dir(self, download_dir):\n        self._download_dir = download_dir\n        # Clear the status cache.\n        self._status_cache.clear()\n\n    download_dir = property(_get_download_dir, _set_download_dir)\n\n    # /////////////////////////////////////////////////////////////////\n    # Interactive Shell\n    # /////////////////////////////////////////////////////////////////\n\n    def _interactive_download(self):\n        # Try the GUI first; if that doesn't work, try the simple\n        # interactive shell.\n        if TKINTER:\n            try:\n                DownloaderGUI(self).mainloop()\n            except TclError:\n                DownloaderShell(self).run()\n        else:\n            DownloaderShell(self).run()", "target": 0}, {"function": "class DownloaderShell(object):\n    def __init__(self, dataserver):\n        self._ds = dataserver\n\n    def _simple_interactive_menu(self, *options):\n        print('-' * 75)\n        spc = (68 - sum(len(o) for o in options)) // (len(options) - 1) * ' '\n        print('    ' + spc.join(options))\n        # w = 76/len(options)\n        # fmt = '  ' + ('%-'+str(w)+'s')*(len(options)-1) + '%s'\n        # print fmt % options\n        print('-' * 75)\n\n    def run(self):\n        print('NLTK Downloader')\n        while True:\n            self._simple_interactive_menu(\n                'd) Download',\n                'l) List',\n                ' u) Update',\n                'c) Config',\n                'h) Help',\n                'q) Quit',\n            )\n            user_input = input('Downloader> ').strip()\n            if not user_input:\n                print()\n                continue\n            command = user_input.lower().split()[0]\n            args = user_input.split()[1:]\n            try:\n                if command == 'l':\n                    print()\n                    self._ds.list(self._ds.download_dir, header=False, more_prompt=True)\n                elif command == 'h':\n                    self._simple_interactive_help()\n                elif command == 'c':\n                    self._simple_interactive_config()\n                elif command in ('q', 'x'):\n                    return\n                elif command == 'd':\n                    self._simple_interactive_download(args)\n                elif command == 'u':\n                    self._simple_interactive_update()\n                else:\n                    print('Command %r unrecognized' % user_input)\n            except HTTPError as e:\n                print('Error reading from server: %s' % e)\n            except URLError as e:\n                print('Error connecting to server: %s' % e.reason)\n            # try checking if user_input is a package name, &\n            # downloading it?\n            print()\n\n    def _simple_interactive_download(self, args):\n        if args:\n            for arg in args:\n                try:\n                    self._ds.download(arg, prefix='    ')\n                except (IOError, ValueError) as e:\n                    print(e)\n        else:\n            while True:\n                print()\n                print('Download which package (l=list; x=cancel)?')\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'l':\n                    self._ds.list(\n                        self._ds.download_dir,\n                        header=False,\n                        more_prompt=True,\n                        skip_installed=True,\n                    )\n                    continue\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n                elif user_input:\n                    for id in user_input.split():\n                        try:\n                            self._ds.download(id, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n\n    def _simple_interactive_update(self):\n        while True:\n            stale_packages = []\n            stale = partial = False\n            for info in sorted(getattr(self._ds, 'packages')(), key=str):\n                if self._ds.status(info) == self._ds.STALE:\n                    stale_packages.append((info.id, info.name))\n\n            print()\n            if stale_packages:\n                print('Will update following packages (o=ok; x=cancel)')\n                for pid, pname in stale_packages:\n                    name = textwrap.fill(\n                        '-' * 27 + (pname), 75, subsequent_indent=27 * ' '\n                    )[27:]\n                    print('  [ ] %s %s' % (pid.ljust(20, '.'), name))\n                print()\n\n                user_input = input('  Identifier> ')\n                if user_input.lower() == 'o':\n                    for pid, pname in stale_packages:\n                        try:\n                            self._ds.download(pid, prefix='    ')\n                        except (IOError, ValueError) as e:\n                            print(e)\n                    break\n                elif user_input.lower() in ('x', 'q', ''):\n                    return\n            else:\n                print('Nothing to update.')\n                return\n\n    def _simple_interactive_help(self):\n        print()\n        print('Commands:')\n        print(\n            '  d) Download a package or collection     u) Update out of date packages'\n        )\n        print('  l) List packages & collections          h) Help')\n        print('  c) View & Modify Configuration          q) Quit')\n\n    def _show_config(self):\n        print()\n        print('Data Server:')\n        print('  - URL: <%s>' % self._ds.url)\n        print(('  - %d Package Collections Available' % len(self._ds.collections())))\n        print(('  - %d Individual Packages Available' % len(self._ds.packages())))\n        print()\n        print('Local Machine:')\n        print('  - Data directory: %s' % self._ds.download_dir)\n\n    def _simple_interactive_config(self):\n        self._show_config()\n        while True:\n            print()\n            self._simple_interactive_menu(\n                's) Show Config', 'u) Set Server URL', 'd) Set Data Dir', 'm) Main Menu'\n            )\n            user_input = input('Config> ').strip().lower()\n            if user_input == 's':\n                self._show_config()\n            elif user_input == 'd':\n                new_dl_dir = input('  New Directory> ').strip()\n                if new_dl_dir in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                elif os.path.isdir(new_dl_dir):\n                    self._ds.download_dir = new_dl_dir\n                else:\n                    print(('Directory %r not found!  Create it first.' % new_dl_dir))\n            elif user_input == 'u':\n                new_url = input('  New URL> ').strip()\n                if new_url in ('', 'x', 'q', 'X', 'Q'):\n                    print('  Cancelled!')\n                else:\n                    if not new_url.startswith(('http://', 'https://')):\n                        new_url = 'http://' + new_url\n                    try:\n                        self._ds.url = new_url\n                    except Exception as e:\n                        print('Error reading <%r>:\\n  %s' % (new_url, e))\n            elif user_input == 'm':\n                break", "target": 0}, {"function": "class DownloaderGUI(object):\n    \"\"\"\n    Graphical interface for downloading packages from the NLTK data\n    server.\n    \"\"\"\n\n    # /////////////////////////////////////////////////////////////////\n    # Column Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    COLUMNS = [\n        '',\n        'Identifier',\n        'Name',\n        'Size',\n        'Status',\n        'Unzipped Size',\n        'Copyright',\n        'Contact',\n        'License',\n        'Author',\n        'Subdir',\n        'Checksum',\n    ]\n    \"\"\"A list of the names of columns.  This controls the order in\n       which the columns will appear.  If this is edited, then\n       ``_package_to_columns()`` may need to be edited to match.\"\"\"\n\n    COLUMN_WEIGHTS = {'': 0, 'Name': 5, 'Size': 0, 'Status': 0}\n    \"\"\"A dictionary specifying how columns should be resized when the\n       table is resized.  Columns with weight 0 will not be resized at\n       all; and columns with high weight will be resized more.\n       Default weight (for columns not explicitly listed) is 1.\"\"\"\n\n    COLUMN_WIDTHS = {\n        '': 1,\n        'Identifier': 20,\n        'Name': 45,\n        'Size': 10,\n        'Unzipped Size': 10,\n        'Status': 12,\n    }\n    \"\"\"A dictionary specifying how wide each column should be, in\n       characters.  The default width (for columns not explicitly\n       listed) is specified by ``DEFAULT_COLUMN_WIDTH``.\"\"\"\n\n    DEFAULT_COLUMN_WIDTH = 30\n    \"\"\"The default width for columns that are not explicitly listed\n       in ``COLUMN_WIDTHS``.\"\"\"\n\n    INITIAL_COLUMNS = ['', 'Identifier', 'Name', 'Size', 'Status']\n    \"\"\"The set of columns that should be displayed by default.\"\"\"\n\n    # Perform a few import-time sanity checks to make sure that the\n    # column configuration variables are defined consistently:\n    for c in COLUMN_WEIGHTS:\n        assert c in COLUMNS\n    for c in COLUMN_WIDTHS:\n        assert c in COLUMNS\n    for c in INITIAL_COLUMNS:\n        assert c in COLUMNS\n\n    # /////////////////////////////////////////////////////////////////\n    # Color Configuration\n    # /////////////////////////////////////////////////////////////////\n\n    _BACKDROP_COLOR = ('#000', '#ccc')\n\n    _ROW_COLOR = {\n        Downloader.INSTALLED: ('#afa', '#080'),\n        Downloader.PARTIAL: ('#ffa', '#880'),\n        Downloader.STALE: ('#faa', '#800'),\n        Downloader.NOT_INSTALLED: ('#fff', '#888'),\n    }\n\n    _MARK_COLOR = ('#000', '#ccc')\n\n    # _FRONT_TAB_COLOR = ('#ccf', '#008')\n    # _BACK_TAB_COLOR = ('#88a', '#448')\n    _FRONT_TAB_COLOR = ('#fff', '#45c')\n    _BACK_TAB_COLOR = ('#aaa', '#67a')\n\n    _PROGRESS_COLOR = ('#f00', '#aaa')\n\n    _TAB_FONT = 'helvetica -16 bold'\n\n    # /////////////////////////////////////////////////////////////////\n    # Constructor\n    # /////////////////////////////////////////////////////////////////\n\n    def __init__(self, dataserver, use_threads=True):\n        self._ds = dataserver\n        self._use_threads = use_threads\n\n        # For the threaded downloader:\n        self._download_lock = threading.Lock()\n        self._download_msg_queue = []\n        self._download_abort_queue = []\n        self._downloading = False\n\n        # For tkinter after callbacks:\n        self._afterid = {}\n\n        # A message log.\n        self._log_messages = []\n        self._log_indent = 0\n        self._log('NLTK Downloader Started!')\n\n        # Create the main window.\n        top = self.top = Tk()\n        top.geometry('+50+50')\n        top.title('NLTK Downloader')\n        top.configure(background=self._BACKDROP_COLOR[1])\n\n        # Set up some bindings now, in case anything goes wrong.\n        top.bind('<Control-q>', self.destroy)\n        top.bind('<Control-x>', self.destroy)\n        self._destroyed = False\n\n        self._column_vars = {}\n\n        # Initialize the GUI.\n        self._init_widgets()\n        self._init_menu()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n        self._show_info()\n        self._select_columns()\n        self._table.select(0)\n\n        # Make sure we get notified when we're destroyed, so we can\n        # cancel any download in progress.\n        self._table.bind('<Destroy>', self._destroy)\n\n    def _log(self, msg):\n        self._log_messages.append(\n            '%s %s%s' % (time.ctime(), ' | ' * self._log_indent, msg)\n        )\n\n    # /////////////////////////////////////////////////////////////////\n    # Internals\n    # /////////////////////////////////////////////////////////////////\n\n    def _init_widgets(self):\n        # Create the top-level frame structures\n        f1 = Frame(self.top, relief='raised', border=2, padx=8, pady=0)\n        f1.pack(sid='top', expand=True, fill='both')\n        f1.grid_rowconfigure(2, weight=1)\n        f1.grid_columnconfigure(0, weight=1)\n        Frame(f1, height=8).grid(column=0, row=0)  # spacer\n        tabframe = Frame(f1)\n        tabframe.grid(column=0, row=1, sticky='news')\n        tableframe = Frame(f1)\n        tableframe.grid(column=0, row=2, sticky='news')\n        buttonframe = Frame(f1)\n        buttonframe.grid(column=0, row=3, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=4)  # spacer\n        infoframe = Frame(f1)\n        infoframe.grid(column=0, row=5, sticky='news')\n        Frame(f1, height=8).grid(column=0, row=6)  # spacer\n        progressframe = Frame(\n            self.top, padx=3, pady=3, background=self._BACKDROP_COLOR[1]\n        )\n        progressframe.pack(side='bottom', fill='x')\n        self.top['border'] = 0\n        self.top['highlightthickness'] = 0\n\n        # Create the tabs\n        self._tab_names = ['Collections', 'Corpora', 'Models', 'All Packages']\n        self._tabs = {}\n        for i, tab in enumerate(self._tab_names):\n            label = Label(tabframe, text=tab, font=self._TAB_FONT)\n            label.pack(side='left', padx=((i + 1) % 2) * 10)\n            label.bind('<Button-1>', self._select_tab)\n            self._tabs[tab.lower()] = label\n\n        # Create the table.\n        column_weights = [self.COLUMN_WEIGHTS.get(column, 1) for column in self.COLUMNS]\n        self._table = Table(\n            tableframe,\n            self.COLUMNS,\n            column_weights=column_weights,\n            highlightthickness=0,\n            listbox_height=16,\n            reprfunc=self._table_reprfunc,\n        )\n        self._table.columnconfig(0, foreground=self._MARK_COLOR[0])  # marked\n        for i, column in enumerate(self.COLUMNS):\n            width = self.COLUMN_WIDTHS.get(column, self.DEFAULT_COLUMN_WIDTH)\n            self._table.columnconfig(i, width=width)\n        self._table.pack(expand=True, fill='both')\n        self._table.focus()\n        self._table.bind_to_listboxes('<Double-Button-1>', self._download)\n        self._table.bind('<space>', self._table_mark)\n        self._table.bind('<Return>', self._download)\n        self._table.bind('<Left>', self._prev_tab)\n        self._table.bind('<Right>', self._next_tab)\n        self._table.bind('<Control-a>', self._mark_all)\n\n        # Create entry boxes for URL & download_dir\n        infoframe.grid_columnconfigure(1, weight=1)\n\n        info = [\n            ('url', 'Server Index:', self._set_url),\n            ('download_dir', 'Download Directory:', self._set_download_dir),\n        ]\n        self._info = {}\n        for (i, (key, label, callback)) in enumerate(info):\n            Label(infoframe, text=label).grid(column=0, row=i, sticky='e')\n            entry = Entry(\n                infoframe, font='courier', relief='groove', disabledforeground='black'\n            )\n            self._info[key] = (entry, callback)\n            entry.bind('<Return>', self._info_save)\n            entry.bind('<Button-1>', lambda e, key=key: self._info_edit(key))\n            entry.grid(column=1, row=i, sticky='ew')\n\n        # If the user edits url or download_dir, and then clicks outside\n        # the entry box, then save their results.\n        self.top.bind('<Button-1>', self._info_save)\n\n        # Create Download & Refresh buttons.\n        self._download_button = Button(\n            buttonframe, text='Download', command=self._download, width=8\n        )\n        self._download_button.pack(side='left')\n        self._refresh_button = Button(\n            buttonframe, text='Refresh', command=self._refresh, width=8\n        )\n        self._refresh_button.pack(side='right')\n\n        # Create Progress bar\n        self._progresslabel = Label(\n            progressframe,\n            text='',\n            foreground=self._BACKDROP_COLOR[0],\n            background=self._BACKDROP_COLOR[1],\n        )\n        self._progressbar = Canvas(\n            progressframe,\n            width=200,\n            height=16,\n            background=self._PROGRESS_COLOR[1],\n            relief='sunken',\n            border=1,\n        )\n        self._init_progressbar()\n        self._progressbar.pack(side='right')\n        self._progresslabel.pack(side='left')\n\n    def _init_menu(self):\n        menubar = Menu(self.top)\n\n        filemenu = Menu(menubar, tearoff=0)\n        filemenu.add_command(\n            label='Download', underline=0, command=self._download, accelerator='Return'\n        )\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Change Server Index',\n            underline=7,\n            command=lambda: self._info_edit('url'),\n        )\n        filemenu.add_command(\n            label='Change Download Directory',\n            underline=0,\n            command=lambda: self._info_edit('download_dir'),\n        )\n        filemenu.add_separator()\n        filemenu.add_command(label='Show Log', underline=5, command=self._show_log)\n        filemenu.add_separator()\n        filemenu.add_command(\n            label='Exit', underline=1, command=self.destroy, accelerator='Ctrl-x'\n        )\n        menubar.add_cascade(label='File', underline=0, menu=filemenu)\n\n        # Create a menu to control which columns of the table are\n        # shown.  n.b.: we never hide the first two columns (mark and\n        # identifier).\n        viewmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[2:]:\n            var = IntVar(self.top)\n            assert column not in self._column_vars\n            self._column_vars[column] = var\n            if column in self.INITIAL_COLUMNS:\n                var.set(1)\n            viewmenu.add_checkbutton(\n                label=column, underline=0, variable=var, command=self._select_columns\n            )\n        menubar.add_cascade(label='View', underline=0, menu=viewmenu)\n\n        # Create a sort menu\n        # [xx] this should be selectbuttons; and it should include\n        # reversed sorts as options.\n        sortmenu = Menu(menubar, tearoff=0)\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'ascending')),\n            )\n        sortmenu.add_separator()\n        # sortmenu.add_command(label='Descending Sort:')\n        for column in self._table.column_names[1:]:\n            sortmenu.add_command(\n                label='Reverse sort by %s' % column,\n                command=(lambda c=column: self._table.sort_by(c, 'descending')),\n            )\n        menubar.add_cascade(label='Sort', underline=0, menu=sortmenu)\n\n        helpmenu = Menu(menubar, tearoff=0)\n        helpmenu.add_command(label='About', underline=0, command=self.about)\n        helpmenu.add_command(\n            label='Instructions', underline=0, command=self.help, accelerator='F1'\n        )\n        menubar.add_cascade(label='Help', underline=0, menu=helpmenu)\n        self.top.bind('<F1>', self.help)\n\n        self.top.config(menu=menubar)\n\n    def _select_columns(self):\n        for (column, var) in self._column_vars.items():\n            if var.get():\n                self._table.show_column(column)\n            else:\n                self._table.hide_column(column)\n\n    def _refresh(self):\n        self._ds.clear_status_cache()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._table.select(0)\n\n    def _info_edit(self, info_key):\n        self._info_save()  # just in case.\n        (entry, callback) = self._info[info_key]\n        entry['state'] = 'normal'\n        entry['relief'] = 'sunken'\n        entry.focus()\n\n    def _info_save(self, e=None):\n        focus = self._table\n        for entry, callback in self._info.values():\n            if entry['state'] == 'disabled':\n                continue\n            if e is not None and e.widget is entry and e.keysym != 'Return':\n                focus = entry\n            else:\n                entry['state'] = 'disabled'\n                entry['relief'] = 'groove'\n                callback(entry.get())\n        focus.focus()\n\n    def _table_reprfunc(self, row, col, val):\n        if self._table.column_names[col].endswith('Size'):\n            if isinstance(val, string_types):\n                return '  %s' % val\n            elif val < 1024 ** 2:\n                return '  %.1f KB' % (val / 1024.0 ** 1)\n            elif val < 1024 ** 3:\n                return '  %.1f MB' % (val / 1024.0 ** 2)\n            else:\n                return '  %.1f GB' % (val / 1024.0 ** 3)\n\n        if col in (0, ''):\n            return str(val)\n        else:\n            return '  %s' % val\n\n    def _set_url(self, url):\n        if url == self._ds.url:\n            return\n        try:\n            self._ds.url = url\n            self._fill_table()\n        except IOError as e:\n            showerror('Error Setting Server Index', str(e))\n        self._show_info()\n\n    def _set_download_dir(self, download_dir):\n        if self._ds.download_dir == download_dir:\n            return\n        # check if the dir exists, and if not, ask if we should create it?\n\n        # Clear our status cache, & re-check what's installed\n        self._ds.download_dir = download_dir\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n        self._show_info()\n\n    def _show_info(self):\n        print('showing info', self._ds.url)\n        for entry, cb in self._info.values():\n            entry['state'] = 'normal'\n            entry.delete(0, 'end')\n        self._info['url'][0].insert(0, self._ds.url)\n        self._info['download_dir'][0].insert(0, self._ds.download_dir)\n        for entry, cb in self._info.values():\n            entry['state'] = 'disabled'\n\n    def _prev_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i > 0:\n                self._tab = self._tab_names[i - 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _next_tab(self, *e):\n        for i, tab in enumerate(self._tab_names):\n            if tab.lower() == self._tab and i < (len(self._tabs) - 1):\n                self._tab = self._tab_names[i + 1].lower()\n                try:\n                    return self._fill_table()\n                except HTTPError as e:\n                    showerror('Error reading from server', e)\n                except URLError as e:\n                    showerror('Error connecting to server', e.reason)\n\n    def _select_tab(self, event):\n        self._tab = event.widget['text'].lower()\n        try:\n            self._fill_table()\n        except HTTPError as e:\n            showerror('Error reading from server', e)\n        except URLError as e:\n            showerror('Error connecting to server', e.reason)\n\n    _tab = 'collections'\n    # _tab = 'corpora'\n    _rows = None\n\n    def _fill_table(self):\n        selected_row = self._table.selected_row()\n        self._table.clear()\n        if self._tab == 'all packages':\n            items = self._ds.packages()\n        elif self._tab == 'corpora':\n            items = self._ds.corpora()\n        elif self._tab == 'models':\n            items = self._ds.models()\n        elif self._tab == 'collections':\n            items = self._ds.collections()\n        else:\n            assert 0, 'bad tab value %r' % self._tab\n        rows = [self._package_to_columns(item) for item in items]\n        self._table.extend(rows)\n\n        # Highlight the active tab.\n        for tab, label in self._tabs.items():\n            if tab == self._tab:\n                label.configure(\n                    foreground=self._FRONT_TAB_COLOR[0],\n                    background=self._FRONT_TAB_COLOR[1],\n                )\n            else:\n                label.configure(\n                    foreground=self._BACK_TAB_COLOR[0],\n                    background=self._BACK_TAB_COLOR[1],\n                )\n\n        self._table.sort_by('Identifier', order='ascending')\n        self._color_table()\n        self._table.select(selected_row)\n\n        # This is a hack, because the scrollbar isn't updating its\n        # position right -- I'm not sure what the underlying cause is\n        # though.  (This is on OS X w/ python 2.5)  The length of\n        # delay that's necessary seems to depend on how fast the\n        # comptuer is. :-/\n        self.top.after(150, self._table._scrollbar.set, *self._table._mlb.yview())\n        self.top.after(300, self._table._scrollbar.set, *self._table._mlb.yview())\n\n    def _update_table_status(self):\n        for row_num in range(len(self._table)):\n            status = self._ds.status(self._table[row_num, 'Identifier'])\n            self._table[row_num, 'Status'] = status\n        self._color_table()\n\n    def _download(self, *e):\n        # If we're using threads, then delegate to the threaded\n        # downloader instead.\n        if self._use_threads:\n            return self._download_threaded(*e)\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        download_iter = self._ds.incr_download(marked, self._ds.download_dir)\n        self._log_indent = 0\n        self._download_cb(download_iter, marked)\n\n    _DL_DELAY = 10\n\n    def _download_cb(self, download_iter, ids):\n        try:\n            msg = next(download_iter)\n        except StopIteration:\n            # self._fill_table(sort=False)\n            self._update_table_status()\n            afterid = self.top.after(10, self._show_progress, 0)\n            self._afterid['_download_cb'] = afterid\n            return\n\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        if isinstance(msg, ProgressMessage):\n            self._show_progress(msg.progress)\n        elif isinstance(msg, ErrorMessage):\n            show(msg.message)\n            if msg.package is not None:\n                self._select(msg.package.id)\n            self._show_progress(None)\n            return  # halt progress.\n        elif isinstance(msg, StartCollectionMessage):\n            show('Downloading collection %s' % msg.collection.id)\n            self._log_indent += 1\n        elif isinstance(msg, StartPackageMessage):\n            show('Downloading package %s' % msg.package.id)\n        elif isinstance(msg, UpToDateMessage):\n            show('Package %s is up-to-date!' % msg.package.id)\n        # elif isinstance(msg, StaleMessage):\n        #    show('Package %s is out-of-date or corrupt' % msg.package.id)\n        elif isinstance(msg, FinishDownloadMessage):\n            show('Finished downloading %r.' % msg.package.id)\n        elif isinstance(msg, StartUnzipMessage):\n            show('Unzipping %s' % msg.package.filename)\n        elif isinstance(msg, FinishCollectionMessage):\n            self._log_indent -= 1\n            show('Finished downloading collection %r.' % msg.collection.id)\n            self._clear_mark(msg.collection.id)\n        elif isinstance(msg, FinishPackageMessage):\n            self._clear_mark(msg.package.id)\n        afterid = self.top.after(self._DL_DELAY, self._download_cb, download_iter, ids)\n        self._afterid['_download_cb'] = afterid\n\n    def _select(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table.select(row)\n                return\n\n    def _color_table(self):\n        # Color rows according to status.\n        for row in range(len(self._table)):\n            bg, sbg = self._ROW_COLOR[self._table[row, 'Status']]\n            fg, sfg = ('black', 'white')\n            self._table.rowconfig(\n                row,\n                foreground=fg,\n                selectforeground=sfg,\n                background=bg,\n                selectbackground=sbg,\n            )\n            # Color the marked column\n            self._table.itemconfigure(\n                row, 0, foreground=self._MARK_COLOR[0], background=self._MARK_COLOR[1]\n            )\n\n    def _clear_mark(self, id):\n        for row in range(len(self._table)):\n            if self._table[row, 'Identifier'] == id:\n                self._table[row, 0] = ''\n\n    def _mark_all(self, *e):\n        for row in range(len(self._table)):\n            self._table[row, 0] = 'X'\n\n    def _table_mark(self, *e):\n        selection = self._table.selected_row()\n        if selection >= 0:\n            if self._table[selection][0] != '':\n                self._table[selection, 0] = ''\n            else:\n                self._table[selection, 0] = 'X'\n        self._table.select(delta=1)\n\n    def _show_log(self):\n        text = '\\n'.join(self._log_messages)\n        ShowText(self.top, 'NLTK Downloader Log', text)\n\n    def _package_to_columns(self, pkg):\n        \"\"\"\n        Given a package, return a list of values describing that\n        package, one for each column in ``self.COLUMNS``.\n        \"\"\"\n        row = []\n        for column_index, column_name in enumerate(self.COLUMNS):\n            if column_index == 0:  # Mark:\n                row.append('')\n            elif column_name == 'Identifier':\n                row.append(pkg.id)\n            elif column_name == 'Status':\n                row.append(self._ds.status(pkg))\n            else:\n                attr = column_name.lower().replace(' ', '_')\n                row.append(getattr(pkg, attr, 'n/a'))\n        return row\n\n    # /////////////////////////////////////////////////////////////////\n    # External Interface\n    # /////////////////////////////////////////////////////////////////\n\n    def destroy(self, *e):\n        if self._destroyed:\n            return\n        self.top.destroy()\n        self._destroyed = True\n\n    def _destroy(self, *e):\n        if self.top is not None:\n            for afterid in self._afterid.values():\n                self.top.after_cancel(afterid)\n\n        # Abort any download in progress.\n        if self._downloading and self._use_threads:\n            self._abort_download()\n\n        # Make sure the garbage collector destroys these now;\n        # otherwise, they may get destroyed when we're not in the main\n        # thread, which would make Tkinter unhappy.\n        self._column_vars.clear()\n\n    def mainloop(self, *args, **kwargs):\n        self.top.mainloop(*args, **kwargs)\n\n    # /////////////////////////////////////////////////////////////////\n    # HELP\n    # /////////////////////////////////////////////////////////////////\n\n    HELP = textwrap.dedent(\n        \"\"\"\\\n    This tool can be used to download a variety of corpora and models\n    that can be used with NLTK.  Each corpus or model is distributed\n    in a single zip file, known as a \\\"package file.\\\"  You can\n    download packages individually, or you can download pre-defined\n    collections of packages.\n\n    When you download a package, it will be saved to the \\\"download\n    directory.\\\"  A default download directory is chosen when you run\n\n    the downloader; but you may also select a different download\n    directory.  On Windows, the default download directory is\n\n\n    \\\"package.\\\"\n\n    The NLTK downloader can be used to download a variety of corpora,\n    models, and other data packages.\n\n    Keyboard shortcuts::\n      [return]\\t Download\n      [up]\\t Select previous package\n      [down]\\t Select next package\n      [left]\\t Select previous tab\n      [right]\\t Select next tab\n    \"\"\"\n    )\n\n    def help(self, *e):\n        # The default font's not very legible; try using 'fixed' instead.\n        try:\n            ShowText(\n                self.top,\n                'Help: NLTK Dowloader',\n                self.HELP.strip(),\n                width=75,\n                font='fixed',\n            )\n        except:\n            ShowText(self.top, 'Help: NLTK Downloader', self.HELP.strip(), width=75)\n\n    def about(self, *e):\n        ABOUT = \"NLTK Downloader\\n\" + \"Written by Edward Loper\"\n        TITLE = 'About: NLTK Downloader'\n        try:\n            from six.moves.tkinter_messagebox import Message\n\n            Message(message=ABOUT, title=TITLE).show()\n        except ImportError:\n            ShowText(self.top, TITLE, ABOUT)\n\n    # /////////////////////////////////////////////////////////////////\n    # Progress Bar\n    # /////////////////////////////////////////////////////////////////\n\n    _gradient_width = 5\n\n    def _init_progressbar(self):\n        c = self._progressbar\n        width, height = int(c['width']), int(c['height'])\n        for i in range(0, (int(c['width']) * 2) // self._gradient_width):\n            c.create_line(\n                i * self._gradient_width + 20,\n                -20,\n                i * self._gradient_width - height - 20,\n                height + 20,\n                width=self._gradient_width,\n                fill='#%02x0000' % (80 + abs(i % 6 - 3) * 12),\n            )\n        c.addtag_all('gradient')\n        c.itemconfig('gradient', state='hidden')\n\n        # This is used to display progress\n        c.addtag_withtag(\n            'redbox', c.create_rectangle(0, 0, 0, 0, fill=self._PROGRESS_COLOR[0])\n        )\n\n    def _show_progress(self, percent):\n        c = self._progressbar\n        if percent is None:\n            c.coords('redbox', 0, 0, 0, 0)\n            c.itemconfig('gradient', state='hidden')\n        else:\n            width, height = int(c['width']), int(c['height'])\n            x = percent * int(width) // 100 + 1\n            c.coords('redbox', 0, 0, x, height + 1)\n\n    def _progress_alive(self):\n        c = self._progressbar\n        if not self._downloading:\n            c.itemconfig('gradient', state='hidden')\n        else:\n            c.itemconfig('gradient', state='normal')\n            x1, y1, x2, y2 = c.bbox('gradient')\n            if x1 <= -100:\n                c.move('gradient', (self._gradient_width * 6) - 4, 0)\n            else:\n                c.move('gradient', -4, 0)\n            afterid = self.top.after(200, self._progress_alive)\n            self._afterid['_progress_alive'] = afterid\n\n    # /////////////////////////////////////////////////////////////////\n    # Threaded downloader\n    # /////////////////////////////////////////////////////////////////\n\n    def _download_threaded(self, *e):\n        # If the user tries to start a new download while we're already\n        # downloading something, then abort the current download instead.\n        if self._downloading:\n            self._abort_download()\n            return\n\n        # Change the 'download' button to an 'abort' button.\n        self._download_button['text'] = 'Cancel'\n\n        marked = [\n            self._table[row, 'Identifier']\n            for row in range(len(self._table))\n            if self._table[row, 0] != ''\n        ]\n        selection = self._table.selected_row()\n        if not marked and selection is not None:\n            marked = [self._table[selection, 'Identifier']]\n\n        # Create a new data server object for the download operation,\n        # just in case the user modifies our data server during the\n        # download (e.g., clicking 'refresh' or editing the index url).\n        ds = Downloader(self._ds.url, self._ds.download_dir)\n\n        # Start downloading in a separate thread.\n        assert self._download_msg_queue == []\n        assert self._download_abort_queue == []\n        self._DownloadThread(\n            ds,\n            marked,\n            self._download_lock,\n            self._download_msg_queue,\n            self._download_abort_queue,\n        ).start()\n\n        # Monitor the download message queue & display its progress.\n        self._log_indent = 0\n        self._downloading = True\n        self._monitor_message_queue()\n\n        # Display an indication that we're still alive and well by\n        # cycling the progress bar.\n        self._progress_alive()\n\n    def _abort_download(self):\n        if self._downloading:\n            self._download_lock.acquire()\n            self._download_abort_queue.append('abort')\n            self._download_lock.release()\n\n    class _DownloadThread(threading.Thread):\n        def __init__(self, data_server, items, lock, message_queue, abort):\n            self.data_server = data_server\n            self.items = items\n            self.lock = lock\n            self.message_queue = message_queue\n            self.abort = abort\n            threading.Thread.__init__(self)\n\n        def run(self):\n            for msg in self.data_server.incr_download(self.items):\n                self.lock.acquire()\n                self.message_queue.append(msg)\n                # Check if we've been told to kill ourselves:\n                if self.abort:\n                    self.message_queue.append('aborted')\n                    self.lock.release()\n                    return\n                self.lock.release()\n            self.lock.acquire()\n            self.message_queue.append('finished')\n            self.lock.release()\n\n    _MONITOR_QUEUE_DELAY = 100\n\n    def _monitor_message_queue(self):\n        def show(s):\n            self._progresslabel['text'] = s\n            self._log(s)\n\n        # Try to acquire the lock; if it's busy, then just try again later.\n        if not self._download_lock.acquire():\n            return\n        for msg in self._download_msg_queue:\n\n            # Done downloading?\n            if msg == 'finished' or msg == 'aborted':\n                # self._fill_table(sort=False)\n                self._update_table_status()\n                self._downloading = False\n                self._download_button['text'] = 'Download'\n                del self._download_msg_queue[:]\n                del self._download_abort_queue[:]\n                self._download_lock.release()\n                if msg == 'aborted':\n                    show('Download aborted!')\n                    self._show_progress(None)\n                else:\n                    afterid = self.top.after(100, self._show_progress, None)\n                    self._afterid['_monitor_message_queue'] = afterid\n                return\n\n            # All other messages\n            elif isinstance(msg, ProgressMessage):\n                self._show_progress(msg.progress)\n            elif isinstance(msg, ErrorMessage):\n                show(msg.message)\n                if msg.package is not None:\n                    self._select(msg.package.id)\n                self._show_progress(None)\n                self._downloading = False\n                return  # halt progress.\n            elif isinstance(msg, StartCollectionMessage):\n                show('Downloading collection %r' % msg.collection.id)\n                self._log_indent += 1\n            elif isinstance(msg, StartPackageMessage):\n                self._ds.clear_status_cache(msg.package.id)\n                show('Downloading package %r' % msg.package.id)\n            elif isinstance(msg, UpToDateMessage):\n                show('Package %s is up-to-date!' % msg.package.id)\n            # elif isinstance(msg, StaleMessage):\n            #    show('Package %s is out-of-date or corrupt; updating it' %\n            #         msg.package.id)\n            elif isinstance(msg, FinishDownloadMessage):\n                show('Finished downloading %r.' % msg.package.id)\n            elif isinstance(msg, StartUnzipMessage):\n                show('Unzipping %s' % msg.package.filename)\n            elif isinstance(msg, FinishUnzipMessage):\n                show('Finished installing %s' % msg.package.id)\n            elif isinstance(msg, FinishCollectionMessage):\n                self._log_indent -= 1\n                show('Finished downloading collection %r.' % msg.collection.id)\n                self._clear_mark(msg.collection.id)\n            elif isinstance(msg, FinishPackageMessage):\n                self._update_table_status()\n                self._clear_mark(msg.package.id)\n\n        # Let the user know when we're aborting a download (but\n        # waiting for a good point to abort it, so we don't end up\n        # with a partially unzipped package or anything like that).\n        if self._download_abort_queue:\n            self._progresslabel['text'] = 'Aborting download...'\n\n        # Clear the message queue and then release the lock\n        del self._download_msg_queue[:]\n        self._download_lock.release()\n\n        # Check the queue again after MONITOR_QUEUE_DELAY msec.\n        afterid = self.top.after(self._MONITOR_QUEUE_DELAY, self._monitor_message_queue)\n        self._afterid['_monitor_message_queue'] = afterid", "target": 0}, {"function": "def md5_hexdigest(file):\n    \"\"\"\n    Calculate and return the MD5 checksum for a given file.\n    ``file`` may either be a filename or an open stream.\n    \"\"\"\n    if isinstance(file, string_types):\n        with open(file, 'rb') as infile:\n            return _md5_hexdigest(infile)\n    return _md5_hexdigest(file)", "target": 0}, {"function": "def _md5_hexdigest(fp):\n    md5_digest = md5()\n    while True:\n        block = fp.read(1024 * 16)  # 16k blocks\n        if not block:\n            break\n        md5_digest.update(block)\n    return md5_digest.hexdigest()", "target": 0}, {"function": "def unzip(filename, root, verbose=True):\n    \"\"\"\n    Extract the contents of the zip file ``filename`` into the\n    directory ``root``.\n    \"\"\"\n    for message in _unzip_iter(filename, root, verbose):\n        if isinstance(message, ErrorMessage):\n            raise Exception(message)", "target": 0}, {"function": "def _unzip_iter(filename, root, verbose=True):\n    if verbose:\n        sys.stdout.write('Unzipping %s' % os.path.split(filename)[1])\n        sys.stdout.flush()\n\n    try:\n        zf = zipfile.ZipFile(filename)\n    except zipfile.error as e:\n        yield ErrorMessage(filename, 'Error with downloaded zip file')\n        return\n    except Exception as e:\n        yield ErrorMessage(filename, e)\n        return\n\n    zf.extractall(root)\n\n    if verbose:\n        print()", "target": 0}, {"function": "def build_index(root, base_url):\n    \"\"\"\n    Create a new data.xml index file, by combining the xml description\n    files for various packages and collections.  ``root`` should be the\n    path to a directory containing the package xml and zip files; and\n    the collection xml files.  The ``root`` directory is expected to\n    have the following subdirectories::\n\n      root/\n        packages/ .................. subdirectory for packages\n          corpora/ ................. zip & xml files for corpora\n          grammars/ ................ zip & xml files for grammars\n          taggers/ ................. zip & xml files for taggers\n          tokenizers/ .............. zip & xml files for tokenizers\n          etc.\n        collections/ ............... xml files for collections\n\n    For each package, there should be two files: ``package.zip``\n    (where *package* is the package name)\n    which contains the package itself as a compressed zip file; and\n    ``package.xml``, which is an xml description of the package.  The\n    zipfile ``package.zip`` should expand to a single subdirectory\n    named ``package/``.  The base filename ``package`` must match\n    the identifier given in the package's xml file.\n\n    For each collection, there should be a single file ``collection.zip``\n    describing the collection, where *collection* is the name of the collection.\n\n    All identifiers (for both packages and collections) must be unique.\n    \"\"\"\n    # Find all packages.\n    packages = []\n    for pkg_xml, zf, subdir in _find_packages(os.path.join(root, 'packages')):\n        zipstat = os.stat(zf.filename)\n        url = '%s/%s/%s' % (base_url, subdir, os.path.split(zf.filename)[1])\n        unzipped_size = sum(zf_info.file_size for zf_info in zf.infolist())\n\n        # Fill in several fields of the package xml with calculated values.\n        pkg_xml.set('unzipped_size', '%s' % unzipped_size)\n        pkg_xml.set('size', '%s' % zipstat.st_size)\n        pkg_xml.set('checksum', '%s' % md5_hexdigest(zf.filename))\n        pkg_xml.set('subdir', subdir)\n        # pkg_xml.set('svn_revision', _svn_revision(zf.filename))\n        if not pkg_xml.get('url'):\n            pkg_xml.set('url', url)\n\n        # Record the package.\n        packages.append(pkg_xml)\n\n    # Find all collections\n    collections = list(_find_collections(os.path.join(root, 'collections')))\n\n    # Check that all UIDs are unique\n    uids = set()\n    for item in packages + collections:\n        if item.get('id') in uids:\n            raise ValueError('Duplicate UID: %s' % item.get('id'))\n        uids.add(item.get('id'))\n\n    # Put it all together\n    top_elt = ElementTree.Element('nltk_data')\n    top_elt.append(ElementTree.Element('packages'))\n    for package in packages:\n        top_elt[0].append(package)\n    top_elt.append(ElementTree.Element('collections'))\n    for collection in collections:\n        top_elt[1].append(collection)\n\n    _indent_xml(top_elt)\n    return top_elt", "target": 0}, {"function": "def _indent_xml(xml, prefix=''):\n    \"\"\"\n    Helper for ``build_index()``: Given an XML ``ElementTree``, modify it\n    (and its descendents) ``text`` and ``tail`` attributes to generate\n    an indented tree, where each nested element is indented by 2\n    spaces with respect to its parent.\n    \"\"\"\n    if len(xml) > 0:\n        xml.text = (xml.text or '').strip() + '\\n' + prefix + '  '\n        for child in xml:\n            _indent_xml(child, prefix + '  ')\n        for child in xml[:-1]:\n            child.tail = (child.tail or '').strip() + '\\n' + prefix + '  '\n        xml[-1].tail = (xml[-1].tail or '').strip() + '\\n' + prefix", "target": 0}, {"function": "def _check_package(pkg_xml, zipfilename, zf):\n    \"\"\"\n    Helper for ``build_index()``: Perform some checks to make sure that\n    the given package is consistent.\n    \"\"\"\n    # The filename must patch the id given in the XML file.\n    uid = os.path.splitext(os.path.split(zipfilename)[1])[0]\n    if pkg_xml.get('id') != uid:\n        raise ValueError(\n            'package identifier mismatch (%s vs %s)' % (pkg_xml.get('id'), uid)\n        )\n\n    # Zip file must expand to a subdir whose name matches uid.\n    if sum((name != uid and not name.startswith(uid + '/')) for name in zf.namelist()):\n        raise ValueError(\n            'Zipfile %s.zip does not expand to a single '\n            'subdirectory %s/' % (uid, uid)\n        )", "target": 0}, {"function": "def _svn_revision(filename):\n    \"\"\"\n    Helper for ``build_index()``: Calculate the subversion revision\n    number for a given file (by using ``subprocess`` to run ``svn``).\n    \"\"\"\n    p = subprocess.Popen(\n        ['svn', 'status', '-v', filename],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n    )\n    (stdout, stderr) = p.communicate()\n    if p.returncode != 0 or stderr or not stdout:\n        raise ValueError(\n            'Error determining svn_revision for %s: %s'\n            % (os.path.split(filename)[1], textwrap.fill(stderr))\n        )\n    return stdout.split()[2]", "target": 0}, {"function": "def _find_collections(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of ElementTree.Element\n    objects, each holding the xml for a single package collection.\n    \"\"\"\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfile = os.path.join(dirname, filename)\n                yield ElementTree.parse(xmlfile).getroot()", "target": 0}, {"function": "def _find_packages(root):\n    \"\"\"\n    Helper for ``build_index()``: Yield a list of tuples\n    ``(pkg_xml, zf, subdir)``, where:\n      - ``pkg_xml`` is an ``ElementTree.Element`` holding the xml for a\n        package\n      - ``zf`` is a ``zipfile.ZipFile`` for the package's contents.\n      - ``subdir`` is the subdirectory (relative to ``root``) where\n        the package was found (e.g. 'corpora' or 'grammars').\n    \"\"\"\n    from nltk.corpus.reader.util import _path_from\n\n    # Find all packages.\n    packages = []\n    for dirname, subdirs, files in os.walk(root):\n        relpath = '/'.join(_path_from(root, dirname))\n        for filename in files:\n            if filename.endswith('.xml'):\n                xmlfilename = os.path.join(dirname, filename)\n                zipfilename = xmlfilename[:-4] + '.zip'\n                try:\n                    zf = zipfile.ZipFile(zipfilename)\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (zipfilename, e))\n                try:\n                    pkg_xml = ElementTree.parse(xmlfilename).getroot()\n                except Exception as e:\n                    raise ValueError('Error reading file %r!\\n%s' % (xmlfilename, e))\n\n                # Check that the UID matches the filename\n                uid = os.path.split(xmlfilename[:-4])[1]\n                if pkg_xml.get('id') != uid:\n                    raise ValueError(\n                        'package identifier mismatch (%s '\n                        'vs %s)' % (pkg_xml.get('id'), uid)\n                    )\n\n                # Check that the zipfile expands to a subdir whose\n                # name matches the uid.\n                if sum(\n                    (name != uid and not name.startswith(uid + '/'))\n                    for name in zf.namelist()\n                ):\n                    raise ValueError(\n                        'Zipfile %s.zip does not expand to a '\n                        'single subdirectory %s/' % (uid, uid)\n                    )\n\n                yield pkg_xml, zf, relpath\n        # Don't recurse into svn subdirectories:\n        try:\n            subdirs.remove('.svn')\n        except ValueError:\n            pass", "target": 0}, {"function": "def download_shell():\n    DownloaderShell(_downloader).run()", "target": 0}, {"function": "def download_gui():\n    DownloaderGUI(_downloader).mainloop()", "target": 0}, {"function": "def update():\n    _downloader.update()", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
