{"index": 10187, "cve_id": "CVE-2022-4510", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "A path traversal vulnerability was identified in ReFirm Labs binwalk from version 2.1.2b through 2.3.3 included. By crafting a malicious PFS filesystem file, an attacker can get binwalk's PFS extractor to extract files at arbitrary locations when binwalk is run in extraction mode (-e option). Remote code execution can be achieved by building a PFS filesystem that, upon extraction,\u00a0would extract a malicious binwalk module into the folder .config/binwalk/plugins.\n This vulnerability is associated with program files src/binwalk/plugins/unpfs.py.\n\nThis issue affects binwalk from 2.1.2b through 2.3.3 included.", "cvss": "7.8", "publish_date": "January 26, 2023", "AV": "LOCAL", "AC": "LOCAL", "PR": "NONE", "UI": "REQUIRED", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "696fe34ed680ffd951bfeca737feb4a0b98dde5c", "commit_message": "fix path traversal in PFS extractor script.\n\nos.path.join does not fully resolve a path so the condition that follows\nwill never be true. Fixed by resolving the path using os.path.abspath.", "commit_date": "2022-10-26T19:25:40Z", "project": "refirmlabs/binwalk", "url": "https://api.github.com/repos/ReFirmLabs/binwalk/commits/696fe34ed680ffd951bfeca737feb4a0b98dde5c", "html_url": "https://github.com/ReFirmLabs/binwalk/commit/696fe34ed680ffd951bfeca737feb4a0b98dde5c", "windows_before": [{"commit_id": "a555eb1fa6ed0073c36b3493fba7a463a98eaa97", "commit_date": "Tue Sep 20 11:59:08 2022 -0400", "commit_message": "Merge pull request #615 from eowle/master", "files_name": ["2129463a2953574542ef09495d2750e1c1e390af - Tue Sep 20 11:44:20 2022 -0400 : Remove unstuff from dependencies", "INSTALL.md", "deps.sh", "src/binwalk/config/extract.conf"]}, {"commit_id": "fa0c0bd59b8588814756942fe4cb5452e76c1dcd", "commit_date": "Fri Sep 10 13:46:40 2021 -0400", "commit_message": "Merge pull request #556 from ReFirmLabs/unpriv_user_exec", "files_name": ["8f3dd374925a9c5d2e05208f927314db952584df - Tue Sep 7 06:55:17 2021 -0700 : Added option to disable symlink sanitization if desired", "src/binwalk/modules/extractor.py"]}, {"commit_id": "adb02d2f584dab324b8d6ec422dc8facb4e6b394", "commit_date": "Mon Sep 6 09:23:23 2021 -0700", "commit_message": "Fixed code comment", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "97a5954bebc6c4a006d31fd4e636517e05558fdb", "commit_date": "Mon Sep 6 07:27:43 2021 -0700", "commit_message": "Fixed dirtraversal test; updated extractor to not fork unless necessary (nose tests don't like sys.exit)", "files_name": ["src/binwalk/modules/extractor.py", "testing/tests/test_dirtraversal.py"]}, {"commit_id": "271333b6bf09a19bd2af1d565f4d04f8b9552473", "commit_date": "Sun Sep 5 08:54:51 2021 -0700", "commit_message": "Updated README.md to include extraction security notice.", "files_name": ["README.md", "setup.py"]}, {"commit_id": "dd4f2efd275c9dd1001130e82e0f985110cd2754", "commit_date": "Sun Sep 5 08:43:19 2021 -0700", "commit_message": "Added directory traversal test; fixed zip test.", "files_name": ["testing/tests/input-vectors/dirtraversal.tar", "testing/tests/test_dirtraversal.py", "testing/tests/test_firmware_zip.py"]}, {"commit_id": "0988b2e2b173b8c08d6991eda725a5ca8d548817", "commit_date": "Sun Sep 5 08:20:55 2021 -0700", "commit_message": "Code cleanup", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "cc5cf9b24148da38335119c5a07d15f7a053ba83", "commit_date": "Sun Sep 5 07:44:16 2021 -0700", "commit_message": "Bug fixes, code testing", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "8b0629056b803c8f5539f377fb05e68e8a326562", "commit_date": "Sun Sep 5 06:54:33 2021 -0700", "commit_message": "Added code comments and better error output for end user", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "54d40f600f56ef37930d95de7853304be4e64394", "commit_date": "Fri Sep 3 09:52:30 2021 -0700", "commit_message": "Initial symlink 'repair' solution", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "8f1dcca438c868dc4974e6b60e50b1dc9e3fd577", "commit_date": "Fri Sep 3 09:03:34 2021 -0700", "commit_message": "Added option for specifying a user to run external extraction utilties as", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "bd2c3566d31d2ed85cedad8a01993589c78291c6", "commit_date": "Wed Sep 1 08:51:09 2021 -0700", "commit_message": "Added option to turn off privilege dropping", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "0d6bf607c979b51b46f3d13c9e56267ba54688bb", "commit_date": "Wed Sep 1 07:10:37 2021 -0700", "commit_message": "Initial low-priv execution implementation", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "0499019337796d69d37939a2e0e8b8d5a055ed21", "commit_date": "Mon Aug 16 06:56:07 2021 -0700", "commit_message": "Updated version number for release", "files_name": ["setup.py"]}, {"commit_id": "e0f9bf79701f001caba6bc36b52f47272384d2ca", "commit_date": "Mon Aug 9 08:53:23 2021 -0400", "commit_message": "Merge pull request #551 from ReFirmLabs/hlink_removal", "files_name": ["fb85172a84a331a59c60af4deb7603b30c3852e8 - Mon Aug 9 05:52:04 2021 -0700 : Removed hilink decryption plugin; contains priprietary crypto key(s).", "src/binwalk/config/extract.conf", "src/binwalk/plugins/hilink.py"]}, {"commit_id": "2b78673bffa9d391174d2c7276062b81765076f5", "commit_date": "Fri Jun 18 04:20:59 2021 -0700", "commit_message": "Removed sensitive keys", "files_name": ["src/binwalk/plugins/pgp.py"]}, {"commit_id": "74b2a6f9de7493141c28dfecddfbb5a2250416c5", "commit_date": "Tue Apr 20 20:57:15 2021 -0400", "commit_message": "Merge pull request #532 from ReFirmLabs/third-party-notice", "files_name": ["fc4be29d02f5f76ed259e0660c8271f97c601cae - Sun Mar 28 22:22:31 2021 -0400 : add third party NOTICE markdown", "NOTICE.md"]}, {"commit_id": "772f271f0bcce18771f814b5f20cb19b29082831", "commit_date": "Wed Mar 24 21:50:40 2021 -0400", "commit_message": "Merge pull request #531 from ReFirmLabs/530-fix-sasquatch-in-binwalk-docker-container", "files_name": ["c84bec17d6304f96e0e7b7ffa5c2d9f2581a4f81 - Wed Mar 24 21:28:37 2021 -0400 : sasquatch patch was merged", "deps.sh"]}, {"commit_id": "366de69a3d16949eb29aff2592607260fad5395f", "commit_date": "Wed Mar 24 19:10:41 2021 -0400", "commit_message": "nop", "files_name": [".travis.yml"]}, {"commit_id": "3e0fe9beafebc5218a67ddfb523850be4f135463", "commit_date": "Wed Mar 24 19:05:02 2021 -0400", "commit_message": "try to preserve the python being used across sudo", "files_name": ["deps.sh"]}, {"commit_id": "4e380ec2b2529f35d81fd061a225bc1cc043cb56", "commit_date": "Wed Mar 24 18:55:26 2021 -0400", "commit_message": "there is no rhyme or reason to travis", "files_name": ["deps.sh"]}, {"commit_id": "4696cab05e37270be98117a02745557963ed8265", "commit_date": "Wed Mar 24 18:51:57 2021 -0400", "commit_message": "Travis-CI does not preserve the specified python when invoking sudo", "files_name": ["deps.sh"]}, {"commit_id": "8f62e92f1a32f073b66e099e2a800766b14cafff", "commit_date": "Wed Mar 24 18:40:43 2021 -0400", "commit_message": "using pip3 is causing issues, use whatever pip the user has in their environment", "files_name": [".travis.yml", "deps.sh"]}, {"commit_id": "7fc3de141fa0a12e81838aa2704f14d0b061b534", "commit_date": "Wed Mar 24 18:19:50 2021 -0400", "commit_message": "we no longer need to bifurcate python3 and python2 deps", "files_name": [".travis.yml", "deps.sh"]}, {"commit_id": "f7a77ed148e44e43cbf13635acc3c008074b754d", "commit_date": "Wed Mar 24 17:38:31 2021 -0400", "commit_message": "fail deps.sh if any install command fails", "files_name": [".gitignore", "deps.sh"]}, {"commit_id": "80a519b63dd6a513fe53dcb02a78bf1b23eb8c5d", "commit_date": "Wed Mar 17 11:49:50 2021 -0400", "commit_message": "Merge pull request #528 from cclauss/patch-1", "files_name": ["25be8c81b60bea248692cfd53781e0cf450659c1 - Tue Mar 16 19:19:33 2021 +0100 : Ubuntu Focal is Python 3 by default", "README.md"]}, {"commit_id": "77ec90f83909a192591ee28dc9773ac0c60bdc44", "commit_date": "Tue Mar 16 10:33:25 2021 -0400", "commit_message": "Merge pull request #527 from owl129/master", "files_name": ["25d1190ec69aab54381f884968536329014e647f - Tue Mar 16 17:41:09 2021 +0800 : Call 'unzip' with empty password, to avoid 'unzip' stuck in interactive mode when process encrypt files", "src/binwalk/config/extract.conf"]}, {"commit_id": "b7569e38e7b3edf3625c280d75f9f479a6a13de3", "commit_date": "Tue Mar 16 00:45:57 2021 -0400", "commit_message": "Merge pull request #526 from ReFirmLabs/525-Publish-binwalk-as-a-Docker-image", "files_name": ["ca5e841ae09667608279896fcc5a1bc28db07a78 - Tue Mar 16 00:44:40 2021 -0400 : Update INSTALL.md based on modern realities with python3", "INSTALL.md"]}, {"commit_id": "da84a44e13178e691cbf245bd9499dc67b446ab8", "commit_date": "Tue Mar 16 00:35:31 2021 -0400", "commit_message": "Merge pull request #518 from llamasoft/patch-1", "files_name": ["2ada2b0f4c01acce1cdbd11ae83d634213581f23 - Tue Mar 16 00:14:00 2021 -0400 : transition to use of cryptodome since pycrypto is EOL", "deps.sh"]}, {"commit_id": "874ca1dc03c0114d51060a9f8758aaecbc68f70d", "commit_date": "Mon Mar 15 23:54:40 2021 -0400", "commit_message": "still no love for travis", "files_name": [".travis.yml"]}, {"commit_id": "840a59d1b52e48a8fb689e1fade834a8cb062d0a", "commit_date": "Mon Mar 15 23:47:55 2021 -0400", "commit_message": "fix travis script", "files_name": [".travis.yml", "Dockerfile"]}, {"commit_id": "3f50064eb101daf51c2082ce0a4abfb63b1e6f1b", "commit_date": "Mon Mar 15 23:31:07 2021 -0400", "commit_message": "implement multi-stage build and test stage, include Docker build in Travis integration testing", "files_name": [".dockerignore", ".travis.yml", "Dockerfile"]}, {"commit_id": "afe921fcbecf4dcc56c57254501ded1809d3bb98", "commit_date": "Mon Mar 15 14:54:39 2021 -0400", "commit_message": "initial Dockerfile along with changes required for setting locale correctly inside Docker container.", "files_name": [".dockerignore", "Dockerfile", "deps.sh"]}, {"commit_id": "701e128b79e76c4b4f339a42a4926cdb6dd54305", "commit_date": "Mon Mar 15 12:36:14 2021 -0400", "commit_message": "Merge pull request #488 from jameshilliard/python3-only", "files_name": ["5090c79b46eceb5fd95affd072a592459f83d04b - Sun Mar 14 17:56:00 2021 -0400 : Travis will not apply test matrix to dist keyword, expand it manually in jobs list", ".travis.yml"]}, {"commit_id": "c71e050951030bb61c9293c1ebb2d6ff04e412d4", "commit_date": "Sun Mar 14 17:40:25 2021 -0400", "commit_message": "reduce test matrix to distros under LTS and python versions currently", "files_name": [".travis.yml"]}, {"commit_id": "3b5c177723292c6d61332f17005748f363930766", "commit_date": "Sun Mar 14 17:05:08 2021 -0400", "commit_message": "Remove python 2.7 from CI testing", "files_name": [".travis.yml"]}, {"commit_id": "750635d9114f8e2886d99e3b7379712f72072dd9", "commit_date": "Sun Mar 14 16:57:56 2021 -0400", "commit_message": "Update README.md", "files_name": ["README.md"]}, {"commit_id": "ab0fef0debc943ff00d4df2c59993efa9ade0de0", "commit_date": "Fri Feb 26 16:15:36 2021 -0800", "commit_message": "Actually implement exponent and shift operators", "files_name": ["src/binwalk/core/magic.py"]}, {"commit_id": "3154b0012e7dbaf2b20edd5c0a2350ec64009869", "commit_date": "Mon Feb 1 07:21:29 2021 -0800", "commit_message": "Updated ZIP signature to ignore OpenDocument formats", "files_name": ["src/binwalk/magic/archives"]}, {"commit_id": "45473685dffe4a9c50c55a0ed51ef559488050b2", "commit_date": "Mon Feb 1 07:13:18 2021 -0800", "commit_message": "Added debug output for extraction rule lookups", "files_name": ["src/binwalk/modules/extractor.py"]}, {"commit_id": "8d207b98e5ed8b17c32902cf39626efa41d26332", "commit_date": "Sun Jan 24 08:28:19 2021 -0500", "commit_message": "Merge pull request #509 from anthok/master", "files_name": ["563a19d5cb7748da8da2db3ed5ee5c4dd76e8ffe - Sat Jan 23 10:36:17 2021 -0800 : adding Autel EVO firmware magic support", "src/binwalk/magic/firmware"]}, {"commit_id": "e30a71bdc55ab678c99a57f6e1cbba6d2f007c64", "commit_date": "Tue Nov 24 19:38:20 2020 -0800", "commit_message": "Updated ZIP file signature to allow for reported sizes of -1", "files_name": ["src/binwalk/magic/archives"]}, {"commit_id": "2f6c7b3ae07cb4134da0429bd45f37ee2245efa0", "commit_date": "Sun Feb 2 19:07:02 2020 -0700", "commit_message": "deps: Fix install on newer ubuntu distros and drop python2 support.", "files_name": [".travis.yml", "deps.sh", "setup.py", "src/binwalk/core/compat.py", "src/binwalk/core/magic.py", "src/binwalk/plugins/tar.py"]}, {"commit_id": "5b6c4cee2572709c06f7b18af5aa77d82bce9499", "commit_date": "Tue Oct 27 11:00:17 2020 -0700", "commit_message": "Regressed entropy updates due to TypeError's", "files_name": ["src/binwalk/modules/entropy.py"]}, {"commit_id": "83f19dfcfe0e5cb1ec3b41c84982ce8b89c79006", "commit_date": "Tue Oct 27 10:34:17 2020 -0700", "commit_message": "Updated plugin core to pass SystemError exceptions up the chain", "files_name": ["src/binwalk/core/plugin.py"]}, {"commit_id": "f57a746cf1933a44cf0b0ececdb905f7dd7afeaa", "commit_date": "Tue Oct 13 10:48:49 2020 -0400", "commit_message": "Merge pull request #493 from ReFirmLabs/version_py", "files_name": ["e9dc12c9c123719ab6de012f7c085f3a40ce5279 - Tue Oct 13 07:48:28 2020 -0700 : Removed old setup code, updated version to 2.2.1", "setup.py"]}, {"commit_id": "5c736ea7845cf7414dc46878d33a6231db07a40e", "commit_date": "Tue Oct 13 07:41:12 2020 -0700", "commit_message": "Added improved version.py", "files_name": [".gitignore", "src/binwalk/core/version.py"]}, {"commit_id": "e9a9d050ddb8f0576a199cfc6d2d2b77e0189b53", "commit_date": "Tue Oct 13 07:36:16 2020 -0700", "commit_message": "Added improved version.py", "files_name": ["setup.py"]}, {"commit_id": "8e6e02e4197de48e48d3eb8cc1f3e64c5ef42f3a", "commit_date": "Tue Oct 13 10:22:55 2020 -0400", "commit_message": "Merge pull request #492 from ReFirmLabs/main_py", "files_name": ["a51ddb23c5c2d93d8778c7190ca0e6d0edae3ebf - Tue Oct 13 07:20:52 2020 -0700 : Added __main__.py file; updated binwalk script accordingly", "src/binwalk/__main__.py", "src/scripts/binwalk"]}, {"commit_id": "6f64ba30b06a021ab60aca35e720bb4f8ce72ba5", "commit_date": "Tue Oct 13 06:22:45 2020 -0700", "commit_message": "Put p7zip back in", "files_name": ["INSTALL.md", "deps.sh"]}, {"commit_id": "e1a1a1cd63884980c17dfd0ed811e0bb5b32f37f", "commit_date": "Tue Oct 13 06:20:30 2020 -0700", "commit_message": "Revert \"Updated version in master setup.py\"", "files_name": ["setup.py"]}, {"commit_id": "cb8262088e4f158585141b79c47ec4ae425a5efe", "commit_date": "Tue Oct 13 06:07:58 2020 -0700", "commit_message": "Removed depreciated p7zip dependency", "files_name": ["INSTALL.md", "deps.sh"]}, {"commit_id": "46f0efd31f993a1503ea1618f271d8d228dae68e", "commit_date": "Tue Oct 13 06:04:24 2020 -0700", "commit_message": "Updated version in master setup.py", "files_name": ["setup.py"]}, {"commit_id": "1fcb293a76d0ca1b9dccd259c485ee0a92ab0fb7", "commit_date": "Mon Oct 12 10:14:29 2020 -0400", "commit_message": "Merge pull request #453 from TobleMiner/feature-linux-arm64-image-signature", "files_name": []}], "windows_after": [{"commit_id": "cddfede795971045d99422bd7a9676c8803ec5ee", "commit_date": "Wed Feb 1 11:15:53 2023 -0500", "commit_message": "Merge pull request #617 from QKaiser/fix-pfs-path-traversal", "files_name": []}], "parents": [{"commit_id_before": "a555eb1fa6ed0073c36b3493fba7a463a98eaa97", "url_before": "https://api.github.com/repos/ReFirmLabs/binwalk/commits/a555eb1fa6ed0073c36b3493fba7a463a98eaa97", "html_url_before": "https://github.com/ReFirmLabs/binwalk/commit/a555eb1fa6ed0073c36b3493fba7a463a98eaa97"}], "details": [{"raw_url": "https://github.com/ReFirmLabs/binwalk/raw/696fe34ed680ffd951bfeca737feb4a0b98dde5c/src%2Fbinwalk%2Fplugins%2Funpfs.py", "code": "import os\nimport errno\nimport struct\nimport binwalk.core.common\nimport binwalk.core.compat\nimport binwalk.core.plugin\n\nclass PFSCommon(object):\n\n    def _make_short(self, data, endianness):\n        \"\"\"Returns a 2 byte integer.\"\"\"\n        data = binwalk.core.compat.str2bytes(data)\n        return struct.unpack('%sH' % endianness, data)[0]\n\n    def _make_int(self, data, endianness):\n        \"\"\"Returns a 4 byte integer.\"\"\"\n        data = binwalk.core.compat.str2bytes(data)\n        return struct.unpack('%sI' % endianness, data)[0]\n\nclass PFS(PFSCommon):\n    \"\"\"Class for accessing PFS meta-data.\"\"\"\n    HEADER_SIZE = 16\n\n    def __init__(self, fname, endianness='<'):\n        self.endianness = endianness\n        self.meta = binwalk.core.common.BlockFile(fname, 'rb')\n        header = self.meta.read(self.HEADER_SIZE)\n        self.file_list_start = self.meta.tell()\n\n        self.num_files = self._make_short(header[-2:], endianness)\n        self.node_size = self._get_fname_len() + 12\n\n    def _get_fname_len(self, bufflen=128):\n        \"\"\"Returns the number of bytes designated for the filename.\"\"\"\n        buff = self.meta.peek(bufflen)\n        strlen = buff.find('\\0')\n        for i, b in enumerate(buff[strlen:]):\n            if b != '\\0':\n                return strlen+i\n        return bufflen\n\n    def _get_node(self):\n        \"\"\"Reads a chunk of meta data from file and returns a PFSNode.\"\"\"\n        data = self.meta.read(self.node_size)\n        return PFSNode(data, self.endianness)\n\n    def get_end_of_meta_data(self):\n        \"\"\"Returns integer indicating the end of the file system meta data.\"\"\"\n        return self.HEADER_SIZE + self.node_size * self.num_files\n\n    def entries(self):\n        \"\"\"Returns file meta-data entries one by one.\"\"\"\n        self.meta.seek(self.file_list_start)\n        for i in range(0, self.num_files):\n            yield self._get_node()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, traceback):\n        self.meta.close()\n\nclass PFSNode(PFSCommon):\n    \"\"\"A node in the PFS Filesystem containing meta-data about a single file.\"\"\"\n\n    def __init__(self, data, endianness):\n        self.fname, data = data[:-12], data[-12:]\n        self._decode_fname()\n        self.inode_no = self._make_int(data[:4], endianness)\n        self.foffset = self._make_int(data[4:8], endianness)\n        self.fsize = self._make_int(data[8:], endianness)\n\n    def _decode_fname(self):\n        \"\"\"Extracts the actual string from the available bytes.\"\"\"\n        self.fname = self.fname[:self.fname.find('\\0')]\n        self.fname = self.fname.replace('\\\\', '/')\n\nclass PFSExtractor(binwalk.core.plugin.Plugin):\n    \"\"\"\n    Extractor for known PFS/0.9 File System Formats.\n    \"\"\"\n    MODULES = ['Signature']\n\n    def init(self):\n        if self.module.extractor.enabled:\n            self.module.extractor.add_rule(regex='^pfs filesystem',\n                                           extension='pfs',\n                                           cmd=self.extractor)\n\n    def _create_dir_from_fname(self, fname):\n        try:\n            os.makedirs(os.path.dirname(fname))\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise e\n\n    def extractor(self, fname):\n        fname = os.path.abspath(fname)\n        out_dir = binwalk.core.common.unique_file_name(os.path.join(os.path.dirname(fname), \"pfs-root\"))\n\n        try:\n            with PFS(fname) as fs:\n                # The end of PFS meta data is the start of the actual data\n                data = binwalk.core.common.BlockFile(fname, 'rb')\n                data.seek(fs.get_end_of_meta_data())\n                for entry in fs.entries():\n                    outfile_path = os.path.abspath(os.path.join(out_dir, entry.fname))\n                    if not outfile_path.startswith(out_dir):\n                        binwalk.core.common.warning(\"Unpfs extractor detected directory traversal attempt for file: '%s'. Refusing to extract.\" % outfile_path)\n                    else:\n                        self._create_dir_from_fname(outfile_path)\n                        outfile = binwalk.core.common.BlockFile(outfile_path, 'wb')\n                        outfile.write(data.read(entry.fsize))\n                        outfile.close()\n                data.close()\n        except KeyboardInterrupt as e:\n            raise e\n        except Exception as e:\n            return False\n\n        return True\n", "code_before": "import os\nimport errno\nimport struct\nimport binwalk.core.common\nimport binwalk.core.compat\nimport binwalk.core.plugin\n\nclass PFSCommon(object):\n\n    def _make_short(self, data, endianness):\n        \"\"\"Returns a 2 byte integer.\"\"\"\n        data = binwalk.core.compat.str2bytes(data)\n        return struct.unpack('%sH' % endianness, data)[0]\n\n    def _make_int(self, data, endianness):\n        \"\"\"Returns a 4 byte integer.\"\"\"\n        data = binwalk.core.compat.str2bytes(data)\n        return struct.unpack('%sI' % endianness, data)[0]\n\nclass PFS(PFSCommon):\n    \"\"\"Class for accessing PFS meta-data.\"\"\"\n    HEADER_SIZE = 16\n\n    def __init__(self, fname, endianness='<'):\n        self.endianness = endianness\n        self.meta = binwalk.core.common.BlockFile(fname, 'rb')\n        header = self.meta.read(self.HEADER_SIZE)\n        self.file_list_start = self.meta.tell()\n\n        self.num_files = self._make_short(header[-2:], endianness)\n        self.node_size = self._get_fname_len() + 12\n\n    def _get_fname_len(self, bufflen=128):\n        \"\"\"Returns the number of bytes designated for the filename.\"\"\"\n        buff = self.meta.peek(bufflen)\n        strlen = buff.find('\\0')\n        for i, b in enumerate(buff[strlen:]):\n            if b != '\\0':\n                return strlen+i\n        return bufflen\n\n    def _get_node(self):\n        \"\"\"Reads a chunk of meta data from file and returns a PFSNode.\"\"\"\n        data = self.meta.read(self.node_size)\n        return PFSNode(data, self.endianness)\n\n    def get_end_of_meta_data(self):\n        \"\"\"Returns integer indicating the end of the file system meta data.\"\"\"\n        return self.HEADER_SIZE + self.node_size * self.num_files\n\n    def entries(self):\n        \"\"\"Returns file meta-data entries one by one.\"\"\"\n        self.meta.seek(self.file_list_start)\n        for i in range(0, self.num_files):\n            yield self._get_node()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, traceback):\n        self.meta.close()\n\nclass PFSNode(PFSCommon):\n    \"\"\"A node in the PFS Filesystem containing meta-data about a single file.\"\"\"\n\n    def __init__(self, data, endianness):\n        self.fname, data = data[:-12], data[-12:]\n        self._decode_fname()\n        self.inode_no = self._make_int(data[:4], endianness)\n        self.foffset = self._make_int(data[4:8], endianness)\n        self.fsize = self._make_int(data[8:], endianness)\n\n    def _decode_fname(self):\n        \"\"\"Extracts the actual string from the available bytes.\"\"\"\n        self.fname = self.fname[:self.fname.find('\\0')]\n        self.fname = self.fname.replace('\\\\', '/')\n\nclass PFSExtractor(binwalk.core.plugin.Plugin):\n    \"\"\"\n    Extractor for known PFS/0.9 File System Formats.\n    \"\"\"\n    MODULES = ['Signature']\n\n    def init(self):\n        if self.module.extractor.enabled:\n            self.module.extractor.add_rule(regex='^pfs filesystem',\n                                           extension='pfs',\n                                           cmd=self.extractor)\n\n    def _create_dir_from_fname(self, fname):\n        try:\n            os.makedirs(os.path.dirname(fname))\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise e\n\n    def extractor(self, fname):\n        fname = os.path.abspath(fname)\n        out_dir = binwalk.core.common.unique_file_name(os.path.join(os.path.dirname(fname), \"pfs-root\"))\n\n        try:\n            with PFS(fname) as fs:\n                # The end of PFS meta data is the start of the actual data\n                data = binwalk.core.common.BlockFile(fname, 'rb')\n                data.seek(fs.get_end_of_meta_data())\n                for entry in fs.entries():\n                    outfile_path = os.path.join(out_dir, entry.fname)\n                    if not outfile_path.startswith(out_dir):\n                        binwalk.core.common.warning(\"Unpfs extractor detected directory traversal attempt for file: '%s'. Refusing to extract.\" % outfile_path)\n                    else:\n                        self._create_dir_from_fname(outfile_path)\n                        outfile = binwalk.core.common.BlockFile(outfile_path, 'wb')\n                        outfile.write(data.read(entry.fsize))\n                        outfile.close()\n                data.close()\n        except KeyboardInterrupt as e:\n            raise e\n        except Exception as e:\n            return False\n\n        return True\n", "patch": "@@ -104,7 +104,7 @@ def extractor(self, fname):\n                 data = binwalk.core.common.BlockFile(fname, 'rb')\n                 data.seek(fs.get_end_of_meta_data())\n                 for entry in fs.entries():\n-                    outfile_path = os.path.join(out_dir, entry.fname)\n+                    outfile_path = os.path.abspath(os.path.join(out_dir, entry.fname))\n                     if not outfile_path.startswith(out_dir):\n                         binwalk.core.common.warning(\"Unpfs extractor detected directory traversal attempt for file: '%s'. Refusing to extract.\" % outfile_path)\n                     else:", "file_path": "files/2023_1/232", "file_language": "py", "file_name": "src/binwalk/plugins/unpfs.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
