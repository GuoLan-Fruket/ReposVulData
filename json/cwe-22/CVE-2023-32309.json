{"index": 11514, "cve_id": "CVE-2023-32309", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "PyMdown Extensions is a set of extensions for the `Python-Markdown` markdown project. In affected versions an arbitrary file read is possible when using include file syntax. By using the syntax `--8<--\"/etc/passwd\"` or `--8<--\"/proc/self/environ\"` the content of these files will be rendered in the generated documentation. Additionally, a path relative to a specified, allowed base path can also be used to render the content of a file outside the specified base paths: `--8<-- \"../../../../etc/passwd\"`. Within the Snippets extension, there exists a `base_path` option but the implementation is vulnerable to Directory Traversal. The vulnerable section exists in `get_snippet_path(self, path)` lines 155 to 174 in snippets.py. Any readable file on the host where the plugin is executing may have its content exposed. This can impact any use of Snippets that exposes the use of Snippets to external users. It is never recommended to use Snippets to process user-facing, dynamic content. It is designed to process known content on the backend under the control of the host, but if someone were to accidentally enable it for user-facing content, undesired information could be exposed. This issue has been addressed in version 10.0. Users are advised to upgrade. Users unable to upgrade may restrict relative paths by filtering input.", "cvss": "7.5", "publish_date": "May 15, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "NONE", "A": "NONE", "commit_id": "b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d", "commit_message": "Merge pull request from GHSA-jh85-wwv9-24hv\n\n* Add `restrict_base_path` and make it the default\n\nNew option to restrict snippets to be actual children of the base path\nfor a more sane default.\n\n* Update grammar", "commit_date": "2023-05-14T17:55:18Z", "project": "facelessuser/pymdown-extensions", "url": "https://api.github.com/repos/facelessuser/pymdown-extensions/commits/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d", "html_url": "https://github.com/facelessuser/pymdown-extensions/commit/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d", "windows_before": [{"commit_id": "a8fb9666566dfb7e86094082860b5616885d35f4", "commit_date": "Fri Apr 7 12:05:39 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["package-lock.json"]}, {"commit_id": "75d17e3e91cb04da0e9459c9a516318db27fee16", "commit_date": "Fri Apr 7 12:03:23 2023 -0600", "commit_message": "Update changelog", "files_name": ["docs/src/markdown/about/changelog.md"]}, {"commit_id": "c3580c5c87ba7a6bc3fcd12a5e3c6bcfd45f809e", "commit_date": "Tue Apr 4 18:21:33 2023 -0600", "commit_message": "Update to use latest Twemoji release (#2004)", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/emoji.md", "pymdownx/__meta__.py", "pymdownx/emoji.py", "pymdownx/twemoji_db.py", "tests/extensions/emoji/twemoji (png).html", "tests/extensions/emoji/twemoji (png).txt", "tests/extensions/emoji/twemoji (svg).html", "tests/test_extensions/test_emoji.py", "tools/gen_emoji.py"]}, {"commit_id": "442011d71431f83b8ab2220b3d7c8a896f062096", "commit_date": "Tue Apr 4 17:17:05 2023 -0600", "commit_message": "Update bad links", "files_name": ["docs/src/markdown/about/development.md"]}, {"commit_id": "5bda09fb958d0a477c8296dc0766787ff7454504", "commit_date": "Tue Apr 4 17:11:21 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["docs/src/scss/extensions/_mark.scss", "docs/theme/assets/pymdownx-extras/extra-178dc81c41.css.map", "docs/theme/assets/pymdownx-extras/extra-a2b15a354f.css", "docs/theme/assets/pymdownx-extras/extra-a2b15a354f.css.map", "docs/theme/assets/pymdownx-extras/extra-loader-11e3a2e3.js", "docs/theme/assets/pymdownx-extras/extra-loader-11e3a2e3.js.map", "mkdocs.yml", "package-lock.json", "package.json"]}, {"commit_id": "61b45712d8f01c79fc28207292d492b15884d8b5", "commit_date": "Tue Apr 4 17:02:10 2023 -0600", "commit_message": "Ignore nested snippet sections (#2003)", "files_name": ["docs/src/markdown/about/changelog.md", "pymdownx/snippets.py", "tests/test_extensions/_snippets/section_nested.txt", "tests/test_extensions/test_snippets.py"]}, {"commit_id": "07e4b90f7d90f2b6c61ed464dee64409a538f3f0", "commit_date": "Sun Mar 19 16:27:52 2023 +0300", "commit_message": "Corrected a typo: \"be\" missing (#1991)", "files_name": ["docs/src/markdown/extensions/saneheaders.md"]}, {"commit_id": "59efa285e31e3108af1097cb25a453ff4f3a947a", "commit_date": "Sun Mar 5 08:52:13 2023 -0700", "commit_message": "Update JS doc deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "1756cba0732ca3cae8f45ae01beb5c868c5cc7ea", "commit_date": "Sun Mar 5 08:50:01 2023 -0700", "commit_message": "Add current notes about new Blocks feature", "files_name": ["docs/src/markdown/.snippets/blocksbeta.md", "docs/src/markdown/extensions/blocks/plugins/tab.md", "docs/src/markdown/extensions/details.md", "docs/src/markdown/extensions/tabbed.md"]}, {"commit_id": "9c5224f5cebceba0b49a310df008fda2c983cbd6", "commit_date": "Fri Mar 3 15:26:06 2023 -0700", "commit_message": "Spelling", "files_name": ["docs/src/dictionary/en-custom.txt"]}, {"commit_id": "64ec75956da2b0fb823c7142fa9fdc823cc54af0", "commit_date": "Fri Mar 3 15:22:40 2023 -0700", "commit_message": "Update security", "files_name": ["SECURITY.md"]}, {"commit_id": "31ca9b5a38c7759dc47dfc2f7bfd49ffcac0dbf8", "commit_date": "Fri Mar 3 15:03:38 2023 -0700", "commit_message": "Update some API related descriptions, update changelog, and bump version", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/blocks/api.md", "pymdownx/__meta__.py"]}, {"commit_id": "010181673be3d2d2eb5e3cabe0cdb671220e0bc2", "commit_date": "Fri Mar 3 09:34:16 2023 -0700", "commit_message": "Add new helper functions and add logic for script type tags in HTML ext", "files_name": ["docs/src/dictionary/en-custom.txt", "docs/src/markdown/.snippets/links.md", "docs/src/markdown/extensions/blocks/api.md", "docs/src/markdown/extensions/blocks/index.md", "docs/src/markdown/extensions/blocks/plugins/html.md", "pymdownx/blocks/__init__.py", "pymdownx/blocks/block.py", "pymdownx/blocks/html.py", "tests/test_extensions/test_blocks/test_html.py"]}, {"commit_id": "30de6a2f83b44dca747ea216272d99ca966683db", "commit_date": "Thu Mar 2 16:08:42 2023 -0700", "commit_message": "Fix spelling", "files_name": ["SECURITY.md", "docs/src/dictionary/en-custom.txt"]}, {"commit_id": "92420b41fb6708f29dcd0af17c8247ae1a201673", "commit_date": "Thu Mar 2 15:17:46 2023 -0700", "commit_message": "Add security page to docs", "files_name": ["LICENSE.md", "README.md", "docs/src/markdown/about/security.md", "docs/src/mkdocs.yml", "mkdocs.yml"]}, {"commit_id": "24a40e7518d2373ffcf0b46f2791e5fe8be64c87", "commit_date": "Thu Mar 2 15:08:56 2023 -0700", "commit_message": "Create SECURITY.md", "files_name": ["SECURITY.md"]}, {"commit_id": "e56ce05d8f754d8ebd25de4087aa95b60870f492", "commit_date": "Wed Mar 1 22:06:32 2023 -0700", "commit_message": "Update version", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/blocks/plugins/html.md", "pymdownx/__meta__.py"]}, {"commit_id": "8a0dbb8cb00cf86b6e76653f1a0947cc6afb48b1", "commit_date": "Wed Mar 1 21:42:48 2023 -0700", "commit_message": "Raw blocks should be indented.", "files_name": ["docs/src/dictionary/en-custom.txt", "docs/src/markdown/.snippets/links.md", "docs/src/markdown/extensions/blocks/api.md", "docs/src/markdown/extensions/blocks/index.md", "docs/src/markdown/extensions/blocks/plugins/html.md", "pymdownx/__meta__.py", "pymdownx/blocks/__init__.py", "pymdownx/blocks/block.py", "pymdownx/blocks/html.py", "tests/test_extensions/test_blocks/test_html.py"]}, {"commit_id": "3d894406ea9f61358c702a689e5029586edd032e", "commit_date": "Wed Mar 1 11:58:20 2023 -0700", "commit_message": "Change on_parse to on_validate", "files_name": ["docs/src/markdown/extensions/blocks/api.md", "pymdownx/blocks/__init__.py", "pymdownx/blocks/admonition.py", "pymdownx/blocks/block.py", "pymdownx/blocks/details.py", "pymdownx/blocks/html.py"]}, {"commit_id": "da94db7a526b885fde42a3c1e78aafef83480c21", "commit_date": "Wed Mar 1 09:42:21 2023 -0700", "commit_message": "Allow YAML frontmatter to return null", "files_name": ["pymdownx/blocks/__init__.py", "tests/test_extensions/test_blocks/test_general_blocks.py"]}, {"commit_id": "2ad335472e47a9258ff15c13dbb5df3c07189f78", "commit_date": "Tue Feb 28 20:48:35 2023 -0700", "commit_message": "Docs: Update to use Mermaid 9.4.0", "files_name": ["docs/src/markdown/extensions/superfences.md", "docs/src/markdown/extras/mermaid.md", "docs/src/markdown/index.md", "docs/src/mkdocs.yml", "mkdocs.yml"]}, {"commit_id": "f17d03d8392e4dceabb2c663fffbc29a9baaefc2", "commit_date": "Tue Feb 28 19:35:18 2023 -0700", "commit_message": "Add type_multi and type_none validators for blocks", "files_name": ["docs/src/markdown/extensions/blocks/api.md", "pymdownx/blocks/block.py", "tests/test_extensions/test_blocks/test_general_blocks.py"]}, {"commit_id": "b30cb45090552a91304faaf099431cfedde86faa", "commit_date": "Mon Feb 27 14:41:01 2023 -0700", "commit_message": "Update documentation", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/blocks/api.md"]}, {"commit_id": "995ecae9c09d986c9db28e15c1d3e81c33c6ef56", "commit_date": "Mon Feb 27 14:36:28 2023 -0700", "commit_message": "Add a Blocks on_inline_end event", "files_name": ["pymdownx/__meta__.py", "pymdownx/blocks/__init__.py", "pymdownx/blocks/block.py"]}, {"commit_id": "61396dbccd4e46f7c5219f42180689b1862b237b", "commit_date": "Sat Feb 25 00:26:19 2023 -0700", "commit_message": "Fix block modes (#1966)", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/blocks/plugins/html.md", "pymdownx/__meta__.py", "pymdownx/blocks/__init__.py", "pymdownx/blocks/html.py", "tests/test_extensions/test_blocks/test_html.py"]}, {"commit_id": "8894c4ddd5466cb48ab0570da7c721b8cdbdd384", "commit_date": "Fri Feb 24 08:32:09 2023 -0700", "commit_message": "Set version to beta 2", "files_name": ["docs/src/markdown/about/changelog.md", "pymdownx/__meta__.py"]}, {"commit_id": "5a40bc0f636b9d781793a3bd991f4bb1222327a2", "commit_date": "Thu Feb 23 11:28:18 2023 -0700", "commit_message": "Small tweaks and more documentation clarification", "files_name": ["docs/src/markdown/extensions/blocks/api.md", "docs/src/markdown/extensions/blocks/index.md", "pymdownx/blocks/block.py", "tests/test_extensions/test_blocks/test_general_blocks.py"]}, {"commit_id": "5832f54ff2351150cc1820b9e78d3357ba92b739", "commit_date": "Wed Feb 22 21:43:14 2023 -0700", "commit_message": "Fix collapse code plugin", "files_name": ["pymdownx/__meta__.py", "tools/collapse_code.py"]}, {"commit_id": "235a166f6eee61b4fceec014f90f7824693934ab", "commit_date": "Wed Feb 22 19:35:36 2023 -0700", "commit_message": "Relax hash requirement in link shortening and update GitLab links (#1964)", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/magiclink.md", "pymdownx/magiclink.py", "tests/extensions/magiclink/magiclink (gitlab).html", "tests/extensions/magiclink/magiclink (invalid).html", "tests/extensions/magiclink/magiclink (shorthand).html", "tests/extensions/magiclink/magiclink (shorthand-social).html"]}, {"commit_id": "a42c40917715db79247bb2b8bd2757ce195cdcfb", "commit_date": "Wed Feb 22 16:45:31 2023 -0700", "commit_message": "Snippet enhancements (#1963)", "files_name": ["docs/src/dictionary/en-custom.txt", "docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/snippets.md", "pymdownx/snippets.py", "tests/test_extensions/_snippets/indented.txt", "tests/test_extensions/_snippets/section.txt", "tests/test_extensions/test_snippets.py"]}, {"commit_id": "55d35e4009f680fd59981d0c06cb4d53502ab398", "commit_date": "Wed Feb 22 12:03:24 2023 -0700", "commit_message": "Use code ID to generate linespan and lineanchor IDs (#1962)", "files_name": ["docs/src/markdown/about/changelog.md", "pymdownx/highlight.py", "tests/test_extensions/test_superfences.py"]}, {"commit_id": "d05f528915cbcdc441a690fa8df4d71cf189ae4d", "commit_date": "Wed Feb 22 11:22:20 2023 -0700", "commit_message": "Update JS doc deps", "files_name": [".stylelintrc", "docs/theme/assets/pymdownx-extras/extra-178dc81c41.css", "docs/theme/assets/pymdownx-extras/extra-178dc81c41.css.map", "docs/theme/assets/pymdownx-extras/extra-db537bd871.css", "docs/theme/assets/pymdownx-extras/extra-db537bd871.css.map", "docs/theme/assets/pymdownx-extras/extra-loader-52693605.js.map", "mkdocs.yml", "package-lock.json", "package.json"]}], "windows_after": [{"commit_id": "5e750734b7242d82258a0d9bf1db2ee966634903", "commit_date": "Sun May 14 13:48:44 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["docs/theme/assets/pymdownx-extras/extra-loader-11e3a2e3.js.map", "package-lock.json", "package.json"]}, {"commit_id": "7c13bda5b7793b172efd1abb6712e156a83fe07d", "commit_date": "Mon May 15 23:31:54 2023 -0600", "commit_message": "Fix regression of snippets nested deeply under specified base path (#2039)", "files_name": ["docs/src/markdown/about/changelog.md", "pymdownx/__meta__.py", "pymdownx/snippets.py", "tests/test_extensions/test_snippets.py"]}, {"commit_id": "0b9345a4901eae13e8372fb981327cd8fc3e556b", "commit_date": "Sun Jun 4 22:14:34 2023 +0200", "commit_message": "Fixed Python 3.12 DeprecationWarning (#2055)", "files_name": ["pymdownx/details.py"]}, {"commit_id": "37e96ef8930364e82e812fadf70ebd1572bf1a6b", "commit_date": "Mon Jun 5 07:25:31 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "9d208ad2ebda047c7cf33542718ba46d39ff4413", "commit_date": "Mon Jun 5 07:29:07 2023 -0600", "commit_message": "Update outdated CDN for GitHub emoji assets", "files_name": ["docs/src/markdown/faq.md"]}, {"commit_id": "67b084e6d14cbfa0c6c457e14aeb0e007f67a91a", "commit_date": "Fri Jun 9 12:32:13 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["gulpfile.babel.js", "package-lock.json", "package.json"]}, {"commit_id": "02096269823bc14fb2a3ff9d597f06e15e23cc1f", "commit_date": "Mon Jun 12 10:49:10 2023 -0600", "commit_message": "Bump rollup from 3.24.0 to 3.25.1 (#2070)", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "bd7819bd5f30c4c16bd2ab48afe3bd181e84baec", "commit_date": "Wed Jun 28 07:12:13 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "58098ef9a604cb35c3e75376270fd871f8911fea", "commit_date": "Mon Jul 10 06:32:19 2023 -0600", "commit_message": "Update JS doc deps", "files_name": [".stylelintrc", "docs/theme/assets/pymdownx-extras/extra-a2b15a354f.css.map", "docs/theme/assets/pymdownx-extras/extra-ba994a2e31.css", "docs/theme/assets/pymdownx-extras/extra-ba994a2e31.css.map", "mkdocs.yml", "package-lock.json", "package.json"]}, {"commit_id": "5620778158ffdacae61a27e5771a3efd9c169483", "commit_date": "Mon Jul 10 11:26:17 2023 -0600", "commit_message": "Combine parent header and content tab slug via new option (#2105)", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/blocks/plugins/tab.md", "docs/src/markdown/extensions/tabbed.md", "docs/src/mkdocs.yml", "mkdocs.yml", "pymdownx/__meta__.py", "pymdownx/blocks/tab.py", "pymdownx/tabbed.py", "tests/test_extensions/test_blocks/test_tab.py", "tests/test_extensions/test_tabbed.py"]}, {"commit_id": "37b7451ec9df8775c65c3428cce0e69ae53bc809", "commit_date": "Mon Jul 10 12:25:37 2023 -0600", "commit_message": "Normalize some documentation formatting and fix some issues", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/about/contributing.md", "docs/src/markdown/about/development.md", "docs/src/markdown/about/releases/6.0.md", "docs/src/markdown/about/releases/8.0.md", "docs/src/markdown/about/releases/9.0.md", "docs/src/markdown/extensions/critic.md", "docs/src/markdown/extensions/emoji.md", "docs/src/markdown/extensions/inlinehilite.md", "docs/src/markdown/extensions/keys.md", "docs/src/markdown/extensions/magiclink.md", "docs/src/markdown/extensions/snippets.md", "docs/src/markdown/extensions/superfences.md", "docs/src/markdown/extensions/tabbed.md", "docs/src/markdown/extensions/tasklist.md", "docs/src/markdown/extras/mermaid.md", "docs/src/markdown/faq.md", "docs/src/markdown/usage_notes.md"]}, {"commit_id": "01c91ce79c91304c22b4e3d7a9261accc931d707", "commit_date": "Thu Jul 13 11:56:15 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "e6474b38703b45e3dc431d3c1a0b1f24d80ee7fa", "commit_date": "Mon Jul 17 09:17:17 2023 -0600", "commit_message": "Fix XML deprecation warnings (PY 3.12) (#2114)", "files_name": ["pymdownx/blocks/__init__.py", "pymdownx/blocks/tab.py", "pymdownx/details.py", "pymdownx/tabbed.py"]}, {"commit_id": "182f54fe486f57c558158c011f9eb3e4da032dae", "commit_date": "Tue Jul 25 20:28:10 2023 -0600", "commit_message": "Hide deprecation output in test results", "files_name": ["tests/test_extensions/test_emoji.py", "tests/test_extensions/test_legacy_slugs.py"]}, {"commit_id": "676c537dff2e26d989f20b60d3c004c4040a01fc", "commit_date": "Tue Jul 25 21:38:22 2023 -0600", "commit_message": "Update infrastructure and use ruff instead of flake8 (#2125)", "files_name": [".github/workflows/deploy.yml", "hatch_build.py", "pymdownx/__init__.py", "pymdownx/blocks/__init__.py", "pymdownx/blocks/block.py", "pymdownx/blocks/tab.py", "pymdownx/details.py", "pymdownx/highlight.py", "pymdownx/inlinehilite.py", "pymdownx/magiclink.py", "pymdownx/snippets.py", "pymdownx/superfences.py", "pymdownx/tabbed.py", "pymdownx/tasklist.py", "pymdownx/util.py", "pyproject.toml", "requirements/docs.txt", "requirements/extra.txt", "requirements/lint.txt", "requirements/project.txt", "requirements/test.txt", "requirements/tools.txt", "tests/test_extensions/test_blocks/test_admonitions.py", "tests/test_extensions/test_blocks/test_definition.py", "tests/test_extensions/test_blocks/test_details.py", "tests/test_extensions/test_blocks/test_html.py", "tests/test_extensions/test_blocks/test_legacy_tab.py", "tests/test_extensions/test_blocks/test_tab.py", "tests/test_extensions/test_highlight.py", "tests/test_extensions/test_inlinehilite.py", "tests/test_extensions/test_snippets.py", "tests/test_extensions/test_superfences.py", "tests/test_syntax.py", "tests/util.py", "tools/gen_emoji.py", "tools/gen_gemoji.py", "tox.ini"]}, {"commit_id": "20f8e1bd70fb3592b99c1cb32e8a15dab70e5eee", "commit_date": "Tue Jul 25 21:40:02 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "b2fecc787b9513d43ea1b51df72b078f51d13866", "commit_date": "Tue Jul 25 21:47:55 2023 -0600", "commit_message": "remove unnecessary includes", "files_name": ["pyproject.toml"]}, {"commit_id": "a4e9f1fe6abef18f959c7e5cbc7298fd81616b4a", "commit_date": "Mon Aug 14 14:26:04 2023 -0400", "commit_message": "Fix typo (#2141)", "files_name": ["docs/src/markdown/extensions/blocks/plugins/tab.md"]}, {"commit_id": "c5d9854e320f642cf1866b645439e610f18e7107", "commit_date": "Tue Aug 22 08:55:45 2023 -0600", "commit_message": "Fix greedy stash revert (#2149)", "files_name": ["pymdownx/inlinehilite.py", "pymdownx/superfences.py", "tools/gen_emoji.py"]}, {"commit_id": "58272608daafbef215f6411f4fcafac89e525b04", "commit_date": "Tue Aug 22 08:57:09 2023 -0600", "commit_message": "Update JS Doc deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "e03f02e412a6267f116d253f33a18771716bee57", "commit_date": "Tue Aug 22 09:02:07 2023 -0600", "commit_message": "Bump version and update changelog", "files_name": ["docs/src/markdown/about/changelog.md", "pymdownx/__meta__.py"]}, {"commit_id": "182e8fb80c2087d274513da26bc15958abebc15d", "commit_date": "Sun Aug 27 08:37:54 2023 -0600", "commit_message": "Add new stripnl option to Highlight (#2153)", "files_name": ["docs/src/markdown/about/changelog.md", "docs/src/markdown/extensions/highlight.md", "pymdownx/__meta__.py", "pymdownx/highlight.py", "pymdownx/superfences.py", "tests/test_extensions/test_superfences.py"]}, {"commit_id": "145e3321731f3149dfdb03d5d346e11c0747f434", "commit_date": "Mon Aug 28 10:20:30 2023 -0600", "commit_message": "Update JS doc deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "b0cd18378b3e46a34b65aa9d7184a1346dd286dc", "commit_date": "Mon Aug 28 11:35:27 2023 -0600", "commit_message": "Move dev deps back to requirements files (#2155)", "files_name": [".github/workflows/deploy.yml", "pyproject.toml", "requirements/dev.txt", "requirements/docs.txt", "requirements/lint.txt", "requirements/test.txt", "requirements/tools.txt"]}, {"commit_id": "346b7cc98c30eb716e824dafd35e71471b609ff7", "commit_date": "Wed Aug 30 09:15:21 2023 -0600", "commit_message": "Fix legacy tabbed failure (#2159)", "files_name": ["docs/src/markdown/about/changelog.md", "pymdownx/__meta__.py", "pymdownx/tabbed.py", "tests/test_extensions/test_tabbed.py", "tests/test_extensions/test_tabbed_alternate.py"]}, {"commit_id": "605728a755c14809e479bdc7a0383278560fd0ce", "commit_date": "Sat Sep 2 11:08:17 2023 -0600", "commit_message": "Docs: update JS deps", "files_name": ["package-lock.json", "package.json"]}, {"commit_id": "40abeb667af1896d51939812d247f01a8748c8b5", "commit_date": "Sat Sep 2 12:12:26 2023 -0600", "commit_message": "Support Py 3.12 and drop Py 3.7 (#2164)", "files_name": [".github/workflows/build.yml", "docs/src/markdown/about/changelog.md", "hatch_build.py", "pyproject.toml", "tests/test_syntax.py"]}, {"commit_id": "75f974d93bf6ec1652722edc3d2a02945ba85050", "commit_date": "Sat Sep 2 12:16:19 2023 -0600", "commit_message": "Update version", "files_name": ["pymdownx/__meta__.py"]}], "parents": [{"commit_id_before": "a8fb9666566dfb7e86094082860b5616885d35f4", "url_before": "https://api.github.com/repos/facelessuser/pymdown-extensions/commits/a8fb9666566dfb7e86094082860b5616885d35f4", "html_url_before": "https://github.com/facelessuser/pymdown-extensions/commit/a8fb9666566dfb7e86094082860b5616885d35f4"}], "details": [{"raw_url": "https://github.com/facelessuser/pymdown-extensions/raw/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d/docs%2Fsrc%2Fmarkdown%2Fabout%2Fchangelog.md", "code": "# Changelog\n\n## 10.0\n\n- **Break**: Snippets: snippets will restrict snippets to ensure they are under the `base_path` preventing snippets\n  relative to the `base_path` but not explicitly under it. `restrict_base_path` can be set to `False` for legacy\n  behavior.\n\n## 9.11\n\n- **NEW**: Emoji: Update to new CDN and use Twemoji 14.1.2.\n- **NEW**: Snippets: Ignore nested snippet section syntax when including a section.\n\n## 9.10\n\n- **NEW**: Blocks: Add new experimental general purpose blocks that provide a framework for creating fenced block\n  containers for specialized parsing. A number of extensions utilizing general purpose blocks are included and are meant\n  to be an alternative to (and maybe one day replace): Admonitions, Details, Definition Lists, and Tabbed. Also adds a\n  new HTML plugin for quick wrapping of content with arbitrary HTML elements.\n- **NEW**: Highlight: When enabling line spans and/or line anchors, if a code block has an ID associated with it, line\n  ids will be generated using that code ID instead of the code block count.\n- **NEW**: Snippets: Expand section syntax to allow section names with `-` and `_`.\n- **NEW**: Snippets: When `check_paths` is enabled, and a specified section is not found, raise an error.\n- **NEW**: Snippets: Add new experimental feature `dedent_sections` that will de-indent (remove any common leading\n  whitespace from every line in text) from that block of text.\n- **NEW**: MagicLink: Update GitLab links to match recent changes and to be more correct.\n- **NEW**: MagicLink: Relax required hash length when performing link shortening.\n\n## 9.9.3\n\n- **FIX**: Highlight: Remove extraneous new lines from end of indented code blocks when using\n  `#!py use_pygments = False`.\n\n## 9.9.2\n\n- **FIX**: Snippets syntax can break in XML comments as XML comments do not allow `--`. Relax Snippets syntax such that\n  `-8<-` (single `-`) are allowed.\n\n## 9.9.1\n\n- **FIX**: Use a different CDN for Twemoji icons as MaxCDN is no longer available.\n\n## 9.9\n\n- **ENHANCE**: BetterEm: Further improvements to strong/emphasis handling:\n    - Ensure that one or more consecutive `*` or `_` surrounded by whitespace are not considered as a token.\n- **ENHANCE**: Caret: Apply recent BetterEm improvements to Caret:\n    - Fix case where `^^` nested between `^` would be handled in an unexpected way.\n    - Ensure that one or more consecutive `^` surrounded by whitespace are not considered as a token.\n- **ENHANCE**: Tilde: Apply recent BetterEm improvements to Tilde:\n    - Fix case where `~~` nested between `~` would be handled in an unexpected way.\n    - Ensure that one or more consecutive `~` surrounded by whitespace are not considered a token.\n- **ENHANCE**: Mark: Apply recent BetterEm improvements to Mark:\n    - Ensure that one or more consecutive `=` surrounded by whitespace are not considered a token.\n\n## 9.8\n\n- **NEW**: Formally declare support for Python 3.11.\n- **FIX**: BetterEm: Fix case where `**` nested between `*` would be handled in an unexpected way.\n\n## 9.7\n\n- **NEW**: Tabbed: Add new syntax to allow forcing a specific tab to be select by default.\n- **NEW**: Snippets: Add new option to pass arbitrary HTTP headers.\n- **NEW**: Snippets: Allow specifying sections in a snippet and including just the specified section.\n\n## 9.6\n\n- **NEW**: Highlight: Allow greater granularity of specifying where language guessing takes place via `guess_lang`\n  option (e.g. `block` vs `inline`).\n- **NEW**: Tabbed: Add options for generating tab IDs from tab titles.\n- **NEW**: Snippets: Add support for specifying specific lines for Snippets.\n- **NEW**: Snippets: Commenting out files in block format no longer requires a space directly after `;`.\n- **NEW**: Snippets: A new sane way to escape snippets is now available.\n\n## 9.5\n\n- **NEW**: InlineHilite: Custom inline code block formatters can now be forced to raise an exception by raising a\n  `InlineHiliteException`.\n- **NEW**: Snippets: Add new options to handle importing snippets from URL.\n- **NEW**: Snippets: Snippets will only swallow missing file errors (unless `check_paths` is enabled), all other errors\n  will be propagated up.\n- **NEW**: Snippets: When a file or URL is missing, raise `SnippetMissingError` instead of `IOError`.\n- **FIX**: Snippets: Small issues related to recursive inclusion of snippets.\n\n## 9.4\n\n- **NEW**: Highlight: Changes in order to support Pygments 2.12+. If using Pygments and a version less than 2.12 is\n  installed, Highlight will raise an exception.\n\n## 9.3\n\n- **NEW**: B64: Allow SVG to be encoded and inlined.\n- **NEW**: PathConverter: Add option to use `file://` prefix on absolute paths.\n- **FIX**: Highlight: Ensure that `extend_pygments_lang` is not case sensitive regarding language names.\n\n## 9.2\n\n- **NEW**: Drop Python 3.6 support and formally add Python 3.10 support.\n- **NEW**: Highlight: Add `pygments_lang_option` to enable attaching language classes to Pygments code blocks.\n- **NEW**: SuperFences: Custom fence validators and formatters can now be forced to raise an exception by raising a\n  `SuperFencesException`.\n- **NEW**: Keys: Add `power` and `fingerprint` keys.\n- **FIX**: SuperFences: Fix case where custom fence in a blockquote was not gracefully handled.\n- **FIX**: Arithmatex: fix issue where if you limit the inline or block syntax to specific input types, access to\n  certain matched groups could cause an error.\n\n## 9.1\n\n- **NEW**: Highlight: If `linenums` is enabled globally via the `highlight` extension, and a code block specifies a line\n  number of zero (e.g. SuperFences), disable line numbers for that code block.\n- **FIX**: Snippets: Add missing documentation for `auto_append` feature that was added in 8.2.\n- **FIX**: Highlight: When `attr_list` is enabled, attributes were not properly added to Pygments code blocks in the\n  `table` format. (#1505)\n\n## 9.0\n\nPlease see [Migration Notes](./releases/9.0.md#9.0) for details on upgrading to 9.0.\n\n- **NEW**: Arithmatex: Wrap MathJax \"script\" format (non-preview) with a container element just like all other\n  Arithmatex output formats.\n- **NEW**: Arithmatex: MathJax (non-generic) form's container element now has the `arithmatex` class added just like\n  everywhere else.\n- **NEW**: Arithmatex: Add options to override HTML element container type of inline and block math.\n- **NEW**: Arithmatex: Add new formatter functions intended to replace old math fenced/inline block formatters. New\n  formatter functions are configurable. All others are marked as deprecated and will be removed at some future date.\n- **NEW**: Emoji: Upgraded Twitter emoji database to support latest emoji. It is a known issue that Twitter has\n  `:man_in_santa_hat:` and `:mx_claus:` backwards -- same for `:mrs_claus:` and `:woman_in_santa_hat:`. That is on\n  Twitter's side, not ours.\n- **NEW**: Highlight: Add support for the Pygments option `linespans`.\n- **NEW**: Highlight: Add support for Pygments option `lineanchors`.\n- **NEW**: Highlight: Add support for Pygments option `anchorlinenos`.\n- **NEW**: Highlight: Remove `legacy_no_wrap_code` option.\n- **NEW**: Add support for generating title headers pulled from the Pygments lexer for code blocks. Feature can be\n  enabled via the new `auto_title` option. If a specific name is not preferred, these names can be overridden via\n  a user defined mapping called `auto_title_map`.\n- **NEW**: SuperFences: Allow setting a title, or overriding an auto title via the new `title` option in a fenced code\n  header.\n- **NEW**: SuperFences: Allow adding ID and arbitrary `data-` attributes on Pygments code blocks. The latter requires\n  the `attr_list` extension to be enabled.\n- **NEW**: SuperFences: Removed old deprecated option `highlight_code` which no longer did anything.\n- **NEW**: SuperFences: Remove legacy code meant to help with transitioning to new custom fence function format.\n- **NEW**: Tabbed: New alternate style that allows for a scrollable tabs if they overflow. Feature is experimental, see\n  docs for more information.\n- **NEW**: Slugs: Add new configurable `slugify` function that aims to replace all other slugify methods. Deprecate\n  `uslugify`, `uslugify_encoded`, `uslugify_case`, `uslugify_case_encoded`, `gfm`, and `gfm_encoded`. `slugify` takes\n  parameters returning a function that performs the desired slug handling. `slugify` adds new options `case=\"fold\"` for\n  case folding and `normalize='<normalize format here>'` (uses `NFC` by default).\n- **FIX**: BetterEm: Fix some complex cases related to \"smart\" logic. (#1413)\n- **FIX**: EscapeAll: Fix issue where an escaped HTML entity may end up with incorrect slug and incorrect table of\n  content entry.\n- **FIX**: Highlight: Fix issue that occurs when showing only nth line numbers and using `pymdownx-inline`. Lines not\n  showing a line number would not render with the proper leading space.\n\n## 8.2\n\n- **NEW**: Snippets: now accepts a list of base paths which will be resolved in the order they are specified.\n  Compatibility is present with legacy behavior, and a single string path will still be accepted.\n- **NEW**: Snippets: allow for specifying certain snippets to auto-append to every file. Useful for appending\n  abbreviations, reference links, etc.\n- **NEW**: Snippets: a snippet base path can be a full path to a file. When a base path is a full path to a file, only\n  that file will be included from the specified folder. This allows for targeting a one off file outside of the normal\n  snippet paths(s).\n- **NEW**: MagicLink: add GitHub Discussions support to MagicLink. Can now use `?<num>` to link discussions. Full\n  discussion links will also be shortened if shortening is enabled. (#1187)\n- **NEW**: MagicLink: add new `normalize_issue_symbols` option to make issues, pull request, and discussion links all\n  render with `#` instead of `#`, `!`, and `?` respectively. Input syntax is still the same. Great if you want a GitHub\n  style look where all issue types are just rendered with `#`.\n- **FIX**: MagicLink: documentation will not render links with special icons added via CSS so as not to confuse users\n  that may think that is part of MagicLink. While possible with CSS, MagicLink provides no CSS automatically.\n- **FIX**: Tabbed &amp; Details: Fix corner case with lists. (#1225)\n- **FIX**: Fix issue with unescaping logic in code blocks.\n\n## 8.1.1\n\n- **FIX**: Ensure content immediately before Details content or Tabbed content gets preserved.\n- **FIX**: StripHTML: Fix some corner cases related to stripping comments.\n\n## 8.1\n\n- **NEW**: Drop support for Python 3.5.\n- **NEW**: Officially support Python 3.9.\n- **NEW**: Tabbed titles can now have simple Markdown in them which can be parsed and rendered (like emoji, bold, etc.).\n- **FIX**: Avoid parsing script tags in PathConverter and B64 extensions.\n\n## 8.0.1\n\n- **FIX**: Fix issue with `pymdownx-inline` an Pygments 2.7+.\n\n## 8.0\n\nPlease see [Migration Notes](./releases/8.0.md#8.0) for details on upgrading to 8.0.\n\n- **NEW**: Added SaneHeaders extension.\n- **NEW**: SuperFences \\& InlineHilite: gracefully handle failing custom formatters and/or validators. Users should add\n  their own debug code to their formatter/validator if they suspect it isn't working.\n- **NEW**: SuperFences: if a custom fence validator fails, try the next custom fence until all are exhausted.\n- **NEW**: SuperFences: no longer allow custom options in the form `key=` (no value). Only keys with values or keys with\n  no value and no `=` are accepted. Keys with no value will now assume the value to be the key name.\n- **NEW**: SuperFences: if `attr_list` extension is enabled, fenced code that use brace attribute list style headers\n  (` ```{lang #id .class attr=value}`) will attach arbitrary attributes that are included in the header to the code\n  element.\n- **NEW**: SuperFences: when Pygments is disabled, options (such as `linenums`) included in fenced code headers no\n  longer do anything. If `attr_list` is enabled, and the brace header is used, such options will be treated as HTML\n  attributes. JavaScript highlighter options should be defined in the brace header form with `attr_list` enabled in\n  order to generate appropriate, compatible HTML with the chosen JavaScript highlighter.\n- **NEW**: SuperFences: backwards incompatible changes where made to custom fence API. See\n  [Migration Notes](./releases/8.0.md#8.0) for instructions on how to migrate to the new API. Some temporary support for\n  most of the old format is in place, but is deprecated.\n- **NEW**: SuperFences: has removed legacy code tab feature. Associated `legacy_tab_classes` option has been removed.\n  Please use the Tabbed extension to create general purpose tabs for code blocks or other content.\n- **NEW**: Highlight: add new option `language_prefix` which controls the prefix applied to language classes when\n  Pygments is not being used.\n- **NEW**: Highlight: A new option called `code_attr_on_pre` was added to the Highlight extension and controls whether\n  language classes, and any ids, attributes, and classes that are defined in fenced code attribute list style headers,\n  are attached to the code element or pre element. This has effect when using Pygments.\n- **NEW**: Highlight: option `linenums` now defaults to `None` and accepts `None`, `True`, or `False`. `None` is\n  disabled by default, but can be enabled per code block. `True` enables line numbers globally. `False` disables\n  globally and cannot be enabled manually per code block.\n- **NEW**: ExtraRawHTML: remove extension.\n- **FIX**: Fix issues with complex emphasis combinations in BetterEm.\n- **FIX**: Details: fix corner cases related to extension and lists.\n- **FIX**: Tabbed: fix corner cases related to extension and lists.\n- **FIX**: EscapeAll: Handle HTML entities special.\n- **FIX**: SuperFences: Fix parameter unpacking bug.\n\n## 7.1\n\n- **NEW**: SuperFences will now allow number ranges in `hl_lines` option. (#878)\n- **NEW**: Emoji extension now requires custom emoji indexes to take an `options` and `md` argument. The old\n  non-argument format is deprecated and still accepted, but support for indexes with no arguments will be removed at a\n  future time.\n- **NEW**: Highlight now allows the specifying of a custom line number class when not using Pygments.\n- **FIX**: Better Arithmatex patterns. Fix issue #888 which caused a hang due to a regular expression typo. Also ensure\n  `#!tex $$..$$` and `#!tex begin{}...end{}` patterns properly don't match if the tail markers are escaped.\n\n## 7.0\n\nPlease see [Migration Notes](./releases/7.0.md#7.0) for details on upgrading to 7.0.\n\n- **NEW**: MagicLink will now shorten user name and repository links when link shortening is enabled.\n- **NEW**: Added MagicLink options `social_url_shortener` and `shortener_user_exclude` were added.\n- **NEW**: UML examples are now demonstrated with Mermaid in documentation.\n- **NEW**: SuperFences, if using the attribute list format (` ``` {.lang .additional_class, linenums=\"1\"} `) allows\n  adding additional classes. IDs can be added as well, though Pygments generated code blocks do not have a mechanism to\n  actually insert IDs. The first provided class will always be treated as the language class.\n- **NEW**: Custom SuperFences' formatters should now also include the keyword parameters`classes` and `id_value` to\n  allow injecting classes and IDs via the now supported attribute list format. If a code block defines no additional IDs\n  and classes, the old form will be used. Formatters should include `**kwargs` at the end to future proof them from\n  future changes.\n- **NEW**: Deprecate the SuperFences `highight_code` option. As SuperFences syntax has language classes built right in,\n  disabling the `highlight_code` option makes little sense. While `highlight_code` is still accepted, it currently does\n  nothing and will be removed at some future time.\n- **NEW**: If a custom fence (SuperFences) or inline (InlineHilite) is given the name of `*`, it will override the\n  default fence logic.\n- **NEW**: SuperFences and InlineHilite no longer sync settings from CodeHilite.\n- **NEW**: Add new Tabbed extension for general purpose tabbed content in Markdown.\n- **NEW**: Deprecate old SuperFences tabbed content feature. This will be removed in 8.0.\n- **NEW**: SuperFences' tabbed content classes have changed from `supferfences-tabs` and `superfences-content` to\n  `tabbed-set` and `tabbed-content` respectively. Old style classes can be enabled with the `legacy_tab_classes` option\n  in SuperFences. This new option will be retired with SuperFences tabbed content feature in 8.0.\n- **NEW**: Upgrade to Twemoji 12.1.5.\n- **NEW**: New key codes and key code changes in Keys extension:\n    - Added `super`, `left-super`, and `right-super` key codes as an alternative to `meta`. Aliases `lsuper` and\n      `rsuper` were also added.\n    - Added the `alt-graph` key code with `altgr` alias.\n    - Added the following new aliases: `lwindows` and `rwindows` for consistency.\n    - Added new codes `left-meta` and `right-meta` for consistency with other modifiers. Aliases `lmeta` and `rmeta`\n      were also added.\n    - Added `left-option`, `right-option`, `left-command`, `right-command`, `left-meta`, and `right-meta` codes for\n      consistency across similar modifier keys. Additional aliases were added as well: `loption`, `roption`, `lopt`,\n      `ropt`, `left-opt`, `right-opt`, `lcommand`, `rcommand`, `lcmd`, `rcmd`, `left-cmd`, `right-cmd`, `lmeta`, and\n      `rmeta`.\n    - `alt` no longer uses `menu`, `lmenu`, and `rmenu` as key aliases. `context-menu` now uses the alias `menu`.\n      `context-menu` will display with `Menu` now.\n- **FIX**: Numerous deprecation warnings associated with the recent release of Python Markdown 3.2.\n- **FIX**: Ensure ExtraRawHTML raises a deprecation warning.\n\n## 6.3\n\n- **NEW**: `pymdownx.extrarawhtml` is now deprecated in favor of Python Markdown's `md_in_html` extension found in the\n  3.2 release.\n- **NEW**: When using Pygments 2.4+, code under `pre` elements will also be wrapped in `code` blocks:\n  `#!html <pre><code></code></pre>`. `legacy_no_wrap_code` option has been provided as a temporary way to get the old\n  behavior during the transition period, the option will be removed in the future.\n- **NEW**: Remove deprecated `version` and `version_info`.\n- **FIX**: Allow single word hostnames in MagicLink auto-link.\n\n## 6.2.1\n\n- **FIX**: Fix issue in PathConverter where Windows path conversion from relative to absolute doesn't always work in all\n  browsers.\n\n## 6.2\n\n- **NEW**: Upgrade Twemoji to use 12.1.3.\n- **NEW**: Downgrade and lock EmojiOne version 2.2.7. 2.2.7 is the last truly free version of EmojiOne. This is the\n  safest version that users should use. EmojiOne will not be updated anymore as they are now JoyPixels and have a\n  license that is not that permissible. We've reverted support for any version greater than 2.2.7 to ensure we don't\n  accidentally cause a user to improperly use JoyPixels' assets.\n- **NEW**: Drop specialized `to_awesome` generator for EmojiOne.\n- **FIX**: MagicLink: match the auto-link pattern in the current Markdown package.\n- **FIX**: Fix fenced math escape issue when using MathJax script output format.\n\n## 6.1\n\n- **NEW**: Upgrade Twemoji to 12.1.2 using the latest JoyPixels' (formally EmojiOne) short name index in\n  @JoyPixels/emoji-toolkit 5.0.4.\n- **NEW**: Upgrade EmojiOne to 4.5.0 to the last release in the 4+ series. EmojiOne was rebranded as JoyPixels, but\n  while the index is licensed under MIT, the image assets are no longer as permissible as they once were. The Emoji\n  extension will only reference the last release under the older more permissible license (4.5.0). The option to use the\n  CDN with EmojiOne 2.7 is still available as well which used an even more permissible license.\n- **NEW**: Upgrade Gemoji to 3.0.1.\n- **NEW**: `version` and `version_info` are now accessible via the more standard form `__version__` and\n  `_version_info__`. The old format, while available, is now deprecated.\n- **FIX**: Fix GitHub emoji CDN links to use their latest.\n- **FIX**: Fix issue where entities in the form `&#35;` would trigger MagicLink's shorthand for issues.\n- **FIX**: Don't install tests when installing package.\n- **FIX**: Fix for BetterEm case `**Strong*em,strong***`.\n- **FIX**: Fixes for non-word character boundary cases in BetterEm, Caret, Mark, and Tilde extensions.\n\n## 6.0\n\nPlease see [Migration Notes](./releases/6.0.md#6.0) for details on upgrading to 6.0.0.\n\n- **NEW**: Allow custom inline highlight code blocks. (!380)\n- **NEW**: SuperFences now has one custom format convention which now also accepts the markdown class object to allow\n  access to meta.\n- **NEW**: SuperFences no longer adds `flow` and `sequence` as default custom fences. Users will need to configure them\n  themselves.\n- **NEW**: Add new SuperFences formatters in Arithmatex that are compatible with SuperFences' custom fence feature and\n  InlineHilite's custom inline feature. (!380)\n- **NEW**: Requires Python Markdown 3.0.1 and utilizes the new priority registry when adding extensions and uses the new\n  inline processor API instead of the old methodology.\n- **NEW**: Better aliases for Twemoji specific emoji.\n- **NEW**: Upgrade support for EmojiOne to 4.0.0 and Twemoji to 11.2.0.\n- **FIX**: Fixes to SuperFences behavior of \"preserve tabs\" vs \"normal\" operations.\n- **FIX**: Fixes to PathConverter's output. (#392)\n- **FIX**: Remove unnecessary path code in B64.\n- **FIX**: Fix issues with double escaping entities in code blocks after Python Markdown 3.0 update.\n\n## 5.0\n\n- **NEW**: Add validator to custom fences so custom options can be used. (!350)\n- **NEW**: Add global `linenums_special` option to Highlight extension. Can be overridden per fence in SuperFences.\n  (!360)\n- **NEW**: Add `linenums_style` option to set line number output to Pygments `table` or `inline` format.  Also provide a\n  custom `pymdownx-inline` format for more sane inline output in regards to copy and paste. See Highlight documentation\n  for more info. (!360)\n- **NEW**: Remove deprecated Github and PlainHTML extension. Remove deprecated Arithmatex option `insert_as_script` and\n  deprecated MagicLink option `base_repo_url`.\n- **FIX**: Add workaround in Highlight extension for line number alignment issues in Pygments with certain `step`\n  values. (!360)\n\n## 4.12\n\n- **NEW**: Add option to fail if specified snippet isn't found. (#335)\n- **FIX**: Windows issue with `preserve_tabs` option in SuperFences. (#328)\n\n## 4.11\n\n- **NEW**: Allow Arithmatex's \"smart dollar\" logic to be turned off via setting the option `smart_dollar` to `False`.\n  (#297)\n- **NEW**: Add support for tabbed groups in SuperFences.\n\n## 4.10.2\n\n- **FIX**: Failure with code highlight when guessing is enabled, but a bad language name is provided.\n\n## 4.10.1\n\n- **FIX**: Update Twemoji to 2.6.0 and EmojiOne 3.1.3.\n\n## 4.10\n\n- **NEW**: SuperFences now adds experimental support for preserving tabs in fenced code blocks. (#276)\n\n## 4.9.2\n\n- **FIX**: Issues with task lists that span multiple lines. (#267)\n- **FIX**: Require latest Python Markdown.\n\n## 4.9.1\n\n- **FIX**: Output issue when no user and/or repository is specified.\n\n## 4.9\n\n- **NEW**: Add option to make task lists editable. (!249)\n- **FIX**: Remove internal references to deprecated options.\n\n## 4.8\n\n- **NEW**: Set progress bar class level increments via `progress_increment` instead of using the hard coded value of\n  `20`.\n- **FIX**: Compatibility changes for next Markdown release.\n\n## 4.7\n\n- **NEW**: Bring back generic output for Arithmatex. Now under the `generic` option. (#185)\n- **FIX**: StripHTML should allow space before close of opening tag.\n- **FIX**: MagicLink should not auto-link inside a link. (#151)\n\n## 4.6\n\n- **NEW**: Arithmatex now *just* uses the script wrapper output as it is the most reliable output, and now previews can\n  be achieved by providing a span with class `MathJax_Preview` that gets auto hidden when the math is rendered.\n  `insert_as_script`, `tex_inline_wrap`, and `tex_block_wrap` have all been deprecated as they are now entirely\n  unnecessary. A new option has been added called `preview` that controls whether the script output generates a preview\n  or not when the rendered math output is loading. Users no longer need to configure `tex2jax.js` in there MathJax\n  configuration anymore. (#171)\n- **NEW**: PlainHTML has been renamed to StripHTML. `strip_attributes` is now a list instead of a string with a default\n  of `[]`. `pymdownx.plainhtml` is still available with the old convention for backwards compatibility, but will be\n  removed for version 5.0. (!176)\n- **FIX**: PlainHTML has better script and style content avoidance to keep from stripping HTML tags and attributes from\n  style and script content. (!174)\n- **FIX**: PlainHTML can strip attributes that are not quoted. (!174)\n\n## 4.5.1\n\n- **FIX**: If an invalid provider is given, default to `github`. If no `user` or `repo` is specified, do not convert\n  links that depend on those default values. (#169)\n\n## 4.5\n\n- **NEW**: Add GitLab style compare link shorthand and link shortening. (#160)\n- **NEW**: Deprecate GitHub extension. It is now recommended to just include the extensions you want to create a GitHub\n  feel instead of relying on a an extension to package something close-ish. (#159)\n\n## 4.4\n\n- **NEW**: Add social media mentions -- Twitter only right now. (#156)\n- **FIX**: Use correct regular expression for GitLab and Bitbucket.\n\n## 4.3\n\n- **NEW**: Shorthand format for referencing non-default provider commits, issues, pulls, and mentions. (!147)\n- **NEW**: Shorthand format for mentioning a repo via `@user/repo`. (!149)\n- **NEW**: Add repository provider specific classes. (!149)\n- **NEW**: Make repository labels configurable. (!149)\n- **FIX**: Adjust pattern boundaries auto-links.\n\n## 4.2\n\n- **NEW**: MagicLink can now auto-link a GitHub like shorthand for repository references. (!139)\n- **NEW**: MagicLink now renders pull request links with a slightly different output from issues. (!139)\n- **NEW**: Deprecate `base_repo_url` in MagicLink in favor of the new `provider`, `user`, and `repo`. (!139)\n- **NEW**: MagicLink now adds classes to repository links. (!139)\n- **NEW**: MagicLink now adds title to repository links. (!139)\n- **NEW**: MagicLink no longer styles repository commit hashes as code. (!143)\n- **FIX**: MagicLink repository link outputs now better reflect default user and repository context. (!143)\n- **FIX**: PlainHTML should not strip tags that are part of JavaScript code. (!140)\n\n## 4.1\n\n- **NEW**: Details can now have multiple classes defined.\n\n## 4.0\n\n- **NEW**: Details extension will now derive a title from the class if only a class is provided. (#107)\n- **NEW**: Remove deprecated legacy emoji generator format.\n- **NEW**: Remove deprecated `use_codehilite_settings`.\n- **NEW**: Remove deprecated `spoilers` extension redirect.\n- **NEW**: Update emoji databases: EmojiOne (3.1.2) and Twemoji to .(2.5.0)\n\n## 3.5\n\n- **NEW**: Add new slugs to preserve case. (!103)\n- **NEW**: Add new GFM specific slug (both percent encoded and normal) that only lowercases ASCII chars just like GFM\n  does. (#101)\n- **FIX**: PathConverter should not try and convert obscured email address (with HTML entities). (#100)\n- **FIX**: Don't normalize Unicode in slugs with `NFKD`, use `NFC` instead. (#98)\n- **FIX**: Don't let EscapeAll escape CriticMarkup placeholders.  EscapeAll will no longer escape `STX` and `ETX`; they\n  will just pass through. (#95)\n- **FIX**: Replace CriticMarkup placeholders after replacing raw HTML placeholders. (#95)\n\n## 3.4\n\n- **NEW**: Renamed Spoilers to Details\n- **NEW**: No longer attach the `spoilers` class to `details` tags.\n- **NEW**: Provide better example of UML script in documents.\n\n## 3.3\n\n- **NEW**: Added support for pull request link shortening in MagicLink. (!88)\n- **NEW**: Added new Spoilers extension. (#85)\n\n## 3.2.1\n\n- **FIX**: Cannot set Highlight's CSS class.\n\n## 3.2\n\n- **NEW**: Add support for Twemoji 2.3.5.\n- **NEW**: Update to EmojiOne 3.0.2.\n- **NEW**: Emoji generators now also take `category` which is also no included in all indexes.\n- **FIX**: Excessive new lines at end of code blocks.\n\n## 3.1\n\n- **NEW**: Highlight extension now runs normal indented code blocks through highlighter.\n- **FIX**: When Pygments is disabled, `linenums` class was attached to code blocks even if `linenums` was disabled and\n  not enabled via fence headers.\n\n## 3.0\n\n- **NEW**: Added Keys extension.\n- **NEW**: Generalized custom fences (#60). `flow` and `sequence` fence are now just custom fences and can be disabled\n  simply by overwriting the `custom_fences` setting.\n- **NEW**: Remove deprecated `no_nl2br` in GitHub extension. (#24)\n- **NEW**: Remove deprecated HeaderAnchor extension. (#24)\n- **NEW**: Remove deprecated PyMdown extension. (#24)\n- **NEW**: Remove deprecated GitHubEmoji extension. (#24)\n- **NEW**: Remove deprecated `nested` option in SuperFences. (#24)\n- **NEW**: Wrapper extensions (such as GitHub and Extra) can now allow setting the included sub extensions settings\n  (#61). Workaround settings that directly set specific extensions settings has been removed.\n- **NEW**: Deprecated `use_codehilite_settings` in SuperFences and InlineHilite and now does nothing.  The settings will\n  be removed in the future.  If `pymdownx.highlight` is used, it's settings will be used instead of CodeHilite.\n  Eventually, the both SuperFences and InlineHilite will require `pymdownx.highlight` to be used and will have\n  CodeHilite support stripped.\n- **FIX**: Fix MathJax CDN references and usage in documentation.  MathJax CDN is shutting down and must now use\n  Cloudflare CDN. (#63)\n\n## 2.0\n\n- **NEW**: SuperFences and InlineHilite can be configured via the new Highlight extension.\n- **NEW**: InlineHilite now has all highlighting features pushed to the Highlight extension.  This removes all the\n  CodeHilite code that used to be in it and instead relocates it to Highlight.\n- **NEW**: Deprecate the nesting option in SuperFences.  Nesting is default and the only acceptable behavior moving\n  forward.  The ability to turn off nesting will be removed in 3.0.\n\n## 1.8\n\n- **NEW**: MagicLink special repository link shortener for GitHub, GitLab, and Bitbucket. (#49)\n- **FIX**: GitHub asterisk emphasis should never have had smart enabled for it. (#50)\n- **FIX**: MagicLink fix for compatibility with wrapped symbols like `~`, `*` etc. which are commonly used.\n- **FIX**: MagicLink encodes emails like Python Markdown does for consistency.\n- **FIX**: MagicLink doesn't allow Unicode for email and does allow Unicode in a URL. (#53)\n- **FIX**: InlineHilite now returns a proper `etree` element so that the `attr_list` extension and function properly\n  with it. (#48)\n- **FIX**: InlineHilite will no longer break if Pygments is not installed (478b410a2199d55f3e70b452516511d3810c61a5).\n\n## 1.7\n\n- **NEW**: Arithmatex now supports `\\(...\\)`, `\\[...\\]`, and `\\begin{}...\\end{}`.\n- **NEW**: Arithmatex has an option to embed the math code in MathJax script tags.\n- **FIX**: Unfortunately the wrap option is now run through an HTML escaper and HTML tags can no longer be fed in this\n  way.  Arithmatex also now wraps \"wrapped\" content with spans to containerize content and keep one equation from\n  bleeding into the next.\n- **FIX**: Better handling of escaped Arithmatex inline tokens.\n- **FIX**: Better handling of escaped InlineHilite tokens.\n- **FIX**: Update InlineHilite and SuperFences so that the language option can accept things like `c#` and `.net` etc.\n- **FIX**: Snippets now removes carriage returns from imported files to prevent breakage.\n\n## 1.6.1\n\n- **FIX**: Don't install tools or tests folder when installing from Pypi.\n\n## 1.6\n\n- **NEW**: EscapeAll has the option to perform more like Pandoc in that you can enable escaped newlines to be\n  `hardbreaks`, and escaped spaces to be `nbsp`.\n- **NEW**: Rework poorly thought out snippets format to require quoting file names with single line format.  Add a block\n  format.  Allow commenting out lines temporarily.  And allow a way to escape them by placing a space after them.\n- **FIX**: Fix documentation issues.\n\n## 1.5\n\n- **NEW**: New EscapeAll extension.\n- **NEW**: New Snippets extension for including external files into a Markdown file.\n- **NEW**: Arithmatex now has configurable output wrapper.\n- **NEW**: PathConverter no longer verifies existence of path to allow it more flexible usage.\n- **NEW**: PathConverter now only converts relative paths when converting to a relative or absolute location.\n- **NEW**: Improved support for path path identification for PathConverter and B64.\n- **FIX**: Fixed issue where Arithmatex was un-escaping `$` within math region.\n- **FIX**: Fixed issue where plugins would append globally changing the escape list opposed to just in the in the\n  Markdown instance.\n- **FIX**: Fixed logic issue where the `mark`, `caret`, and `tilde` extension weren't quite modeling `betterem` inline\n  behavior.\n- **FIX**: Critics shouldn't allow escaping critic marks as it is not in the spec.\n\n## 1.4\n\n- **NEW**: HeaderAnchor extension is now deprecated.  It will be removed in a future version.\n- **NEW**: HeaderAnchor is no longer included in the `pymdownx.github` extension.\n- **NEW**: Slugify functions are moved to `pymdownx.slug` in preparation of HeaderAnchor removal.\n- **FIX**: GitHubEmoji is not \"pending\" deprecation, but is actually deprecated.\n\n## 1.3\n\n- **NEW**: New Emoji extension that aims to replace GitHubEmoji.  By default it is configured for EmojiOne and Gemoji\n  (GitHub's emoji).\n- **NEW**: GitHubEmoji is deprecated. Please use the Emoji extension instead.\n- **NEW**: PyMdown extension is deprecated.  PyMdown extension was just a wrapper, please configure the desired\n  individual extension(s) instead of relying on PyMdown.\n- **NEW**: `github` extension now turns off `nl2br` by default in order properly emulate recent changes in GFM.\n  `no_nl2br` option is deprecated and will be removed in the future as it no longer reflects GFM behavior.\n\n## 1.2\n\n- **NEW**: Add option to output task lists in a more customizable way.\n\n## 1.1\n\n- **NEW**: Add pypi 3.5 info in setup\n- **NEW**: Add option to MagicLink extension to allow the stripping of link protocols (`http://` etc.).\n- **NEW**: Add option to `github` extension to disable the use of `nl2br` to reflect recent changes to GitHub Flavored\n  Markdown.  Currently the default is the legacy (uses `nl2br`), but a warning will be displayed.  In the future, the\n  option will be defaulted to not use `nl2br`.\n\n## 1.0.1\n\n- **FIX**: Ordinal number 11th, 12th, and 13th\n\n## 1.0.0\n\n- **NEW**: Initial release.\n", "code_before": "# Changelog\n\n## 9.11\n\n- **NEW**: Emoji: Update to new CDN and use Twemoji 14.1.2.\n- **NEW**: Snippets: Ignore nested snippet section syntax when including a section.\n\n## 9.10\n\n- **NEW**: Blocks: Add new experimental general purpose blocks that provide a framework for creating fenced block\n  containers for specialized parsing. A number of extensions utilizing general purpose blocks are included and are meant\n  to be an alternative to (and maybe one day replace): Admonitions, Details, Definition Lists, and Tabbed. Also adds a\n  new HTML plugin for quick wrapping of content with arbitrary HTML elements.\n- **NEW**: Highlight: When enabling line spans and/or line anchors, if a code block has an ID associated with it, line\n  ids will be generated using that code ID instead of the code block count.\n- **NEW**: Snippets: Expand section syntax to allow section names with `-` and `_`.\n- **NEW**: Snippets: When `check_paths` is enabled, and a specified section is not found, raise an error.\n- **NEW**: Snippets: Add new experimental feature `dedent_sections` that will de-indent (remove any common leading\n  whitespace from every line in text) from that block of text.\n- **NEW**: MagicLink: Update GitLab links to match recent changes and to be more correct.\n- **NEW**: MagicLink: Relax required hash length when performing link shortening.\n\n## 9.9.3\n\n- **FIX**: Highlight: Remove extraneous new lines from end of indented code blocks when using\n  `#!py use_pygments = False`.\n\n## 9.9.2\n\n- **FIX**: Snippets syntax can break in XML comments as XML comments do not allow `--`. Relax Snippets syntax such that\n  `-8<-` (single `-`) are allowed.\n\n## 9.9.1\n\n- **FIX**: Use a different CDN for Twemoji icons as MaxCDN is no longer available.\n\n## 9.9\n\n- **ENHANCE**: BetterEm: Further improvements to strong/emphasis handling:\n    - Ensure that one or more consecutive `*` or `_` surrounded by whitespace are not considered as a token.\n- **ENHANCE**: Caret: Apply recent BetterEm improvements to Caret:\n    - Fix case where `^^` nested between `^` would be handled in an unexpected way.\n    - Ensure that one or more consecutive `^` surrounded by whitespace are not considered as a token.\n- **ENHANCE**: Tilde: Apply recent BetterEm improvements to Tilde:\n    - Fix case where `~~` nested between `~` would be handled in an unexpected way.\n    - Ensure that one or more consecutive `~` surrounded by whitespace are not considered a token.\n- **ENHANCE**: Mark: Apply recent BetterEm improvements to Mark:\n    - Ensure that one or more consecutive `=` surrounded by whitespace are not considered a token.\n\n## 9.8\n\n- **NEW**: Formally declare support for Python 3.11.\n- **FIX**: BetterEm: Fix case where `**` nested between `*` would be handled in an unexpected way.\n\n## 9.7\n\n- **NEW**: Tabbed: Add new syntax to allow forcing a specific tab to be select by default.\n- **NEW**: Snippets: Add new option to pass arbitrary HTTP headers.\n- **NEW**: Snippets: Allow specifying sections in a snippet and including just the specified section.\n\n## 9.6\n\n- **NEW**: Highlight: Allow greater granularity of specifying where language guessing takes place via `guess_lang`\n  option (e.g. `block` vs `inline`).\n- **NEW**: Tabbed: Add options for generating tab IDs from tab titles.\n- **NEW**: Snippets: Add support for specifying specific lines for Snippets.\n- **NEW**: Snippets: Commenting out files in block format no longer requires a space directly after `;`.\n- **NEW**: Snippets: A new sane way to escape snippets is now available.\n\n## 9.5\n\n- **NEW**: InlineHilite: Custom inline code block formatters can now be forced to raise an exception by raising a\n  `InlineHiliteException`.\n- **NEW**: Snippets: Add new options to handle importing snippets from URL.\n- **NEW**: Snippets: Snippets will only swallow missing file errors (unless `check_paths` is enabled), all other errors\n  will be propagated up.\n- **NEW**: Snippets: When a file or URL is missing, raise `SnippetMissingError` instead of `IOError`.\n- **FIX**: Snippets: Small issues related to recursive inclusion of snippets.\n\n## 9.4\n\n- **NEW**: Highlight: Changes in order to support Pygments 2.12+. If using Pygments and a version less than 2.12 is\n  installed, Highlight will raise an exception.\n\n## 9.3\n\n- **NEW**: B64: Allow SVG to be encoded and inlined.\n- **NEW**: PathConverter: Add option to use `file://` prefix on absolute paths.\n- **FIX**: Highlight: Ensure that `extend_pygments_lang` is not case sensitive regarding language names.\n\n## 9.2\n\n- **NEW**: Drop Python 3.6 support and formally add Python 3.10 support.\n- **NEW**: Highlight: Add `pygments_lang_option` to enable attaching language classes to Pygments code blocks.\n- **NEW**: SuperFences: Custom fence validators and formatters can now be forced to raise an exception by raising a\n  `SuperFencesException`.\n- **NEW**: Keys: Add `power` and `fingerprint` keys.\n- **FIX**: SuperFences: Fix case where custom fence in a blockquote was not gracefully handled.\n- **FIX**: Arithmatex: fix issue where if you limit the inline or block syntax to specific input types, access to\n  certain matched groups could cause an error.\n\n## 9.1\n\n- **NEW**: Highlight: If `linenums` is enabled globally via the `highlight` extension, and a code block specifies a line\n  number of zero (e.g. SuperFences), disable line numbers for that code block.\n- **FIX**: Snippets: Add missing documentation for `auto_append` feature that was added in 8.2.\n- **FIX**: Highlight: When `attr_list` is enabled, attributes were not properly added to Pygments code blocks in the\n  `table` format. (#1505)\n\n## 9.0\n\nPlease see [Migration Notes](./releases/9.0.md#9.0) for details on upgrading to 9.0.\n\n- **NEW**: Arithmatex: Wrap MathJax \"script\" format (non-preview) with a container element just like all other\n  Arithmatex output formats.\n- **NEW**: Arithmatex: MathJax (non-generic) form's container element now has the `arithmatex` class added just like\n  everywhere else.\n- **NEW**: Arithmatex: Add options to override HTML element container type of inline and block math.\n- **NEW**: Arithmatex: Add new formatter functions intended to replace old math fenced/inline block formatters. New\n  formatter functions are configurable. All others are marked as deprecated and will be removed at some future date.\n- **NEW**: Emoji: Upgraded Twitter emoji database to support latest emoji. It is a known issue that Twitter has\n  `:man_in_santa_hat:` and `:mx_claus:` backwards -- same for `:mrs_claus:` and `:woman_in_santa_hat:`. That is on\n  Twitter's side, not ours.\n- **NEW**: Highlight: Add support for the Pygments option `linespans`.\n- **NEW**: Highlight: Add support for Pygments option `lineanchors`.\n- **NEW**: Highlight: Add support for Pygments option `anchorlinenos`.\n- **NEW**: Highlight: Remove `legacy_no_wrap_code` option.\n- **NEW**: Add support for generating title headers pulled from the Pygments lexer for code blocks. Feature can be\n  enabled via the new `auto_title` option. If a specific name is not preferred, these names can be overridden via\n  a user defined mapping called `auto_title_map`.\n- **NEW**: SuperFences: Allow setting a title, or overriding an auto title via the new `title` option in a fenced code\n  header.\n- **NEW**: SuperFences: Allow adding ID and arbitrary `data-` attributes on Pygments code blocks. The latter requires\n  the `attr_list` extension to be enabled.\n- **NEW**: SuperFences: Removed old deprecated option `highlight_code` which no longer did anything.\n- **NEW**: SuperFences: Remove legacy code meant to help with transitioning to new custom fence function format.\n- **NEW**: Tabbed: New alternate style that allows for a scrollable tabs if they overflow. Feature is experimental, see\n  docs for more information.\n- **NEW**: Slugs: Add new configurable `slugify` function that aims to replace all other slugify methods. Deprecate\n  `uslugify`, `uslugify_encoded`, `uslugify_case`, `uslugify_case_encoded`, `gfm`, and `gfm_encoded`. `slugify` takes\n  parameters returning a function that performs the desired slug handling. `slugify` adds new options `case=\"fold\"` for\n  case folding and `normalize='<normalize format here>'` (uses `NFC` by default).\n- **FIX**: BetterEm: Fix some complex cases related to \"smart\" logic. (#1413)\n- **FIX**: EscapeAll: Fix issue where an escaped HTML entity may end up with incorrect slug and incorrect table of\n  content entry.\n- **FIX**: Highlight: Fix issue that occurs when showing only nth line numbers and using `pymdownx-inline`. Lines not\n  showing a line number would not render with the proper leading space.\n\n## 8.2\n\n- **NEW**: Snippets: now accepts a list of base paths which will be resolved in the order they are specified.\n  Compatibility is present with legacy behavior, and a single string path will still be accepted.\n- **NEW**: Snippets: allow for specifying certain snippets to auto-append to every file. Useful for appending\n  abbreviations, reference links, etc.\n- **NEW**: Snippets: a snippet base path can be a full path to a file. When a base path is a full path to a file, only\n  that file will be included from the specified folder. This allows for targeting a one off file outside of the normal\n  snippet paths(s).\n- **NEW**: MagicLink: add GitHub Discussions support to MagicLink. Can now use `?<num>` to link discussions. Full\n  discussion links will also be shortened if shortening is enabled. (#1187)\n- **NEW**: MagicLink: add new `normalize_issue_symbols` option to make issues, pull request, and discussion links all\n  render with `#` instead of `#`, `!`, and `?` respectively. Input syntax is still the same. Great if you want a GitHub\n  style look where all issue types are just rendered with `#`.\n- **FIX**: MagicLink: documentation will not render links with special icons added via CSS so as not to confuse users\n  that may think that is part of MagicLink. While possible with CSS, MagicLink provides no CSS automatically.\n- **FIX**: Tabbed &amp; Details: Fix corner case with lists. (#1225)\n- **FIX**: Fix issue with unescaping logic in code blocks.\n\n## 8.1.1\n\n- **FIX**: Ensure content immediately before Details content or Tabbed content gets preserved.\n- **FIX**: StripHTML: Fix some corner cases related to stripping comments.\n\n## 8.1\n\n- **NEW**: Drop support for Python 3.5.\n- **NEW**: Officially support Python 3.9.\n- **NEW**: Tabbed titles can now have simple Markdown in them which can be parsed and rendered (like emoji, bold, etc.).\n- **FIX**: Avoid parsing script tags in PathConverter and B64 extensions.\n\n## 8.0.1\n\n- **FIX**: Fix issue with `pymdownx-inline` an Pygments 2.7+.\n\n## 8.0\n\nPlease see [Migration Notes](./releases/8.0.md#8.0) for details on upgrading to 8.0.\n\n- **NEW**: Added SaneHeaders extension.\n- **NEW**: SuperFences \\& InlineHilite: gracefully handle failing custom formatters and/or validators. Users should add\n  their own debug code to their formatter/validator if they suspect it isn't working.\n- **NEW**: SuperFences: if a custom fence validator fails, try the next custom fence until all are exhausted.\n- **NEW**: SuperFences: no longer allow custom options in the form `key=` (no value). Only keys with values or keys with\n  no value and no `=` are accepted. Keys with no value will now assume the value to be the key name.\n- **NEW**: SuperFences: if `attr_list` extension is enabled, fenced code that use brace attribute list style headers\n  (` ```{lang #id .class attr=value}`) will attach arbitrary attributes that are included in the header to the code\n  element.\n- **NEW**: SuperFences: when Pygments is disabled, options (such as `linenums`) included in fenced code headers no\n  longer do anything. If `attr_list` is enabled, and the brace header is used, such options will be treated as HTML\n  attributes. JavaScript highlighter options should be defined in the brace header form with `attr_list` enabled in\n  order to generate appropriate, compatible HTML with the chosen JavaScript highlighter.\n- **NEW**: SuperFences: backwards incompatible changes where made to custom fence API. See\n  [Migration Notes](./releases/8.0.md#8.0) for instructions on how to migrate to the new API. Some temporary support for\n  most of the old format is in place, but is deprecated.\n- **NEW**: SuperFences: has removed legacy code tab feature. Associated `legacy_tab_classes` option has been removed.\n  Please use the Tabbed extension to create general purpose tabs for code blocks or other content.\n- **NEW**: Highlight: add new option `language_prefix` which controls the prefix applied to language classes when\n  Pygments is not being used.\n- **NEW**: Highlight: A new option called `code_attr_on_pre` was added to the Highlight extension and controls whether\n  language classes, and any ids, attributes, and classes that are defined in fenced code attribute list style headers,\n  are attached to the code element or pre element. This has effect when using Pygments.\n- **NEW**: Highlight: option `linenums` now defaults to `None` and accepts `None`, `True`, or `False`. `None` is\n  disabled by default, but can be enabled per code block. `True` enables line numbers globally. `False` disables\n  globally and cannot be enabled manually per code block.\n- **NEW**: ExtraRawHTML: remove extension.\n- **FIX**: Fix issues with complex emphasis combinations in BetterEm.\n- **FIX**: Details: fix corner cases related to extension and lists.\n- **FIX**: Tabbed: fix corner cases related to extension and lists.\n- **FIX**: EscapeAll: Handle HTML entities special.\n- **FIX**: SuperFences: Fix parameter unpacking bug.\n\n## 7.1\n\n- **NEW**: SuperFences will now allow number ranges in `hl_lines` option. (#878)\n- **NEW**: Emoji extension now requires custom emoji indexes to take an `options` and `md` argument. The old\n  non-argument format is deprecated and still accepted, but support for indexes with no arguments will be removed at a\n  future time.\n- **NEW**: Highlight now allows the specifying of a custom line number class when not using Pygments.\n- **FIX**: Better Arithmatex patterns. Fix issue #888 which caused a hang due to a regular expression typo. Also ensure\n  `#!tex $$..$$` and `#!tex begin{}...end{}` patterns properly don't match if the tail markers are escaped.\n\n## 7.0\n\nPlease see [Migration Notes](./releases/7.0.md#7.0) for details on upgrading to 7.0.\n\n- **NEW**: MagicLink will now shorten user name and repository links when link shortening is enabled.\n- **NEW**: Added MagicLink options `social_url_shortener` and `shortener_user_exclude` were added.\n- **NEW**: UML examples are now demonstrated with Mermaid in documentation.\n- **NEW**: SuperFences, if using the attribute list format (` ``` {.lang .additional_class, linenums=\"1\"} `) allows\n  adding additional classes. IDs can be added as well, though Pygments generated code blocks do not have a mechanism to\n  actually insert IDs. The first provided class will always be treated as the language class.\n- **NEW**: Custom SuperFences' formatters should now also include the keyword parameters`classes` and `id_value` to\n  allow injecting classes and IDs via the now supported attribute list format. If a code block defines no additional IDs\n  and classes, the old form will be used. Formatters should include `**kwargs` at the end to future proof them from\n  future changes.\n- **NEW**: Deprecate the SuperFences `highight_code` option. As SuperFences syntax has language classes built right in,\n  disabling the `highlight_code` option makes little sense. While `highlight_code` is still accepted, it currently does\n  nothing and will be removed at some future time.\n- **NEW**: If a custom fence (SuperFences) or inline (InlineHilite) is given the name of `*`, it will override the\n  default fence logic.\n- **NEW**: SuperFences and InlineHilite no longer sync settings from CodeHilite.\n- **NEW**: Add new Tabbed extension for general purpose tabbed content in Markdown.\n- **NEW**: Deprecate old SuperFences tabbed content feature. This will be removed in 8.0.\n- **NEW**: SuperFences' tabbed content classes have changed from `supferfences-tabs` and `superfences-content` to\n  `tabbed-set` and `tabbed-content` respectively. Old style classes can be enabled with the `legacy_tab_classes` option\n  in SuperFences. This new option will be retired with SuperFences tabbed content feature in 8.0.\n- **NEW**: Upgrade to Twemoji 12.1.5.\n- **NEW**: New key codes and key code changes in Keys extension:\n    - Added `super`, `left-super`, and `right-super` key codes as an alternative to `meta`. Aliases `lsuper` and\n      `rsuper` were also added.\n    - Added the `alt-graph` key code with `altgr` alias.\n    - Added the following new aliases: `lwindows` and `rwindows` for consistency.\n    - Added new codes `left-meta` and `right-meta` for consistency with other modifiers. Aliases `lmeta` and `rmeta`\n      were also added.\n    - Added `left-option`, `right-option`, `left-command`, `right-command`, `left-meta`, and `right-meta` codes for\n      consistency across similar modifier keys. Additional aliases were added as well: `loption`, `roption`, `lopt`,\n      `ropt`, `left-opt`, `right-opt`, `lcommand`, `rcommand`, `lcmd`, `rcmd`, `left-cmd`, `right-cmd`, `lmeta`, and\n      `rmeta`.\n    - `alt` no longer uses `menu`, `lmenu`, and `rmenu` as key aliases. `context-menu` now uses the alias `menu`.\n      `context-menu` will display with `Menu` now.\n- **FIX**: Numerous deprecation warnings associated with the recent release of Python Markdown 3.2.\n- **FIX**: Ensure ExtraRawHTML raises a deprecation warning.\n\n## 6.3\n\n- **NEW**: `pymdownx.extrarawhtml` is now deprecated in favor of Python Markdown's `md_in_html` extension found in the\n  3.2 release.\n- **NEW**: When using Pygments 2.4+, code under `pre` elements will also be wrapped in `code` blocks:\n  `#!html <pre><code></code></pre>`. `legacy_no_wrap_code` option has been provided as a temporary way to get the old\n  behavior during the transition period, the option will be removed in the future.\n- **NEW**: Remove deprecated `version` and `version_info`.\n- **FIX**: Allow single word hostnames in MagicLink auto-link.\n\n## 6.2.1\n\n- **FIX**: Fix issue in PathConverter where Windows path conversion from relative to absolute doesn't always work in all\n  browsers.\n\n## 6.2\n\n- **NEW**: Upgrade Twemoji to use 12.1.3.\n- **NEW**: Downgrade and lock EmojiOne version 2.2.7. 2.2.7 is the last truly free version of EmojiOne. This is the\n  safest version that users should use. EmojiOne will not be updated anymore as they are now JoyPixels and have a\n  license that is not that permissible. We've reverted support for any version greater than 2.2.7 to ensure we don't\n  accidentally cause a user to improperly use JoyPixels' assets.\n- **NEW**: Drop specialized `to_awesome` generator for EmojiOne.\n- **FIX**: MagicLink: match the auto-link pattern in the current Markdown package.\n- **FIX**: Fix fenced math escape issue when using MathJax script output format.\n\n## 6.1\n\n- **NEW**: Upgrade Twemoji to 12.1.2 using the latest JoyPixels' (formally EmojiOne) short name index in\n  @JoyPixels/emoji-toolkit 5.0.4.\n- **NEW**: Upgrade EmojiOne to 4.5.0 to the last release in the 4+ series. EmojiOne was rebranded as JoyPixels, but\n  while the index is licensed under MIT, the image assets are no longer as permissible as they once were. The Emoji\n  extension will only reference the last release under the older more permissible license (4.5.0). The option to use the\n  CDN with EmojiOne 2.7 is still available as well which used an even more permissible license.\n- **NEW**: Upgrade Gemoji to 3.0.1.\n- **NEW**: `version` and `version_info` are now accessible via the more standard form `__version__` and\n  `_version_info__`. The old format, while available, is now deprecated.\n- **FIX**: Fix GitHub emoji CDN links to use their latest.\n- **FIX**: Fix issue where entities in the form `&#35;` would trigger MagicLink's shorthand for issues.\n- **FIX**: Don't install tests when installing package.\n- **FIX**: Fix for BetterEm case `**Strong*em,strong***`.\n- **FIX**: Fixes for non-word character boundary cases in BetterEm, Caret, Mark, and Tilde extensions.\n\n## 6.0\n\nPlease see [Migration Notes](./releases/6.0.md#6.0) for details on upgrading to 6.0.0.\n\n- **NEW**: Allow custom inline highlight code blocks. (!380)\n- **NEW**: SuperFences now has one custom format convention which now also accepts the markdown class object to allow\n  access to meta.\n- **NEW**: SuperFences no longer adds `flow` and `sequence` as default custom fences. Users will need to configure them\n  themselves.\n- **NEW**: Add new SuperFences formatters in Arithmatex that are compatible with SuperFences' custom fence feature and\n  InlineHilite's custom inline feature. (!380)\n- **NEW**: Requires Python Markdown 3.0.1 and utilizes the new priority registry when adding extensions and uses the new\n  inline processor API instead of the old methodology.\n- **NEW**: Better aliases for Twemoji specific emoji.\n- **NEW**: Upgrade support for EmojiOne to 4.0.0 and Twemoji to 11.2.0.\n- **FIX**: Fixes to SuperFences behavior of \"preserve tabs\" vs \"normal\" operations.\n- **FIX**: Fixes to PathConverter's output. (#392)\n- **FIX**: Remove unnecessary path code in B64.\n- **FIX**: Fix issues with double escaping entities in code blocks after Python Markdown 3.0 update.\n\n## 5.0\n\n- **NEW**: Add validator to custom fences so custom options can be used. (!350)\n- **NEW**: Add global `linenums_special` option to Highlight extension. Can be overridden per fence in SuperFences.\n  (!360)\n- **NEW**: Add `linenums_style` option to set line number output to Pygments `table` or `inline` format.  Also provide a\n  custom `pymdownx-inline` format for more sane inline output in regards to copy and paste. See Highlight documentation\n  for more info. (!360)\n- **NEW**: Remove deprecated Github and PlainHTML extension. Remove deprecated Arithmatex option `insert_as_script` and\n  deprecated MagicLink option `base_repo_url`.\n- **FIX**: Add workaround in Highlight extension for line number alignment issues in Pygments with certain `step`\n  values. (!360)\n\n## 4.12\n\n- **NEW**: Add option to fail if specified snippet isn't found. (#335)\n- **FIX**: Windows issue with `preserve_tabs` option in SuperFences. (#328)\n\n## 4.11\n\n- **NEW**: Allow Arithmatex's \"smart dollar\" logic to be turned off via setting the option `smart_dollar` to `False`.\n  (#297)\n- **NEW**: Add support for tabbed groups in SuperFences.\n\n## 4.10.2\n\n- **FIX**: Failure with code highlight when guessing is enabled, but a bad language name is provided.\n\n## 4.10.1\n\n- **FIX**: Update Twemoji to 2.6.0 and EmojiOne 3.1.3.\n\n## 4.10\n\n- **NEW**: SuperFences now adds experimental support for preserving tabs in fenced code blocks. (#276)\n\n## 4.9.2\n\n- **FIX**: Issues with task lists that span multiple lines. (#267)\n- **FIX**: Require latest Python Markdown.\n\n## 4.9.1\n\n- **FIX**: Output issue when no user and/or repository is specified.\n\n## 4.9\n\n- **NEW**: Add option to make task lists editable. (!249)\n- **FIX**: Remove internal references to deprecated options.\n\n## 4.8\n\n- **NEW**: Set progress bar class level increments via `progress_increment` instead of using the hard coded value of\n  `20`.\n- **FIX**: Compatibility changes for next Markdown release.\n\n## 4.7\n\n- **NEW**: Bring back generic output for Arithmatex. Now under the `generic` option. (#185)\n- **FIX**: StripHTML should allow space before close of opening tag.\n- **FIX**: MagicLink should not auto-link inside a link. (#151)\n\n## 4.6\n\n- **NEW**: Arithmatex now *just* uses the script wrapper output as it is the most reliable output, and now previews can\n  be achieved by providing a span with class `MathJax_Preview` that gets auto hidden when the math is rendered.\n  `insert_as_script`, `tex_inline_wrap`, and `tex_block_wrap` have all been deprecated as they are now entirely\n  unnecessary. A new option has been added called `preview` that controls whether the script output generates a preview\n  or not when the rendered math output is loading. Users no longer need to configure `tex2jax.js` in there MathJax\n  configuration anymore. (#171)\n- **NEW**: PlainHTML has been renamed to StripHTML. `strip_attributes` is now a list instead of a string with a default\n  of `[]`. `pymdownx.plainhtml` is still available with the old convention for backwards compatibility, but will be\n  removed for version 5.0. (!176)\n- **FIX**: PlainHTML has better script and style content avoidance to keep from stripping HTML tags and attributes from\n  style and script content. (!174)\n- **FIX**: PlainHTML can strip attributes that are not quoted. (!174)\n\n## 4.5.1\n\n- **FIX**: If an invalid provider is given, default to `github`. If no `user` or `repo` is specified, do not convert\n  links that depend on those default values. (#169)\n\n## 4.5\n\n- **NEW**: Add GitLab style compare link shorthand and link shortening. (#160)\n- **NEW**: Deprecate GitHub extension. It is now recommended to just include the extensions you want to create a GitHub\n  feel instead of relying on a an extension to package something close-ish. (#159)\n\n## 4.4\n\n- **NEW**: Add social media mentions -- Twitter only right now. (#156)\n- **FIX**: Use correct regular expression for GitLab and Bitbucket.\n\n## 4.3\n\n- **NEW**: Shorthand format for referencing non-default provider commits, issues, pulls, and mentions. (!147)\n- **NEW**: Shorthand format for mentioning a repo via `@user/repo`. (!149)\n- **NEW**: Add repository provider specific classes. (!149)\n- **NEW**: Make repository labels configurable. (!149)\n- **FIX**: Adjust pattern boundaries auto-links.\n\n## 4.2\n\n- **NEW**: MagicLink can now auto-link a GitHub like shorthand for repository references. (!139)\n- **NEW**: MagicLink now renders pull request links with a slightly different output from issues. (!139)\n- **NEW**: Deprecate `base_repo_url` in MagicLink in favor of the new `provider`, `user`, and `repo`. (!139)\n- **NEW**: MagicLink now adds classes to repository links. (!139)\n- **NEW**: MagicLink now adds title to repository links. (!139)\n- **NEW**: MagicLink no longer styles repository commit hashes as code. (!143)\n- **FIX**: MagicLink repository link outputs now better reflect default user and repository context. (!143)\n- **FIX**: PlainHTML should not strip tags that are part of JavaScript code. (!140)\n\n## 4.1\n\n- **NEW**: Details can now have multiple classes defined.\n\n## 4.0\n\n- **NEW**: Details extension will now derive a title from the class if only a class is provided. (#107)\n- **NEW**: Remove deprecated legacy emoji generator format.\n- **NEW**: Remove deprecated `use_codehilite_settings`.\n- **NEW**: Remove deprecated `spoilers` extension redirect.\n- **NEW**: Update emoji databases: EmojiOne (3.1.2) and Twemoji to .(2.5.0)\n\n## 3.5\n\n- **NEW**: Add new slugs to preserve case. (!103)\n- **NEW**: Add new GFM specific slug (both percent encoded and normal) that only lowercases ASCII chars just like GFM\n  does. (#101)\n- **FIX**: PathConverter should not try and convert obscured email address (with HTML entities). (#100)\n- **FIX**: Don't normalize Unicode in slugs with `NFKD`, use `NFC` instead. (#98)\n- **FIX**: Don't let EscapeAll escape CriticMarkup placeholders.  EscapeAll will no longer escape `STX` and `ETX`; they\n  will just pass through. (#95)\n- **FIX**: Replace CriticMarkup placeholders after replacing raw HTML placeholders. (#95)\n\n## 3.4\n\n- **NEW**: Renamed Spoilers to Details\n- **NEW**: No longer attach the `spoilers` class to `details` tags.\n- **NEW**: Provide better example of UML script in documents.\n\n## 3.3\n\n- **NEW**: Added support for pull request link shortening in MagicLink. (!88)\n- **NEW**: Added new Spoilers extension. (#85)\n\n## 3.2.1\n\n- **FIX**: Cannot set Highlight's CSS class.\n\n## 3.2\n\n- **NEW**: Add support for Twemoji 2.3.5.\n- **NEW**: Update to EmojiOne 3.0.2.\n- **NEW**: Emoji generators now also take `category` which is also no included in all indexes.\n- **FIX**: Excessive new lines at end of code blocks.\n\n## 3.1\n\n- **NEW**: Highlight extension now runs normal indented code blocks through highlighter.\n- **FIX**: When Pygments is disabled, `linenums` class was attached to code blocks even if `linenums` was disabled and\n  not enabled via fence headers.\n\n## 3.0\n\n- **NEW**: Added Keys extension.\n- **NEW**: Generalized custom fences (#60). `flow` and `sequence` fence are now just custom fences and can be disabled\n  simply by overwriting the `custom_fences` setting.\n- **NEW**: Remove deprecated `no_nl2br` in GitHub extension. (#24)\n- **NEW**: Remove deprecated HeaderAnchor extension. (#24)\n- **NEW**: Remove deprecated PyMdown extension. (#24)\n- **NEW**: Remove deprecated GitHubEmoji extension. (#24)\n- **NEW**: Remove deprecated `nested` option in SuperFences. (#24)\n- **NEW**: Wrapper extensions (such as GitHub and Extra) can now allow setting the included sub extensions settings\n  (#61). Workaround settings that directly set specific extensions settings has been removed.\n- **NEW**: Deprecated `use_codehilite_settings` in SuperFences and InlineHilite and now does nothing.  The settings will\n  be removed in the future.  If `pymdownx.highlight` is used, it's settings will be used instead of CodeHilite.\n  Eventually, the both SuperFences and InlineHilite will require `pymdownx.highlight` to be used and will have\n  CodeHilite support stripped.\n- **FIX**: Fix MathJax CDN references and usage in documentation.  MathJax CDN is shutting down and must now use\n  Cloudflare CDN. (#63)\n\n## 2.0\n\n- **NEW**: SuperFences and InlineHilite can be configured via the new Highlight extension.\n- **NEW**: InlineHilite now has all highlighting features pushed to the Highlight extension.  This removes all the\n  CodeHilite code that used to be in it and instead relocates it to Highlight.\n- **NEW**: Deprecate the nesting option in SuperFences.  Nesting is default and the only acceptable behavior moving\n  forward.  The ability to turn off nesting will be removed in 3.0.\n\n## 1.8\n\n- **NEW**: MagicLink special repository link shortener for GitHub, GitLab, and Bitbucket. (#49)\n- **FIX**: GitHub asterisk emphasis should never have had smart enabled for it. (#50)\n- **FIX**: MagicLink fix for compatibility with wrapped symbols like `~`, `*` etc. which are commonly used.\n- **FIX**: MagicLink encodes emails like Python Markdown does for consistency.\n- **FIX**: MagicLink doesn't allow Unicode for email and does allow Unicode in a URL. (#53)\n- **FIX**: InlineHilite now returns a proper `etree` element so that the `attr_list` extension and function properly\n  with it. (#48)\n- **FIX**: InlineHilite will no longer break if Pygments is not installed (478b410a2199d55f3e70b452516511d3810c61a5).\n\n## 1.7\n\n- **NEW**: Arithmatex now supports `\\(...\\)`, `\\[...\\]`, and `\\begin{}...\\end{}`.\n- **NEW**: Arithmatex has an option to embed the math code in MathJax script tags.\n- **FIX**: Unfortunately the wrap option is now run through an HTML escaper and HTML tags can no longer be fed in this\n  way.  Arithmatex also now wraps \"wrapped\" content with spans to containerize content and keep one equation from\n  bleeding into the next.\n- **FIX**: Better handling of escaped Arithmatex inline tokens.\n- **FIX**: Better handling of escaped InlineHilite tokens.\n- **FIX**: Update InlineHilite and SuperFences so that the language option can accept things like `c#` and `.net` etc.\n- **FIX**: Snippets now removes carriage returns from imported files to prevent breakage.\n\n## 1.6.1\n\n- **FIX**: Don't install tools or tests folder when installing from Pypi.\n\n## 1.6\n\n- **NEW**: EscapeAll has the option to perform more like Pandoc in that you can enable escaped newlines to be\n  `hardbreaks`, and escaped spaces to be `nbsp`.\n- **NEW**: Rework poorly thought out snippets format to require quoting file names with single line format.  Add a block\n  format.  Allow commenting out lines temporarily.  And allow a way to escape them by placing a space after them.\n- **FIX**: Fix documentation issues.\n\n## 1.5\n\n- **NEW**: New EscapeAll extension.\n- **NEW**: New Snippets extension for including external files into a Markdown file.\n- **NEW**: Arithmatex now has configurable output wrapper.\n- **NEW**: PathConverter no longer verifies existence of path to allow it more flexible usage.\n- **NEW**: PathConverter now only converts relative paths when converting to a relative or absolute location.\n- **NEW**: Improved support for path path identification for PathConverter and B64.\n- **FIX**: Fixed issue where Arithmatex was un-escaping `$` within math region.\n- **FIX**: Fixed issue where plugins would append globally changing the escape list opposed to just in the in the\n  Markdown instance.\n- **FIX**: Fixed logic issue where the `mark`, `caret`, and `tilde` extension weren't quite modeling `betterem` inline\n  behavior.\n- **FIX**: Critics shouldn't allow escaping critic marks as it is not in the spec.\n\n## 1.4\n\n- **NEW**: HeaderAnchor extension is now deprecated.  It will be removed in a future version.\n- **NEW**: HeaderAnchor is no longer included in the `pymdownx.github` extension.\n- **NEW**: Slugify functions are moved to `pymdownx.slug` in preparation of HeaderAnchor removal.\n- **FIX**: GitHubEmoji is not \"pending\" deprecation, but is actually deprecated.\n\n## 1.3\n\n- **NEW**: New Emoji extension that aims to replace GitHubEmoji.  By default it is configured for EmojiOne and Gemoji\n  (GitHub's emoji).\n- **NEW**: GitHubEmoji is deprecated. Please use the Emoji extension instead.\n- **NEW**: PyMdown extension is deprecated.  PyMdown extension was just a wrapper, please configure the desired\n  individual extension(s) instead of relying on PyMdown.\n- **NEW**: `github` extension now turns off `nl2br` by default in order properly emulate recent changes in GFM.\n  `no_nl2br` option is deprecated and will be removed in the future as it no longer reflects GFM behavior.\n\n## 1.2\n\n- **NEW**: Add option to output task lists in a more customizable way.\n\n## 1.1\n\n- **NEW**: Add pypi 3.5 info in setup\n- **NEW**: Add option to MagicLink extension to allow the stripping of link protocols (`http://` etc.).\n- **NEW**: Add option to `github` extension to disable the use of `nl2br` to reflect recent changes to GitHub Flavored\n  Markdown.  Currently the default is the legacy (uses `nl2br`), but a warning will be displayed.  In the future, the\n  option will be defaulted to not use `nl2br`.\n\n## 1.0.1\n\n- **FIX**: Ordinal number 11th, 12th, and 13th\n\n## 1.0.0\n\n- **NEW**: Initial release.\n", "patch": "@@ -1,5 +1,11 @@\n # Changelog\n \n+## 10.0\n+\n+- **Break**: Snippets: snippets will restrict snippets to ensure they are under the `base_path` preventing snippets\n+  relative to the `base_path` but not explicitly under it. `restrict_base_path` can be set to `False` for legacy\n+  behavior.\n+\n ## 9.11\n \n - **NEW**: Emoji: Update to new CDN and use Twemoji 14.1.2.", "file_path": "files/2023_5/584", "file_language": "md", "file_name": "docs/src/markdown/about/changelog.md", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/facelessuser/pymdown-extensions/raw/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d/docs%2Fsrc%2Fmarkdown%2Fextensions%2Fsnippets.md", "code": "[:octicons-file-code-24:][_snippets]{: .source-link }\n\n# Snippets\n\n## Overview\n\n/// warning | Not Meant for User Facing Sites\nSnippets is meant to make including snippets in documentation easier, but it should not be used for user facing sites\nthat take and parse user content dynamically.\n///\n\nSnippets is an extension to insert markdown or HTML snippets into another markdown file.  Snippets is great for\nsituations where you have content you need to insert into multiple documents.  For instance, this document keeps all its\nhyperlinks in a separate file and then includes those hyperlinks at the bottom of a document via Snippets. If a link\nneeds to be updated, it can be updated in one location instead of updating them in multiple files.\n\nSnippets is run as a preprocessor, so if a snippet is found in a fenced code block etc., it will still get processed.\n\nIf a snippet declaration is processed, and the specified file cannot be found, then the markup will be removed.\n\nSnippets can handle recursive file inclusion. And if Snippets encounters the same file in the current stack, it will\navoid re-processing it in order to avoid an infinite loop (or crash on hitting max recursion depth).\n\nThis is meant for simple file inclusion, it has no intention to implement features from complex template systems. If you\nneed something more complex, you may consider using a template environment to process your files **before** feeding them\nthrough Python Markdown.  If you are using a document generation system, this can likely be performed via a plugin for\nthat document system (assuming a plugin environment is available).\n\nThe Snippets extension can be included in Python Markdown by using the following:\n\n```py3\nimport markdown\nmd = markdown.Markdown(extensions=['pymdownx.snippets'])\n```\n\n## Snippets Notation\n\nThere are two modes of inserting snippets: single line and block. Single line mode accepts a single file name, and block\naccepts multiple files. Snippets does not require a specific extension, and as long as a valid file name is specified,\nit will attempt to process it.\n\nSnippets paths are relative to base location, by default the current working directory. You can specify a new base\nlocation by setting the `base_path`. You can even allow downloading snippets from external locations. To learn more,\ncheck out [\"Specifying Snippet Locations\"](#specifying-snippet-locations) and [\"URL Snippets\"](#url-snippets).\n\n### Single Line Format\n\nSingle line format is done by placing the following markup for the single line notation:\n\n```\n;--8<-- \"filename.ext\"\n```\n\nAs you can see, the notation is ASCII scissors cutting a line followed by the file name.  In the case of the single line\nvariant, the file name follows directly after the scissors and is quoted.  In the case of the block format, the file\nnames follow on separate lines and an additional scissor is added afterwards to signal the end of the block.\n\nThe dashes can be as few as 1 (`-8<-`) or longer if desired (`---8<---------`); whatever your preference is.  The\nimportant thing is that the notation must reside on a line(s) by itself, and the path, must be quoted in the case of the\nsingle line notation.  If the file name is indented, the content will be indented to that level as well.\n\nYou can temporarily disable the snippet by placing a `;` before the file name:\n\n```\n;--8<-- \"; skip.md\"\n```\n\n### Block Format\n\nThe second approach is known as the block format. Block format allows you to insert multiple files.\n\n```\n;--8<--\nfilename.md\nfilename.log\n;--8<--\n```\nThe block format differs from the single format by requiring the the content to be fenced between two `--8<--`. The\nstart and end `--8<--` must be on a line by themselves.\n\nWhen using the block format empty lines are also preserved within the block. Consider the example below.\n\n```\n;--8<--\nfileA.md\n\nfileB.md\n;--8<--\n```\n\nThis would yield:\n\n```\nContent of file A.\n\nContent of file B.\n```\n\nIf you have a file you want to temporarily ignore, you can comment it out by placing a `;` at the start of the line.\n\n```\n;--8<--\ninclude.md\n; skip.md\n;--8<--\n```\n\n### Snippet Lines\n\n/// new | New 9.6\n///\n\nWhen specifying a snippet, you can specify which lines of the Snippet file that you wish to include. To specify line\nnumbers, simply append the start and/or end to the end of the file name with each number separated with `:`.\n\n- To specify extraction of content to start at a specific line number, simply use `file.md:3`.\n- To extract all content up to a specific line, use `file.md::3`. This will extract lines 1 - 3.\n- To extract all content starting at a specific line up to another line, use `file.md:4:6`. This will extract lines\n  4 - 6.\n\n```\n;--8<-- \"file.md:4:6\"\n\n;--8<--\ninclude.md::3\n;--8<--\n```\n\n### Snippet Sections\n\n/// new | New 9.7\n///\n\nSpecifying snippet lines may not always be ideal. The source could change by moving, adding, and/or removing lines. A way\naround this is to partition a snippet into named sections and then targeting a specific section to be included instead\nof specific line numbers.\n\nSnippet sections can be specified by surrounding a block of text with `--8<-- [start:name]` and `--8<-- [end:name]`.\nThen a file can simply specify the snippet using the name instead of line numbers.\n\n```\n;--8<-- \"include.md:name\"\n\n;--8<--\ninclude.md:name\n;--8<--\n```\n\nUnlike other snippet syntax, the section start and end syntax do not have to be on a line by themselves. This allows\nyou to embed them in comments depending on the file type. When a section is included, the line with the start and end\nare always omitted.\n\nIf we wanted to include a function from a Python source, we could specify the snippet as follows:\n\n```python\n# --8<-- [start:func]\ndef my_function(var):\n    pass\n# --8<-- [end:func]\n```\n\nAnd then just include it in our document:\n\n```\n;--8<-- \"example.py:func\"\n```\n\n### Escaping Snippets Notation\n\n/// new | New 9.6\n///\n\nIf it is necessary to demonstrate the snippet syntax, an escaping method is required. If you need to escape snippets,\njust place a `;` right before `-8<-`. This will work for both single line and block format. An escaped snippet\nnotation will be passed through the Markdown parser with the first `;` removed.\n\n\n````text title=\"Escaped Snippets\"\n```\n;;--8<-- \"escaped.md\"\n;;;--8<-- \"escaped.md\"\n```\n````\n\n/// html | div.result\n```\n;--8<-- \"escaped.md\"\n;;--8<-- \"escaped.md\"\n```\n///\n\n/// warning | Legacy Escaping\nThe legacy escape method required placing a space at the end of the line with `-8<-`, while this should still\nwork, this behavior will be removed at sometime in the future and is discouraged.\n///\n\n## Specifying Snippet Locations\n\nAll snippets are specified relative to the base path(s) specified in the `base_path` option. `base_path` is a list of\npaths (though it will take a single string for legacy purposes).\n\nWhen evaluating paths, they are done in the order specified. The specified snippet will be evaluated against each base\npath and the first base path that yields a valid snippet will be returned.\n\nIf a base path is a file, the specified snippet will be compared against the base name of that file. For instance, if\nwe specified a snippet of `test.md` and we had a `base_path` of `#!py3 [\"some/location/test.md\"]`, this would match.\nA specified snippet of `location/test.md` would not match. This is great if you have a one off file outside of your\nbase directory, but you'd like to directly include it.\n\n## URL Snippets\n\nURLs, if `url_download` is enabled, can also be used as snippets. Instead of using a file, simply specify a URL in\nits place. By default, a max size for content is specified with `url_max_size` and a default timeout via `url_timeout`.\nIf either of these is set to zero, the limits will be ignored.\n\nTo pass arbitrary HTTP headers in every HTTP request use `url_request_headers`.\n\n/// warning | Nested Snippets\nOne thing to note though, if a snippet is included via a URL, all nested snippets within it must also be URLs. URL\nsnippets are not allowed to reference local snippet files.\n///\n\n/// new | New 9.5\nURL snippet support was introduced in 9.5.\n///\n\n## Dedent Subsections\n\n/// new | New 9.10\n///\n\n/// warning | Experimental\n///\n\nBy default, when a subsection is extracted from a file via the [section notation](#snippet-sections) or the\n[lines notation](#snippet-lines), the content is inserted exactly how it is extracted. Unfortunately, sometimes you are\nextracting an indented chunk, and you do not intend for that chunk to be indented.\n\n`dedent_subsections` is a recent option that has been added to see if it alleviates the issue. When specifying a\nsubsection of a file to insert as a snippet, via \"sections\" or \"lines\", that content will have all common leading\nwhitespace removed from every line in text.\n\nDepending on how the feature is received, it may be made the default in the future.\n\n## Auto-Append Snippets\n\nSnippets is designed as a general way to target a file and inject it into a given Markdown file, but some times,\nespecially when building documentation via a library like [MkDocs][mkdocs], it may make sense to provide a way to append\na given file to *every* Markdown document without having to manually include them via Snippet syntax in each page. This\nis especially useful for including a page of reference links or abbreviations on every page.\n\nSnippets provides an `auto_append` option that allows a user to specify a list of files that will be automatically\nappended to every to Markdown content. Each entry in the list searched for relative to the `base_path` entries.\n\n## Options\n\nOption                 | Type            | Default          | Description\n---------------------- | --------------- | ---------------- |------------\n`base_path`            | \\[string\\]      | `#!py3 ['.']`    | A list of strings indicating base paths to be used resolve snippet locations. For legacy purposes, a single string will also be accepted as well. Base paths will be resolved in the order they are specified. When resolving a file name, the first match wins. If a file name is specified, the base name will be matched.\n`encoding`             | string          | `#!py3 'utf-8'`  | Encoding to use when reading in the snippets.\n`check_paths`          | bool            | `#!py3 False`    | Make the build fail if a snippet can't be found.\n`auto_append`          | \\[string\\]      | `#!py3 []`       | A list of snippets (relative to the `base_path`) to auto append to the Markdown content.\n`url_download`         | bool            | `#!py3 False`    | Allows URLs to be specified as file snippets. URLs will be downloaded and inserted accordingly.\n`url_max_size`         | int             | `#!py3 33554432` | Sets an arbitrary max content size. If content length is reported to be larger, and exception will be thrown. Default is ~32 MiB.\n`url_timeout`          | float           | `#!py3 10.0`     | Passes an arbitrary timeout in seconds to URL requestor. By default this is set to 10 seconds.\n`url_request_headers`  | {string:string} | `#!py3 {}`       | Passes arbitrary headers to URL requestor. By default this is set to empty map.\n`dedent_subsections`   | bool            | `#!py3 False`    | Remove any common leading whitespace from every line in text of a subsection that is inserted via \"sections\" or by \"lines\".\n`restrict_base_path`   | bool            | `#!py True`      | Ensure that the specified snippets are children of the specified base path(s). This prevents a path relative to the base path, but not explicitly a child of the base path.\n", "code_before": "[:octicons-file-code-24:][_snippets]{: .source-link }\n\n# Snippets\n\n## Overview\n\nSnippets is an extension to insert markdown or HTML snippets into another markdown file.  Snippets is great for\nsituations where you have content you need to insert into multiple documents.  For instance, this document keeps all its\nhyperlinks in a separate file and then includes those hyperlinks at the bottom of a document via Snippets. If a link\nneeds to be updated, it can be updated in one location instead of updating them in multiple files.\n\nSnippets is run as a preprocessor, so if a snippet is found in a fenced code block etc., it will still get processed.\n\nIf a snippet declaration is processed, and the specified file cannot be found, then the markup will be removed.\n\nSnippets can handle recursive file inclusion. And if Snippets encounters the same file in the current stack, it will\navoid re-processing it in order to avoid an infinite loop (or crash on hitting max recursion depth).\n\nThis is meant for simple file inclusion, it has no intention to implement features from complex template systems. If you\nneed something more complex, you may consider using a template environment to process your files **before** feeding them\nthrough Python Markdown.  If you are using a document generation system, this can likely be performed via a plugin for\nthat document system (assuming a plugin environment is available).\n\nThe Snippets extension can be included in Python Markdown by using the following:\n\n```py3\nimport markdown\nmd = markdown.Markdown(extensions=['pymdownx.snippets'])\n```\n\n## Snippets Notation\n\nThere are two modes of inserting snippets: single line and block. Single line mode accepts a single file name, and block\naccepts multiple files. Snippets does not require a specific extension, and as long as a valid file name is specified,\nit will attempt to process it.\n\nSnippets paths are relative to base location, by default the current working directory. You can specify a new base\nlocation by setting the `base_path`. You can even allow downloading snippets from external locations. To learn more,\ncheck out [\"Specifying Snippet Locations\"](#specifying-snippet-locations) and [\"URL Snippets\"](#url-snippets).\n\n### Single Line Format\n\nSingle line format is done by placing the following markup for the single line notation:\n\n```\n;--8<-- \"filename.ext\"\n```\n\nAs you can see, the notation is ASCII scissors cutting a line followed by the file name.  In the case of the single line\nvariant, the file name follows directly after the scissors and is quoted.  In the case of the block format, the file\nnames follow on separate lines and an additional scissor is added afterwards to signal the end of the block.\n\nThe dashes can be as few as 1 (`-8<-`) or longer if desired (`---8<---------`); whatever your preference is.  The\nimportant thing is that the notation must reside on a line(s) by itself, and the path, must be quoted in the case of the\nsingle line notation.  If the file name is indented, the content will be indented to that level as well.\n\nYou can temporarily disable the snippet by placing a `;` before the file name:\n\n```\n;--8<-- \"; skip.md\"\n```\n\n### Block Format\n\nThe second approach is known as the block format. Block format allows you to insert multiple files.\n\n```\n;--8<--\nfilename.md\nfilename.log\n;--8<--\n```\nThe block format differs from the single format by requiring the the content to be fenced between two `--8<--`. The\nstart and end `--8<--` must be on a line by themselves.\n\nWhen using the block format empty lines are also preserved within the block. Consider the example below.\n\n```\n;--8<--\nfileA.md\n\nfileB.md\n;--8<--\n```\n\nThis would yield:\n\n```\nContent of file A.\n\nContent of file B.\n```\n\nIf you have a file you want to temporarily ignore, you can comment it out by placing a `;` at the start of the line.\n\n```\n;--8<--\ninclude.md\n; skip.md\n;--8<--\n```\n\n### Snippet Lines\n\n/// new | New 9.6\n///\n\nWhen specifying a snippet, you can specify which lines of the Snippet file that you wish to include. To specify line\nnumbers, simply append the start and/or end to the end of the file name with each number separated with `:`.\n\n- To specify extraction of content to start at a specific line number, simply use `file.md:3`.\n- To extract all content up to a specific line, use `file.md::3`. This will extract lines 1 - 3.\n- To extract all content starting at a specific line up to another line, use `file.md:4:6`. This will extract lines\n  4 - 6.\n\n```\n;--8<-- \"file.md:4:6\"\n\n;--8<--\ninclude.md::3\n;--8<--\n```\n\n### Snippet Sections\n\n/// new | New 9.7\n///\n\nSpecifying snippet lines may not always be ideal. The source could change by moving, adding, and/or removing lines. A way\naround this is to partition a snippet into named sections and then targeting a specific section to be included instead\nof specific line numbers.\n\nSnippet sections can be specified by surrounding a block of text with `--8<-- [start:name]` and `--8<-- [end:name]`.\nThen a file can simply specify the snippet using the name instead of line numbers.\n\n```\n;--8<-- \"include.md:name\"\n\n;--8<--\ninclude.md:name\n;--8<--\n```\n\nUnlike other snippet syntax, the section start and end syntax do not have to be on a line by themselves. This allows\nyou to embed them in comments depending on the file type. When a section is included, the line with the start and end\nare always omitted.\n\nIf we wanted to include a function from a Python source, we could specify the snippet as follows:\n\n```python\n# --8<-- [start:func]\ndef my_function(var):\n    pass\n# --8<-- [end:func]\n```\n\nAnd then just include it in our document:\n\n```\n;--8<-- \"example.py:func\"\n```\n\n### Escaping Snippets Notation\n\n/// new | New 9.6\n///\n\nIf it is necessary to demonstrate the snippet syntax, an escaping method is required. If you need to escape snippets,\njust place a `;` right before `-8<-`. This will work for both single line and block format. An escaped snippet\nnotation will be passed through the Markdown parser with the first `;` removed.\n\n\n````text title=\"Escaped Snippets\"\n```\n;;--8<-- \"escaped.md\"\n;;;--8<-- \"escaped.md\"\n```\n````\n\n/// html | div.result\n```\n;--8<-- \"escaped.md\"\n;;--8<-- \"escaped.md\"\n```\n///\n\n/// warning | Legacy Escaping\nThe legacy escape method required placing a space at the end of the line with `-8<-`, while this should still\nwork, this behavior will be removed at sometime in the future and is discouraged.\n///\n\n## Specifying Snippet Locations\n\nAll snippets are specified relative to the base path(s) specified in the `base_path` option. `base_path` is a list of\npaths (though it will take a single string for legacy purposes).\n\nWhen evaluating paths, they are done in the order specified. The specified snippet will be evaluated against each base\npath and the first base path that yields a valid snippet will be returned.\n\nIf a base path is a file, the specified snippet will be compared against the base name of that file. For instance, if\nwe specified a snippet of `test.md` and we had a `base_path` of `#!py3 [\"some/location/test.md\"]`, this would match.\nA specified snippet of `location/test.md` would not match. This is great if you have a one off file outside of your\nbase directory, but you'd like to directly include it.\n\n## URL Snippets\n\nURLs, if `url_download` is enabled, can also be used as snippets. Instead of using a file, simply specify a URL in\nits place. By default, a max size for content is specified with `url_max_size` and a default timeout via `url_timeout`.\nIf either of these is set to zero, the limits will be ignored.\n\nTo pass arbitrary HTTP headers in every HTTP request use `url_request_headers`.\n\n/// warning | Nested Snippets\nOne thing to note though, if a snippet is included via a URL, all nested snippets within it must also be URLs. URL\nsnippets are not allowed to reference local snippet files.\n///\n\n/// new | New 9.5\nURL snippet support was introduced in 9.5.\n///\n\n## Dedent Subsections\n\n/// new | New 9.10\n///\n\n/// warning | Experimental\n///\n\nBy default, when a subsection is extracted from a file via the [section notation](#snippet-sections) or the\n[lines notation](#snippet-lines), the content is inserted exactly how it is extracted. Unfortunately, sometimes you are\nextracting an indented chunk, and you do not intend for that chunk to be indented.\n\n`dedent_subsections` is a recent option that has been added to see if it alleviates the issue. When specifying a\nsubsection of a file to insert as a snippet, via \"sections\" or \"lines\", that content will have all common leading\nwhitespace removed from every line in text.\n\nDepending on how the feature is received, it may be made the default in the future.\n\n## Auto-Append Snippets\n\nSnippets is designed as a general way to target a file and inject it into a given Markdown file, but some times,\nespecially when building documentation via a library like [MkDocs][mkdocs], it may make sense to provide a way to append\na given file to *every* Markdown document without having to manually include them via Snippet syntax in each page. This\nis especially useful for including a page of reference links or abbreviations on every page.\n\nSnippets provides an `auto_append` option that allows a user to specify a list of files that will be automatically\nappended to every to Markdown content. Each entry in the list searched for relative to the `base_path` entries.\n\n## Options\n\nOption                 | Type            | Default          | Description\n---------------------- | --------------- | ---------------- |------------\n`base_path`            | \\[string\\]      | `#!py3 ['.']`    | A list of strings indicating base paths to be used resolve snippet locations. For legacy purposes, a single string will also be accepted as well. Base paths will be resolved in the order they are specified. When resolving a file name, the first match wins. If a file name is specified, the base name will be matched.\n`encoding`             | string          | `#!py3 'utf-8'`  | Encoding to use when reading in the snippets.\n`check_paths`          | bool            | `#!py3 False`    | Make the build fail if a snippet can't be found.\n`auto_append`          | \\[string\\]      | `#!py3 []`       | A list of snippets (relative to the `base_path`) to auto append to the Markdown content.\n`url_download`         | bool            | `#!py3 False`    | Allows URLs to be specified as file snippets. URLs will be downloaded and inserted accordingly.\n`url_max_size`         | int             | `#!py3 33554432` | Sets an arbitrary max content size. If content length is reported to be larger, and exception will be thrown. Default is ~32 MiB.\n`url_timeout`          | float           | `#!py3 10.0`     | Passes an arbitrary timeout in seconds to URL requestor. By default this is set to 10 seconds.\n`url_request_headers`  | {string:string} | `#!py3 {}`       | Passes arbitrary headers to URL requestor. By default this is set to empty map.\n`dedent_subsections`   | bool            | `#!py3 False`    | Remove any common leading whitespace from every line in text of a subsection that is inserted via \"sections\" or by \"lines\".\n", "patch": "@@ -4,6 +4,11 @@\n \n ## Overview\n \n+/// warning | Not Meant for User Facing Sites\n+Snippets is meant to make including snippets in documentation easier, but it should not be used for user facing sites\n+that take and parse user content dynamically.\n+///\n+\n Snippets is an extension to insert markdown or HTML snippets into another markdown file.  Snippets is great for\n situations where you have content you need to insert into multiple documents.  For instance, this document keeps all its\n hyperlinks in a separate file and then includes those hyperlinks at the bottom of a document via Snippets. If a link\n@@ -260,3 +265,4 @@ Option                 | Type            | Default          | Description\n `url_timeout`          | float           | `#!py3 10.0`     | Passes an arbitrary timeout in seconds to URL requestor. By default this is set to 10 seconds.\n `url_request_headers`  | {string:string} | `#!py3 {}`       | Passes arbitrary headers to URL requestor. By default this is set to empty map.\n `dedent_subsections`   | bool            | `#!py3 False`    | Remove any common leading whitespace from every line in text of a subsection that is inserted via \"sections\" or by \"lines\".\n+`restrict_base_path`   | bool            | `#!py True`      | Ensure that the specified snippets are children of the specified base path(s). This prevents a path relative to the base path, but not explicitly a child of the base path.", "file_path": "files/2023_5/585", "file_language": "md", "file_name": "docs/src/markdown/extensions/snippets.md", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/facelessuser/pymdown-extensions/raw/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d/pymdownx%2F__meta__.py", "code": "\"\"\"Meta related things.\"\"\"\nfrom collections import namedtuple\nimport re\n\nRE_VER = re.compile(\n    r'''(?x)\n    (?P<major>\\d+)(?:\\.(?P<minor>\\d+))?(?:\\.(?P<micro>\\d+))?\n    (?:(?P<type>a|b|rc)(?P<pre>\\d+))?\n    (?:\\.post(?P<post>\\d+))?\n    (?:\\.dev(?P<dev>\\d+))?\n    '''\n)\n\nREL_MAP = {\n    \".dev\": \"\",\n    \".dev-alpha\": \"a\",\n    \".dev-beta\": \"b\",\n    \".dev-candidate\": \"rc\",\n    \"alpha\": \"a\",\n    \"beta\": \"b\",\n    \"candidate\": \"rc\",\n    \"final\": \"\"\n}\n\nDEV_STATUS = {\n    \".dev\": \"2 - Pre-Alpha\",\n    \".dev-alpha\": \"2 - Pre-Alpha\",\n    \".dev-beta\": \"2 - Pre-Alpha\",\n    \".dev-candidate\": \"2 - Pre-Alpha\",\n    \"alpha\": \"3 - Alpha\",\n    \"beta\": \"4 - Beta\",\n    \"candidate\": \"4 - Beta\",\n    \"final\": \"5 - Production/Stable\"\n}\n\nPRE_REL_MAP = {\"a\": 'alpha', \"b\": 'beta', \"rc\": 'candidate'}\n\n\nclass Version(namedtuple(\"Version\", [\"major\", \"minor\", \"micro\", \"release\", \"pre\", \"post\", \"dev\"])):\n    \"\"\"\n    Get the version (PEP 440).\n\n    A biased approach to the PEP 440 semantic version.\n\n    Provides a tuple structure which is sorted for comparisons `v1 > v2` etc.\n      (major, minor, micro, release type, pre-release build, post-release build, development release build)\n    Release types are named in is such a way they are comparable with ease.\n    Accessors to check if a development, pre-release, or post-release build. Also provides accessor to get\n    development status for setup files.\n\n    How it works (currently):\n\n    - You must specify a release type as either `final`, `alpha`, `beta`, or `candidate`.\n    - To define a development release, you can use either `.dev`, `.dev-alpha`, `.dev-beta`, or `.dev-candidate`.\n      The dot is used to ensure all development specifiers are sorted before `alpha`.\n      You can specify a `dev` number for development builds, but do not have to as implicit development releases\n      are allowed.\n    - You must specify a `pre` value greater than zero if using a prerelease as this project (not PEP 440) does not\n      allow implicit prereleases.\n    - You can optionally set `post` to a value greater than zero to make the build a post release. While post releases\n      are technically allowed in prereleases, it is strongly discouraged, so we are rejecting them. It should be\n      noted that we do not allow `post0` even though PEP 440 does not restrict this. This project specifically\n      does not allow implicit post releases.\n    - It should be noted that we do not support epochs `1!` or local versions `+some-custom.version-1`.\n\n    Acceptable version releases:\n\n    ```\n    Version(1, 0, 0, \"final\")                    1.0\n    Version(1, 2, 0, \"final\")                    1.2\n    Version(1, 2, 3, \"final\")                    1.2.3\n    Version(1, 2, 0, \".dev-alpha\", pre=4)        1.2a4\n    Version(1, 2, 0, \".dev-beta\", pre=4)         1.2b4\n    Version(1, 2, 0, \".dev-candidate\", pre=4)    1.2rc4\n    Version(1, 2, 0, \"final\", post=1)            1.2.post1\n    Version(1, 2, 3, \".dev\")                     1.2.3.dev0\n    Version(1, 2, 3, \".dev\", dev=1)              1.2.3.dev1\n    ```\n\n    \"\"\"\n\n    def __new__(cls, major, minor, micro, release=\"final\", pre=0, post=0, dev=0):\n        \"\"\"Validate version info.\"\"\"\n\n        # Ensure all parts are positive integers.\n        for value in (major, minor, micro, pre, post):\n            if not (isinstance(value, int) and value >= 0):\n                raise ValueError(\"All version parts except 'release' should be integers.\")\n\n        if release not in REL_MAP:\n            raise ValueError(\"'{}' is not a valid release type.\".format(release))\n\n        # Ensure valid pre-release (we do not allow implicit pre-releases).\n        if \".dev-candidate\" < release < \"final\":\n            if pre == 0:\n                raise ValueError(\"Implicit pre-releases not allowed.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure valid development or development/pre release\n        elif release < \"alpha\":\n            if release > \".dev\" and pre == 0:\n                raise ValueError(\"Implicit pre-release not allowed.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure a valid normal release\n        else:\n            if pre:\n                raise ValueError(\"Version is not a pre-release.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n\n        return super(Version, cls).__new__(cls, major, minor, micro, release, pre, post, dev)\n\n    def _is_pre(self):\n        \"\"\"Is prerelease.\"\"\"\n\n        return self.pre > 0\n\n    def _is_dev(self):\n        \"\"\"Is development.\"\"\"\n\n        return bool(self.release < \"alpha\")\n\n    def _is_post(self):\n        \"\"\"Is post.\"\"\"\n\n        return self.post > 0\n\n    def _get_dev_status(self):  # pragma: no cover\n        \"\"\"Get development status string.\"\"\"\n\n        return DEV_STATUS[self.release]\n\n    def _get_canonical(self):\n        \"\"\"Get the canonical output string.\"\"\"\n\n        # Assemble major, minor, micro version and append `pre`, `post`, or `dev` if needed..\n        if self.micro == 0:\n            ver = \"{}.{}\".format(self.major, self.minor)\n        else:\n            ver = \"{}.{}.{}\".format(self.major, self.minor, self.micro)\n        if self._is_pre():\n            ver += '{}{}'.format(REL_MAP[self.release], self.pre)\n        if self._is_post():\n            ver += \".post{}\".format(self.post)\n        if self._is_dev():\n            ver += \".dev{}\".format(self.dev)\n\n        return ver\n\n\ndef parse_version(ver, pre=False):\n    \"\"\"Parse version into a comparable Version tuple.\"\"\"\n\n    m = RE_VER.match(ver)\n\n    # Handle major, minor, micro\n    major = int(m.group('major'))\n    minor = int(m.group('minor')) if m.group('minor') else 0\n    micro = int(m.group('micro')) if m.group('micro') else 0\n\n    # Handle pre releases\n    if m.group('type'):\n        release = PRE_REL_MAP[m.group('type')]\n        pre = int(m.group('pre'))\n    else:\n        release = \"final\"\n        pre = 0\n\n    # Handle development releases\n    dev = m.group('dev') if m.group('dev') else 0\n    if m.group('dev'):\n        dev = int(m.group('dev'))\n        release = '.dev-' + release if pre else '.dev'\n    else:\n        dev = 0\n\n    # Handle post\n    post = int(m.group('post')) if m.group('post') else 0\n\n    return Version(major, minor, micro, release, pre, post, dev)\n\n\n__version_info__ = Version(10, 0, 0, \"final\")\n__version__ = __version_info__._get_canonical()\n", "code_before": "\"\"\"Meta related things.\"\"\"\nfrom collections import namedtuple\nimport re\n\nRE_VER = re.compile(\n    r'''(?x)\n    (?P<major>\\d+)(?:\\.(?P<minor>\\d+))?(?:\\.(?P<micro>\\d+))?\n    (?:(?P<type>a|b|rc)(?P<pre>\\d+))?\n    (?:\\.post(?P<post>\\d+))?\n    (?:\\.dev(?P<dev>\\d+))?\n    '''\n)\n\nREL_MAP = {\n    \".dev\": \"\",\n    \".dev-alpha\": \"a\",\n    \".dev-beta\": \"b\",\n    \".dev-candidate\": \"rc\",\n    \"alpha\": \"a\",\n    \"beta\": \"b\",\n    \"candidate\": \"rc\",\n    \"final\": \"\"\n}\n\nDEV_STATUS = {\n    \".dev\": \"2 - Pre-Alpha\",\n    \".dev-alpha\": \"2 - Pre-Alpha\",\n    \".dev-beta\": \"2 - Pre-Alpha\",\n    \".dev-candidate\": \"2 - Pre-Alpha\",\n    \"alpha\": \"3 - Alpha\",\n    \"beta\": \"4 - Beta\",\n    \"candidate\": \"4 - Beta\",\n    \"final\": \"5 - Production/Stable\"\n}\n\nPRE_REL_MAP = {\"a\": 'alpha', \"b\": 'beta', \"rc\": 'candidate'}\n\n\nclass Version(namedtuple(\"Version\", [\"major\", \"minor\", \"micro\", \"release\", \"pre\", \"post\", \"dev\"])):\n    \"\"\"\n    Get the version (PEP 440).\n\n    A biased approach to the PEP 440 semantic version.\n\n    Provides a tuple structure which is sorted for comparisons `v1 > v2` etc.\n      (major, minor, micro, release type, pre-release build, post-release build, development release build)\n    Release types are named in is such a way they are comparable with ease.\n    Accessors to check if a development, pre-release, or post-release build. Also provides accessor to get\n    development status for setup files.\n\n    How it works (currently):\n\n    - You must specify a release type as either `final`, `alpha`, `beta`, or `candidate`.\n    - To define a development release, you can use either `.dev`, `.dev-alpha`, `.dev-beta`, or `.dev-candidate`.\n      The dot is used to ensure all development specifiers are sorted before `alpha`.\n      You can specify a `dev` number for development builds, but do not have to as implicit development releases\n      are allowed.\n    - You must specify a `pre` value greater than zero if using a prerelease as this project (not PEP 440) does not\n      allow implicit prereleases.\n    - You can optionally set `post` to a value greater than zero to make the build a post release. While post releases\n      are technically allowed in prereleases, it is strongly discouraged, so we are rejecting them. It should be\n      noted that we do not allow `post0` even though PEP 440 does not restrict this. This project specifically\n      does not allow implicit post releases.\n    - It should be noted that we do not support epochs `1!` or local versions `+some-custom.version-1`.\n\n    Acceptable version releases:\n\n    ```\n    Version(1, 0, 0, \"final\")                    1.0\n    Version(1, 2, 0, \"final\")                    1.2\n    Version(1, 2, 3, \"final\")                    1.2.3\n    Version(1, 2, 0, \".dev-alpha\", pre=4)        1.2a4\n    Version(1, 2, 0, \".dev-beta\", pre=4)         1.2b4\n    Version(1, 2, 0, \".dev-candidate\", pre=4)    1.2rc4\n    Version(1, 2, 0, \"final\", post=1)            1.2.post1\n    Version(1, 2, 3, \".dev\")                     1.2.3.dev0\n    Version(1, 2, 3, \".dev\", dev=1)              1.2.3.dev1\n    ```\n\n    \"\"\"\n\n    def __new__(cls, major, minor, micro, release=\"final\", pre=0, post=0, dev=0):\n        \"\"\"Validate version info.\"\"\"\n\n        # Ensure all parts are positive integers.\n        for value in (major, minor, micro, pre, post):\n            if not (isinstance(value, int) and value >= 0):\n                raise ValueError(\"All version parts except 'release' should be integers.\")\n\n        if release not in REL_MAP:\n            raise ValueError(\"'{}' is not a valid release type.\".format(release))\n\n        # Ensure valid pre-release (we do not allow implicit pre-releases).\n        if \".dev-candidate\" < release < \"final\":\n            if pre == 0:\n                raise ValueError(\"Implicit pre-releases not allowed.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure valid development or development/pre release\n        elif release < \"alpha\":\n            if release > \".dev\" and pre == 0:\n                raise ValueError(\"Implicit pre-release not allowed.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure a valid normal release\n        else:\n            if pre:\n                raise ValueError(\"Version is not a pre-release.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n\n        return super(Version, cls).__new__(cls, major, minor, micro, release, pre, post, dev)\n\n    def _is_pre(self):\n        \"\"\"Is prerelease.\"\"\"\n\n        return self.pre > 0\n\n    def _is_dev(self):\n        \"\"\"Is development.\"\"\"\n\n        return bool(self.release < \"alpha\")\n\n    def _is_post(self):\n        \"\"\"Is post.\"\"\"\n\n        return self.post > 0\n\n    def _get_dev_status(self):  # pragma: no cover\n        \"\"\"Get development status string.\"\"\"\n\n        return DEV_STATUS[self.release]\n\n    def _get_canonical(self):\n        \"\"\"Get the canonical output string.\"\"\"\n\n        # Assemble major, minor, micro version and append `pre`, `post`, or `dev` if needed..\n        if self.micro == 0:\n            ver = \"{}.{}\".format(self.major, self.minor)\n        else:\n            ver = \"{}.{}.{}\".format(self.major, self.minor, self.micro)\n        if self._is_pre():\n            ver += '{}{}'.format(REL_MAP[self.release], self.pre)\n        if self._is_post():\n            ver += \".post{}\".format(self.post)\n        if self._is_dev():\n            ver += \".dev{}\".format(self.dev)\n\n        return ver\n\n\ndef parse_version(ver, pre=False):\n    \"\"\"Parse version into a comparable Version tuple.\"\"\"\n\n    m = RE_VER.match(ver)\n\n    # Handle major, minor, micro\n    major = int(m.group('major'))\n    minor = int(m.group('minor')) if m.group('minor') else 0\n    micro = int(m.group('micro')) if m.group('micro') else 0\n\n    # Handle pre releases\n    if m.group('type'):\n        release = PRE_REL_MAP[m.group('type')]\n        pre = int(m.group('pre'))\n    else:\n        release = \"final\"\n        pre = 0\n\n    # Handle development releases\n    dev = m.group('dev') if m.group('dev') else 0\n    if m.group('dev'):\n        dev = int(m.group('dev'))\n        release = '.dev-' + release if pre else '.dev'\n    else:\n        dev = 0\n\n    # Handle post\n    post = int(m.group('post')) if m.group('post') else 0\n\n    return Version(major, minor, micro, release, pre, post, dev)\n\n\n__version_info__ = Version(9, 11, 0, \"final\")\n__version__ = __version_info__._get_canonical()\n", "patch": "@@ -185,5 +185,5 @@ def parse_version(ver, pre=False):\n     return Version(major, minor, micro, release, pre, post, dev)\n \n \n-__version_info__ = Version(9, 11, 0, \"final\")\n+__version_info__ = Version(10, 0, 0, \"final\")\n __version__ = __version_info__._get_canonical()", "file_path": "files/2023_5/586", "file_language": "py", "file_name": "pymdownx/__meta__.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class Version(namedtuple(\"Version\", [\"major\", \"minor\", \"micro\", \"release\", \"pre\", \"post\", \"dev\"])):\n    \"\"\"\n    Get the version (PEP 440).\n\n    A biased approach to the PEP 440 semantic version.\n\n    Provides a tuple structure which is sorted for comparisons `v1 > v2` etc.\n      (major, minor, micro, release type, pre-release build, post-release build, development release build)\n    Release types are named in is such a way they are comparable with ease.\n    Accessors to check if a development, pre-release, or post-release build. Also provides accessor to get\n    development status for setup files.\n\n    How it works (currently):\n\n    - You must specify a release type as either `final`, `alpha`, `beta`, or `candidate`.\n    - To define a development release, you can use either `.dev`, `.dev-alpha`, `.dev-beta`, or `.dev-candidate`.\n      The dot is used to ensure all development specifiers are sorted before `alpha`.\n      You can specify a `dev` number for development builds, but do not have to as implicit development releases\n      are allowed.\n    - You must specify a `pre` value greater than zero if using a prerelease as this project (not PEP 440) does not\n      allow implicit prereleases.\n    - You can optionally set `post` to a value greater than zero to make the build a post release. While post releases\n      are technically allowed in prereleases, it is strongly discouraged, so we are rejecting them. It should be\n      noted that we do not allow `post0` even though PEP 440 does not restrict this. This project specifically\n      does not allow implicit post releases.\n    - It should be noted that we do not support epochs `1!` or local versions `+some-custom.version-1`.\n\n    Acceptable version releases:\n\n    ```\n    Version(1, 0, 0, \"final\")                    1.0\n    Version(1, 2, 0, \"final\")                    1.2\n    Version(1, 2, 3, \"final\")                    1.2.3\n    Version(1, 2, 0, \".dev-alpha\", pre=4)        1.2a4\n    Version(1, 2, 0, \".dev-beta\", pre=4)         1.2b4\n    Version(1, 2, 0, \".dev-candidate\", pre=4)    1.2rc4\n    Version(1, 2, 0, \"final\", post=1)            1.2.post1\n    Version(1, 2, 3, \".dev\")                     1.2.3.dev0\n    Version(1, 2, 3, \".dev\", dev=1)              1.2.3.dev1\n    ```\n\n    \"\"\"\n\n    def __new__(cls, major, minor, micro, release=\"final\", pre=0, post=0, dev=0):\n        \"\"\"Validate version info.\"\"\"\n\n        # Ensure all parts are positive integers.\n        for value in (major, minor, micro, pre, post):\n            if not (isinstance(value, int) and value >= 0):\n                raise ValueError(\"All version parts except 'release' should be integers.\")\n\n        if release not in REL_MAP:\n            raise ValueError(\"'{}' is not a valid release type.\".format(release))\n\n        # Ensure valid pre-release (we do not allow implicit pre-releases).\n        if \".dev-candidate\" < release < \"final\":\n            if pre == 0:\n                raise ValueError(\"Implicit pre-releases not allowed.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure valid development or development/pre release\n        elif release < \"alpha\":\n            if release > \".dev\" and pre == 0:\n                raise ValueError(\"Implicit pre-release not allowed.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure a valid normal release\n        else:\n            if pre:\n                raise ValueError(\"Version is not a pre-release.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n\n        return super(Version, cls).__new__(cls, major, minor, micro, release, pre, post, dev)\n\n    def _is_pre(self):\n        \"\"\"Is prerelease.\"\"\"\n\n        return self.pre > 0\n\n    def _is_dev(self):\n        \"\"\"Is development.\"\"\"\n\n        return bool(self.release < \"alpha\")\n\n    def _is_post(self):\n        \"\"\"Is post.\"\"\"\n\n        return self.post > 0\n\n    def _get_dev_status(self):  # pragma: no cover\n        \"\"\"Get development status string.\"\"\"\n\n        return DEV_STATUS[self.release]\n\n    def _get_canonical(self):\n        \"\"\"Get the canonical output string.\"\"\"\n\n        # Assemble major, minor, micro version and append `pre`, `post`, or `dev` if needed..\n        if self.micro == 0:\n            ver = \"{}.{}\".format(self.major, self.minor)\n        else:\n            ver = \"{}.{}.{}\".format(self.major, self.minor, self.micro)\n        if self._is_pre():\n            ver += '{}{}'.format(REL_MAP[self.release], self.pre)\n        if self._is_post():\n            ver += \".post{}\".format(self.post)\n        if self._is_dev():\n            ver += \".dev{}\".format(self.dev)\n\n        return ver", "target": 0}, {"function": "def parse_version(ver, pre=False):\n    \"\"\"Parse version into a comparable Version tuple.\"\"\"\n\n    m = RE_VER.match(ver)\n\n    # Handle major, minor, micro\n    major = int(m.group('major'))\n    minor = int(m.group('minor')) if m.group('minor') else 0\n    micro = int(m.group('micro')) if m.group('micro') else 0\n\n    # Handle pre releases\n    if m.group('type'):\n        release = PRE_REL_MAP[m.group('type')]\n        pre = int(m.group('pre'))\n    else:\n        release = \"final\"\n        pre = 0\n\n    # Handle development releases\n    dev = m.group('dev') if m.group('dev') else 0\n    if m.group('dev'):\n        dev = int(m.group('dev'))\n        release = '.dev-' + release if pre else '.dev'\n    else:\n        dev = 0\n\n    # Handle post\n    post = int(m.group('post')) if m.group('post') else 0\n\n    return Version(major, minor, micro, release, pre, post, dev)", "target": 0}], "function_after": [{"function": "class Version(namedtuple(\"Version\", [\"major\", \"minor\", \"micro\", \"release\", \"pre\", \"post\", \"dev\"])):\n    \"\"\"\n    Get the version (PEP 440).\n\n    A biased approach to the PEP 440 semantic version.\n\n    Provides a tuple structure which is sorted for comparisons `v1 > v2` etc.\n      (major, minor, micro, release type, pre-release build, post-release build, development release build)\n    Release types are named in is such a way they are comparable with ease.\n    Accessors to check if a development, pre-release, or post-release build. Also provides accessor to get\n    development status for setup files.\n\n    How it works (currently):\n\n    - You must specify a release type as either `final`, `alpha`, `beta`, or `candidate`.\n    - To define a development release, you can use either `.dev`, `.dev-alpha`, `.dev-beta`, or `.dev-candidate`.\n      The dot is used to ensure all development specifiers are sorted before `alpha`.\n      You can specify a `dev` number for development builds, but do not have to as implicit development releases\n      are allowed.\n    - You must specify a `pre` value greater than zero if using a prerelease as this project (not PEP 440) does not\n      allow implicit prereleases.\n    - You can optionally set `post` to a value greater than zero to make the build a post release. While post releases\n      are technically allowed in prereleases, it is strongly discouraged, so we are rejecting them. It should be\n      noted that we do not allow `post0` even though PEP 440 does not restrict this. This project specifically\n      does not allow implicit post releases.\n    - It should be noted that we do not support epochs `1!` or local versions `+some-custom.version-1`.\n\n    Acceptable version releases:\n\n    ```\n    Version(1, 0, 0, \"final\")                    1.0\n    Version(1, 2, 0, \"final\")                    1.2\n    Version(1, 2, 3, \"final\")                    1.2.3\n    Version(1, 2, 0, \".dev-alpha\", pre=4)        1.2a4\n    Version(1, 2, 0, \".dev-beta\", pre=4)         1.2b4\n    Version(1, 2, 0, \".dev-candidate\", pre=4)    1.2rc4\n    Version(1, 2, 0, \"final\", post=1)            1.2.post1\n    Version(1, 2, 3, \".dev\")                     1.2.3.dev0\n    Version(1, 2, 3, \".dev\", dev=1)              1.2.3.dev1\n    ```\n\n    \"\"\"\n\n    def __new__(cls, major, minor, micro, release=\"final\", pre=0, post=0, dev=0):\n        \"\"\"Validate version info.\"\"\"\n\n        # Ensure all parts are positive integers.\n        for value in (major, minor, micro, pre, post):\n            if not (isinstance(value, int) and value >= 0):\n                raise ValueError(\"All version parts except 'release' should be integers.\")\n\n        if release not in REL_MAP:\n            raise ValueError(\"'{}' is not a valid release type.\".format(release))\n\n        # Ensure valid pre-release (we do not allow implicit pre-releases).\n        if \".dev-candidate\" < release < \"final\":\n            if pre == 0:\n                raise ValueError(\"Implicit pre-releases not allowed.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure valid development or development/pre release\n        elif release < \"alpha\":\n            if release > \".dev\" and pre == 0:\n                raise ValueError(\"Implicit pre-release not allowed.\")\n            elif post:\n                raise ValueError(\"Post-releases are not allowed with pre-releases.\")\n\n        # Ensure a valid normal release\n        else:\n            if pre:\n                raise ValueError(\"Version is not a pre-release.\")\n            elif dev:\n                raise ValueError(\"Version is not a development release.\")\n\n        return super(Version, cls).__new__(cls, major, minor, micro, release, pre, post, dev)\n\n    def _is_pre(self):\n        \"\"\"Is prerelease.\"\"\"\n\n        return self.pre > 0\n\n    def _is_dev(self):\n        \"\"\"Is development.\"\"\"\n\n        return bool(self.release < \"alpha\")\n\n    def _is_post(self):\n        \"\"\"Is post.\"\"\"\n\n        return self.post > 0\n\n    def _get_dev_status(self):  # pragma: no cover\n        \"\"\"Get development status string.\"\"\"\n\n        return DEV_STATUS[self.release]\n\n    def _get_canonical(self):\n        \"\"\"Get the canonical output string.\"\"\"\n\n        # Assemble major, minor, micro version and append `pre`, `post`, or `dev` if needed..\n        if self.micro == 0:\n            ver = \"{}.{}\".format(self.major, self.minor)\n        else:\n            ver = \"{}.{}.{}\".format(self.major, self.minor, self.micro)\n        if self._is_pre():\n            ver += '{}{}'.format(REL_MAP[self.release], self.pre)\n        if self._is_post():\n            ver += \".post{}\".format(self.post)\n        if self._is_dev():\n            ver += \".dev{}\".format(self.dev)\n\n        return ver", "target": 0}, {"function": "def parse_version(ver, pre=False):\n    \"\"\"Parse version into a comparable Version tuple.\"\"\"\n\n    m = RE_VER.match(ver)\n\n    # Handle major, minor, micro\n    major = int(m.group('major'))\n    minor = int(m.group('minor')) if m.group('minor') else 0\n    micro = int(m.group('micro')) if m.group('micro') else 0\n\n    # Handle pre releases\n    if m.group('type'):\n        release = PRE_REL_MAP[m.group('type')]\n        pre = int(m.group('pre'))\n    else:\n        release = \"final\"\n        pre = 0\n\n    # Handle development releases\n    dev = m.group('dev') if m.group('dev') else 0\n    if m.group('dev'):\n        dev = int(m.group('dev'))\n        release = '.dev-' + release if pre else '.dev'\n    else:\n        dev = 0\n\n    # Handle post\n    post = int(m.group('post')) if m.group('post') else 0\n\n    return Version(major, minor, micro, release, pre, post, dev)", "target": 0}]}, {"raw_url": "https://github.com/facelessuser/pymdown-extensions/raw/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d/pymdownx%2Fsnippets.py", "code": "\"\"\"\nSnippet ---8<---.\n\npymdownx.snippet\nInject snippets\n\nMIT license.\n\nCopyright (c) 2017 Isaac Muse <isaacmuse@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\"\"\"\nfrom markdown import Extension\nfrom markdown.preprocessors import Preprocessor\nimport functools\nimport urllib\nimport re\nimport codecs\nimport os\nfrom . import util\nimport textwrap\n\nMI = 1024 * 1024  # mebibyte (MiB)\nDEFAULT_URL_SIZE = MI * 32\nDEFAULT_URL_TIMEOUT = 10.0  # in seconds\nDEFAULT_URL_REQUEST_HEADERS = {}\n\n\nclass SnippetMissingError(Exception):\n    \"\"\"Snippet missing exception.\"\"\"\n\n\nclass SnippetPreprocessor(Preprocessor):\n    \"\"\"Handle snippets in Markdown content.\"\"\"\n\n    RE_ALL_SNIPPETS = re.compile(\n        r'''(?x)\n        ^(?P<space>[ \\t]*)\n        (?P<escape>;*)\n        (?P<all>\n            (?P<inline_marker>-{1,}8<-{1,}[ \\t]+)\n            (?P<snippet>(?:\"(?:\\\\\"|[^\"\\n\\r])+?\"|'(?:\\\\'|[^'\\n\\r])+?'))(?![ \\t]) |\n            (?P<block_marker>-{1,}8<-{1,})(?![ \\t])\n        )\\r?$\n        '''\n    )\n\n    RE_SNIPPET = re.compile(\n        r'''(?x)\n        ^(?P<space>[ \\t]*)\n        (?P<snippet>.*?)\\r?$\n        '''\n    )\n\n    RE_SNIPPET_SECTION = re.compile(\n        r'''(?xi)\n        ^(?P<pre>.*?)\n        (?P<escape>;*)\n        (?P<inline_marker>-{1,}8<-{1,}[ \\t]+)\n        (?P<section>\\[[ \\t]*(?P<type>start|end)[ \\t]*:[ \\t]*(?P<name>[a-z][-_0-9a-z]*)[ \\t]*\\])\n        (?P<post>.*?)$\n        '''\n    )\n\n    RE_SNIPPET_FILE = re.compile(r'(?i)(.*?)(?:(:[0-9]*)?(:[0-9]*)?|(:[a-z][-_0-9a-z]*)?)$')\n\n    def __init__(self, config, md):\n        \"\"\"Initialize.\"\"\"\n\n        base = config.get('base_path')\n        if isinstance(base, str):\n            base = [base]\n        self.base_path = [os.path.abspath(b) for b in base]\n        self.restrict_base_path = config['restrict_base_path']\n        self.encoding = config.get('encoding')\n        self.check_paths = config.get('check_paths')\n        self.auto_append = config.get('auto_append')\n        self.url_download = config['url_download']\n        self.url_max_size = config['url_max_size']\n        self.url_timeout = config['url_timeout']\n        self.url_request_headers = config['url_request_headers']\n        self.dedent_subsections = config['dedent_subsections']\n        self.tab_length = md.tab_length\n        super(SnippetPreprocessor, self).__init__()\n\n    def extract_section(self, section, lines):\n        \"\"\"Extract the specified section from the lines.\"\"\"\n\n        new_lines = []\n        start = False\n        found = False\n        for l in lines:\n\n            # Found a snippet section marker with our specified name\n            m = self.RE_SNIPPET_SECTION.match(l)\n\n            # Handle escaped line\n            if m and start and m.group('escape'):\n                l = (\n                    m.group('pre') + m.group('escape').replace(';', '', 1) + m.group('inline_marker') +\n                    m.group('section') + m.group('post')\n                )\n\n            # Found a section we are looking for.\n            elif m is not None and m.group('name') == section:\n\n                # We found the start\n                if not start and m.group('type') == 'start':\n                    start = True\n                    found = True\n                    continue\n\n                # Ignore duplicate start\n                elif start and m.group('type') == 'start':\n                    continue\n\n                # We found the end\n                elif start and m.group('type') == 'end':\n                    start = False\n                    break\n\n                # We found an end, but no start\n                else:\n                    break\n\n            # Found a section we don't care about, so ignore it.\n            elif m and start:\n                continue\n\n            # We are currently in a section, so append the line\n            if start:\n                new_lines.append(l)\n\n        if not found and self.check_paths:\n            raise SnippetMissingError(\"Snippet section '{}' could not be located\".format(section))\n\n        return self.dedent(new_lines) if self.dedent_subsections else new_lines\n\n    def dedent(self, lines):\n        \"\"\"De-indent lines.\"\"\"\n\n        return textwrap.dedent('\\n'.join(lines)).split('\\n')\n\n    def get_snippet_path(self, path):\n        \"\"\"Get snippet path.\"\"\"\n\n        snippet = None\n        for base in self.base_path:\n            if os.path.exists(base):\n                if os.path.isdir(base):\n                    if self.restrict_base_path:\n                        filename = os.path.abspath(os.path.join(base, path))\n                        # If the absolute path is no longer under the specified base path, reject the file\n                        if not os.path.samefile(base, os.path.dirname(filename)):\n                            continue\n                    else:\n                        filename = os.path.join(base, path)\n                    if os.path.exists(filename):\n                        snippet = filename\n                        break\n                else:\n                    dirname = os.path.dirname(base)\n                    filename = os.path.join(dirname, path)\n                    if os.path.exists(filename) and os.path.samefile(filename, base):\n                        snippet = filename\n                        break\n        return snippet\n\n    @functools.lru_cache()\n    def download(self, url):\n        \"\"\"\n        Actually download the snippet pointed to by the passed URL.\n\n        The most recently used files are kept in a cache until the next reset.\n        \"\"\"\n\n        http_request = urllib.request.Request(url, headers=self.url_request_headers)\n        timeout = None if self.url_timeout == 0 else self.url_timeout\n        with urllib.request.urlopen(http_request, timeout=timeout) as response:\n\n            # Fail if status is not OK\n            status = response.status if util.PY39 else response.code\n            if status != 200:\n                raise SnippetMissingError(\"Cannot download snippet '{}'\".format(url))\n\n            # We provide some basic protection against absurdly large files.\n            # 32MB is chosen as an arbitrary upper limit. This can be raised if desired.\n            length = response.headers.get(\"content-length\")\n            if length is None:\n                raise ValueError(\"Missing content-length header\")\n            content_length = int(length)\n\n            if self.url_max_size != 0 and content_length >= self.url_max_size:\n                raise ValueError(\"refusing to read payloads larger than or equal to {}\".format(self.url_max_size))\n\n            # Nothing to return\n            if content_length == 0:\n                return ['']\n\n            # Process lines\n            return [l.decode(self.encoding).rstrip('\\r\\n') for l in response.readlines()]\n\n    def parse_snippets(self, lines, file_name=None, is_url=False):\n        \"\"\"Parse snippets snippet.\"\"\"\n\n        if file_name:\n            # Track this file.\n            self.seen.add(file_name)\n\n        new_lines = []\n        inline = False\n        block = False\n        for line in lines:\n            # Check for snippets on line\n            inline = False\n            m = self.RE_ALL_SNIPPETS.match(line)\n            if m:\n                if m.group('escape'):\n                    # The snippet has been escaped, replace first `;` and continue.\n                    new_lines.append(line.replace(';', '', 1))\n                    continue\n\n                if block and m.group('inline_marker'):\n                    # Don't use inline notation directly under a block.\n                    # It's okay if inline is used again in sub file though.\n                    continue\n\n                elif m.group('inline_marker'):\n                    # Inline\n                    inline = True\n\n                else:\n                    # Block\n                    block = not block\n                    continue\n\n            elif not block:\n                # Not in snippet, and we didn't find an inline,\n                # so just a normal line\n                new_lines.append(line)\n                continue\n\n            if block and not inline:\n                # We are in a block and we didn't just find a nested inline\n                # So check if a block path\n                m = self.RE_SNIPPET.match(line)\n\n            if m:\n                # Get spaces and snippet path.  Remove quotes if inline.\n                space = m.group('space').expandtabs(self.tab_length)\n                path = m.group('snippet')[1:-1].strip() if inline else m.group('snippet').strip()\n\n                if not inline:\n                    # Block path handling\n                    if not path:\n                        # Empty path line, insert a blank line\n                        new_lines.append('')\n                        continue\n\n                # Ignore commented out lines\n                if path.startswith(';'):\n                    continue\n\n                # Get line numbers (if specified)\n                end = None\n                start = None\n                section = None\n                m = self.RE_SNIPPET_FILE.match(path)\n                path = m.group(1).strip()\n                # Looks like we have an empty file and only lines specified\n                if not path:\n                    if self.check_paths:\n                        raise SnippetMissingError(\"Snippet at path '{}' could not be found\".format(path))\n                    else:\n                        continue\n                ending = m.group(3)\n                if ending and len(ending) > 1:\n                    end = int(ending[1:])\n                starting = m.group(2)\n                if starting and len(starting) > 1:\n                    start = max(1, int(starting[1:]) - 1)\n                section_name = m.group(4)\n                if section_name:\n                    section = section_name[1:]\n\n                # Ignore path links if we are in external, downloaded content\n                is_link = path.lower().startswith(('https://', 'http://'))\n                if is_url and not is_link:\n                    continue\n\n                # If this is a link, and we are allowing URLs, set `url` to true.\n                # Make sure we don't process `path` as a local file reference.\n                url = self.url_download and is_link\n                snippet = self.get_snippet_path(path) if not url else path\n\n                if snippet:\n\n                    # This is in the stack and we don't want an infinite loop!\n                    if snippet in self.seen:\n                        continue\n\n                    if not url:\n                        # Read file content\n                        with codecs.open(snippet, 'r', encoding=self.encoding) as f:\n                            s_lines = [l.rstrip('\\r\\n') for l in f]\n                            if start is not None or end is not None:\n                                s = slice(start, end)\n                                s_lines = self.dedent(s_lines[s]) if self.dedent_subsections else s_lines[s]\n                            elif section:\n                                s_lines = self.extract_section(section, s_lines)\n                    else:\n                        # Read URL content\n                        try:\n                            s_lines = self.download(snippet)\n                            if start is not None or end is not None:\n                                s = slice(start, end)\n                                s_lines = self.dedent(s_lines[s]) if self.dedent_subsections else s_lines[s]\n                            elif section:\n                                s_lines = self.extract_section(section, s_lines)\n                        except SnippetMissingError:\n                            if self.check_paths:\n                                raise\n                            s_lines = []\n\n                    # Process lines looking for more snippets\n                    new_lines.extend(\n                        [\n                            space + l2 for l2 in self.parse_snippets(\n                                s_lines,\n                                snippet,\n                                is_url=url\n                            )\n                        ]\n                    )\n\n                elif self.check_paths:\n                    raise SnippetMissingError(\"Snippet at path '{}' could not be found\".format(path))\n\n        # Pop the current file name out of the cache\n        if file_name:\n            self.seen.remove(file_name)\n\n        return new_lines\n\n    def run(self, lines):\n        \"\"\"Process snippets.\"\"\"\n\n        self.seen = set()\n        if self.auto_append:\n            lines.extend(\"\\n\\n-8<-\\n{}\\n-8<-\\n\".format('\\n\\n'.join(self.auto_append)).split('\\n'))\n\n        return self.parse_snippets(lines)\n\n\nclass SnippetExtension(Extension):\n    \"\"\"Snippet extension.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialize.\"\"\"\n\n        self.config = {\n            'base_path': [[\".\"], \"Base path for snippet paths - Default: [\\\".\\\"]\"],\n            'restrict_base_path': [\n                True,\n                \"Restrict snippet paths such that they are under the base paths - Default: True\"\n            ],\n            'encoding': [\"utf-8\", \"Encoding of snippets - Default: \\\"utf-8\\\"\"],\n            'check_paths': [False, \"Make the build fail if a snippet can't be found - Default: \\\"False\\\"\"],\n            \"auto_append\": [\n                [],\n                \"A list of snippets (relative to the 'base_path') to auto append to the Markdown content - Default: []\"\n            ],\n            'url_download': [False, \"Download external URLs as snippets - Default: \\\"False\\\"\"],\n            'url_max_size': [DEFAULT_URL_SIZE, \"External URL max size (0 means no limit)- Default: 32 MiB\"],\n            'url_timeout': [DEFAULT_URL_TIMEOUT, 'Defualt URL timeout (0 means no timeout) - Default: 10 sec'],\n            'url_request_headers': [DEFAULT_URL_REQUEST_HEADERS, \"Extra request Headers - Default: {}\"],\n            'dedent_subsections': [False, \"Dedent subsection extractions e.g. 'sections' and/or 'lines'.\"]\n        }\n\n        super(SnippetExtension, self).__init__(*args, **kwargs)\n\n    def extendMarkdown(self, md):\n        \"\"\"Register the extension.\"\"\"\n\n        self.md = md\n        md.registerExtension(self)\n        config = self.getConfigs()\n        snippet = SnippetPreprocessor(config, md)\n        md.preprocessors.register(snippet, \"snippet\", 32)\n\n    def reset(self):\n        \"\"\"Reset.\"\"\"\n\n        self.md.preprocessors['snippet'].download.cache_clear()\n\n\ndef makeExtension(*args, **kwargs):\n    \"\"\"Return extension.\"\"\"\n\n    return SnippetExtension(*args, **kwargs)\n", "code_before": "\"\"\"\nSnippet ---8<---.\n\npymdownx.snippet\nInject snippets\n\nMIT license.\n\nCopyright (c) 2017 Isaac Muse <isaacmuse@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\"\"\"\nfrom markdown import Extension\nfrom markdown.preprocessors import Preprocessor\nimport functools\nimport urllib\nimport re\nimport codecs\nimport os\nfrom . import util\nimport textwrap\n\nMI = 1024 * 1024  # mebibyte (MiB)\nDEFAULT_URL_SIZE = MI * 32\nDEFAULT_URL_TIMEOUT = 10.0  # in seconds\nDEFAULT_URL_REQUEST_HEADERS = {}\n\n\nclass SnippetMissingError(Exception):\n    \"\"\"Snippet missing exception.\"\"\"\n\n\nclass SnippetPreprocessor(Preprocessor):\n    \"\"\"Handle snippets in Markdown content.\"\"\"\n\n    RE_ALL_SNIPPETS = re.compile(\n        r'''(?x)\n        ^(?P<space>[ \\t]*)\n        (?P<escape>;*)\n        (?P<all>\n            (?P<inline_marker>-{1,}8<-{1,}[ \\t]+)\n            (?P<snippet>(?:\"(?:\\\\\"|[^\"\\n\\r])+?\"|'(?:\\\\'|[^'\\n\\r])+?'))(?![ \\t]) |\n            (?P<block_marker>-{1,}8<-{1,})(?![ \\t])\n        )\\r?$\n        '''\n    )\n\n    RE_SNIPPET = re.compile(\n        r'''(?x)\n        ^(?P<space>[ \\t]*)\n        (?P<snippet>.*?)\\r?$\n        '''\n    )\n\n    RE_SNIPPET_SECTION = re.compile(\n        r'''(?xi)\n        ^(?P<pre>.*?)\n        (?P<escape>;*)\n        (?P<inline_marker>-{1,}8<-{1,}[ \\t]+)\n        (?P<section>\\[[ \\t]*(?P<type>start|end)[ \\t]*:[ \\t]*(?P<name>[a-z][-_0-9a-z]*)[ \\t]*\\])\n        (?P<post>.*?)$\n        '''\n    )\n\n    RE_SNIPPET_FILE = re.compile(r'(?i)(.*?)(?:(:[0-9]*)?(:[0-9]*)?|(:[a-z][-_0-9a-z]*)?)$')\n\n    def __init__(self, config, md):\n        \"\"\"Initialize.\"\"\"\n\n        base = config.get('base_path')\n        if isinstance(base, str):\n            base = [base]\n        self.base_path = base\n        self.encoding = config.get('encoding')\n        self.check_paths = config.get('check_paths')\n        self.auto_append = config.get('auto_append')\n        self.url_download = config['url_download']\n        self.url_max_size = config['url_max_size']\n        self.url_timeout = config['url_timeout']\n        self.url_request_headers = config['url_request_headers']\n        self.dedent_subsections = config['dedent_subsections']\n        self.tab_length = md.tab_length\n        super(SnippetPreprocessor, self).__init__()\n\n    def extract_section(self, section, lines):\n        \"\"\"Extract the specified section from the lines.\"\"\"\n\n        new_lines = []\n        start = False\n        found = False\n        for l in lines:\n\n            # Found a snippet section marker with our specified name\n            m = self.RE_SNIPPET_SECTION.match(l)\n\n            # Handle escaped line\n            if m and start and m.group('escape'):\n                l = (\n                    m.group('pre') + m.group('escape').replace(';', '', 1) + m.group('inline_marker') +\n                    m.group('section') + m.group('post')\n                )\n\n            # Found a section we are looking for.\n            elif m is not None and m.group('name') == section:\n\n                # We found the start\n                if not start and m.group('type') == 'start':\n                    start = True\n                    found = True\n                    continue\n\n                # Ignore duplicate start\n                elif start and m.group('type') == 'start':\n                    continue\n\n                # We found the end\n                elif start and m.group('type') == 'end':\n                    start = False\n                    break\n\n                # We found an end, but no start\n                else:\n                    break\n\n            # Found a section we don't care about, so ignore it.\n            elif m and start:\n                continue\n\n            # We are currently in a section, so append the line\n            if start:\n                new_lines.append(l)\n\n        if not found and self.check_paths:\n            raise SnippetMissingError(\"Snippet section '{}' could not be located\".format(section))\n\n        return self.dedent(new_lines) if self.dedent_subsections else new_lines\n\n    def dedent(self, lines):\n        \"\"\"De-indent lines.\"\"\"\n\n        return textwrap.dedent('\\n'.join(lines)).split('\\n')\n\n    def get_snippet_path(self, path):\n        \"\"\"Get snippet path.\"\"\"\n\n        snippet = None\n        for base in self.base_path:\n            if os.path.exists(base):\n                if os.path.isdir(base):\n                    filename = os.path.join(base, path)\n                    if os.path.exists(filename):\n                        snippet = filename\n                        break\n                else:\n                    basename = os.path.basename(base)\n                    dirname = os.path.dirname(base)\n                    if basename.lower() == path.lower():\n                        filename = os.path.join(dirname, path)\n                        if os.path.exists(filename):\n                            snippet = filename\n                            break\n        return snippet\n\n    @functools.lru_cache()\n    def download(self, url):\n        \"\"\"\n        Actually download the snippet pointed to by the passed URL.\n\n        The most recently used files are kept in a cache until the next reset.\n        \"\"\"\n\n        http_request = urllib.request.Request(url, headers=self.url_request_headers)\n        timeout = None if self.url_timeout == 0 else self.url_timeout\n        with urllib.request.urlopen(http_request, timeout=timeout) as response:\n\n            # Fail if status is not OK\n            status = response.status if util.PY39 else response.code\n            if status != 200:\n                raise SnippetMissingError(\"Cannot download snippet '{}'\".format(url))\n\n            # We provide some basic protection against absurdly large files.\n            # 32MB is chosen as an arbitrary upper limit. This can be raised if desired.\n            length = response.headers.get(\"content-length\")\n            if length is None:\n                raise ValueError(\"Missing content-length header\")\n            content_length = int(length)\n\n            if self.url_max_size != 0 and content_length >= self.url_max_size:\n                raise ValueError(\"refusing to read payloads larger than or equal to {}\".format(self.url_max_size))\n\n            # Nothing to return\n            if content_length == 0:\n                return ['']\n\n            # Process lines\n            return [l.decode(self.encoding).rstrip('\\r\\n') for l in response.readlines()]\n\n    def parse_snippets(self, lines, file_name=None, is_url=False):\n        \"\"\"Parse snippets snippet.\"\"\"\n\n        if file_name:\n            # Track this file.\n            self.seen.add(file_name)\n\n        new_lines = []\n        inline = False\n        block = False\n        for line in lines:\n            # Check for snippets on line\n            inline = False\n            m = self.RE_ALL_SNIPPETS.match(line)\n            if m:\n                if m.group('escape'):\n                    # The snippet has been escaped, replace first `;` and continue.\n                    new_lines.append(line.replace(';', '', 1))\n                    continue\n\n                if block and m.group('inline_marker'):\n                    # Don't use inline notation directly under a block.\n                    # It's okay if inline is used again in sub file though.\n                    continue\n\n                elif m.group('inline_marker'):\n                    # Inline\n                    inline = True\n\n                else:\n                    # Block\n                    block = not block\n                    continue\n\n            elif not block:\n                # Not in snippet, and we didn't find an inline,\n                # so just a normal line\n                new_lines.append(line)\n                continue\n\n            if block and not inline:\n                # We are in a block and we didn't just find a nested inline\n                # So check if a block path\n                m = self.RE_SNIPPET.match(line)\n\n            if m:\n                # Get spaces and snippet path.  Remove quotes if inline.\n                space = m.group('space').expandtabs(self.tab_length)\n                path = m.group('snippet')[1:-1].strip() if inline else m.group('snippet').strip()\n\n                if not inline:\n                    # Block path handling\n                    if not path:\n                        # Empty path line, insert a blank line\n                        new_lines.append('')\n                        continue\n\n                # Ignore commented out lines\n                if path.startswith(';'):\n                    continue\n\n                # Get line numbers (if specified)\n                end = None\n                start = None\n                section = None\n                m = self.RE_SNIPPET_FILE.match(path)\n                path = m.group(1).strip()\n                # Looks like we have an empty file and only lines specified\n                if not path:\n                    if self.check_paths:\n                        raise SnippetMissingError(\"Snippet at path '{}' could not be found\".format(path))\n                    else:\n                        continue\n                ending = m.group(3)\n                if ending and len(ending) > 1:\n                    end = int(ending[1:])\n                starting = m.group(2)\n                if starting and len(starting) > 1:\n                    start = max(1, int(starting[1:]) - 1)\n                section_name = m.group(4)\n                if section_name:\n                    section = section_name[1:]\n\n                # Ignore path links if we are in external, downloaded content\n                is_link = path.lower().startswith(('https://', 'http://'))\n                if is_url and not is_link:\n                    continue\n\n                # If this is a link, and we are allowing URLs, set `url` to true.\n                # Make sure we don't process `path` as a local file reference.\n                url = self.url_download and is_link\n                snippet = self.get_snippet_path(path) if not url else path\n\n                if snippet:\n\n                    # This is in the stack and we don't want an infinite loop!\n                    if snippet in self.seen:\n                        continue\n\n                    if not url:\n                        # Read file content\n                        with codecs.open(snippet, 'r', encoding=self.encoding) as f:\n                            s_lines = [l.rstrip('\\r\\n') for l in f]\n                            if start is not None or end is not None:\n                                s = slice(start, end)\n                                s_lines = self.dedent(s_lines[s]) if self.dedent_subsections else s_lines[s]\n                            elif section:\n                                s_lines = self.extract_section(section, s_lines)\n                    else:\n                        # Read URL content\n                        try:\n                            s_lines = self.download(snippet)\n                            if start is not None or end is not None:\n                                s = slice(start, end)\n                                s_lines = self.dedent(s_lines[s]) if self.dedent_subsections else s_lines[s]\n                            elif section:\n                                s_lines = self.extract_section(section, s_lines)\n                        except SnippetMissingError:\n                            if self.check_paths:\n                                raise\n                            s_lines = []\n\n                    # Process lines looking for more snippets\n                    new_lines.extend(\n                        [\n                            space + l2 for l2 in self.parse_snippets(\n                                s_lines,\n                                snippet,\n                                is_url=url\n                            )\n                        ]\n                    )\n\n                elif self.check_paths:\n                    raise SnippetMissingError(\"Snippet at path '{}' could not be found\".format(path))\n\n        # Pop the current file name out of the cache\n        if file_name:\n            self.seen.remove(file_name)\n\n        return new_lines\n\n    def run(self, lines):\n        \"\"\"Process snippets.\"\"\"\n\n        self.seen = set()\n        if self.auto_append:\n            lines.extend(\"\\n\\n-8<-\\n{}\\n-8<-\\n\".format('\\n\\n'.join(self.auto_append)).split('\\n'))\n\n        return self.parse_snippets(lines)\n\n\nclass SnippetExtension(Extension):\n    \"\"\"Snippet extension.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialize.\"\"\"\n\n        self.config = {\n            'base_path': [[\".\"], \"Base path for snippet paths - Default: [\\\".\\\"]\"],\n            'encoding': [\"utf-8\", \"Encoding of snippets - Default: \\\"utf-8\\\"\"],\n            'check_paths': [False, \"Make the build fail if a snippet can't be found - Default: \\\"False\\\"\"],\n            \"auto_append\": [\n                [],\n                \"A list of snippets (relative to the 'base_path') to auto append to the Markdown content - Default: []\"\n            ],\n            'url_download': [False, \"Download external URLs as snippets - Default: \\\"False\\\"\"],\n            'url_max_size': [DEFAULT_URL_SIZE, \"External URL max size (0 means no limit)- Default: 32 MiB\"],\n            'url_timeout': [DEFAULT_URL_TIMEOUT, 'Defualt URL timeout (0 means no timeout) - Default: 10 sec'],\n            'url_request_headers': [DEFAULT_URL_REQUEST_HEADERS, \"Extra request Headers - Default: {}\"],\n            'dedent_subsections': [False, \"Dedent subsection extractions e.g. 'sections' and/or 'lines'.\"]\n        }\n\n        super(SnippetExtension, self).__init__(*args, **kwargs)\n\n    def extendMarkdown(self, md):\n        \"\"\"Register the extension.\"\"\"\n\n        self.md = md\n        md.registerExtension(self)\n        config = self.getConfigs()\n        snippet = SnippetPreprocessor(config, md)\n        md.preprocessors.register(snippet, \"snippet\", 32)\n\n    def reset(self):\n        \"\"\"Reset.\"\"\"\n\n        self.md.preprocessors['snippet'].download.cache_clear()\n\n\ndef makeExtension(*args, **kwargs):\n    \"\"\"Return extension.\"\"\"\n\n    return SnippetExtension(*args, **kwargs)\n", "patch": "@@ -82,7 +82,8 @@ def __init__(self, config, md):\n         base = config.get('base_path')\r\n         if isinstance(base, str):\r\n             base = [base]\r\n-        self.base_path = base\r\n+        self.base_path = [os.path.abspath(b) for b in base]\r\n+        self.restrict_base_path = config['restrict_base_path']\r\n         self.encoding = config.get('encoding')\r\n         self.check_paths = config.get('check_paths')\r\n         self.auto_append = config.get('auto_append')\r\n@@ -159,18 +160,22 @@ def get_snippet_path(self, path):\n         for base in self.base_path:\r\n             if os.path.exists(base):\r\n                 if os.path.isdir(base):\r\n-                    filename = os.path.join(base, path)\r\n+                    if self.restrict_base_path:\r\n+                        filename = os.path.abspath(os.path.join(base, path))\r\n+                        # If the absolute path is no longer under the specified base path, reject the file\r\n+                        if not os.path.samefile(base, os.path.dirname(filename)):\r\n+                            continue\r\n+                    else:\r\n+                        filename = os.path.join(base, path)\r\n                     if os.path.exists(filename):\r\n                         snippet = filename\r\n                         break\r\n                 else:\r\n-                    basename = os.path.basename(base)\r\n                     dirname = os.path.dirname(base)\r\n-                    if basename.lower() == path.lower():\r\n-                        filename = os.path.join(dirname, path)\r\n-                        if os.path.exists(filename):\r\n-                            snippet = filename\r\n-                            break\r\n+                    filename = os.path.join(dirname, path)\r\n+                    if os.path.exists(filename) and os.path.samefile(filename, base):\r\n+                        snippet = filename\r\n+                        break\r\n         return snippet\r\n \r\n     @functools.lru_cache()\r\n@@ -367,6 +372,10 @@ def __init__(self, *args, **kwargs):\n \r\n         self.config = {\r\n             'base_path': [[\".\"], \"Base path for snippet paths - Default: [\\\".\\\"]\"],\r\n+            'restrict_base_path': [\r\n+                True,\r\n+                \"Restrict snippet paths such that they are under the base paths - Default: True\"\r\n+            ],\r\n             'encoding': [\"utf-8\", \"Encoding of snippets - Default: \\\"utf-8\\\"\"],\r\n             'check_paths': [False, \"Make the build fail if a snippet can't be found - Default: \\\"False\\\"\"],\r\n             \"auto_append\": [\r", "file_path": "files/2023_5/587", "file_language": "py", "file_name": "pymdownx/snippets.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/facelessuser/pymdown-extensions/raw/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d/tests%2Ftest_extensions%2F_snippets%2Fnested%2Fnested.txt", "code": "Snippet\n", "code_before": "", "patch": "@@ -0,0 +1 @@\n+Snippet", "file_path": "files/2023_5/588", "file_language": "txt", "file_name": "tests/test_extensions/_snippets/nested/nested.txt", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/facelessuser/pymdown-extensions/raw/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d/tests%2Ftest_extensions%2Ftest_snippets.py", "code": "\"\"\"Test cases for Snippets.\"\"\"\nfrom .. import util\nimport os\nfrom pymdownx.snippets import SnippetMissingError\nfrom unittest.mock import patch, MagicMock\n\nBASE = os.path.abspath(os.path.dirname(__file__))\n\n\nclass TestSnippetDedent(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'dedent_subsections': True\n        }\n    }\n\n    def test_dedent_section(self):\n        \"\"\"Test dedenting sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:py-section\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_lines(self):\n        \"\"\"Test dedenting lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:5:8\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_indented(self):\n        \"\"\"Test dedenting sections that has indented insertion.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Paragraph\n\n                ---8<--- \"indented.txt:py-section\"\n            ''',  # noqa: W291\n            R'''\n            <p>Paragraph</p>\n            <pre><code>def some_method(self, param):\n                \"\"\"Docstring.\"\"\"\n\n                return param\n            </code></pre>\n            ''',\n            True\n        )\n\n\nclass TestSnippets(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_inline(self):\n        \"\"\"Test inline.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"loop.txt\"\n            ---8<--- \"a.txt\"\n            ---8<--- \"b.txt\"\n            ;---8<--- \"b.txt\"\n\n            - Testing indentation\n\n                ---8<--- \"b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet\n            Snippet\n            ---8&lt;--- \"b.txt\"</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',\n            True\n        )\n\n    def test_block(self):\n        \"\"\"Test block.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n\n            ;---8<---\n            d.txt\n            ;---8<---\n\n            - Testing indentation\n\n                ---8<---\n                d.txt\n\n                ; d.txt\n                # Nested inline won't work\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n                ---8<---\n\n                # Un-nested Inline\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>---8&lt;---\n            d.txt\n            ---8&lt;---</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            <h1>Un-nested Inline</h1>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',  # noqa: W291\n            True\n        )\n\n    def test_mixed(self):\n        \"\"\"Test mixed.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"a.txt\"\n\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n            ''',\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_start_line_inline(self):\n        \"\"\"Test starting line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_inline(self):\n        \"\"\"Test ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt::6\"\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_inline(self):\n        \"\"\"Test starting and ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_line_block(self):\n        \"\"\"Test starting line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_block(self):\n        \"\"\"Test ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt::6\n            --8<--\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_block(self):\n        \"\"\"Test starting and ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4:6\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_section_inline(self):\n        \"\"\"Test section partial in inline snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_min(self):\n        \"\"\"Test section partial in inline snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_ignore_other_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_escaped_other_section(self):\n        \"\"\"Test nested escaped sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section3\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                /* --8&lt;-- [start: css-section4] */\n                background-color: white;\n                padding: 16px\n                /* --8&lt;-- [end: css-section4] */\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_ignore_double_start_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section5\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_block(self):\n        \"\"\"Test section partial in block snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_block_min(self):\n        \"\"\"Test section partial in block snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            -8<-\n            section.txt:html-section\n            -8<-\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_end_first(self):\n        \"\"\"Test section when the end is specified first.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:css-section2\n            --8<--\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_section_no_end(self):\n        \"\"\"Test section when the end is not specified.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section2\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n\nclass TestSnippetsFile(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'b.txt')\n        }\n    }\n\n    def test_user(self):\n        \"\"\"Test file.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"b.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n\nclass TestSnippetsNested(util.MdCase):\n    \"\"\"Test nested restriction.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n            'check_paths': True\n        }\n    }\n\n    def test_restricted(self):\n        \"\"\"Test file restriction.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"../b.txt\"\n                ''',\n                '''\n                <p>Snippet</p>\n                ''',\n                True\n            )\n\n\nclass TestSnippetsNestedUnrestricted(util.MdCase):\n    \"\"\"Test nested no bounds.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n            'restrict_base_path': False\n        }\n    }\n\n    def test_restricted(self):\n        \"\"\"Test file restriction.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"../b.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n\nclass TestSnippetsAutoAppend(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'auto_append': ['b.txt']\n        }\n    }\n\n    def test_auto_append(self):\n        \"\"\"Test auto append.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Test\n            ''',\n            '''\n            <p>Test</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n\nclass TestSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'check_paths': True\n        }\n    }\n\n    def test_good(self):\n        \"\"\"Test found file.\"\"\"\n\n        self.check_markdown(\n            '''\n            --8<--- \"d.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"not-here.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"missing.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_file_lines(self):\n        \"\"\"Test missing file with line numbers.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \":3:4\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_section(self):\n        \"\"\"Test missing section.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"section.txt:missing-section\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n\nclass TestSnippetsGracefulMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"not-here.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"missing.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_missing_lines(self):\n        \"\"\"Test missing file with lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \":3:4\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n\nclass TestURLSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url(self, mock_urlopen):\n        \"\"\"Test URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested(self, mock_urlopen):\n        \"\"\"Test nested URLs.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile2.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            <p>other</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_duplicatqe(self, mock_urlopen):\n        \"\"\"Test nested duplicate file.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_file(self, mock_urlopen):\n        \"\"\"Test nested file in URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'content', b'', b'--8<-- \"b.txt\"']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_lines(self, mock_urlopen):\n        \"\"\"Test specifying specific lines in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/lines.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length(self, mock_urlopen):\n        \"\"\"Test missing content length header.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length_too_big(self, mock_urlopen):\n        \"\"\"Test content length too big.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/section.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:html-section\"\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n\nclass TestURLDedentSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'dedent_subsections': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/indented.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"https://test.com/myfile.md:py-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n\nclass TestURLSnippetsNoMax(util.MdCase):\n    \"\"\"Test snippet URL cases no max size.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )\n\n\nclass TestURLSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet URL cases with missing URL and 'check paths'.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0,\n            'check_paths': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '',\n                True\n            )\n", "code_before": "\"\"\"Test cases for Snippets.\"\"\"\nfrom .. import util\nimport os\nfrom pymdownx.snippets import SnippetMissingError\nfrom unittest.mock import patch, MagicMock\n\nBASE = os.path.abspath(os.path.dirname(__file__))\n\n\nclass TestSnippetDedent(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'dedent_subsections': True\n        }\n    }\n\n    def test_dedent_section(self):\n        \"\"\"Test dedenting sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:py-section\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_lines(self):\n        \"\"\"Test dedenting lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:5:8\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_indented(self):\n        \"\"\"Test dedenting sections that has indented insertion.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Paragraph\n\n                ---8<--- \"indented.txt:py-section\"\n            ''',  # noqa: W291\n            R'''\n            <p>Paragraph</p>\n            <pre><code>def some_method(self, param):\n                \"\"\"Docstring.\"\"\"\n\n                return param\n            </code></pre>\n            ''',\n            True\n        )\n\n\nclass TestSnippets(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_inline(self):\n        \"\"\"Test inline.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"loop.txt\"\n            ---8<--- \"a.txt\"\n            ---8<--- \"b.txt\"\n            ;---8<--- \"b.txt\"\n\n            - Testing indentation\n\n                ---8<--- \"b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet\n            Snippet\n            ---8&lt;--- \"b.txt\"</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',\n            True\n        )\n\n    def test_block(self):\n        \"\"\"Test block.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n\n            ;---8<---\n            d.txt\n            ;---8<---\n\n            - Testing indentation\n\n                ---8<---\n                d.txt\n\n                ; d.txt\n                # Nested inline won't work\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n                ---8<---\n\n                # Un-nested Inline\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>---8&lt;---\n            d.txt\n            ---8&lt;---</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            <h1>Un-nested Inline</h1>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',  # noqa: W291\n            True\n        )\n\n    def test_mixed(self):\n        \"\"\"Test mixed.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"a.txt\"\n\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n            ''',\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_start_line_inline(self):\n        \"\"\"Test starting line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_inline(self):\n        \"\"\"Test ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt::6\"\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_inline(self):\n        \"\"\"Test starting and ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_line_block(self):\n        \"\"\"Test starting line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_block(self):\n        \"\"\"Test ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt::6\n            --8<--\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_block(self):\n        \"\"\"Test starting and ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4:6\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_section_inline(self):\n        \"\"\"Test section partial in inline snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_min(self):\n        \"\"\"Test section partial in inline snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_ignore_other_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_escaped_other_section(self):\n        \"\"\"Test nested escaped sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section3\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                /* --8&lt;-- [start: css-section4] */\n                background-color: white;\n                padding: 16px\n                /* --8&lt;-- [end: css-section4] */\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_ignore_double_start_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section5\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_block(self):\n        \"\"\"Test section partial in block snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_block_min(self):\n        \"\"\"Test section partial in block snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            -8<-\n            section.txt:html-section\n            -8<-\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_end_first(self):\n        \"\"\"Test section when the end is specified first.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:css-section2\n            --8<--\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_section_no_end(self):\n        \"\"\"Test section when the end is not specified.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section2\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n\nclass TestSnippetsFile(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'b.txt')\n        }\n    }\n\n    def test_user(self):\n        \"\"\"Test file.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"b.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n\nclass TestSnippetsAutoAppend(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'auto_append': ['b.txt']\n        }\n    }\n\n    def test_auto_append(self):\n        \"\"\"Test auto append.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Test\n            ''',\n            '''\n            <p>Test</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n\nclass TestSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'check_paths': True\n        }\n    }\n\n    def test_good(self):\n        \"\"\"Test found file.\"\"\"\n\n        self.check_markdown(\n            '''\n            --8<--- \"d.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"not-here.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"missing.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_file_lines(self):\n        \"\"\"Test missing file with line numbers.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \":3:4\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_section(self):\n        \"\"\"Test missing section.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"section.txt:missing-section\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n\nclass TestSnippetsGracefulMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"not-here.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"missing.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_missing_lines(self):\n        \"\"\"Test missing file with lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \":3:4\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n\nclass TestURLSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url(self, mock_urlopen):\n        \"\"\"Test URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested(self, mock_urlopen):\n        \"\"\"Test nested URLs.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile2.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            <p>other</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_duplicatqe(self, mock_urlopen):\n        \"\"\"Test nested duplicate file.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_file(self, mock_urlopen):\n        \"\"\"Test nested file in URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'content', b'', b'--8<-- \"b.txt\"']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_lines(self, mock_urlopen):\n        \"\"\"Test specifying specific lines in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/lines.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length(self, mock_urlopen):\n        \"\"\"Test missing content length header.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length_too_big(self, mock_urlopen):\n        \"\"\"Test content length too big.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/section.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:html-section\"\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n\nclass TestURLDedentSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'dedent_subsections': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/indented.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"https://test.com/myfile.md:py-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n\nclass TestURLSnippetsNoMax(util.MdCase):\n    \"\"\"Test snippet URL cases no max size.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )\n\n\nclass TestURLSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet URL cases with missing URL and 'check paths'.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0,\n            'check_paths': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '',\n                True\n            )\n", "patch": "@@ -481,6 +481,63 @@ def test_user(self):\n         )\n \n \n+class TestSnippetsNested(util.MdCase):\n+    \"\"\"Test nested restriction.\"\"\"\n+\n+    extension = [\n+        'pymdownx.snippets',\n+    ]\n+\n+    extension_configs = {\n+        'pymdownx.snippets': {\n+            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n+            'check_paths': True\n+        }\n+    }\n+\n+    def test_restricted(self):\n+        \"\"\"Test file restriction.\"\"\"\n+\n+        with self.assertRaises(SnippetMissingError):\n+            self.check_markdown(\n+                R'''\n+                --8<-- \"../b.txt\"\n+                ''',\n+                '''\n+                <p>Snippet</p>\n+                ''',\n+                True\n+            )\n+\n+\n+class TestSnippetsNestedUnrestricted(util.MdCase):\n+    \"\"\"Test nested no bounds.\"\"\"\n+\n+    extension = [\n+        'pymdownx.snippets',\n+    ]\n+\n+    extension_configs = {\n+        'pymdownx.snippets': {\n+            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n+            'restrict_base_path': False\n+        }\n+    }\n+\n+    def test_restricted(self):\n+        \"\"\"Test file restriction.\"\"\"\n+\n+        self.check_markdown(\n+            R'''\n+            --8<-- \"../b.txt\"\n+            ''',\n+            '''\n+            <p>Snippet</p>\n+            ''',\n+            True\n+        )\n+\n+\n class TestSnippetsAutoAppend(util.MdCase):\n     \"\"\"Test snippet file case.\"\"\"\n ", "file_path": "files/2023_5/589", "file_language": "py", "file_name": "tests/test_extensions/test_snippets.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class TestSnippetDedent(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'dedent_subsections': True\n        }\n    }\n\n    def test_dedent_section(self):\n        \"\"\"Test dedenting sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:py-section\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_lines(self):\n        \"\"\"Test dedenting lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:5:8\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_indented(self):\n        \"\"\"Test dedenting sections that has indented insertion.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Paragraph\n\n                ---8<--- \"indented.txt:py-section\"\n            ''',  # noqa: W291\n            R'''\n            <p>Paragraph</p>\n            <pre><code>def some_method(self, param):\n                \"\"\"Docstring.\"\"\"\n\n                return param\n            </code></pre>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippets(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_inline(self):\n        \"\"\"Test inline.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"loop.txt\"\n            ---8<--- \"a.txt\"\n            ---8<--- \"b.txt\"\n            ;---8<--- \"b.txt\"\n\n            - Testing indentation\n\n                ---8<--- \"b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet\n            Snippet\n            ---8&lt;--- \"b.txt\"</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',\n            True\n        )\n\n    def test_block(self):\n        \"\"\"Test block.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n\n            ;---8<---\n            d.txt\n            ;---8<---\n\n            - Testing indentation\n\n                ---8<---\n                d.txt\n\n                ; d.txt\n                # Nested inline won't work\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n                ---8<---\n\n                # Un-nested Inline\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>---8&lt;---\n            d.txt\n            ---8&lt;---</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            <h1>Un-nested Inline</h1>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',  # noqa: W291\n            True\n        )\n\n    def test_mixed(self):\n        \"\"\"Test mixed.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"a.txt\"\n\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n            ''',\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_start_line_inline(self):\n        \"\"\"Test starting line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_inline(self):\n        \"\"\"Test ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt::6\"\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_inline(self):\n        \"\"\"Test starting and ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_line_block(self):\n        \"\"\"Test starting line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_block(self):\n        \"\"\"Test ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt::6\n            --8<--\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_block(self):\n        \"\"\"Test starting and ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4:6\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_section_inline(self):\n        \"\"\"Test section partial in inline snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_min(self):\n        \"\"\"Test section partial in inline snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_ignore_other_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_escaped_other_section(self):\n        \"\"\"Test nested escaped sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section3\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                /* --8&lt;-- [start: css-section4] */\n                background-color: white;\n                padding: 16px\n                /* --8&lt;-- [end: css-section4] */\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_ignore_double_start_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section5\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_block(self):\n        \"\"\"Test section partial in block snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_block_min(self):\n        \"\"\"Test section partial in block snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            -8<-\n            section.txt:html-section\n            -8<-\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_end_first(self):\n        \"\"\"Test section when the end is specified first.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:css-section2\n            --8<--\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_section_no_end(self):\n        \"\"\"Test section when the end is not specified.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section2\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippetsFile(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'b.txt')\n        }\n    }\n\n    def test_user(self):\n        \"\"\"Test file.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"b.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippetsAutoAppend(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'auto_append': ['b.txt']\n        }\n    }\n\n    def test_auto_append(self):\n        \"\"\"Test auto append.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Test\n            ''',\n            '''\n            <p>Test</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'check_paths': True\n        }\n    }\n\n    def test_good(self):\n        \"\"\"Test found file.\"\"\"\n\n        self.check_markdown(\n            '''\n            --8<--- \"d.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"not-here.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"missing.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_file_lines(self):\n        \"\"\"Test missing file with line numbers.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \":3:4\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_section(self):\n        \"\"\"Test missing section.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"section.txt:missing-section\"\n                ''',\n                '''\n                ''',\n                True\n            )", "target": 0}, {"function": "class TestSnippetsGracefulMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"not-here.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"missing.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_missing_lines(self):\n        \"\"\"Test missing file with lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \":3:4\"\n            ''',\n            '''\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url(self, mock_urlopen):\n        \"\"\"Test URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested(self, mock_urlopen):\n        \"\"\"Test nested URLs.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile2.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            <p>other</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_duplicatqe(self, mock_urlopen):\n        \"\"\"Test nested duplicate file.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_file(self, mock_urlopen):\n        \"\"\"Test nested file in URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'content', b'', b'--8<-- \"b.txt\"']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_lines(self, mock_urlopen):\n        \"\"\"Test specifying specific lines in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/lines.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length(self, mock_urlopen):\n        \"\"\"Test missing content length header.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length_too_big(self, mock_urlopen):\n        \"\"\"Test content length too big.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/section.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:html-section\"\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLDedentSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'dedent_subsections': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/indented.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"https://test.com/myfile.md:py-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLSnippetsNoMax(util.MdCase):\n    \"\"\"Test snippet URL cases no max size.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet URL cases with missing URL and 'check paths'.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0,\n            'check_paths': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '',\n                True\n            )", "target": 0}], "function_after": [{"function": "class TestSnippetDedent(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'dedent_subsections': True\n        }\n    }\n\n    def test_dedent_section(self):\n        \"\"\"Test dedenting sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:py-section\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_lines(self):\n        \"\"\"Test dedenting lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```text\n            ---8<--- \"indented.txt:5:8\"\n            ```\n            ''',  # noqa: W291\n            R'''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_dedent_indented(self):\n        \"\"\"Test dedenting sections that has indented insertion.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Paragraph\n\n                ---8<--- \"indented.txt:py-section\"\n            ''',  # noqa: W291\n            R'''\n            <p>Paragraph</p>\n            <pre><code>def some_method(self, param):\n                \"\"\"Docstring.\"\"\"\n\n                return param\n            </code></pre>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippets(util.MdCase):\n    \"\"\"Test snippet cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_inline(self):\n        \"\"\"Test inline.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"loop.txt\"\n            ---8<--- \"a.txt\"\n            ---8<--- \"b.txt\"\n            ;---8<--- \"b.txt\"\n\n            - Testing indentation\n\n                ---8<--- \"b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet\n            Snippet\n            ---8&lt;--- \"b.txt\"</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',\n            True\n        )\n\n    def test_block(self):\n        \"\"\"Test block.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n\n            ;---8<---\n            d.txt\n            ;---8<---\n\n            - Testing indentation\n\n                ---8<---\n                d.txt\n\n                ; d.txt\n                # Nested inline won't work\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n                ---8<---\n\n                # Un-nested Inline\n                --8<-- \"a.txt\"\n                --8<-- \"; b.txt\"\n            ''',  # noqa: W291\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>---8&lt;---\n            d.txt\n            ---8&lt;---</p>\n            <ul>\n            <li>\n            <p>Testing indentation</p>\n            <p>Snippet</p>\n            <h1>Un-nested Inline</h1>\n            <p>Snippet</p>\n            </li>\n            </ul>\n            ''',  # noqa: W291\n            True\n        )\n\n    def test_mixed(self):\n        \"\"\"Test mixed.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"a.txt\"\n\n            ---8<---\n            loop_block.txt\n            c.txt\n\n            d.txt\n            ---8<---\n            ''',\n            R'''\n            <p>Snippet</p>\n            <p>Snippet</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_start_line_inline(self):\n        \"\"\"Test starting line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_inline(self):\n        \"\"\"Test ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt::6\"\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_inline(self):\n        \"\"\"Test starting and ending line with inline syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ---8<--- \"lines.txt:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_line_block(self):\n        \"\"\"Test starting line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            <p>This is the end of the file.\n            There is no more.</p>\n            ''',\n            True\n        )\n\n    def test_end_line_block(self):\n        \"\"\"Test ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt::6\n            --8<--\n            ''',\n            '''\n            <p>This is a multi-line\n            snippet.</p>\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_start_end_line_block(self):\n        \"\"\"Test starting and ending line with block syntax.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            lines.txt:4:6\n            --8<--\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    def test_section_inline(self):\n        \"\"\"Test section partial in inline snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_min(self):\n        \"\"\"Test section partial in inline snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_ignore_other_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_inline_escaped_other_section(self):\n        \"\"\"Test nested escaped sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section3\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                /* --8&lt;-- [start: css-section4] */\n                background-color: white;\n                padding: 16px\n                /* --8&lt;-- [end: css-section4] */\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_ignore_double_start_section(self):\n        \"\"\"Test nested sections.\"\"\"\n\n        self.check_markdown(\n            R'''\n            ```\n            -8<- \"section_nested.txt:css-section5\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>div {\n                color: red;\n                background-color: white;\n                padding: 16px\n            }\n            </code></pre></div>\n            ''',\n            True\n        )\n\n    def test_section_block(self):\n        \"\"\"Test section partial in block snippet.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_block_min(self):\n        \"\"\"Test section partial in block snippet using minimum tokens.\"\"\"\n\n        self.check_markdown(\n            R'''\n            -8<-\n            section.txt:html-section\n            -8<-\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )\n\n    def test_section_end_first(self):\n        \"\"\"Test section when the end is specified first.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:css-section2\n            --8<--\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_section_no_end(self):\n        \"\"\"Test section when the end is not specified.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<--\n            section.txt:html-section2\n            --8<--\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippetsFile(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'b.txt')\n        }\n    }\n\n    def test_user(self):\n        \"\"\"Test file.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"b.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippetsNested(util.MdCase):\n    \"\"\"Test nested restriction.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n            'check_paths': True\n        }\n    }\n\n    def test_restricted(self):\n        \"\"\"Test file restriction.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"../b.txt\"\n                ''',\n                '''\n                <p>Snippet</p>\n                ''',\n                True\n            )", "target": 0}, {"function": "class TestSnippetsNestedUnrestricted(util.MdCase):\n    \"\"\"Test nested no bounds.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n            'restrict_base_path': False\n        }\n    }\n\n    def test_restricted(self):\n        \"\"\"Test file restriction.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"../b.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippetsAutoAppend(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'auto_append': ['b.txt']\n        }\n    }\n\n    def test_auto_append(self):\n        \"\"\"Test auto append.\"\"\"\n\n        self.check_markdown(\n            R'''\n            Test\n            ''',\n            '''\n            <p>Test</p>\n            <p>Snippet</p>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'check_paths': True\n        }\n    }\n\n    def test_good(self):\n        \"\"\"Test found file.\"\"\"\n\n        self.check_markdown(\n            '''\n            --8<--- \"d.txt\"\n            ''',\n            '''\n            <p>Snippet</p>\n            ''',\n            True\n        )\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"not-here.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"missing.txt\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_file_lines(self):\n        \"\"\"Test missing file with line numbers.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \":3:4\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    def test_missing_section(self):\n        \"\"\"Test missing section.\"\"\"\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"section.txt:missing-section\"\n                ''',\n                '''\n                ''',\n                True\n            )", "target": 0}, {"function": "class TestSnippetsGracefulMissing(util.MdCase):\n    \"\"\"Test snippet file case.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')]\n        }\n    }\n\n    def test_top_level(self):\n        \"\"\"Test top level.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"not-here.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_nested(self):\n        \"\"\"Test nested.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \"missing.txt\"\n            ''',\n            '''\n            ''',\n            True\n        )\n\n    def test_missing_lines(self):\n        \"\"\"Test missing file with lines.\"\"\"\n\n        self.check_markdown(\n            R'''\n            --8<-- \":3:4\"\n            ''',\n            '''\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url(self, mock_urlopen):\n        \"\"\"Test URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested(self, mock_urlopen):\n        \"\"\"Test nested URLs.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile2.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            <p>other</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_duplicatqe(self, mock_urlopen):\n        \"\"\"Test nested duplicate file.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.side_effect = [[b'content', b'', b'--8<-- \"https://test.com/myfile.md\"'], [b'other']]\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_nested_file(self, mock_urlopen):\n        \"\"\"Test nested file in URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'content', b'', b'--8<-- \"b.txt\"']\n        cm.headers = {'content-length': '8'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>content</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_lines(self, mock_urlopen):\n        \"\"\"Test specifying specific lines in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/lines.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:4:6\"\n            ''',\n            '''\n            <p>Content resides on various lines.\n            If we use line specifiers,\n            we can select any number of lines we want.</p>\n            ''',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length(self, mock_urlopen):\n        \"\"\"Test missing content length header.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_missing_content_length_too_big(self, mock_urlopen):\n        \"\"\"Test content length too big.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(ValueError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '''\n                ''',\n                True\n            )\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '',\n            True\n        )\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/section.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md:html-section\"\n            ''',\n            '''\n            <div><p>content</p></div>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLDedentSnippets(util.MdCase):\n    \"\"\"Test snippet URL cases.\"\"\"\n\n    extension = [\n        'pymdownx.snippets', 'pymdownx.superfences'\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'dedent_subsections': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_url_sections(self, mock_urlopen):\n        \"\"\"Test specifying a section in a URL.\"\"\"\n\n        content = []\n        length = 0\n        with open('tests/test_extensions/_snippets/indented.txt', 'rb') as f:\n            for l in f:\n                length += len(l)\n                content.append(l)\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = content\n        cm.headers = {'content-length': length}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            ```\n            --8<-- \"https://test.com/myfile.md:py-section\"\n            ```\n            ''',\n            '''\n            <div class=\"highlight\"><pre><span></span><code>def some_method(self, param):\n                &quot;&quot;&quot;Docstring.&quot;&quot;&quot;\n\n                return param\n            </code></pre></div>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLSnippetsNoMax(util.MdCase):\n    \"\"\"Test snippet URL cases no max size.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_content_length_zero(self, mock_urlopen):\n        \"\"\"Test empty content.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 200\n        cm.code = 200\n        cm.readlines.return_value = [b'contents']\n        cm.headers = {'content-length': str(1024 * 1024 * 48)}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        self.check_markdown(\n            R'''\n            --8<-- \"https://test.com/myfile.md\"\n            ''',\n            '''\n            <p>contents</p>\n            ''',\n            True\n        )", "target": 0}, {"function": "class TestURLSnippetsMissing(util.MdCase):\n    \"\"\"Test snippet URL cases with missing URL and 'check paths'.\"\"\"\n\n    extension = [\n        'pymdownx.snippets',\n    ]\n\n    extension_configs = {\n        'pymdownx.snippets': {\n            'base_path': [os.path.join(BASE, '_snippets')],\n            'url_download': True,\n            'url_max_size': 0,\n            'check_paths': True\n        }\n    }\n\n    @patch('urllib.request.urlopen')\n    def test_missing(self, mock_urlopen):\n        \"\"\"Test missing URL.\"\"\"\n\n        cm = MagicMock()\n        cm.status = 404\n        cm.code = 404\n        cm.readlines.return_value = []\n        cm.headers = {'content-length': '0'}\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with self.assertRaises(SnippetMissingError):\n            self.check_markdown(\n                R'''\n                --8<-- \"https://test.com/myfile.md\"\n                ''',\n                '',\n                True\n            )", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
