{"index": 8467, "cve_id": "CVE-2022-24840", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "django-s3file is a lightweight file upload input for Django and Amazon S3 . In versions prior to 5.5.1 it was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files. If the `AWS_LOCATION` setting was set, traversal was limited to that location only. The issue was discovered by the maintainer. There were no reports of the vulnerability being known to or exploited by a third party, prior to the release of the patch. The vulnerability has been fixed in version 5.5.1 and above. There is no feasible workaround. We must urge all users to immediately updated to a patched version.", "cvss": "9.8", "publish_date": "June 8, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "68ccd2c621a40eb66fdd6af2be9d5fcc9c373318", "commit_message": "Fix CVE-XXXX-XXXX -- Fix Path Traversal security vulnerability", "commit_date": "2022-06-06T10:38:02Z", "project": "codingjoe/django-s3file", "url": "https://api.github.com/repos/codingjoe/django-s3file/commits/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318", "html_url": "https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318", "windows_before": [{"commit_id": "d3d3dbcd3cc7cd869bdbc676dce8ce5da0d11b09", "commit_date": "Wed May 4 11:02:46 2022 +0200", "commit_message": "Fix typo", "files_name": ["SECURITY.md"]}, {"commit_id": "b0d007e06167e03bde3bc1697c730764ce0a0a33", "commit_date": "Wed May 4 11:01:41 2022 +0200", "commit_message": "Address review comments", "files_name": ["SECURITY.md", "s3file/forms.py", "s3file/middleware.py", "s3file/storages.py", "tests/conftest.py", "tests/test_middleware.py"]}, {"commit_id": "4a217863553d0f4e1b97067a14205f523967cda8", "commit_date": "Sat Apr 23 10:50:56 2022 +0200", "commit_message": "Fix multi file upload duplication", "files_name": ["s3file/static/s3file/js/s3file.js"]}, {"commit_id": "10ec9d9af6d5bc7f5e7f3d3369815c4348b24240", "commit_date": "Thu Apr 21 11:11:53 2022 +0200", "commit_message": "Address all review remarks", "files_name": ["README.md", "SECURITY.md", "s3file/forms.py", "s3file/middleware.py", "s3file/views.py", "tests/conftest.py", "tests/test_forms.py", "tests/test_middleware.py"]}, {"commit_id": "03f6ff81278a616619726ba3c51a71fec8a9f9e2", "commit_date": "Mon Jun 6 10:05:58 2022 +0000", "commit_message": "Bump uglify-js from 3.15.5 to 3.16.0", "files_name": ["package-lock.json"]}, {"commit_id": "ca904cd480e5c9a29e89a32733e007a6970537c5", "commit_date": "Mon May 16 10:08:01 2022 +0000", "commit_message": "Bump uglify-js from 3.15.4 to 3.15.5", "files_name": ["package-lock.json"]}, {"commit_id": "8a6a945771c6bd753315098203d8dec8609cc60a", "commit_date": "Mon Apr 25 10:08:32 2022 +0000", "commit_message": "Bump standard from 16.0.4 to 17.0.0", "files_name": ["package-lock.json"]}, {"commit_id": "77210f3da41b33b58f8019b083d13761876a5067", "commit_date": "Fri Apr 22 14:44:02 2022 +0100", "commit_message": "Python 3.8 support", "files_name": [".github/workflows/ci.yml", "pyproject.toml"]}, {"commit_id": "ea440c7e819896342d7b369d22f1ea3096b9dfa2", "commit_date": "Mon Apr 11 10:08:51 2022 +0000", "commit_message": "Bump uglify-js from 3.15.3 to 3.15.4", "files_name": ["package-lock.json"]}, {"commit_id": "1a4c815a52e124d3f73b94c0004fb16714a46be1", "commit_date": "Tue Mar 29 10:13:09 2022 +0000", "commit_message": "Bump black from 22.1.0 to 22.3.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "1ab13a33404860d4637bfae8e905aa61222db0eb", "commit_date": "Thu Mar 24 15:46:40 2022 +0000", "commit_message": "Bump minimist from 1.2.5 to 1.2.6", "files_name": ["package-lock.json"]}, {"commit_id": "6664db7c3964bd90512126b3965ad909a527516d", "commit_date": "Mon Mar 21 10:37:10 2022 +0000", "commit_message": "Bump actions/cache from 2.1.7 to 3", "files_name": [".github/workflows/ci.yml"]}, {"commit_id": "d3111c751a734724c70a84f9c3194d1fe1070a5d", "commit_date": "Sat Mar 19 09:17:42 2022 -0300", "commit_message": "Create XHR listeners before opening the connection (#205)", "files_name": ["s3file/static/s3file/js/s3file.js"]}, {"commit_id": "c8097b56969642935495e48ad37393b07babedea", "commit_date": "Sat Mar 19 12:46:51 2022 +0100", "commit_message": "Use Markdown readme instead or RST to use native mermaid diagrams", "files_name": ["Makefile", "README.md", "README.rst", "http-message-flow.sequence", "http-message-flow.svg", "pyproject.toml"]}, {"commit_id": "9846a80db75317b4489b715ddde0728813f248e8", "commit_date": "Sat Mar 19 12:12:46 2022 +0100", "commit_message": "Fix failing tests", "files_name": ["s3file/middleware.py", "s3file/storages.py", "tests/test_forms.py", "tests/test_middleware.py", "tests/testapp/settings.py"]}, {"commit_id": "5c0f733626e8a5df2d8b42b6ef3504d0c74a9f47", "commit_date": "Sat Mar 19 11:01:51 2022 +0100", "commit_message": "Update package build tools", "files_name": [".editorconfig", ".github/workflows/ci.yml", ".github/workflows/release.yml", ".gitignore", "linter-requirements.txt", "pyproject.toml", "s3file/__init__.py", "setup.cfg", "setup.py", "tests/conftest.py"]}, {"commit_id": "0f96fb3920f4000cd8f68ac209e8199ce32b5ed2", "commit_date": "Mon Mar 14 10:05:49 2022 +0000", "commit_message": "Bump uglify-js from 3.15.2 to 3.15.3", "files_name": ["package-lock.json"]}, {"commit_id": "6912673b9459b51fe15413c4d2d865715acbb2da", "commit_date": "Wed Mar 2 10:10:24 2022 +0000", "commit_message": "Bump actions/checkout from 2.4.0 to 3", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "35c369de73f2ba10c5203e48e7d41e8b3427e1cb", "commit_date": "Fri Mar 4 10:09:40 2022 +0000", "commit_message": "Bump bandit from 1.7.3 to 1.7.4", "files_name": ["linter-requirements.txt"]}, {"commit_id": "dfbc154f098f78ca091505220022367c5ff07c63", "commit_date": "Mon Feb 28 10:05:24 2022 +0000", "commit_message": "Bump uglify-js from 3.15.1 to 3.15.2", "files_name": ["package-lock.json"]}, {"commit_id": "7429a87b0ccbc9296eba107f7223d5f2cee4b528", "commit_date": "Mon Feb 28 10:11:10 2022 +0000", "commit_message": "Bump bandit from 1.7.2 to 1.7.3", "files_name": ["linter-requirements.txt"]}, {"commit_id": "b558e54cafccd395fe0c48c0aa21863413e6e81f", "commit_date": "Tue Mar 1 10:10:23 2022 +0000", "commit_message": "Bump actions/setup-python from 2.3.2 to 3", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "09e96a49f93a24179a52019daee95dfde81f6411", "commit_date": "Fri Feb 25 10:11:12 2022 +0000", "commit_message": "Bump actions/setup-node from 2.5.1 to 3", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "4a62f45804d20c169b12e5669d575e7fe6266860", "commit_date": "Mon Feb 7 10:13:12 2022 +0000", "commit_message": "Bump actions/setup-python from 2.3.1 to 2.3.2", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "fd215a34d9b712872c59401c643dfbbe11536c6e", "commit_date": "Mon Feb 7 10:06:25 2022 +0000", "commit_message": "Bump uglify-js from 3.15.0 to 3.15.1", "files_name": ["package-lock.json"]}, {"commit_id": "0a047b1ef8adac2431099db416b6a091c1e0d32f", "commit_date": "Mon Jan 31 10:56:56 2022 +0000", "commit_message": "Bump path-parse from 1.0.6 to 1.0.7", "files_name": ["package-lock.json"]}, {"commit_id": "99dba990e60ae40ac628a20a6ebaae4f7b10c8ee", "commit_date": "Mon Jan 31 10:06:31 2022 +0000", "commit_message": "Bump uglify-js from 3.14.5 to 3.15.0", "files_name": ["package-lock.json"]}, {"commit_id": "b82b4a9ede92bac458de2474b31ce8b9c66219dc", "commit_date": "Mon Jan 31 10:10:01 2022 +0000", "commit_message": "Bump black from 21.12b0 to 22.1.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "5af23fd8eecf115c2b73ce0e0821b7abadd72846", "commit_date": "Wed Jan 26 10:09:19 2022 +0000", "commit_message": "Bump bandit from 1.7.1 to 1.7.2", "files_name": ["linter-requirements.txt"]}, {"commit_id": "f27ad5166b6070f009c2cad54011d8f35551d7bd", "commit_date": "Wed Dec 29 10:10:51 2021 +0000", "commit_message": "Bump actions/setup-node from 2.5.0 to 2.5.1", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "8acfff65cbc750b4828929da1298ccaff3ca7293", "commit_date": "Mon Dec 13 10:06:18 2021 +0000", "commit_message": "Bump uglify-js from 3.14.4 to 3.14.5", "files_name": ["package-lock.json"]}, {"commit_id": "b17aefa7795046977cec168cd8c08288f4aeadfc", "commit_date": "Mon Dec 6 10:12:14 2021 +0000", "commit_message": "Bump black from 21.11b1 to 21.12b0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "c620ac050a734ef9da89df4101563bfc2582b7a6", "commit_date": "Mon Dec 6 10:06:06 2021 +0000", "commit_message": "Bump uglify-js from 3.14.3 to 3.14.4", "files_name": ["package-lock.json"]}, {"commit_id": "dade845d645c984d2eadb3d322646f3c900f00bf", "commit_date": "Tue Nov 30 10:07:56 2021 +0000", "commit_message": "Bump actions/setup-python from 2.3.0 to 2.3.1", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "2cfe27200c7debc1c2537967cb252fde22847357", "commit_date": "Tue Nov 30 10:07:53 2021 +0000", "commit_message": "Bump actions/setup-node from 2.4.1 to 2.5.0", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "8f65e9b622492a610eb8d07c18bba094d9453092", "commit_date": "Tue Nov 23 10:08:29 2021 +0000", "commit_message": "Bump actions/cache from 2.1.6 to 2.1.7", "files_name": [".github/workflows/ci.yml"]}, {"commit_id": "7196b762cd4d323863b843c1df00f017ba8e7086", "commit_date": "Thu Nov 18 10:09:32 2021 +0000", "commit_message": "Bump actions/setup-python from 2.2.2 to 2.3.0", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "7ef7cc56f2cce258ec5e0e4c84bb4ad90dc23433", "commit_date": "Thu Nov 18 10:09:36 2021 +0000", "commit_message": "Bump black from 21.11b0 to 21.11b1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "fdfce6adde7a4ba5a5a677959300908b627d96ca", "commit_date": "Wed Nov 17 10:09:47 2021 +0000", "commit_message": "Bump black from 21.10b0 to 21.11b0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "47560f4c4b708bdc38b2a0295c374d46857696be", "commit_date": "Mon Nov 15 10:08:24 2021 +0000", "commit_message": "Bump bandit from 1.7.0 to 1.7.1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "7229f4c77df4076bf960098270007872487491b9", "commit_date": "Tue Nov 9 10:11:36 2021 +0000", "commit_message": "Bump isort from 5.10.0 to 5.10.1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "e5b0400ef24d3638ea9768c672393412e86fabe5", "commit_date": "Mon Nov 8 10:05:03 2021 +0000", "commit_message": "Bump uglify-js from 3.14.2 to 3.14.3", "files_name": ["package-lock.json"]}, {"commit_id": "ce96f1014ba8fa7cf4c1e1335ee1f5c80897d100", "commit_date": "Wed Nov 3 10:08:25 2021 +0000", "commit_message": "Bump isort from 5.9.3 to 5.10.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "245de3f2468d583b46ae2adaca0e41c9c8443fda", "commit_date": "Wed Nov 3 10:08:29 2021 +0000", "commit_message": "Bump actions/checkout from 2.3.5 to 2.4.0", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "8a1cc3ee0dfb2f7a9e89bf54c80b849a859dd58a", "commit_date": "Mon Nov 1 10:09:15 2021 +0000", "commit_message": "Bump black from 21.9b0 to 21.10b0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "f8338b43caf703535813b5282faf23c47ec6e387", "commit_date": "Mon Oct 18 10:11:28 2021 +0000", "commit_message": "Bump actions/checkout from 2.3.4 to 2.3.5", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "82b8703dbfec9768609193e8d2bda28279d56f9d", "commit_date": "Tue Oct 12 10:08:54 2021 +0000", "commit_message": "Bump flake8 from 4.0.0 to 4.0.1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "30e7f5f487d503e8d332bcedef6ae83f6273f1d2", "commit_date": "Mon Oct 11 10:08:53 2021 +0000", "commit_message": "Bump flake8 from 3.9.2 to 4.0.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "d2fb4088115f81b0384f8fc23eb1dbbdc664a00e", "commit_date": "Mon Oct 4 10:07:11 2021 +0000", "commit_message": "Bump standard from 16.0.3 to 16.0.4", "files_name": ["package-lock.json"]}, {"commit_id": "cb8b6aa0398aa6784fc5e0723508f89f2147d10c", "commit_date": "Tue Sep 28 10:07:46 2021 +0000", "commit_message": "Bump actions/setup-node from 2.4.0 to 2.4.1", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}], "windows_after": [{"commit_id": "10ec9d9af6d5bc7f5e7f3d3369815c4348b24240", "commit_date": "Thu Apr 21 11:11:53 2022 +0200", "commit_message": "Address all review remarks", "files_name": ["README.md", "SECURITY.md", "s3file/forms.py", "s3file/middleware.py", "s3file/views.py", "tests/conftest.py", "tests/test_forms.py", "tests/test_middleware.py"]}, {"commit_id": "4a217863553d0f4e1b97067a14205f523967cda8", "commit_date": "Sat Apr 23 10:50:56 2022 +0200", "commit_message": "Fix multi file upload duplication", "files_name": ["s3file/static/s3file/js/s3file.js"]}, {"commit_id": "b0d007e06167e03bde3bc1697c730764ce0a0a33", "commit_date": "Wed May 4 11:01:41 2022 +0200", "commit_message": "Address review comments", "files_name": ["SECURITY.md", "s3file/forms.py", "s3file/middleware.py", "s3file/storages.py", "tests/conftest.py", "tests/test_middleware.py"]}, {"commit_id": "d3d3dbcd3cc7cd869bdbc676dce8ce5da0d11b09", "commit_date": "Wed May 4 11:02:46 2022 +0200", "commit_message": "Fix typo", "files_name": ["SECURITY.md"]}, {"commit_id": "5276207539726ca7b5f1a19713ec0e311c501323", "commit_date": "Thu Jun 9 10:11:06 2022 +0000", "commit_message": "Bump actions/setup-python from 3 to 4", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "470a0249f6c2d9c200bad6f2b5f27b21ec933bf0", "commit_date": "Mon Jun 20 12:50:03 2022 +0200", "commit_message": "Rename HEAD branch", "files_name": [".github/workflows/ci.yml", "README.md"]}, {"commit_id": "ab344e94cde3cfbca4d3974845ff3cdf4eef5c46", "commit_date": "Mon Jun 20 10:05:53 2022 +0000", "commit_message": "Bump uglify-js from 3.16.0 to 3.16.1", "files_name": ["package-lock.json"]}, {"commit_id": "a6bc34ca70523d5cf9af455d8497d68edf53d132", "commit_date": "Tue Jun 28 10:14:27 2022 +0000", "commit_message": "Bump black from 22.3.0 to 22.6.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "f47b729def399806f568b0c4f0f16bc2743b5be3", "commit_date": "Mon Jul 4 10:06:46 2022 +0000", "commit_message": "Bump uglify-js from 3.16.1 to 3.16.2", "files_name": ["package-lock.json"]}, {"commit_id": "c902190085be9735cdb3f261de3532fa8187610b", "commit_date": "Mon Jul 25 10:09:37 2022 +0000", "commit_message": "Bump uglify-js from 3.16.2 to 3.16.3", "files_name": ["package-lock.json"]}, {"commit_id": "909dedc6cbab1b9b7dabaef8b42868691ce99c52", "commit_date": "Mon Aug 1 10:18:38 2022 +0000", "commit_message": "Bump flake8 from 4.0.1 to 5.0.1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "a687b6ccb3c510cbf5bc829e0aec24e7820067f5", "commit_date": "Tue Aug 2 10:25:59 2022 +0000", "commit_message": "Bump flake8 from 5.0.1 to 5.0.3", "files_name": ["linter-requirements.txt"]}, {"commit_id": "94ee14164be2696289d0f11f159f899ba81bafb9", "commit_date": "Thu Aug 4 10:13:36 2022 +0000", "commit_message": "Bump flake8 from 5.0.3 to 5.0.4", "files_name": ["linter-requirements.txt"]}, {"commit_id": "b2f8577fc49f2fe3c5442ec4fd2a55609074cad5", "commit_date": "Tue Aug 30 11:20:46 2022 +0200", "commit_message": "Fix wrong target for submit buttons in js s3file.js", "files_name": ["s3file/static/s3file/js/s3file.js"]}, {"commit_id": "c28746082d1b3963d6fc84d028493488198dd982", "commit_date": "Mon Aug 22 10:04:14 2022 +0000", "commit_message": "Bump uglify-js from 3.16.3 to 3.17.0", "files_name": ["package-lock.json"]}, {"commit_id": "1e2ae83e179ed0af01abb526ee56731218e88a89", "commit_date": "Thu Sep 1 10:13:59 2022 +0000", "commit_message": "Bump black from 22.6.0 to 22.8.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "51a2b7e2416807800ad10957b43082646b49b418", "commit_date": "Mon Sep 26 10:14:00 2022 +0000", "commit_message": "Bump uglify-js from 3.17.0 to 3.17.2", "files_name": ["package-lock.json"]}, {"commit_id": "8637e505991075863eb54842fbbaf67e6dd6f9a5", "commit_date": "Fri Oct 7 10:21:14 2022 +0000", "commit_message": "Bump black from 22.8.0 to 22.10.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "3e17d58d523323cf60476478119e65e73b514d7b", "commit_date": "Fri Oct 14 10:38:45 2022 +0200", "commit_message": "Update SECURITY.md", "files_name": ["SECURITY.md"]}, {"commit_id": "b129068adf1e50ac157675661abc6a67b52c8475", "commit_date": "Mon Oct 10 10:04:55 2022 +0000", "commit_message": "Bump uglify-js from 3.17.2 to 3.17.3", "files_name": ["package-lock.json"]}, {"commit_id": "6f3ab7042d8875505e54b4d8a6b942b90c234510", "commit_date": "Mon Oct 24 10:06:06 2022 +0000", "commit_message": "Bump uglify-js from 3.17.3 to 3.17.4", "files_name": ["package-lock.json"]}, {"commit_id": "407a9960c3878301184e3acdc947201720571b0c", "commit_date": "Tue Nov 22 16:57:57 2022 +0100", "commit_message": "Update official version support", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml", "pyproject.toml"]}, {"commit_id": "494ec5799601b8b37f295cda5cafb28670761eca", "commit_date": "Tue Nov 22 17:06:09 2022 +0100", "commit_message": "Add CodeQL to CI suite", "files_name": [".github/workflows/ci.yml", "tests/testapp/views.py"]}, {"commit_id": "f8f8e49c772be29f61c0b5325d3d9d233cfc237d", "commit_date": "Thu Nov 24 10:02:21 2022 +0000", "commit_message": "Bump flake8 from 5.0.4 to 6.0.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "ef7fa0a1fee0261a17dbdec19ce8301e167d02bb", "commit_date": "Mon Dec 12 10:03:13 2022 +0000", "commit_message": "Bump black from 22.10.0 to 22.12.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "573f41fa00bf7f6b5525c9c525a52ce6e829ae9b", "commit_date": "Tue Dec 13 10:02:39 2022 +0000", "commit_message": "Bump isort from 5.10.1 to 5.11.1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "03b7344aa17b18d4ecd17c6b649db8ca07465fad", "commit_date": "Wed Dec 14 10:03:06 2022 +0000", "commit_message": "Bump isort from 5.11.1 to 5.11.2", "files_name": ["linter-requirements.txt"]}, {"commit_id": "df1b4df99b51990612538fffb75ab4c2297a1dcd", "commit_date": "Thu Dec 22 10:03:25 2022 +0000", "commit_message": "Bump isort from 5.11.2 to 5.11.4", "files_name": ["linter-requirements.txt"]}, {"commit_id": "47ad857dde5702da6c0bb0bac2df9c668d6cb00e", "commit_date": "Wed Jan 4 10:02:40 2023 +0000", "commit_message": "Bump pydocstyle[toml] from 6.1.1 to 6.2.2", "files_name": ["linter-requirements.txt"]}, {"commit_id": "e837d59f2d7330d5a0a693f18e031da0f13840bf", "commit_date": "Wed Jan 4 16:43:23 2023 +0000", "commit_message": "Bump json5 from 1.0.1 to 1.0.2", "files_name": ["package-lock.json"]}, {"commit_id": "a905c72f19ad386f67e8922b969ba3bc99bbbcf8", "commit_date": "Mon Jan 9 10:04:34 2023 +0000", "commit_message": "Bump pydocstyle[toml] from 6.2.2 to 6.2.3", "files_name": ["linter-requirements.txt"]}, {"commit_id": "c9d5ead0958f2f80abcf8b5b8aab790bd0e18c17", "commit_date": "Wed Jan 18 10:02:35 2023 +0000", "commit_message": "Bump pydocstyle[toml] from 6.2.3 to 6.3.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "d1f68af465689c75df9236cd03d50507d6c37bae", "commit_date": "Mon Jan 30 10:03:19 2023 +0000", "commit_message": "Bump isort from 5.11.4 to 5.12.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "26569b6190af3681abfb7c748226360ce1ddafa0", "commit_date": "Mon Feb 6 14:58:57 2023 +0000", "commit_message": "Bump black from 22.12.0 to 23.1.0", "files_name": ["linter-requirements.txt", "s3file/middleware.py", "tests/test_views.py"]}, {"commit_id": "2011747af69fdbf97afd5921e1f6588ce22b471a", "commit_date": "Fri Mar 10 10:58:19 2023 +0000", "commit_message": "Bump bandit from 1.7.4 to 1.7.5", "files_name": ["linter-requirements.txt"]}, {"commit_id": "d7ef7d523bcccca63458b5f938154b64726aceff", "commit_date": "Wed Mar 29 10:57:54 2023 +0000", "commit_message": "Bump black from 23.1.0 to 23.3.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "660d079a445bf45818035092cdb97664d8a03433", "commit_date": "Fri Mar 31 11:55:17 2023 -0400", "commit_message": "Replace call to self._clean_name with clean_name (#252)", "files_name": ["pyproject.toml", "s3file/storages_optimized.py"]}, {"commit_id": "0049b6f5a6ea97cb0af8b5dbc1d4da4c4d429f95", "commit_date": "Mon Jun 5 10:56:53 2023 +0000", "commit_message": "Bump standard from 17.0.0 to 17.1.0", "files_name": ["package-lock.json"]}, {"commit_id": "92fec2c30d4d57a077e5b84eadaed070cea072fe", "commit_date": "Tue Jun 6 10:36:25 2023 +0200", "commit_message": "Address Django security patch in test suite", "files_name": ["tests/testapp/forms.py"]}, {"commit_id": "abbb812911fce86b47ce3e7e0ed6c0e9381b9f77", "commit_date": "Tue Jun 6 11:08:54 2023 +0200", "commit_message": "Split selenium tests into separate CI job", "files_name": [".github/workflows/ci.yml", "tests/conftest.py", "tests/test_forms.py", "tests/testapp/forms.py", "tests/testapp/urls.py", "tests/testapp/views.py"]}, {"commit_id": "ec15de2e81b6b20030c44d04dc7dd330eb94d6b9", "commit_date": "Tue Jul 11 10:04:55 2023 +0000", "commit_message": "Bump black from 23.3.0 to 23.7.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "dfa85947a32ddcbb74ce9ebd5c587f50a7e1dcfa", "commit_date": "Mon Jul 31 10:06:58 2023 +0000", "commit_message": "Bump flake8 from 6.0.0 to 6.1.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "402eca1db3396cfa3516ed856c4763df7e5ab7fd", "commit_date": "Wed Jul 19 02:07:21 2023 +0000", "commit_message": "Bump word-wrap from 1.2.3 to 1.2.4", "files_name": ["package-lock.json"]}, {"commit_id": "e449ba5b0a0d57a61d1d803667b354a8f1d2d3e0", "commit_date": "Tue Sep 5 10:24:13 2023 +0000", "commit_message": "Bump actions/checkout from 3 to 4", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "9cf12d1dbbabe8c01d82d5bb3f91080945d047e7", "commit_date": "Mon Sep 11 10:01:49 2023 +0000", "commit_message": "Bump black from 23.7.0 to 23.9.1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "fa9e957b41c52e48b5bb2e3c26e09719799f0d70", "commit_date": "Wed Oct 18 10:15:49 2023 +0000", "commit_message": "Bump black from 23.9.1 to 23.10.0", "files_name": ["linter-requirements.txt"]}, {"commit_id": "1cf951dc7b6170fde7ddb8091e65e6e3f8166e0d", "commit_date": "Tue Oct 24 10:21:22 2023 +0000", "commit_message": "Bump black from 23.10.0 to 23.10.1", "files_name": ["linter-requirements.txt"]}, {"commit_id": "ae46e367c2e35fc61d1b1bcadbc96ff216e0bb62", "commit_date": "Tue Oct 24 10:12:56 2023 +0000", "commit_message": "Bump actions/setup-node from 3 to 4", "files_name": [".github/workflows/ci.yml", ".github/workflows/release.yml"]}, {"commit_id": "a3c49527f5614d0f544b675076808e8296e3540e", "commit_date": "Wed Nov 8 10:31:46 2023 +0000", "commit_message": "Bump black from 23.10.1 to 23.11.0", "files_name": ["linter-requirements.txt"]}], "parents": [{"commit_id_before": "03f6ff81278a616619726ba3c51a71fec8a9f9e2", "url_before": "https://api.github.com/repos/codingjoe/django-s3file/commits/03f6ff81278a616619726ba3c51a71fec8a9f9e2", "html_url_before": "https://github.com/codingjoe/django-s3file/commit/03f6ff81278a616619726ba3c51a71fec8a9f9e2"}], "details": [{"raw_url": "https://github.com/codingjoe/django-s3file/raw/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318/s3file%2Fforms.py", "code": "import base64\nimport logging\nimport pathlib\nimport uuid\n\nfrom django.conf import settings\nfrom django.core import signing\nfrom django.utils.functional import cached_property\nfrom storages.utils import safe_join\n\nfrom s3file.storages import storage\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileInputMixin:\n    \"\"\"FileInput that uses JavaScript to directly upload to Amazon S3.\"\"\"\n\n    needs_multipart_form = False\n    upload_path = safe_join(\n        str(storage.aws_location),\n        str(\n            getattr(\n                settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\")\n            )\n        ),\n    )\n    expires = settings.SESSION_COOKIE_AGE\n\n    @property\n    def bucket_name(self):\n        return storage.bucket.name\n\n    @property\n    def client(self):\n        return storage.connection.meta.client\n\n    def build_attrs(self, *args, **kwargs):\n        attrs = super().build_attrs(*args, **kwargs)\n\n        accept = attrs.get(\"accept\")\n        response = self.client.generate_presigned_post(\n            self.bucket_name,\n            str(pathlib.PurePosixPath(self.upload_folder, \"${filename}\")),\n            Conditions=self.get_conditions(accept),\n            ExpiresIn=self.expires,\n        )\n\n        defaults = {\n            \"data-fields-%s\" % key: value for key, value in response[\"fields\"].items()\n        }\n        defaults[\"data-url\"] = response[\"url\"]\n        signer = signing.Signer(\n            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n        )\n        print(self.upload_folder)\n        defaults[\"data-s3f-signature\"] = signer.signature(self.upload_folder)\n        defaults.update(attrs)\n\n        try:\n            defaults[\"class\"] += \" s3file\"\n        except KeyError:\n            defaults[\"class\"] = \"s3file\"\n        return defaults\n\n    def get_conditions(self, accept):\n        conditions = [\n            {\"bucket\": self.bucket_name},\n            [\"starts-with\", \"$key\", str(self.upload_folder)],\n            {\"success_action_status\": \"201\"},\n        ]\n        if accept and \",\" not in accept:\n            top_type, sub_type = accept.split(\"/\", 1)\n            if sub_type == \"*\":\n                conditions.append([\"starts-with\", \"$Content-Type\", \"%s/\" % top_type])\n            else:\n                conditions.append({\"Content-Type\": accept})\n        else:\n            conditions.append([\"starts-with\", \"$Content-Type\", \"\"])\n\n        return conditions\n\n    @cached_property\n    def upload_folder(self):\n        return str(\n            pathlib.PurePosixPath(\n                self.upload_path,\n                base64.urlsafe_b64encode(uuid.uuid4().bytes)\n                .decode(\"utf-8\")\n                .rstrip(\"=\\n\"),\n            )\n        )  # S3 uses POSIX paths\n\n    class Media:\n        js = (\"s3file/js/s3file.js\" if settings.DEBUG else \"s3file/js/s3file.min.js\",)\n", "code_before": "import base64\nimport logging\nimport pathlib\nimport uuid\n\nfrom django.conf import settings\nfrom django.utils.functional import cached_property\nfrom storages.utils import safe_join\n\nfrom s3file.storages import storage\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileInputMixin:\n    \"\"\"FileInput that uses JavaScript to directly upload to Amazon S3.\"\"\"\n\n    needs_multipart_form = False\n    upload_path = str(\n        getattr(settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\"))\n    )\n    upload_path = safe_join(str(storage.location), upload_path)\n    expires = settings.SESSION_COOKIE_AGE\n\n    @property\n    def bucket_name(self):\n        return storage.bucket.name\n\n    @property\n    def client(self):\n        return storage.connection.meta.client\n\n    def build_attrs(self, *args, **kwargs):\n        attrs = super().build_attrs(*args, **kwargs)\n\n        accept = attrs.get(\"accept\")\n        response = self.client.generate_presigned_post(\n            self.bucket_name,\n            str(pathlib.PurePosixPath(self.upload_folder, \"${filename}\")),\n            Conditions=self.get_conditions(accept),\n            ExpiresIn=self.expires,\n        )\n\n        defaults = {\n            \"data-fields-%s\" % key: value for key, value in response[\"fields\"].items()\n        }\n        defaults[\"data-url\"] = response[\"url\"]\n        defaults.update(attrs)\n\n        try:\n            defaults[\"class\"] += \" s3file\"\n        except KeyError:\n            defaults[\"class\"] = \"s3file\"\n        return defaults\n\n    def get_conditions(self, accept):\n        conditions = [\n            {\"bucket\": self.bucket_name},\n            [\"starts-with\", \"$key\", str(self.upload_folder)],\n            {\"success_action_status\": \"201\"},\n        ]\n        if accept and \",\" not in accept:\n            top_type, sub_type = accept.split(\"/\", 1)\n            if sub_type == \"*\":\n                conditions.append([\"starts-with\", \"$Content-Type\", \"%s/\" % top_type])\n            else:\n                conditions.append({\"Content-Type\": accept})\n        else:\n            conditions.append([\"starts-with\", \"$Content-Type\", \"\"])\n\n        return conditions\n\n    @cached_property\n    def upload_folder(self):\n        return str(\n            pathlib.PurePosixPath(\n                self.upload_path,\n                base64.urlsafe_b64encode(uuid.uuid4().bytes)\n                .decode(\"utf-8\")\n                .rstrip(\"=\\n\"),\n            )\n        )  # S3 uses POSIX paths\n\n    class Media:\n        js = (\"s3file/js/s3file.js\" if settings.DEBUG else \"s3file/js/s3file.min.js\",)\n", "patch": "@@ -4,6 +4,7 @@\n import uuid\n \n from django.conf import settings\n+from django.core import signing\n from django.utils.functional import cached_property\n from storages.utils import safe_join\n \n@@ -16,10 +17,14 @@ class S3FileInputMixin:\n     \"\"\"FileInput that uses JavaScript to directly upload to Amazon S3.\"\"\"\n \n     needs_multipart_form = False\n-    upload_path = str(\n-        getattr(settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\"))\n+    upload_path = safe_join(\n+        str(storage.aws_location),\n+        str(\n+            getattr(\n+                settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\")\n+            )\n+        ),\n     )\n-    upload_path = safe_join(str(storage.location), upload_path)\n     expires = settings.SESSION_COOKIE_AGE\n \n     @property\n@@ -45,6 +50,11 @@ def build_attrs(self, *args, **kwargs):\n             \"data-fields-%s\" % key: value for key, value in response[\"fields\"].items()\n         }\n         defaults[\"data-url\"] = response[\"url\"]\n+        signer = signing.Signer(\n+            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n+        )\n+        print(self.upload_folder)\n+        defaults[\"data-s3f-signature\"] = signer.signature(self.upload_folder)\n         defaults.update(attrs)\n \n         try:", "file_path": "files/2022_6/900", "file_language": "py", "file_name": "s3file/forms.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/codingjoe/django-s3file/raw/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318/s3file%2Fmiddleware.py", "code": "import logging\nimport pathlib\n\nfrom django.core import signing\nfrom django.core.exceptions import PermissionDenied, SuspiciousFileOperation\nfrom django.utils.crypto import constant_time_compare\n\nfrom . import views\nfrom .forms import S3FileInputMixin\nfrom .storages import local_dev, storage\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        file_fields = request.POST.getlist(\"s3file\")\n        for field_name in file_fields:\n\n            paths = request.POST.getlist(field_name)\n            if paths:\n                try:\n                    signature = request.POST[f\"{field_name}-s3f-signature\"]\n                except KeyError:\n                    raise PermissionDenied(\"No signature provided.\")\n                try:\n                    request.FILES.setlist(\n                        field_name, list(self.get_files_from_storage(paths, signature))\n                    )\n                except SuspiciousFileOperation as e:\n                    raise PermissionDenied(\"Illegal file name!\") from e\n\n        if local_dev and request.path == \"/__s3_mock__/\":\n            return views.S3MockView.as_view()(request)\n\n        return self.get_response(request)\n\n    @staticmethod\n    def get_files_from_storage(paths, signature):\n        \"\"\"Return S3 file where the name does not include the path.\"\"\"\n        try:\n            location = storage.aws_location\n        except AttributeError:\n            location = storage.location\n        signer = signing.Signer(\n            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n        )\n        for path in paths:\n            path = pathlib.PurePosixPath(path)\n            print(path)\n            print(signer.signature(path.parent), signature)\n            if not constant_time_compare(signer.signature(path.parent), signature):\n                raise PermissionDenied(\"Illegal signature!\")\n            try:\n                relative_path = str(path.relative_to(location))\n            except ValueError as e:\n                raise SuspiciousFileOperation(\n                    f\"Path is not inside the designated upload location: {path}\"\n                ) from e\n\n            try:\n                f = storage.open(relative_path)\n                f.name = path.name\n                yield f\n            except (OSError, ValueError):\n                logger.exception(\"File not found: %s\", path)\n", "code_before": "import logging\nimport pathlib\n\nfrom s3file.storages import local_dev, storage\n\nfrom . import views\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3FileMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        file_fields = request.POST.getlist(\"s3file\")\n        for field_name in file_fields:\n            paths = request.POST.getlist(field_name)\n            request.FILES.setlist(field_name, list(self.get_files_from_storage(paths)))\n\n        if local_dev and request.path == \"/__s3_mock__/\":\n            return views.S3MockView.as_view()(request)\n\n        return self.get_response(request)\n\n    @staticmethod\n    def get_files_from_storage(paths):\n        \"\"\"Return S3 file where the name does not include the path.\"\"\"\n        for path in paths:\n            path = pathlib.PurePosixPath(path)\n            try:\n                location = storage.aws_location\n            except AttributeError:\n                location = storage.location\n            try:\n                f = storage.open(str(path.relative_to(location)))\n                f.name = path.name\n                yield f\n            except (OSError, ValueError):\n                logger.exception(\"File not found: %s\", path)\n", "patch": "@@ -1,9 +1,13 @@\n import logging\n import pathlib\n \n-from s3file.storages import local_dev, storage\n+from django.core import signing\n+from django.core.exceptions import PermissionDenied, SuspiciousFileOperation\n+from django.utils.crypto import constant_time_compare\n \n from . import views\n+from .forms import S3FileInputMixin\n+from .storages import local_dev, storage\n \n logger = logging.getLogger(\"s3file\")\n \n@@ -15,25 +19,50 @@ def __init__(self, get_response):\n     def __call__(self, request):\n         file_fields = request.POST.getlist(\"s3file\")\n         for field_name in file_fields:\n+\n             paths = request.POST.getlist(field_name)\n-            request.FILES.setlist(field_name, list(self.get_files_from_storage(paths)))\n+            if paths:\n+                try:\n+                    signature = request.POST[f\"{field_name}-s3f-signature\"]\n+                except KeyError:\n+                    raise PermissionDenied(\"No signature provided.\")\n+                try:\n+                    request.FILES.setlist(\n+                        field_name, list(self.get_files_from_storage(paths, signature))\n+                    )\n+                except SuspiciousFileOperation as e:\n+                    raise PermissionDenied(\"Illegal file name!\") from e\n \n         if local_dev and request.path == \"/__s3_mock__/\":\n             return views.S3MockView.as_view()(request)\n \n         return self.get_response(request)\n \n     @staticmethod\n-    def get_files_from_storage(paths):\n+    def get_files_from_storage(paths, signature):\n         \"\"\"Return S3 file where the name does not include the path.\"\"\"\n+        try:\n+            location = storage.aws_location\n+        except AttributeError:\n+            location = storage.location\n+        signer = signing.Signer(\n+            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n+        )\n         for path in paths:\n             path = pathlib.PurePosixPath(path)\n+            print(path)\n+            print(signer.signature(path.parent), signature)\n+            if not constant_time_compare(signer.signature(path.parent), signature):\n+                raise PermissionDenied(\"Illegal signature!\")\n             try:\n-                location = storage.aws_location\n-            except AttributeError:\n-                location = storage.location\n+                relative_path = str(path.relative_to(location))\n+            except ValueError as e:\n+                raise SuspiciousFileOperation(\n+                    f\"Path is not inside the designated upload location: {path}\"\n+                ) from e\n+\n             try:\n-                f = storage.open(str(path.relative_to(location)))\n+                f = storage.open(relative_path)\n                 f.name = path.name\n                 yield f\n             except (OSError, ValueError):", "file_path": "files/2022_6/901", "file_language": "py", "file_name": "s3file/middleware.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/codingjoe/django-s3file/raw/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318/s3file%2Fstatic%2Fs3file%2Fjs%2Fs3file.js", "code": "'use strict';\n\n(function () {\n  function parseURL (text) {\n    var xml = new window.DOMParser().parseFromString(text, 'text/xml')\n    var tag = xml.getElementsByTagName('Key')[0]\n    return decodeURI(tag.childNodes[0].nodeValue)\n  }\n\n  function waitForAllFiles (form) {\n    if (window.uploading !== 0) {\n      setTimeout(function () {\n        waitForAllFiles(form)\n      }, 100)\n    } else {\n      window.HTMLFormElement.prototype.submit.call(form)\n    }\n  }\n\n  function request (method, url, data, fileInput, file, form) {\n    file.loaded = 0\n    return new Promise(function (resolve, reject) {\n      var xhr = new window.XMLHttpRequest()\n\n      xhr.onload = function () {\n        if (xhr.status === 201) {\n          resolve(xhr.responseText)\n        } else {\n          reject(xhr.statusText)\n        }\n      }\n\n      xhr.upload.onprogress = function (e) {\n        var diff = e.loaded - file.loaded\n        form.loaded += diff\n        fileInput.loaded += diff\n        file.loaded = e.loaded\n        var defaultEventData = {\n          currentFile: file,\n          currentFileName: file.name,\n          currentFileProgress: Math.min(e.loaded / e.total, 1),\n          originalEvent: e\n        }\n        form.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(form.loaded / form.total, 1),\n            loaded: form.loaded,\n            total: form.total\n          }, defaultEventData)\n        }))\n        fileInput.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(fileInput.loaded / fileInput.total, 1),\n            loaded: fileInput.loaded,\n            total: fileInput.total\n          }, defaultEventData)\n        }))\n      }\n\n      xhr.onerror = function () {\n        reject(xhr.statusText)\n      }\n\n      xhr.open(method, url)\n      xhr.send(data)\n    })\n  }\n\n  function uploadFiles (form, fileInput, name) {\n    var url = fileInput.getAttribute('data-url')\n    fileInput.loaded = 0\n    fileInput.total = 0\n    var promises = Array.from(fileInput.files).map(function (file) {\n      form.total += file.size\n      fileInput.total += file.size\n      var s3Form = new window.FormData()\n      Array.from(fileInput.attributes).forEach(function (attr) {\n        var name = attr.name\n\n        if (name.startsWith('data-fields')) {\n          name = name.replace('data-fields-', '')\n          s3Form.append(name, attr.value)\n        }\n      })\n      s3Form.append('success_action_status', '201')\n      s3Form.append('Content-Type', file.type)\n      s3Form.append('file', file)\n      return request('POST', url, s3Form, fileInput, file, form)\n    })\n    Promise.all(promises).then(function (results) {\n      results.forEach(function (result) {\n        var hiddenFileInput = document.createElement('input')\n        hiddenFileInput.type = 'hidden'\n        hiddenFileInput.name = name\n        hiddenFileInput.value = parseURL(result)\n        form.appendChild(hiddenFileInput)\n        var hiddenSignatureInput = document.createElement('input')\n        hiddenSignatureInput.type = 'hidden'\n        hiddenSignatureInput.name = name + '-s3f-signature'\n        console.log(fileInput.dataset.s3fSignature)\n        hiddenSignatureInput.value = fileInput.dataset.s3fSignature\n        form.appendChild(hiddenSignatureInput)\n      })\n      fileInput.name = ''\n      window.uploading -= 1\n    }, function (err) {\n      console.log(err)\n      fileInput.setCustomValidity(err)\n      fileInput.reportValidity()\n    })\n  }\n\n  function clickSubmit (e) {\n    var submitButton = e.target\n    var form = submitButton.closest('form')\n    var submitInput = document.createElement('input')\n    submitInput.type = 'hidden'\n    submitInput.value = submitButton.value || '1'\n    submitInput.name = submitButton.name\n    form.appendChild(submitInput)\n  }\n\n  function uploadS3Inputs (form) {\n    window.uploading = 0\n    form.loaded = 0\n    form.total = 0\n    var inputs = Array.from(form.querySelectorAll('.s3file'))\n\n    inputs.forEach(function (input) {\n      var hiddenS3Input = document.createElement('input')\n      hiddenS3Input.type = 'hidden'\n      hiddenS3Input.name = 's3file'\n      hiddenS3Input.value = input.name\n      form.appendChild(hiddenS3Input)\n    })\n    inputs.forEach(function (input) {\n      window.uploading += 1\n      uploadFiles(form, input, input.name)\n    })\n    waitForAllFiles(form)\n  }\n\n  document.addEventListener('DOMContentLoaded', function () {\n    var forms = Array.from(document.querySelectorAll('.s3file')).map(function (input) {\n      return input.closest('form')\n    })\n    forms = new Set(forms)\n    forms.forEach(function (form) {\n      form.addEventListener('submit', function (e) {\n        e.preventDefault()\n        uploadS3Inputs(e.target)\n      })\n      var submitButtons = form.querySelectorAll('input[type=submit], button[type=submit]')\n      Array.from(submitButtons).forEach(function (submitButton) {\n        submitButton.addEventListener('click', clickSubmit)\n      })\n    })\n  })\n})()\n", "code_before": "'use strict';\n\n(function () {\n  function parseURL (text) {\n    var xml = new window.DOMParser().parseFromString(text, 'text/xml')\n    var tag = xml.getElementsByTagName('Key')[0]\n    return decodeURI(tag.childNodes[0].nodeValue)\n  }\n\n  function waitForAllFiles (form) {\n    if (window.uploading !== 0) {\n      setTimeout(function () {\n        waitForAllFiles(form)\n      }, 100)\n    } else {\n      window.HTMLFormElement.prototype.submit.call(form)\n    }\n  }\n\n  function request (method, url, data, fileInput, file, form) {\n    file.loaded = 0\n    return new Promise(function (resolve, reject) {\n      var xhr = new window.XMLHttpRequest()\n\n      xhr.onload = function () {\n        if (xhr.status === 201) {\n          resolve(xhr.responseText)\n        } else {\n          reject(xhr.statusText)\n        }\n      }\n\n      xhr.upload.onprogress = function (e) {\n        var diff = e.loaded - file.loaded\n        form.loaded += diff\n        fileInput.loaded += diff\n        file.loaded = e.loaded\n        var defaultEventData = {\n          currentFile: file,\n          currentFileName: file.name,\n          currentFileProgress: Math.min(e.loaded / e.total, 1),\n          originalEvent: e\n        }\n        form.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(form.loaded / form.total, 1),\n            loaded: form.loaded,\n            total: form.total\n          }, defaultEventData)\n        }))\n        fileInput.dispatchEvent(new window.CustomEvent('progress', {\n          detail: Object.assign({\n            progress: Math.min(fileInput.loaded / fileInput.total, 1),\n            loaded: fileInput.loaded,\n            total: fileInput.total\n          }, defaultEventData)\n        }))\n      }\n\n      xhr.onerror = function () {\n        reject(xhr.statusText)\n      }\n\n      xhr.open(method, url)\n      xhr.send(data)\n    })\n  }\n\n  function uploadFiles (form, fileInput, name) {\n    var url = fileInput.getAttribute('data-url')\n    fileInput.loaded = 0\n    fileInput.total = 0\n    var promises = Array.from(fileInput.files).map(function (file) {\n      form.total += file.size\n      fileInput.total += file.size\n      var s3Form = new window.FormData()\n      Array.from(fileInput.attributes).forEach(function (attr) {\n        var name = attr.name\n\n        if (name.startsWith('data-fields')) {\n          name = name.replace('data-fields-', '')\n          s3Form.append(name, attr.value)\n        }\n      })\n      s3Form.append('success_action_status', '201')\n      s3Form.append('Content-Type', file.type)\n      s3Form.append('file', file)\n      return request('POST', url, s3Form, fileInput, file, form)\n    })\n    Promise.all(promises).then(function (results) {\n      results.forEach(function (result) {\n        var hiddenFileInput = document.createElement('input')\n        hiddenFileInput.type = 'hidden'\n        hiddenFileInput.name = name\n        hiddenFileInput.value = parseURL(result)\n        form.appendChild(hiddenFileInput)\n      })\n      fileInput.name = ''\n      window.uploading -= 1\n    }, function (err) {\n      console.log(err)\n      fileInput.setCustomValidity(err)\n      fileInput.reportValidity()\n    })\n  }\n\n  function clickSubmit (e) {\n    var submitButton = e.target\n    var form = submitButton.closest('form')\n    var submitInput = document.createElement('input')\n    submitInput.type = 'hidden'\n    submitInput.value = submitButton.value || '1'\n    submitInput.name = submitButton.name\n    form.appendChild(submitInput)\n  }\n\n  function uploadS3Inputs (form) {\n    window.uploading = 0\n    form.loaded = 0\n    form.total = 0\n    var inputs = Array.from(form.querySelectorAll('.s3file'))\n\n    inputs.forEach(function (input) {\n      var hiddenS3Input = document.createElement('input')\n      hiddenS3Input.type = 'hidden'\n      hiddenS3Input.name = 's3file'\n      hiddenS3Input.value = input.name\n      form.appendChild(hiddenS3Input)\n    })\n    inputs.forEach(function (input) {\n      window.uploading += 1\n      uploadFiles(form, input, input.name)\n    })\n    waitForAllFiles(form)\n  }\n\n  document.addEventListener('DOMContentLoaded', function () {\n    var forms = Array.from(document.querySelectorAll('.s3file')).map(function (input) {\n      return input.closest('form')\n    })\n    forms = new Set(forms)\n    forms.forEach(function (form) {\n      form.addEventListener('submit', function (e) {\n        e.preventDefault()\n        uploadS3Inputs(e.target)\n      })\n      var submitButtons = form.querySelectorAll('input[type=submit], button[type=submit]')\n      Array.from(submitButtons).forEach(function (submitButton) {\n        submitButton.addEventListener('click', clickSubmit)\n      })\n    })\n  })\n})()\n", "patch": "@@ -94,6 +94,12 @@\n         hiddenFileInput.name = name\n         hiddenFileInput.value = parseURL(result)\n         form.appendChild(hiddenFileInput)\n+        var hiddenSignatureInput = document.createElement('input')\n+        hiddenSignatureInput.type = 'hidden'\n+        hiddenSignatureInput.name = name + '-s3f-signature'\n+        console.log(fileInput.dataset.s3fSignature)\n+        hiddenSignatureInput.value = fileInput.dataset.s3fSignature\n+        form.appendChild(hiddenSignatureInput)\n       })\n       fileInput.name = ''\n       window.uploading -= 1", "file_path": "files/2022_6/902", "file_language": "js", "file_name": "s3file/static/s3file/js/s3file.js", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/codingjoe/django-s3file/raw/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318/s3file%2Fviews.py", "code": "import base64\nimport hashlib\nimport hmac\nimport logging\nfrom pathlib import Path\n\nfrom django import http\nfrom django.conf import settings\nfrom django.core.files.storage import default_storage\nfrom django.views import generic\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3MockView(generic.View):\n    def post(self, request):\n        success_action_status = request.POST.get(\"success_action_status\", 201)\n        try:\n            file = request.FILES[\"file\"]\n            key = request.POST[\"key\"]\n            date = request.POST[\"x-amz-date\"]\n            signature = request.POST[\"x-amz-signature\"]\n            policy = request.POST[\"policy\"]\n        except KeyError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        try:\n            signature = base64.b64decode(signature.encode())\n            policy = base64.b64decode(policy.encode())\n\n            calc_sign = hmac.new(\n                settings.SECRET_KEY.encode(), policy + date.encode(), \"sha256\"\n            ).digest()\n        except ValueError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        if not hmac.compare_digest(signature, calc_sign):\n            logger.warning(\"bad signature\")\n            return http.HttpResponseForbidden()\n\n        key = key.replace(\"${filename}\", file.name)\n        etag = hashlib.md5(file.read()).hexdigest()  # nosec\n        file.seek(0)\n        key = default_storage.save(key, file)\n        return http.HttpResponse(\n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n            \"<PostResponse>\"\n            f\"<Location>{settings.MEDIA_URL}{key}</Location>\"\n            f\"<Bucket>{getattr(settings, 'AWS_STORAGE_BUCKET_NAME')}</Bucket>\"\n            f\"<Key>{key}</Key>\"\n            f'<ETag>\"{etag}\"</ETag>'\n            \"</PostResponse>\",\n            status=success_action_status,\n        )\n", "code_before": "import base64\nimport hashlib\nimport hmac\nimport logging\n\nfrom django import http\nfrom django.conf import settings\nfrom django.core.files.storage import default_storage\nfrom django.views import generic\n\nlogger = logging.getLogger(\"s3file\")\n\n\nclass S3MockView(generic.View):\n    def post(self, request):\n        success_action_status = request.POST.get(\"success_action_status\", 201)\n        try:\n            file = request.FILES[\"file\"]\n            key = request.POST[\"key\"]\n            date = request.POST[\"x-amz-date\"]\n            signature = request.POST[\"x-amz-signature\"]\n            policy = request.POST[\"policy\"]\n        except KeyError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        try:\n            signature = base64.b64decode(signature.encode())\n            policy = base64.b64decode(policy.encode())\n\n            calc_sign = hmac.new(\n                settings.SECRET_KEY.encode(), policy + date.encode(), \"sha256\"\n            ).digest()\n        except ValueError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        if not hmac.compare_digest(signature, calc_sign):\n            logger.warning(\"bad signature\")\n            return http.HttpResponseForbidden()\n\n        key = key.replace(\"${filename}\", file.name)\n        etag = hashlib.md5(file.read()).hexdigest()  # nosec\n        file.seek(0)\n        key = default_storage.save(key, file)\n        return http.HttpResponse(\n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n            \"<PostResponse>\"\n            f\"<Location>{settings.MEDIA_URL}{key}</Location>\"\n            f\"<Bucket>{getattr(settings, 'AWS_STORAGE_BUCKET_NAME')}</Bucket>\"\n            f\"<Key>{key}</Key>\"\n            f'<ETag>\"{etag}\"</ETag>'\n            \"</PostResponse>\",\n            status=success_action_status,\n        )\n", "patch": "@@ -2,6 +2,7 @@\n import hashlib\n import hmac\n import logging\n+from pathlib import Path\n \n from django import http\n from django.conf import settings", "file_path": "files/2022_6/903", "file_language": "py", "file_name": "s3file/views.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class S3MockView(generic.View):\n    def post(self, request):\n        success_action_status = request.POST.get(\"success_action_status\", 201)\n        try:\n            file = request.FILES[\"file\"]\n            key = request.POST[\"key\"]\n            date = request.POST[\"x-amz-date\"]\n            signature = request.POST[\"x-amz-signature\"]\n            policy = request.POST[\"policy\"]\n        except KeyError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        try:\n            signature = base64.b64decode(signature.encode())\n            policy = base64.b64decode(policy.encode())\n\n            calc_sign = hmac.new(\n                settings.SECRET_KEY.encode(), policy + date.encode(), \"sha256\"\n            ).digest()\n        except ValueError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        if not hmac.compare_digest(signature, calc_sign):\n            logger.warning(\"bad signature\")\n            return http.HttpResponseForbidden()\n\n        key = key.replace(\"${filename}\", file.name)\n        etag = hashlib.md5(file.read()).hexdigest()  # nosec\n        file.seek(0)\n        key = default_storage.save(key, file)\n        return http.HttpResponse(\n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n            \"<PostResponse>\"\n            f\"<Location>{settings.MEDIA_URL}{key}</Location>\"\n            f\"<Bucket>{getattr(settings, 'AWS_STORAGE_BUCKET_NAME')}</Bucket>\"\n            f\"<Key>{key}</Key>\"\n            f'<ETag>\"{etag}\"</ETag>'\n            \"</PostResponse>\",\n            status=success_action_status,\n        )", "target": 0}], "function_after": [{"function": "class S3MockView(generic.View):\n    def post(self, request):\n        success_action_status = request.POST.get(\"success_action_status\", 201)\n        try:\n            file = request.FILES[\"file\"]\n            key = request.POST[\"key\"]\n            date = request.POST[\"x-amz-date\"]\n            signature = request.POST[\"x-amz-signature\"]\n            policy = request.POST[\"policy\"]\n        except KeyError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        try:\n            signature = base64.b64decode(signature.encode())\n            policy = base64.b64decode(policy.encode())\n\n            calc_sign = hmac.new(\n                settings.SECRET_KEY.encode(), policy + date.encode(), \"sha256\"\n            ).digest()\n        except ValueError:\n            logger.exception(\"bad request\")\n            return http.HttpResponseBadRequest()\n\n        if not hmac.compare_digest(signature, calc_sign):\n            logger.warning(\"bad signature\")\n            return http.HttpResponseForbidden()\n\n        key = key.replace(\"${filename}\", file.name)\n        etag = hashlib.md5(file.read()).hexdigest()  # nosec\n        file.seek(0)\n        key = default_storage.save(key, file)\n        return http.HttpResponse(\n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n            \"<PostResponse>\"\n            f\"<Location>{settings.MEDIA_URL}{key}</Location>\"\n            f\"<Bucket>{getattr(settings, 'AWS_STORAGE_BUCKET_NAME')}</Bucket>\"\n            f\"<Key>{key}</Key>\"\n            f'<ETag>\"{etag}\"</ETag>'\n            \"</PostResponse>\",\n            status=success_action_status,\n        )", "target": 0}]}, {"raw_url": "https://github.com/codingjoe/django-s3file/raw/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318/tests%2Fconftest.py", "code": "import tempfile\nfrom pathlib import Path\n\nimport pytest\nfrom django.core.files.base import ContentFile\nfrom django.utils.encoding import force_str\nfrom selenium import webdriver\nfrom selenium.common.exceptions import WebDriverException\n\nfrom s3file.storages import storage\n\n\n@pytest.fixture(scope=\"session\")\ndef driver():\n    chrome_options = webdriver.ChromeOptions()\n    chrome_options.headless = True\n    try:\n        b = webdriver.Chrome(options=chrome_options)\n    except WebDriverException as e:\n        pytest.skip(force_str(e))\n    else:\n        yield b\n        b.quit()\n\n\n@pytest.fixture\ndef freeze_upload_folder(monkeypatch):\n    \"\"\"Freeze datetime and UUID.\"\"\"\n    upload_folder = Path(storage.aws_location) / \"tmp\" / \"s3file\"\n    monkeypatch.setattr(\n        \"s3file.forms.S3FileInputMixin.upload_folder\",\n        str(upload_folder),\n    )\n    return upload_folder\n\n\n@pytest.fixture\ndef upload_file(request, freeze_upload_folder):\n    path = Path(tempfile.mkdtemp()) / freeze_upload_folder / f\"{request.node.name}.txt\"\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with path.open(\"w\") as f:\n        f.write(request.node.name)\n    return str(path.absolute())\n\n\n@pytest.fixture\ndef another_upload_file(request, freeze_upload_folder):\n    path = (\n        Path(tempfile.mkdtemp())\n        / freeze_upload_folder\n        / f\"another_{request.node.name}.txt\"\n    )\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with path.open(\"w\") as f:\n        f.write(request.node.name)\n    return str(path.absolute())\n\n\n@pytest.fixture\ndef yet_another_upload_file(request, freeze_upload_folder):\n    path = (\n        Path(tempfile.mkdtemp())\n        / freeze_upload_folder\n        / f\"yet_another_{request.node.name}.txt\"\n    )\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with path.open(\"w\") as f:\n        f.write(request.node.name)\n    return str(path.absolute())\n\n\n@pytest.fixture\ndef filemodel(request, db):\n    from tests.testapp.models import FileModel\n\n    return FileModel.objects.create(\n        file=ContentFile(request.node.name, \"%s.txt\" % request.node.name)\n    )\n", "code_before": "import os\nimport tempfile\n\nimport pytest\nfrom django.core.files.base import ContentFile\nfrom django.utils.encoding import force_str\nfrom selenium import webdriver\nfrom selenium.common.exceptions import WebDriverException\n\n\n@pytest.fixture(scope=\"session\")\ndef driver():\n    chrome_options = webdriver.ChromeOptions()\n    chrome_options.headless = True\n    try:\n        b = webdriver.Chrome(options=chrome_options)\n    except WebDriverException as e:\n        pytest.skip(force_str(e))\n    else:\n        yield b\n        b.quit()\n\n\n@pytest.fixture\ndef upload_file(request):\n    path = tempfile.mkdtemp()\n    file_name = os.path.join(path, \"%s.txt\" % request.node.name)\n    with open(file_name, \"w\") as f:\n        f.write(request.node.name)\n    return file_name\n\n\n@pytest.fixture\ndef another_upload_file(request):\n    path = tempfile.mkdtemp()\n    file_name = os.path.join(path, \"another_%s.txt\" % request.node.name)\n    with open(file_name, \"w\") as f:\n        f.write(request.node.name)\n    return file_name\n\n\n@pytest.fixture\ndef yet_another_upload_file(request):\n    path = tempfile.mkdtemp()\n    file_name = os.path.join(path, \"yet_another_%s.txt\" % request.node.name)\n    with open(file_name, \"w\") as f:\n        f.write(request.node.name)\n    return file_name\n\n\n@pytest.fixture\ndef filemodel(request, db):\n    from tests.testapp.models import FileModel\n\n    return FileModel.objects.create(\n        file=ContentFile(request.node.name, \"%s.txt\" % request.node.name)\n    )\n", "patch": "@@ -1,12 +1,14 @@\n-import os\n import tempfile\n+from pathlib import Path\n \n import pytest\n from django.core.files.base import ContentFile\n from django.utils.encoding import force_str\n from selenium import webdriver\n from selenium.common.exceptions import WebDriverException\n \n+from s3file.storages import storage\n+\n \n @pytest.fixture(scope=\"session\")\n def driver():\n@@ -22,30 +24,49 @@ def driver():\n \n \n @pytest.fixture\n-def upload_file(request):\n-    path = tempfile.mkdtemp()\n-    file_name = os.path.join(path, \"%s.txt\" % request.node.name)\n-    with open(file_name, \"w\") as f:\n+def freeze_upload_folder(monkeypatch):\n+    \"\"\"Freeze datetime and UUID.\"\"\"\n+    upload_folder = Path(storage.aws_location) / \"tmp\" / \"s3file\"\n+    monkeypatch.setattr(\n+        \"s3file.forms.S3FileInputMixin.upload_folder\",\n+        str(upload_folder),\n+    )\n+    return upload_folder\n+\n+\n+@pytest.fixture\n+def upload_file(request, freeze_upload_folder):\n+    path = Path(tempfile.mkdtemp()) / freeze_upload_folder / f\"{request.node.name}.txt\"\n+    path.parent.mkdir(parents=True, exist_ok=True)\n+    with path.open(\"w\") as f:\n         f.write(request.node.name)\n-    return file_name\n+    return str(path.absolute())\n \n \n @pytest.fixture\n-def another_upload_file(request):\n-    path = tempfile.mkdtemp()\n-    file_name = os.path.join(path, \"another_%s.txt\" % request.node.name)\n-    with open(file_name, \"w\") as f:\n+def another_upload_file(request, freeze_upload_folder):\n+    path = (\n+        Path(tempfile.mkdtemp())\n+        / freeze_upload_folder\n+        / f\"another_{request.node.name}.txt\"\n+    )\n+    path.parent.mkdir(parents=True, exist_ok=True)\n+    with path.open(\"w\") as f:\n         f.write(request.node.name)\n-    return file_name\n+    return str(path.absolute())\n \n \n @pytest.fixture\n-def yet_another_upload_file(request):\n-    path = tempfile.mkdtemp()\n-    file_name = os.path.join(path, \"yet_another_%s.txt\" % request.node.name)\n-    with open(file_name, \"w\") as f:\n+def yet_another_upload_file(request, freeze_upload_folder):\n+    path = (\n+        Path(tempfile.mkdtemp())\n+        / freeze_upload_folder\n+        / f\"yet_another_{request.node.name}.txt\"\n+    )\n+    path.parent.mkdir(parents=True, exist_ok=True)\n+    with path.open(\"w\") as f:\n         f.write(request.node.name)\n-    return file_name\n+    return str(path.absolute())\n \n \n @pytest.fixture", "file_path": "files/2022_6/904", "file_language": "py", "file_name": "tests/conftest.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/codingjoe/django-s3file/raw/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318/tests%2Ftest_forms.py", "code": "import json\nimport os\nfrom contextlib import contextmanager\n\nimport pytest\nfrom django.forms import ClearableFileInput\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.expected_conditions import staleness_of\nfrom selenium.webdriver.support.wait import WebDriverWait\n\nfrom s3file.storages import storage\nfrom tests.testapp.forms import UploadForm\n\ntry:\n    from django.urls import reverse\nexcept ImportError:\n    # Django 1.8 support\n    from django.core.urlresolvers import reverse\n\n\n@contextmanager\ndef wait_for_page_load(driver, timeout=30):\n    old_page = driver.find_element(By.TAG_NAME, \"html\")\n    yield\n    WebDriverWait(driver, timeout).until(staleness_of(old_page))\n\n\nclass TestS3FileInput:\n    @property\n    def url(self):\n        return reverse(\"upload\")\n\n    def test_value_from_datadict(self, freeze_upload_folder, client, upload_file):\n        with open(upload_file) as f:\n            uploaded_file = storage.save(freeze_upload_folder / \"test.jpg\", f)\n        response = client.post(\n            reverse(\"upload\"),\n            {\n                \"file\": f\"custom/location/{uploaded_file}\",\n                \"file-s3f-signature\": \"m94qBxBsnMIuIICiY133kX18KkllSPMVbhGAdAwNn1A\",\n                \"s3file\": \"file\",\n            },\n        )\n\n        assert response.status_code == 201\n\n    def test_value_from_datadict_initial_data(self, filemodel):\n        form = UploadForm(instance=filemodel)\n        assert filemodel.file.name in form.as_p(), form.as_p()\n        assert not form.is_valid()\n\n    def test_file_does_not_exist_no_fallback(self, filemodel):\n        form = UploadForm(\n            data={\"file\": \"foo.bar\", \"s3file\": \"file\"},\n            instance=filemodel,\n        )\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_no_file_uploaded(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid(), form.errors\n        assert not form.has_changed()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_fallback(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_clear(self, filemodel):\n        form = UploadForm(data={\"file-clear\": \"1\"}, instance=filemodel)\n        assert form.is_valid()\n        assert not form.cleaned_data[\"file\"]\n\n    def test_build_attr(self, freeze_upload_folder):\n        assert set(ClearableFileInput().build_attrs({}).keys()) == {\n            \"class\",\n            \"data-url\",\n            \"data-fields-x-amz-algorithm\",\n            \"data-fields-x-amz-date\",\n            \"data-fields-x-amz-signature\",\n            \"data-fields-x-amz-credential\",\n            \"data-fields-policy\",\n            \"data-fields-key\",\n            \"data-s3f-signature\",\n        }\n        assert (\n            ClearableFileInput().build_attrs({})[\"data-s3f-signature\"]\n            == \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\"\n        )\n        assert ClearableFileInput().build_attrs({})[\"class\"] == \"s3file\"\n        assert (\n            ClearableFileInput().build_attrs({\"class\": \"my-class\"})[\"class\"]\n            == \"my-class s3file\"\n        )\n\n    def test_get_conditions(self, freeze_upload_folder):\n        conditions = ClearableFileInput().get_conditions(None)\n        assert all(\n            condition in conditions\n            for condition in [\n                {\"bucket\": \"test-bucket\"},\n                {\"success_action_status\": \"201\"},\n                [\"starts-with\", \"$key\", \"custom/location/tmp/s3file\"],\n                [\"starts-with\", \"$Content-Type\", \"\"],\n            ]\n        ), conditions\n\n    def test_accept(self):\n        widget = ClearableFileInput()\n        assert \"accept\" not in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(None)\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/*\"})\n        assert 'accept=\"image/*\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"image/\"] in widget.get_conditions(\n            \"image/*\"\n        )\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/jpeg\"})\n        assert 'accept=\"image/jpeg\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert {\"Content-Type\": \"image/jpeg\"} in widget.get_conditions(\"image/jpeg\")\n\n        widget = ClearableFileInput(attrs={\"accept\": \"application/pdf,image/*\"})\n        assert 'accept=\"application/pdf,image/*\"' in widget.render(\n            name=\"file\",\n            value=\"test.jpg\",\n        )\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n        assert {\"Content-Type\": \"application/pdf\"} not in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n\n    def test_no_js_error(self, driver, live_server):\n        driver.get(live_server + self.url)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert(\n        self, request, driver, live_server, upload_file, freeze_upload_folder\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        with wait_for_page_load(driver, timeout=10):\n            file_input.submit()\n        assert storage.exists(\"tmp/s3file/%s.txt\" % request.node.name)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert_submit_value(\n        self, driver, live_server, upload_file, freeze_upload_folder\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save_continue\" in driver.page_source\n        assert \"continue_value\" in driver.page_source\n\n    def test_progress(self, driver, live_server, upload_file, freeze_upload_folder):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"POST\"][\"progress\"] == \"1\"\n\n    def test_multi_file(\n        self,\n        driver,\n        live_server,\n        freeze_upload_folder,\n        upload_file,\n        another_upload_file,\n        yet_another_upload_file,\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(\n            \" \\n \".join(\n                [\n                    str(freeze_upload_folder / upload_file),\n                    str(freeze_upload_folder / another_upload_file),\n                ]\n            )\n        )\n        file_input = driver.find_element(By.XPATH, \"//input[@name='other_file']\")\n        file_input.send_keys(str(freeze_upload_folder / yet_another_upload_file))\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"FILES\"] == {\n            \"file\": [\n                os.path.basename(upload_file),\n                os.path.basename(another_upload_file),\n            ],\n            \"other_file\": [os.path.basename(yet_another_upload_file)],\n        }\n\n    def test_media(self):\n        assert ClearableFileInput().media._js == [\"s3file/js/s3file.js\"]\n\n    def test_upload_folder(self):\n        assert \"custom/location/tmp/s3file/\" in ClearableFileInput().upload_folder\n        assert len(os.path.basename(ClearableFileInput().upload_folder)) == 22\n", "code_before": "import json\nimport os\nfrom contextlib import contextmanager\n\nimport pytest\nfrom django.forms import ClearableFileInput\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.expected_conditions import staleness_of\nfrom selenium.webdriver.support.wait import WebDriverWait\n\nfrom s3file.storages import storage\nfrom tests.testapp.forms import UploadForm\n\ntry:\n    from django.urls import reverse\nexcept ImportError:\n    # Django 1.8 support\n    from django.core.urlresolvers import reverse\n\n\n@contextmanager\ndef wait_for_page_load(driver, timeout=30):\n    old_page = driver.find_element(By.TAG_NAME, \"html\")\n    yield\n    WebDriverWait(driver, timeout).until(staleness_of(old_page))\n\n\nclass TestS3FileInput:\n    @property\n    def url(self):\n        return reverse(\"upload\")\n\n    @pytest.fixture\n    def freeze(self, monkeypatch):\n        \"\"\"Freeze datetime and UUID.\"\"\"\n        monkeypatch.setattr(\n            \"s3file.forms.S3FileInputMixin.upload_folder\",\n            os.path.join(storage.aws_location, \"tmp\"),\n        )\n\n    def test_value_from_datadict(self, client, upload_file):\n        print(storage.location)\n        with open(upload_file) as f:\n            uploaded_file = storage.save(\"test.jpg\", f)\n        response = client.post(\n            reverse(\"upload\"),\n            {\n                \"file\": json.dumps([uploaded_file]),\n                \"s3file\": '[\"file\"]',\n            },\n        )\n\n        assert response.status_code == 201\n\n    def test_value_from_datadict_initial_data(self, filemodel):\n        form = UploadForm(instance=filemodel)\n        assert filemodel.file.name in form.as_p(), form.as_p()\n        assert not form.is_valid()\n\n    def test_file_does_not_exist_no_fallback(self, filemodel):\n        form = UploadForm(\n            data={\"file\": \"foo.bar\", \"s3file\": \"file\"},\n            instance=filemodel,\n        )\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_no_file_uploaded(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid(), form.errors\n        assert not form.has_changed()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_initial_fallback(self, filemodel):\n        form = UploadForm(data={\"file\": \"\"}, instance=filemodel)\n        assert form.is_valid()\n        assert form.cleaned_data[\"file\"] == filemodel.file\n\n    def test_clear(self, filemodel):\n        form = UploadForm(data={\"file-clear\": \"1\"}, instance=filemodel)\n        assert form.is_valid()\n        assert not form.cleaned_data[\"file\"]\n\n    def test_build_attr(self):\n        assert set(ClearableFileInput().build_attrs({}).keys()) == {\n            \"class\",\n            \"data-url\",\n            \"data-fields-x-amz-algorithm\",\n            \"data-fields-x-amz-date\",\n            \"data-fields-x-amz-signature\",\n            \"data-fields-x-amz-credential\",\n            \"data-fields-policy\",\n            \"data-fields-key\",\n        }\n        assert ClearableFileInput().build_attrs({})[\"class\"] == \"s3file\"\n        assert (\n            ClearableFileInput().build_attrs({\"class\": \"my-class\"})[\"class\"]\n            == \"my-class s3file\"\n        )\n\n    def test_get_conditions(self, freeze):\n        conditions = ClearableFileInput().get_conditions(None)\n        assert all(\n            condition in conditions\n            for condition in [\n                {\"bucket\": \"test-bucket\"},\n                {\"success_action_status\": \"201\"},\n                [\"starts-with\", \"$key\", \"custom/location/tmp\"],\n                [\"starts-with\", \"$Content-Type\", \"\"],\n            ]\n        ), conditions\n\n    def test_accept(self):\n        widget = ClearableFileInput()\n        assert \"accept\" not in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(None)\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/*\"})\n        assert 'accept=\"image/*\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert [\"starts-with\", \"$Content-Type\", \"image/\"] in widget.get_conditions(\n            \"image/*\"\n        )\n\n        widget = ClearableFileInput(attrs={\"accept\": \"image/jpeg\"})\n        assert 'accept=\"image/jpeg\"' in widget.render(name=\"file\", value=\"test.jpg\")\n        assert {\"Content-Type\": \"image/jpeg\"} in widget.get_conditions(\"image/jpeg\")\n\n        widget = ClearableFileInput(attrs={\"accept\": \"application/pdf,image/*\"})\n        assert 'accept=\"application/pdf,image/*\"' in widget.render(\n            name=\"file\",\n            value=\"test.jpg\",\n        )\n        assert [\"starts-with\", \"$Content-Type\", \"\"] in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n        assert {\"Content-Type\": \"application/pdf\"} not in widget.get_conditions(\n            \"application/pdf,image/*\"\n        )\n\n    def test_no_js_error(self, driver, live_server):\n        driver.get(live_server + self.url)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert(self, request, driver, live_server, upload_file, freeze):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        with wait_for_page_load(driver, timeout=10):\n            file_input.submit()\n        assert storage.exists(\"tmp/%s.txt\" % request.node.name)\n\n        with pytest.raises(NoSuchElementException):\n            error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n            pytest.fail(error.get_attribute(\"JSError\"))\n\n    def test_file_insert_submit_value(self, driver, live_server, upload_file, freeze):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save_continue\" in driver.page_source\n        assert \"continue_value\" in driver.page_source\n\n    def test_progress(self, driver, live_server, upload_file, freeze):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        assert \"save\" in driver.page_source\n\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(upload_file)\n        assert file_input.get_attribute(\"name\") == \"file\"\n        save_button = driver.find_element(By.XPATH, \"//button[@name='save_continue']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"POST\"][\"progress\"] == \"1\"\n\n    def test_multi_file(\n        self,\n        driver,\n        live_server,\n        freeze,\n        upload_file,\n        another_upload_file,\n        yet_another_upload_file,\n    ):\n        driver.get(live_server + self.url)\n        file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n        file_input.send_keys(\" \\n \".join([upload_file, another_upload_file]))\n        file_input = driver.find_element(By.XPATH, \"//input[@name='other_file']\")\n        file_input.send_keys(yet_another_upload_file)\n        save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n        with wait_for_page_load(driver, timeout=10):\n            save_button.click()\n        response = json.loads(driver.find_elements(By.CSS_SELECTOR, \"pre\")[0].text)\n        assert response[\"FILES\"] == {\n            \"file\": [\n                os.path.basename(upload_file),\n                os.path.basename(another_upload_file),\n            ],\n            \"other_file\": [os.path.basename(yet_another_upload_file)],\n        }\n\n    def test_media(self):\n        assert ClearableFileInput().media._js == [\"s3file/js/s3file.js\"]\n\n    def test_upload_folder(self):\n        assert \"custom/location/tmp/s3file/\" in ClearableFileInput().upload_folder\n        assert len(os.path.basename(ClearableFileInput().upload_folder)) == 22\n", "patch": "@@ -31,23 +31,15 @@ class TestS3FileInput:\n     def url(self):\n         return reverse(\"upload\")\n \n-    @pytest.fixture\n-    def freeze(self, monkeypatch):\n-        \"\"\"Freeze datetime and UUID.\"\"\"\n-        monkeypatch.setattr(\n-            \"s3file.forms.S3FileInputMixin.upload_folder\",\n-            os.path.join(storage.aws_location, \"tmp\"),\n-        )\n-\n-    def test_value_from_datadict(self, client, upload_file):\n-        print(storage.location)\n+    def test_value_from_datadict(self, freeze_upload_folder, client, upload_file):\n         with open(upload_file) as f:\n-            uploaded_file = storage.save(\"test.jpg\", f)\n+            uploaded_file = storage.save(freeze_upload_folder / \"test.jpg\", f)\n         response = client.post(\n             reverse(\"upload\"),\n             {\n-                \"file\": json.dumps([uploaded_file]),\n-                \"s3file\": '[\"file\"]',\n+                \"file\": f\"custom/location/{uploaded_file}\",\n+                \"file-s3f-signature\": \"m94qBxBsnMIuIICiY133kX18KkllSPMVbhGAdAwNn1A\",\n+                \"s3file\": \"file\",\n             },\n         )\n \n@@ -82,7 +74,7 @@ def test_clear(self, filemodel):\n         assert form.is_valid()\n         assert not form.cleaned_data[\"file\"]\n \n-    def test_build_attr(self):\n+    def test_build_attr(self, freeze_upload_folder):\n         assert set(ClearableFileInput().build_attrs({}).keys()) == {\n             \"class\",\n             \"data-url\",\n@@ -92,21 +84,26 @@ def test_build_attr(self):\n             \"data-fields-x-amz-credential\",\n             \"data-fields-policy\",\n             \"data-fields-key\",\n+            \"data-s3f-signature\",\n         }\n+        assert (\n+            ClearableFileInput().build_attrs({})[\"data-s3f-signature\"]\n+            == \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\"\n+        )\n         assert ClearableFileInput().build_attrs({})[\"class\"] == \"s3file\"\n         assert (\n             ClearableFileInput().build_attrs({\"class\": \"my-class\"})[\"class\"]\n             == \"my-class s3file\"\n         )\n \n-    def test_get_conditions(self, freeze):\n+    def test_get_conditions(self, freeze_upload_folder):\n         conditions = ClearableFileInput().get_conditions(None)\n         assert all(\n             condition in conditions\n             for condition in [\n                 {\"bucket\": \"test-bucket\"},\n                 {\"success_action_status\": \"201\"},\n-                [\"starts-with\", \"$key\", \"custom/location/tmp\"],\n+                [\"starts-with\", \"$key\", \"custom/location/tmp/s3file\"],\n                 [\"starts-with\", \"$Content-Type\", \"\"],\n             ]\n         ), conditions\n@@ -145,20 +142,24 @@ def test_no_js_error(self, driver, live_server):\n             error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n             pytest.fail(error.get_attribute(\"JSError\"))\n \n-    def test_file_insert(self, request, driver, live_server, upload_file, freeze):\n+    def test_file_insert(\n+        self, request, driver, live_server, upload_file, freeze_upload_folder\n+    ):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n         file_input.send_keys(upload_file)\n         assert file_input.get_attribute(\"name\") == \"file\"\n         with wait_for_page_load(driver, timeout=10):\n             file_input.submit()\n-        assert storage.exists(\"tmp/%s.txt\" % request.node.name)\n+        assert storage.exists(\"tmp/s3file/%s.txt\" % request.node.name)\n \n         with pytest.raises(NoSuchElementException):\n             error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n             pytest.fail(error.get_attribute(\"JSError\"))\n \n-    def test_file_insert_submit_value(self, driver, live_server, upload_file, freeze):\n+    def test_file_insert_submit_value(\n+        self, driver, live_server, upload_file, freeze_upload_folder\n+    ):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n         file_input.send_keys(upload_file)\n@@ -178,7 +179,7 @@ def test_file_insert_submit_value(self, driver, live_server, upload_file, freeze\n         assert \"save_continue\" in driver.page_source\n         assert \"continue_value\" in driver.page_source\n \n-    def test_progress(self, driver, live_server, upload_file, freeze):\n+    def test_progress(self, driver, live_server, upload_file, freeze_upload_folder):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n         file_input.send_keys(upload_file)\n@@ -202,16 +203,23 @@ def test_multi_file(\n         self,\n         driver,\n         live_server,\n-        freeze,\n+        freeze_upload_folder,\n         upload_file,\n         another_upload_file,\n         yet_another_upload_file,\n     ):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n-        file_input.send_keys(\" \\n \".join([upload_file, another_upload_file]))\n+        file_input.send_keys(\n+            \" \\n \".join(\n+                [\n+                    str(freeze_upload_folder / upload_file),\n+                    str(freeze_upload_folder / another_upload_file),\n+                ]\n+            )\n+        )\n         file_input = driver.find_element(By.XPATH, \"//input[@name='other_file']\")\n-        file_input.send_keys(yet_another_upload_file)\n+        file_input.send_keys(str(freeze_upload_folder / yet_another_upload_file))\n         save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n         with wait_for_page_load(driver, timeout=10):\n             save_button.click()", "file_path": "files/2022_6/905", "file_language": "py", "file_name": "tests/test_forms.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/codingjoe/django-s3file/raw/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318/tests%2Ftest_middleware.py", "code": "import os\n\nimport pytest\nfrom django.core.exceptions import PermissionDenied, SuspiciousFileOperation\nfrom django.core.files.base import ContentFile\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom s3file.middleware import S3FileMiddleware\nfrom s3file.storages import storage\n\n\nclass TestS3FileMiddleware:\n    def test_get_files_from_storage(self, freeze_upload_folder):\n        content = b\"test_get_files_from_storage\"\n        name = storage.save(\n            \"tmp/s3file/test_get_files_from_storage\", ContentFile(content)\n        )\n        files = S3FileMiddleware.get_files_from_storage(\n            [os.path.join(storage.aws_location, name)],\n            \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n        )\n        file = next(files)\n        assert file.read() == content\n\n    def test_process_request(self, freeze_upload_folder, rf):\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/tmp/s3file/s3_file.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__location_escape(self, freeze_upload_folder, rf):\n        storage.save(\"secrets/passwords.txt\", ContentFile(b\"keep this secret\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/secrets/passwords.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n            },\n        )\n        with pytest.raises(PermissionDenied) as e:\n            S3FileMiddleware(lambda x: None)(request)\n        assert \"Illegal signature!\" in str(e.value)\n\n    def test_process_request__multiple_files(self, freeze_upload_folder, rf):\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        storage.save(\"tmp/s3file/s3_other_file.txt\", ContentFile(b\"other s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": [\n                    \"custom/location/tmp/s3file/s3_file.txt\",\n                    \"custom/location/tmp/s3file/s3_other_file.txt\",\n                ],\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n                \"other_file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n                \"s3file\": [\"file\", \"other_file\"],\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        files = request.FILES.getlist(\"file\")\n        assert files[0].read() == b\"s3file\"\n        assert files[1].read() == b\"other s3file\"\n\n    def test_process_request__no_location(self, freeze_upload_folder, rf, settings):\n        settings.AWS_LOCATION = \"\"\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": f\"tmp/s3file/s3_file.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"scjzm3N8njBQIVSGEhOchtM0TkGyb2U6OXGLVlRUZhY\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__no_file(self, freeze_upload_folder, rf, caplog):\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/tmp/s3file/does_not_exist.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert not request.FILES.getlist(\"file\")\n        assert (\n            \"File not found: custom/location/tmp/s3file/does_not_exist.txt\"\n            in caplog.text\n        )\n\n    def test_process_request__no_signature(self, rf, caplog):\n        request = rf.post(\n            \"/\", data={\"file\": \"tmp/s3file/does_not_exist.txt\", \"s3file\": \"file\"}\n        )\n        with pytest.raises(PermissionDenied) as e:\n            S3FileMiddleware(lambda x: None)(request)\n\n    def test_process_request__wrong_signature(self, rf, caplog):\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"tmp/s3file/does_not_exist.txt\",\n                \"s3file\": \"file\",\n                \"file-s3f-signature\": \"fake\",\n            },\n        )\n        with pytest.raises(PermissionDenied) as e:\n            S3FileMiddleware(lambda x: None)(request)\n", "code_before": "import os\n\nfrom django.core.files.base import ContentFile\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom s3file.middleware import S3FileMiddleware\nfrom s3file.storages import storage\n\n\nclass TestS3FileMiddleware:\n    def test_get_files_from_storage(self):\n        content = b\"test_get_files_from_storage\"\n        name = storage.save(\n            \"tmp/s3file/test_get_files_from_storage\", ContentFile(content)\n        )\n        files = S3FileMiddleware.get_files_from_storage(\n            [os.path.join(storage.aws_location, name)]\n        )\n        file = next(files)\n        assert file.read() == content\n\n    def test_process_request(self, rf):\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": \"custom/location/tmp/s3file/s3_file.txt\",\n                \"s3file\": \"file\",\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__multiple_files(self, rf):\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        storage.save(\"tmp/s3file/s3_other_file.txt\", ContentFile(b\"other s3file\"))\n        request = rf.post(\n            \"/\",\n            data={\n                \"file\": [\n                    \"custom/location/tmp/s3file/s3_file.txt\",\n                    \"custom/location/tmp/s3file/s3_other_file.txt\",\n                ],\n                \"s3file\": [\"file\", \"other_file\"],\n            },\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        files = request.FILES.getlist(\"file\")\n        assert files[0].read() == b\"s3file\"\n        assert files[1].read() == b\"other s3file\"\n\n    def test_process_request__no_location(self, rf, settings):\n        settings.AWS_LOCATION = \"\"\n        uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n        request = rf.post(\"/\", data={\"file\": uploaded_file})\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"uploaded\"\n\n        storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n        request = rf.post(\n            \"/\", data={\"file\": \"tmp/s3file/s3_file.txt\", \"s3file\": \"file\"}\n        )\n        S3FileMiddleware(lambda x: None)(request)\n        assert request.FILES.getlist(\"file\")\n        assert request.FILES.get(\"file\").read() == b\"s3file\"\n\n    def test_process_request__no_file(self, rf, caplog):\n        request = rf.post(\"/\", data={\"file\": \"does_not_exist.txt\", \"s3file\": \"file\"})\n        S3FileMiddleware(lambda x: None)(request)\n        assert not request.FILES.getlist(\"file\")\n        assert \"File not found: does_not_exist.txt\" in caplog.text\n", "patch": "@@ -1,5 +1,7 @@\n import os\n \n+import pytest\n+from django.core.exceptions import PermissionDenied, SuspiciousFileOperation\n from django.core.files.base import ContentFile\n from django.core.files.uploadedfile import SimpleUploadedFile\n \n@@ -8,18 +10,19 @@\n \n \n class TestS3FileMiddleware:\n-    def test_get_files_from_storage(self):\n+    def test_get_files_from_storage(self, freeze_upload_folder):\n         content = b\"test_get_files_from_storage\"\n         name = storage.save(\n             \"tmp/s3file/test_get_files_from_storage\", ContentFile(content)\n         )\n         files = S3FileMiddleware.get_files_from_storage(\n-            [os.path.join(storage.aws_location, name)]\n+            [os.path.join(storage.aws_location, name)],\n+            \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n         )\n         file = next(files)\n         assert file.read() == content\n \n-    def test_process_request(self, rf):\n+    def test_process_request(self, freeze_upload_folder, rf):\n         uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n         request = rf.post(\"/\", data={\"file\": uploaded_file})\n         S3FileMiddleware(lambda x: None)(request)\n@@ -32,13 +35,28 @@ def test_process_request(self, rf):\n             data={\n                 \"file\": \"custom/location/tmp/s3file/s3_file.txt\",\n                 \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n             },\n         )\n         S3FileMiddleware(lambda x: None)(request)\n         assert request.FILES.getlist(\"file\")\n         assert request.FILES.get(\"file\").read() == b\"s3file\"\n \n-    def test_process_request__multiple_files(self, rf):\n+    def test_process_request__location_escape(self, freeze_upload_folder, rf):\n+        storage.save(\"secrets/passwords.txt\", ContentFile(b\"keep this secret\"))\n+        request = rf.post(\n+            \"/\",\n+            data={\n+                \"file\": \"custom/location/secrets/passwords.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n+            },\n+        )\n+        with pytest.raises(PermissionDenied) as e:\n+            S3FileMiddleware(lambda x: None)(request)\n+        assert \"Illegal signature!\" in str(e.value)\n+\n+    def test_process_request__multiple_files(self, freeze_upload_folder, rf):\n         storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n         storage.save(\"tmp/s3file/s3_other_file.txt\", ContentFile(b\"other s3file\"))\n         request = rf.post(\n@@ -48,6 +66,8 @@ def test_process_request__multiple_files(self, rf):\n                     \"custom/location/tmp/s3file/s3_file.txt\",\n                     \"custom/location/tmp/s3file/s3_other_file.txt\",\n                 ],\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n+                \"other_file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n                 \"s3file\": [\"file\", \"other_file\"],\n             },\n         )\n@@ -56,7 +76,7 @@ def test_process_request__multiple_files(self, rf):\n         assert files[0].read() == b\"s3file\"\n         assert files[1].read() == b\"other s3file\"\n \n-    def test_process_request__no_location(self, rf, settings):\n+    def test_process_request__no_location(self, freeze_upload_folder, rf, settings):\n         settings.AWS_LOCATION = \"\"\n         uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n         request = rf.post(\"/\", data={\"file\": uploaded_file})\n@@ -66,14 +86,48 @@ def test_process_request__no_location(self, rf, settings):\n \n         storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n         request = rf.post(\n-            \"/\", data={\"file\": \"tmp/s3file/s3_file.txt\", \"s3file\": \"file\"}\n+            \"/\",\n+            data={\n+                \"file\": f\"tmp/s3file/s3_file.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"scjzm3N8njBQIVSGEhOchtM0TkGyb2U6OXGLVlRUZhY\",\n+            },\n         )\n         S3FileMiddleware(lambda x: None)(request)\n         assert request.FILES.getlist(\"file\")\n         assert request.FILES.get(\"file\").read() == b\"s3file\"\n \n-    def test_process_request__no_file(self, rf, caplog):\n-        request = rf.post(\"/\", data={\"file\": \"does_not_exist.txt\", \"s3file\": \"file\"})\n+    def test_process_request__no_file(self, freeze_upload_folder, rf, caplog):\n+        request = rf.post(\n+            \"/\",\n+            data={\n+                \"file\": \"custom/location/tmp/s3file/does_not_exist.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n+            },\n+        )\n         S3FileMiddleware(lambda x: None)(request)\n         assert not request.FILES.getlist(\"file\")\n-        assert \"File not found: does_not_exist.txt\" in caplog.text\n+        assert (\n+            \"File not found: custom/location/tmp/s3file/does_not_exist.txt\"\n+            in caplog.text\n+        )\n+\n+    def test_process_request__no_signature(self, rf, caplog):\n+        request = rf.post(\n+            \"/\", data={\"file\": \"tmp/s3file/does_not_exist.txt\", \"s3file\": \"file\"}\n+        )\n+        with pytest.raises(PermissionDenied) as e:\n+            S3FileMiddleware(lambda x: None)(request)\n+\n+    def test_process_request__wrong_signature(self, rf, caplog):\n+        request = rf.post(\n+            \"/\",\n+            data={\n+                \"file\": \"tmp/s3file/does_not_exist.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"fake\",\n+            },\n+        )\n+        with pytest.raises(PermissionDenied) as e:\n+            S3FileMiddleware(lambda x: None)(request)", "file_path": "files/2022_6/906", "file_language": "py", "file_name": "tests/test_middleware.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
