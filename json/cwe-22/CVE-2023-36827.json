{"index": 12006, "cve_id": "CVE-2023-36827", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "Fides is an open-source privacy engineering platform for managing the fulfillment of data privacy requests in a runtime environment, and the enforcement of privacy regulations in code. A path traversal (directory traversal) vulnerability affects fides versions lower than version `2.15.1`, allowing remote attackers to access arbitrary files on the fides webserver container's filesystem. The vulnerability is patched in fides `2.15.1`.\n\nIf the Fides webserver API is not directly accessible to attackers and is instead deployed behind a reverse proxy as recommended in Ethyca's security best practice documentation, and the reverse proxy is an AWS application load balancer, the vulnerability can't be exploited by these attackers. An AWS application load balancer will reject this attack with a 400 error. Additionally, any secrets supplied to the container using environment variables rather than a `fides.toml` configuration file are not affected by this vulnerability.", "cvss": "7.5", "publish_date": "July 5, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "NONE", "A": "NONE", "commit_id": "f526d9ffb176006d701493c9d0eff6b4884e811f", "commit_message": "Merge pull request from GHSA-r25m-cr6v-p9hq\n\n* fix for vuln\n\n* Apply suggestions from code review\r\n\r\nUse correct spelling of malicious.\n\nCo-authored-by: Adam Sachs <adam@ethyca.com>\n\n* Update src/fides/api/main.py\r\n\r\nVerbiage\n\nCo-authored-by: Thomas <thomas.lapiana+github@pm.me>\n\n---------\n\nCo-authored-by: Adam Sachs <adam@ethyca.com>\nCo-authored-by: Thomas <thomas.lapiana+github@pm.me>\nCo-authored-by: Dave Quinlan <83430497+daveqnet@users.noreply.github.com>", "commit_date": "2023-07-05T14:53:48Z", "project": "ethyca/fides", "url": "https://api.github.com/repos/ethyca/fides/commits/f526d9ffb176006d701493c9d0eff6b4884e811f", "html_url": "https://github.com/ethyca/fides/commit/f526d9ffb176006d701493c9d0eff6b4884e811f", "windows_before": [{"commit_id": "1212eadf972fa9beed2908d377a3ee39e1f3d6f7", "commit_date": "Fri Jun 30 17:02:40 2023 -0400", "commit_message": "3601: test connection results toast (#3700)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/datastore-connections/TestData.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/TestConnection.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/TestConnectionMessage.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParameters.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParametersForm.tsx"]}, {"commit_id": "0ded7e836dd374c07ed43afb6affc1e5ebeaabdb", "commit_date": "Fri Jun 30 13:37:10 2023 -0500", "commit_message": "[Backend] Validation on Notice Keys within Region (#3703)", "files_name": ["src/fides/api/models/privacy_notice.py", "src/fides/api/util/consent_util.py", "tests/ops/api/v1/endpoints/test_privacy_notice_endpoints.py", "tests/ops/models/test_privacy_notice.py", "tests/ops/util/test_consent_util.py"]}, {"commit_id": "100e1180b498a716294d280314e291fc5e0c0f98", "commit_date": "Fri Jun 30 13:59:12 2023 -0400", "commit_message": "3631: add gear icon to nav (#3701)", "files_name": ["CHANGELOG.md", "clients/admin-ui/cypress/e2e/nav-bar.cy.ts", "clients/admin-ui/cypress/e2e/organization.cy.ts", "clients/admin-ui/cypress/e2e/taxonomy.cy.ts", "clients/admin-ui/src/features/common/Header.tsx", "clients/admin-ui/src/features/common/nav/v2/NavTopBar.tsx", "clients/admin-ui/src/features/common/nav/v2/nav-config.test.ts", "clients/admin-ui/src/features/common/nav/v2/nav-config.ts"]}, {"commit_id": "bc65cbb1e9caa30e06560e6568769825c89c6afa", "commit_date": "Fri Jun 30 13:49:40 2023 -0400", "commit_message": "Add unescape-safestr header to both fides-js fetch and privacy center calls (#3706)", "files_name": ["CHANGELOG.md", "clients/fides-js/src/services/fides/api.ts", "clients/privacy-center/common/CommonHeaders.ts"]}, {"commit_id": "a77cdfa2d3a6d95755bf789852dcd0af10407c59", "commit_date": "Fri Jun 30 10:45:25 2023 -0500", "commit_message": "Allow Banner and Modal to Scroll with Long Descriptions (#3713)", "files_name": ["CHANGELOG.md", "clients/fides-js/src/components/fides.css"]}, {"commit_id": "c169bc5180dc9c1a1f5d5b92491a1ffad23a36ec", "commit_date": "Fri Jun 30 09:36:23 2023 -0500", "commit_message": "Allow Privacy Action Cards to Grow (#3669)", "files_name": ["CHANGELOG.md", "clients/privacy-center/components/Card.tsx"]}, {"commit_id": "f4ca8cc418ecf9304e555856dcba0e678a5536d2", "commit_date": "Fri Jun 30 12:53:16 2023 +0100", "commit_message": "Handle Keys and Collections with a double underscore (#3688)", "files_name": ["CHANGELOG.md", "src/fides/api/task/graph_task.py", "src/fides/api/task/task_resources.py", "src/fides/api/util/collection_util.py", "tests/ops/task/test_task_resources.py"]}, {"commit_id": "1594e81d4d2bd8e1dcd68f479c005c823c4ba644", "commit_date": "Fri Jun 30 07:16:08 2023 -0400", "commit_message": "avoid circular deps caused within `api.api.v1` (#3692)", "files_name": ["CHANGELOG.md", "docs/fides/docs/development/development_tips.md", "scripts/quickstart.py", "src/fides/api/api/v1/endpoints/config_endpoints.py", "src/fides/api/api/v1/endpoints/connection_endpoints.py", "src/fides/api/api/v1/endpoints/connection_type_endpoints.py", "src/fides/api/api/v1/endpoints/consent_request_endpoints.py", "src/fides/api/api/v1/endpoints/dataset_endpoints.py", "src/fides/api/api/v1/endpoints/drp_endpoints.py", "src/fides/api/api/v1/endpoints/encryption_endpoints.py", "src/fides/api/api/v1/endpoints/identity_verification_endpoints.py", "src/fides/api/api/v1/endpoints/manual_webhook_endpoints.py", "src/fides/api/api/v1/endpoints/masking_endpoints.py", "src/fides/api/api/v1/endpoints/messaging_endpoints.py", "src/fides/api/api/v1/endpoints/oauth_endpoints.py", "src/fides/api/api/v1/endpoints/policy_endpoints.py", "src/fides/api/api/v1/endpoints/policy_webhook_endpoints.py", "src/fides/api/api/v1/endpoints/privacy_experience_config_endpoints.py", "src/fides/api/api/v1/endpoints/privacy_experience_endpoints.py", "src/fides/api/api/v1/endpoints/privacy_notice_endpoints.py", "src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py", "src/fides/api/api/v1/endpoints/privacy_request_endpoints.py", "src/fides/api/api/v1/endpoints/registration_endpoints.py", "src/fides/api/api/v1/endpoints/router_factory.py", "src/fides/api/api/v1/endpoints/saas_config_endpoints.py", "src/fides/api/api/v1/endpoints/storage_endpoints.py", "src/fides/api/api/v1/endpoints/system.py", "src/fides/api/api/v1/endpoints/user_endpoints.py", "src/fides/api/api/v1/endpoints/user_permission_endpoints.py", "src/fides/api/api/v1/endpoints/validate.py", "src/fides/api/app_setup.py", "src/fides/api/main.py", "src/fides/api/oauth/utils.py", "src/fides/api/schemas/privacy_experience.py", "src/fides/api/service/connectors/fides/fides_client.py", "src/fides/api/service/privacy_request/request_runner_service.py", "src/fides/api/service/privacy_request/request_service.py", "src/fides/api/util/connection_util.py", "src/fides/api/util/consent_util.py", "src/fides/api/util/endpoint_utils.py", "src/fides/cli/utils.py", "src/fides/common/api/v1/__init__.py", "src/fides/common/api/v1/urn_registry.py", "src/fides/core/api.py", "tests/ctl/api/test_admin.py", "tests/ctl/api/test_generate.py", "tests/ctl/api/test_validate.py", "tests/ctl/core/test_api.py", "tests/ops/api/test_ratelimit.py", "tests/ops/api/v1/endpoints/test_config_endpoints.py", "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py", "tests/ops/api/v1/endpoints/test_connection_template_endpoints.py", "tests/ops/api/v1/endpoints/test_consent_request_endpoints.py", "tests/ops/api/v1/endpoints/test_dataset_endpoints.py", "tests/ops/api/v1/endpoints/test_drp_endpoints.py", "tests/ops/api/v1/endpoints/test_encryption_endpoints.py", "tests/ops/api/v1/endpoints/test_health_endpoints.py", "tests/ops/api/v1/endpoints/test_identity_verification_endpoints.py", "tests/ops/api/v1/endpoints/test_manual_webhooks.py", "tests/ops/api/v1/endpoints/test_masking_endpoints.py", "tests/ops/api/v1/endpoints/test_messaging_endpoints.py", "tests/ops/api/v1/endpoints/test_oauth_endpoints.py", "tests/ops/api/v1/endpoints/test_policy_endpoints.py", "tests/ops/api/v1/endpoints/test_policy_webhook_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_experience_config_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_experience_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_notice_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_preference_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_request_endpoints.py", "tests/ops/api/v1/endpoints/test_registration_endpoints.py", "tests/ops/api/v1/endpoints/test_saas_config_endpoints.py", "tests/ops/api/v1/endpoints/test_storage_endpoints.py", "tests/ops/api/v1/endpoints/test_system.py", "tests/ops/api/v1/endpoints/test_user_endpoints.py", "tests/ops/api/v1/endpoints/test_user_permission_endpoints.py", "tests/ops/api/v1/test_exception_handlers.py", "tests/ops/api/v1/test_utils.py", "tests/ops/integration_tests/test_connection_configuration_integration.py", "tests/ops/service/privacy_request/test_request_service.py", "tests/ops/util/test_api_router.py"]}, {"commit_id": "f63a843acc1e2b756cbe85c8276075ddb5e2ee7e", "commit_date": "Thu Jun 29 15:44:50 2023 -0700", "commit_message": "Update front-end to treat fields with default values as required (#3694)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParametersForm.tsx"]}, {"commit_id": "cd579f7b927255a2b09e8600922b4aab0e3af534", "commit_date": "Thu Jun 29 15:07:30 2023 -0400", "commit_message": "Deprecate connection config fields in UI (#3684)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/datastore-connections/datastore-connection.slice.ts", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParameters.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParametersForm.tsx", "src/fides/api/alembic/migrations/versions/7315b9d7fda6_make_connectionconfig_name_optional.py", "src/fides/api/models/connectionconfig.py", "src/fides/api/schemas/connection_configuration/connection_config.py", "src/fides/api/service/connectors/saas/connector_registry_service.py", "tests/fixtures/saas/connection_template_fixtures.py", "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py", "tests/ops/api/v1/endpoints/test_connection_template_endpoints.py", "tests/ops/api/v1/endpoints/test_system.py"]}, {"commit_id": "028ee832d0113b15f095930ffb11574f2c20f396", "commit_date": "Wed Jun 28 16:35:57 2023 -0700", "commit_message": "Updating DSR data pre-processor to support manual data (#3693)", "files_name": ["src/fides/api/service/privacy_request/dsr_package/dsr_report_builder.py", "tests/ops/service/test_storage_uploader_service.py"]}, {"commit_id": "c27a88c1aff197b0ded32dd8dbb2081eeff470ee", "commit_date": "Wed Jun 28 18:29:01 2023 -0500", "commit_message": "[Backend] EU Location Updates [#3611] (#3630)", "files_name": ["CHANGELOG.md", "docs/fides/docs/development/postman/Fides.postman_collection.json", "src/fides/api/alembic/migrations/versions/d2996381c4dd_eu_locations_migration.py", "src/fides/api/api/v1/endpoints/privacy_experience_endpoints.py", "src/fides/api/models/privacy_experience.py", "src/fides/api/models/privacy_notice.py", "src/fides/api/models/privacy_preference.py", "src/fides/api/schemas/privacy_preference.py", "src/fides/data/privacy_notices/privacy_notice_templates.yml", "tests/fixtures/application_fixtures.py", "tests/ops/api/v1/endpoints/test_privacy_experience_config_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_experience_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_notice_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_preference_endpoints.py", "tests/ops/models/test_privacy_experience.py", "tests/ops/models/test_privacy_notice.py", "tests/ops/models/test_privacy_preference.py", "tests/ops/service/connectors/test_saas_connector.py", "tests/ops/service/messaging/message_dispatch_service_test.py", "tests/ops/util/test_consent_util.py"]}, {"commit_id": "c27a417a356398cdd23d8759261414c5ab877cfe", "commit_date": "Wed Jun 28 15:46:27 2023 -0700", "commit_message": "Adding array support for unflatten_dict (#3629)", "files_name": ["src/fides/api/util/saas_util.py", "tests/ops/util/test_saas_util.py"]}, {"commit_id": "c7effb1f181c886ec9fd19ce54081f7fc22b4ef2", "commit_date": "Wed Jun 28 14:46:53 2023 -0700", "commit_message": "Removing required flag for the dataset field (#3690)", "files_name": ["clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/fields/DatasetConfigField/DatasetConfigField.tsx"]}, {"commit_id": "d300f8cebbb092197fb8a8024fa9a967149d3b96", "commit_date": "Wed Jun 28 16:21:42 2023 -0500", "commit_message": "[Backend] Add Systems Applicable Filter to Privacy Experience List  (#3654)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/system/system.slice.ts", "clients/fides-js/src/services/fides/api.ts", "clients/privacy-center/features/consent/consent.slice.ts", "src/fides/api/api/v1/endpoints/privacy_experience_endpoints.py", "src/fides/api/models/privacy_experience.py", "tests/ops/api/v1/endpoints/test_privacy_experience_endpoints.py", "tests/ops/models/test_privacy_experience.py"]}, {"commit_id": "65a72ffca7d7c596bd8b9e9c23024d6a4fea3e36", "commit_date": "Wed Jun 28 15:15:00 2023 -0400", "commit_message": "Include `data_use` and `data_category` metadata in `upload` of access results (#3674)", "files_name": [".fides/redis_dataset.yml", "CHANGELOG.md", "src/fides/api/graph/graph.py", "src/fides/api/models/privacy_request.py", "src/fides/api/service/privacy_request/request_runner_service.py", "src/fides/api/service/storage/storage_uploader_service.py"]}], "windows_after": [{"commit_id": "111bf3bf1fec0521be89a32eae42f3729a61115e", "commit_date": "Wed Jul 5 15:11:59 2023 -0500", "commit_message": "[Backend] Fix Validation Error where Current Privacy Preferences might be None (#3719)", "files_name": ["CHANGELOG.md", "src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py", "src/fides/api/main.py", "src/fides/api/models/privacy_preference.py", "src/fides/api/service/connectors/saas/connector_registry_service.py", "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py", "tests/ops/api/v1/endpoints/test_connection_template_endpoints.py", "tests/ops/api/v1/endpoints/test_system.py", "tests/ops/models/test_privacy_preference.py"]}, {"commit_id": "3add450ec06befdb7485df957b164da695a71fd0", "commit_date": "Thu Jul 6 11:42:42 2023 +0100", "commit_message": "Update CHANGELOG for `2.15.1` (#3735)", "files_name": ["CHANGELOG.md"]}, {"commit_id": "8b73b24c3ea043ab398974406018472cd252732f", "commit_date": "Thu Jul 6 10:14:50 2023 -0500", "commit_message": "Treat Underscore as a Special Character for Passwords (#3717)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/common/form/validation.ts", "src/fides/api/schemas/user.py", "tests/ops/api/v1/endpoints/test_user_endpoints.py"]}, {"commit_id": "c4640a838ededce66f12cb3c6a706b186bff6e43", "commit_date": "Thu Jul 6 11:29:11 2023 -0400", "commit_message": "3632 clickable system tiles (#3734)", "files_name": ["CHANGELOG.md", "clients/admin-ui/cypress/e2e/systems.cy.ts", "clients/admin-ui/src/features/system/SystemCard.tsx"]}, {"commit_id": "5aea738463960d81821c11ae7ade1d627a46bf32", "commit_date": "Thu Jul 6 09:46:17 2023 -0700", "commit_message": "Merge pull request from GHSA-g95c-2jgm-hqc6", "files_name": ["src/fides/api/service/connectors/saas/connector_registry_service.py", "src/fides/api/util/unsafe_file_util.py", "tests/ops/util/test_unsafe_file_util.py"]}, {"commit_id": "8beaace082b325e693dc7682029a3cb7e6c2b69d", "commit_date": "Thu Jul 6 10:40:19 2023 -0700", "commit_message": "Merge pull request from GHSA-3rw2-wfc8-wmj5", "files_name": ["requirements.txt", "src/fides/api/service/connectors/saas/connector_registry_service.py", "src/fides/api/util/unsafe_file_util.py", "tests/ops/util/test_unsafe_file_util.py"]}, {"commit_id": "3374452f06a5bc6a1c86fc92e844d9c0be0f64af", "commit_date": "Thu Jul 6 14:30:10 2023 -0700", "commit_message": "Updated CHANGELOG.md for release 2.16.0 (#3742)", "files_name": ["CHANGELOG.md"]}, {"commit_id": "827541d68502264db8b18c51b7385f9643589b57", "commit_date": "Fri Jul 7 05:45:59 2023 -0700", "commit_message": "Fixing misc test failures (#3744)", "files_name": ["pyproject.toml", "src/fides/api/util/unsafe_file_util.py", "tests/fixtures/saas_example_fixtures.py"]}, {"commit_id": "bf0efa28ca125e9ece890bf787db400f27be7938", "commit_date": "Fri Jul 7 10:17:06 2023 -0400", "commit_message": "Fix integration tab permissions (#3707)", "files_name": ["CHANGELOG.md", "src/fides/api/api/v1/endpoints/connection_endpoints.py", "src/fides/api/api/v1/endpoints/dataset_endpoints.py", "src/fides/api/api/v1/endpoints/policy_webhook_endpoints.py", "src/fides/api/api/v1/endpoints/system.py", "src/fides/api/app_setup.py", "src/fides/api/oauth/system_manager.py", "src/fides/api/oauth/system_manager_oauth_util.py", "src/fides/api/util/connection_util.py", "tests/lib/test_system_oauth_util.py", "tests/ops/api/v1/endpoints/test_system.py"]}, {"commit_id": "962905f13a2c5c6d421ce2deacd9fa6fc619b580", "commit_date": "Fri Jul 7 17:23:30 2023 -0400", "commit_message": "make malicious url test more robust to env differences (#3748)", "files_name": ["CHANGELOG.md", "tests/ops/util/test_api_router.py"]}, {"commit_id": "7d443f643d3ab58f0f2769017ab7478b44d82141", "commit_date": "Fri Jul 7 17:53:15 2023 -0400", "commit_message": "ignore type checker on `click` decorators to bypass known library issue (#3746)", "files_name": ["CHANGELOG.md", "src/fides/cli/__init__.py", "src/fides/cli/commands/annotate.py", "src/fides/cli/commands/deploy.py", "src/fides/cli/commands/generate.py", "src/fides/cli/commands/ungrouped.py", "src/fides/cli/commands/view.py", "src/fides/cli/options.py"]}, {"commit_id": "cadbea19538b5c703cf666292a33baef2736b096", "commit_date": "Mon Jul 10 08:50:51 2023 +0100", "commit_message": "Bump python versions to latest (3.10.12, 3.9.17, and 3.8.17) (#3733)", "files_name": [".github/workflows/backend_checks.yml", ".github/workflows/cli_checks.yml", "CHANGELOG.md", "Dockerfile", "docs/fides/Dockerfile"]}, {"commit_id": "4f91375e9aa62ed2a84dedae4f2a73c61c5f83d0", "commit_date": "Mon Jul 10 12:26:09 2023 -0700", "commit_message": "Add enable/disable toggle to integration tab (#3593)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/datastore-connections/ConnectionMenu.tsx", "clients/admin-ui/src/features/datastore-connections/DisableConnectionModal.tsx", "clients/admin-ui/src/features/datastore-connections/datastore-connection.slice.ts", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParametersForm.tsx"]}, {"commit_id": "5c624d36dcd3bf1011acfd37d02d48c2852fb4a6", "commit_date": "Mon Jul 10 16:19:18 2023 -0700", "commit_message": "Allow connection configs with duplicate names (#3770)", "files_name": ["CHANGELOG.md", "src/fides/api/db/base_class.py", "src/fides/api/models/authentication_request.py", "src/fides/api/models/datasetconfig.py", "src/fides/api/util/connection_util.py", "tests/ops/api/v1/endpoints/test_connection_config_endpoints.py"]}, {"commit_id": "956745d50abd9473f51a140484e6918ba088f0eb", "commit_date": "Tue Jul 11 07:02:31 2023 -0400", "commit_message": "move db-dependent routers up a few levels to reduce circular dependencies (#3741)", "files_name": ["CHANGELOG.md", "src/fides/api/api/v1/__init__.py", "src/fides/api/app_setup.py"]}, {"commit_id": "1fe9a0edb57aba65d425e8cb5e4d7e89f4862004", "commit_date": "Tue Jul 11 10:30:00 2023 -0400", "commit_message": "Adds polyfill service to fides-js route (#3759)", "files_name": ["CHANGELOG.md", "clients/privacy-center/pages/api/fides-js.ts"]}, {"commit_id": "fcc9f3e95c938f94e106e09a724fc40d7b0083d3", "commit_date": "Tue Jul 11 11:58:53 2023 -0400", "commit_message": "Fix creating and editing manual integrations (#3772)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParameters.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParametersForm.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/DSRCustomizationForm/DSRCustomizationModal.tsx"]}, {"commit_id": "53ce232eb5b72d06b773cbca66aaa831f91e9aa3", "commit_date": "Tue Jul 11 12:43:08 2023 -0400", "commit_message": "cascade deletes from system -> connectionconfig -> datasetconfig (#3771)", "files_name": ["CHANGELOG.md", "src/fides/api/models/connectionconfig.py", "src/fides/api/models/sql_models.py", "tests/ctl/core/test_api.py"]}, {"commit_id": "12dff1aa4425d2283b5461b3d54cd033789001a1", "commit_date": "Tue Jul 11 13:02:21 2023 -0400", "commit_message": "Enable privacy notices and experiences by default in production (#3773)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/flags.json"]}, {"commit_id": "10cebca618ea28ae4bda2594d9dfe79ad36d5a73", "commit_date": "Thu Jul 13 14:30:55 2023 +0800", "commit_message": "Refactor logging configuration (#3758)", "files_name": ["CHANGELOG.md", "docker-compose.yml", "src/fides/api/alembic/migrations/env.py", "src/fides/api/api/v1/endpoints/dataset_endpoints.py", "src/fides/api/app_setup.py", "src/fides/api/main.py", "src/fides/api/models/datasetconfig.py", "src/fides/api/util/data_category.py", "src/fides/api/util/logger.py", "src/fides/config/logging_settings.py", "tests/ctl/api/test_admin.py", "tests/ops/api/v1/endpoints/test_messaging_endpoints.py", "tests/ops/api/v1/endpoints/test_system.py"]}, {"commit_id": "369c78970e8491a1edd854cc14152189a41b59a0", "commit_date": "Thu Jul 13 11:55:43 2023 -0400", "commit_message": "Remove 'successfully added custom fields' toast (#3779)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/common/custom-fields/hooks.ts"]}, {"commit_id": "49fe64c43a0276ddb9efb5eecfaee84b53ef052a", "commit_date": "Thu Jul 13 13:52:44 2023 -0400", "commit_message": "Alphabetize system cards in \"view systems\" page (#3781)", "files_name": ["CHANGELOG.md", "clients/admin-ui/src/features/system/system.slice.ts"]}, {"commit_id": "dacba24db9f8be21e63332adef1da168df25c8ab", "commit_date": "Thu Jul 13 16:56:22 2023 -0500", "commit_message": "[Backend] Record when Consent is Served  (#3777)", "files_name": [".fides/db_dataset.yml", "CHANGELOG.md", "src/fides/api/alembic/migrations/versions/7c562441c589_track_notices_served.py", "src/fides/api/api/v1/endpoints/privacy_preference_endpoints.py", "src/fides/api/db/base.py", "src/fides/api/models/privacy_experience.py", "src/fides/api/models/privacy_notice.py", "src/fides/api/models/privacy_preference.py", "src/fides/api/schemas/privacy_notice.py", "src/fides/api/schemas/privacy_preference.py", "src/fides/api/util/consent_util.py", "src/fides/cli/options.py", "src/fides/common/api/v1/urn_registry.py", "tests/fixtures/application_fixtures.py", "tests/ops/api/v1/endpoints/test_privacy_experience_endpoints.py", "tests/ops/api/v1/endpoints/test_privacy_preference_endpoints.py", "tests/ops/models/test_privacy_preference.py"]}, {"commit_id": "55acc85e5c1be0a2ee9219f7e0e80e415383f25d", "commit_date": "Mon Jul 17 09:58:14 2023 -0400", "commit_message": "UI tabs for fides-js (#3782)", "files_name": ["CHANGELOG.md", "clients/fides-js/src/components/ConsentModal.tsx", "clients/fides-js/src/components/Overlay.tsx", "clients/fides-js/src/components/TcfTabs.tsx", "clients/fides-js/src/components/fides.css", "clients/fides-js/src/fides.ts", "clients/fides-js/src/lib/consent-types.ts", "clients/package-lock.json", "clients/privacy-center/app/server-environment.ts", "clients/privacy-center/pages/api/fides-js.ts", "clients/privacy-center/public/fides-js-components-demo.html"]}, {"commit_id": "ec70d25cb4cc1bfa6476ddabc88f998d11135393", "commit_date": "Mon Jul 17 11:23:28 2023 -0400", "commit_message": "Update TS types for privacy notice locations (#3787)", "files_name": ["CHANGELOG.md", "clients/admin-ui/cypress/fixtures/privacy-notices/list.json", "clients/admin-ui/cypress/fixtures/privacy-notices/notice.json", "clients/admin-ui/src/features/datastore-connections/ConnectionGridItem.tsx", "clients/admin-ui/src/features/datastore-connections/ConnectionTypeLogo.tsx", "clients/admin-ui/src/features/datastore-connections/add-connection/forms/ConnectorParametersForm.tsx", "clients/admin-ui/src/features/datastore-connections/add-connection/manual/ConnectorParametersForm.tsx", "clients/admin-ui/src/features/datastore-connections/system_portal_config/forms/ConnectorParametersForm.tsx", "clients/admin-ui/src/types/api/models/ConnectionConfigurationResponse.ts", "clients/admin-ui/src/types/api/models/ConsentMethod.ts", "clients/admin-ui/src/types/api/models/ConsentReportingSchema.ts", "clients/admin-ui/src/types/api/models/CreateConnectionConfigurationWithSecrets.ts", "clients/admin-ui/src/types/api/models/PrivacyNoticeRegion.ts", "clients/admin-ui/src/types/api/models/PrivacyPreferencesRequest.ts", "clients/admin-ui/src/types/api/models/SaasConnectionTemplateValues.ts"]}, {"commit_id": "e9aeaf041d36cd7bfa5fda6e84258e3942a8be50", "commit_date": "Mon Jul 17 22:15:49 2023 -0400", "commit_message": "fix broken build (`pyyaml` and `pymssql` issues related to `cython` version `3.0`) (#3802)", "files_name": ["requirements.txt", "tests/ctl/core/test_dataset.py"]}, {"commit_id": "aa76b4b786370cae73ab97d89f1dc8c197b461c0", "commit_date": "Tue Jul 18 10:33:07 2023 -0400", "commit_message": "show/hide connector values (#3775)", "files_name": []}], "parents": [{"commit_id_before": "1212eadf972fa9beed2908d377a3ee39e1f3d6f7", "url_before": "https://api.github.com/repos/ethyca/fides/commits/1212eadf972fa9beed2908d377a3ee39e1f3d6f7", "html_url_before": "https://github.com/ethyca/fides/commit/1212eadf972fa9beed2908d377a3ee39e1f3d6f7"}], "details": [{"raw_url": "https://github.com/ethyca/fides/raw/f526d9ffb176006d701493c9d0eff6b4884e811f/src%2Ffides%2Fapi%2Fcommon_exceptions.py", "code": "from __future__ import annotations\n\nfrom typing import List\n\nfrom fastapi import HTTPException, status\nfrom starlette.status import (\n    HTTP_400_BAD_REQUEST,\n    HTTP_401_UNAUTHORIZED,\n    HTTP_404_NOT_FOUND,\n)\n\nfrom fides.common.api.scope_registry import SCOPE_REGISTRY as SCOPES\n\n\nclass FidesopsException(Exception):\n    \"\"\"Base class for fidesops exceptions\"\"\"\n\n    def __init__(self, message: str, errors: List[str] = []):\n        super().__init__(message)\n        self.message = message\n        self.errors = errors\n\n\nclass TraversalError(FidesopsException):\n    \"\"\"Fidesops error with the names of all nodes that could not be reached.\"\"\"\n\n\nclass ValidationError(FidesopsException):\n    \"\"\"Data does not pass validation.\"\"\"\n\n\nclass StorageUploadError(FidesopsException):\n    \"\"\"Data cannot be uploaded to storage destination\"\"\"\n\n\nclass SystemManagerException(FidesopsException):\n    \"\"\"Exception class when there are errors making a systemmanager\"\"\"\n\n\nclass ConnectionException(FidesopsException):\n    \"\"\"Exception class when there are errors making a connection\"\"\"\n\n\nclass InsufficientDataException(FidesopsException):\n    \"\"\"Exception class when there is not sufficient data to proceed\"\"\"\n\n\nclass SkippingConsentPropagation(BaseException):\n    \"\"\"Skipping consent propagation for collection. Used to trigger \"skipped\" execution logs being created where applicable\n    for Privacy Preference requests on saas connectors.\n    \"\"\"\n\n\nclass RedisConnectionError(Exception):\n    \"\"\"The Configured Redis instance is uncontactable.\"\"\"\n\n\nclass MisconfiguredPolicyException(Exception):\n    \"\"\"Thrown when a Privacy Request cannot be processed due to a misconfigured Policy.\"\"\"\n\n\nclass PolicyValidationError(ValueError):\n    \"\"\"The policy you are trying to create has invalid data\"\"\"\n\n\nclass InvalidDataLengthValidationError(ValueError):\n    \"\"\"The length provided is invalid\"\"\"\n\n\nclass RuleValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"\n\n\nclass StorageConfigValidationError(ValueError):\n    \"\"\"The Storage Config you are trying to create has invalid data\"\"\"\n\n\nclass InvalidDataTypeValidationError(ValueError):\n    \"\"\"The specified data type is invalid.\"\"\"\n\n\nclass RuleTargetValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"\n\n\nclass DataCategoryNotSupported(ValueError):\n    \"\"\"The data category you have supplied is not supported.\"\"\"\n\n\nclass PolicyNotFoundException(Exception):\n    \"\"\"Policy could not be found\"\"\"\n\n\nclass ConnectorNotFoundException(Exception):\n    \"\"\"Connector could not be found\"\"\"\n\n\nclass DrpActionValidationError(Exception):\n    \"\"\"A resource already exists with this DRP Action.\"\"\"\n\n\nclass StorageConfigNotFoundException(BaseException):\n    \"\"\"Custom Exception - StorageConfig Not Found\"\"\"\n\n\nclass PrivacyNoticeHistoryNotFound(BaseException):\n    \"\"\"PrivacyNoticeHistory Not Found\"\"\"\n\n\nclass IdentityNotFoundException(BaseException):\n    \"\"\"Identity Not Found\"\"\"\n\n\nclass WebhookOrderException(BaseException):\n    \"\"\"Custom Exception - Issue with webhooks order\"\"\"\n\n\nclass PostProcessingException(BaseException):\n    \"\"\"Custom Exception - Issue with post processing\"\"\"\n\n\nclass CollectionDisabled(BaseException):\n    \"\"\"Collection is attached to disabled ConnectionConfig\"\"\"\n\n\nclass NotSupportedForCollection(BaseException):\n    \"\"\"The given action is not supported for this type of collection\"\"\"\n\n\nclass PrivacyRequestPaused(BaseException):\n    \"\"\"Halt Instruction Received on Privacy Request\"\"\"\n\n\nclass PrivacyRequestNotFound(BaseException):\n    \"\"\"Privacy Request Not Found\"\"\"\n\n\nclass NoCachedManualWebhookEntry(BaseException):\n    \"\"\"No manual data exists for this webhook on the given privacy request.\"\"\"\n\n\nclass ManualWebhookFieldsUnset(BaseException):\n    \"\"\"Manual webhook has fields that are not explicitly set: Likely new field has been added\"\"\"\n\n\nclass PrivacyRequestErasureEmailSendRequired(BaseException):\n    \"\"\"Erasure requests will need to be fulfilled by email send.  Exception is raised to change ExecutionLog details\"\"\"\n\n\nclass SaaSConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - SaaS Config Not Found\"\"\"\n\n\nclass MessagingConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - Messaging Config Not Found\"\"\"\n\n\nclass MessageDispatchException(FidesopsException):\n    \"\"\"Custom Exception - Message Dispatch Error\"\"\"\n\n\nclass EmailTemplateUnhandledActionType(FidesopsException):\n    \"\"\"Custom Exception - Email Template Unhandled ActionType Error\"\"\"\n\n\nclass OAuth2TokenException(FidesopsException):\n    \"\"\"Custom Exception - Unable to access or refresh OAuth2 tokens for SaaS connector\"\"\"\n\n\nclass AuthenticationFailure(HTTPException):\n    \"\"\"Wrapper for authentication failure exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_401_UNAUTHORIZED, detail=detail)\n\n\nclass BadRequest(HTTPException):\n    \"\"\"Wrapper for bad request exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_400_BAD_REQUEST, detail=detail)\n\n\nclass NotFoundException(HTTPException):\n    \"\"\"Wrapper for not found exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_404_NOT_FOUND, detail=detail)\n\n\nclass ClientUnsuccessfulException(FidesopsException):\n    \"\"\"Exception for when client call fails\"\"\"\n\n    def __init__(self, status_code: int):\n        super().__init__(message=f\"Client call failed with status code '{status_code}'\")\n\n\nclass NoSuchStrategyException(ValueError):\n    \"\"\"Exception for when a masking strategy does not exist\"\"\"\n\n\nclass FunctionalityNotConfigured(Exception):\n    \"\"\"Custom exception for when invoked functionality is unavailable due to configuration.\"\"\"\n\n\nclass InvalidSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a provied SaaS request override function is invalid\"\"\"\n\n\nclass NoSuchSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a requested SaaS request override function does not exist\"\"\"\n\n\nclass IdentityVerificationException(FidesopsException):\n    \"\"\"Custom exceptions for when we cannot verify the identity of a subjct\"\"\"\n\n\nclass NoSuchConnectionTypeSecretSchemaError(Exception):\n    \"\"\"Exception for when a connection type secret schema is not found.\"\"\"\n\n\nclass SSHTunnelConfigNotFoundException(Exception):\n    \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"\n\n\nclass MalisciousUrlException(Exception):\n    \"\"\"Fides has detected a potentially maliscious URL.\"\"\"\n\n\nclass AuthenticationError(HTTPException):\n    \"\"\"To be raised when attempting to fetch an access token using\n    invalid credentials.\n    \"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=detail,\n        )\n\n\nclass AuthorizationError(HTTPException):\n    \"\"\"Throws an HTTP 403\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        \"\"\"Override the regular HTTPException throwing only a 403\"\"\"\n        super().__init__(status_code=status.HTTP_403_FORBIDDEN, detail=detail)\n\n\nclass ClientWriteFailedError(HTTPException):\n    \"\"\"To be raised when a client cannot be created.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail=\"Failed to create client\",\n        )\n\n\nclass ClientNotFoundError(HTTPException):\n    \"\"\"To be raised when attempting to fetch a client that does not exist.\"\"\"\n\n    def __init__(self, client_id: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail={\n                \"error\": \"Client does not exist\",\n                \"id\": client_id,\n            },\n        )\n\n\nclass ExpiredTokenError(HTTPException):\n    \"\"\"To be raised when a provided token is expired.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"OAuth token expired\",\n        )\n\n\nclass InvalidAuthorizationSchemeError(HTTPException):\n    \"\"\"To be raised when attempting to authenticate with an unexpected\n    Authorization header value.\n    \"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Failed to authenticate\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n\nclass InvalidScopeError(HTTPException):\n    \"\"\"To be raised when a provided scope does not exist.\"\"\"\n\n    def __init__(self, invalid_scopes: list[str]) -> None:\n        SCOPES.sort()\n\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail={\n                \"error\": \"Invalid scope provided\",\n                \"invalid_scopes\": invalid_scopes,\n                \"valid_scopes\": SCOPES,\n            },\n        )\n\n\nclass KeyOrNameAlreadyExists(Exception):\n    \"\"\"A resource already exists with this key or name.\"\"\"\n\n\nclass KeyValidationError(Exception):\n    \"\"\"The resource you're trying to create has a key specified but not\n    a name specified.\n    \"\"\"\n\n\nclass MissingConfig(Exception):\n    \"\"\"Custom exception for when no valid configuration file is provided.\"\"\"\n", "code_before": "from __future__ import annotations\n\nfrom typing import List\n\nfrom fastapi import HTTPException, status\nfrom starlette.status import (\n    HTTP_400_BAD_REQUEST,\n    HTTP_401_UNAUTHORIZED,\n    HTTP_404_NOT_FOUND,\n)\n\nfrom fides.common.api.scope_registry import SCOPE_REGISTRY as SCOPES\n\n\nclass FidesopsException(Exception):\n    \"\"\"Base class for fidesops exceptions\"\"\"\n\n    def __init__(self, message: str, errors: List[str] = []):\n        super().__init__(message)\n        self.message = message\n        self.errors = errors\n\n\nclass TraversalError(FidesopsException):\n    \"\"\"Fidesops error with the names of all nodes that could not be reached.\"\"\"\n\n\nclass ValidationError(FidesopsException):\n    \"\"\"Data does not pass validation.\"\"\"\n\n\nclass StorageUploadError(FidesopsException):\n    \"\"\"Data cannot be uploaded to storage destination\"\"\"\n\n\nclass SystemManagerException(FidesopsException):\n    \"\"\"Exception class when there are errors making a systemmanager\"\"\"\n\n\nclass ConnectionException(FidesopsException):\n    \"\"\"Exception class when there are errors making a connection\"\"\"\n\n\nclass InsufficientDataException(FidesopsException):\n    \"\"\"Exception class when there is not sufficient data to proceed\"\"\"\n\n\nclass SkippingConsentPropagation(BaseException):\n    \"\"\"Skipping consent propagation for collection. Used to trigger \"skipped\" execution logs being created where applicable\n    for Privacy Preference requests on saas connectors.\n    \"\"\"\n\n\nclass RedisConnectionError(Exception):\n    \"\"\"The Configured Redis instance is uncontactable.\"\"\"\n\n\nclass MisconfiguredPolicyException(Exception):\n    \"\"\"Thrown when a Privacy Request cannot be processed due to a misconfigured Policy.\"\"\"\n\n\nclass PolicyValidationError(ValueError):\n    \"\"\"The policy you are trying to create has invalid data\"\"\"\n\n\nclass InvalidDataLengthValidationError(ValueError):\n    \"\"\"The length provided is invalid\"\"\"\n\n\nclass RuleValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"\n\n\nclass StorageConfigValidationError(ValueError):\n    \"\"\"The Storage Config you are trying to create has invalid data\"\"\"\n\n\nclass InvalidDataTypeValidationError(ValueError):\n    \"\"\"The specified data type is invalid.\"\"\"\n\n\nclass RuleTargetValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"\n\n\nclass DataCategoryNotSupported(ValueError):\n    \"\"\"The data category you have supplied is not supported.\"\"\"\n\n\nclass PolicyNotFoundException(Exception):\n    \"\"\"Policy could not be found\"\"\"\n\n\nclass ConnectorNotFoundException(Exception):\n    \"\"\"Connector could not be found\"\"\"\n\n\nclass DrpActionValidationError(Exception):\n    \"\"\"A resource already exists with this DRP Action.\"\"\"\n\n\nclass StorageConfigNotFoundException(BaseException):\n    \"\"\"Custom Exception - StorageConfig Not Found\"\"\"\n\n\nclass PrivacyNoticeHistoryNotFound(BaseException):\n    \"\"\"PrivacyNoticeHistory Not Found\"\"\"\n\n\nclass IdentityNotFoundException(BaseException):\n    \"\"\"Identity Not Found\"\"\"\n\n\nclass WebhookOrderException(BaseException):\n    \"\"\"Custom Exception - Issue with webhooks order\"\"\"\n\n\nclass PostProcessingException(BaseException):\n    \"\"\"Custom Exception - Issue with post processing\"\"\"\n\n\nclass CollectionDisabled(BaseException):\n    \"\"\"Collection is attached to disabled ConnectionConfig\"\"\"\n\n\nclass NotSupportedForCollection(BaseException):\n    \"\"\"The given action is not supported for this type of collection\"\"\"\n\n\nclass PrivacyRequestPaused(BaseException):\n    \"\"\"Halt Instruction Received on Privacy Request\"\"\"\n\n\nclass PrivacyRequestNotFound(BaseException):\n    \"\"\"Privacy Request Not Found\"\"\"\n\n\nclass NoCachedManualWebhookEntry(BaseException):\n    \"\"\"No manual data exists for this webhook on the given privacy request.\"\"\"\n\n\nclass ManualWebhookFieldsUnset(BaseException):\n    \"\"\"Manual webhook has fields that are not explicitly set: Likely new field has been added\"\"\"\n\n\nclass PrivacyRequestErasureEmailSendRequired(BaseException):\n    \"\"\"Erasure requests will need to be fulfilled by email send.  Exception is raised to change ExecutionLog details\"\"\"\n\n\nclass SaaSConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - SaaS Config Not Found\"\"\"\n\n\nclass MessagingConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - Messaging Config Not Found\"\"\"\n\n\nclass MessageDispatchException(FidesopsException):\n    \"\"\"Custom Exception - Message Dispatch Error\"\"\"\n\n\nclass EmailTemplateUnhandledActionType(FidesopsException):\n    \"\"\"Custom Exception - Email Template Unhandled ActionType Error\"\"\"\n\n\nclass OAuth2TokenException(FidesopsException):\n    \"\"\"Custom Exception - Unable to access or refresh OAuth2 tokens for SaaS connector\"\"\"\n\n\nclass AuthenticationFailure(HTTPException):\n    \"\"\"Wrapper for authentication failure exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_401_UNAUTHORIZED, detail=detail)\n\n\nclass BadRequest(HTTPException):\n    \"\"\"Wrapper for bad request exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_400_BAD_REQUEST, detail=detail)\n\n\nclass NotFoundException(HTTPException):\n    \"\"\"Wrapper for not found exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_404_NOT_FOUND, detail=detail)\n\n\nclass ClientUnsuccessfulException(FidesopsException):\n    \"\"\"Exception for when client call fails\"\"\"\n\n    def __init__(self, status_code: int):\n        super().__init__(message=f\"Client call failed with status code '{status_code}'\")\n\n\nclass NoSuchStrategyException(ValueError):\n    \"\"\"Exception for when a masking strategy does not exist\"\"\"\n\n\nclass FunctionalityNotConfigured(Exception):\n    \"\"\"Custom exception for when invoked functionality is unavailable due to configuration.\"\"\"\n\n\nclass InvalidSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a provied SaaS request override function is invalid\"\"\"\n\n\nclass NoSuchSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a requested SaaS request override function does not exist\"\"\"\n\n\nclass IdentityVerificationException(FidesopsException):\n    \"\"\"Custom exceptions for when we cannot verify the identity of a subjct\"\"\"\n\n\nclass NoSuchConnectionTypeSecretSchemaError(Exception):\n    \"\"\"Exception for when a connection type secret schema is not found.\"\"\"\n\n\nclass SSHTunnelConfigNotFoundException(Exception):\n    \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"\n\n\nclass AuthenticationError(HTTPException):\n    \"\"\"To be raised when attempting to fetch an access token using\n    invalid credentials.\n    \"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=detail,\n        )\n\n\nclass AuthorizationError(HTTPException):\n    \"\"\"Throws an HTTP 403\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        \"\"\"Override the regular HTTPException throwing only a 403\"\"\"\n        super().__init__(status_code=status.HTTP_403_FORBIDDEN, detail=detail)\n\n\nclass ClientWriteFailedError(HTTPException):\n    \"\"\"To be raised when a client cannot be created.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail=\"Failed to create client\",\n        )\n\n\nclass ClientNotFoundError(HTTPException):\n    \"\"\"To be raised when attempting to fetch a client that does not exist.\"\"\"\n\n    def __init__(self, client_id: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail={\n                \"error\": \"Client does not exist\",\n                \"id\": client_id,\n            },\n        )\n\n\nclass ExpiredTokenError(HTTPException):\n    \"\"\"To be raised when a provided token is expired.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"OAuth token expired\",\n        )\n\n\nclass InvalidAuthorizationSchemeError(HTTPException):\n    \"\"\"To be raised when attempting to authenticate with an unexpected\n    Authorization header value.\n    \"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Failed to authenticate\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n\nclass InvalidScopeError(HTTPException):\n    \"\"\"To be raised when a provided scope does not exist.\"\"\"\n\n    def __init__(self, invalid_scopes: list[str]) -> None:\n        SCOPES.sort()\n\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail={\n                \"error\": \"Invalid scope provided\",\n                \"invalid_scopes\": invalid_scopes,\n                \"valid_scopes\": SCOPES,\n            },\n        )\n\n\nclass KeyOrNameAlreadyExists(Exception):\n    \"\"\"A resource already exists with this key or name.\"\"\"\n\n\nclass KeyValidationError(Exception):\n    \"\"\"The resource you're trying to create has a key specified but not\n    a name specified.\n    \"\"\"\n\n\nclass MissingConfig(Exception):\n    \"\"\"Custom exception for when no valid configuration file is provided.\"\"\"\n", "patch": "@@ -223,6 +223,10 @@ class SSHTunnelConfigNotFoundException(Exception):\n     \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"\n \n \n+class MalisciousUrlException(Exception):\n+    \"\"\"Fides has detected a potentially maliscious URL.\"\"\"\n+\n+\n class AuthenticationError(HTTPException):\n     \"\"\"To be raised when attempting to fetch an access token using\n     invalid credentials.", "file_path": "files/2023_7/683", "file_language": "py", "file_name": "src/fides/api/common_exceptions.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "class FidesopsException(Exception):\n    \"\"\"Base class for fidesops exceptions\"\"\"\n\n    def __init__(self, message: str, errors: List[str] = []):\n        super().__init__(message)\n        self.message = message\n        self.errors = errors", "target": 0}, {"function": "class TraversalError(FidesopsException):\n    \"\"\"Fidesops error with the names of all nodes that could not be reached.\"\"\"", "target": 0}, {"function": "class ValidationError(FidesopsException):\n    \"\"\"Data does not pass validation.\"\"\"", "target": 0}, {"function": "class StorageUploadError(FidesopsException):\n    \"\"\"Data cannot be uploaded to storage destination\"\"\"", "target": 0}, {"function": "class SystemManagerException(FidesopsException):\n    \"\"\"Exception class when there are errors making a systemmanager\"\"\"", "target": 0}, {"function": "class ConnectionException(FidesopsException):\n    \"\"\"Exception class when there are errors making a connection\"\"\"", "target": 0}, {"function": "class InsufficientDataException(FidesopsException):\n    \"\"\"Exception class when there is not sufficient data to proceed\"\"\"", "target": 0}, {"function": "class SkippingConsentPropagation(BaseException):\n    \"\"\"Skipping consent propagation for collection. Used to trigger \"skipped\" execution logs being created where applicable\n    for Privacy Preference requests on saas connectors.\n    \"\"\"", "target": 0}, {"function": "class RedisConnectionError(Exception):\n    \"\"\"The Configured Redis instance is uncontactable.\"\"\"", "target": 0}, {"function": "class MisconfiguredPolicyException(Exception):\n    \"\"\"Thrown when a Privacy Request cannot be processed due to a misconfigured Policy.\"\"\"", "target": 0}, {"function": "class PolicyValidationError(ValueError):\n    \"\"\"The policy you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class InvalidDataLengthValidationError(ValueError):\n    \"\"\"The length provided is invalid\"\"\"", "target": 0}, {"function": "class RuleValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class StorageConfigValidationError(ValueError):\n    \"\"\"The Storage Config you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class InvalidDataTypeValidationError(ValueError):\n    \"\"\"The specified data type is invalid.\"\"\"", "target": 0}, {"function": "class RuleTargetValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class DataCategoryNotSupported(ValueError):\n    \"\"\"The data category you have supplied is not supported.\"\"\"", "target": 0}, {"function": "class PolicyNotFoundException(Exception):\n    \"\"\"Policy could not be found\"\"\"", "target": 0}, {"function": "class ConnectorNotFoundException(Exception):\n    \"\"\"Connector could not be found\"\"\"", "target": 0}, {"function": "class DrpActionValidationError(Exception):\n    \"\"\"A resource already exists with this DRP Action.\"\"\"", "target": 0}, {"function": "class StorageConfigNotFoundException(BaseException):\n    \"\"\"Custom Exception - StorageConfig Not Found\"\"\"", "target": 0}, {"function": "class PrivacyNoticeHistoryNotFound(BaseException):\n    \"\"\"PrivacyNoticeHistory Not Found\"\"\"", "target": 0}, {"function": "class IdentityNotFoundException(BaseException):\n    \"\"\"Identity Not Found\"\"\"", "target": 0}, {"function": "class WebhookOrderException(BaseException):\n    \"\"\"Custom Exception - Issue with webhooks order\"\"\"", "target": 0}, {"function": "class PostProcessingException(BaseException):\n    \"\"\"Custom Exception - Issue with post processing\"\"\"", "target": 0}, {"function": "class CollectionDisabled(BaseException):\n    \"\"\"Collection is attached to disabled ConnectionConfig\"\"\"", "target": 0}, {"function": "class NotSupportedForCollection(BaseException):\n    \"\"\"The given action is not supported for this type of collection\"\"\"", "target": 0}, {"function": "class PrivacyRequestPaused(BaseException):\n    \"\"\"Halt Instruction Received on Privacy Request\"\"\"", "target": 0}, {"function": "class PrivacyRequestNotFound(BaseException):\n    \"\"\"Privacy Request Not Found\"\"\"", "target": 0}, {"function": "class NoCachedManualWebhookEntry(BaseException):\n    \"\"\"No manual data exists for this webhook on the given privacy request.\"\"\"", "target": 0}, {"function": "class ManualWebhookFieldsUnset(BaseException):\n    \"\"\"Manual webhook has fields that are not explicitly set: Likely new field has been added\"\"\"", "target": 0}, {"function": "class PrivacyRequestErasureEmailSendRequired(BaseException):\n    \"\"\"Erasure requests will need to be fulfilled by email send.  Exception is raised to change ExecutionLog details\"\"\"", "target": 0}, {"function": "class SaaSConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - SaaS Config Not Found\"\"\"", "target": 0}, {"function": "class MessagingConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - Messaging Config Not Found\"\"\"", "target": 0}, {"function": "class MessageDispatchException(FidesopsException):\n    \"\"\"Custom Exception - Message Dispatch Error\"\"\"", "target": 0}, {"function": "class EmailTemplateUnhandledActionType(FidesopsException):\n    \"\"\"Custom Exception - Email Template Unhandled ActionType Error\"\"\"", "target": 0}, {"function": "class OAuth2TokenException(FidesopsException):\n    \"\"\"Custom Exception - Unable to access or refresh OAuth2 tokens for SaaS connector\"\"\"", "target": 0}, {"function": "class AuthenticationFailure(HTTPException):\n    \"\"\"Wrapper for authentication failure exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_401_UNAUTHORIZED, detail=detail)", "target": 0}, {"function": "class BadRequest(HTTPException):\n    \"\"\"Wrapper for bad request exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_400_BAD_REQUEST, detail=detail)", "target": 0}, {"function": "class NotFoundException(HTTPException):\n    \"\"\"Wrapper for not found exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_404_NOT_FOUND, detail=detail)", "target": 0}, {"function": "class ClientUnsuccessfulException(FidesopsException):\n    \"\"\"Exception for when client call fails\"\"\"\n\n    def __init__(self, status_code: int):\n        super().__init__(message=f\"Client call failed with status code '{status_code}'\")", "target": 0}, {"function": "class NoSuchStrategyException(ValueError):\n    \"\"\"Exception for when a masking strategy does not exist\"\"\"", "target": 0}, {"function": "class FunctionalityNotConfigured(Exception):\n    \"\"\"Custom exception for when invoked functionality is unavailable due to configuration.\"\"\"", "target": 0}, {"function": "class InvalidSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a provied SaaS request override function is invalid\"\"\"", "target": 0}, {"function": "class NoSuchSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a requested SaaS request override function does not exist\"\"\"", "target": 0}, {"function": "class IdentityVerificationException(FidesopsException):\n    \"\"\"Custom exceptions for when we cannot verify the identity of a subjct\"\"\"", "target": 0}, {"function": "class NoSuchConnectionTypeSecretSchemaError(Exception):\n    \"\"\"Exception for when a connection type secret schema is not found.\"\"\"", "target": 0}, {"function": "class SSHTunnelConfigNotFoundException(Exception):\n    \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"", "target": 0}, {"function": "class AuthenticationError(HTTPException):\n    \"\"\"To be raised when attempting to fetch an access token using\n    invalid credentials.\n    \"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=detail,\n        )", "target": 0}, {"function": "class AuthorizationError(HTTPException):\n    \"\"\"Throws an HTTP 403\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        \"\"\"Override the regular HTTPException throwing only a 403\"\"\"\n        super().__init__(status_code=status.HTTP_403_FORBIDDEN, detail=detail)", "target": 0}, {"function": "class ClientWriteFailedError(HTTPException):\n    \"\"\"To be raised when a client cannot be created.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail=\"Failed to create client\",\n        )", "target": 0}, {"function": "class ClientNotFoundError(HTTPException):\n    \"\"\"To be raised when attempting to fetch a client that does not exist.\"\"\"\n\n    def __init__(self, client_id: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail={\n                \"error\": \"Client does not exist\",\n                \"id\": client_id,\n            },\n        )", "target": 0}, {"function": "class ExpiredTokenError(HTTPException):\n    \"\"\"To be raised when a provided token is expired.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"OAuth token expired\",\n        )", "target": 0}, {"function": "class InvalidAuthorizationSchemeError(HTTPException):\n    \"\"\"To be raised when attempting to authenticate with an unexpected\n    Authorization header value.\n    \"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Failed to authenticate\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )", "target": 0}, {"function": "class InvalidScopeError(HTTPException):\n    \"\"\"To be raised when a provided scope does not exist.\"\"\"\n\n    def __init__(self, invalid_scopes: list[str]) -> None:\n        SCOPES.sort()\n\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail={\n                \"error\": \"Invalid scope provided\",\n                \"invalid_scopes\": invalid_scopes,\n                \"valid_scopes\": SCOPES,\n            },\n        )", "target": 0}, {"function": "class KeyOrNameAlreadyExists(Exception):\n    \"\"\"A resource already exists with this key or name.\"\"\"", "target": 0}, {"function": "class KeyValidationError(Exception):\n    \"\"\"The resource you're trying to create has a key specified but not\n    a name specified.\n    \"\"\"", "target": 0}, {"function": "class MissingConfig(Exception):\n    \"\"\"Custom exception for when no valid configuration file is provided.\"\"\"", "target": 0}], "function_after": [{"function": "class FidesopsException(Exception):\n    \"\"\"Base class for fidesops exceptions\"\"\"\n\n    def __init__(self, message: str, errors: List[str] = []):\n        super().__init__(message)\n        self.message = message\n        self.errors = errors", "target": 0}, {"function": "class TraversalError(FidesopsException):\n    \"\"\"Fidesops error with the names of all nodes that could not be reached.\"\"\"", "target": 0}, {"function": "class ValidationError(FidesopsException):\n    \"\"\"Data does not pass validation.\"\"\"", "target": 0}, {"function": "class StorageUploadError(FidesopsException):\n    \"\"\"Data cannot be uploaded to storage destination\"\"\"", "target": 0}, {"function": "class SystemManagerException(FidesopsException):\n    \"\"\"Exception class when there are errors making a systemmanager\"\"\"", "target": 0}, {"function": "class ConnectionException(FidesopsException):\n    \"\"\"Exception class when there are errors making a connection\"\"\"", "target": 0}, {"function": "class InsufficientDataException(FidesopsException):\n    \"\"\"Exception class when there is not sufficient data to proceed\"\"\"", "target": 0}, {"function": "class SkippingConsentPropagation(BaseException):\n    \"\"\"Skipping consent propagation for collection. Used to trigger \"skipped\" execution logs being created where applicable\n    for Privacy Preference requests on saas connectors.\n    \"\"\"", "target": 0}, {"function": "class RedisConnectionError(Exception):\n    \"\"\"The Configured Redis instance is uncontactable.\"\"\"", "target": 0}, {"function": "class MisconfiguredPolicyException(Exception):\n    \"\"\"Thrown when a Privacy Request cannot be processed due to a misconfigured Policy.\"\"\"", "target": 0}, {"function": "class PolicyValidationError(ValueError):\n    \"\"\"The policy you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class InvalidDataLengthValidationError(ValueError):\n    \"\"\"The length provided is invalid\"\"\"", "target": 0}, {"function": "class RuleValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class StorageConfigValidationError(ValueError):\n    \"\"\"The Storage Config you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class InvalidDataTypeValidationError(ValueError):\n    \"\"\"The specified data type is invalid.\"\"\"", "target": 0}, {"function": "class RuleTargetValidationError(ValueError):\n    \"\"\"The Rule you are trying to create has invalid data\"\"\"", "target": 0}, {"function": "class DataCategoryNotSupported(ValueError):\n    \"\"\"The data category you have supplied is not supported.\"\"\"", "target": 0}, {"function": "class PolicyNotFoundException(Exception):\n    \"\"\"Policy could not be found\"\"\"", "target": 0}, {"function": "class ConnectorNotFoundException(Exception):\n    \"\"\"Connector could not be found\"\"\"", "target": 0}, {"function": "class DrpActionValidationError(Exception):\n    \"\"\"A resource already exists with this DRP Action.\"\"\"", "target": 0}, {"function": "class StorageConfigNotFoundException(BaseException):\n    \"\"\"Custom Exception - StorageConfig Not Found\"\"\"", "target": 0}, {"function": "class PrivacyNoticeHistoryNotFound(BaseException):\n    \"\"\"PrivacyNoticeHistory Not Found\"\"\"", "target": 0}, {"function": "class IdentityNotFoundException(BaseException):\n    \"\"\"Identity Not Found\"\"\"", "target": 0}, {"function": "class WebhookOrderException(BaseException):\n    \"\"\"Custom Exception - Issue with webhooks order\"\"\"", "target": 0}, {"function": "class PostProcessingException(BaseException):\n    \"\"\"Custom Exception - Issue with post processing\"\"\"", "target": 0}, {"function": "class CollectionDisabled(BaseException):\n    \"\"\"Collection is attached to disabled ConnectionConfig\"\"\"", "target": 0}, {"function": "class NotSupportedForCollection(BaseException):\n    \"\"\"The given action is not supported for this type of collection\"\"\"", "target": 0}, {"function": "class PrivacyRequestPaused(BaseException):\n    \"\"\"Halt Instruction Received on Privacy Request\"\"\"", "target": 0}, {"function": "class PrivacyRequestNotFound(BaseException):\n    \"\"\"Privacy Request Not Found\"\"\"", "target": 0}, {"function": "class NoCachedManualWebhookEntry(BaseException):\n    \"\"\"No manual data exists for this webhook on the given privacy request.\"\"\"", "target": 0}, {"function": "class ManualWebhookFieldsUnset(BaseException):\n    \"\"\"Manual webhook has fields that are not explicitly set: Likely new field has been added\"\"\"", "target": 0}, {"function": "class PrivacyRequestErasureEmailSendRequired(BaseException):\n    \"\"\"Erasure requests will need to be fulfilled by email send.  Exception is raised to change ExecutionLog details\"\"\"", "target": 0}, {"function": "class SaaSConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - SaaS Config Not Found\"\"\"", "target": 0}, {"function": "class MessagingConfigNotFoundException(FidesopsException):\n    \"\"\"Custom Exception - Messaging Config Not Found\"\"\"", "target": 0}, {"function": "class MessageDispatchException(FidesopsException):\n    \"\"\"Custom Exception - Message Dispatch Error\"\"\"", "target": 0}, {"function": "class EmailTemplateUnhandledActionType(FidesopsException):\n    \"\"\"Custom Exception - Email Template Unhandled ActionType Error\"\"\"", "target": 0}, {"function": "class OAuth2TokenException(FidesopsException):\n    \"\"\"Custom Exception - Unable to access or refresh OAuth2 tokens for SaaS connector\"\"\"", "target": 0}, {"function": "class AuthenticationFailure(HTTPException):\n    \"\"\"Wrapper for authentication failure exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_401_UNAUTHORIZED, detail=detail)", "target": 0}, {"function": "class BadRequest(HTTPException):\n    \"\"\"Wrapper for bad request exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_400_BAD_REQUEST, detail=detail)", "target": 0}, {"function": "class NotFoundException(HTTPException):\n    \"\"\"Wrapper for not found exception\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(status_code=HTTP_404_NOT_FOUND, detail=detail)", "target": 0}, {"function": "class ClientUnsuccessfulException(FidesopsException):\n    \"\"\"Exception for when client call fails\"\"\"\n\n    def __init__(self, status_code: int):\n        super().__init__(message=f\"Client call failed with status code '{status_code}'\")", "target": 0}, {"function": "class NoSuchStrategyException(ValueError):\n    \"\"\"Exception for when a masking strategy does not exist\"\"\"", "target": 0}, {"function": "class FunctionalityNotConfigured(Exception):\n    \"\"\"Custom exception for when invoked functionality is unavailable due to configuration.\"\"\"", "target": 0}, {"function": "class InvalidSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a provied SaaS request override function is invalid\"\"\"", "target": 0}, {"function": "class NoSuchSaaSRequestOverrideException(ValueError):\n    \"\"\"Exception for when a requested SaaS request override function does not exist\"\"\"", "target": 0}, {"function": "class IdentityVerificationException(FidesopsException):\n    \"\"\"Custom exceptions for when we cannot verify the identity of a subjct\"\"\"", "target": 0}, {"function": "class NoSuchConnectionTypeSecretSchemaError(Exception):\n    \"\"\"Exception for when a connection type secret schema is not found.\"\"\"", "target": 0}, {"function": "class SSHTunnelConfigNotFoundException(Exception):\n    \"\"\"Exception for when Fides is configured to use an SSH tunnel without config provided.\"\"\"", "target": 0}, {"function": "class MalisciousUrlException(Exception):\n    \"\"\"Fides has detected a potentially maliscious URL.\"\"\"", "target": 0}, {"function": "class AuthenticationError(HTTPException):\n    \"\"\"To be raised when attempting to fetch an access token using\n    invalid credentials.\n    \"\"\"\n\n    def __init__(self, detail: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=detail,\n        )", "target": 0}, {"function": "class AuthorizationError(HTTPException):\n    \"\"\"Throws an HTTP 403\"\"\"\n\n    def __init__(self, detail: str) -> None:\n        \"\"\"Override the regular HTTPException throwing only a 403\"\"\"\n        super().__init__(status_code=status.HTTP_403_FORBIDDEN, detail=detail)", "target": 0}, {"function": "class ClientWriteFailedError(HTTPException):\n    \"\"\"To be raised when a client cannot be created.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail=\"Failed to create client\",\n        )", "target": 0}, {"function": "class ClientNotFoundError(HTTPException):\n    \"\"\"To be raised when attempting to fetch a client that does not exist.\"\"\"\n\n    def __init__(self, client_id: str) -> None:\n        super().__init__(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail={\n                \"error\": \"Client does not exist\",\n                \"id\": client_id,\n            },\n        )", "target": 0}, {"function": "class ExpiredTokenError(HTTPException):\n    \"\"\"To be raised when a provided token is expired.\"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"OAuth token expired\",\n        )", "target": 0}, {"function": "class InvalidAuthorizationSchemeError(HTTPException):\n    \"\"\"To be raised when attempting to authenticate with an unexpected\n    Authorization header value.\n    \"\"\"\n\n    def __init__(self) -> None:\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Failed to authenticate\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )", "target": 0}, {"function": "class InvalidScopeError(HTTPException):\n    \"\"\"To be raised when a provided scope does not exist.\"\"\"\n\n    def __init__(self, invalid_scopes: list[str]) -> None:\n        SCOPES.sort()\n\n        super().__init__(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            detail={\n                \"error\": \"Invalid scope provided\",\n                \"invalid_scopes\": invalid_scopes,\n                \"valid_scopes\": SCOPES,\n            },\n        )", "target": 0}, {"function": "class KeyOrNameAlreadyExists(Exception):\n    \"\"\"A resource already exists with this key or name.\"\"\"", "target": 0}, {"function": "class KeyValidationError(Exception):\n    \"\"\"The resource you're trying to create has a key specified but not\n    a name specified.\n    \"\"\"", "target": 0}, {"function": "class MissingConfig(Exception):\n    \"\"\"Custom exception for when no valid configuration file is provided.\"\"\"", "target": 0}]}, {"raw_url": "https://github.com/ethyca/fides/raw/f526d9ffb176006d701493c9d0eff6b4884e811f/src%2Ffides%2Fapi%2Fmain.py", "code": "\"\"\"\nContains the code that sets up the API.\n\"\"\"\nimport os\nimport sys\nfrom datetime import datetime, timezone\nfrom logging import WARNING\nfrom typing import Callable, Optional\n\nfrom fastapi import HTTPException, Request, Response, status\nfrom fastapi.responses import FileResponse\nfrom fideslog.sdk.python.event import AnalyticsEvent\nfrom loguru import logger\nfrom starlette.background import BackgroundTask\nfrom urllib.parse import unquote\nfrom uvicorn import Config, Server\n\nimport fides\nfrom fides.api.app_setup import (\n    check_redis,\n    create_fides_app,\n    log_startup,\n    run_database_startup,\n)\nfrom fides.api.common_exceptions import MalisciousUrlException\nfrom fides.api.middleware import handle_audit_log_resource\nfrom fides.api.schemas.analytics import Event, ExtraData\n\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom fides.api.service.privacy_request.email_batch_service import (\n    initiate_scheduled_batch_email_send,\n)\nfrom fides.api.tasks.scheduled.scheduler import scheduler\nfrom fides.api.ui import (\n    get_admin_index_as_response,\n    get_path_to_admin_ui_file,\n    get_ui_file_map,\n    match_route,\n    path_is_in_ui_directory,\n)\nfrom fides.api.util.endpoint_utils import API_PREFIX\nfrom fides.api.util.logger import _log_exception\nfrom fides.cli.utils import FIDES_ASCII_ART\nfrom fides.config import CONFIG, check_required_webserver_config_values\n\nIGNORED_AUDIT_LOG_RESOURCE_PATHS = {\"/api/v1/login\"}\n\nVERSION = fides.__version__\n\napp = create_fides_app()\n\n\n@app.middleware(\"http\")\nasync def dispatch_log_request(request: Request, call_next: Callable) -> Response:\n    \"\"\"\n    HTTP Middleware that logs analytics events for each call to Fides endpoints.\n    :param request: Request to Fides api\n    :param call_next: Callable api endpoint\n    :return: Response\n    \"\"\"\n\n    # Only log analytics events for requests that are for API endpoints (i.e. /api/...)\n    path = request.url.path\n    if (not path.startswith(API_PREFIX)) or (path.endswith(\"/health\")):\n        return await call_next(request)\n\n    fides_source: Optional[str] = request.headers.get(\"X-Fides-Source\")\n    now: datetime = datetime.now(tz=timezone.utc)\n    endpoint = f\"{request.method}: {request.url}\"\n\n    try:\n        response = await call_next(request)\n        # HTTPExceptions are considered a handled err by default so are not thrown here.\n        # Accepted workaround is to inspect status code of response.\n        # More context- https://github.com/tiangolo/fastapi/issues/1840\n        response.background = BackgroundTask(\n            prepare_and_log_request,\n            endpoint,\n            request.url.hostname,\n            response.status_code,\n            now,\n            fides_source,\n            \"HTTPException\" if response.status_code >= 400 else None,\n        )\n        return response\n\n    except Exception as e:\n        await prepare_and_log_request(\n            endpoint, request.url.hostname, 500, now, fides_source, e.__class__.__name__\n        )\n        _log_exception(e, CONFIG.dev_mode)\n        raise\n\n\nasync def prepare_and_log_request(\n    endpoint: str,\n    hostname: Optional[str],\n    status_code: int,\n    event_created_at: datetime,\n    fides_source: Optional[str],\n    error_class: Optional[str],\n) -> None:\n    \"\"\"\n    Prepares and sends analytics event provided the user is not opted out of analytics.\n    \"\"\"\n    # Avoid circular imports\n    from fides.api.analytics import (\n        accessed_through_local_host,\n        in_docker_container,\n        send_analytics_event,\n    )\n\n    # this check prevents AnalyticsEvent from being called with invalid endpoint during unit tests\n    if CONFIG.user.analytics_opt_out:\n        return\n    await send_analytics_event(\n        AnalyticsEvent(\n            docker=in_docker_container(),\n            event=Event.endpoint_call.value,\n            event_created_at=event_created_at,\n            local_host=accessed_through_local_host(hostname),\n            endpoint=endpoint,\n            status_code=status_code,\n            error=error_class or None,\n            extra_data={ExtraData.fides_source.value: fides_source}\n            if fides_source\n            else None,\n        )\n    )\n\n\n@app.middleware(\"http\")\nasync def log_request(request: Request, call_next: Callable) -> Response:\n    \"\"\"Log basic information about every request handled by the server.\"\"\"\n    start = datetime.now()\n    response = await call_next(request)\n    handler_time = datetime.now() - start\n    logger.bind(\n        method=request.method,\n        status_code=response.status_code,\n        handler_time=f\"{round(handler_time.microseconds * 0.001,3)}ms\",\n        path=request.url.path,\n    ).info(\"Request received\")\n    return response\n\n\n# Configure the static file paths last since otherwise it will take over all paths\n@app.get(\"/\", tags=[\"Default\"])\ndef read_index() -> Response:\n    \"\"\"\n    Return an index.html at the root path\n    \"\"\"\n\n    return get_admin_index_as_response()\n\n\ndef sanitise_url_path(path: str) -> str:\n    \"\"\"Returns a URL path that does not contain any ../ or //\"\"\"\n    path = unquote(path)\n    path = os.path.normpath(path)\n    for token in path.split(\"/\"):\n        if \"..\" in token:\n            logger.warning(f\"Potentially dangerous use of URL hierarchy in path: {path}\")\n            raise MalisciousUrlException()\n    return path\n\n\n@app.get(\"/{catchall:path}\", response_class=Response, tags=[\"Default\"])\ndef read_other_paths(request: Request) -> Response:\n    \"\"\"\n    Return related frontend files. Adapted from https://github.com/tiangolo/fastapi/issues/130\n    \"\"\"\n    # check first if requested file exists (for frontend assets)\n    path = request.path_params[\"catchall\"]\n    logger.debug(f\"Catch all path detected: {path}\")\n    try:\n        path = sanitise_url_path(path)\n    except MalisciousUrlException:\n        # if a maliscious URL is detected, route the user to the index\n        return get_admin_index_as_response()\n\n    # search for matching route in package (i.e. /dataset)\n    ui_file = match_route(get_ui_file_map(), path)\n\n    # if not, check if the requested file is an asset (i.e. /_next/static/...)\n    if not ui_file:\n        ui_file = get_path_to_admin_ui_file(path)\n\n    # Serve up the file as long as it is within the UI directory\n    if ui_file and ui_file.is_file():\n        if not path_is_in_ui_directory(ui_file):\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND, detail=\"Item not found\"\n            )\n        logger.debug(\n            \"catchall request path '{}' matched static admin UI file: {}\",\n            path,\n            ui_file,\n        )\n        return FileResponse(ui_file)\n\n    # raise 404 for anything that should be backend endpoint but we can't find it\n    if path.startswith(API_PREFIX[1:]):\n        logger.debug(\n            \"catchall request path '{}' matched an invalid API route, return 404\",\n            path,\n        )\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Item not found\"\n        )\n\n    # otherwise return the index\n    logger.debug(\n        \"catchall request path '{}' did not match any admin UI routes, return generic admin UI index\",\n        path,\n    )\n    return get_admin_index_as_response()\n\n\n@app.on_event(\"startup\")\nasync def setup_server() -> None:\n    \"\"\"Run all of the required setup steps for the webserver.\n\n    **NOTE**: The order of operations here _is_ deliberate\n    and must be maintained.\n    \"\"\"\n    if not CONFIG.dev_mode:\n        sys.tracebacklimit = 0\n\n    log_startup()\n\n    await run_database_startup()\n\n    check_redis()\n\n    if not scheduler.running:\n        scheduler.start()\n\n    initiate_scheduled_batch_email_send()\n\n    logger.debug(\"Sending startup analytics events...\")\n    # Avoid circular imports\n    from fides.api.analytics import in_docker_container, send_analytics_event\n\n    await send_analytics_event(\n        AnalyticsEvent(\n            docker=in_docker_container(),\n            event=Event.server_start.value,\n            event_created_at=datetime.now(tz=timezone.utc),\n        )\n    )\n\n    logger.info(FIDES_ASCII_ART)\n    logger.info(f\"Fides startup complete! v{VERSION}\")\n\n\ndef start_webserver(port: int = 8080) -> None:\n    \"\"\"Run the webserver.\"\"\"\n    check_required_webserver_config_values(config=CONFIG)\n    server = Server(Config(app, host=\"0.0.0.0\", port=port, log_level=WARNING))\n\n    logger.info(\n        \"Starting webserver - Host: {}, Port: {}, Log Level: {}\",\n        server.config.host,\n        server.config.port,\n        server.config.log_level,\n    )\n    server.run()\n\n\n@app.middleware(\"http\")\nasync def action_to_audit_log(\n    request: Request,\n    call_next: Callable,\n) -> Response:\n    \"\"\"Log basic information about every non-GET request handled by the server.\"\"\"\n\n    if (\n        request.method != \"GET\"\n        and request.scope[\"path\"] not in IGNORED_AUDIT_LOG_RESOURCE_PATHS\n        and CONFIG.security.enable_audit_log_resource_middleware\n    ):\n        try:\n            await handle_audit_log_resource(request)\n        except Exception as exc:\n            logger.debug(exc)\n    return await call_next(request)\n", "code_before": "\"\"\"\nContains the code that sets up the API.\n\"\"\"\nimport sys\nfrom datetime import datetime, timezone\nfrom logging import WARNING\nfrom typing import Callable, Optional\n\nfrom fastapi import HTTPException, Request, Response, status\nfrom fastapi.responses import FileResponse\nfrom fideslog.sdk.python.event import AnalyticsEvent\nfrom loguru import logger\nfrom starlette.background import BackgroundTask\nfrom uvicorn import Config, Server\n\nimport fides\nfrom fides.api.app_setup import (\n    check_redis,\n    create_fides_app,\n    log_startup,\n    run_database_startup,\n)\nfrom fides.api.middleware import handle_audit_log_resource\nfrom fides.api.schemas.analytics import Event, ExtraData\n\n# pylint: disable=wildcard-import, unused-wildcard-import\nfrom fides.api.service.privacy_request.email_batch_service import (\n    initiate_scheduled_batch_email_send,\n)\nfrom fides.api.tasks.scheduled.scheduler import scheduler\nfrom fides.api.ui import (\n    get_admin_index_as_response,\n    get_path_to_admin_ui_file,\n    get_ui_file_map,\n    match_route,\n    path_is_in_ui_directory,\n)\nfrom fides.api.util.endpoint_utils import API_PREFIX\nfrom fides.api.util.logger import _log_exception\nfrom fides.cli.utils import FIDES_ASCII_ART\nfrom fides.config import CONFIG, check_required_webserver_config_values\n\nIGNORED_AUDIT_LOG_RESOURCE_PATHS = {\"/api/v1/login\"}\n\nVERSION = fides.__version__\n\napp = create_fides_app()\n\n\n@app.middleware(\"http\")\nasync def dispatch_log_request(request: Request, call_next: Callable) -> Response:\n    \"\"\"\n    HTTP Middleware that logs analytics events for each call to Fides endpoints.\n    :param request: Request to Fides api\n    :param call_next: Callable api endpoint\n    :return: Response\n    \"\"\"\n\n    # Only log analytics events for requests that are for API endpoints (i.e. /api/...)\n    path = request.url.path\n    if (not path.startswith(API_PREFIX)) or (path.endswith(\"/health\")):\n        return await call_next(request)\n\n    fides_source: Optional[str] = request.headers.get(\"X-Fides-Source\")\n    now: datetime = datetime.now(tz=timezone.utc)\n    endpoint = f\"{request.method}: {request.url}\"\n\n    try:\n        response = await call_next(request)\n        # HTTPExceptions are considered a handled err by default so are not thrown here.\n        # Accepted workaround is to inspect status code of response.\n        # More context- https://github.com/tiangolo/fastapi/issues/1840\n        response.background = BackgroundTask(\n            prepare_and_log_request,\n            endpoint,\n            request.url.hostname,\n            response.status_code,\n            now,\n            fides_source,\n            \"HTTPException\" if response.status_code >= 400 else None,\n        )\n        return response\n\n    except Exception as e:\n        await prepare_and_log_request(\n            endpoint, request.url.hostname, 500, now, fides_source, e.__class__.__name__\n        )\n        _log_exception(e, CONFIG.dev_mode)\n        raise\n\n\nasync def prepare_and_log_request(\n    endpoint: str,\n    hostname: Optional[str],\n    status_code: int,\n    event_created_at: datetime,\n    fides_source: Optional[str],\n    error_class: Optional[str],\n) -> None:\n    \"\"\"\n    Prepares and sends analytics event provided the user is not opted out of analytics.\n    \"\"\"\n    # Avoid circular imports\n    from fides.api.analytics import (\n        accessed_through_local_host,\n        in_docker_container,\n        send_analytics_event,\n    )\n\n    # this check prevents AnalyticsEvent from being called with invalid endpoint during unit tests\n    if CONFIG.user.analytics_opt_out:\n        return\n    await send_analytics_event(\n        AnalyticsEvent(\n            docker=in_docker_container(),\n            event=Event.endpoint_call.value,\n            event_created_at=event_created_at,\n            local_host=accessed_through_local_host(hostname),\n            endpoint=endpoint,\n            status_code=status_code,\n            error=error_class or None,\n            extra_data={ExtraData.fides_source.value: fides_source}\n            if fides_source\n            else None,\n        )\n    )\n\n\n@app.middleware(\"http\")\nasync def log_request(request: Request, call_next: Callable) -> Response:\n    \"\"\"Log basic information about every request handled by the server.\"\"\"\n    start = datetime.now()\n    response = await call_next(request)\n    handler_time = datetime.now() - start\n    logger.bind(\n        method=request.method,\n        status_code=response.status_code,\n        handler_time=f\"{round(handler_time.microseconds * 0.001,3)}ms\",\n        path=request.url.path,\n    ).info(\"Request received\")\n    return response\n\n\n# Configure the static file paths last since otherwise it will take over all paths\n@app.get(\"/\", tags=[\"Default\"])\ndef read_index() -> Response:\n    \"\"\"\n    Return an index.html at the root path\n    \"\"\"\n\n    return get_admin_index_as_response()\n\n\n@app.get(\"/{catchall:path}\", response_class=Response, tags=[\"Default\"])\ndef read_other_paths(request: Request) -> Response:\n    \"\"\"\n    Return related frontend files. Adapted from https://github.com/tiangolo/fastapi/issues/130\n    \"\"\"\n    # check first if requested file exists (for frontend assets)\n    path = request.path_params[\"catchall\"]\n\n    # search for matching route in package (i.e. /dataset)\n    ui_file = match_route(get_ui_file_map(), path)\n\n    # if not, check if the requested file is an asset (i.e. /_next/static/...)\n    if not ui_file:\n        ui_file = get_path_to_admin_ui_file(path)\n\n    # Serve up the file as long as it is within the UI directory\n    if ui_file and ui_file.is_file():\n        if not path_is_in_ui_directory(ui_file):\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND, detail=\"Item not found\"\n            )\n        logger.debug(\n            \"catchall request path '{}' matched static admin UI file: {}\",\n            path,\n            ui_file,\n        )\n        return FileResponse(ui_file)\n\n    # raise 404 for anything that should be backend endpoint but we can't find it\n    if path.startswith(API_PREFIX[1:]):\n        logger.debug(\n            \"catchall request path '{}' matched an invalid API route, return 404\",\n            path,\n        )\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Item not found\"\n        )\n\n    # otherwise return the index\n    logger.debug(\n        \"catchall request path '{}' did not match any admin UI routes, return generic admin UI index\",\n        path,\n    )\n    return get_admin_index_as_response()\n\n\n@app.on_event(\"startup\")\nasync def setup_server() -> None:\n    \"\"\"Run all of the required setup steps for the webserver.\n\n    **NOTE**: The order of operations here _is_ deliberate\n    and must be maintained.\n    \"\"\"\n    if not CONFIG.dev_mode:\n        sys.tracebacklimit = 0\n\n    log_startup()\n\n    await run_database_startup()\n\n    check_redis()\n\n    if not scheduler.running:\n        scheduler.start()\n\n    initiate_scheduled_batch_email_send()\n\n    logger.debug(\"Sending startup analytics events...\")\n    # Avoid circular imports\n    from fides.api.analytics import in_docker_container, send_analytics_event\n\n    await send_analytics_event(\n        AnalyticsEvent(\n            docker=in_docker_container(),\n            event=Event.server_start.value,\n            event_created_at=datetime.now(tz=timezone.utc),\n        )\n    )\n\n    logger.info(FIDES_ASCII_ART)\n    logger.info(f\"Fides startup complete! v{VERSION}\")\n\n\ndef start_webserver(port: int = 8080) -> None:\n    \"\"\"Run the webserver.\"\"\"\n    check_required_webserver_config_values(config=CONFIG)\n    server = Server(Config(app, host=\"0.0.0.0\", port=port, log_level=WARNING))\n\n    logger.info(\n        \"Starting webserver - Host: {}, Port: {}, Log Level: {}\",\n        server.config.host,\n        server.config.port,\n        server.config.log_level,\n    )\n    server.run()\n\n\n@app.middleware(\"http\")\nasync def action_to_audit_log(\n    request: Request,\n    call_next: Callable,\n) -> Response:\n    \"\"\"Log basic information about every non-GET request handled by the server.\"\"\"\n\n    if (\n        request.method != \"GET\"\n        and request.scope[\"path\"] not in IGNORED_AUDIT_LOG_RESOURCE_PATHS\n        and CONFIG.security.enable_audit_log_resource_middleware\n    ):\n        try:\n            await handle_audit_log_resource(request)\n        except Exception as exc:\n            logger.debug(exc)\n    return await call_next(request)\n", "patch": "@@ -1,6 +1,7 @@\n \"\"\"\n Contains the code that sets up the API.\n \"\"\"\n+import os\n import sys\n from datetime import datetime, timezone\n from logging import WARNING\n@@ -11,6 +12,7 @@\n from fideslog.sdk.python.event import AnalyticsEvent\n from loguru import logger\n from starlette.background import BackgroundTask\n+from urllib.parse import unquote\n from uvicorn import Config, Server\n \n import fides\n@@ -20,6 +22,7 @@\n     log_startup,\n     run_database_startup,\n )\n+from fides.api.common_exceptions import MalisciousUrlException\n from fides.api.middleware import handle_audit_log_resource\n from fides.api.schemas.analytics import Event, ExtraData\n \n@@ -151,13 +154,30 @@ def read_index() -> Response:\n     return get_admin_index_as_response()\n \n \n+def sanitise_url_path(path: str) -> str:\n+    \"\"\"Returns a URL path that does not contain any ../ or //\"\"\"\n+    path = unquote(path)\n+    path = os.path.normpath(path)\n+    for token in path.split(\"/\"):\n+        if \"..\" in token:\n+            logger.warning(f\"Potentially dangerous use of URL hierarchy in path: {path}\")\n+            raise MalisciousUrlException()\n+    return path\n+\n+\n @app.get(\"/{catchall:path}\", response_class=Response, tags=[\"Default\"])\n def read_other_paths(request: Request) -> Response:\n     \"\"\"\n     Return related frontend files. Adapted from https://github.com/tiangolo/fastapi/issues/130\n     \"\"\"\n     # check first if requested file exists (for frontend assets)\n     path = request.path_params[\"catchall\"]\n+    logger.debug(f\"Catch all path detected: {path}\")\n+    try:\n+        path = sanitise_url_path(path)\n+    except MalisciousUrlException:\n+        # if a maliscious URL is detected, route the user to the index\n+        return get_admin_index_as_response()\n \n     # search for matching route in package (i.e. /dataset)\n     ui_file = match_route(get_ui_file_map(), path)", "file_path": "files/2023_7/684", "file_language": "py", "file_name": "src/fides/api/main.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "async def prepare_and_log_request(\n    endpoint: str,\n    hostname: Optional[str],\n    status_code: int,\n    event_created_at: datetime,\n    fides_source: Optional[str],\n    error_class: Optional[str],\n) -> None:\n    \"\"\"\n    Prepares and sends analytics event provided the user is not opted out of analytics.\n    \"\"\"\n    # Avoid circular imports\n    from fides.api.analytics import (\n        accessed_through_local_host,\n        in_docker_container,\n        send_analytics_event,\n    )\n\n    # this check prevents AnalyticsEvent from being called with invalid endpoint during unit tests\n    if CONFIG.user.analytics_opt_out:\n        return\n    await send_analytics_event(\n        AnalyticsEvent(\n            docker=in_docker_container(),\n            event=Event.endpoint_call.value,\n            event_created_at=event_created_at,\n            local_host=accessed_through_local_host(hostname),\n            endpoint=endpoint,\n            status_code=status_code,\n            error=error_class or None,\n            extra_data={ExtraData.fides_source.value: fides_source}\n            if fides_source\n            else None,\n        )\n    )", "target": 0}, {"function": "def start_webserver(port: int = 8080) -> None:\n    \"\"\"Run the webserver.\"\"\"\n    check_required_webserver_config_values(config=CONFIG)\n    server = Server(Config(app, host=\"0.0.0.0\", port=port, log_level=WARNING))\n\n    logger.info(\n        \"Starting webserver - Host: {}, Port: {}, Log Level: {}\",\n        server.config.host,\n        server.config.port,\n        server.config.log_level,\n    )\n    server.run()", "target": 0}], "function_after": [{"function": "async def prepare_and_log_request(\n    endpoint: str,\n    hostname: Optional[str],\n    status_code: int,\n    event_created_at: datetime,\n    fides_source: Optional[str],\n    error_class: Optional[str],\n) -> None:\n    \"\"\"\n    Prepares and sends analytics event provided the user is not opted out of analytics.\n    \"\"\"\n    # Avoid circular imports\n    from fides.api.analytics import (\n        accessed_through_local_host,\n        in_docker_container,\n        send_analytics_event,\n    )\n\n    # this check prevents AnalyticsEvent from being called with invalid endpoint during unit tests\n    if CONFIG.user.analytics_opt_out:\n        return\n    await send_analytics_event(\n        AnalyticsEvent(\n            docker=in_docker_container(),\n            event=Event.endpoint_call.value,\n            event_created_at=event_created_at,\n            local_host=accessed_through_local_host(hostname),\n            endpoint=endpoint,\n            status_code=status_code,\n            error=error_class or None,\n            extra_data={ExtraData.fides_source.value: fides_source}\n            if fides_source\n            else None,\n        )\n    )", "target": 0}, {"function": "def sanitise_url_path(path: str) -> str:\n    \"\"\"Returns a URL path that does not contain any ../ or //\"\"\"\n    path = unquote(path)\n    path = os.path.normpath(path)\n    for token in path.split(\"/\"):\n        if \"..\" in token:\n            logger.warning(f\"Potentially dangerous use of URL hierarchy in path: {path}\")\n            raise MalisciousUrlException()\n    return path", "target": 0}, {"function": "def start_webserver(port: int = 8080) -> None:\n    \"\"\"Run the webserver.\"\"\"\n    check_required_webserver_config_values(config=CONFIG)\n    server = Server(Config(app, host=\"0.0.0.0\", port=port, log_level=WARNING))\n\n    logger.info(\n        \"Starting webserver - Host: {}, Port: {}, Log Level: {}\",\n        server.config.host,\n        server.config.port,\n        server.config.log_level,\n    )\n    server.run()", "target": 0}]}, {"raw_url": "https://github.com/ethyca/fides/raw/f526d9ffb176006d701493c9d0eff6b4884e811f/tests%2Fops%2Futil%2Ftest_api_router.py", "code": "import pytest\nfrom starlette.status import HTTP_200_OK, HTTP_404_NOT_FOUND\nfrom starlette.testclient import TestClient\n\nfrom fides.api.models.client import ClientDetail\nfrom fides.common.api.scope_registry import PRIVACY_REQUEST_READ\nfrom fides.common.api.v1.urn_registry import PRIVACY_REQUESTS, V1_URL_PREFIX\n\n\nclass TestApiRouter:\n    @pytest.fixture(scope=\"function\")\n    def url(self, oauth_client: ClientDetail) -> str:\n        return V1_URL_PREFIX + PRIVACY_REQUESTS\n\n    def test_no_trailing_slash(\n        self, api_client: TestClient, generate_auth_header, url\n    ) -> None:\n        auth_header = generate_auth_header(scopes=[PRIVACY_REQUEST_READ])\n        resp = api_client.get(url, headers=auth_header)\n        assert resp.status_code == HTTP_200_OK\n\n    def test_trailing_slash(\n        self, api_client: TestClient, generate_auth_header, url\n    ) -> None:\n        auth_header = generate_auth_header(scopes=[PRIVACY_REQUEST_READ])\n        resp = api_client.get(f\"{url}/\", headers=auth_header)\n        assert resp.status_code == HTTP_200_OK\n\n    def test_non_existent_route_404(\n        self, api_client: TestClient, generate_auth_header, url\n    ) -> None:\n        auth_header = generate_auth_header(scopes=[PRIVACY_REQUEST_READ])\n        resp = api_client.get(f\"{url}/route/does/not/exist\", headers=auth_header)\n        assert resp.status_code == HTTP_404_NOT_FOUND\n\n        resp_2 = api_client.get(f\"{url}/route/does/not/exist/\", headers=auth_header)\n        assert resp_2.status_code == HTTP_404_NOT_FOUND\n\n        resp_3 = api_client.get(\n            f\"{V1_URL_PREFIX}/route/does/not/exist\", headers=auth_header\n        )\n        assert resp_3.status_code == HTTP_404_NOT_FOUND\n\n        resp_4 = api_client.get(\n            f\"{V1_URL_PREFIX}/route/does/not/exist/\", headers=auth_header\n        )\n        assert resp_4.status_code == HTTP_404_NOT_FOUND\n\n    def test_malicious_url(\n        self,\n        api_client: TestClient,\n        url,\n    ) -> None:\n        malicious_paths = [\n            \"../../../../../../../../../etc/passwd\",\n            \"..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n            \"%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc/passwd\",\n            \"..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd\",\n            \".../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//etc/passwd\",\n            \"...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2fetc/passwd\",\n            \"%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//etc/passwd\",\n            \"%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2fetc/passwd\",\n        ]\n        for path in malicious_paths:\n            resp = api_client.get(f\"{url}/{path}\")\n            assert resp.status_code == 200\n            assert resp.text == \"<h1>Privacy is a Human Right!</h1>\"\n", "code_before": "import pytest\nfrom starlette.status import HTTP_200_OK, HTTP_404_NOT_FOUND\nfrom starlette.testclient import TestClient\n\nfrom fides.api.models.client import ClientDetail\nfrom fides.common.api.scope_registry import PRIVACY_REQUEST_READ\nfrom fides.common.api.v1.urn_registry import PRIVACY_REQUESTS, V1_URL_PREFIX\n\n\nclass TestApiRouter:\n    @pytest.fixture(scope=\"function\")\n    def url(self, oauth_client: ClientDetail) -> str:\n        return V1_URL_PREFIX + PRIVACY_REQUESTS\n\n    def test_no_trailing_slash(\n        self, api_client: TestClient, generate_auth_header, url\n    ) -> None:\n        auth_header = generate_auth_header(scopes=[PRIVACY_REQUEST_READ])\n        resp = api_client.get(url, headers=auth_header)\n        assert resp.status_code == HTTP_200_OK\n\n    def test_trailing_slash(\n        self, api_client: TestClient, generate_auth_header, url\n    ) -> None:\n        auth_header = generate_auth_header(scopes=[PRIVACY_REQUEST_READ])\n        resp = api_client.get(f\"{url}/\", headers=auth_header)\n        assert resp.status_code == HTTP_200_OK\n\n    def test_non_existent_route_404(\n        self, api_client: TestClient, generate_auth_header, url\n    ) -> None:\n        auth_header = generate_auth_header(scopes=[PRIVACY_REQUEST_READ])\n        resp = api_client.get(f\"{url}/route/does/not/exist\", headers=auth_header)\n        assert resp.status_code == HTTP_404_NOT_FOUND\n\n        resp_2 = api_client.get(f\"{url}/route/does/not/exist/\", headers=auth_header)\n        assert resp_2.status_code == HTTP_404_NOT_FOUND\n\n        resp_3 = api_client.get(\n            f\"{V1_URL_PREFIX}/route/does/not/exist\", headers=auth_header\n        )\n        assert resp_3.status_code == HTTP_404_NOT_FOUND\n\n        resp_4 = api_client.get(\n            f\"{V1_URL_PREFIX}/route/does/not/exist/\", headers=auth_header\n        )\n        assert resp_4.status_code == HTTP_404_NOT_FOUND\n", "patch": "@@ -45,3 +45,24 @@ def test_non_existent_route_404(\n             f\"{V1_URL_PREFIX}/route/does/not/exist/\", headers=auth_header\n         )\n         assert resp_4.status_code == HTTP_404_NOT_FOUND\n+\n+    def test_malicious_url(\n+        self,\n+        api_client: TestClient,\n+        url,\n+    ) -> None:\n+        malicious_paths = [\n+            \"../../../../../../../../../etc/passwd\",\n+            \"..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n+            \"%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n+            \"%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc/passwd\",\n+            \"..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd\",\n+            \".../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//.../...//etc/passwd\",\n+            \"...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2f...%2f...%2f%2fetc/passwd\",\n+            \"%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//%2e%2e%2e/%2e%2e%2e//etc/passwd\",\n+            \"%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2f%2e%2e%2e%2f%2e%2e%2e%2f%2fetc/passwd\",\n+        ]\n+        for path in malicious_paths:\n+            resp = api_client.get(f\"{url}/{path}\")\n+            assert resp.status_code == 200\n+            assert resp.text == \"<h1>Privacy is a Human Right!</h1>\"", "file_path": "files/2023_7/685", "file_language": "py", "file_name": "tests/ops/util/test_api_router.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
