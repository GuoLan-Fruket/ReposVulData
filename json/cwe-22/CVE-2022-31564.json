{"index": 8589, "cve_id": "CVE-2022-31564", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "The woduq1414/munhak-moa repository before 2022-05-03 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely.", "cvss": "9.3", "publish_date": "July 10, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "CHANGED", "C": "HIGH", "I": "NONE", "A": "LOW", "commit_id": "e8f800373b20cb22de70c7a994325b8903877da0", "commit_message": "# Absolute Path Traversal due to incorrect use of `send_file` call\n\nA path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\n\n## Common Weakness Enumeration category\nCWE - 36\n\n## Root Cause Analysis\n\nThe `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  Please see the example below.\n```\n>>> import os.path\n>>> static = \"path/to/mySafeStaticDir\"\n>>> malicious = \"/../../../../../etc/passwd\"\n>>> os.path.join(t,malicious)\n'/../../../../../etc/passwd'\n```\nSince the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks.\n\nIn this case, the problems occurs due to the following code :\nhttps://github.com/woduq1414/munhak-moa/blob/cdcc98959879c2e88a89eea164e806b3b0e09972/app.py#L273\n\nHere, the `path` parameter is attacker controlled. This parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. This leads to a path traversal attack.\n\n## Proof of Concept\n\nThe bug can be verified using a proof of concept similar to the one shown below.\n\n```\ncurl --path-as-is 'http://<domain>/images//../../../../etc/passwd\"'\n```\n## Remediation\n\nThis can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `werkzeug.utils.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\n\n## Common Vulnerability Scoring System Vector\n\nThe attack can be carried over the network. A complex non-standard configuration or a specialized condition is not required for the attack to be successfully conducted. There is no user interaction required for successful execution. The attack can affect components outside the scope of the target module. The attack can be used to gain access to confidential files like passwords, login credentials and other secrets. It cannot be directly used to affect a change on a system resource. Hence has limited to no impact on integrity. Using this attack vector a attacker may make multiple requests for accessing huge files such as a database. This can lead to a partial system denial service. However, the impact on availability is quite low in this case. Taking this account an appropriate CVSS v3.1 vector would be\n\n(AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L)[https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L&version=3.1]\n\nThis gives it a base score of 9.3/10 and a severity rating of critical.\n\n## References\n* [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n* github/securitylab#669\n\n### This bug was found using *[CodeQL by Github](https://codeql.github.com/)*", "commit_date": "2022-05-03T11:23:52Z", "project": "woduq1414/munhak-moa", "url": "https://api.github.com/repos/woduq1414/munhak-moa/commits/e8f800373b20cb22de70c7a994325b8903877da0", "html_url": "https://github.com/woduq1414/munhak-moa/commit/e8f800373b20cb22de70c7a994325b8903877da0", "windows_before": [{"commit_id": "cdcc98959879c2e88a89eea164e806b3b0e09972", "commit_date": "Wed Apr 27 14:17:25 2022 +0900", "commit_message": "Update views.py", "files_name": ["app/toto/views.py"]}, {"commit_id": "a2d6f906aee5561a42c783656dcad373ad4ceda4", "commit_date": "Wed Apr 27 14:14:13 2022 +0900", "commit_message": "\ubaa8\ub450 \ub2e4 \ud480\uc5c8\uc744 \ub54c \uc885\ub8cc", "files_name": ["app/quiz/views.py"]}, {"commit_id": "fc51e697b60543edb1e2ec17eafabe2b5f9d6cfc", "commit_date": "Wed Apr 27 11:40:33 2022 +0900", "commit_message": "Update views.py", "files_name": ["app/quiz/views.py"]}, {"commit_id": "993c7758c4289c080338a84ce651c53e2a1947d5", "commit_date": "Wed Apr 27 11:33:14 2022 +0900", "commit_message": "Update config.py", "files_name": ["config.py"]}, {"commit_id": "b8e9607abdf1592d0dd5b974d39ad4c8deab4c81", "commit_date": "Wed Apr 27 11:28:59 2022 +0900", "commit_message": "Update requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "f847f0746ef7baf274652394409fcf6d48b6ef30", "commit_date": "Wed Apr 27 11:26:28 2022 +0900", "commit_message": "Update requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "89b9a2b72e81f3d632c8c3565781c4bf17f84929", "commit_date": "Wed Apr 27 11:23:42 2022 +0900", "commit_message": "Update requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "469384cc8f0592d0ea825f78a5ebb5f65209dce0", "commit_date": "Wed Apr 27 11:12:13 2022 +0900", "commit_message": "Update requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "06fe798e51e7b343eac0c1e2afc65674c52fc895", "commit_date": "Wed Apr 27 11:06:34 2022 +0900", "commit_message": "Update requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "b2d3e7f94a32c35f8228a1a80e29b1544716fdc2", "commit_date": "Wed Apr 27 08:50:23 2022 +0900", "commit_message": "Update requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "cf3b70b84a691bbc811f6b1fc815909d71c28d37", "commit_date": "Wed Apr 27 08:48:56 2022 +0900", "commit_message": "Update requirements.txt", "files_name": ["requirements.txt"]}, {"commit_id": "3982ac6468afda03e829754bf7a88237143aea1f", "commit_date": "Tue Apr 26 23:28:52 2022 +0900", "commit_message": "Merge branch 'master' of https://github.com/woduq1414/munhak-moa", "files_name": ["69a1260417643fdf97aae6cac5f6f8d667735108 - Tue Apr 26 23:28:30 2022 +0900 : version upgrade", "app/__init__.py", "app/board/views.py", "app/cache.py", "app/common/function.py", "app/db.py", "app/quiz/views.py", "app/toto/views.py", "requirements.txt", "runtime.txt", "static/stylesheets/room.css", "templates/layout.html", "templates/munhak_board_list.html", "templates/quiz/index.html", "templates/quiz/live/room.html", "templates/toto/index.html", "templates/toto/toto_form.html"]}, {"commit_id": "816a96bec0d5cef59b673c2434cbcea5ab72552a", "commit_date": "Sun Jan 9 17:16:26 2022 +0900", "commit_message": "Update README.md", "files_name": ["README.md"]}, {"commit_id": "75d4a22b418aaf65de9e794b034edced1d612292", "commit_date": "Sun Jan 9 17:13:18 2022 +0900", "commit_message": "Create README.md", "files_name": ["README.md"]}, {"commit_id": "eb2c417cef7f96de094c70fbe5d3225d15331cc1", "commit_date": "Wed Nov 17 08:42:04 2021 +0900", "commit_message": "Update index.html", "files_name": ["templates/toto/index.html"]}, {"commit_id": "ece8f0467de1b26f717c03db4fa569fa78b62eb9", "commit_date": "Sun Nov 14 16:07:49 2021 +0900", "commit_message": "\uae30\uac04 \ubcc0\uacbd2", "files_name": ["app/toto/views.py", "templates/toto/index.html"]}, {"commit_id": "ddd1930f8d5e5cfeae55bb6ff432176c8c9b65fd", "commit_date": "Thu Nov 11 21:42:55 2021 +0900", "commit_message": "\uae30\uac04 \ubcc0\uacbd", "files_name": ["app/toto/views.py", "templates/toto/index.html"]}, {"commit_id": "2b1bd815e4af2e8f0c95760d6ef206f1867cffab", "commit_date": "Tue Nov 9 19:18:52 2021 +0900", "commit_message": "github icon change", "files_name": ["static/stylesheets/index.css", "templates/quiz/index.html"]}, {"commit_id": "a408edd50518ce021cc2d7f49c99cc2a502e1dde", "commit_date": "Sat Nov 6 17:23:39 2021 +0900", "commit_message": "\ubb38\ud559\ud034\uc988 \ucd9c\ucc98 \uc120\ud0dd, \ub2e4\ud06c\ubaa8\ub4dc", "files_name": ["app/quiz/views.py", "static/stylesheets/index.css", "static/stylesheets/live.css", "static/stylesheets/quiz.css", "static/stylesheets/quiz_layout.css", "static/stylesheets/ranking.css", "templates/quiz/index.html", "templates/quiz/layout.html", "templates/quiz/live/room.html", "templates/quiz/quiz.html", "templates/quiz/render_ranking.html", "templates/quiz/result.html", "templates/user/login_form.html", "templates/user/my_page.html", "templates/user/register_form.html"]}, {"commit_id": "74bb7dbea23c9b9bcca647c3b5cbbf5b17e6f975", "commit_date": "Sun Oct 24 15:06:38 2021 +0900", "commit_message": "trivial", "files_name": ["app/quiz/views.py", "templates/toto/index.html"]}, {"commit_id": "fb426e4ec743c46a0d56046174b889636e393d32", "commit_date": "Sun Oct 17 11:59:15 2021 +0900", "commit_message": "\uc790\uae30 \ud53d \ubcfc \uc218 \uc788\uac8c\ud568", "files_name": ["app/toto/views.py", "static/stylesheets/ranking.css", "static/stylesheets/toto.css", "templates/toto/index.html"]}, {"commit_id": "13ae3655eec8463e85b6552d09438dcf381991f4", "commit_date": "Sat Oct 16 22:02:52 2021 +0900", "commit_message": "\uc124\uba85 \ucd94\uac00", "files_name": ["static/stylesheets/toto.css", "templates/toto/index.html", "templates/toto/toto_form.html"]}, {"commit_id": "38952d19c2fa2ac44abeda30d8f218de50208318", "commit_date": "Sat Oct 16 21:11:56 2021 +0900", "commit_message": "\ub85c\uadf8\uc778 \uc548 \ub410\uc744 \ub54c \uc624\ub958 \uc218\uc815", "files_name": ["templates/toto/index.html"]}, {"commit_id": "7fb9484b4846eef835564b5f29d244b14a6e5900", "commit_date": "Sat Oct 16 19:30:54 2021 +0900", "commit_message": "\uc218\ub2a5 \ubb38\ud559 toto", "files_name": ["app/__init__.py", "app/common/function.py", "app/db.py", "app/toto/api.py", "app/toto/views.py", "static/stylesheets/toto.css", "static/stylesheets/toto_form.css", "templates/layout.html", "templates/reading_quiz_list.html", "templates/toto/index.html", "templates/toto/toto_form.html"]}, {"commit_id": "7ddb5e2d3ddbee068ab9068dac347b97b47c59a4", "commit_date": "Mon Sep 13 15:05:55 2021 +0900", "commit_message": "\ud034\uc988 \uacb0\uacfc\uc5d0 \ucd9c\ucc98 \ud45c\uc2dc", "files_name": ["static/stylesheets/quiz.css", "templates/quiz/result.html"]}, {"commit_id": "8de18a5dbbc1deb964b4f4ada2c312bd282fc3b6", "commit_date": "Tue Aug 31 19:56:52 2021 +0900", "commit_message": "2\ubc88\uc9f8 \ud310 \uc774\ud6c4 \ub2c9\ub124\uc784 \ubc84\uadf8 \uc218\uc815", "files_name": ["templates/quiz/live/room.html"]}, {"commit_id": "0499b6a2a3418c0ddabcb6578f27e79283fc2343", "commit_date": "Tue Aug 31 08:47:48 2021 +0900", "commit_message": "Update views.py", "files_name": ["app/quiz/views.py"]}, {"commit_id": "fa0ac7c05d68423bf1e3bdb0b6c9928180a9438d", "commit_date": "Mon Aug 30 08:23:25 2021 +0900", "commit_message": "\ub3c4\uba54\uc778 \ubcc0\uacbd", "files_name": ["static/stylesheets/reading_quiz.css", "templates/layout.html", "templates/quiz/layout.html", "templates/reading_quiz_list.html"]}, {"commit_id": "8b13d852c18b40191ca05debdb674665e43ca657", "commit_date": "Tue May 4 21:48:32 2021 +0900", "commit_message": "Update reading_quiz_list.html", "files_name": ["templates/reading_quiz_list.html"]}, {"commit_id": "e1a59220cbc581fc5f6b9b34f1286b9b25403200", "commit_date": "Wed Apr 28 19:29:39 2021 +0900", "commit_message": "1\ud559\uae30 1\ucc28 \uc9c0\ud544\uace0\uc0ac \uc5c5\ub370\uc774\ud2b8", "files_name": ["templates/reading_quiz_list.html"]}, {"commit_id": "911fe327d83baaab3a3e84bf459f7db511422237", "commit_date": "Sat Apr 3 08:39:15 2021 +0900", "commit_message": "\ub3c5\uc11c\ud034\uc988 \ub9ac\uc2a4\ud2b8 \ud558\uc774\ub77c\uc774\ud305", "files_name": ["static/stylesheets/reading_quiz.css", "templates/reading_quiz_list.html"]}, {"commit_id": "8647a70dc6fdb7077e7da1b0b08587a451dbecd0", "commit_date": "Fri Apr 2 12:55:11 2021 +0900", "commit_message": "Update views.py", "files_name": ["app/reading_quiz/views.py"]}, {"commit_id": "fc91c97b3ac8e894bee86dce473d1ad1b12619e8", "commit_date": "Fri Apr 2 10:59:52 2021 +0900", "commit_message": "\ubb38\ud559 \ud034\uc988 \uc815\ub82c", "files_name": ["app/reading_quiz/views.py"]}, {"commit_id": "2fbdb612011cbc043ace8211401aa1e70c00d6f2", "commit_date": "Thu Apr 1 19:41:25 2021 +0900", "commit_message": "Update function.py", "files_name": ["app/common/function.py"]}, {"commit_id": "52999d4d86e4e24b15b3b1a8edf974236cf5ac08", "commit_date": "Thu Apr 1 12:38:13 2021 +0900", "commit_message": "\ud034\uc988\ucd94\uac00 \ub514\ucf54 \uc54c\ub9bc", "files_name": ["app/common/function.py", "app/reading_quiz/views.py"]}, {"commit_id": "725e607f5c515b3e727f957fe5a4682d3decc62d", "commit_date": "Wed Mar 31 15:11:18 2021 +0900", "commit_message": "\ub9c8\ud06c\ub2e4\uc6b4 \uc778\uc6a9\ubb38 \uc2a4\ud0c0\uc77c \ucd94\uac00", "files_name": [".gitignore", "app/common/encrypt.py", "app/common/function.py", "requirements.txt", "run.py", "static/stylesheets/munhak_board.css", "templates/munhak_board_detail.html", "templates/reading_quiz_detail.html"]}, {"commit_id": "8cd2fea60fd2ef6f8e5e10b814557ab18f73d57f", "commit_date": "Sat Mar 27 22:45:02 2021 +0900", "commit_message": "Update views.py", "files_name": ["app/reading_quiz/views.py"]}, {"commit_id": "4c5f9907364466132ea80c53ca228c08b8bbf979", "commit_date": "Sat Mar 27 22:23:54 2021 +0900", "commit_message": "\ub3c5\uc11c\ud034\uc988 \ube48\uce78 \uc804\uccb4 \ud0dc\uadf8\uc5d0 \uc801\uc6a9 \uac00\ub2a5", "files_name": ["static/stylesheets/reading_quiz.css", "templates/reading_quiz_detail.html"]}, {"commit_id": "c07b40ce4662f7e9ba138546d9a17c15c90ccc6a", "commit_date": "Sat Mar 27 20:48:33 2021 +0900", "commit_message": "Update reading_quiz_detail.html", "files_name": ["templates/reading_quiz_detail.html"]}, {"commit_id": "bc70e4b21202cbd3b31400461d81d9b6e2a75016", "commit_date": "Sat Mar 27 20:12:12 2021 +0900", "commit_message": "\ub0b4 \uae00 \ubc84\uadf8 \uc218\uc815", "files_name": ["app/board/views.py", "app/reading_quiz/views.py", "templates/reading_quiz_detail.html"]}, {"commit_id": "742d66d98aa935511b74b5c0c9abcfcae8da6904", "commit_date": "Sat Mar 27 19:57:55 2021 +0900", "commit_message": "\ub3c5\uc11c\ud034\uc988", "files_name": ["app/__init__.py", "app/db.py", "app/reading_quiz/api.py", "app/reading_quiz/views.py", "static/stylesheets/reading_quiz.css", "templates/layout.html", "templates/munhak_board_tip_form.html", "templates/reading_quiz_detail.html", "templates/reading_quiz_form.html", "templates/reading_quiz_list.html"]}], "windows_after": [{"commit_id": "2ddfd0a76d0eb1fa061afce4fe2c3188153f698c", "commit_date": "Sat Jun 25 02:16:23 2022 +0900", "commit_message": "Merge pull request #2 from porcupineyhairs/FixPathInjection", "files_name": ["22d7cc6acda79475d8927fa1cab016dfa1d6f7c2 - Mon Jul 4 22:10:55 2022 +0900 : \uc54c\uc4f8\ubb38\ud034 \ud0a4\ubcf4\ub4dc \uc870\uc791 \ucd94\uac00", "templates/quiz/live/room.html", "templates/quiz/quiz.html", "templates/quiz/quiz_container.html"]}, {"commit_id": "520b58b8c01bbaefee3d85ad4eaa1e415cb1c4b3", "commit_date": "Mon Jul 4 22:13:07 2022 +0900", "commit_message": "Merge branch 'master' of https://github.com/woduq1414/munhak-moa", "files_name": ["9e86c386afc911f3934521add49c27e6a61d120c - Thu Aug 25 18:03:00 2022 +0900 : Update views.py", "app/toto/views.py"]}, {"commit_id": "8abc8bb7a4ba2a16a36a2869ea6dd490e2692f67", "commit_date": "Tue Sep 20 16:01:32 2022 +0900", "commit_message": "Update views.py", "files_name": ["app/toto/views.py"]}, {"commit_id": "52f9d48289821087b168ed152696fe7354b7a1ed", "commit_date": "Tue Sep 20 20:10:57 2022 +0900", "commit_message": "2022->2023", "files_name": ["templates/quiz/index.html", "templates/quiz/live/room.html"]}, {"commit_id": "7c2b7216c448e00b068b7fb47dc8c20fef43efc4", "commit_date": "Tue Sep 27 22:55:35 2022 +0900", "commit_message": "Update config.py", "files_name": ["config.py"]}, {"commit_id": "8302f91032da05ad7d5a2420711d75163c6aacb3", "commit_date": "Tue Sep 27 22:56:53 2022 +0900", "commit_message": "Update config.py", "files_name": ["config.py"]}], "parents": [{"commit_id_before": "cdcc98959879c2e88a89eea164e806b3b0e09972", "url_before": "https://api.github.com/repos/woduq1414/munhak-moa/commits/cdcc98959879c2e88a89eea164e806b3b0e09972", "html_url_before": "https://github.com/woduq1414/munhak-moa/commit/cdcc98959879c2e88a89eea164e806b3b0e09972"}], "details": [{"raw_url": "https://github.com/woduq1414/munhak-moa/raw/e8f800373b20cb22de70c7a994325b8903877da0/app.py", "code": "import configparser\n\nfrom flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file\nfrom werkzeug.utils import safe_join\nimport socket\nimport os\nimport random\nimport copy\nfrom flask_sqlalchemy import SQLAlchemy, Model\nimport gspread\nfrom oauth2client.service_account import ServiceAccountCredentials\nimport json\nimport base64\nfrom collections import namedtuple\n\nfrom app.common.decorator import return_500_if_errors\n\nscope = ['https://spreadsheets.google.com/feeds',\n         'https://www.googleapis.com/auth/drive']\n\nhostname = socket.gethostname()\nisLocal = None\n\nmunhak_rows_data = None\n\nif hostname[:7] == \"DESKTOP\":\n    isLocal = True\nelse:\n    isLocal = False\n\napp = Flask(__name__)\n\n\ndef update():\n\n        gc = gspread.authorize(credentials).open(\"\ubb38\ud559\ub530\uba39\uae30\")\n\n        wks = gc.get_worksheet(0)\n\n        rows = wks.get_all_values()\n        print(rows)\n        try:\n\n            data = []\n            for row in rows[1:]:\n                row_tuple = namedtuple(\"Munhak\", rows[0])(*row)\n                row_tuple = row_tuple._replace(keywords=json.loads(row_tuple.keywords))\n                if row_tuple.is_available == \"TRUE\":\n                    data.append(row_tuple)\n\n\n        except:\n            pass\n\n        global munhak_rows_data\n        munhak_rows_data = data\n        print(data)\n        # print(munhak_rows)\n        return\n\n\n\nif isLocal:\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n\n    pg_db_username = config['DEFAULT']['LOCAL_DB_USERNAME']\n    pg_db_password = config['DEFAULT']['LOCAL_DB_PASSWORD']\n    pg_db_name = config['DEFAULT']['LOCAL_DB_NAME']\n    pg_db_hostname = config['DEFAULT']['LOCAL_DB_HOSTNAME']\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"postgresql://{DB_USER}:{DB_PASS}@{DB_ADDR}/{DB_NAME}\".format(\n        DB_USER=pg_db_username,\n        DB_PASS=pg_db_password,\n        DB_ADDR=pg_db_hostname,\n        DB_NAME=pg_db_name)\n\n    app.config[\"SECRET_KEY\"] = config['DEFAULT']['SECRET_KEY']\n\n    credentials = ServiceAccountCredentials.from_json_keyfile_name(config['DEFAULT']['GOOGLE_CREDENTIALS_PATH'], scope)\n\nelse:\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get('DATABASE_URL', None)\n    app.config[\"SECRET_KEY\"] = os.environ.get('SECRET_KEY', None)\n    print(os.environ.get('GOOGLE_CREDENTIALS', None))\n    print(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)))\n    credentials = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)), scope)\n\n\n\nupdate()\n\n\n\n@app.route('/')\ndef index():\n    munhak_rows = copy.deepcopy(munhak_rows_data)\n    data = {\n        \"total_munhak\" : len(munhak_rows),\n        \"source_list\" : sorted(set([munhak_row.source for munhak_row in munhak_rows]))\n    }\n    print(data)\n\n    session[\"quiz_count\"] = 0\n    return render_template(\"quiz/index.html\", data=data)\n\n\n@app.route(\"/get-quiz\")\ndef get_quiz():\n    if \"quiz_count\" not in session:\n        session[\"quiz_count\"] = 0\n        session[\"total_munhak\"] = len(munhak_rows_data)\n    if \"solved_quiz\" not in session:\n        session[\"solved_quiz\"] = []\n    session[\"result\"] = None\n\n    quiz_no = session[\"quiz_count\"] + 1\n    solved_quiz = session[\"solved_quiz\"]\n\n    if \"current_munhak\" not in session or session[\"current_munhak\"] is None:\n\n        # munhak_rows = Munhak.query.filter_by(is_available=True).all()\n        munhak_rows = copy.deepcopy(munhak_rows_data)\n\n        not_solved_munhak_rows = [munhak_row for munhak_row in munhak_rows if munhak_row.munhak_seq not in solved_quiz]\n\n        if len(not_solved_munhak_rows) == 0:\n            session[\"result\"] = True\n            return redirect(url_for(\"result\"))\n\n        correct_munhak_row = random.choice(not_solved_munhak_rows)\n\n        for _ in [munhak_row for munhak_row in munhak_rows if munhak_row.title == correct_munhak_row.title]:\n            munhak_rows.remove(_)\n\n        random.shuffle(munhak_rows)\n\n        option_munhak_rows = munhak_rows[0:3] + [correct_munhak_row]\n\n        random.shuffle(option_munhak_rows)\n        correct = option_munhak_rows.index(correct_munhak_row)\n        print(correct)\n\n        # correct = random.randrange(0, 4)\n        #\n        # answer_row = not_solved_munhak_rows[correct]\n        #\n        session[\"correct\"] = correct\n\n        hint = random.choice(correct_munhak_row.keywords)\n        hint = hint.replace(\"\\\\\", \"\")\n\n        session[\"current_munhak\"] = {\n            \"munhak_seq\": correct_munhak_row.munhak_seq,\n            \"source\": correct_munhak_row.source,\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"title\": correct_munhak_row.title,\n            \"writer\": correct_munhak_row.writer\n        }\n        session[\"options\"] = [munhak_row._asdict() for munhak_row in option_munhak_rows]\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"options\": [\n                f\"{munhak_row.writer}, \u300e{munhak_row.title}\u300f\" for munhak_row in option_munhak_rows\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n    else:\n        # print(hint)\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": session[\"current_munhak\"][\"category\"],\n            \"hint\": session[\"current_munhak\"][\"hint\"],\n            \"options\": [\n                f\"{munhak_row['writer']}, \u300e{munhak_row['title']}\u300f\" for munhak_row in session[\"options\"]\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n\n\n\n@app.route('/quiz')\ndef quiz():\n    return render_template(\"quiz/quiz_container.html\")\n\n\n@app.route(\"/answer\", methods=[\"GET\", \"POST\"])\ndef answer():\n    print(session)\n    option = request.form.get(\"option\", None)\n    if option is None or (not type(option) != int):\n        return abort(400)\n    option = int(option)\n    correct = session[\"correct\"]\n    if correct is None:\n        return abort(401)\n\n    current_munhak = session[\"current_munhak\"]\n    if current_munhak is None:\n        return abort(401)\n\n    if correct == option:\n        session[\"quiz_count\"] += 1\n        session[\"solved_quiz\"].append(current_munhak[\"munhak_seq\"])\n        session[\"current_munhak\"] = None\n        # current_munhak = jsonify(current_munhak)\n        return \"success\"\n    else:\n\n        if \"quiz_count\" not in session:\n            session[\"quiz_count\"] = 0\n        if \"solved_quiz\" not in session:\n            # session[\"solved_quiz\"] = []\n            session[\"result\"] = False\n\n        return \"failed\", 404\n\n\n\n@app.route(\"/result\", methods=[\"GET\", \"POST\"])\ndef result():\n\n\n    is_success = session[\"result\"]\n\n\n    data = {\n        \"is_success\" : is_success,\n        \"solved_count\" : session[\"quiz_count\"],\n        \"correct\" : session[\"correct\"],\n        \"current_munhak\" : session[\"current_munhak\"]\n    }\n    session[\"quiz_count\"] = 0\n    session[\"solved_quiz\"] = []\n    session[\"current_munhak\"] = None\n\n    print(data)\n    return render_template(\"quiz/result.html\", data = data)\n\n\n@app.route('/update')\n\ndef update_():\n\n    if request.args.get(\"key\", None) != app.config[\"SECRET_KEY\"]:\n        return \"error\"\n\n    update()\n    session.clear()\n    return f\"success! {len(munhak_rows_data)}\"\n\n\n@app.route('/images/<path:path>')\ndef get_image(path):\n    def get_absolute_path(path):\n        import os\n        script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in\n        rel_path = path\n        abs_file_path = safe_join(script_dir, rel_path)\n        return abs_file_path\n\n    return send_file(\n        get_absolute_path(f\"./images/{path}\"),\n        mimetype='image/png',\n        attachment_filename='snapshot.png',\n        cache_timeout=0\n    )\n\n\nif __name__ == '__main__':\n\n    app.run()\n", "code_before": "import configparser\n\nfrom flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file\nimport socket\nimport os\nimport random\nimport copy\nfrom flask_sqlalchemy import SQLAlchemy, Model\nimport gspread\nfrom oauth2client.service_account import ServiceAccountCredentials\nimport json\nimport base64\nfrom collections import namedtuple\n\nfrom app.common.decorator import return_500_if_errors\n\nscope = ['https://spreadsheets.google.com/feeds',\n         'https://www.googleapis.com/auth/drive']\n\nhostname = socket.gethostname()\nisLocal = None\n\nmunhak_rows_data = None\n\nif hostname[:7] == \"DESKTOP\":\n    isLocal = True\nelse:\n    isLocal = False\n\napp = Flask(__name__)\n\n\ndef update():\n\n        gc = gspread.authorize(credentials).open(\"\ubb38\ud559\ub530\uba39\uae30\")\n\n        wks = gc.get_worksheet(0)\n\n        rows = wks.get_all_values()\n        print(rows)\n        try:\n\n            data = []\n            for row in rows[1:]:\n                row_tuple = namedtuple(\"Munhak\", rows[0])(*row)\n                row_tuple = row_tuple._replace(keywords=json.loads(row_tuple.keywords))\n                if row_tuple.is_available == \"TRUE\":\n                    data.append(row_tuple)\n\n\n        except:\n            pass\n\n        global munhak_rows_data\n        munhak_rows_data = data\n        print(data)\n        # print(munhak_rows)\n        return\n\n\n\nif isLocal:\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n\n    pg_db_username = config['DEFAULT']['LOCAL_DB_USERNAME']\n    pg_db_password = config['DEFAULT']['LOCAL_DB_PASSWORD']\n    pg_db_name = config['DEFAULT']['LOCAL_DB_NAME']\n    pg_db_hostname = config['DEFAULT']['LOCAL_DB_HOSTNAME']\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"postgresql://{DB_USER}:{DB_PASS}@{DB_ADDR}/{DB_NAME}\".format(\n        DB_USER=pg_db_username,\n        DB_PASS=pg_db_password,\n        DB_ADDR=pg_db_hostname,\n        DB_NAME=pg_db_name)\n\n    app.config[\"SECRET_KEY\"] = config['DEFAULT']['SECRET_KEY']\n\n    credentials = ServiceAccountCredentials.from_json_keyfile_name(config['DEFAULT']['GOOGLE_CREDENTIALS_PATH'], scope)\n\nelse:\n\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get('DATABASE_URL', None)\n    app.config[\"SECRET_KEY\"] = os.environ.get('SECRET_KEY', None)\n    print(os.environ.get('GOOGLE_CREDENTIALS', None))\n    print(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)))\n    credentials = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(os.environ.get('GOOGLE_CREDENTIALS', None)), scope)\n\n\n\nupdate()\n\n\n\n@app.route('/')\ndef index():\n    munhak_rows = copy.deepcopy(munhak_rows_data)\n    data = {\n        \"total_munhak\" : len(munhak_rows),\n        \"source_list\" : sorted(set([munhak_row.source for munhak_row in munhak_rows]))\n    }\n    print(data)\n\n    session[\"quiz_count\"] = 0\n    return render_template(\"quiz/index.html\", data=data)\n\n\n@app.route(\"/get-quiz\")\ndef get_quiz():\n    if \"quiz_count\" not in session:\n        session[\"quiz_count\"] = 0\n        session[\"total_munhak\"] = len(munhak_rows_data)\n    if \"solved_quiz\" not in session:\n        session[\"solved_quiz\"] = []\n    session[\"result\"] = None\n\n    quiz_no = session[\"quiz_count\"] + 1\n    solved_quiz = session[\"solved_quiz\"]\n\n    if \"current_munhak\" not in session or session[\"current_munhak\"] is None:\n\n        # munhak_rows = Munhak.query.filter_by(is_available=True).all()\n        munhak_rows = copy.deepcopy(munhak_rows_data)\n\n        not_solved_munhak_rows = [munhak_row for munhak_row in munhak_rows if munhak_row.munhak_seq not in solved_quiz]\n\n        if len(not_solved_munhak_rows) == 0:\n            session[\"result\"] = True\n            return redirect(url_for(\"result\"))\n\n        correct_munhak_row = random.choice(not_solved_munhak_rows)\n\n        for _ in [munhak_row for munhak_row in munhak_rows if munhak_row.title == correct_munhak_row.title]:\n            munhak_rows.remove(_)\n\n        random.shuffle(munhak_rows)\n\n        option_munhak_rows = munhak_rows[0:3] + [correct_munhak_row]\n\n        random.shuffle(option_munhak_rows)\n        correct = option_munhak_rows.index(correct_munhak_row)\n        print(correct)\n\n        # correct = random.randrange(0, 4)\n        #\n        # answer_row = not_solved_munhak_rows[correct]\n        #\n        session[\"correct\"] = correct\n\n        hint = random.choice(correct_munhak_row.keywords)\n        hint = hint.replace(\"\\\\\", \"\")\n\n        session[\"current_munhak\"] = {\n            \"munhak_seq\": correct_munhak_row.munhak_seq,\n            \"source\": correct_munhak_row.source,\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"title\": correct_munhak_row.title,\n            \"writer\": correct_munhak_row.writer\n        }\n        session[\"options\"] = [munhak_row._asdict() for munhak_row in option_munhak_rows]\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": correct_munhak_row.category,\n            \"hint\": hint,\n            \"options\": [\n                f\"{munhak_row.writer}, \u300e{munhak_row.title}\u300f\" for munhak_row in option_munhak_rows\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n    else:\n        # print(hint)\n        data = {\n            \"quiz_no\": quiz_no,\n            \"type\": \"\uac1d\uad00\uc2dd\",\n            \"category\": session[\"current_munhak\"][\"category\"],\n            \"hint\": session[\"current_munhak\"][\"hint\"],\n            \"options\": [\n                f\"{munhak_row['writer']}, \u300e{munhak_row['title']}\u300f\" for munhak_row in session[\"options\"]\n            ],\n            \"total_munhak\": len(munhak_rows_data)\n        }\n        print(data)\n        #\n        return render_template(\"quiz/quiz.html\", data=data)\n\n\n\n@app.route('/quiz')\ndef quiz():\n    return render_template(\"quiz/quiz_container.html\")\n\n\n@app.route(\"/answer\", methods=[\"GET\", \"POST\"])\ndef answer():\n    print(session)\n    option = request.form.get(\"option\", None)\n    if option is None or (not type(option) != int):\n        return abort(400)\n    option = int(option)\n    correct = session[\"correct\"]\n    if correct is None:\n        return abort(401)\n\n    current_munhak = session[\"current_munhak\"]\n    if current_munhak is None:\n        return abort(401)\n\n    if correct == option:\n        session[\"quiz_count\"] += 1\n        session[\"solved_quiz\"].append(current_munhak[\"munhak_seq\"])\n        session[\"current_munhak\"] = None\n        # current_munhak = jsonify(current_munhak)\n        return \"success\"\n    else:\n\n        if \"quiz_count\" not in session:\n            session[\"quiz_count\"] = 0\n        if \"solved_quiz\" not in session:\n            # session[\"solved_quiz\"] = []\n            session[\"result\"] = False\n\n        return \"failed\", 404\n\n\n\n@app.route(\"/result\", methods=[\"GET\", \"POST\"])\ndef result():\n\n\n    is_success = session[\"result\"]\n\n\n    data = {\n        \"is_success\" : is_success,\n        \"solved_count\" : session[\"quiz_count\"],\n        \"correct\" : session[\"correct\"],\n        \"current_munhak\" : session[\"current_munhak\"]\n    }\n    session[\"quiz_count\"] = 0\n    session[\"solved_quiz\"] = []\n    session[\"current_munhak\"] = None\n\n    print(data)\n    return render_template(\"quiz/result.html\", data = data)\n\n\n@app.route('/update')\n\ndef update_():\n\n    if request.args.get(\"key\", None) != app.config[\"SECRET_KEY\"]:\n        return \"error\"\n\n    update()\n    session.clear()\n    return f\"success! {len(munhak_rows_data)}\"\n\n\n@app.route('/images/<path:path>')\ndef get_image(path):\n    def get_absolute_path(path):\n        import os\n        script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in\n        rel_path = path\n        abs_file_path = os.path.join(script_dir, rel_path)\n        return abs_file_path\n\n    return send_file(\n        get_absolute_path(f\"./images/{path}\"),\n        mimetype='image/png',\n        attachment_filename='snapshot.png',\n        cache_timeout=0\n    )\n\n\nif __name__ == '__main__':\n\n    app.run()\n", "patch": "@@ -1,6 +1,7 @@\n import configparser\n \n from flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file\n+from werkzeug.utils import safe_join\n import socket\n import os\n import random\n@@ -267,7 +268,7 @@ def get_absolute_path(path):\n         import os\n         script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in\n         rel_path = path\n-        abs_file_path = os.path.join(script_dir, rel_path)\n+        abs_file_path = safe_join(script_dir, rel_path)\n         return abs_file_path\n \n     return send_file(", "file_path": "files/2022_7/291", "file_language": "py", "file_name": "app.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
