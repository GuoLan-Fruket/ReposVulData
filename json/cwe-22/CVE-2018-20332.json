{"index": 3213, "cve_id": "CVE-2018-20332", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "An issue has been discovered in the OpenWebif plugin through 1.2.4 for Enigma2 based devices. Reading of arbitrary files is possible with /file?action=download&file= followed by a full pathname, and listing of arbitrary directories is possible with /file?action=download&dir= followed by a full pathname. This is related to plugin/controllers/file.py in the e2openplugin-OpenWebif project.", "cvss": "7.5", "publish_date": "December 21, 2018", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "NONE", "A": "NONE", "commit_id": "a846b7664eda3a4c51a452e00638cf7337dc2013", "commit_message": "move utilities library and actually use it", "commit_date": "2017-09-09T09:35:27Z", "project": "e2openplugins/e2openplugin-openwebif", "url": "https://api.github.com/repos/E2OpenPlugins/e2openplugin-OpenWebif/commits/a846b7664eda3a4c51a452e00638cf7337dc2013", "html_url": "https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/commit/a846b7664eda3a4c51a452e00638cf7337dc2013", "windows_before": [{"commit_id": "e447d851604f29896a5434f4301283cda3c46a84", "commit_date": "Sat Sep 9 11:34:58 2017 +0200", "commit_message": "add action=stream testcase for example file with umlauts", "files_name": ["testsuite/movie_files_testsuite.py"]}, {"commit_id": "7ee3e4091d7b296399e23c3738af6e2dd05e356e", "commit_date": "Sat Sep 9 11:27:28 2017 +0200", "commit_message": "Merge pull request #652 from doubleO8/feature-add-session-attribute-to-base-controller", "files_name": ["3b472669f8ed982f4e6a1a9f4bcc0a65d9a80c9a - Fri Sep 8 23:13:17 2017 +0200 : fix: altered resource_prefix", "plugin/controllers/root.py"]}, {"commit_id": "4496d45a4b707f95f2451764ab6076c12a19b97b", "commit_date": "Fri Sep 8 23:02:44 2017 +0200", "commit_message": "/file endpoint now served by RESTful FileController", "files_name": ["plugin/controllers/root.py"]}, {"commit_id": "ec277f2c75c878d51d3731d9301b0da65509b354", "commit_date": "Fri Sep 8 23:01:52 2017 +0200", "commit_message": "move imports used for standalone tests only", "files_name": ["plugin/controllers/rest_fs_access.py"]}, {"commit_id": "4653a1c59f8663fd0fed33a270bd101eca74c328", "commit_date": "Fri Sep 8 23:01:22 2017 +0200", "commit_message": "add tests for any 'action' value", "files_name": ["testsuite/status_quo_file_controller.py"]}, {"commit_id": "c42bec6ca343f6a181a519d6c4603fb15234884d", "commit_date": "Fri Sep 8 22:47:58 2017 +0200", "commit_message": "refactoring: renamed legacy FileController response", "files_name": ["plugin/controllers/rest_fs_access.py"]}, {"commit_id": "fbc6c03828d6344944e444910136e2ceaceedac3", "commit_date": "Fri Sep 8 22:43:32 2017 +0200", "commit_message": "updated gitignore", "files_name": [".gitignore"]}, {"commit_id": "b908522312a9f0d8c559946e481fa13f96b740f7", "commit_date": "Fri Sep 8 22:43:20 2017 +0200", "commit_message": "add 'status quo FileController responses' documenting testsuite", "files_name": ["testsuite/movie_files_testsuite.py", "testsuite/status_quo_file_controller.py"]}, {"commit_id": "212b3600aa58f6a49ec58a90f50b4748a54e45fb", "commit_date": "Fri Sep 8 22:32:28 2017 +0200", "commit_message": "more string manipulation utilities; docstrings improved", "files_name": ["plugin/utilities.py"]}, {"commit_id": "7d722b96a49e48e48b6103cb141717494135c2be", "commit_date": "Fri Sep 8 22:09:51 2017 +0200", "commit_message": "Merge branch 'feature-add-session-attribute-to-base-controller' into feature-restful-file-access", "files_name": ["533d975b770592e74388346c4e5ecbddcd9a37f5 - Fri Sep 8 22:09:16 2017 +0200 : fix: typos", "testsuite/movie_files_testsuite.py"]}, {"commit_id": "59441565acced4bb90487d6f9cd9ec99feca97ac", "commit_date": "Fri Sep 8 21:53:54 2017 +0200", "commit_message": "Simple Testsuite to Prevent Movie Listings / Meta Data Regressions", "files_name": ["\"testsuite/data/20170830 1650 - TNT Serie HD (S) - Animal Kingdom - S\\303\\274ndenbock.eit\"", "\"testsuite/data/20170830 1650 - TNT Serie HD (S) - Animal Kingdom - S\\303\\274ndenbock.ts\"", "\"testsuite/data/20170830 1650 - TNT Serie HD (S) - Animal Kingdom - S\\303\\274ndenbock.ts.ap\"", "\"testsuite/data/20170830 1650 - TNT Serie HD (S) - Animal Kingdom - S\\303\\274ndenbock.ts.cuts\"", "\"testsuite/data/20170830 1650 - TNT Serie HD (S) - Animal Kingdom - S\\303\\274ndenbock.ts.meta\"", "testsuite/movie_files_testsuite.py"]}, {"commit_id": "6ce857fef93ff0ac171cef0fad709033b1c3dd81", "commit_date": "Fri Sep 8 19:28:44 2017 +0200", "commit_message": "fix: no need for the executable bit", "files_name": ["plugin/backport/OrderedDict.py", "plugin/backport/__init__.py", "plugin/controllers/AT.py", "plugin/controllers/BQE.py", "plugin/controllers/ER.py", "plugin/controllers/api.py", "plugin/controllers/ipkg.py", "plugin/controllers/mobile.py", "plugin/controllers/models/__init__.py", "plugin/controllers/models/volume.py", "plugin/controllers/views/ajax/about.tmpl", "plugin/controllers/views/ajax/at.tmpl", "plugin/controllers/views/ajax/bouquets.tmpl", "plugin/controllers/views/ajax/boxinfo.tmpl", "plugin/controllers/views/ajax/channels.tmpl", "plugin/controllers/views/ajax/config.tmpl", "plugin/controllers/views/ajax/current.tmpl", "plugin/controllers/views/ajax/epgdialog.tmpl", "plugin/controllers/views/ajax/epgpop.tmpl", "plugin/controllers/views/ajax/eventdescription.tmpl", "plugin/controllers/views/ajax/message.tmpl", "plugin/controllers/views/ajax/movies.tmpl", "plugin/controllers/views/ajax/powerstate.tmpl", "plugin/controllers/views/ajax/providers.tmpl", "plugin/controllers/views/ajax/radio.tmpl", "plugin/controllers/views/ajax/satellites.tmpl", "plugin/controllers/views/ajax/settings.tmpl", "plugin/controllers/views/ajax/timers.tmpl", "plugin/controllers/views/index.tmpl", "plugin/controllers/views/web/about.tmpl", "plugin/controllers/views/web/deviceinfo.tmpl", "plugin/controllers/views/web/epgnext.tmpl", "plugin/controllers/views/web/getipv6.tmpl", "plugin/controllers/views/web/getpid.tmpl", "plugin/controllers/views/web/messageanswer.tmpl", "plugin/controllers/views/web/pluginlistread.tmpl", "plugin/controllers/views/web/restarttwisted.tmpl", "plugin/controllers/views/web/vol.tmpl", "plugin/controllers/web.py"]}, {"commit_id": "5721cdf3fb7ef2f4ce26ba5b5cba7971334b2995", "commit_date": "Fri Sep 8 18:33:54 2017 +0200", "commit_message": "only crappy languages need semicolons at the end of a line ;)", "files_name": ["plugin/controllers/models/services.py"]}, {"commit_id": "82c3cba44fc1dd1fb03ec6ae1144dd5b88481a26", "commit_date": "Fri Sep 8 18:27:49 2017 +0200", "commit_message": "fix: ATController does not use path parameter; imports cleanup", "files_name": ["plugin/controllers/AT.py"]}, {"commit_id": "c81c4cd5e28fb0da3f0c8c996b68424a61c675e0", "commit_date": "Fri Sep 8 18:26:40 2017 +0200", "commit_message": "fix: SRController does not use path parameter; imports cleanup", "files_name": ["plugin/controllers/SR.py"]}, {"commit_id": "13b74859f4dc59207252e105497ac6609f61e0d0", "commit_date": "Fri Sep 8 18:25:29 2017 +0200", "commit_message": "fix: ERController does not use path parameter; imports cleanup; do not set content-type/charset header twice", "files_name": ["plugin/controllers/ER.py"]}, {"commit_id": "f5496450493bac59c620706a3ff06cd1f065a3b7", "commit_date": "Fri Sep 8 18:22:21 2017 +0200", "commit_message": "fix: TranscodingController does neither use session nor path parameter; imports cleanup", "files_name": ["plugin/controllers/root.py", "plugin/controllers/transcoding.py"]}, {"commit_id": "8b6404383493fe890db9deb5c91e79d78fe00683", "commit_date": "Fri Sep 8 18:19:56 2017 +0200", "commit_message": "fix: WOLClientController does neither use session nor path parameter; WOLSetupController does not use path; imports cleanup", "files_name": ["plugin/controllers/root.py", "plugin/controllers/wol.py"]}, {"commit_id": "bdf750005138161e114de134d163782eb4240524", "commit_date": "Fri Sep 8 17:58:13 2017 +0200", "commit_message": "Merge branch 'feature-add-session-attribute-to-base-controller' into feature-restful-file-access", "files_name": ["5ef65e01e6cacf069a165c2efc6274388c733a2e - Fri Sep 8 17:55:50 2017 +0200 : fix: FileController does neither use session nor path parameter", "plugin/controllers/file.py", "plugin/controllers/root.py"]}, {"commit_id": "8b9059d20834bd2738e8eb3d110ad2ce8ee5dedd", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "fix typo", "files_name": ["plugin/controllers/web.py"]}, {"commit_id": "ed0573af1de829dc2373e5834a2fe6a0a443857f", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "fix: 'ip' variable might have been not created if len(ifaces) were 0", "files_name": ["plugin/controllers/base.py"]}, {"commit_id": "7781accf3c7fb6fb1abfe41f8d4e5f031675651a", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "import should be at the beginning of a source file; 'extras' list creation simplified", "files_name": ["plugin/controllers/base.py"]}, {"commit_id": "3be7c71d786fd8fdec848ef1211b9985ecdfa547", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "globals should be upper case", "files_name": ["plugin/controllers/base.py"]}, {"commit_id": "f972ce72ad5f99a1b58211ba8cc10a0bed4f81b6", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "drop duplicated method implementation 'compressBuf'", "files_name": ["plugin/controllers/ipkg.py"]}, {"commit_id": "91f3ec3cb06683de250f203f29bf632b93281daa", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "adapt constructor calls in such ways that the session/path parameter is set in BaseController", "files_name": ["plugin/controllers/BQE.py", "plugin/controllers/ajax.py", "plugin/controllers/ipkg.py", "plugin/controllers/mobile.py", "plugin/controllers/root.py", "plugin/controllers/web.py"]}, {"commit_id": "fb35fbb544da1b8368c6ef9ef7a4ee06635c2aae", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "add session attribute to class; add session parameter to constructor; use kwargs for setting class attributes by constructor parameters", "files_name": ["plugin/controllers/base.py"]}, {"commit_id": "242a9be3aa5ce321691502a350f0f7874253b4ea", "commit_date": "Fri Sep 8 15:34:07 2017 +0200", "commit_message": "cleanup imports; drop unused", "files_name": ["plugin/controllers/base.py"]}, {"commit_id": "0949f436b300a7b2a19be9f1c38ede0bb479398b", "commit_date": "Thu Sep 7 20:52:23 2017 +0200", "commit_message": "Merge branch 'master' into feature-restful-file-access", "files_name": ["a23690c7b744a110e7943934ddd2b916157c5f7f - Thu Sep 7 20:31:50 2017 +0200 : Merge pull request #651 from doubleO8/feature-cleanup-movie", "2a6f59b5045e9aab3ae8e88246c846165a334696 - Wed Sep 6 20:38:35 2017 +0200 : Add compare 'generate bookmarklist' functions demo", ".gitignore", "contrib/model_movies/compare_functions.py", "contrib/model_movies/create_example_folders.sh"]}, {"commit_id": "f0891947eaec95507ed79fb6b97358fbb8ea5dab", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "fix: twisted's Request objects 'args' are already unquoted, no need to do that again", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "9ae0b167107865f95fe19011587bb98a35894fb6", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "refactoring: put declarations on top", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "9ff37bff747a0982ed73de9a26800cb7bb3d4819", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "introduce constants for movie list service reference root (2:0:1:0:0:0:0:0:0:0:) and fallback movies path (/media)", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "68507b4eefc58b819bff1f104b12c3b17117c655", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "fix variable naming and handling: re-usage of 'ext' (first filename extension, then extended description), 'Len' -> 'len'", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "3fcff64dbd035aa84d219858d0e21faba07bef62", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "fix: condition expected extension without leading dot but splitext returns extension _with_ leading dot", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "056662bbda5bffe8b97f229c6cf4be345c6b0081", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "drop single time use variables", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "fd39a5279826f73bed93bc47055c26ce2fdbf604", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "improve readability", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "2ac51e4d95820095626b268d5cbd1803815bef98", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "fix PEP8: expecting two lines between functions", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "211de4961ac55b3348b570c58f2eec3dbf01ffef", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "Fix: Comparison with (True|False|None) performed with equality operators", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "d4cfc141a46448e653395fd669717b0d2de91316", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "put fallback value for 'fields' on top; fix: introduce 'sz' in such ways that it will be defined even if the os.stat throws an exception", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "afedbacb066d67842bbe43c12374db5c106be02c", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "replace bookmarklist creation lambda with a for loop; add fix: only return items being a directory", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "2ee905efe197642feb94e318c43cb23cebbf6b54", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "import statements should be on top ...", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "5c873d7d5ca971f61e3ae8d42beea2a7cfa359d9", "commit_date": "Wed Sep 6 19:22:36 2017 +0200", "commit_message": "fix imports", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "367062072a06aa444bfc72b8d96cfe3ec1a81175", "commit_date": "Tue Sep 5 22:10:23 2017 +0200", "commit_message": "fix: unquote path contained in URL; fix: double leading dashes if path is '/'", "files_name": ["plugin/controllers/rest_fs_access.py"]}, {"commit_id": "b3184d4e6d3402acfd5368bc464e8e6e6b8a5dcf", "commit_date": "Tue Sep 5 21:03:41 2017 +0200", "commit_message": "redirect legacy requests", "files_name": ["plugin/controllers/rest_fs_access.py"]}, {"commit_id": "57f95d8e0f9b6067815892a635f44536e20ef513", "commit_date": "Tue Sep 5 21:03:20 2017 +0200", "commit_message": "remove obsolete stuff", "files_name": ["plugin/utilities.py"]}, {"commit_id": "7e346bcc7cc33122c0c1ac24cc5c88b43f9270ec", "commit_date": "Tue Sep 5 19:35:59 2017 +0200", "commit_message": "add helper functions library", "files_name": ["plugin/utilities.py"]}, {"commit_id": "f2b05efa8c3d113c125d4002e269f7fd14005fb2", "commit_date": "Tue Sep 5 19:22:49 2017 +0200", "commit_message": "fix: prefix", "files_name": []}], "windows_after": [{"commit_id": "28ff32808aa36aa4ba2b5244d3f3a3e50e451813", "commit_date": "Sat Sep 9 11:43:36 2017 +0200", "commit_message": "Merge branch 'master' into feature-restful-file-access", "files_name": ["b3fdf4bccb7c5fb61131cc74e4725841aa8609e7 - Sat Sep 9 12:58:19 2017 +0200 : add initial implementation of an HTTP POST handler.", "plugin/controllers/rest_fs_access.py"]}, {"commit_id": "be51fcaf0bd4399a33f18dd6f29a4c7ce2c6e2a1", "commit_date": "Sat Sep 9 13:17:30 2017 +0200", "commit_message": "fix: copy/paste error, improved error message", "files_name": ["plugin/controllers/rest_fs_access.py"]}, {"commit_id": "70cd9acfe2700659fe9ac4ca886142574819fb15", "commit_date": "Sat Sep 9 13:24:41 2017 +0200", "commit_message": "fix: missing slash", "files_name": ["plugin/controllers/rest_fs_access.py"]}, {"commit_id": "e3d637047541bf0691b544ad5ea2720b9af85d54", "commit_date": "Sun Sep 10 08:38:07 2017 +0200", "commit_message": "movies cleanup", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "29fb1bdb04f7c859865ba1f811fa857d480cf1af", "commit_date": "Sun Sep 10 11:28:30 2017 +0200", "commit_message": "Update powertimer api", "files_name": ["plugin/controllers/models/timers.py"]}, {"commit_id": "2bdde3e83d65b9056d8dad945f353cb6f7bf1780", "commit_date": "Sun Sep 10 11:44:03 2017 +0200", "commit_message": "add search by eventid /api/epgsearch?sref=xx&eventid=xx close #653", "files_name": ["plugin/controllers/web.py"]}, {"commit_id": "605af9458c10a1b38fc87462b421364a5f4d2a67", "commit_date": "Sun Sep 10 11:50:52 2017 +0200", "commit_message": "set maxDiff=None in order to see all differences", "files_name": ["testsuite/movie_files_testsuite.py"]}, {"commit_id": "9cce99aac04d35256e360b1aff87809ff9474c67", "commit_date": "Sun Sep 10 11:52:47 2017 +0200", "commit_message": "add default value for 'lastseen' key/value pair", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "f5878e2245243a50c4b625d225734e5fc8c01ea0", "commit_date": "Sun Sep 10 12:27:09 2017 +0200", "commit_message": "no need to quote filename portions.", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "67e55e9974ae7a5eb0ecb7f686cdbdf012e6d975", "commit_date": "Sun Sep 10 12:34:57 2017 +0200", "commit_message": "fix: set content-type if returning JSON dataset", "files_name": ["plugin/controllers/web.py"]}, {"commit_id": "d036f55727ed0d9b98ce6746ef86c594adbfcd0a", "commit_date": "Sun Sep 10 12:42:03 2017 +0200", "commit_message": "no need to quote filename portions.", "files_name": ["plugin/controllers/models/movies.py"]}, {"commit_id": "a4c243dd26266347fc19e14ccf510199d0e63a67", "commit_date": "Sun Sep 10 12:57:14 2017 +0200", "commit_message": "Merge pull request #654 from doubleO8/feature-movie-controller-cleanup", "files_name": ["7eb9cc1c0f13f1bb0a50b14e64354e7831e02e4f - Sun Sep 10 14:17:28 2017 +0200 : Merge branch 'master' into feature-restful-file-access", "d8b3675303859432881f721e8d2b865ab1ec25a8 - Mon Sep 11 17:09:50 2017 +0200 : fix saving config values plugin configs normally have 'plugins' and 'pluginname' as attributes, so list length can be 4", "plugin/controllers/web.py"]}, {"commit_id": "2dd996a90326e13aa35d76e21c354d1ac670de30", "commit_date": "Tue Sep 12 00:10:21 2017 +0200", "commit_message": "Update last commit", "files_name": ["plugin/controllers/web.py"]}, {"commit_id": "b17d798cd40eba7fcd5aa72d683fe1ec07515af5", "commit_date": "Wed Sep 13 22:18:01 2017 +0200", "commit_message": "Improve visual feedback when adding a timer in multiepg When two events on different channels have the the same event id, the callback from adding a timer might have added the timer mark to the wrong event.", "files_name": ["plugin/controllers/views/ajax/epgpop.tmpl", "plugin/controllers/views/ajax/event.tmpl", "plugin/controllers/views/main.tmpl", "plugin/public/js/openwebif-1.2.10.min.js", "plugin/public/js/openwebif-1.2.11.min.js", "sourcefiles/js/openwebif.js"]}, {"commit_id": "0a7c3edf13cf656258a95fdc8dd1efa3c215ccb8", "commit_date": "Wed Sep 13 22:47:41 2017 +0200", "commit_message": "Merge pull request #655 from rdamas/master", "files_name": ["578a307758481aeac77fb0a1fafe2ce277318321 - Thu Sep 14 17:48:45 2017 +0200 : initial implementation of a remote code execution vulnerability testcase", "testsuite/evil_eval.py"]}, {"commit_id": "17793ac1f77355d76ad72351529dd356ca66853c", "commit_date": "Thu Sep 14 17:56:40 2017 +0200", "commit_message": "move helper function to separate library", "files_name": [".gitignore", "plugin/controllers/utilities.py", "testsuite/evil_eval.py"]}, {"commit_id": "8c153c1b66a11bddfb9158a6075fb4033ae3fc06", "commit_date": "Thu Sep 14 17:58:22 2017 +0200", "commit_message": "Merge branch 'master' into evil-eval-evil", "files_name": ["7f6fd062d538b2f1c30c80ec424ada6e2b9d5b74 - Thu Sep 14 18:23:55 2017 +0200 : use get_config_attribute for getting requested config attribute", "plugin/controllers/models/config.py"]}, {"commit_id": "09a050c8f04afd3bb4a14af98994be255aae10d9", "commit_date": "Fri Sep 15 11:47:46 2017 +0200", "commit_message": "Merge pull request #658 from doubleO8/evil-eval-evil", "files_name": ["31b3d315f53b69b06013c14c316db57d41e10f31 - Fri Sep 15 13:23:39 2017 +0200 : Merge pull request #645 from Huevos/patch-2", "209440882d01efb89623f225c881dd39debcb13e - Fri Sep 15 15:55:44 2017 +0200 : Merge branch 'master' into feature-restful-file-access", "12db23c52e0930e370d0898dafcc314aea3b1fc8 - Fri Sep 15 18:04:50 2017 +0200 : bail out if *directory* seems to be no directory after all", "plugin/controllers/models/movies.py"]}, {"commit_id": "3507240a6ff8c2b00a2038348375672a91be45a9", "commit_date": "Fri Sep 15 18:32:21 2017 +0200", "commit_message": "Merge pull request #659 from doubleO8/feature-check-if-directory-exists-in-getMovieList", "files_name": ["2bcb77b28637b36e4fd74a5037b16fd37498b877 - Fri Sep 15 18:44:29 2017 +0200 : Prepare fix #624", "plugin/controllers/views/ajax/edittimer.tmpl", "sourcefiles/js/openwebif.js"]}, {"commit_id": "92033c11f26ebd149c3e6e3753177671107c43d3", "commit_date": "Fri Sep 15 18:50:59 2017 +0200", "commit_message": "remove document.write", "files_name": ["plugin/controllers/views/main.tmpl"]}, {"commit_id": "2ab83482d3685dce3e34dc7ac0a19b136eb94466", "commit_date": "Fri Sep 15 23:13:59 2017 +0200", "commit_message": "improve edit timer #631/#624 Pick from https://github.com/rdamas/e2openplugin-OpenWebif/commit/47f041285ec25a7e049d049aeae6e15e046753fd", "files_name": ["plugin/controllers/views/ajax/epgpop.tmpl", "plugin/controllers/views/main.tmpl", "plugin/public/js/openwebif-1.2.11.min.js", "plugin/public/js/openwebif-1.2.12.min.js", "sourcefiles/js/openwebif.js"]}, {"commit_id": "d61a1bccbd2184dd815f42de3fca5a83f58c8660", "commit_date": "Sat Sep 16 11:59:19 2017 +0200", "commit_message": "first shot: include evil eval testcase", "files_name": [".travis.yml"]}, {"commit_id": "3631ae1bd2415aac0b65f99efdaa8fc93b0c9f70", "commit_date": "Sat Sep 16 12:26:38 2017 +0200", "commit_message": "Merge pull request #660 from doubleO8/feature-travis-unittest-integration", "files_name": ["210b398eb1e5fe2f3949dcd829557e0dcae761df - Sat Sep 16 13:14:26 2017 +0200 : Zap channel via multiepg #656", "plugin/controllers/views/ajax/multiepg.tmpl"]}, {"commit_id": "39e62067b40e9eaa90d8d29b5369aab9854a7362", "commit_date": "Sat Sep 16 18:10:14 2017 +0200", "commit_message": "addtional testing", "files_name": ["testsuite/evil_eval.py"]}, {"commit_id": "c974e956c39aba13096ebb934bf50821103041ad", "commit_date": "Sat Sep 16 18:11:07 2017 +0200", "commit_message": "drop flawed sanitisation as this will be done in config.py/saveConfig", "files_name": ["plugin/controllers/web.py"]}, {"commit_id": "dd4f420e4aa2fd098037027a60209391a9017afe", "commit_date": "Sat Sep 16 18:13:06 2017 +0200", "commit_message": "using the 'in' operator improves readability", "files_name": ["plugin/controllers/models/config.py"]}, {"commit_id": "65a7a8c8fd20ef6e41f34daa03c2c1f3bab76cd5", "commit_date": "Sun Sep 17 02:19:36 2017 +0200", "commit_message": "Update .travis.yml", "files_name": [".travis.yml"]}, {"commit_id": "64efb7aeb1f53d64ba4ffe3c5123a0fd9f94da75", "commit_date": "Sun Sep 17 02:24:13 2017 +0200", "commit_message": "Update .travis.yml", "files_name": [".travis.yml"]}, {"commit_id": "640eae228f00186e53be3878368fe0eabfdeb2bc", "commit_date": "Sun Sep 17 16:18:57 2017 +0200", "commit_message": "small improvement png dm900 Transparent layer was not 100% transparent. Remains in transparent layer removed.", "files_name": ["plugin/public/images/boxes/dm900.png"]}, {"commit_id": "8aa46b13160abec9d5d4df72f8ea8a6973fda95b", "commit_date": "Sun Sep 17 18:45:09 2017 +0200", "commit_message": "Merge pull request #661 from Hains/master", "files_name": ["66a2684292cf78f0437d5527d41f5c9efaa12a43 - Sun Sep 17 18:53:29 2017 +0200 : Add support /media/mmc/picon/ like for Zgemma H5 series micro SD reader", "plugin/controllers/models/info.py"]}, {"commit_id": "e1ba7eea68542ad10c44d8ea7e807ba0e9e32b05", "commit_date": "Sun Sep 17 19:08:59 2017 +0200", "commit_message": "Merge pull request #663 from pr2git/master", "files_name": ["898f9c370da87d1931312be55c34581154097613 - Sun Sep 17 19:39:24 2017 +0200 : update travis config", ".travis.yml"]}, {"commit_id": "57116995edc9c21c64224f9c7fc986221159c6d0", "commit_date": "Sun Sep 17 19:46:07 2017 +0200", "commit_message": "Add and correction on french translation", "files_name": ["locale/fr.po"]}, {"commit_id": "40e1e4175d0bc6c3888f118ddafec01e7293e371", "commit_date": "Sun Sep 17 19:51:37 2017 +0200", "commit_message": "Merge pull request #664 from pr2git/master", "files_name": ["67353c301735a6ffe3dc669df7ade8774e4ff1d9 - Sun Sep 17 19:58:30 2017 +0200 : Update Travis config", ".travis.yml"]}, {"commit_id": "a72b2da4752de431ee8d0733c0dda190d02a2690", "commit_date": "Sun Sep 17 20:08:54 2017 +0200", "commit_message": "update readme -> link to bandit report -> link to latest ipk", "files_name": ["README.md"]}, {"commit_id": "dfe647b6561df2dc3bd9c188c4ca2e5fa413381c", "commit_date": "Mon Sep 18 02:00:38 2017 +0200", "commit_message": "remove popen", "files_name": ["plugin/controllers/ipkg.py"]}, {"commit_id": "e64e44ed1529156fc06bef272bd7a447fe4d3706", "commit_date": "Mon Sep 18 02:16:23 2017 +0200", "commit_message": "improve subprocess.check_output", "files_name": ["plugin/controllers/ipkg.py"]}, {"commit_id": "8977ef4241eafd4414183f7fa65772d94d4c0ad2", "commit_date": "Mon Sep 18 10:19:34 2017 +0200", "commit_message": "Bandit exclude", "files_name": ["plugin/controllers/ipkg.py"]}, {"commit_id": "99db8439fbd47a648940d4bf01229103988a791a", "commit_date": "Mon Sep 18 11:48:48 2017 +0200", "commit_message": "fix bandit issues", "files_name": ["plugin/controllers/BQE.py", "plugin/controllers/BouquetEditor.py", "plugin/controllers/ipkg.py", "plugin/controllers/web.py"]}, {"commit_id": "f70a3772dc874fa906687e1b44dce0d4dbe7b964", "commit_date": "Mon Sep 18 12:16:49 2017 +0200", "commit_message": "fix bandit issues", "files_name": ["plugin/controllers/base.py", "plugin/controllers/models/owibranding.py", "plugin/controllers/web.py", "plugin/httpserver.py"]}, {"commit_id": "b24df2df71ba5b34cecd49a9e05fbaf6b1430343", "commit_date": "Mon Sep 18 17:12:39 2017 +0200", "commit_message": "Redesign ipkg \u2014 PLEASE TEST!!!!", "files_name": ["plugin/controllers/ipkg.py"]}, {"commit_id": "803a771adb0a60d7a7bbde4a10b084bac76107f5", "commit_date": "Mon Sep 18 18:53:46 2017 +0200", "commit_message": "redesign ipkg part 2", "files_name": ["plugin/controllers/ipkg.py"]}, {"commit_id": "d5b068e171087a4cb776eb90b7c411ba2e3af225", "commit_date": "Mon Sep 18 19:28:33 2017 +0200", "commit_message": "Fix typo", "files_name": ["plugin/controllers/ipkg.py"]}, {"commit_id": "04f38c0289e0b177bb51715e289802d65296b007", "commit_date": "Tue Sep 19 20:38:44 2017 +0200", "commit_message": "Merge branch 'master' of https://github.com/E2OpenPlugins/e2openplugin-OpenWebif", "files_name": ["f7fd56b9916005f0c84ac615608b47d99f5b8af1 - Tue Sep 19 21:34:38 2017 +0200 : Bandit exclude", "plugin/controllers/models/config.py", "plugin/controllers/models/info.py", "plugin/controllers/models/timers.py"]}, {"commit_id": "e1123df090fd8e78e74295a52122ed784db4ecef", "commit_date": "Wed Sep 20 18:56:48 2017 +0200", "commit_message": "improve file api", "files_name": ["CHANGES.md", "plugin/controllers/file.py", "plugin/controllers/models/info.py"]}, {"commit_id": "37e60a4ed5ae38855e09b0b7832ca8e0137d7221", "commit_date": "Fri Sep 22 16:22:37 2017 +0200", "commit_message": "add Xsarius Pure HD SE", "files_name": ["plugin/controllers/models/owibranding.py", "plugin/public/images/boxes/purehdse.png"]}, {"commit_id": "38dceb42001f729ace56d3dc1750f808f7ecd871", "commit_date": "Fri Sep 22 17:29:26 2017 +0200", "commit_message": "Merge branch 'master' of https://github.com/E2OpenPlugins/e2openplugin-OpenWebif", "files_name": ["ea27ddb1a5a201e42108b91478e0adf7a337acc5 - Sat Sep 16 18:10:14 2017 +0200 : addtional testing", "testsuite/evil_eval.py"]}, {"commit_id": "ff36d3d9d957f50f61301cdd31ab47c387574898", "commit_date": "Sat Sep 16 18:11:07 2017 +0200", "commit_message": "drop flawed sanitisation as this will be done in config.py/saveConfig", "files_name": ["plugin/controllers/web.py"]}, {"commit_id": "752bcdf5cfb66c0aef7f6983ddb7977a77bd02bf", "commit_date": "Sat Sep 16 18:13:06 2017 +0200", "commit_message": "using the 'in' operator improves readability", "files_name": ["plugin/controllers/models/config.py"]}, {"commit_id": "d7e88f94d8ede90c07056e7d2bca96a3aa3540a3", "commit_date": "Fri Sep 22 22:50:00 2017 +0200", "commit_message": "Merge pull request #666 from doubleO8/feature-drop-obsolete-santisation", "files_name": ["0d52b46432b395117e86af964f1d0da33699b85f - Sat Sep 23 15:53:24 2017 +0200 : Display correct unit for autotimer interval", "plugin/local.py"]}, {"commit_id": "71780382bff60df5b1ecdced1392b503d82146d1", "commit_date": "Sat Sep 23 17:16:00 2017 +0200", "commit_message": "Merge branch 'master' into feature-restful-file-access", "files_name": ["d894af42b6215356b59b8f33f705749c22e718f8 - Sat Sep 23 17:26:35 2017 +0200 : code cleanup; minor refactoring", "plugin/controllers/root.py"]}, {"commit_id": "8e6dd953b4dca37541134872d39e47ec3f7d778f", "commit_date": "Sat Sep 23 17:29:58 2017 +0200", "commit_message": "legacy file/FileController detection", "files_name": ["plugin/controllers/rest_fs_access.py"]}, {"commit_id": "ebaa55b86984e9732933482c9fdfe5291228f175", "commit_date": "Sat Sep 23 17:31:07 2017 +0200", "commit_message": "drop 'recursive listing of files and folders' feature as this may be a resource hog", "files_name": ["plugin/controllers/rest_fs_access.py"]}], "parents": [{"commit_id_before": "e447d851604f29896a5434f4301283cda3c46a84", "url_before": "https://api.github.com/repos/E2OpenPlugins/e2openplugin-OpenWebif/commits/e447d851604f29896a5434f4301283cda3c46a84", "html_url_before": "https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/commit/e447d851604f29896a5434f4301283cda3c46a84"}], "details": [{"raw_url": "https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/raw/a846b7664eda3a4c51a452e00638cf7337dc2013/plugin%2Fcontrollers%2Ffile.py", "code": "# -*- coding: utf-8 -*-\n\n##############################################################################\n#                        2011 E2OpenPlugins                                  #\n#                                                                            #\n#  This file is open source software; you can redistribute it and/or modify  #\n#     it under the terms of the GNU General Public License version 2 as      #\n#               published by the Free Software Foundation.                   #\n#                                                                            #\n##############################################################################\n\nimport os\nimport re\nimport glob\nfrom urllib import quote\nimport json\n\nfrom twisted.web import static, resource, http\n\nfrom Components.config import config\nfrom Tools.Directories import fileExists\nfrom utilities import lenient_force_utf_8, sanitise_filename_slashes\n\n\ndef new_getRequestHostname(self):\n\thost = self.getHeader(b'host')\n\tif host:\n\t\tif host[0]=='[':\n\t\t\treturn host.split(']',1)[0] + \"]\"\n\t\treturn host.split(':', 1)[0].encode('ascii')\n\treturn self.getHost().host.encode('ascii')\n\nhttp.Request.getRequestHostname = new_getRequestHostname\n\n\nclass FileController(resource.Resource):\n\tdef render(self, request):\n\t\taction = \"download\"\n\t\tif \"action\" in request.args:\n\t\t\taction = request.args[\"action\"][0]\n\n\t\tif \"file\" in request.args:\n\t\t\tfilename = lenient_force_utf_8(request.args[\"file\"][0])\n\t\t\tfilename = sanitise_filename_slashes(os.path.realpath(filename))\n\n\t\t\tif not os.path.exists(filename):\n\t\t\t\treturn \"File '%s' not found\" % (filename)\n\n\t\t\tif action == \"stream\":\n\t\t\t\tname = \"stream\"\n\t\t\t\tif \"name\" in request.args:\n\t\t\t\t\tname = request.args[\"name\"][0]\n\n\t\t\t\tport = config.OpenWebif.port.value\n\t\t\t\tproto = 'http'\n\t\t\t\tif request.isSecure():\n\t\t\t\t\tport = config.OpenWebif.https_port.value\n\t\t\t\t\tproto = 'https'\n\t\t\t\tourhost = request.getHeader('host')\n\t\t\t\tm = re.match('.+\\:(\\d+)$', ourhost)\n\t\t\t\tif m is not None:\n\t\t\t\t\tport = m.group(1)\n\n\t\t\t\tresponse = \"#EXTM3U\\n#EXTVLCOPT--http-reconnect=true\\n#EXTINF:-1,%s\\n%s://%s:%s/file?action=download&file=%s\" % (name, proto, request.getRequestHostname(), port, quote(filename))\n\t\t\t\trequest.setHeader(\"Content-Disposition\", 'attachment;filename=\"%s.m3u\"' % name)\n\t\t\t\trequest.setHeader(\"Content-Type\", \"application/x-mpegurl\")\n\t\t\t\treturn response\n\t\t\telif action == \"delete\":\n\t\t\t\trequest.setResponseCode(http.OK)\n\t\t\t\treturn \"TODO: DELETE FILE: %s\" % (filename)\n\t\t\telif action == \"download\":\n\t\t\t\trequest.setHeader(\"Content-Disposition\", \"attachment;filename=\\\"%s\\\"\" % (filename.split('/')[-1]))\n\t\t\t\trfile = static.File(filename, defaultType = \"application/octet-stream\")\n\t\t\t\treturn rfile.render(request)\n\t\t\telse: \n\t\t\t\treturn \"wrong action parameter\"\n\n\t\tif \"dir\" in request.args:\n\t\t\tpath = request.args[\"dir\"][0]\n\t\t\tpattern = '*'\n\t\t\tdata = []\n\t\t\tif \"pattern\" in request.args:\n\t\t\t\tpattern = request.args[\"pattern\"][0]\n\t\t\tdirectories = []\n\t\t\tfiles = []\n\t\t\tif fileExists(path):\n\t\t\t\ttry:\n\t\t\t\t\tfiles = glob.glob(path+'/'+pattern)\n\t\t\t\texcept:\n\t\t\t\t\tfiles = []\n\t\t\t\tfiles.sort()\n\t\t\t\ttmpfiles = files[:]\n\t\t\t\tfor x in tmpfiles:\n\t\t\t\t\tif os.path.isdir(x):\n\t\t\t\t\t\tdirectories.append(x + '/')\n\t\t\t\t\t\tfiles.remove(x)\n\t\t\t\tdata.append({\"result\": True,\"dirs\": directories,\"files\": files})\n\t\t\telse:\n\t\t\t\tdata.append({\"result\": False,\"message\": \"path %s not exits\" % (path)})\n\t\t\trequest.setHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t\t\treturn json.dumps(data, indent=2)\n", "code_before": "# -*- coding: utf-8 -*-\n\n##############################################################################\n#                        2011 E2OpenPlugins                                  #\n#                                                                            #\n#  This file is open source software; you can redistribute it and/or modify  #\n#     it under the terms of the GNU General Public License version 2 as      #\n#               published by the Free Software Foundation.                   #\n#                                                                            #\n##############################################################################\n\nimport os\nimport re\nimport glob\nfrom urllib import quote\nimport json\n\nfrom twisted.web import static, resource, http\n\nfrom Components.config import config\nfrom Tools.Directories import fileExists\n\ndef new_getRequestHostname(self):\n\thost = self.getHeader(b'host')\n\tif host:\n\t\tif host[0]=='[':\n\t\t\treturn host.split(']',1)[0] + \"]\"\n\t\treturn host.split(':', 1)[0].encode('ascii')\n\treturn self.getHost().host.encode('ascii')\n\nhttp.Request.getRequestHostname = new_getRequestHostname\n\n\nclass FileController(resource.Resource):\n\tdef render(self, request):\n\t\taction = \"download\"\n\t\tif \"action\" in request.args:\n\t\t\taction = request.args[\"action\"][0]\n\n\t\tif \"file\" in request.args:\n\t\t\tfilename = request.args[\"file\"][0].decode('utf-8', 'ignore').encode('utf-8')\n\t\t\tfilename = re.sub(\"^/+\", \"/\", os.path.realpath(filename))\n\n\t\t\tif not os.path.exists(filename):\n\t\t\t\treturn \"File '%s' not found\" % (filename)\n\n\t\t\tif action == \"stream\":\n\t\t\t\tname = \"stream\"\n\t\t\t\tif \"name\" in request.args:\n\t\t\t\t\tname = request.args[\"name\"][0]\n\n\t\t\t\tport = config.OpenWebif.port.value\n\t\t\t\tproto = 'http'\n\t\t\t\tif request.isSecure():\n\t\t\t\t\tport = config.OpenWebif.https_port.value\n\t\t\t\t\tproto = 'https'\n\t\t\t\tourhost = request.getHeader('host')\n\t\t\t\tm = re.match('.+\\:(\\d+)$', ourhost)\n\t\t\t\tif m is not None:\n\t\t\t\t\tport = m.group(1)\n\n\t\t\t\tresponse = \"#EXTM3U\\n#EXTVLCOPT--http-reconnect=true\\n#EXTINF:-1,%s\\n%s://%s:%s/file?action=download&file=%s\" % (name, proto, request.getRequestHostname(), port, quote(filename))\n\t\t\t\trequest.setHeader(\"Content-Disposition\", 'attachment;filename=\"%s.m3u\"' % name)\n\t\t\t\trequest.setHeader(\"Content-Type\", \"application/x-mpegurl\")\n\t\t\t\treturn response\n\t\t\telif action == \"delete\":\n\t\t\t\trequest.setResponseCode(http.OK)\n\t\t\t\treturn \"TODO: DELETE FILE: %s\" % (filename)\n\t\t\telif action == \"download\":\n\t\t\t\trequest.setHeader(\"Content-Disposition\", \"attachment;filename=\\\"%s\\\"\" % (filename.split('/')[-1]))\n\t\t\t\trfile = static.File(filename, defaultType = \"application/octet-stream\")\n\t\t\t\treturn rfile.render(request)\n\t\t\telse: \n\t\t\t\treturn \"wrong action parameter\"\n\n\t\tif \"dir\" in request.args:\n\t\t\tpath = request.args[\"dir\"][0]\n\t\t\tpattern = '*'\n\t\t\tdata = []\n\t\t\tif \"pattern\" in request.args:\n\t\t\t\tpattern = request.args[\"pattern\"][0]\n\t\t\tdirectories = []\n\t\t\tfiles = []\n\t\t\tif fileExists(path):\n\t\t\t\ttry:\n\t\t\t\t\tfiles = glob.glob(path+'/'+pattern)\n\t\t\t\texcept:\n\t\t\t\t\tfiles = []\n\t\t\t\tfiles.sort()\n\t\t\t\ttmpfiles = files[:]\n\t\t\t\tfor x in tmpfiles:\n\t\t\t\t\tif os.path.isdir(x):\n\t\t\t\t\t\tdirectories.append(x + '/')\n\t\t\t\t\t\tfiles.remove(x)\n\t\t\t\tdata.append({\"result\": True,\"dirs\": directories,\"files\": files})\n\t\t\telse:\n\t\t\t\tdata.append({\"result\": False,\"message\": \"path %s not exits\" % (path)})\n\t\t\trequest.setHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t\t\treturn json.dumps(data, indent=2)\n", "patch": "@@ -19,6 +19,8 @@\n \n from Components.config import config\n from Tools.Directories import fileExists\n+from utilities import lenient_force_utf_8, sanitise_filename_slashes\n+\n \n def new_getRequestHostname(self):\n \thost = self.getHeader(b'host')\n@@ -38,8 +40,8 @@ def render(self, request):\n \t\t\taction = request.args[\"action\"][0]\n \n \t\tif \"file\" in request.args:\n-\t\t\tfilename = request.args[\"file\"][0].decode('utf-8', 'ignore').encode('utf-8')\n-\t\t\tfilename = re.sub(\"^/+\", \"/\", os.path.realpath(filename))\n+\t\t\tfilename = lenient_force_utf_8(request.args[\"file\"][0])\n+\t\t\tfilename = sanitise_filename_slashes(os.path.realpath(filename))\n \n \t\t\tif not os.path.exists(filename):\n \t\t\t\treturn \"File '%s' not found\" % (filename)", "file_path": "files/2018_12\\70", "file_language": "py", "file_name": "plugin/controllers/file.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 1, "static": {"rats": [false, []], "semgrep": [true, ["       python.flask.security.audit.directly-returned-format-string.directly-returned-format-string    \n          Detected Flask route directly returning a formatted string. This is subject to cross-site   \n          scripting if user input can reach the string. Consider using the template engine instead and\n          rendering pages with 'render_template()'.                                                   \n          Details: https://sg.run/Zv6o                                                                \n\n           45\u2506 return \"File '%s' not found\" % (filename)"]]}, "target": 1, "function_before": [{"function": "def new_getRequestHostname(self):\n\thost = self.getHeader(b'host')\n\tif host:\n\t\tif host[0]=='[':\n\t\t\treturn host.split(']',1)[0] + \"]\"\n\t\treturn host.split(':', 1)[0].encode('ascii')\n\treturn self.getHost().host.encode('ascii')", "target": 1, "line": "@@  -19,6 +19,8  @@\n \n from Components.config import config\n from Tools.Directories import fileExists\n+from utilities import lenient_force_utf_8, sanitise_filename_slashes\n+\n \n def new_getRequestHostname(self):\n \thost = self.getHeader(b'host')\n"}, {"function": "class FileController(resource.Resource):\n\tdef render(self, request):\n\t\taction = \"download\"\n\t\tif \"action\" in request.args:\n\t\t\taction = request.args[\"action\"][0]\n\n\t\tif \"file\" in request.args:\n\t\t\tfilename = request.args[\"file\"][0].decode('utf-8', 'ignore').encode('utf-8')\n\t\t\tfilename = re.sub(\"^/+\", \"/\", os.path.realpath(filename))\n\n\t\t\tif not os.path.exists(filename):\n\t\t\t\treturn \"File '%s' not found\" % (filename)\n\n\t\t\tif action == \"stream\":\n\t\t\t\tname = \"stream\"\n\t\t\t\tif \"name\" in request.args:\n\t\t\t\t\tname = request.args[\"name\"][0]\n\n\t\t\t\tport = config.OpenWebif.port.value\n\t\t\t\tproto = 'http'\n\t\t\t\tif request.isSecure():\n\t\t\t\t\tport = config.OpenWebif.https_port.value\n\t\t\t\t\tproto = 'https'\n\t\t\t\tourhost = request.getHeader('host')\n\t\t\t\tm = re.match('.+\\:(\\d+)$', ourhost)\n\t\t\t\tif m is not None:\n\t\t\t\t\tport = m.group(1)\n\n\t\t\t\tresponse = \"#EXTM3U\\n#EXTVLCOPT--http-reconnect=true\\n#EXTINF:-1,%s\\n%s://%s:%s/file?action=download&file=%s\" % (name, proto, request.getRequestHostname(), port, quote(filename))\n\t\t\t\trequest.setHeader(\"Content-Disposition\", 'attachment;filename=\"%s.m3u\"' % name)\n\t\t\t\trequest.setHeader(\"Content-Type\", \"application/x-mpegurl\")\n\t\t\t\treturn response\n\t\t\telif action == \"delete\":\n\t\t\t\trequest.setResponseCode(http.OK)\n\t\t\t\treturn \"TODO: DELETE FILE: %s\" % (filename)\n\t\t\telif action == \"download\":\n\t\t\t\trequest.setHeader(\"Content-Disposition\", \"attachment;filename=\\\"%s\\\"\" % (filename.split('/')[-1]))\n\t\t\t\trfile = static.File(filename, defaultType = \"application/octet-stream\")\n\t\t\t\treturn rfile.render(request)\n\t\t\telse: \n\t\t\t\treturn \"wrong action parameter\"\n\n\t\tif \"dir\" in request.args:\n\t\t\tpath = request.args[\"dir\"][0]\n\t\t\tpattern = '*'\n\t\t\tdata = []\n\t\t\tif \"pattern\" in request.args:\n\t\t\t\tpattern = request.args[\"pattern\"][0]\n\t\t\tdirectories = []\n\t\t\tfiles = []\n\t\t\tif fileExists(path):\n\t\t\t\ttry:\n\t\t\t\t\tfiles = glob.glob(path+'/'+pattern)\n\t\t\t\texcept:\n\t\t\t\t\tfiles = []\n\t\t\t\tfiles.sort()\n\t\t\t\ttmpfiles = files[:]\n\t\t\t\tfor x in tmpfiles:\n\t\t\t\t\tif os.path.isdir(x):\n\t\t\t\t\t\tdirectories.append(x + '/')\n\t\t\t\t\t\tfiles.remove(x)\n\t\t\t\tdata.append({\"result\": True,\"dirs\": directories,\"files\": files})\n\t\t\telse:\n\t\t\t\tdata.append({\"result\": False,\"message\": \"path %s not exits\" % (path)})\n\t\t\trequest.setHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t\t\treturn json.dumps(data, indent=2)", "target": 1, "line": "@@  -38,8 +40,8  @@ def render(self, request):\n \t\t\taction = request.args[\"action\"][0]\n \n \t\tif \"file\" in request.args:\n-\t\t\tfilename = request.args[\"file\"][0].decode('utf-8', 'ignore').encode('utf-8')\n-\t\t\tfilename = re.sub(\"^/+\", \"/\", os.path.realpath(filename))\n+\t\t\tfilename = lenient_force_utf_8(request.args[\"file\"][0])\n+\t\t\tfilename = sanitise_filename_slashes(os.path.realpath(filename))\n \n \t\t\tif not os.path.exists(filename):\n \t\t\t\treturn \"File '%s' not found\" % (filename)"}], "function_after": [{"function": "def new_getRequestHostname(self):\n\thost = self.getHeader(b'host')\n\tif host:\n\t\tif host[0]=='[':\n\t\t\treturn host.split(']',1)[0] + \"]\"\n\t\treturn host.split(':', 1)[0].encode('ascii')\n\treturn self.getHost().host.encode('ascii')", "target": 0}, {"function": "class FileController(resource.Resource):\n\tdef render(self, request):\n\t\taction = \"download\"\n\t\tif \"action\" in request.args:\n\t\t\taction = request.args[\"action\"][0]\n\n\t\tif \"file\" in request.args:\n\t\t\tfilename = lenient_force_utf_8(request.args[\"file\"][0])\n\t\t\tfilename = sanitise_filename_slashes(os.path.realpath(filename))\n\n\t\t\tif not os.path.exists(filename):\n\t\t\t\treturn \"File '%s' not found\" % (filename)\n\n\t\t\tif action == \"stream\":\n\t\t\t\tname = \"stream\"\n\t\t\t\tif \"name\" in request.args:\n\t\t\t\t\tname = request.args[\"name\"][0]\n\n\t\t\t\tport = config.OpenWebif.port.value\n\t\t\t\tproto = 'http'\n\t\t\t\tif request.isSecure():\n\t\t\t\t\tport = config.OpenWebif.https_port.value\n\t\t\t\t\tproto = 'https'\n\t\t\t\tourhost = request.getHeader('host')\n\t\t\t\tm = re.match('.+\\:(\\d+)$', ourhost)\n\t\t\t\tif m is not None:\n\t\t\t\t\tport = m.group(1)\n\n\t\t\t\tresponse = \"#EXTM3U\\n#EXTVLCOPT--http-reconnect=true\\n#EXTINF:-1,%s\\n%s://%s:%s/file?action=download&file=%s\" % (name, proto, request.getRequestHostname(), port, quote(filename))\n\t\t\t\trequest.setHeader(\"Content-Disposition\", 'attachment;filename=\"%s.m3u\"' % name)\n\t\t\t\trequest.setHeader(\"Content-Type\", \"application/x-mpegurl\")\n\t\t\t\treturn response\n\t\t\telif action == \"delete\":\n\t\t\t\trequest.setResponseCode(http.OK)\n\t\t\t\treturn \"TODO: DELETE FILE: %s\" % (filename)\n\t\t\telif action == \"download\":\n\t\t\t\trequest.setHeader(\"Content-Disposition\", \"attachment;filename=\\\"%s\\\"\" % (filename.split('/')[-1]))\n\t\t\t\trfile = static.File(filename, defaultType = \"application/octet-stream\")\n\t\t\t\treturn rfile.render(request)\n\t\t\telse: \n\t\t\t\treturn \"wrong action parameter\"\n\n\t\tif \"dir\" in request.args:\n\t\t\tpath = request.args[\"dir\"][0]\n\t\t\tpattern = '*'\n\t\t\tdata = []\n\t\t\tif \"pattern\" in request.args:\n\t\t\t\tpattern = request.args[\"pattern\"][0]\n\t\t\tdirectories = []\n\t\t\tfiles = []\n\t\t\tif fileExists(path):\n\t\t\t\ttry:\n\t\t\t\t\tfiles = glob.glob(path+'/'+pattern)\n\t\t\t\texcept:\n\t\t\t\t\tfiles = []\n\t\t\t\tfiles.sort()\n\t\t\t\ttmpfiles = files[:]\n\t\t\t\tfor x in tmpfiles:\n\t\t\t\t\tif os.path.isdir(x):\n\t\t\t\t\t\tdirectories.append(x + '/')\n\t\t\t\t\t\tfiles.remove(x)\n\t\t\t\tdata.append({\"result\": True,\"dirs\": directories,\"files\": files})\n\t\t\telse:\n\t\t\t\tdata.append({\"result\": False,\"message\": \"path %s not exits\" % (path)})\n\t\t\trequest.setHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t\t\treturn json.dumps(data, indent=2)", "target": 0}]}, {"raw_url": "https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/raw/a846b7664eda3a4c51a452e00638cf7337dc2013/plugin%2Fcontrollers%2Frest_fs_access.py", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nRESTful Filesystem access using HTTP\n------------------------------------\n\nThis controller and helper classes exposes parts or all of the server's\nfilesystem. Means to retrieve and delete files are provided as well as the\nability to list folder contents.\n\nThe generated responses are returned as JSON data with appropriate HTTP headers.\nOutput will be compressed using gzip most of the times.\n\nExample calls using curl\n++++++++++++++++++++++++\n\nThe following examples assume that the FileController instance is accessible\nas '/file' on 'localhost', port 18888 (http://localhost:18888/file).\n\nFetch list of files and folders in root folder:\n\n    curl --noproxy localhost -iv http://localhost:18888/file\n\nFetch example file 'example.txt'\n\n    curl --noproxy localhost -iv http://localhost:18888/file/example.txt\n\nFetch gzipped example file 'example.txt'\n\n    curl --compressed -H \"Accept-Encoding: gzip\" --noproxy localhost -iv http://localhost:18888/file/example.txt\n\nDelete example file 'example.txt'\n\n    curl --noproxy localhost -iv -X DELETE http://localhost:18888/file/example.txt\n\n\"\"\"\nimport os\nimport json\nimport glob\nimport re\nimport urlparse\n\nimport twisted.web.static\nfrom twisted.web import http\n\nfrom utilities import MANY_SLASHES_REGEX\nimport file\n\n#: default path from which files will be served\nDEFAULT_ROOT_PATH = os.path.abspath(os.path.dirname(__file__))\n\n#: CORS - HTTP headers the client may use\nCORS_ALLOWED_CLIENT_HEADERS = [\n\t'Content-Type',\n]\n\n#: CORS - HTTP methods the client may use\nCORS_ALLOWED_METHODS_DEFAULT = ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS']\n\n#: CORS - default origin header value\nCORS_DEFAULT_ALLOW_ORIGIN = '*'\n\n#: CORS - HTTP headers the server will send as part of OPTIONS response\nCORS_DEFAULT = {\n\t'Access-Control-Allow-Origin': CORS_DEFAULT_ALLOW_ORIGIN,\n\t'Access-Control-Allow-Credentials': 'true',\n\t'Access-Control-Max-Age': '86400',\n\t'Access-Control-Allow-Methods': ','.join(CORS_ALLOWED_METHODS_DEFAULT),\n\t'Access-Control-Allow-Headers': ', '.join(CORS_ALLOWED_CLIENT_HEADERS)\n}\n\n#: paths where file delete operations shall be allowed\nDELETE_WHITELIST = [\n\t'/media',\n]\n\n\nclass FileController(twisted.web.resource.Resource):\n\tisLeaf = True\n\t_override_args = (\n\t\t'resource_prefix', 'root', 'do_delete', 'delete_whitelist')\n\t_resource_prefix = '/file'\n\t_root = os.path.abspath(os.path.dirname(__file__))\n\t_do_delete = False\n\t_delete_whitelist = DELETE_WHITELIST\n\tnever_gzip_extensions = ('.ts',)\n\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tDefault Constructor.\n\n\t\tArgs:\n\t\t\tresource_prefix: Prefix value for this controller instance.\n\t\t\t\tDefault is :py:data:`FileController._resource_prefix`\n\t\t\troot: Root path of files to be served.\n\t\t\t\tDefault is the path where the current file is located\n\t\t\tdo_delete: Try to actually delete files?\n\t\t\t\tDefault is False.\n\t\t\tdelete_whitelist: Folder prefixes where delete operations are\n\t\t\t\tallowed _at all_. Default is :py:data:`DELETE_WHITELIST`\n\t\t\"\"\"\n\t\tif args:\n\t\t\tfor key, value in zip(self._override_args, args):\n\t\t\t\tkwargs[key] = value\n\n\t\tfor arg_name in self._override_args:\n\t\t\tif kwargs.get(arg_name) is not None:\n\t\t\t\tattr_name = '_{:s}'.format(arg_name)\n\t\t\t\tsetattr(self, attr_name, kwargs.get(arg_name))\n\t\tself.session = kwargs.get(\"session\")\n\n\tdef _json_response(self, request, data):\n\t\t\"\"\"\n\t\tCreate a JSON representation for *data* and set HTTP headers indicating\n\t\tthat JSON encoded data is returned.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tdata: response content\n\t\tReturns:\n\t\t\tJSON representation of *data* with appropriate HTTP headers\n\t\t\"\"\"\n\t\trequest.setHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t\treturn json.dumps(data, indent=2)\n\n\tdef get_response_data_template(self, request):\n\t\t\"\"\"\n\t\tGenerate a response data :class:`dict` containing default values and\n\t\tsome request attribute values for debugging purposes.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\t(dict) response template data\n\t\t\"\"\"\n\t\tfile_path = None\n\t\tif request.path.startswith(self._resource_prefix):\n\t\t\tfile_path = request.path[len(self._resource_prefix):]\n\n\t\tresponse_data = {\n\t\t\t\"_request\": {\n\t\t\t\t\"path\": request.path,\n\t\t\t\t\"uri\": request.uri,\n\t\t\t\t\"method\": request.method,\n\t\t\t\t\"postpath\": request.postpath,\n\t\t\t\t\"file_path\": file_path,\n\t\t\t},\n\t\t\t\"result\": False,\n\t\t}\n\n\t\treturn response_data\n\n\tdef error_response(self, request, response_code=None, **kwargs):\n\t\t\"\"\"\n\t\tCreate and return an HTTP error response with data as JSON.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tresponse_code: HTTP Status Code (default is 500)\n\t\t\t**kwargs: additional key/value pairs\n\t\tReturns:\n\t\t\tJSON encoded data with appropriate HTTP headers\n\t\t\"\"\"\n\t\tif response_code is None:\n\t\t\tresponse_code = http.INTERNAL_SERVER_ERROR\n\n\t\tresponse_data = self.get_response_data_template(request)\n\t\tresponse_data.update(**kwargs)\n\n\t\tresponse_data['me'] = dict()\n\t\tfor arg_name in self._override_args:\n\t\t\tattr_name = '_{:s}'.format(arg_name)\n\t\t\tresponse_data['me'][attr_name] = getattr(self, attr_name)\n\n\t\trequest.setResponseCode(response_code)\n\t\treturn self._json_response(request, response_data)\n\n\tdef _existing_path_or_bust(self, request):\n\t\t\"\"\"\n\t\tVerify that a filesystem location which is contained in *request.path*\n\t\tis valid and an existing path.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tpath\n\t\tRaises:\n\t\t\tValueError: If contained path value is invalid.\n\t\t\tIOError: If contained path value is not existing.\n\t\t\"\"\"\n\t\trq_path = urlparse.unquote(request.path)\n\t\tif not rq_path.startswith(self._resource_prefix):\n\t\t\traise ValueError(\"Invalid Request Path {!r}\".format(request.path))\n\n\t\tfile_path = os.path.join(\n\t\t\tself._root, rq_path[len(self._resource_prefix) + 1:])\n\t\tfile_path = re.sub(MANY_SLASHES_REGEX, '/', file_path)\n\n\t\tif not os.path.exists(file_path):\n\t\t\traise IOError(\"Not Found {!r}\".format(file_path))\n\n\t\treturn file_path\n\n\tdef render_OPTIONS(self, request):\n\t\t\"\"\"\n\t\tRender response for an HTTP OPTIONS request.\n\n\t\tExample request\n\n\t\t\tcurl -iv --noproxy localhost http://localhost:18888/file\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\tfor key in CORS_DEFAULT:\n\t\t\trequest.setHeader(key, CORS_DEFAULT[key])\n\n\t\treturn ''\n\n\tdef render_legacy(self, request):\n\t\t\"\"\"\n\t\tRender response for an HTTP GET request. In order to maintain\n\t\tbackward compatibility this method emulates the behaviour of the\n\t\tlegacy method implementation.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\treturn file.FileController().render(request)\n\n\tdef _glob(self, path, pattern='*'):\n\t\tif path == '/':\n\t\t\tglob_me = '/' + pattern\n\t\telse:\n\t\t\tglob_me = '/'.join((path, pattern))\n\t\treturn glob.iglob(glob_me)\n\n\tdef _walk(self, path):\n\t\tfor root, dirs, files in os.walk(path):\n\t\t\tfor dir_item in dirs:\n\t\t\t\tyield os.path.join(root, dir_item)\n\t\t\tfor file_item in files:\n\t\t\t\tyield os.path.join(root, file_item)\n\n\tdef render_path_listing(self, request, path):\n\t\t\"\"\"\n\t\tGenerate a file/folder listing of *path*'s contents.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tpath: folder location\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\tresponse_data = self.get_response_data_template(request)\n\t\tresponse_data.update(\n\t\t\t{\n\t\t\t\t'result': True,\n\t\t\t\t'dirs': [],\n\t\t\t\t'files': [],\n\t\t\t}\n\t\t)\n\n\t\tgenerator = None\n\t\tif \"pattern\" in request.args:\n\t\t\tgenerator = self._glob(path, request.args[\"pattern\"][0])\n\n\t\tif \"recursive\" in request.args:\n\t\t\tgenerator = self._walk(path)\n\n\t\tif generator is None:\n\t\t\tgenerator = self._glob(path)\n\n\t\tfor item in generator:\n\t\t\tif os.path.isdir(item):\n\t\t\t\tresponse_data['dirs'].append(item)\n\t\t\telse:\n\t\t\t\tresponse_data['files'].append(item)\n\n\t\treturn self._json_response(request, response_data)\n\n\tdef render_file(self, request, path):\n\t\t\"\"\"\n\t\tReturn the contents of file *path*.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tpath: file path\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\t(_, ext) = os.path.splitext(path)\n\n\t\tif ext in self.never_gzip_extensions:\n\t\t\t# hack: remove gzip from the list of supported encodings\n\t\t\tacceptHeaders = request.requestHeaders.getRawHeaders(\n\t\t\t\t'accept-encoding', [])\n\t\t\tsupported = ','.join(acceptHeaders).split(',')\n\t\t\trequest.requestHeaders.setRawHeaders(\n\t\t\t\t'accept-encoding', list(set(supported) - {'gzip'}))\n\n\t\tresult = twisted.web.static.File(\n\t\t\tpath, defaultType=\"application/octet-stream\")\n\n\t\treturn result.render(request)\n\n\tdef render_GET(self, request):\n\t\t\"\"\"\n\t\tHTTP GET request handler returning\n\n\t\t\t* legacy response if the query *file* or *dir* parameter is set\n\t\t\t* file contents if *request.path* contains a file path\n\t\t\t* directory listing if *request.path* contains a folder path\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\tattic_args = {'file', 'dir'}\n\n\t\tif len(attic_args & set(request.args.keys())) >= 1:\n\t\t\treturn self.render_legacy(request)\n\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\n\t\ttry:\n\t\t\ttarget_path = self._existing_path_or_bust(request)\n\t\texcept ValueError as vexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.BAD_REQUEST, message=vexc.message)\n\t\texcept IOError as iexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.NOT_FOUND, message=iexc.message)\n\n\t\tif os.path.isdir(target_path):\n\t\t\treturn self.render_path_listing(request, target_path)\n\t\telse:\n\t\t\treturn self.render_file(request, target_path)\n\n\tdef render_POST(self, request):\n\t\t\"\"\"\n\t\tHTTP POST request handler (currently NOT implemented).\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\t\treturn self.error_response(request, response_code=http.NOT_IMPLEMENTED)\n\n\tdef render_PUT(self, request):\n\t\t\"\"\"\n\t\tHTTP PUT request handler (currently NOT implemented).\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\t\treturn self.error_response(request, response_code=http.NOT_IMPLEMENTED)\n\n\tdef render_DELETE(self, request):\n\t\t\"\"\"\n\t\tHTTP DELETE request handler which may try to delete a file if its\n\t\tpath's prefix is in :py:data:`FileController._delete_whitelist` and\n\t\t:py:data:`FileController._do_delete` is True.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\n\t\ttry:\n\t\t\ttarget_path = self._existing_path_or_bust(request)\n\t\texcept ValueError as vexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.BAD_REQUEST, message=vexc.message)\n\t\texcept IOError as iexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.NOT_FOUND, message=iexc.message)\n\n\t\tif os.path.isdir(target_path):\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.NOT_IMPLEMENTED,\n\t\t\t\tmessage='Will not remove folder {!r}'.format(target_path))\n\n\t\tfor prefix in self._delete_whitelist:\n\t\t\tif not target_path.startswith(os.path.abspath(prefix)):\n\t\t\t\treturn self.error_response(request,\n\t\t\t\t\t\t\t\t\t\t   response_code=http.FORBIDDEN)\n\n\t\tresponse_data = self.get_response_data_template(request)\n\t\ttry:\n\t\t\tresponse_data['result'] = True\n\t\t\tif self._do_delete:\n\t\t\t\tos.unlink(target_path)\n\t\t\t\tmessage = 'Removed {!r}'.format(target_path)\n\t\t\telse:\n\t\t\t\tmessage = 'WOULD remove {!r}'.format(target_path)\n\t\t\tresponse_data['message'] = message\n\t\texcept Exception as eexc:\n\t\t\tresponse_data['message'] = 'Cannot remove {!r}: {!s}'.format(\n\t\t\t\ttarget_path, eexc.message)\n\t\t\trequest.setResponseCode(http.INTERNAL_SERVER_ERROR)\n\n\t\treturn self._json_response(request, response_data)\n\n\nif __name__ == '__main__':\n\tfrom twisted.web.resource import Resource, EncodingResourceWrapper\n\tfrom twisted.web.server import Site, GzipEncoderFactory\n\tfrom twisted.internet import reactor\n\n\t# standard factory example\n\tfactory_s = Site(FileController(DEFAULT_ROOT_PATH))\n\n\t# experimental factory\n\troot = Resource()\n\troot.putChild(\"/\", FileController)\n\troot.putChild(\"/file\", FileController)\n\tfactory_r = Site(root)\n\n\t#  experimental factory: enable gzip compression\n\twrapped = EncodingResourceWrapper(\n\t\tFileController(\n\t\t\troot=DEFAULT_ROOT_PATH,\n\t\t\t# DANGER, WILL ROBINSON! These values allow deletion of ALL files!\n\t\t\tdo_delete=True, delete_whitelist=[]\n\t\t),\n\t\t[GzipEncoderFactory()])\n\tfactory_s_gz = Site(wrapped)\n\n\treactor.listenTCP(18888, factory_s_gz)\n\treactor.run()\n", "code_before": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nRESTful Filesystem access using HTTP\n------------------------------------\n\nThis controller and helper classes exposes parts or all of the server's\nfilesystem. Means to retrieve and delete files are provided as well as the\nability to list folder contents.\n\nThe generated responses are returned as JSON data with appropriate HTTP headers.\nOutput will be compressed using gzip most of the times.\n\nExample calls using curl\n++++++++++++++++++++++++\n\nThe following examples assume that the FileController instance is accessible\nas '/file' on 'localhost', port 18888 (http://localhost:18888/file).\n\nFetch list of files and folders in root folder:\n\n    curl --noproxy localhost -iv http://localhost:18888/file\n\nFetch example file 'example.txt'\n\n    curl --noproxy localhost -iv http://localhost:18888/file/example.txt\n\nFetch gzipped example file 'example.txt'\n\n    curl --compressed -H \"Accept-Encoding: gzip\" --noproxy localhost -iv http://localhost:18888/file/example.txt\n\nDelete example file 'example.txt'\n\n    curl --noproxy localhost -iv -X DELETE http://localhost:18888/file/example.txt\n\n\"\"\"\nimport os\nimport json\nimport glob\nimport re\nimport urlparse\n\nimport twisted.web.static\nfrom twisted.web import http\n\nimport file\n\nMANY_SLASHES_PATTERN = r'[\\/]+'\nMANY_SLASHES_REGEX = re.compile(MANY_SLASHES_PATTERN)\n\n#: default path from which files will be served\nDEFAULT_ROOT_PATH = os.path.abspath(os.path.dirname(__file__))\n\n#: CORS - HTTP headers the client may use\nCORS_ALLOWED_CLIENT_HEADERS = [\n\t'Content-Type',\n]\n\n#: CORS - HTTP methods the client may use\nCORS_ALLOWED_METHODS_DEFAULT = ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS']\n\n#: CORS - default origin header value\nCORS_DEFAULT_ALLOW_ORIGIN = '*'\n\n#: CORS - HTTP headers the server will send as part of OPTIONS response\nCORS_DEFAULT = {\n\t'Access-Control-Allow-Origin': CORS_DEFAULT_ALLOW_ORIGIN,\n\t'Access-Control-Allow-Credentials': 'true',\n\t'Access-Control-Max-Age': '86400',\n\t'Access-Control-Allow-Methods': ','.join(CORS_ALLOWED_METHODS_DEFAULT),\n\t'Access-Control-Allow-Headers': ', '.join(CORS_ALLOWED_CLIENT_HEADERS)\n}\n\n#: paths where file delete operations shall be allowed\nDELETE_WHITELIST = [\n\t'/media',\n]\n\n\nclass FileController(twisted.web.resource.Resource):\n\tisLeaf = True\n\t_override_args = (\n\t\t'resource_prefix', 'root', 'do_delete', 'delete_whitelist')\n\t_resource_prefix = '/file'\n\t_root = os.path.abspath(os.path.dirname(__file__))\n\t_do_delete = False\n\t_delete_whitelist = DELETE_WHITELIST\n\tnever_gzip_extensions = ('.ts',)\n\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tDefault Constructor.\n\n\t\tArgs:\n\t\t\tresource_prefix: Prefix value for this controller instance.\n\t\t\t\tDefault is :py:data:`FileController._resource_prefix`\n\t\t\troot: Root path of files to be served.\n\t\t\t\tDefault is the path where the current file is located\n\t\t\tdo_delete: Try to actually delete files?\n\t\t\t\tDefault is False.\n\t\t\tdelete_whitelist: Folder prefixes where delete operations are\n\t\t\t\tallowed _at all_. Default is :py:data:`DELETE_WHITELIST`\n\t\t\"\"\"\n\t\tif args:\n\t\t\tfor key, value in zip(self._override_args, args):\n\t\t\t\tkwargs[key] = value\n\n\t\tfor arg_name in self._override_args:\n\t\t\tif kwargs.get(arg_name) is not None:\n\t\t\t\tattr_name = '_{:s}'.format(arg_name)\n\t\t\t\tsetattr(self, attr_name, kwargs.get(arg_name))\n\t\tself.session = kwargs.get(\"session\")\n\n\tdef _json_response(self, request, data):\n\t\t\"\"\"\n\t\tCreate a JSON representation for *data* and set HTTP headers indicating\n\t\tthat JSON encoded data is returned.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tdata: response content\n\t\tReturns:\n\t\t\tJSON representation of *data* with appropriate HTTP headers\n\t\t\"\"\"\n\t\trequest.setHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t\treturn json.dumps(data, indent=2)\n\n\tdef get_response_data_template(self, request):\n\t\t\"\"\"\n\t\tGenerate a response data :class:`dict` containing default values and\n\t\tsome request attribute values for debugging purposes.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\t(dict) response template data\n\t\t\"\"\"\n\t\tfile_path = None\n\t\tif request.path.startswith(self._resource_prefix):\n\t\t\tfile_path = request.path[len(self._resource_prefix):]\n\n\t\tresponse_data = {\n\t\t\t\"_request\": {\n\t\t\t\t\"path\": request.path,\n\t\t\t\t\"uri\": request.uri,\n\t\t\t\t\"method\": request.method,\n\t\t\t\t\"postpath\": request.postpath,\n\t\t\t\t\"file_path\": file_path,\n\t\t\t},\n\t\t\t\"result\": False,\n\t\t}\n\n\t\treturn response_data\n\n\tdef error_response(self, request, response_code=None, **kwargs):\n\t\t\"\"\"\n\t\tCreate and return an HTTP error response with data as JSON.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tresponse_code: HTTP Status Code (default is 500)\n\t\t\t**kwargs: additional key/value pairs\n\t\tReturns:\n\t\t\tJSON encoded data with appropriate HTTP headers\n\t\t\"\"\"\n\t\tif response_code is None:\n\t\t\tresponse_code = http.INTERNAL_SERVER_ERROR\n\n\t\tresponse_data = self.get_response_data_template(request)\n\t\tresponse_data.update(**kwargs)\n\n\t\tresponse_data['me'] = dict()\n\t\tfor arg_name in self._override_args:\n\t\t\tattr_name = '_{:s}'.format(arg_name)\n\t\t\tresponse_data['me'][attr_name] = getattr(self, attr_name)\n\n\t\trequest.setResponseCode(response_code)\n\t\treturn self._json_response(request, response_data)\n\n\tdef _existing_path_or_bust(self, request):\n\t\t\"\"\"\n\t\tVerify that a filesystem location which is contained in *request.path*\n\t\tis valid and an existing path.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tpath\n\t\tRaises:\n\t\t\tValueError: If contained path value is invalid.\n\t\t\tIOError: If contained path value is not existing.\n\t\t\"\"\"\n\t\trq_path = urlparse.unquote(request.path)\n\t\tif not rq_path.startswith(self._resource_prefix):\n\t\t\traise ValueError(\"Invalid Request Path {!r}\".format(request.path))\n\n\t\tfile_path = os.path.join(\n\t\t\tself._root, rq_path[len(self._resource_prefix) + 1:])\n\t\tfile_path = re.sub(MANY_SLASHES_REGEX, '/', file_path)\n\n\t\tif not os.path.exists(file_path):\n\t\t\traise IOError(\"Not Found {!r}\".format(file_path))\n\n\t\treturn file_path\n\n\tdef render_OPTIONS(self, request):\n\t\t\"\"\"\n\t\tRender response for an HTTP OPTIONS request.\n\n\t\tExample request\n\n\t\t\tcurl -iv --noproxy localhost http://localhost:18888/file\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\tfor key in CORS_DEFAULT:\n\t\t\trequest.setHeader(key, CORS_DEFAULT[key])\n\n\t\treturn ''\n\n\tdef render_legacy(self, request):\n\t\t\"\"\"\n\t\tRender response for an HTTP GET request. In order to maintain\n\t\tbackward compatibility this method emulates the behaviour of the\n\t\tlegacy method implementation.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\treturn file.FileController().render(request)\n\n\tdef _glob(self, path, pattern='*'):\n\t\tif path == '/':\n\t\t\tglob_me = '/' + pattern\n\t\telse:\n\t\t\tglob_me = '/'.join((path, pattern))\n\t\treturn glob.iglob(glob_me)\n\n\tdef _walk(self, path):\n\t\tfor root, dirs, files in os.walk(path):\n\t\t\tfor dir_item in dirs:\n\t\t\t\tyield os.path.join(root, dir_item)\n\t\t\tfor file_item in files:\n\t\t\t\tyield os.path.join(root, file_item)\n\n\tdef render_path_listing(self, request, path):\n\t\t\"\"\"\n\t\tGenerate a file/folder listing of *path*'s contents.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tpath: folder location\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\tresponse_data = self.get_response_data_template(request)\n\t\tresponse_data.update(\n\t\t\t{\n\t\t\t\t'result': True,\n\t\t\t\t'dirs': [],\n\t\t\t\t'files': [],\n\t\t\t}\n\t\t)\n\n\t\tgenerator = None\n\t\tif \"pattern\" in request.args:\n\t\t\tgenerator = self._glob(path, request.args[\"pattern\"][0])\n\n\t\tif \"recursive\" in request.args:\n\t\t\tgenerator = self._walk(path)\n\n\t\tif generator is None:\n\t\t\tgenerator = self._glob(path)\n\n\t\tfor item in generator:\n\t\t\tif os.path.isdir(item):\n\t\t\t\tresponse_data['dirs'].append(item)\n\t\t\telse:\n\t\t\t\tresponse_data['files'].append(item)\n\n\t\treturn self._json_response(request, response_data)\n\n\tdef render_file(self, request, path):\n\t\t\"\"\"\n\t\tReturn the contents of file *path*.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\t\tpath: file path\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\t(_, ext) = os.path.splitext(path)\n\n\t\tif ext in self.never_gzip_extensions:\n\t\t\t# hack: remove gzip from the list of supported encodings\n\t\t\tacceptHeaders = request.requestHeaders.getRawHeaders(\n\t\t\t\t'accept-encoding', [])\n\t\t\tsupported = ','.join(acceptHeaders).split(',')\n\t\t\trequest.requestHeaders.setRawHeaders(\n\t\t\t\t'accept-encoding', list(set(supported) - {'gzip'}))\n\n\t\tresult = twisted.web.static.File(\n\t\t\tpath, defaultType=\"application/octet-stream\")\n\n\t\treturn result.render(request)\n\n\tdef render_GET(self, request):\n\t\t\"\"\"\n\t\tHTTP GET request handler returning\n\n\t\t\t* legacy response if the query *file* or *dir* parameter is set\n\t\t\t* file contents if *request.path* contains a file path\n\t\t\t* directory listing if *request.path* contains a folder path\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\tattic_args = {'file', 'dir'}\n\n\t\tif len(attic_args & set(request.args.keys())) >= 1:\n\t\t\treturn self.render_legacy(request)\n\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\n\t\ttry:\n\t\t\ttarget_path = self._existing_path_or_bust(request)\n\t\texcept ValueError as vexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.BAD_REQUEST, message=vexc.message)\n\t\texcept IOError as iexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.NOT_FOUND, message=iexc.message)\n\n\t\tif os.path.isdir(target_path):\n\t\t\treturn self.render_path_listing(request, target_path)\n\t\telse:\n\t\t\treturn self.render_file(request, target_path)\n\n\tdef render_POST(self, request):\n\t\t\"\"\"\n\t\tHTTP POST request handler (currently NOT implemented).\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\t\treturn self.error_response(request, response_code=http.NOT_IMPLEMENTED)\n\n\tdef render_PUT(self, request):\n\t\t\"\"\"\n\t\tHTTP PUT request handler (currently NOT implemented).\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\t\treturn self.error_response(request, response_code=http.NOT_IMPLEMENTED)\n\n\tdef render_DELETE(self, request):\n\t\t\"\"\"\n\t\tHTTP DELETE request handler which may try to delete a file if its\n\t\tpath's prefix is in :py:data:`FileController._delete_whitelist` and\n\t\t:py:data:`FileController._do_delete` is True.\n\n\t\tArgs:\n\t\t\trequest (twisted.web.server.Request): HTTP request object\n\t\tReturns:\n\t\t\tHTTP response with headers\n\t\t\"\"\"\n\t\trequest.setHeader(\n\t\t\t'Access-Control-Allow-Origin', CORS_DEFAULT_ALLOW_ORIGIN)\n\n\t\ttry:\n\t\t\ttarget_path = self._existing_path_or_bust(request)\n\t\texcept ValueError as vexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.BAD_REQUEST, message=vexc.message)\n\t\texcept IOError as iexc:\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.NOT_FOUND, message=iexc.message)\n\n\t\tif os.path.isdir(target_path):\n\t\t\treturn self.error_response(\n\t\t\t\trequest, response_code=http.NOT_IMPLEMENTED,\n\t\t\t\tmessage='Will not remove folder {!r}'.format(target_path))\n\n\t\tfor prefix in self._delete_whitelist:\n\t\t\tif not target_path.startswith(os.path.abspath(prefix)):\n\t\t\t\treturn self.error_response(request,\n\t\t\t\t\t\t\t\t\t\t   response_code=http.FORBIDDEN)\n\n\t\tresponse_data = self.get_response_data_template(request)\n\t\ttry:\n\t\t\tresponse_data['result'] = True\n\t\t\tif self._do_delete:\n\t\t\t\tos.unlink(target_path)\n\t\t\t\tmessage = 'Removed {!r}'.format(target_path)\n\t\t\telse:\n\t\t\t\tmessage = 'WOULD remove {!r}'.format(target_path)\n\t\t\tresponse_data['message'] = message\n\t\texcept Exception as eexc:\n\t\t\tresponse_data['message'] = 'Cannot remove {!r}: {!s}'.format(\n\t\t\t\ttarget_path, eexc.message)\n\t\t\trequest.setResponseCode(http.INTERNAL_SERVER_ERROR)\n\n\t\treturn self._json_response(request, response_data)\n\n\nif __name__ == '__main__':\n\tfrom twisted.web.resource import Resource, EncodingResourceWrapper\n\tfrom twisted.web.server import Site, GzipEncoderFactory\n\tfrom twisted.internet import reactor\n\n\t# standard factory example\n\tfactory_s = Site(FileController(DEFAULT_ROOT_PATH))\n\n\t# experimental factory\n\troot = Resource()\n\troot.putChild(\"/\", FileController)\n\troot.putChild(\"/file\", FileController)\n\tfactory_r = Site(root)\n\n\t#  experimental factory: enable gzip compression\n\twrapped = EncodingResourceWrapper(\n\t\tFileController(\n\t\t\troot=DEFAULT_ROOT_PATH,\n\t\t\t# DANGER, WILL ROBINSON! These values allow deletion of ALL files!\n\t\t\tdo_delete=True, delete_whitelist=[]\n\t\t),\n\t\t[GzipEncoderFactory()])\n\tfactory_s_gz = Site(wrapped)\n\n\treactor.listenTCP(18888, factory_s_gz)\n\treactor.run()\n", "patch": "@@ -43,11 +43,9 @@\n import twisted.web.static\n from twisted.web import http\n \n+from utilities import MANY_SLASHES_REGEX\n import file\n \n-MANY_SLASHES_PATTERN = r'[\\/]+'\n-MANY_SLASHES_REGEX = re.compile(MANY_SLASHES_PATTERN)\n-\n #: default path from which files will be served\n DEFAULT_ROOT_PATH = os.path.abspath(os.path.dirname(__file__))\n ", "file_path": "files/2018_12\\71", "file_language": "py", "file_name": "plugin/controllers/rest_fs_access.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 0, "static_check": 1, "static": {"rats": [true, ["/data/rdhu/other/Static/tmp/2018_12_71.py:49: High: compile\nMANY_SLASHES_REGEX = re.compile(MANY_SLASHES_PATTERN)\nArgument 1 to this function call should be checked to ensure that it does not\ncome from an untrusted source without first verifying that it contains nothing\ndangerous."]], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
