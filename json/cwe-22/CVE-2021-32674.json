{"index": 6144, "cve_id": "CVE-2021-32674", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "Zope is an open-source web application server. This advisory extends the previous advisory at https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36 with additional cases of TAL expression traversal vulnerabilities. Most Python modules are not available for using in TAL expressions that you can add through-the-web, for example in Zope Page Templates. This restriction avoids file system access, for example via the 'os' module. But some of the untrusted modules are available indirectly through Python modules that are available for direct use. By default, you need to have the Manager role to add or edit Zope Page Templates through the web. Only sites that allow untrusted users to add/edit Zope Page Templates through the web are at risk. The problem has been fixed in Zope 5.2.1 and 4.6.1. The workaround is the same as for https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36: A site administrator can restrict adding/editing Zope Page Templates through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing Zope Page Templates through the web should be restricted to trusted users only.", "cvss": "8.8", "publish_date": "June 8, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "LOW", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "1d897910139e2c0b11984fc9b78c1da1365bec21", "commit_message": "Merge pull request from GHSA-rpcg-f9q6-2mq6\n\n* - Prevent traversal through authorized Python modules in TAL expressions\n\n* - try a more generic solution that doesn't use special casing\n\n* - add suggestions from Maurits\n\n* - integrate remaining suggestions from Maurits", "commit_date": "2021-06-08T07:48:10Z", "project": "zopefoundation/zope", "url": "https://api.github.com/repos/zopefoundation/Zope/commits/1d897910139e2c0b11984fc9b78c1da1365bec21", "html_url": "https://github.com/zopefoundation/Zope/commit/1d897910139e2c0b11984fc9b78c1da1365bec21", "windows_before": [{"commit_id": "15e521bb5f80e8fdcaef6319764132b20a2eaad7", "commit_date": "Fri Jun 4 11:31:57 2021 +0200", "commit_message": "Update README.rst (#976)", "files_name": ["README.rst"]}, {"commit_id": "a48c73a10976a8aa90fdaa4ea69e0a4157d4053b", "commit_date": "Fri Jun 4 10:05:01 2021 +0200", "commit_message": "- use new logo in README", "files_name": ["README.rst"]}, {"commit_id": "08b2b6e84eb93c0287df8b444b71eab9325effb7", "commit_date": "Fri Jun 4 08:58:46 2021 +0200", "commit_message": "Add change log entry for #973", "files_name": ["CHANGES.rst"]}, {"commit_id": "00094d545431720e46a099e0f1fc70bbbc9e6cfa", "commit_date": "Fri Jun 4 08:40:18 2021 +0200", "commit_message": "Run the windows tests on GHA instead of AppVeyor. (#975)", "files_name": [".editorconfig", ".github/workflows/tests.yml", ".meta.toml", "MANIFEST.in", "appveyor.yml", "src/Products/Five/browser/tests/pages.txt", "src/Products/Five/browser/tests/test_pagetemplatefile.py", "src/Zope2/App/tests/test_safe_formatter.py", "tox.ini"]}, {"commit_id": "3f056ab68fd0fa4b4c0ff64e2a8aff29d637a9e9", "commit_date": "Fri Jun 4 08:23:38 2021 +0200", "commit_message": "facelifted Zope logo (#973)", "files_name": ["src/zmi/styles/resources/logo/Zope.svg", "src/zmi/styles/resources/logo/Zope_black.svg", "src/zmi/styles/resources/logo/Zope_black_opacity12.svg", "src/zmi/styles/resources/logo/Zope_symbol.svg", "src/zmi/styles/resources/logo/Zope_symbol_black.svg", "src/zmi/styles/resources/logo/Zope_symbol_white.svg", "src/zmi/styles/resources/logo/Zope_white.svg", "src/zmi/styles/resources/logo/Zope_white_opacity12.svg", "src/zmi/styles/resources/logo/docs/README.md", "src/zmi/styles/resources/logo/docs/img/0_zope_logo.svg", "src/zmi/styles/resources/logo/docs/img/1_construction.svg", "src/zmi/styles/resources/logo/docs/img/2_typography.svg", "src/zmi/styles/resources/logo/docs/img/3_colors.svg", "src/zmi/styles/resources/logo/favicon/android-chrome-192x192.png", "src/zmi/styles/resources/logo/favicon/android-chrome-256x256.png", "src/zmi/styles/resources/logo/favicon/android-chrome.svg", "src/zmi/styles/resources/logo/favicon/apple-touch-icon.png", "src/zmi/styles/resources/logo/favicon/browserconfig.xml", "src/zmi/styles/resources/logo/favicon/favicon-16x16.png", "src/zmi/styles/resources/logo/favicon/favicon-32x32.png", "src/zmi/styles/resources/logo/favicon/favicon-48x48.png", "src/zmi/styles/resources/logo/favicon/favicon.ico", "src/zmi/styles/resources/logo/favicon/favicon.svg", "src/zmi/styles/resources/logo/favicon/mstile-150x150.png", "src/zmi/styles/resources/logo/favicon/mstile-270x270.png", "src/zmi/styles/resources/logo/favicon/mstile-270x270.svg", "src/zmi/styles/resources/logo/favicon/mstile-310x150.png", "src/zmi/styles/resources/logo/favicon/mstile-310x150.svg", "src/zmi/styles/resources/logo/favicon/mstile-310x310.png", "src/zmi/styles/resources/logo/favicon/mstile-70x70.png", "src/zmi/styles/resources/logo/favicon/safari-pinned-tab.svg"]}, {"commit_id": "5620c6117264a66e3338589fcd496ae6b4ceef21", "commit_date": "Fri May 21 14:47:10 2021 +0200", "commit_message": "Update to current version.", "files_name": ["docs/conf.py"]}, {"commit_id": "8e7be68cddb849444323c9495248bf4537d5a662", "commit_date": "Fri May 21 10:07:53 2021 +0200", "commit_message": "- Update to newest compatible versions of dependencies.", "files_name": ["CHANGES.rst", "constraints.txt", "requirements-full.txt", "tox.ini", "versions-prod.cfg", "versions.cfg"]}, {"commit_id": "732f8207728e0c9784e876f10331f1f41f655d7b", "commit_date": "Fri May 21 09:22:38 2021 +0200", "commit_message": "- unpin Zope", "files_name": ["requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "f6680eb2a3fb13114a266fd9729b1e05dc2c0801", "commit_date": "Fri May 21 09:21:29 2021 +0200", "commit_message": "Back to development: 5.2.1", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "169b67f8702554e197ad090a4e5403c17fa482a7", "commit_date": "Fri May 21 09:16:41 2021 +0200", "commit_message": "- pin Zope version", "files_name": ["requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "4cde3b2db9af4b62e111ba338323075128c858b9", "commit_date": "Fri May 21 09:15:21 2021 +0200", "commit_message": "Preparing release 5.2", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "1f8456bf1f908ea46012537d52bd7e752a532c91", "commit_date": "Fri May 21 09:11:02 2021 +0200", "commit_message": "Merge pull request from GHSA-5pr9-v234-jw36", "files_name": ["CHANGES.rst", "src/Products/PageTemplates/Expressions.py", "src/Products/PageTemplates/expression.py", "src/Products/PageTemplates/tests/input/CheckPathTraverse.html", "src/Products/PageTemplates/tests/output/CheckPathTraverse.html", "src/Products/PageTemplates/tests/testChameleonTalesExpressions.py", "src/Products/PageTemplates/tests/testExpressions.py", "src/Products/PageTemplates/tests/testHTMLTests.py"]}, {"commit_id": "1746d5affee450a6b95262ce217fd80328e4c62c", "commit_date": "Tue May 11 09:27:39 2021 +0200", "commit_message": "Fix generating documentation. (#970)", "files_name": [".github/workflows/tests.yml", ".meta.toml", "MANIFEST.in", "setup.cfg", "tox.ini"]}, {"commit_id": "0ecd1cec2ee251d2fdb964aeb9791418c8b75aa4", "commit_date": "Tue May 11 07:37:02 2021 +0200", "commit_message": "Provide friendlier ZMI error message for the Transaction Undo form (#969)", "files_name": ["CHANGES.rst", "src/App/Undo.py", "src/App/dtml/undo.dtml", "src/App/tests/test_ApplicationManager.py"]}, {"commit_id": "0f02ffd4b22ab695bdad7b596d3d72b5c0433e54", "commit_date": "Mon May 10 12:29:07 2021 +0200", "commit_message": "remove unused Sphinx dependency (#968)", "files_name": ["docs/conf.py", "requirements-rtd.txt", "setup.py"]}, {"commit_id": "2a3ed19abffcb81e2a1637fd1d8372cb3826583b", "commit_date": "Sun May 9 12:57:25 2021 +0200", "commit_message": "deprecate App.Common.Dictionary (#966)", "files_name": ["src/App/Common.py"]}, {"commit_id": "f3bfc6423563795ab4ff0e644a11e75ff4435b8a", "commit_date": "Thu May 6 14:32:15 2021 +0200", "commit_message": "field2* converters should not handle files (#963)", "files_name": ["CHANGES.rst", "setup.py", "src/ZPublisher/Converters.py", "src/ZPublisher/tests/test_Converters.py"]}, {"commit_id": "9dc8033f76d8c61ad199b520f4ed9a7f7c0da095", "commit_date": "Sun Apr 25 12:25:34 2021 +0200", "commit_message": "fix typo (#960)", "files_name": ["src/ZPublisher/tests/test_Converters.py"]}, {"commit_id": "98a8c656030cf4e0fa81ca98cb311e305cf6e9aa", "commit_date": "Sun Apr 25 12:08:01 2021 +0200", "commit_message": "Remove obsolete test (#961)", "files_name": ["src/ZPublisher/tests/test_Converters.py"]}, {"commit_id": "8240999bfcac1f8b54fa8adfcd779b7018b5d57c", "commit_date": "Wed Apr 14 10:03:07 2021 +0200", "commit_message": "- Fixed the poll application tutorial in the Zope Developers Guide (fixes #958)", "files_name": ["CHANGES.rst", "docs/zdgbook/GettingStarted.rst"]}, {"commit_id": "25119a5ac7f783b7f59cd3dcaf2519676abeee65", "commit_date": "Fri Mar 12 17:46:36 2021 +0100", "commit_message": "Prevent DeprecationWarning (#941)", "files_name": ["CHANGES.rst", "setup.py", "src/App/Common.py", "src/App/ImageFile.py", "src/OFS/Image.py", "src/OFS/tests/testFileAndImage.py", "src/OFS/tests/testRanges.py", "src/webdav/Collection.py", "src/webdav/PropertySheets.py", "src/webdav/Resource.py"]}, {"commit_id": "a0c7e6f3ab3db450cbff08a7dac3a7a4b109862a", "commit_date": "Tue Mar 2 13:43:53 2021 +0100", "commit_message": "- Update to newest versions of dependencies", "files_name": ["CHANGES.rst", "constraints.txt", "requirements-full.txt", "versions-prod.cfg", "versions.cfg"]}, {"commit_id": "cec3887612d166148bf4a06e22fb8098f730bfd5", "commit_date": "Tue Mar 2 13:38:30 2021 +0100", "commit_message": "Back to development: 5.1.3", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "4634bbdb7f0295ca429f47162874aa9fbde41553", "commit_date": "Tue Mar 2 13:34:05 2021 +0100", "commit_message": "- pin Zope version", "files_name": ["requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "e5f1837f2e52c1cce1d485e8ab0cfb6504c99dfb", "commit_date": "Tue Mar 2 13:33:05 2021 +0100", "commit_message": "Preparing release 5.1.2", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "91910919bb4456e84609e8ebd37668ad9aa8218b", "commit_date": "Tue Mar 2 10:01:07 2021 +0100", "commit_message": "Enforce Zope permissions for recursive XML-RPC data dumps (#955)", "files_name": ["CHANGES.rst", "src/ZPublisher/tests/test_xmlrpc.py", "src/ZPublisher/xmlrpc.py"]}, {"commit_id": "5f53e12c99403b9958a5e545660b0d9669ad9509", "commit_date": "Fri Feb 26 09:10:43 2021 +0100", "commit_message": "- use correct tests badge [ci skip]", "files_name": ["README.rst"]}, {"commit_id": "a62865d0c2913a93f3f8cee722661f140448a61f", "commit_date": "Fri Feb 26 09:06:09 2021 +0100", "commit_message": "- move Chameleon pin", "files_name": ["constraints.txt", "requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "9698121c925a3b8b63e261d5c201444749efb991", "commit_date": "Mon Feb 15 07:01:51 2021 +0100", "commit_message": "fixed css of html code element height (#952)", "files_name": [".gitignore", "src/zmi/styles/resources/zmi_base.css"]}, {"commit_id": "c0cefbdcbc1e170c746360bf030171c316ed327d", "commit_date": "Fri Feb 12 10:32:05 2021 +0100", "commit_message": "The ``compute_size`` method properly returns None if the content does not  have a ``get_size`` method but the parent has. (#949)", "files_name": ["CHANGES.rst", "src/OFS/ObjectManager.py"]}, {"commit_id": "2df1b3caa33d04e2dfd47076ac123aac9fdf840b", "commit_date": "Fri Feb 12 09:37:08 2021 +0100", "commit_message": "Config with zope product (#942)", "files_name": [".editorconfig", ".github/workflows/tests.yml", ".gitignore", ".meta.toml", ".travis.yml", "MANIFEST.in", "appveyor.yml", "setup.cfg", "src/App/Management.py", "src/OFS/Image.py", "src/OFS/tests/test_event.py", "src/Products/Five/browser/adding.py"]}], "windows_after": [{"commit_id": "9847e487b8a8b4863d0cc032013cfdc93581eed8", "commit_date": "Tue Jun 8 09:53:12 2021 +0200", "commit_message": "Preparing release 5.2.1", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "fabdc34486765392176721e2ea101f3572302aec", "commit_date": "Tue Jun 8 09:54:09 2021 +0200", "commit_message": "- pin Zope version", "files_name": ["requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "244d5ad777ce84e91288a6a8c8cab20ba5714686", "commit_date": "Tue Jun 8 09:58:02 2021 +0200", "commit_message": "Back to development: 5.2.2", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "c7cbd86ecdbc110aa1659e6076dfe3cf1a790ba0", "commit_date": "Tue Jun 8 09:59:10 2021 +0200", "commit_message": "- unpin Zope", "files_name": ["requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "2886b2a6a1f1295dd996005249244a86853de5ec", "commit_date": "Tue Jun 8 10:06:13 2021 +0200", "commit_message": "- Update to newest compatible versions of dependencies", "files_name": ["CHANGES.rst", "constraints.txt", "requirements-full.txt", "versions-prod.cfg", "versions.cfg"]}, {"commit_id": "d261b55627b8d8b1cbfbadaf89a124a7c5e269fc", "commit_date": "Thu Jun 10 07:59:58 2021 +0200", "commit_message": "fix version number (#979)", "files_name": ["versions.cfg"]}, {"commit_id": "d26a77be0469d35c178956dafe6ce272256e47c5", "commit_date": "Fri Jun 18 07:24:15 2021 +0200", "commit_message": "fixed header spacing of copyright page (#980)", "files_name": ["src/zmi/styles/resources/zmi_base.css"]}, {"commit_id": "f30212ef52d3211bd305eafc058f4bda0f9b4af8", "commit_date": "Fri Jul 2 14:52:40 2021 +0200", "commit_message": "Deprecate usage of `unicode` converters (#965)", "files_name": ["CHANGES.rst", "docs/zdgbook/ObjectPublishing.rst", "setup.py", "src/App/tests/testManagement.py", "src/OFS/tests/testProperties.py", "src/ZPublisher/Converters.py", "src/ZPublisher/tests/testHTTPRequest.py", "src/ZPublisher/tests/test_Converters.py"]}, {"commit_id": "ad3e004aee3b938928a9d517ef540247035cd7cb", "commit_date": "Fri Jul 2 15:25:41 2021 +0200", "commit_message": "- make sure \"Manager\" users can always modify proxy roles (#984)", "files_name": ["CHANGES.rst", "src/OFS/DTMLMethod.py", "src/OFS/tests/test_DTMLMethod.py"]}, {"commit_id": "3124840e5a455e7228825c899d45206600a15143", "commit_date": "Fri Jul 2 15:32:52 2021 +0200", "commit_message": "- fix broken comment [ci skip]", "files_name": ["src/OFS/tests/test_DTMLMethod.py"]}, {"commit_id": "d1c219d3f44fbb8d647b524c4a7a5e3deb1aab73", "commit_date": "Tue Jul 6 10:01:31 2021 +0200", "commit_message": "- move tempstorage version pin", "files_name": ["versions.cfg"]}, {"commit_id": "e9b93028aaa68be1235d7869a2d394aeca508101", "commit_date": "Wed Jul 28 13:19:33 2021 +0200", "commit_message": "- Prevent ``DeprecationWarnings`` from moved imports in ``AccessControl``", "files_name": ["CHANGES.rst", "src/OFS/tests/testObjectManager.py", "src/OFS/tests/test_DTMLMethod.py", "src/ZPublisher/tests/testBaseRequest.py", "src/Zope2/utilities/zconsole.py"]}, {"commit_id": "f72a18dda8e9bf2aedb46168761668464a4be988", "commit_date": "Sat Jul 31 10:26:08 2021 +0200", "commit_message": "Merge pull request from GHSA-g4gq-j4p2-j8fr", "files_name": ["CHANGES.rst", "constraints.txt", "requirements-full.txt", "setup.py", "versions-prod.cfg"]}, {"commit_id": "929283de779381345d69897f7d9538601db2db78", "commit_date": "Sat Jul 31 10:38:58 2021 +0200", "commit_message": "- fix indentation", "files_name": ["CHANGES.rst"]}, {"commit_id": "afbda447fb8e93791c13e7ef1df71b37524b6d24", "commit_date": "Sat Jul 31 10:40:51 2021 +0200", "commit_message": "Preparing release 5.3", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "4e17a29856f80c82fdee61eadfda1b42fac92ffe", "commit_date": "Sat Jul 31 10:43:10 2021 +0200", "commit_message": "- pin Zope version", "files_name": ["requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "ea9cc6e405f8e766b6862350ad9553ebfa4c3e07", "commit_date": "Sat Jul 31 10:48:48 2021 +0200", "commit_message": "Back to development: 5.3.1", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "01f50db3268ba9b37e38ea1e6e46ab9347a11d52", "commit_date": "Sat Jul 31 10:49:41 2021 +0200", "commit_message": "- unpin Zope", "files_name": ["requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "fb2fcf59f421eafd53c463de724254d97f19ff2d", "commit_date": "Sat Jul 31 11:04:20 2021 +0200", "commit_message": "- Update to newest compatible versions of dependencies", "files_name": ["CHANGES.rst", "constraints.txt", "requirements-full.txt", "versions-prod.cfg", "versions.cfg"]}, {"commit_id": "a10f65857975bc89131c72e4ee33d3e4d46a49a8", "commit_date": "Sat Jul 31 11:07:46 2021 +0200", "commit_message": "- remove unnecessary pin [ci skip]", "files_name": ["requirements-rtd.txt"]}, {"commit_id": "fce0987907f700c2311b6dff40647b8c7f09b0c8", "commit_date": "Sat Jul 31 12:00:13 2021 +0200", "commit_message": "- fix Zope version in the docs [ci skip]", "files_name": ["docs/conf.py"]}, {"commit_id": "a7c1a921aaf29e8d227f13fcf1ab531098c1e758", "commit_date": "Thu Oct 14 09:01:51 2021 +0200", "commit_message": "Reinstate the basic sessioning with Products.Sessions (#989)", "files_name": ["CHANGES.rst", "docs/zopebook/Sessions.rst", "src/Zope2/utilities/skel/etc/zope.conf.in"]}, {"commit_id": "2214f97df576cbfaaf9304e86dbcff9b15cf35fc", "commit_date": "Fri Oct 29 12:04:53 2021 +0200", "commit_message": "Update zope.i18n to 4.8.0. (#991)", "files_name": ["constraints.txt", "requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "b0a514381fe4383ee095247df3ee6b90626f5e1d", "commit_date": "Tue Nov 9 08:38:30 2021 +0100", "commit_message": "Update to a zodbpickle version which supports Python 3.10.", "files_name": ["versions-prod.cfg"]}, {"commit_id": "c1a3e7ca64cd0ac44a14b669f2e297239c291988", "commit_date": "Thu Nov 11 08:14:03 2021 +0100", "commit_message": "Fix RTD builds.", "files_name": [".readthedocs.yaml", "docs/requirements.txt"]}, {"commit_id": "adacc419e7ba09c1c17a2b43256432b315124923", "commit_date": "Fri Nov 19 15:51:39 2021 +0100", "commit_message": "Add support for Python 3.10. (#988)", "files_name": [".github/workflows/tests.yml", ".gitignore", ".meta.toml", "CHANGES.rst", "constraints.txt", "requirements-full.txt", "setup.py", "tox.ini", "versions-prod.cfg", "versions.cfg"]}, {"commit_id": "49e9574fe892cb097453e102c8f09ac7125598aa", "commit_date": "Thu Dec 2 23:52:21 2021 +0100", "commit_message": "Add function ZPublisher.utils.fix_properties. (#993)", "files_name": ["CHANGES.rst", "src/ZPublisher/tests/test_utils.py", "src/ZPublisher/utils.py"]}, {"commit_id": "cb46e54fd09f808d904513c6b6fbc00e0e1acd88", "commit_date": "Thu Dec 9 08:45:20 2021 +0100", "commit_message": "re #994: Update to zope.i18n 4.9.0.", "files_name": ["constraints.txt", "requirements-full.txt", "versions-prod.cfg"]}, {"commit_id": "61260fab5776ea4c8bbbb0129d729d05eb183c4c", "commit_date": "Tue Dec 21 10:03:50 2021 +0100", "commit_message": "Remove deprecated ulines, utext, utokens, ustring from more code. (#995)", "files_name": ["CHANGES.rst", "src/OFS/dtml/properties.dtml", "src/OFS/tests/export.xml", "src/Products/PageTemplates/ZopePageTemplate.py", "src/ZTUtils/Zope.py"]}, {"commit_id": "d3caf28e02b5ba20c3ef74d695a37a41fbf43b3e", "commit_date": "Wed Jan 5 13:22:11 2022 +0100", "commit_message": "- Don't coerce file upload fields for adding DTML Documents/Methods to string.", "files_name": ["CHANGES.rst", "src/OFS/dtml/documentAdd.dtml", "src/OFS/dtml/methodAdd.dtml"]}, {"commit_id": "ba9f5ae81378f0eeeecb0463caf8434b1467ef27", "commit_date": "Thu Jan 6 11:13:45 2022 +0100", "commit_message": "forward port c8a053b (#1001)", "files_name": ["CHANGES.rst", "src/App/version_txt.py"]}, {"commit_id": "88ccbfe705a669da66d24c8b0b51b53947e90cb0", "commit_date": "Thu Jan 6 13:52:05 2022 +0100", "commit_message": "- Enable WebDAV PUT factories to change a newly created object's ID (#1003)", "files_name": ["CHANGES.rst", "src/webdav/NullResource.py", "src/webdav/tests/testPUT_factory.py"]}, {"commit_id": "ea04dd670d1a48d4d5c879d3db38fc2e9b4330bb", "commit_date": "Thu Jan 6 16:48:57 2022 +0100", "commit_message": "Improve type guessing for the default WebDAV PUT factory (#1004)", "files_name": ["CHANGES.rst", "src/Products/PageTemplates/PageTemplateFile.py", "src/Products/PageTemplates/ZopePageTemplate.py", "src/webdav/NullResource.py", "src/webdav/tests/testPUT_factory.py"]}, {"commit_id": "240d566afee325e8029cf92fe39dfd7104838e95", "commit_date": "Sun Jan 9 12:16:38 2022 +0100", "commit_message": "Audit and fix hyperlinks in code and documentation (#1005)", "files_name": ["CHANGES.rst", "docs/index.rst", "docs/maintenance.rst", "docs/news.rst", "docs/zdgbook/Introduction.rst", "docs/zdgbook/Products.rst", "docs/zdgbook/README.txt", "docs/zdgbook/TestingAndDebugging.rst", "docs/zdgbook/ZODBPersistentComponents.rst", "docs/zdgbook/source/_static/default.css", "docs/zopebook/Acquisition.rst", "docs/zopebook/AdvDTML.rst", "docs/zopebook/AdvZPT.rst", "docs/zopebook/AppendixA.rst", "docs/zopebook/AppendixC.rst", "docs/zopebook/AppendixD.rst", "docs/zopebook/BasicObject.rst", "docs/zopebook/BasicScripting.rst", "docs/zopebook/DTML.rst", "docs/zopebook/ExternalTools.rst", "docs/zopebook/InstallingZope.rst", "docs/zopebook/IntroducingZope.rst", "docs/zopebook/MaintainingZope.rst", "docs/zopebook/ObjectOrientation.rst", "docs/zopebook/README.txt", "docs/zopebook/RelationalDatabases.rst", "docs/zopebook/ScriptingZope.rst", "docs/zopebook/Security.rst"]}], "parents": [{"commit_id_before": "15e521bb5f80e8fdcaef6319764132b20a2eaad7", "url_before": "https://api.github.com/repos/zopefoundation/Zope/commits/15e521bb5f80e8fdcaef6319764132b20a2eaad7", "html_url_before": "https://github.com/zopefoundation/Zope/commit/15e521bb5f80e8fdcaef6319764132b20a2eaad7"}], "details": [{"raw_url": "https://github.com/zopefoundation/Zope/raw/1d897910139e2c0b11984fc9b78c1da1365bec21/CHANGES.rst", "code": "Change log\n==========\n\nThese are all the changes for Zope 5, starting with the alpha releases,\nsince the branch point at Zope 4.1.2.\n\nThe change log for the previous version, Zope 4, is at\nhttps://github.com/zopefoundation/Zope/blob/4.x/CHANGES.rst\n\n\n5.2.1 (unreleased)\n------------------\n\n- Prevent unauthorized traversal through authorized Python modules in\n  TAL expressions\n\n- Facelift the Zope logo.\n  (`#973 <https://github.com/zopefoundation/Zope/issues/973>`_)\n\n- Update to newest compatible versions of dependencies.\n\n\n5.2 (2021-05-21)\n----------------\n\n- Prevent traversal to names starting with ``_`` in TAL expressions\n  and fix path expressions for the ``chameleon.tales`` expression engine.\n\n- Provide friendlier ZMI error message for the Transaction Undo form\n  (`#964 <https://github.com/zopefoundation/Zope/issues/964>`_)\n\n- Updated/fixed the poll application tutorial in the Zope Developers Guide\n  (`#958 <https://github.com/zopefoundation/Zope/issues/958>`_)\n\n- Update to newest versions of dependencies.\n\n- Depend on ``zope.datetime`` for the functions ``iso8601_date``,\n  ``rfc850_date``, and ``rfc1123_date`` which used to be in ``App.Common``\n  keeping backwards-compatibility imports in place.\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- With the exception of ``field2bytes``, field converters do no longer try to\n  read file like objects\n  (`#558 <https://github.com/zopefoundation/Zope/issues/558>`_)\n\n\n5.1.2 (2021-03-02)\n------------------\n\n- Enforce Zope permissions during recursive XML-RPC data dumps\n  (`#954 <https://github.com/zopefoundation/Zope/issues/954>`_)\n\n- The ``compute_size`` method properly returns None if the content does not\n  have a ``get_size`` method but the parent has.\n  (`#948 <https://github.com/zopefoundation/Zope/issues/948>`_)\n\n- Fix control panel tab links on all control panel pages\n\n- Update to newest versions of dependencies.\n\n\n5.1.1 (2021-02-10)\n------------------\n\n- Replace (in ``OFS``) the deprecated direct ``id`` access by\n  ``getId`` calls.\n  (`#903 <https://github.com/zopefoundation/Zope/issues/903>`_)\n\n- Update ZMI dependencies for Font Awesome, jQuery and bootstrap.\n\n- Revise debug info GUI\n  (`#937 <https://github.com/zopefoundation/Zope/pull/937>`_)\n\n- Convert ``bytes`` ``HTTPResponse`` header value to ``str``\n  via ``ISO-8859-1`` (the default encoding of ``HTTP/1.1``).\n\n- Fix rendering of not found resources.\n  (`#933 <https://github.com/zopefoundation/Zope/pull/933>`_)\n\n- Update to newest versions of dependencies.\n\n\n5.1 (2020-11-12)\n----------------\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- Exclude characters special for ``chameleon``'s interpolation syntax\n  (i.e. ``${}``) from use in TALES path expressions to reduce the failure risk\n  for the ``chameleon`` interpolation heuristics\n  (`#925 <https://github.com/zopefoundation/Zope/issues/925>`_)\n\nFeatures\n++++++++\n\n- Restore the ZMI `Debug Information` control panel page\n  (`#898 <https://github.com/zopefoundation/Zope/issues/898>`_)\n\nFixes\n+++++\n\n- Fix ZMI visibility of pre elements in error log\n  (`Products.SiteErrorLog#26\n  <https://github.com/zopefoundation/Products.SiteErrorLog/issues/26>`_)\n\n- Fix ``length`` for page template repeat variables\n  (`#913 <https://github.com/zopefoundation/Zope/issues/913>`_)\n\n- Update `isort` to version 5.\n  (`#892 <https://github.com/zopefoundation/Zope/pull/892>`_)\n\n- Update to newest versions of dependencies.\n\n\n5.0 (2020-10-08)\n----------------\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- Drop support for Python 3.5 as it will run out of support soon.\n  (`#841 <https://github.com/zopefoundation/Zope/issues/841>`_)\n\n\nFeatures\n++++++++\n\n- HTTP header encoding support\n  (`#905 <https://github.com/zopefoundation/Zope/pull/905>`_)\n\n- Add support for Python 3.9.\n\n- New interface ``Products.PageTemplates.interfaces.IZopeAwareEngine``.\n  It can be used as the \"provides\" of an adapter registration\n  to adapt a non ``Zope`` tales engine to an engine to be used\n  by ``Zope`` page templates\n  (`#864 <https://github.com/zopefoundation/Zope/issues/864>`_).\n  Currently, the adaptation is used only when the\n  template is rendered with ``chameleon``;\n  with ``zope.pagetemplate``, the engine is used\n  as is - this may change in the future.\n\n- Allow (some) builtins as first element of a (TALES) path expression:\n  in an untrusted context, the builtins from\n  ``AccessControl.safe_builtins`` are allowed;\n  in a trusted context, all Python builtins are allowed in addition\n  (and take precedence)\n  (`zope.tales#23 <https://github.com/zopefoundation/zope.tales/issues/23>`_).\n\n- Support the ``attrs`` predefined template variable again (as\n  far as ``chameleon`` allows it)\n  (`#860 <https://github.com/zopefoundation/Zope/issues/860>`_).\n\n- Use ``Chameleon`` (>= 3.7.2) configuration to get better\n  information for errors detected during template execution\n  (`#837 <https://github.com/zopefoundation/Zope/issues/837>`_).\n\nFixes\n+++++\n\n- Provide a more senseful ``OFS.SimpleItem.Item_w__name__.id``\n  to avoid bugs by use of deprecated direct ``id`` access\n  (as e.g. (`#903 <https://github.com/zopefoundation/Zope/issues/903>`_).\n\n- Update to ``zope.interface > 5.1.0`` to fix a memory leak.\n\n- Fix export of files with non-latin-1 compatible names\n  (`#890 <https://github.com/zopefoundation/Zope/issues/890>`_)\n\n- Avoid unsolicited translations\n  (`#876 <https://github.com/zopefoundation/Zope/issues/876>`_)\n\n- Make \"chameleon-zope context wrapping\" more faithful.\n  (`#873 <https://github.com/zopefoundation/Zope/pull/873/files>`_)\n\n- Let \"unicode conflict resolution\" work for all templates (not just\n  ``ZopePageTemplate``).\n  (`#872 <https://github.com/zopefoundation/Zope/pull/872/files>`_)\n\n- Make \"Unicode Conflict Resolution\" available for templates\n  rendered with ``chameleon``\n  (`Products.CMFPlone#3145\n  <https://github.com/plone/Products.CMFPlone/issues/3145>`_).\n\n- Improve documentation of ``CONTEXTS`` in the \"Zope Book\".\n\n- Decrease cookie size for copy/paste clipboard cookie\n  (`#854 <https://github.com/zopefoundation/Zope/issues/854>`_)\n\n- Fix ``default`` keyword handling in page templates\n  (`#846 <https://github.com/zopefoundation/Zope/issues/846>`_)\n\n- Fix parsing of package version and show correct major version in the ZMI\n\n- Improve solidity of the ``debugError`` method.\n  (`#829 <https://github.com/zopefoundation/Zope/issues/829>`_)\n\n- Fix that ``ZTUtils.LazyFilter`` could not be imported inside a restricted\n  Python script.\n  (`#901 <https://github.com/zopefoundation/Zope/pull/901>`_)\n\nOther changes\n+++++++++++++\n\n- Add ``pyupgrade`` via ``pre-commit``\n  (`#859 <https://github.com/zopefoundation/Zope/issues/859>`_)\n\n- Add ``tal:switch`` test\n\n\n5.0a2 (2020-04-24)\n------------------\n\nBug fixes\n+++++++++\n\n- Pin ``AccessControl`` 4.2 for the `Manage WebDAV Locks` permission\n\n- Fix ``HEAD`` requests on registered views\n  (`#816 <https://github.com/zopefoundation/Zope/issues/816>`_)\n\n- Improve ``chameleon`` --> ``zope.tales`` context wrapper\n  (support for template variable injection)\n  (`#812 <https://github.com/zopefoundation/Zope/pull/812>`_).\n\n- Require ``zope.tales>=5.0.2``\n\n- Fix issue 717 by fully honoring the engine returned by\n  ``PageTemplate.pt_getEngine``\n  (`#717 <https://github.com/zopefoundation/Zope/issues/717>`_).\n  The engine also decides about the use of ``zope.tales``\n  (engine is an instance of ``zope.pagetemplate.engine.ZopeBaseEngine``)\n  or ``chameleon.tales`` (otherwise) TALES expressions.\n\n- Fixed encoding issue of `displayname` WebDAV property\n  (`#797 <https://github.com/zopefoundation/Zope/issues/797>`_)\n\n- Fixed fallback implementation of ``manage_DAVget``\n  (`#799 <https://github.com/zopefoundation/Zope/issues/799>`_)\n\nOther changes\n+++++++++++++\n\n- Update to newest versions of dependencies.\n\n\n5.0a1 (2020-02-28)\n------------------\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- Drop support for Python 2.7 aka Zope 5 cannot be run on Python 2 any more.\n  If you are still running on Python 2.7 upgrade to the latest Zope 4 version\n  first, migrate to Python 3 and than switch to Zope 5.\n  (`#692 <https://github.com/zopefoundation/Zope/issues/692>`_)\n\n- Remove all backwards-compatibility code marked to go away in Zope 5\n  (`#478 <https://github.com/zopefoundation/Zope/issues/478>`_)\n\n- Drop support for running Zope with ZServer as it is Python 2 only.\n  (`#592 <https://github.com/zopefoundation/Zope/issues/592>`_)\n\n- Remove deprecated ``postProcessInputs`` request method.\n  (`#782 <https://github.com/zopefoundation/Zope/issues/782>`_)\n\n- Remove deprecated module ``ZPublisher.maybe_lock``.\n  (`#758 <https://github.com/zopefoundation/Zope/issues/758>`_)\n\n- Remove Help System methods from the product context.\n  (`#756 <https://github.com/zopefoundation/Zope/issues/756>`_)\n\n- Remove more deprecated code.\n  (`#757 <https://github.com/zopefoundation/Zope/issues/757>`_)\n\n- Updated Zope documentation sources for Zope 5.\n  (`#659 <https://github.com/zopefoundation/Zope/issues/659>`_)\n\nNew features\n++++++++++++\n\n- Restore WebDAV support in Zope.\n  (`#744 <https://github.com/zopefoundation/Zope/issues/744>`_)\n\n- Enable WebDAV support independent of ``ZServer``.\n  (`#787 <https://github.com/zopefoundation/Zope/pull/787>`_)\n\n- Clean up and sanitize permissions used for WebDAV-related methods.\n\n- Add ``wsgi.file_wrapper`` implementation\n  https://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handling\n  (`#719 <https://github.com/zopefoundation/Zope/pull/719>`_)\n\nBug fixes\n+++++++++\n\n- Only use ``wsgi.file_wrapper`` for response bodies with a ``read`` method.\n  (`#763 <https://github.com/zopefoundation/Zope/issues/763>`_)\n\n- Improve detection of HTTPS requests.\n  (`#680 <https://github.com/zopefoundation/Zope/issues/680>`_)\n\n- Fix several ZMI links so they respect virtual hosting.\n  (`#788 <https://github.com/zopefoundation/Zope/issues/788>`_)\n\n- Fix sort link URLs on ``manage_main``\n  (`#748 <https://github.com/zopefoundation/Zope/issues/748>`_)\n\n- More tests to make sure all ``__str__`` implementations return native\n  strings.\n  (`#692 <https://github.com/zopefoundation/Zope/issues/692>`_)\n\n- Fix longstanding test bug by forcing the page template engine.\n  Many tests in ``Products.PageTemplates`` used the old Zope page template\n  engine because the correct one was not registered during setup.\n\n- Close opened db during shutdown (as ZServer is already doing).\n  (`#740 <https://github.com/zopefoundation/Zope/issues/740>`_)\n\n- The method ``unrestrictedTraverse`` raises an error when\n  the argument ``path`` is not something it can work with.\n  (`#674 <https://github.com/zopefoundation/Zope/issues/674>`_)\n\n- Improve ZMI Security Tab usability for high numbers of roles.\n  (`#730 <https://github.com/zopefoundation/Zope/issues/730>`_)\n\n- Some small ZMI rendering fixes.\n  (`#729 <https://github.com/zopefoundation/Zope/issues/729>`_)\n\n- Fix error when using database minimize in the ZMI.\n  (`#726 <https://github.com/zopefoundation/Zope/issues/726>`_)\n\n- Fix ``__getattr__`` signature in ``UnauthorizedBinding``.\n  (`#703 <https://github.com/zopefoundation/Zope/issues/703>`_)\n\n- Fix VirtualHostMonster not being able to set mappings under Python 3.\n  (`#708 <https://github.com/zopefoundation/Zope/issues/708>`_)\n\n- Reduce the danger of acquiring built-in names on the ZMI Find tab.\n  (`#712 <https://github.com/zopefoundation/Zope/issues/712>`_)\n\n- Restore the mistakenly removed Properties ZMI tab on Image objects\n  (`#706 <https://github.com/zopefoundation/Zope/issues/706>`_)\n\n- Fix ``OFS.Image.File.__str__`` for ``Pdata`` contents\n  (`#711 <https://github.com/zopefoundation/Zope/issues/711>`_)\n\n- Set ``REMOTE_USER`` in wsgi environ using Zope user authentication\n  (`#713 <https://github.com/zopefoundation/Zope/pull/713>`_)\n\n- Add ``Paste`` as ``extras_require`` dependency to pull in ``Paste`` when\n  installing with `pip` and `constraints.txt` to prevent startup errors.\n  This requires adding the ``[wsgi]`` extra in the egg specification.\n  (`#734 <https://github.com/zopefoundation/Zope/issues/734>`_)\n\nOther changes\n+++++++++++++\n\n- Move retried request delay handling out of ``supports_retry``\n  (`#474 <https://github.com/zopefoundation/Zope/issues/474>`_)\n\n- Improve documentation for Zope's error logging services.\n", "code_before": "Change log\n==========\n\nThese are all the changes for Zope 5, starting with the alpha releases,\nsince the branch point at Zope 4.1.2.\n\nThe change log for the previous version, Zope 4, is at\nhttps://github.com/zopefoundation/Zope/blob/4.x/CHANGES.rst\n\n\n5.2.1 (unreleased)\n------------------\n\n- Update to newest compatible versions of dependencies.\n\n- Facelift the Zope logo.\n  (`#973 <https://github.com/zopefoundation/Zope/issues/973>`_)\n\n\n5.2 (2021-05-21)\n----------------\n\n- Prevent traversal to names starting with ``_`` in TAL expressions\n  and fix path expressions for the ``chameleon.tales`` expression engine.\n\n- Provide friendlier ZMI error message for the Transaction Undo form\n  (`#964 <https://github.com/zopefoundation/Zope/issues/964>`_)\n\n- Updated/fixed the poll application tutorial in the Zope Developers Guide\n  (`#958 <https://github.com/zopefoundation/Zope/issues/958>`_)\n\n- Update to newest versions of dependencies.\n\n- Depend on ``zope.datetime`` for the functions ``iso8601_date``,\n  ``rfc850_date``, and ``rfc1123_date`` which used to be in ``App.Common``\n  keeping backwards-compatibility imports in place.\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- With the exception of ``field2bytes``, field converters do no longer try to\n  read file like objects\n  (`#558 <https://github.com/zopefoundation/Zope/issues/558>`_)\n\n\n5.1.2 (2021-03-02)\n------------------\n\n- Enforce Zope permissions during recursive XML-RPC data dumps\n  (`#954 <https://github.com/zopefoundation/Zope/issues/954>`_)\n\n- The ``compute_size`` method properly returns None if the content does not\n  have a ``get_size`` method but the parent has.\n  (`#948 <https://github.com/zopefoundation/Zope/issues/948>`_)\n\n- Fix control panel tab links on all control panel pages\n\n- Update to newest versions of dependencies.\n\n\n5.1.1 (2021-02-10)\n------------------\n\n- Replace (in ``OFS``) the deprecated direct ``id`` access by\n  ``getId`` calls.\n  (`#903 <https://github.com/zopefoundation/Zope/issues/903>`_)\n\n- Update ZMI dependencies for Font Awesome, jQuery and bootstrap.\n\n- Revise debug info GUI\n  (`#937 <https://github.com/zopefoundation/Zope/pull/937>`_)\n\n- Convert ``bytes`` ``HTTPResponse`` header value to ``str``\n  via ``ISO-8859-1`` (the default encoding of ``HTTP/1.1``).\n\n- Fix rendering of not found resources.\n  (`#933 <https://github.com/zopefoundation/Zope/pull/933>`_)\n\n- Update to newest versions of dependencies.\n\n\n5.1 (2020-11-12)\n----------------\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- Exclude characters special for ``chameleon``'s interpolation syntax\n  (i.e. ``${}``) from use in TALES path expressions to reduce the failure risk\n  for the ``chameleon`` interpolation heuristics\n  (`#925 <https://github.com/zopefoundation/Zope/issues/925>`_)\n\nFeatures\n++++++++\n\n- Restore the ZMI `Debug Information` control panel page\n  (`#898 <https://github.com/zopefoundation/Zope/issues/898>`_)\n\nFixes\n+++++\n\n- Fix ZMI visibility of pre elements in error log\n  (`Products.SiteErrorLog#26\n  <https://github.com/zopefoundation/Products.SiteErrorLog/issues/26>`_)\n\n- Fix ``length`` for page template repeat variables\n  (`#913 <https://github.com/zopefoundation/Zope/issues/913>`_)\n\n- Update `isort` to version 5.\n  (`#892 <https://github.com/zopefoundation/Zope/pull/892>`_)\n\n- Update to newest versions of dependencies.\n\n\n5.0 (2020-10-08)\n----------------\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- Drop support for Python 3.5 as it will run out of support soon.\n  (`#841 <https://github.com/zopefoundation/Zope/issues/841>`_)\n\n\nFeatures\n++++++++\n\n- HTTP header encoding support\n  (`#905 <https://github.com/zopefoundation/Zope/pull/905>`_)\n\n- Add support for Python 3.9.\n\n- New interface ``Products.PageTemplates.interfaces.IZopeAwareEngine``.\n  It can be used as the \"provides\" of an adapter registration\n  to adapt a non ``Zope`` tales engine to an engine to be used\n  by ``Zope`` page templates\n  (`#864 <https://github.com/zopefoundation/Zope/issues/864>`_).\n  Currently, the adaptation is used only when the\n  template is rendered with ``chameleon``;\n  with ``zope.pagetemplate``, the engine is used\n  as is - this may change in the future.\n\n- Allow (some) builtins as first element of a (TALES) path expression:\n  in an untrusted context, the builtins from\n  ``AccessControl.safe_builtins`` are allowed;\n  in a trusted context, all Python builtins are allowed in addition\n  (and take precedence)\n  (`zope.tales#23 <https://github.com/zopefoundation/zope.tales/issues/23>`_).\n\n- Support the ``attrs`` predefined template variable again (as\n  far as ``chameleon`` allows it)\n  (`#860 <https://github.com/zopefoundation/Zope/issues/860>`_).\n\n- Use ``Chameleon`` (>= 3.7.2) configuration to get better\n  information for errors detected during template execution\n  (`#837 <https://github.com/zopefoundation/Zope/issues/837>`_).\n\nFixes\n+++++\n\n- Provide a more senseful ``OFS.SimpleItem.Item_w__name__.id``\n  to avoid bugs by use of deprecated direct ``id`` access\n  (as e.g. (`#903 <https://github.com/zopefoundation/Zope/issues/903>`_).\n\n- Update to ``zope.interface > 5.1.0`` to fix a memory leak.\n\n- Fix export of files with non-latin-1 compatible names\n  (`#890 <https://github.com/zopefoundation/Zope/issues/890>`_)\n\n- Avoid unsolicited translations\n  (`#876 <https://github.com/zopefoundation/Zope/issues/876>`_)\n\n- Make \"chameleon-zope context wrapping\" more faithful.\n  (`#873 <https://github.com/zopefoundation/Zope/pull/873/files>`_)\n\n- Let \"unicode conflict resolution\" work for all templates (not just\n  ``ZopePageTemplate``).\n  (`#872 <https://github.com/zopefoundation/Zope/pull/872/files>`_)\n\n- Make \"Unicode Conflict Resolution\" available for templates\n  rendered with ``chameleon``\n  (`Products.CMFPlone#3145\n  <https://github.com/plone/Products.CMFPlone/issues/3145>`_).\n\n- Improve documentation of ``CONTEXTS`` in the \"Zope Book\".\n\n- Decrease cookie size for copy/paste clipboard cookie\n  (`#854 <https://github.com/zopefoundation/Zope/issues/854>`_)\n\n- Fix ``default`` keyword handling in page templates\n  (`#846 <https://github.com/zopefoundation/Zope/issues/846>`_)\n\n- Fix parsing of package version and show correct major version in the ZMI\n\n- Improve solidity of the ``debugError`` method.\n  (`#829 <https://github.com/zopefoundation/Zope/issues/829>`_)\n\n- Fix that ``ZTUtils.LazyFilter`` could not be imported inside a restricted\n  Python script.\n  (`#901 <https://github.com/zopefoundation/Zope/pull/901>`_)\n\nOther changes\n+++++++++++++\n\n- Add ``pyupgrade`` via ``pre-commit``\n  (`#859 <https://github.com/zopefoundation/Zope/issues/859>`_)\n\n- Add ``tal:switch`` test\n\n\n5.0a2 (2020-04-24)\n------------------\n\nBug fixes\n+++++++++\n\n- Pin ``AccessControl`` 4.2 for the `Manage WebDAV Locks` permission\n\n- Fix ``HEAD`` requests on registered views\n  (`#816 <https://github.com/zopefoundation/Zope/issues/816>`_)\n\n- Improve ``chameleon`` --> ``zope.tales`` context wrapper\n  (support for template variable injection)\n  (`#812 <https://github.com/zopefoundation/Zope/pull/812>`_).\n\n- Require ``zope.tales>=5.0.2``\n\n- Fix issue 717 by fully honoring the engine returned by\n  ``PageTemplate.pt_getEngine``\n  (`#717 <https://github.com/zopefoundation/Zope/issues/717>`_).\n  The engine also decides about the use of ``zope.tales``\n  (engine is an instance of ``zope.pagetemplate.engine.ZopeBaseEngine``)\n  or ``chameleon.tales`` (otherwise) TALES expressions.\n\n- Fixed encoding issue of `displayname` WebDAV property\n  (`#797 <https://github.com/zopefoundation/Zope/issues/797>`_)\n\n- Fixed fallback implementation of ``manage_DAVget``\n  (`#799 <https://github.com/zopefoundation/Zope/issues/799>`_)\n\nOther changes\n+++++++++++++\n\n- Update to newest versions of dependencies.\n\n\n5.0a1 (2020-02-28)\n------------------\n\nBackwards incompatible changes\n++++++++++++++++++++++++++++++\n\n- Drop support for Python 2.7 aka Zope 5 cannot be run on Python 2 any more.\n  If you are still running on Python 2.7 upgrade to the latest Zope 4 version\n  first, migrate to Python 3 and than switch to Zope 5.\n  (`#692 <https://github.com/zopefoundation/Zope/issues/692>`_)\n\n- Remove all backwards-compatibility code marked to go away in Zope 5\n  (`#478 <https://github.com/zopefoundation/Zope/issues/478>`_)\n\n- Drop support for running Zope with ZServer as it is Python 2 only.\n  (`#592 <https://github.com/zopefoundation/Zope/issues/592>`_)\n\n- Remove deprecated ``postProcessInputs`` request method.\n  (`#782 <https://github.com/zopefoundation/Zope/issues/782>`_)\n\n- Remove deprecated module ``ZPublisher.maybe_lock``.\n  (`#758 <https://github.com/zopefoundation/Zope/issues/758>`_)\n\n- Remove Help System methods from the product context.\n  (`#756 <https://github.com/zopefoundation/Zope/issues/756>`_)\n\n- Remove more deprecated code.\n  (`#757 <https://github.com/zopefoundation/Zope/issues/757>`_)\n\n- Updated Zope documentation sources for Zope 5.\n  (`#659 <https://github.com/zopefoundation/Zope/issues/659>`_)\n\nNew features\n++++++++++++\n\n- Restore WebDAV support in Zope.\n  (`#744 <https://github.com/zopefoundation/Zope/issues/744>`_)\n\n- Enable WebDAV support independent of ``ZServer``.\n  (`#787 <https://github.com/zopefoundation/Zope/pull/787>`_)\n\n- Clean up and sanitize permissions used for WebDAV-related methods.\n\n- Add ``wsgi.file_wrapper`` implementation\n  https://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handling\n  (`#719 <https://github.com/zopefoundation/Zope/pull/719>`_)\n\nBug fixes\n+++++++++\n\n- Only use ``wsgi.file_wrapper`` for response bodies with a ``read`` method.\n  (`#763 <https://github.com/zopefoundation/Zope/issues/763>`_)\n\n- Improve detection of HTTPS requests.\n  (`#680 <https://github.com/zopefoundation/Zope/issues/680>`_)\n\n- Fix several ZMI links so they respect virtual hosting.\n  (`#788 <https://github.com/zopefoundation/Zope/issues/788>`_)\n\n- Fix sort link URLs on ``manage_main``\n  (`#748 <https://github.com/zopefoundation/Zope/issues/748>`_)\n\n- More tests to make sure all ``__str__`` implementations return native\n  strings.\n  (`#692 <https://github.com/zopefoundation/Zope/issues/692>`_)\n\n- Fix longstanding test bug by forcing the page template engine.\n  Many tests in ``Products.PageTemplates`` used the old Zope page template\n  engine because the correct one was not registered during setup.\n\n- Close opened db during shutdown (as ZServer is already doing).\n  (`#740 <https://github.com/zopefoundation/Zope/issues/740>`_)\n\n- The method ``unrestrictedTraverse`` raises an error when\n  the argument ``path`` is not something it can work with.\n  (`#674 <https://github.com/zopefoundation/Zope/issues/674>`_)\n\n- Improve ZMI Security Tab usability for high numbers of roles.\n  (`#730 <https://github.com/zopefoundation/Zope/issues/730>`_)\n\n- Some small ZMI rendering fixes.\n  (`#729 <https://github.com/zopefoundation/Zope/issues/729>`_)\n\n- Fix error when using database minimize in the ZMI.\n  (`#726 <https://github.com/zopefoundation/Zope/issues/726>`_)\n\n- Fix ``__getattr__`` signature in ``UnauthorizedBinding``.\n  (`#703 <https://github.com/zopefoundation/Zope/issues/703>`_)\n\n- Fix VirtualHostMonster not being able to set mappings under Python 3.\n  (`#708 <https://github.com/zopefoundation/Zope/issues/708>`_)\n\n- Reduce the danger of acquiring built-in names on the ZMI Find tab.\n  (`#712 <https://github.com/zopefoundation/Zope/issues/712>`_)\n\n- Restore the mistakenly removed Properties ZMI tab on Image objects\n  (`#706 <https://github.com/zopefoundation/Zope/issues/706>`_)\n\n- Fix ``OFS.Image.File.__str__`` for ``Pdata`` contents\n  (`#711 <https://github.com/zopefoundation/Zope/issues/711>`_)\n\n- Set ``REMOTE_USER`` in wsgi environ using Zope user authentication\n  (`#713 <https://github.com/zopefoundation/Zope/pull/713>`_)\n\n- Add ``Paste`` as ``extras_require`` dependency to pull in ``Paste`` when\n  installing with `pip` and `constraints.txt` to prevent startup errors.\n  This requires adding the ``[wsgi]`` extra in the egg specification.\n  (`#734 <https://github.com/zopefoundation/Zope/issues/734>`_)\n\nOther changes\n+++++++++++++\n\n- Move retried request delay handling out of ``supports_retry``\n  (`#474 <https://github.com/zopefoundation/Zope/issues/474>`_)\n\n- Improve documentation for Zope's error logging services.\n", "patch": "@@ -11,11 +11,14 @@ https://github.com/zopefoundation/Zope/blob/4.x/CHANGES.rst\n 5.2.1 (unreleased)\n ------------------\n \n-- Update to newest compatible versions of dependencies.\n+- Prevent unauthorized traversal through authorized Python modules in\n+  TAL expressions\n \n - Facelift the Zope logo.\n   (`#973 <https://github.com/zopefoundation/Zope/issues/973>`_)\n \n+- Update to newest compatible versions of dependencies.\n+\n \n 5.2 (2021-05-21)\n ----------------", "file_path": "files/2021_6/284", "file_language": "rst", "file_name": "CHANGES.rst", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 1}, {"raw_url": "https://github.com/zopefoundation/Zope/raw/1d897910139e2c0b11984fc9b78c1da1365bec21/src%2FOFS%2Fzpt%2Fmain.zpt", "code": "<tal:header replace=\"structure here/manage_page_header\" />\n\n<tal:tabs replace=\"structure here/manage_tabs\" />\n\n<main class=\"container-fluid\">\n  <form id=\"objectItems\" name=\"objectItems\" method=\"post\"\n        tal:define=\"has_order_support python:getattr(here.aq_explicit, 'has_order_support', 0);\n                    sm modules/AccessControl/getSecurityManager;\n                    default_sort python: 'position' if has_order_support else 'id';\n                    skey python:request.get('skey',default_sort);\n                    rkey python:request.get('rkey','asc');\n                    rkey_alt python:'desc' if rkey=='asc' else 'asc';\n                    rkey_alt_up rkey_alt/upper;\n                    obs python: here.manage_get_sortedObjects(sortkey = skey, revkey = rkey);\n                    my_url string:${context/absolute_url}/manage_main;\n                   \"\n        tal:attributes=\"action string:${request/URL1}/\">\n\n    <tal:not-empty condition=\"obs\">\n      <table class=\"table table-striped table-hover table-sm objectItems\" tal:condition=\"obs\">\n        <thead class=\"thead-light\" tal:attributes=\"class python:'thead-light sorted_%s'%(request.get('rkey',''))\">\n          <tr>\n            <th scope=\"col\" class=\"zmi-object-check text-right\">\n              <input type=\"checkbox\" id=\"checkAll\" onclick=\"checkbox_all();\" />\n            </th>\n            <th scope=\"col\" class=\"zmi-object-type\">\n              <a title=\"Sort Ascending by Meta-Type\"\n                 href=\"?skey=meta_type&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by meta-type;\n                                 href string:${my_url}?skey=meta_type&rkey=${rkey_alt};\n                                 class python:skey=='meta_type' and 'zmi-sort_key' or None;\n                                \">\n                <i class=\"fa fa-sort\"></i>\n              </a>\n            </th>\n            <th scope=\"col\" class=\"zmi-object-id\">\n              <a title=\"Sort Ascending by Name\"\n                 href=\"?skey=id&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by name;\n                                 href string:${my_url}?skey=id&rkey=${rkey_alt};\n                                 class python:skey=='id' and 'zmi-sort_key' or None;\n                                \">\n                Name\n                <i class=\"fa fa-sort\"></i>\n              </a>\n              <i class=\"fa fa-search tablefilter\" onclick=\"$('#tablefilter').focus()\"></i>\n              <input id=\"tablefilter\" name=\"obj_ids:tokens\" type=\"text\" title=\"Filter object list by entering a name. Pressing the Enter key starts recursive search.\" />\n            </th>\n            <th scope=\"col\" class=\"zmi-object-size text-right hidden-xs\">\n              <a title=\"Sort Ascending by File-Size\"\n                 href=\"?skey=get_size&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by size;\n                                 href string:${my_url}?skey=get_size&rkey=${rkey_alt};\n                                 class python:skey=='get_size' and 'zmi-sort_key' or None;\n                                \">\n                Size\n                <i class=\"fa fa-sort\"></i>\n              </a>\n            </th>\n            <th scope=\"col\" class=\"zmi-object-date text-right hidden-xs\">\n              <a title=\"Sort Ascending by Modification Date\"\n                 href=\"?skey=_p_mtime&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by modification date;\n                                 href string:${my_url}?skey=_p_mtime&rkey=${rkey_alt};\n                                 class python:skey=='_p_mtime' and 'zmi-sort_key' or None;\n                                \">\n                Last Modified\n                <i class=\"fa fa-sort\"></i>\n              </a>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr tal:repeat=\"ob_dict obs\">\n            <tal:obj define=\"ob nocall:ob_dict/obj\">\n              <td class=\"zmi-object-check text-right\" onclick=\"$(this).children('input').trigger('click');\">\n                <input type=\"checkbox\" class=\"checkbox-list-item\" name=\"ids:list\" tal:attributes=\"value ob_dict/id\" \n                  onclick=\"event.stopPropagation();select_objectitem($(this));\" />\n              </td>\n              <td class=\"zmi-object-type\" onclick=\"$(this).prev().children('input').trigger('click')\">\n                <i title=\"Broken object\" class=\"fas fa-ban text-danger\" tal:attributes=\"class ob/zmi_icon | default; title ob/meta_type | default\">\n                  <span class=\"sr-only\" tal:content=\"ob/meta_type | default\">Broken object</span>\n                </i>\n              </td>\n              <td class=\"zmi-object-id\">\n                <a tal:attributes=\"href python:'%s/manage_workspace'%(ob_dict['quoted_id'])\">\n                  <span tal:replace=\"ob_dict/id\">Id</span>\n                  <span class=\"badge badge-warning\" title=\"This item has been locked by WebDAV\" tal:condition=\"ob/wl_isLocked | nothing\">\n                    <i class=\"fa fa-lock\"></i>\n                  </span>\n                  <span class=\"zmi-object-title hidden-xs\" tal:condition=\"ob/title|nothing\">\n                    &nbsp;(<span tal:replace=\"ob/title\"></span>)\n                  </span>\n                </a>\n              </td>\n              <td class=\"text-right zmi-object-size hidden-xs\" tal:content=\"python:here.compute_size(ob)\">\n              </td>\n              <td class=\"text-right zmi-object-date hidden-xs pl-3\" tal:content=\"python:here.last_modified(ob)\">\n              </td>\n            </tal:obj>\n          </tr>\n        </tbody>\n      </table>\n\n      <div class=\"form-group form-inline zmi-controls\" tal:define=\"\n        delete_allowed python:sm.checkPermission('Delete objects', context)\" tal:condition=\"obs\">\n        <div class=\"input-group\">\n          <tal:copy-paste condition=\"not:context/dontAllowCopyAndPaste|nothing\">\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_renameForm:method\" value=\"Rename\" />\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_cutObjects:method\" value=\"Cut\" tal:condition=\"delete_allowed\" />\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_copyObjects:method\" value=\"Copy\" />\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_pasteObjects:method\" value=\"Paste\" tal:condition=\"here/cb_dataValid\" />\n          </tal:copy-paste>\n          <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_delObjects:method\" value=\"Delete\" tal:condition=\"delete_allowed\" />\n          <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_importExportForm:method\" value=\"Import/Export\" tal:condition=\"python:sm.checkPermission('Import/Export objects', context)\" />\n\n          <div class=\"input-group\" tal:condition=\"python: has_order_support and sm.checkPermission('Manage properties', context)\">\n            <select class=\"form-control btn btn-primary\" name=\"delta:int\">\n              <option tal:repeat=\"val python:range(1,min(5,len(obs)))\" tal:content=\"val\" />\n              <option tal:repeat=\"val python:range(5,len(obs),5)\" tal:content=\"val\" />\n            </select>\n            <div class=\"input-group-append\">\n              <button type=\"submit\" name=\"manage_move_objects_up:method\" value=\"Move up\" \n                title=\"Move selected items up\" class=\"btn btn-primary\">\n                <i class=\"fas fa-arrow-up\"></i>\n              </button>\n              <button type=\"submit\" name=\"manage_move_objects_down:method\" value=\"Move down\" \n                title=\"Move selected items down\" class=\"btn btn-primary rounded-right\">\n                <i class=\"fas fa-arrow-down\"></i>\n              </button>\n            </div>\n            <button type=\"submit\" name=\"manage_move_objects_to_top:method\" value=\"Move to top\" \n              title=\"Move selected items to top\" class=\"btn btn-primary ml-2 mr-2\">\n              <i class=\"fas fa-arrow-up\" style=\"border-top: 0.2rem solid silver;\"></i>\n            </button>\n            <button type=\"submit\" name=\"manage_move_objects_to_bottom:method\" value=\"Move to bottom\" \n               title=\"Move selected items to bottom\" class=\"btn btn-primary\">\n              <i class=\"fas fa-arrow-down\" style=\"border-bottom: 0.2rem solid silver;\"></i>\n            </button>\n          </div>\n        </div>\n\n      </div>\n    </tal:not-empty>\n\n    <tal:empty condition=\"not:obs\">\n      <div class=\"alert alert-info mt-4 mb-4\">\n        There are currently no items in <em tal:content=\"here/title_or_id\"></em>.\n      </div>\n      <div class=\"form-group\">\n        <tal:copy-paste condition=\"not:context/dontAllowCopyAndPaste|nothing\">\n          <input class=\"btn btn-primary\" type=\"submit\" name=\"manage_pasteObjects:method\" value=\"Paste\" tal:condition=\"here/cb_dataValid\" />\n        </tal:copy-paste>\n        <input class=\"btn btn-primary\" type=\"submit\" name=\"manage_importExportForm:method\" value=\"Import/Export\" tal:condition=\"python:sm.checkPermission('Import/Export objects', context)\" />\n      </div>\n    </tal:empty>\n  </form>\n\n</main>\n\n\n<script>\n  // +++++++++++++++++++++++++++\n  // Item  Selection\n  // +++++++++++++++++++++++++++\n  function checkbox_all() {\n    var checkboxes = document.getElementsByClassName('checkbox-list-item');\n    // Toggle Highlighting CSS-Class\n    if (document.getElementById('checkAll').checked) {\n      $('table.objectItems tbody tr').addClass('checked');\n    } else {\n      $('table.objectItems tbody tr').removeClass('checked');\n    };\n    // Set Checkbox like checkAll-Box\n    for (i = 0; i < checkboxes.length; i++) {\n      checkboxes[i].checked = document.getElementById('checkAll').checked;\n    }\n  };\n\n  function zmicontrols_visible() {\n    var zmicontrols = $('form#objectItems .zmi-controls');\n    var zmicontrols_top = zmicontrols.offset().top;\n    var zmicontrols_bottom = zmicontrols_top + zmicontrols.outerHeight();\n    var viewport_top = $(window).scrollTop();\n    var viewport_bottom = viewport_top + $(window).height();\n    return zmicontrols_bottom > viewport_top && zmicontrols_top < viewport_bottom;\n  };\n\n  function select_objectitem(ob) {\n    ob.parent().parent().toggleClass('checked');\n    if ( !zmicontrols_visible() ) {\n      $('form#objectItems').addClass('selected');\n    }\n    // Anything selected?\n    var checkboxes = document.getElementsByClassName('checkbox-list-item');\n    var selected = false;\n    for (i = 0; i < checkboxes.length; i++) {\n      if ( checkboxes[i].checked ) {\n        selected = true;\n        break;\n      }\n    }\n    if ( !selected ) {\n      $('form#objectItems').removeClass('selected');\n      console.log('form#objectItems removed .selected');\n    }\n  };\n\n\n  $(function () {\n\n    // +++++++++++++++++++++++++++\n    // Icon Tooltips\n    // +++++++++++++++++++++++++++\n    $('td.zmi-object-type i').tooltip({\n      'placement': 'top'\n    });\n\n    // +++++++++++++++++++++++++++\n    // Tablefilter/Search Element\n    // +++++++++++++++++++++++++++\n\n    function isModifierKeyPressed(event) {\n      return event.altKey ||\n        event.ctrlKey ||\n        event.metaKey;\n    }\n\n    $(document).keypress(function (event) {\n\n      if (isModifierKeyPressed(event)) {\n        return; // ignore\n      }\n\n      // Set Focus to Tablefilter only when Modal Dialog is not Shown\n      if (!$('#zmi-modal').hasClass('show')) {\n        $('#tablefilter').focus();\n        // Prevent Submitting a form by hitting Enter\n        // https://stackoverflow.com/questions/895171/prevent-users-from-submitting-a-form-by-hitting-enter\n        if (event.which == 13) {\n          event.preventDefault();\n          return false;\n        };\n      };\n    })\n\n    $('#tablefilter').keyup(function (event) {\n\n      if (isModifierKeyPressed(event)) {\n        return; // ignore\n      }\n\n      var tablefilter = $(this).val();\n      if (event.which == 13) {\n        if (1 === $('tbody tr:visible').length) {\n          window.location.href = $('tbody tr:visible a').attr('href');\n        } else {\n          window.location.href = 'manage_findForm?btn_submit=Find&search_sub:int=1&obj_ids%3Atokens=' + tablefilter;\n        }\n        event.preventDefault();\n      };\n      $('table.objectItems').find(\"tbody tr\").hide();\n      $('table.objectItems').find(\"tbody tr td.zmi-object-id a:contains(\" + tablefilter + \")\").closest('tbody tr').show();\n    });\n\n    // +++++++++++++++++++++++++++\n    // OBJECTIST SORTING: Show skey=meta_type\n    // +++++++++++++++++++++++++++\n    let searchParams = new URLSearchParams(window.location.search);\n    if (searchParams.get('skey') == 'meta_type') {\n      $('td.zmi-object-type i').each(function () {\n        $(this).parent().parent().find('td.zmi-object-id').prepend('<span class=\"zmi-typename_show\">' + $(this).text() + '</span>')\n      });\n      $('th.zmi-object-id').addClass('zmi-typename_show');\n    }\n\n  });\n\n</script>\n\n<tal:footer replace=\"structure here/manage_page_footer\" />\n", "code_before": "<tal:header replace=\"structure here/manage_page_header\" />\n\n<tal:tabs replace=\"structure here/manage_tabs\" />\n\n<main class=\"container-fluid\">\n  <form id=\"objectItems\" name=\"objectItems\" method=\"post\"\n        tal:define=\"has_order_support python:getattr(here.aq_explicit, 'has_order_support', 0);\n                    sm modules/AccessControl/SecurityManagement/getSecurityManager;\n                    default_sort python: 'position' if has_order_support else 'id';\n                    skey python:request.get('skey',default_sort);\n                    rkey python:request.get('rkey','asc');\n                    rkey_alt python:'desc' if rkey=='asc' else 'asc';\n                    rkey_alt_up rkey_alt/upper;\n                    obs python: here.manage_get_sortedObjects(sortkey = skey, revkey = rkey);\n                    my_url string:${context/absolute_url}/manage_main;\n                   \"\n        tal:attributes=\"action string:${request/URL1}/\">\n\n    <tal:not-empty condition=\"obs\">\n      <table class=\"table table-striped table-hover table-sm objectItems\" tal:condition=\"obs\">\n        <thead class=\"thead-light\" tal:attributes=\"class python:'thead-light sorted_%s'%(request.get('rkey',''))\">\n          <tr>\n            <th scope=\"col\" class=\"zmi-object-check text-right\">\n              <input type=\"checkbox\" id=\"checkAll\" onclick=\"checkbox_all();\" />\n            </th>\n            <th scope=\"col\" class=\"zmi-object-type\">\n              <a title=\"Sort Ascending by Meta-Type\"\n                 href=\"?skey=meta_type&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by meta-type;\n                                 href string:${my_url}?skey=meta_type&rkey=${rkey_alt};\n                                 class python:skey=='meta_type' and 'zmi-sort_key' or None;\n                                \">\n                <i class=\"fa fa-sort\"></i>\n              </a>\n            </th>\n            <th scope=\"col\" class=\"zmi-object-id\">\n              <a title=\"Sort Ascending by Name\"\n                 href=\"?skey=id&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by name;\n                                 href string:${my_url}?skey=id&rkey=${rkey_alt};\n                                 class python:skey=='id' and 'zmi-sort_key' or None;\n                                \">\n                Name\n                <i class=\"fa fa-sort\"></i>\n              </a>\n              <i class=\"fa fa-search tablefilter\" onclick=\"$('#tablefilter').focus()\"></i>\n              <input id=\"tablefilter\" name=\"obj_ids:tokens\" type=\"text\" title=\"Filter object list by entering a name. Pressing the Enter key starts recursive search.\" />\n            </th>\n            <th scope=\"col\" class=\"zmi-object-size text-right hidden-xs\">\n              <a title=\"Sort Ascending by File-Size\"\n                 href=\"?skey=get_size&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by size;\n                                 href string:${my_url}?skey=get_size&rkey=${rkey_alt};\n                                 class python:skey=='get_size' and 'zmi-sort_key' or None;\n                                \">\n                Size\n                <i class=\"fa fa-sort\"></i>\n              </a>\n            </th>\n            <th scope=\"col\" class=\"zmi-object-date text-right hidden-xs\">\n              <a title=\"Sort Ascending by Modification Date\"\n                 href=\"?skey=_p_mtime&rkey=asc\"\n                 tal:attributes=\"title string:Sort ${rkey_alt_up} by modification date;\n                                 href string:${my_url}?skey=_p_mtime&rkey=${rkey_alt};\n                                 class python:skey=='_p_mtime' and 'zmi-sort_key' or None;\n                                \">\n                Last Modified\n                <i class=\"fa fa-sort\"></i>\n              </a>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr tal:repeat=\"ob_dict obs\">\n            <tal:obj define=\"ob nocall:ob_dict/obj\">\n              <td class=\"zmi-object-check text-right\" onclick=\"$(this).children('input').trigger('click');\">\n                <input type=\"checkbox\" class=\"checkbox-list-item\" name=\"ids:list\" tal:attributes=\"value ob_dict/id\" \n                  onclick=\"event.stopPropagation();select_objectitem($(this));\" />\n              </td>\n              <td class=\"zmi-object-type\" onclick=\"$(this).prev().children('input').trigger('click')\">\n                <i title=\"Broken object\" class=\"fas fa-ban text-danger\" tal:attributes=\"class ob/zmi_icon | default; title ob/meta_type | default\">\n                  <span class=\"sr-only\" tal:content=\"ob/meta_type | default\">Broken object</span>\n                </i>\n              </td>\n              <td class=\"zmi-object-id\">\n                <a tal:attributes=\"href python:'%s/manage_workspace'%(ob_dict['quoted_id'])\">\n                  <span tal:replace=\"ob_dict/id\">Id</span>\n                  <span class=\"badge badge-warning\" title=\"This item has been locked by WebDAV\" tal:condition=\"ob/wl_isLocked | nothing\">\n                    <i class=\"fa fa-lock\"></i>\n                  </span>\n                  <span class=\"zmi-object-title hidden-xs\" tal:condition=\"ob/title|nothing\">\n                    &nbsp;(<span tal:replace=\"ob/title\"></span>)\n                  </span>\n                </a>\n              </td>\n              <td class=\"text-right zmi-object-size hidden-xs\" tal:content=\"python:here.compute_size(ob)\">\n              </td>\n              <td class=\"text-right zmi-object-date hidden-xs pl-3\" tal:content=\"python:here.last_modified(ob)\">\n              </td>\n            </tal:obj>\n          </tr>\n        </tbody>\n      </table>\n\n      <div class=\"form-group form-inline zmi-controls\" tal:define=\"\n        delete_allowed python:sm.checkPermission('Delete objects', context)\" tal:condition=\"obs\">\n        <div class=\"input-group\">\n          <tal:copy-paste condition=\"not:context/dontAllowCopyAndPaste|nothing\">\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_renameForm:method\" value=\"Rename\" />\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_cutObjects:method\" value=\"Cut\" tal:condition=\"delete_allowed\" />\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_copyObjects:method\" value=\"Copy\" />\n            <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_pasteObjects:method\" value=\"Paste\" tal:condition=\"here/cb_dataValid\" />\n          </tal:copy-paste>\n          <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_delObjects:method\" value=\"Delete\" tal:condition=\"delete_allowed\" />\n          <input class=\"btn btn-primary mr-2\" type=\"submit\" name=\"manage_importExportForm:method\" value=\"Import/Export\" tal:condition=\"python:sm.checkPermission('Import/Export objects', context)\" />\n\n          <div class=\"input-group\" tal:condition=\"python: has_order_support and sm.checkPermission('Manage properties', context)\">\n            <select class=\"form-control btn btn-primary\" name=\"delta:int\">\n              <option tal:repeat=\"val python:range(1,min(5,len(obs)))\" tal:content=\"val\" />\n              <option tal:repeat=\"val python:range(5,len(obs),5)\" tal:content=\"val\" />\n            </select>\n            <div class=\"input-group-append\">\n              <button type=\"submit\" name=\"manage_move_objects_up:method\" value=\"Move up\" \n                title=\"Move selected items up\" class=\"btn btn-primary\">\n                <i class=\"fas fa-arrow-up\"></i>\n              </button>\n              <button type=\"submit\" name=\"manage_move_objects_down:method\" value=\"Move down\" \n                title=\"Move selected items down\" class=\"btn btn-primary rounded-right\">\n                <i class=\"fas fa-arrow-down\"></i>\n              </button>\n            </div>\n            <button type=\"submit\" name=\"manage_move_objects_to_top:method\" value=\"Move to top\" \n              title=\"Move selected items to top\" class=\"btn btn-primary ml-2 mr-2\">\n              <i class=\"fas fa-arrow-up\" style=\"border-top: 0.2rem solid silver;\"></i>\n            </button>\n            <button type=\"submit\" name=\"manage_move_objects_to_bottom:method\" value=\"Move to bottom\" \n               title=\"Move selected items to bottom\" class=\"btn btn-primary\">\n              <i class=\"fas fa-arrow-down\" style=\"border-bottom: 0.2rem solid silver;\"></i>\n            </button>\n          </div>\n        </div>\n\n      </div>\n    </tal:not-empty>\n\n    <tal:empty condition=\"not:obs\">\n      <div class=\"alert alert-info mt-4 mb-4\">\n        There are currently no items in <em tal:content=\"here/title_or_id\"></em>.\n      </div>\n      <div class=\"form-group\">\n        <tal:copy-paste condition=\"not:context/dontAllowCopyAndPaste|nothing\">\n          <input class=\"btn btn-primary\" type=\"submit\" name=\"manage_pasteObjects:method\" value=\"Paste\" tal:condition=\"here/cb_dataValid\" />\n        </tal:copy-paste>\n        <input class=\"btn btn-primary\" type=\"submit\" name=\"manage_importExportForm:method\" value=\"Import/Export\" tal:condition=\"python:sm.checkPermission('Import/Export objects', context)\" />\n      </div>\n    </tal:empty>\n  </form>\n\n</main>\n\n\n<script>\n  // +++++++++++++++++++++++++++\n  // Item  Selection\n  // +++++++++++++++++++++++++++\n  function checkbox_all() {\n    var checkboxes = document.getElementsByClassName('checkbox-list-item');\n    // Toggle Highlighting CSS-Class\n    if (document.getElementById('checkAll').checked) {\n      $('table.objectItems tbody tr').addClass('checked');\n    } else {\n      $('table.objectItems tbody tr').removeClass('checked');\n    };\n    // Set Checkbox like checkAll-Box\n    for (i = 0; i < checkboxes.length; i++) {\n      checkboxes[i].checked = document.getElementById('checkAll').checked;\n    }\n  };\n\n  function zmicontrols_visible() {\n    var zmicontrols = $('form#objectItems .zmi-controls');\n    var zmicontrols_top = zmicontrols.offset().top;\n    var zmicontrols_bottom = zmicontrols_top + zmicontrols.outerHeight();\n    var viewport_top = $(window).scrollTop();\n    var viewport_bottom = viewport_top + $(window).height();\n    return zmicontrols_bottom > viewport_top && zmicontrols_top < viewport_bottom;\n  };\n\n  function select_objectitem(ob) {\n    ob.parent().parent().toggleClass('checked');\n    if ( !zmicontrols_visible() ) {\n      $('form#objectItems').addClass('selected');\n    }\n    // Anything selected?\n    var checkboxes = document.getElementsByClassName('checkbox-list-item');\n    var selected = false;\n    for (i = 0; i < checkboxes.length; i++) {\n      if ( checkboxes[i].checked ) {\n        selected = true;\n        break;\n      }\n    }\n    if ( !selected ) {\n      $('form#objectItems').removeClass('selected');\n      console.log('form#objectItems removed .selected');\n    }\n  };\n\n\n  $(function () {\n\n    // +++++++++++++++++++++++++++\n    // Icon Tooltips\n    // +++++++++++++++++++++++++++\n    $('td.zmi-object-type i').tooltip({\n      'placement': 'top'\n    });\n\n    // +++++++++++++++++++++++++++\n    // Tablefilter/Search Element\n    // +++++++++++++++++++++++++++\n\n    function isModifierKeyPressed(event) {\n      return event.altKey ||\n        event.ctrlKey ||\n        event.metaKey;\n    }\n\n    $(document).keypress(function (event) {\n\n      if (isModifierKeyPressed(event)) {\n        return; // ignore\n      }\n\n      // Set Focus to Tablefilter only when Modal Dialog is not Shown\n      if (!$('#zmi-modal').hasClass('show')) {\n        $('#tablefilter').focus();\n        // Prevent Submitting a form by hitting Enter\n        // https://stackoverflow.com/questions/895171/prevent-users-from-submitting-a-form-by-hitting-enter\n        if (event.which == 13) {\n          event.preventDefault();\n          return false;\n        };\n      };\n    })\n\n    $('#tablefilter').keyup(function (event) {\n\n      if (isModifierKeyPressed(event)) {\n        return; // ignore\n      }\n\n      var tablefilter = $(this).val();\n      if (event.which == 13) {\n        if (1 === $('tbody tr:visible').length) {\n          window.location.href = $('tbody tr:visible a').attr('href');\n        } else {\n          window.location.href = 'manage_findForm?btn_submit=Find&search_sub:int=1&obj_ids%3Atokens=' + tablefilter;\n        }\n        event.preventDefault();\n      };\n      $('table.objectItems').find(\"tbody tr\").hide();\n      $('table.objectItems').find(\"tbody tr td.zmi-object-id a:contains(\" + tablefilter + \")\").closest('tbody tr').show();\n    });\n\n    // +++++++++++++++++++++++++++\n    // OBJECTIST SORTING: Show skey=meta_type\n    // +++++++++++++++++++++++++++\n    let searchParams = new URLSearchParams(window.location.search);\n    if (searchParams.get('skey') == 'meta_type') {\n      $('td.zmi-object-type i').each(function () {\n        $(this).parent().parent().find('td.zmi-object-id').prepend('<span class=\"zmi-typename_show\">' + $(this).text() + '</span>')\n      });\n      $('th.zmi-object-id').addClass('zmi-typename_show');\n    }\n\n  });\n\n</script>\n\n<tal:footer replace=\"structure here/manage_page_footer\" />\n", "patch": "@@ -5,7 +5,7 @@\n <main class=\"container-fluid\">\n   <form id=\"objectItems\" name=\"objectItems\" method=\"post\"\n         tal:define=\"has_order_support python:getattr(here.aq_explicit, 'has_order_support', 0);\n-                    sm modules/AccessControl/SecurityManagement/getSecurityManager;\n+                    sm modules/AccessControl/getSecurityManager;\n                     default_sort python: 'position' if has_order_support else 'id';\n                     skey python:request.get('skey',default_sort);\n                     rkey python:request.get('rkey','asc');", "file_path": "files/2021_6/285", "file_language": "zpt", "file_name": "src/OFS/zpt/main.zpt", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/zopefoundation/Zope/raw/1d897910139e2c0b11984fc9b78c1da1365bec21/src%2FProducts%2FPageTemplates%2FExpressions.py", "code": "##############################################################################\n#\n# Copyright (c) 2002 Zope Foundation and Contributors.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE\n#\n##############################################################################\n\"\"\"Page Template Expression Engine\n\nPage Template-specific implementation of TALES, with handlers\nfor Python expressions, string literals, and paths.\n\"\"\"\n\nimport logging\nimport warnings\n\nimport OFS.interfaces\nfrom AccessControl import safe_builtins\nfrom AccessControl.SecurityManagement import getSecurityManager\nfrom Acquisition import aq_base\nfrom MultiMapping import MultiMapping\nfrom zExceptions import NotFound\nfrom zExceptions import Unauthorized\nfrom zope.component import queryUtility\nfrom zope.contentprovider.tales import TALESProviderExpression\nfrom zope.i18n import translate\nfrom zope.interface import implementer\nfrom zope.pagetemplate.engine import ZopeEngine as Z3Engine\nfrom zope.proxy import removeAllProxies\nfrom zope.tales.expressions import DeferExpr\nfrom zope.tales.expressions import LazyExpr\nfrom zope.tales.expressions import NotExpr\nfrom zope.tales.expressions import PathExpr\nfrom zope.tales.expressions import StringExpr\nfrom zope.tales.expressions import SubPathExpr\nfrom zope.tales.expressions import Undefs\nfrom zope.tales.pythonexpr import PythonExpr\nfrom zope.tales.tales import Context\nfrom zope.tales.tales import ErrorInfo as BaseErrorInfo\nfrom zope.tales.tales import Iterator\nfrom zope.traversing.adapters import traversePathElement\nfrom zope.traversing.interfaces import ITraversable\n\nfrom . import ZRPythonExpr\nfrom .interfaces import IUnicodeEncodingConflictResolver\nfrom .interfaces import IZopeAwareEngine\n\n\nSecureModuleImporter = ZRPythonExpr._SecureModuleImporter()\n\nLOG = logging.getLogger('Expressions')\n\n# In Zope 2 traversal semantics, NotFound or Unauthorized (the Zope 2\n# versions) indicate that traversal has failed.  By default, zope.tales'\n# engine doesn't recognize them as such which is why we extend its\n# list here and make sure our implementation of the TALES\n# Path Expression uses them\nZopeUndefs = Undefs + (NotFound, Unauthorized)\n\n\ndef boboAwareZopeTraverse(object, path_items, econtext):\n    \"\"\"Traverses a sequence of names, first trying attributes then items.\n\n    This uses zope.traversing path traversal where possible and interacts\n    correctly with objects providing OFS.interface.ITraversable when\n    necessary (bobo-awareness).\n    \"\"\"\n    request = getattr(econtext, 'request', None)\n    validate = getSecurityManager().validate\n    path_items = list(path_items)\n    path_items.reverse()\n\n    while path_items:\n        name = path_items.pop()\n\n        if OFS.interfaces.ITraversable.providedBy(object):\n            object = object.restrictedTraverse(name)\n        else:\n            found = traversePathElement(object, name, path_items,\n                                        request=request)\n\n            # Special backwards compatibility exception for the name ``_``,\n            # which was often used for translation message factories.\n            # Allow and continue traversal.\n            if name == '_':\n                warnings.warn('Traversing to the name `_` is deprecated '\n                              'and will be removed in Zope 6.',\n                              DeprecationWarning)\n                object = found\n                continue\n\n            # All other names starting with ``_`` are disallowed.\n            # This emulates what restrictedTraverse does.\n            if name.startswith('_'):\n                raise NotFound(name)\n\n            # traversePathElement doesn't apply any Zope security policy,\n            # so we validate access explicitly here.\n            try:\n                validate(object, object, name, found)\n                object = found\n            except Unauthorized:\n                # Convert Unauthorized to prevent information disclosures\n                raise NotFound(name)\n\n    return object\n\n\ndef trustedBoboAwareZopeTraverse(object, path_items, econtext):\n    \"\"\"Traverses a sequence of names, first trying attributes then items.\n\n    This uses zope.traversing path traversal where possible and interacts\n    correctly with objects providing OFS.interface.ITraversable when\n    necessary (bobo-awareness).\n    \"\"\"\n    request = getattr(econtext, 'request', None)\n    path_items = list(path_items)\n    path_items.reverse()\n\n    while path_items:\n        name = path_items.pop()\n        if OFS.interfaces.ITraversable.providedBy(object):\n            object = object.unrestrictedTraverse(name)\n        else:\n            object = traversePathElement(object, name, path_items,\n                                         request=request)\n    return object\n\n\ndef render(ob, ns):\n    \"\"\"Calls the object, possibly a document template, or just returns\n    it if not callable.  (From DT_Util.py)\n    \"\"\"\n    if hasattr(ob, '__render_with_namespace__'):\n        ob = ZRPythonExpr.call_with_ns(ob.__render_with_namespace__, ns)\n    else:\n        # items might be acquisition wrapped\n        base = aq_base(ob)\n        # item might be proxied (e.g. modules might have a deprecation\n        # proxy)\n        base = removeAllProxies(base)\n        if callable(base):\n            try:\n                if getattr(base, 'isDocTemp', 0):\n                    ob = ZRPythonExpr.call_with_ns(ob, ns, 2)\n                else:\n                    ob = ob()\n            except NotImplementedError:\n                pass\n    return ob\n\n\nclass _CombinedMapping:\n    \"\"\"Minimal auxiliary class to combine several mappings.\n\n    Earlier mappings take precedence.\n    \"\"\"\n    def __init__(self, *ms):\n        self.mappings = ms\n\n    def get(self, key, default):\n        for m in self.mappings:\n            value = m.get(key, self)\n            if value is not self:\n                return value\n        return default\n\n\nclass UntrustedSubPathExpr(SubPathExpr):\n    ALLOWED_BUILTINS = safe_builtins\n\n\nclass TrustedSubPathExpr(SubPathExpr):\n    # we allow both Python's builtins (we are trusted)\n    # as well as ``safe_builtins`` (because it may contain extensions)\n    # Python's builtins take precedence, because those of\n    # ``safe_builtins`` may have special restrictions for\n    # the use in an untrusted context\n    ALLOWED_BUILTINS = _CombinedMapping(\n        __builtins__,\n        safe_builtins)\n\n\nclass ZopePathExpr(PathExpr):\n\n    _TRAVERSER = staticmethod(boboAwareZopeTraverse)\n    SUBEXPR_FACTORY = UntrustedSubPathExpr\n\n    def __init__(self, name, expr, engine):\n        if not expr.strip():\n            expr = 'nothing'\n        super().__init__(name, expr, engine, self._TRAVERSER)\n\n    # override this to support different call metrics (see bottom of\n    # method) and Zope 2's traversal exceptions (ZopeUndefs instead of\n    # Undefs)\n    def _eval(self, econtext):\n        for expr in self._subexprs[:-1]:\n            # Try all but the last subexpression, skipping undefined ones.\n            try:\n                ob = expr(econtext)\n            except ZopeUndefs:  # use Zope 2 expression types\n                pass\n            else:\n                break\n        else:\n            # On the last subexpression allow exceptions through.\n            ob = self._subexprs[-1](econtext)\n            if self._hybrid:\n                return ob\n\n        if self._name == 'nocall':\n            return ob\n\n        # this is where we are different from our super class:\n        return render(ob, econtext.vars)\n\n    # override this to support Zope 2's traversal exceptions\n    # (ZopeUndefs instead of Undefs)\n    def _exists(self, econtext):\n        for expr in self._subexprs:\n            try:\n                expr(econtext)\n            except ZopeUndefs:  # use Zope 2 expression types\n                pass\n            else:\n                return 1\n        return 0\n\n\nclass TrustedZopePathExpr(ZopePathExpr):\n    _TRAVERSER = staticmethod(trustedBoboAwareZopeTraverse)\n    SUBEXPR_FACTORY = TrustedSubPathExpr\n\n\nclass SafeMapping(MultiMapping):\n    \"\"\"Mapping with security declarations and limited method exposure.\n\n    Since it subclasses MultiMapping, this class can be used to wrap\n    one or more mapping objects.  Restricted Python code will not be\n    able to mutate the SafeMapping or the wrapped mappings, but will be\n    able to read any value.\n    \"\"\"\n    __allow_access_to_unprotected_subobjects__ = True\n    push = pop = None\n\n    _push = MultiMapping.push\n    _pop = MultiMapping.pop\n\n\nclass ZopeContext(Context):\n\n    def __init__(self, engine, contexts):\n        super().__init__(engine, contexts)\n        # wrap the top-level 'repeat' variable, as it is visible to\n        # restricted code\n        self.setContext('repeat', SafeMapping(self.repeat_vars))\n        # regenerate the first scope and the scope stack after messing\n        # with the global context\n        self.vars = vars = contexts.copy()\n        self._vars_stack = [vars]\n\n    def translate(self, msgid, domain=None, mapping=None, default=None):\n        context = self.contexts.get('request')\n        return translate(\n            msgid, domain=domain, mapping=mapping,\n            context=context, default=default)\n\n    def evaluateBoolean(self, expr):\n        value = self.evaluate(expr)\n        # here we override the normal zope.tales behaviour. zope.tales\n        # doesn't care about the default in a boolean expression,\n        # while we do (Zope 2 legacy, see the\n        # BooleanAttributesAndDefault.html test case)\n        if value is self.getDefault():\n            return value\n        return bool(value)\n\n    def evaluateStructure(self, expr):\n        \"\"\" customized version in order to get rid of unicode\n            errors for all and ever\n        \"\"\"\n        text = super().evaluateStructure(expr)\n        return self._handleText(text, expr)\n\n    def evaluateText(self, expr):\n        \"\"\" customized version in order to get rid of unicode\n            errors for all and ever\n        \"\"\"\n        text = self.evaluate(expr)\n        return self._handleText(text, expr)\n\n    def _handleText(self, text, expr):\n\n        if text is self.getDefault() or text is None:\n            # XXX: should be unicode???\n            return text\n\n        if isinstance(text, str):\n            # we love unicode, nothing to do\n            return text\n\n        elif isinstance(text, bytes):\n            # bahh...non-unicode string..we need to convert it to unicode\n\n            # catch ComponentLookupError in order to make tests shut-up.\n            # This should not be a problem since it won't change the old\n            # default behavior\n\n            resolver = queryUtility(IUnicodeEncodingConflictResolver)\n            if resolver is None:\n                return text.decode('ascii')\n\n            try:\n                return resolver.resolve(\n                    self.contexts.get('context'), text, expr)\n            except UnicodeDecodeError as e:\n                LOG.error(\"UnicodeDecodeError detected for expression \\\"%s\\\"\\n\"\n                          \"Resolver class: %s\\n\"\n                          \"Exception text: %s\\n\"\n                          \"Template: %s\\n\"\n                          \"Rendered text: %r\" %\n                          (expr, resolver.__class__, e,\n                           self.contexts['template'].absolute_url(1), text))\n                raise\n        else:\n            # This is a weird culprit ...calling text_type() on non-string\n            # objects\n            return str(text)\n\n    def createErrorInfo(self, err, position):\n        # Override, returning an object accessible to untrusted code.\n        # See: https://bugs.launchpad.net/zope2/+bug/174705\n        return ErrorInfo(err, position)\n\n    def evaluateCode(self, lang, code):\n        \"\"\" See ITALExpressionEngine.\n\n        o This method is a fossil:  nobody actually calls it, but the\n          interface requires it.\n        \"\"\"\n        raise NotImplementedError\n\n\nclass ErrorInfo(BaseErrorInfo):\n    \"\"\"Information about an exception passed to an on-error handler.\n    \"\"\"\n    __allow_access_to_unprotected_subobjects__ = True\n\n\n# Whether an engine is Zope aware does not depend on the class\n# but how it is configured - especially, that is uses a Zope aware\n# `PathExpr` implementation.\n# Nevertheless, we mark the class as \"Zope aware\" for simplicity\n# assuming that users of the class use a proper `PathExpr`\n@implementer(IZopeAwareEngine)\nclass ZopeEngine(Z3Engine):\n\n    _create_context = ZopeContext\n\n\nclass ZopeIterator(Iterator):\n\n    # allow iterator API to be accessed from (restricted) Python TALES\n    # expressions\n    __allow_access_to_unprotected_subobjects__ = True\n\n    # The things below used to be attributes in\n    # ZTUtils.Iterator.Iterator, however in zope.tales.tales.Iterator\n    # they're methods.  We need BBB on the Python level so we redefine\n    # them as properties here.  Eventually, we would like to get rid\n    # of them, though, so that we won't have to maintain yet another\n    # iterator class somewhere.\n\n    @property\n    def index(self):\n        return super().index()\n\n    @property\n    def start(self):\n        return super().start()\n\n    @property\n    def end(self):\n        return super().end()\n\n    @property\n    def item(self):\n        return super().item()\n\n    # 'first' and 'last' are Zope 2 enhancements to the TALES iterator\n    # spec.\n    def first(self, name=None):\n        if self.start:\n            return True\n        return not self.same_part(name, self._last_item, self.item)\n\n    def last(self, name=None):\n        if self.end:\n            return True\n        return not self.same_part(name, self.item, self._next)\n\n    def same_part(self, name, ob1, ob2):\n        if name is None:\n            return ob1 == ob2\n        no = object()\n        return getattr(ob1, name, no) == getattr(ob2, name, no) is not no\n\n    # 'first' needs to have access to the last item in the loop\n    def __next__(self):\n        if self._nextIndex > 0:\n            self._last_item = self.item\n        return super().__next__()\n\n    def next(self):\n        if self._nextIndex > 0:\n            self._last_item = self.item\n        return super().next()\n\n\n@implementer(ITraversable)\nclass PathIterator(ZopeIterator):\n    \"\"\"A TALES Iterator with the ability to use first() and last() on\n    subpaths of elements.\"\"\"\n\n    def traverse(self, name, furtherPath):\n        if name in ('first', 'last'):\n            method = getattr(self, name)\n            # it's important that 'name' becomes a copy because we'll\n            # clear out 'furtherPath'\n            name = furtherPath[:]\n            if not name:\n                name = None\n            # make sure that traversal ends here with us\n            furtherPath[:] = []\n            return method(name)\n        return getattr(self, name)\n\n    def same_part(self, name, ob1, ob2):\n        if name is None:\n            return ob1 == ob2\n        if isinstance(name, str):\n            name = name.split('/')\n        elif isinstance(name, bytes):\n            name = name.split(b'/')\n        try:\n            ob1 = boboAwareZopeTraverse(ob1, name, None)\n            ob2 = boboAwareZopeTraverse(ob2, name, None)\n        except ZopeUndefs:\n            return False\n        return ob1 == ob2\n\n\nclass UnicodeAwareStringExpr(StringExpr):\n\n    def __call__(self, econtext):\n        vvals = []\n        if isinstance(self._expr, str):\n            # coerce values through the Unicode Conflict Resolver\n            evaluate = econtext.evaluateText\n        else:\n            evaluate = econtext.evaluate\n        for var in self._vars:\n            v = evaluate(var)\n            vvals.append(v)\n        return self._expr % tuple(vvals)\n\n\ndef createZopeEngine(zpe=ZopePathExpr, untrusted=True):\n    e = ZopeEngine()\n    e.iteratorFactory = PathIterator\n    for pt in zpe._default_type_names:\n        e.registerType(pt, zpe)\n    e.registerType('string', UnicodeAwareStringExpr)\n    e.registerType('python', ZRPythonExpr.PythonExpr)\n    e.registerType('not', NotExpr)\n    e.registerType('defer', DeferExpr)\n    e.registerType('lazy', LazyExpr)\n    e.registerType('provider', TALESProviderExpression)\n    e.registerBaseName('modules', SecureModuleImporter)\n    e.untrusted = untrusted\n    return e\n\n\ndef createTrustedZopeEngine():\n    # same as createZopeEngine, but use non-restricted Python\n    # expression evaluator\n    # still uses the ``SecureModuleImporter``\n    e = createZopeEngine(TrustedZopePathExpr, untrusted=False)\n    e.types['python'] = PythonExpr\n    return e\n\n\n_engine = createZopeEngine()\n\n\ndef getEngine():\n    return _engine\n\n\n_trusted_engine = createTrustedZopeEngine()\n\n\ndef getTrustedEngine():\n    return _trusted_engine\n", "code_before": "##############################################################################\n#\n# Copyright (c) 2002 Zope Foundation and Contributors.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE\n#\n##############################################################################\n\"\"\"Page Template Expression Engine\n\nPage Template-specific implementation of TALES, with handlers\nfor Python expressions, string literals, and paths.\n\"\"\"\n\nimport logging\nimport warnings\n\nimport OFS.interfaces\nfrom AccessControl import safe_builtins\nfrom Acquisition import aq_base\nfrom MultiMapping import MultiMapping\nfrom zExceptions import NotFound\nfrom zExceptions import Unauthorized\nfrom zope.component import queryUtility\nfrom zope.contentprovider.tales import TALESProviderExpression\nfrom zope.i18n import translate\nfrom zope.interface import implementer\nfrom zope.pagetemplate.engine import ZopeEngine as Z3Engine\nfrom zope.proxy import removeAllProxies\nfrom zope.tales.expressions import DeferExpr\nfrom zope.tales.expressions import LazyExpr\nfrom zope.tales.expressions import NotExpr\nfrom zope.tales.expressions import PathExpr\nfrom zope.tales.expressions import StringExpr\nfrom zope.tales.expressions import SubPathExpr\nfrom zope.tales.expressions import Undefs\nfrom zope.tales.pythonexpr import PythonExpr\nfrom zope.tales.tales import Context\nfrom zope.tales.tales import ErrorInfo as BaseErrorInfo\nfrom zope.tales.tales import Iterator\nfrom zope.traversing.adapters import traversePathElement\nfrom zope.traversing.interfaces import ITraversable\n\nfrom . import ZRPythonExpr\nfrom .interfaces import IUnicodeEncodingConflictResolver\nfrom .interfaces import IZopeAwareEngine\n\n\nSecureModuleImporter = ZRPythonExpr._SecureModuleImporter()\n\nLOG = logging.getLogger('Expressions')\n\n# In Zope 2 traversal semantics, NotFound or Unauthorized (the Zope 2\n# versions) indicate that traversal has failed.  By default, zope.tales'\n# engine doesn't recognize them as such which is why we extend its\n# list here and make sure our implementation of the TALES\n# Path Expression uses them\nZopeUndefs = Undefs + (NotFound, Unauthorized)\n\n\ndef boboAwareZopeTraverse(object, path_items, econtext):\n    \"\"\"Traverses a sequence of names, first trying attributes then items.\n\n    This uses zope.traversing path traversal where possible and interacts\n    correctly with objects providing OFS.interface.ITraversable when\n    necessary (bobo-awareness).\n    \"\"\"\n    request = getattr(econtext, 'request', None)\n    path_items = list(path_items)\n    path_items.reverse()\n\n    while path_items:\n        name = path_items.pop()\n\n        if name == '_':\n            warnings.warn('Traversing to the name `_` is deprecated '\n                          'and will be removed in Zope 6.',\n                          DeprecationWarning)\n        elif name.startswith('_'):\n            raise NotFound(name)\n\n        if OFS.interfaces.ITraversable.providedBy(object):\n            object = object.restrictedTraverse(name)\n        else:\n            object = traversePathElement(object, name, path_items,\n                                         request=request)\n    return object\n\n\ndef trustedBoboAwareZopeTraverse(object, path_items, econtext):\n    \"\"\"Traverses a sequence of names, first trying attributes then items.\n\n    This uses zope.traversing path traversal where possible and interacts\n    correctly with objects providing OFS.interface.ITraversable when\n    necessary (bobo-awareness).\n    \"\"\"\n    request = getattr(econtext, 'request', None)\n    path_items = list(path_items)\n    path_items.reverse()\n\n    while path_items:\n        name = path_items.pop()\n        if OFS.interfaces.ITraversable.providedBy(object):\n            object = object.unrestrictedTraverse(name)\n        else:\n            object = traversePathElement(object, name, path_items,\n                                         request=request)\n    return object\n\n\ndef render(ob, ns):\n    \"\"\"Calls the object, possibly a document template, or just returns\n    it if not callable.  (From DT_Util.py)\n    \"\"\"\n    if hasattr(ob, '__render_with_namespace__'):\n        ob = ZRPythonExpr.call_with_ns(ob.__render_with_namespace__, ns)\n    else:\n        # items might be acquisition wrapped\n        base = aq_base(ob)\n        # item might be proxied (e.g. modules might have a deprecation\n        # proxy)\n        base = removeAllProxies(base)\n        if callable(base):\n            try:\n                if getattr(base, 'isDocTemp', 0):\n                    ob = ZRPythonExpr.call_with_ns(ob, ns, 2)\n                else:\n                    ob = ob()\n            except NotImplementedError:\n                pass\n    return ob\n\n\nclass _CombinedMapping:\n    \"\"\"Minimal auxiliary class to combine several mappings.\n\n    Earlier mappings take precedence.\n    \"\"\"\n    def __init__(self, *ms):\n        self.mappings = ms\n\n    def get(self, key, default):\n        for m in self.mappings:\n            value = m.get(key, self)\n            if value is not self:\n                return value\n        return default\n\n\nclass UntrustedSubPathExpr(SubPathExpr):\n    ALLOWED_BUILTINS = safe_builtins\n\n\nclass TrustedSubPathExpr(SubPathExpr):\n    # we allow both Python's builtins (we are trusted)\n    # as well as ``safe_builtins`` (because it may contain extensions)\n    # Python's builtins take precedence, because those of\n    # ``safe_builtins`` may have special restrictions for\n    # the use in an untrusted context\n    ALLOWED_BUILTINS = _CombinedMapping(\n        __builtins__,\n        safe_builtins)\n\n\nclass ZopePathExpr(PathExpr):\n\n    _TRAVERSER = staticmethod(boboAwareZopeTraverse)\n    SUBEXPR_FACTORY = UntrustedSubPathExpr\n\n    def __init__(self, name, expr, engine):\n        if not expr.strip():\n            expr = 'nothing'\n        super().__init__(name, expr, engine, self._TRAVERSER)\n\n    # override this to support different call metrics (see bottom of\n    # method) and Zope 2's traversal exceptions (ZopeUndefs instead of\n    # Undefs)\n    def _eval(self, econtext):\n        for expr in self._subexprs[:-1]:\n            # Try all but the last subexpression, skipping undefined ones.\n            try:\n                ob = expr(econtext)\n            except ZopeUndefs:  # use Zope 2 expression types\n                pass\n            else:\n                break\n        else:\n            # On the last subexpression allow exceptions through.\n            ob = self._subexprs[-1](econtext)\n            if self._hybrid:\n                return ob\n\n        if self._name == 'nocall':\n            return ob\n\n        # this is where we are different from our super class:\n        return render(ob, econtext.vars)\n\n    # override this to support Zope 2's traversal exceptions\n    # (ZopeUndefs instead of Undefs)\n    def _exists(self, econtext):\n        for expr in self._subexprs:\n            try:\n                expr(econtext)\n            except ZopeUndefs:  # use Zope 2 expression types\n                pass\n            else:\n                return 1\n        return 0\n\n\nclass TrustedZopePathExpr(ZopePathExpr):\n    _TRAVERSER = staticmethod(trustedBoboAwareZopeTraverse)\n    SUBEXPR_FACTORY = TrustedSubPathExpr\n\n\nclass SafeMapping(MultiMapping):\n    \"\"\"Mapping with security declarations and limited method exposure.\n\n    Since it subclasses MultiMapping, this class can be used to wrap\n    one or more mapping objects.  Restricted Python code will not be\n    able to mutate the SafeMapping or the wrapped mappings, but will be\n    able to read any value.\n    \"\"\"\n    __allow_access_to_unprotected_subobjects__ = True\n    push = pop = None\n\n    _push = MultiMapping.push\n    _pop = MultiMapping.pop\n\n\nclass ZopeContext(Context):\n\n    def __init__(self, engine, contexts):\n        super().__init__(engine, contexts)\n        # wrap the top-level 'repeat' variable, as it is visible to\n        # restricted code\n        self.setContext('repeat', SafeMapping(self.repeat_vars))\n        # regenerate the first scope and the scope stack after messing\n        # with the global context\n        self.vars = vars = contexts.copy()\n        self._vars_stack = [vars]\n\n    def translate(self, msgid, domain=None, mapping=None, default=None):\n        context = self.contexts.get('request')\n        return translate(\n            msgid, domain=domain, mapping=mapping,\n            context=context, default=default)\n\n    def evaluateBoolean(self, expr):\n        value = self.evaluate(expr)\n        # here we override the normal zope.tales behaviour. zope.tales\n        # doesn't care about the default in a boolean expression,\n        # while we do (Zope 2 legacy, see the\n        # BooleanAttributesAndDefault.html test case)\n        if value is self.getDefault():\n            return value\n        return bool(value)\n\n    def evaluateStructure(self, expr):\n        \"\"\" customized version in order to get rid of unicode\n            errors for all and ever\n        \"\"\"\n        text = super().evaluateStructure(expr)\n        return self._handleText(text, expr)\n\n    def evaluateText(self, expr):\n        \"\"\" customized version in order to get rid of unicode\n            errors for all and ever\n        \"\"\"\n        text = self.evaluate(expr)\n        return self._handleText(text, expr)\n\n    def _handleText(self, text, expr):\n\n        if text is self.getDefault() or text is None:\n            # XXX: should be unicode???\n            return text\n\n        if isinstance(text, str):\n            # we love unicode, nothing to do\n            return text\n\n        elif isinstance(text, bytes):\n            # bahh...non-unicode string..we need to convert it to unicode\n\n            # catch ComponentLookupError in order to make tests shut-up.\n            # This should not be a problem since it won't change the old\n            # default behavior\n\n            resolver = queryUtility(IUnicodeEncodingConflictResolver)\n            if resolver is None:\n                return text.decode('ascii')\n\n            try:\n                return resolver.resolve(\n                    self.contexts.get('context'), text, expr)\n            except UnicodeDecodeError as e:\n                LOG.error(\"UnicodeDecodeError detected for expression \\\"%s\\\"\\n\"\n                          \"Resolver class: %s\\n\"\n                          \"Exception text: %s\\n\"\n                          \"Template: %s\\n\"\n                          \"Rendered text: %r\" %\n                          (expr, resolver.__class__, e,\n                           self.contexts['template'].absolute_url(1), text))\n                raise\n        else:\n            # This is a weird culprit ...calling text_type() on non-string\n            # objects\n            return str(text)\n\n    def createErrorInfo(self, err, position):\n        # Override, returning an object accessible to untrusted code.\n        # See: https://bugs.launchpad.net/zope2/+bug/174705\n        return ErrorInfo(err, position)\n\n    def evaluateCode(self, lang, code):\n        \"\"\" See ITALExpressionEngine.\n\n        o This method is a fossil:  nobody actually calls it, but the\n          interface requires it.\n        \"\"\"\n        raise NotImplementedError\n\n\nclass ErrorInfo(BaseErrorInfo):\n    \"\"\"Information about an exception passed to an on-error handler.\n    \"\"\"\n    __allow_access_to_unprotected_subobjects__ = True\n\n\n# Whether an engine is Zope aware does not depend on the class\n# but how it is configured - especially, that is uses a Zope aware\n# `PathExpr` implementation.\n# Nevertheless, we mark the class as \"Zope aware\" for simplicity\n# assuming that users of the class use a proper `PathExpr`\n@implementer(IZopeAwareEngine)\nclass ZopeEngine(Z3Engine):\n\n    _create_context = ZopeContext\n\n\nclass ZopeIterator(Iterator):\n\n    # allow iterator API to be accessed from (restricted) Python TALES\n    # expressions\n    __allow_access_to_unprotected_subobjects__ = True\n\n    # The things below used to be attributes in\n    # ZTUtils.Iterator.Iterator, however in zope.tales.tales.Iterator\n    # they're methods.  We need BBB on the Python level so we redefine\n    # them as properties here.  Eventually, we would like to get rid\n    # of them, though, so that we won't have to maintain yet another\n    # iterator class somewhere.\n\n    @property\n    def index(self):\n        return super().index()\n\n    @property\n    def start(self):\n        return super().start()\n\n    @property\n    def end(self):\n        return super().end()\n\n    @property\n    def item(self):\n        return super().item()\n\n    # 'first' and 'last' are Zope 2 enhancements to the TALES iterator\n    # spec.\n    def first(self, name=None):\n        if self.start:\n            return True\n        return not self.same_part(name, self._last_item, self.item)\n\n    def last(self, name=None):\n        if self.end:\n            return True\n        return not self.same_part(name, self.item, self._next)\n\n    def same_part(self, name, ob1, ob2):\n        if name is None:\n            return ob1 == ob2\n        no = object()\n        return getattr(ob1, name, no) == getattr(ob2, name, no) is not no\n\n    # 'first' needs to have access to the last item in the loop\n    def __next__(self):\n        if self._nextIndex > 0:\n            self._last_item = self.item\n        return super().__next__()\n\n    def next(self):\n        if self._nextIndex > 0:\n            self._last_item = self.item\n        return super().next()\n\n\n@implementer(ITraversable)\nclass PathIterator(ZopeIterator):\n    \"\"\"A TALES Iterator with the ability to use first() and last() on\n    subpaths of elements.\"\"\"\n\n    def traverse(self, name, furtherPath):\n        if name in ('first', 'last'):\n            method = getattr(self, name)\n            # it's important that 'name' becomes a copy because we'll\n            # clear out 'furtherPath'\n            name = furtherPath[:]\n            if not name:\n                name = None\n            # make sure that traversal ends here with us\n            furtherPath[:] = []\n            return method(name)\n        return getattr(self, name)\n\n    def same_part(self, name, ob1, ob2):\n        if name is None:\n            return ob1 == ob2\n        if isinstance(name, str):\n            name = name.split('/')\n        elif isinstance(name, bytes):\n            name = name.split(b'/')\n        try:\n            ob1 = boboAwareZopeTraverse(ob1, name, None)\n            ob2 = boboAwareZopeTraverse(ob2, name, None)\n        except ZopeUndefs:\n            return False\n        return ob1 == ob2\n\n\nclass UnicodeAwareStringExpr(StringExpr):\n\n    def __call__(self, econtext):\n        vvals = []\n        if isinstance(self._expr, str):\n            # coerce values through the Unicode Conflict Resolver\n            evaluate = econtext.evaluateText\n        else:\n            evaluate = econtext.evaluate\n        for var in self._vars:\n            v = evaluate(var)\n            vvals.append(v)\n        return self._expr % tuple(vvals)\n\n\ndef createZopeEngine(zpe=ZopePathExpr, untrusted=True):\n    e = ZopeEngine()\n    e.iteratorFactory = PathIterator\n    for pt in zpe._default_type_names:\n        e.registerType(pt, zpe)\n    e.registerType('string', UnicodeAwareStringExpr)\n    e.registerType('python', ZRPythonExpr.PythonExpr)\n    e.registerType('not', NotExpr)\n    e.registerType('defer', DeferExpr)\n    e.registerType('lazy', LazyExpr)\n    e.registerType('provider', TALESProviderExpression)\n    e.registerBaseName('modules', SecureModuleImporter)\n    e.untrusted = untrusted\n    return e\n\n\ndef createTrustedZopeEngine():\n    # same as createZopeEngine, but use non-restricted Python\n    # expression evaluator\n    # still uses the ``SecureModuleImporter``\n    e = createZopeEngine(TrustedZopePathExpr, untrusted=False)\n    e.types['python'] = PythonExpr\n    return e\n\n\n_engine = createZopeEngine()\n\n\ndef getEngine():\n    return _engine\n\n\n_trusted_engine = createTrustedZopeEngine()\n\n\ndef getTrustedEngine():\n    return _trusted_engine\n", "patch": "@@ -21,6 +21,7 @@\n \n import OFS.interfaces\n from AccessControl import safe_builtins\n+from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_base\n from MultiMapping import MultiMapping\n from zExceptions import NotFound\n@@ -70,24 +71,43 @@ def boboAwareZopeTraverse(object, path_items, econtext):\n     necessary (bobo-awareness).\n     \"\"\"\n     request = getattr(econtext, 'request', None)\n+    validate = getSecurityManager().validate\n     path_items = list(path_items)\n     path_items.reverse()\n \n     while path_items:\n         name = path_items.pop()\n \n-        if name == '_':\n-            warnings.warn('Traversing to the name `_` is deprecated '\n-                          'and will be removed in Zope 6.',\n-                          DeprecationWarning)\n-        elif name.startswith('_'):\n-            raise NotFound(name)\n-\n         if OFS.interfaces.ITraversable.providedBy(object):\n             object = object.restrictedTraverse(name)\n         else:\n-            object = traversePathElement(object, name, path_items,\n-                                         request=request)\n+            found = traversePathElement(object, name, path_items,\n+                                        request=request)\n+\n+            # Special backwards compatibility exception for the name ``_``,\n+            # which was often used for translation message factories.\n+            # Allow and continue traversal.\n+            if name == '_':\n+                warnings.warn('Traversing to the name `_` is deprecated '\n+                              'and will be removed in Zope 6.',\n+                              DeprecationWarning)\n+                object = found\n+                continue\n+\n+            # All other names starting with ``_`` are disallowed.\n+            # This emulates what restrictedTraverse does.\n+            if name.startswith('_'):\n+                raise NotFound(name)\n+\n+            # traversePathElement doesn't apply any Zope security policy,\n+            # so we validate access explicitly here.\n+            try:\n+                validate(object, object, name, found)\n+                object = found\n+            except Unauthorized:\n+                # Convert Unauthorized to prevent information disclosures\n+                raise NotFound(name)\n+\n     return object\n \n ", "file_path": "files/2021_6/286", "file_language": "py", "file_name": "src/Products/PageTemplates/Expressions.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/zopefoundation/Zope/raw/1d897910139e2c0b11984fc9b78c1da1365bec21/src%2FProducts%2FPageTemplates%2Fexpression.py", "code": "\"\"\"``chameleon.tales`` expressions.\"\"\"\n\nimport warnings\nfrom ast import NodeTransformer\nfrom ast import parse\n\nfrom chameleon.astutil import Static\nfrom chameleon.astutil import Symbol\nfrom chameleon.codegen import template\nfrom chameleon.tales import NotExpr\nfrom chameleon.tales import StringExpr\n\nfrom AccessControl.SecurityManagement import getSecurityManager\nfrom AccessControl.ZopeGuards import guarded_apply\nfrom AccessControl.ZopeGuards import guarded_getattr\nfrom AccessControl.ZopeGuards import guarded_getitem\nfrom AccessControl.ZopeGuards import guarded_iter\nfrom AccessControl.ZopeGuards import protected_inplacevar\nfrom OFS.interfaces import ITraversable\nfrom RestrictedPython import RestrictingNodeTransformer\nfrom RestrictedPython.Utilities import utility_builtins\nfrom z3c.pt import expressions\nfrom zExceptions import NotFound\nfrom zExceptions import Unauthorized\nfrom zope.interface import implementer\nfrom zope.tales.tales import ExpressionEngine\nfrom zope.traversing.adapters import traversePathElement\nfrom zope.traversing.interfaces import TraversalError\n\nfrom .Expressions import render\nfrom .interfaces import IZopeAwareEngine\n\n\n_marker = object()\n\nzope2_exceptions = (\n    AttributeError,\n    LookupError,\n    NameError,\n    TypeError,\n    ValueError,\n    NotFound,\n    Unauthorized,\n    TraversalError,\n)\n\n\ndef static(obj):\n    return Static(template(\"obj\", obj=Symbol(obj), mode=\"eval\"))\n\n\nclass BoboAwareZopeTraverse:\n    traverse_method = 'restrictedTraverse'\n\n    __slots__ = ()\n\n    @classmethod\n    def traverse(cls, base, request, path_items):\n        \"\"\"See ``zope.app.pagetemplate.engine``.\"\"\"\n\n        validate = getSecurityManager().validate\n        path_items = list(path_items)\n        path_items.reverse()\n\n        while path_items:\n            name = path_items.pop()\n\n            if ITraversable.providedBy(base):\n                base = getattr(base, cls.traverse_method)(name)\n            else:\n                found = traversePathElement(base, name, path_items,\n                                            request=request)\n\n                # If traverse_method is something other than\n                # ``restrictedTraverse`` then traversal is assumed to be\n                # unrestricted. This emulates ``unrestrictedTraverse``\n                if cls.traverse_method != 'restrictedTraverse':\n                    base = found\n                    continue\n\n                # Special backwards compatibility exception for the name ``_``,\n                # which was often used for translation message factories.\n                # Allow and continue traversal.\n                if name == '_':\n                    warnings.warn('Traversing to the name `_` is deprecated '\n                                  'and will be removed in Zope 6.',\n                                  DeprecationWarning)\n                    base = found\n                    continue\n\n                # All other names starting with ``_`` are disallowed.\n                # This emulates what restrictedTraverse does.\n                if name.startswith('_'):\n                    raise NotFound(name)\n\n                # traversePathElement doesn't apply any Zope security policy,\n                # so we validate access explicitly here.\n                try:\n                    validate(base, base, name, found)\n                    base = found\n                except Unauthorized:\n                    # Convert Unauthorized to prevent information disclosures\n                    raise NotFound(name)\n\n        return base\n\n    def __call__(self, base, econtext, call, path_items):\n        request = econtext.get('request')\n\n        if path_items:\n            base = self.traverse(base, request, path_items)\n\n        if call is False:\n            return base\n\n        if getattr(base, '__call__', _marker) is not _marker or \\\n           callable(base):\n            base = render(base, econtext)\n\n        return base\n\n\nclass TrustedBoboAwareZopeTraverse(BoboAwareZopeTraverse):\n    traverse_method = 'unrestrictedTraverse'\n\n    __slots__ = ()\n\n    def __call__(self, base, econtext, call, path_items):\n        request = econtext.get('request')\n\n        base = self.traverse(base, request, path_items)\n\n        if call is False:\n            return base\n\n        if getattr(base, '__call__', _marker) is not _marker or \\\n           isinstance(base, type):\n            return base()\n\n        return base\n\n\nclass PathExpr(expressions.PathExpr):\n    exceptions = zope2_exceptions\n\n    traverser = Static(template(\n        \"cls()\", cls=Symbol(BoboAwareZopeTraverse), mode=\"eval\"\n    ))\n\n\nclass TrustedPathExpr(PathExpr):\n    traverser = Static(template(\n        \"cls()\", cls=Symbol(TrustedBoboAwareZopeTraverse), mode=\"eval\"\n    ))\n\n\nclass NocallExpr(expressions.NocallExpr, PathExpr):\n    pass\n\n\nclass ExistsExpr(expressions.ExistsExpr):\n    exceptions = zope2_exceptions\n\n\nclass RestrictionTransform(NodeTransformer):\n    secured = {\n        '_getattr_': guarded_getattr,\n        '_getitem_': guarded_getitem,\n        '_apply_': guarded_apply,\n        '_getiter_': guarded_iter,\n        '_inplacevar_': protected_inplacevar,\n    }\n\n    def visit_Name(self, node):\n        value = self.secured.get(node.id)\n        if value is not None:\n            return Symbol(value)\n\n        return node\n\n\nclass UntrustedPythonExpr(expressions.PythonExpr):\n    restricted_python_transformer = RestrictingNodeTransformer()\n    page_templates_expression_transformer = RestrictionTransform()\n\n    # Make copy of parent expression builtins\n    builtins = expressions.PythonExpr.builtins.copy()\n\n    # Update builtins with Restricted Python utility builtins\n    builtins.update({\n        name: static(builtin) for (name, builtin) in utility_builtins.items()\n    })\n\n    def parse(self, string):\n        encoded = string.encode('utf-8')\n        node = parse(encoded, mode='eval')\n\n        # Run Node Transformation from RestrictedPython:\n        self.restricted_python_transformer.visit(node)\n\n        # Run PageTemplate.expression RestrictedPython Transform:\n        self.page_templates_expression_transformer.visit(node)\n\n        return node\n\n\n# Whether an engine is Zope aware does not depend on the class\n# but how it is configured - especially, that is uses a Zope aware\n# `PathExpr` implementation.\n# Nevertheless, we mark the class as \"Zope aware\" for simplicity\n# assuming that users of the class use a proper `PathExpr`\n@implementer(IZopeAwareEngine)\nclass ChameleonEngine(ExpressionEngine):\n    \"\"\"Expression engine for ``chameleon.tales``.\n\n    Only partially implemented: its ``compile`` is currently unusable\n    \"\"\"\n    def compile(self, expression):\n        raise NotImplementedError()\n\n\ntypes = dict(\n    python=UntrustedPythonExpr,\n    string=StringExpr,\n    not_=NotExpr,\n    exists=ExistsExpr,\n    path=PathExpr,\n    provider=expressions.ProviderExpr,\n    nocall=NocallExpr)\n\n\ndef createChameleonEngine(types=types, untrusted=True, **overrides):\n    e = ChameleonEngine()\n\n    def norm(k):\n        return k[:-1] if k.endswith(\"_\") else k\n\n    e.untrusted = untrusted\n    ts = e.types\n    for k, v in types.items():\n        k = norm(k)\n        e.registerType(k, v)\n    for k, v in overrides.items():\n        k = norm(k)\n        if k in ts:\n            del ts[k]\n        e.registerType(k, v)\n    return e\n\n\ndef createTrustedChameleonEngine(**overrides):\n    ovr = dict(python=expressions.PythonExpr, path=TrustedPathExpr)\n    ovr.update(overrides)\n    return createChameleonEngine(untrusted=False, **ovr)\n\n\n_engine = createChameleonEngine()\n\n\ndef getEngine():\n    return _engine\n\n\n_trusted_engine = createTrustedChameleonEngine()\n\n\ndef getTrustedEngine():\n    return _trusted_engine\n", "code_before": "\"\"\"``chameleon.tales`` expressions.\"\"\"\n\nimport warnings\nfrom ast import NodeTransformer\nfrom ast import parse\n\nfrom chameleon.astutil import Static\nfrom chameleon.astutil import Symbol\nfrom chameleon.codegen import template\nfrom chameleon.tales import NotExpr\nfrom chameleon.tales import StringExpr\n\nfrom AccessControl.ZopeGuards import guarded_apply\nfrom AccessControl.ZopeGuards import guarded_getattr\nfrom AccessControl.ZopeGuards import guarded_getitem\nfrom AccessControl.ZopeGuards import guarded_iter\nfrom AccessControl.ZopeGuards import protected_inplacevar\nfrom OFS.interfaces import ITraversable\nfrom RestrictedPython import RestrictingNodeTransformer\nfrom RestrictedPython.Utilities import utility_builtins\nfrom z3c.pt import expressions\nfrom zExceptions import NotFound\nfrom zExceptions import Unauthorized\nfrom zope.interface import implementer\nfrom zope.tales.tales import ExpressionEngine\nfrom zope.traversing.adapters import traversePathElement\nfrom zope.traversing.interfaces import TraversalError\n\nfrom .Expressions import render\nfrom .interfaces import IZopeAwareEngine\n\n\n_marker = object()\n\nzope2_exceptions = (\n    AttributeError,\n    LookupError,\n    NameError,\n    TypeError,\n    ValueError,\n    NotFound,\n    Unauthorized,\n    TraversalError,\n)\n\n\ndef static(obj):\n    return Static(template(\"obj\", obj=Symbol(obj), mode=\"eval\"))\n\n\nclass BoboAwareZopeTraverse:\n    traverse_method = 'restrictedTraverse'\n\n    __slots__ = ()\n\n    @classmethod\n    def traverse(cls, base, request, path_items):\n        \"\"\"See ``zope.app.pagetemplate.engine``.\"\"\"\n\n        path_items = list(path_items)\n        path_items.reverse()\n\n        while path_items:\n            name = path_items.pop()\n\n            if name == '_':\n                warnings.warn('Traversing to the name `_` is deprecated '\n                              'and will be removed in Zope 6.',\n                              DeprecationWarning)\n            elif name.startswith('_'):\n                raise NotFound(name)\n\n            if ITraversable.providedBy(base):\n                base = getattr(base, cls.traverse_method)(name)\n            else:\n                base = traversePathElement(base, name, path_items,\n                                           request=request)\n\n        return base\n\n    def __call__(self, base, econtext, call, path_items):\n        request = econtext.get('request')\n\n        if path_items:\n            base = self.traverse(base, request, path_items)\n\n        if call is False:\n            return base\n\n        if getattr(base, '__call__', _marker) is not _marker or \\\n           callable(base):\n            base = render(base, econtext)\n\n        return base\n\n\nclass TrustedBoboAwareZopeTraverse(BoboAwareZopeTraverse):\n    traverse_method = 'unrestrictedTraverse'\n\n    __slots__ = ()\n\n    def __call__(self, base, econtext, call, path_items):\n        request = econtext.get('request')\n\n        base = self.traverse(base, request, path_items)\n\n        if call is False:\n            return base\n\n        if getattr(base, '__call__', _marker) is not _marker or \\\n           isinstance(base, type):\n            return base()\n\n        return base\n\n\nclass PathExpr(expressions.PathExpr):\n    exceptions = zope2_exceptions\n\n    traverser = Static(template(\n        \"cls()\", cls=Symbol(BoboAwareZopeTraverse), mode=\"eval\"\n    ))\n\n\nclass TrustedPathExpr(PathExpr):\n    traverser = Static(template(\n        \"cls()\", cls=Symbol(TrustedBoboAwareZopeTraverse), mode=\"eval\"\n    ))\n\n\nclass NocallExpr(expressions.NocallExpr, PathExpr):\n    pass\n\n\nclass ExistsExpr(expressions.ExistsExpr):\n    exceptions = zope2_exceptions\n\n\nclass RestrictionTransform(NodeTransformer):\n    secured = {\n        '_getattr_': guarded_getattr,\n        '_getitem_': guarded_getitem,\n        '_apply_': guarded_apply,\n        '_getiter_': guarded_iter,\n        '_inplacevar_': protected_inplacevar,\n    }\n\n    def visit_Name(self, node):\n        value = self.secured.get(node.id)\n        if value is not None:\n            return Symbol(value)\n\n        return node\n\n\nclass UntrustedPythonExpr(expressions.PythonExpr):\n    restricted_python_transformer = RestrictingNodeTransformer()\n    page_templates_expression_transformer = RestrictionTransform()\n\n    # Make copy of parent expression builtins\n    builtins = expressions.PythonExpr.builtins.copy()\n\n    # Update builtins with Restricted Python utility builtins\n    builtins.update({\n        name: static(builtin) for (name, builtin) in utility_builtins.items()\n    })\n\n    def parse(self, string):\n        encoded = string.encode('utf-8')\n        node = parse(encoded, mode='eval')\n\n        # Run Node Transformation from RestrictedPython:\n        self.restricted_python_transformer.visit(node)\n\n        # Run PageTemplate.expression RestrictedPython Transform:\n        self.page_templates_expression_transformer.visit(node)\n\n        return node\n\n\n# Whether an engine is Zope aware does not depend on the class\n# but how it is configured - especially, that is uses a Zope aware\n# `PathExpr` implementation.\n# Nevertheless, we mark the class as \"Zope aware\" for simplicity\n# assuming that users of the class use a proper `PathExpr`\n@implementer(IZopeAwareEngine)\nclass ChameleonEngine(ExpressionEngine):\n    \"\"\"Expression engine for ``chameleon.tales``.\n\n    Only partially implemented: its ``compile`` is currently unusable\n    \"\"\"\n    def compile(self, expression):\n        raise NotImplementedError()\n\n\ntypes = dict(\n    python=UntrustedPythonExpr,\n    string=StringExpr,\n    not_=NotExpr,\n    exists=ExistsExpr,\n    path=PathExpr,\n    provider=expressions.ProviderExpr,\n    nocall=NocallExpr)\n\n\ndef createChameleonEngine(types=types, untrusted=True, **overrides):\n    e = ChameleonEngine()\n\n    def norm(k):\n        return k[:-1] if k.endswith(\"_\") else k\n\n    e.untrusted = untrusted\n    ts = e.types\n    for k, v in types.items():\n        k = norm(k)\n        e.registerType(k, v)\n    for k, v in overrides.items():\n        k = norm(k)\n        if k in ts:\n            del ts[k]\n        e.registerType(k, v)\n    return e\n\n\ndef createTrustedChameleonEngine(**overrides):\n    ovr = dict(python=expressions.PythonExpr, path=TrustedPathExpr)\n    ovr.update(overrides)\n    return createChameleonEngine(untrusted=False, **ovr)\n\n\n_engine = createChameleonEngine()\n\n\ndef getEngine():\n    return _engine\n\n\n_trusted_engine = createTrustedChameleonEngine()\n\n\ndef getTrustedEngine():\n    return _trusted_engine\n", "patch": "@@ -10,6 +10,7 @@\n from chameleon.tales import NotExpr\n from chameleon.tales import StringExpr\n \n+from AccessControl.SecurityManagement import getSecurityManager\n from AccessControl.ZopeGuards import guarded_apply\n from AccessControl.ZopeGuards import guarded_getattr\n from AccessControl.ZopeGuards import guarded_getitem\n@@ -57,24 +58,49 @@ class BoboAwareZopeTraverse:\n     def traverse(cls, base, request, path_items):\n         \"\"\"See ``zope.app.pagetemplate.engine``.\"\"\"\n \n+        validate = getSecurityManager().validate\n         path_items = list(path_items)\n         path_items.reverse()\n \n         while path_items:\n             name = path_items.pop()\n \n-            if name == '_':\n-                warnings.warn('Traversing to the name `_` is deprecated '\n-                              'and will be removed in Zope 6.',\n-                              DeprecationWarning)\n-            elif name.startswith('_'):\n-                raise NotFound(name)\n-\n             if ITraversable.providedBy(base):\n                 base = getattr(base, cls.traverse_method)(name)\n             else:\n-                base = traversePathElement(base, name, path_items,\n-                                           request=request)\n+                found = traversePathElement(base, name, path_items,\n+                                            request=request)\n+\n+                # If traverse_method is something other than\n+                # ``restrictedTraverse`` then traversal is assumed to be\n+                # unrestricted. This emulates ``unrestrictedTraverse``\n+                if cls.traverse_method != 'restrictedTraverse':\n+                    base = found\n+                    continue\n+\n+                # Special backwards compatibility exception for the name ``_``,\n+                # which was often used for translation message factories.\n+                # Allow and continue traversal.\n+                if name == '_':\n+                    warnings.warn('Traversing to the name `_` is deprecated '\n+                                  'and will be removed in Zope 6.',\n+                                  DeprecationWarning)\n+                    base = found\n+                    continue\n+\n+                # All other names starting with ``_`` are disallowed.\n+                # This emulates what restrictedTraverse does.\n+                if name.startswith('_'):\n+                    raise NotFound(name)\n+\n+                # traversePathElement doesn't apply any Zope security policy,\n+                # so we validate access explicitly here.\n+                try:\n+                    validate(base, base, name, found)\n+                    base = found\n+                except Unauthorized:\n+                    # Convert Unauthorized to prevent information disclosures\n+                    raise NotFound(name)\n \n         return base\n ", "file_path": "files/2021_6/287", "file_language": "py", "file_name": "src/Products/PageTemplates/expression.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/zopefoundation/Zope/raw/1d897910139e2c0b11984fc9b78c1da1365bec21/src%2FProducts%2FPageTemplates%2Ftests%2FtestExpressions.py", "code": "import unittest\nimport warnings\n\nfrom AccessControl import safe_builtins\nfrom zExceptions import NotFound\nfrom zope.component.testing import PlacelessSetup\nfrom zope.location.interfaces import LocationError\n\n\nclass EngineTestsBase(PlacelessSetup):\n\n    def setUp(self):\n        from zope.component import provideAdapter\n        from zope.traversing.adapters import DefaultTraversable\n        PlacelessSetup.setUp(self)\n        provideAdapter(DefaultTraversable, (None,))\n\n    def tearDown(self):\n        PlacelessSetup.tearDown(self)\n\n    def _makeEngine(self):\n        # subclasses must override\n        raise NotImplementedError\n\n    def _makeContext(self, bindings=None):\n\n        class Dummy:\n            __allow_access_to_unprotected_subobjects__ = 1\n\n            def __call__(self):\n                return 'dummy'\n\n        class DummyDocumentTemplate:\n            __allow_access_to_unprotected_subobjects__ = 1\n            isDocTemp = True\n\n            def __call__(self, client=None, REQUEST={}, RESPONSE=None, **kw):\n                return 'dummy'\n\n            def absolute_url(self, relative=0):\n                url = 'dummy'\n                if not relative:\n                    url = \"http://server/\" + url\n                return url\n\n        _DEFAULT_BINDINGS = dict(\n            one=1,\n            d={'one': 1, 'b': 'b', '': 'blank', '_': 'under'},\n            blank='',\n            dummy=Dummy(),\n            dummy2=DummyDocumentTemplate(),\n            eightbit=b'\\xe4\\xfc\\xf6',\n            # ZopeContext needs 'context' and 'template' keys for unicode\n            # conflict resolution\n            context=Dummy(),\n            template=DummyDocumentTemplate(),\n        )\n\n        if bindings is None:\n            bindings = _DEFAULT_BINDINGS\n        return self._makeEngine().getContext(bindings)\n\n    def test_compile(self):\n        # Test expression compilation\n        e = self._makeEngine()\n        for p in ('x', 'x/y', 'x/y/z'):\n            e.compile(p)\n        e.compile('path:a|b|c/d/e')\n        e.compile('string:Fred')\n        e.compile('string:A$B')\n        e.compile('string:a ${x/y} b ${y/z} c')\n        e.compile('python: 2 + 2')\n        e.compile('python: 2 \\n+\\n 2\\n')\n\n    def test_evaluate_simple_path_binding(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('one'), 1)\n\n    def test_evaluate_simple_path_dict_key_int_value(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('d/one'), 1)\n\n    def test_evaluate_simple_path_dict_key_string_value(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('d/b'), 'b')\n\n    def test_evaluate_with_render_simple_callable(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('dummy'), 'dummy')\n\n    def test_evaluate_with_unimplemented_call(self):\n        class Dummy:\n            def __call__(self):\n                raise NotImplementedError()\n\n        dummy = Dummy()\n        ec = self._makeContext(bindings={'dummy': dummy})\n        self.assertIs(ec.evaluate('dummy'), dummy)\n\n    def test_evaluate_with_render_DTML_template(self):\n        # http://www.zope.org/Collectors/Zope/2232\n        # DTML templates could not be called from a Page Template\n        # due to an ImportError\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('dummy2'), 'dummy')\n\n    def test_evaluate_alternative_first_missing(self):\n        ec = self._makeContext()\n        self.assertTrue(ec.evaluate('x | nothing') is None)\n\n    def test_evaluate_dict_key_as_underscore(self):\n        # Traversing to the name `_` will raise a DeprecationWarning\n        # because it will go away in Zope 6.\n        ec = self._makeContext()\n        with warnings.catch_warnings():\n            warnings.simplefilter('ignore')\n            self.assertEqual(ec.evaluate('d/_'), 'under')\n\n    def test_evaluate_dict_with_key_from_expansion(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('d/?blank'), 'blank')\n\n    def test_hybrid_with_python_expression_int_value(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | python:1+1'), 2)\n\n    def test_hybrid_with_python_expression_type_value_not_called(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | python:int'), int)\n\n    def test_hybrid_with_string_expression(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | string:x'), 'x')\n\n    def test_hybrid_with_string_expression_and_expansion(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | string:$one'), '1')\n\n    def test_hybrid_with_compound_expression_int_value(self):\n        ec = self._makeContext()\n        self.assertTrue(ec.evaluate('x | not:exists:x'))\n\n    def test_access_iterator_from_python_expression(self):\n        ec = self._makeContext()\n        ec.beginScope()\n        ec.setRepeat('loop', \"python:[1,2,3]\")\n        self.assertTrue(ec.evaluate(\"python:repeat['loop'].odd()\"))\n        ec.endScope()\n\n    def test_defer_expression_returns_wrapper(self):\n        from zope.tales.expressions import DeferWrapper\n        ec = self._makeContext()\n        defer = ec.evaluate('defer: b')\n        self.assertIsInstance(defer, DeferWrapper)\n\n    def test_lazy_expression_returns_wrapper(self):\n        from zope.tales.expressions import LazyWrapper\n        ec = self._makeContext()\n        lazy = ec.evaluate('lazy: b')\n        self.assertIsInstance(lazy, LazyWrapper)\n\n    def test_empty_path_expression_explicit(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('path:'), None)\n\n    def test_empty_path_expression_explicit_with_trailing_whitespace(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('path:  '), None)\n\n    def test_empty_path_expression_implicit(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate(''), None)\n\n    def test_empty_path_expression_implicit_with_trailing_whitespace(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('  \\n'), None)\n\n    def test_unicode(self):\n        # All our string expressions are unicode now\n        eng = self._makeEngine()\n        ec = self._makeContext()\n        # XXX: can't do ec.evaluate(u'string:x') directly because ZopeContext\n        # only bothers compiling true strings, not unicode strings\n        result = ec.evaluate(eng.compile('string:x'))\n        self.assertEqual(result, 'x')\n        self.assertIsInstance(result, str)\n\n    def test_mixed(self):\n        # 8-bit strings in unicode string expressions cause UnicodeDecodeErrors\n        eng = self._makeEngine()\n        ec = self._makeContext()\n        expr = eng.compile('string:$eightbit')\n        self.assertRaises(UnicodeDecodeError,\n                          ec.evaluate, expr)\n        # But registering an appropriate IUnicodeEncodingConflictResolver\n        # should fix it\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            StrictUnicodeEncodingConflictResolver\n        from zope.component import provideUtility\n        provideUtility(StrictUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        self.assertEqual(ec.evaluate(expr), '\u00e4\u00fc\u00f6')\n\n    def test_builtin_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate('True'), True)\n        self.assertIs(ec.evaluate('False'), False)\n        self.assertIs(ec.evaluate('nocall: test'), safe_builtins[\"test\"])\n\n\nclass UntrustedEngineTests(EngineTestsBase, unittest.TestCase):\n\n    def _makeEngine(self):\n        from Products.PageTemplates.Expressions import createZopeEngine\n        return createZopeEngine()\n\n    # XXX:  add tests that show security checks being enforced\n\n    def test_open_in_path_expr(self):\n        ec = self._makeContext()\n        with self.assertRaises(KeyError):\n            ec.evaluate(\"nocall:open\")\n\n    def test_list_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate('nocall: list'), safe_builtins[\"list\"])\n\n    def test_underscore_traversal(self):\n        # Prevent traversal to names starting with an underscore (_)\n        ec = self._makeContext()\n\n        with self.assertRaises(NotFound):\n            ec.evaluate(\"context/__class__\")\n\n        with self.assertRaises((NotFound, LocationError)):\n            ec.evaluate(\"nocall: random/_itertools/repeat\")\n\n        with self.assertRaises((NotFound, LocationError)):\n            ec.evaluate(\"random/_itertools/repeat/foobar\")\n\n\nclass TrustedEngineTests(EngineTestsBase, unittest.TestCase):\n\n    def _makeEngine(self):\n        from Products.PageTemplates.Expressions import createTrustedZopeEngine\n        return createTrustedZopeEngine()\n\n    # XXX:  add tests that show security checks *not* being enforced\n\n    def test_open_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate(\"nocall:open\"), open)\n\n    def test_list_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate('nocall: list'), list)\n\n\nclass UnicodeEncodingConflictResolverTests(PlacelessSetup, unittest.TestCase):\n\n    def testDefaultResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            DefaultUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(DefaultUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        self.assertRaises(UnicodeDecodeError,\n                          resolver.resolve, None, b'\\xe4\\xfc\\xf6', None)\n\n    def testStrictResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            StrictUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(StrictUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        text = '\\xe4\\xfc\\xe4'\n        self.assertEqual(resolver.resolve(None, text, None), text)\n\n    def testIgnoringResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            IgnoringUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(IgnoringUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        self.assertEqual(resolver.resolve(None, b'\\xe4\\xfc\\xf6', None), '')\n\n    def testReplacingResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            ReplacingUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(ReplacingUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        self.assertEqual(resolver.resolve(None, b'\\xe4\\xfc\\xf6', None),\n                         '\\ufffd\\ufffd\\ufffd')\n\n\nclass ZopeContextTests(unittest.TestCase):\n\n    def _getTargetClass(self):\n        from Products.PageTemplates.Expressions import ZopeContext\n        return ZopeContext\n\n    def _makeOne(self, engine=None, contexts=None):\n        if engine is None:\n            engine = self._makeEngine()\n        if contexts is None:\n            contexts = {}\n        return self._getTargetClass()(engine, contexts)\n\n    def _makeEngine(self):\n        class DummyEngine:\n            pass\n        return DummyEngine()\n\n    def test_class_conforms_to_ITALExpressionEngine(self):\n        from zope.interface.verify import verifyClass\n        from zope.tal.interfaces import ITALExpressionEngine\n        verifyClass(ITALExpressionEngine, self._getTargetClass())\n\n    def test_instance_conforms_to_ITALExpressionEngine(self):\n        from zope.interface.verify import verifyObject\n        from zope.tal.interfaces import ITALExpressionEngine\n        verifyObject(ITALExpressionEngine, self._makeOne())\n\n    def test_createErrorInfo_returns_unrestricted_object(self):\n        # See: https://bugs.launchpad.net/zope2/+bug/174705\n        context = self._makeOne()\n        info = context.createErrorInfo(AttributeError('nonesuch'), (12, 3))\n        self.assertTrue(info.type is AttributeError)\n        self.assertEqual(info.__allow_access_to_unprotected_subobjects__, 1)\n", "code_before": "import unittest\nimport warnings\n\nfrom AccessControl import safe_builtins\nfrom zExceptions import NotFound\nfrom zope.component.testing import PlacelessSetup\n\n\nclass EngineTestsBase(PlacelessSetup):\n\n    def setUp(self):\n        from zope.component import provideAdapter\n        from zope.traversing.adapters import DefaultTraversable\n        PlacelessSetup.setUp(self)\n        provideAdapter(DefaultTraversable, (None,))\n\n    def tearDown(self):\n        PlacelessSetup.tearDown(self)\n\n    def _makeEngine(self):\n        # subclasses must override\n        raise NotImplementedError\n\n    def _makeContext(self, bindings=None):\n\n        class Dummy:\n            __allow_access_to_unprotected_subobjects__ = 1\n\n            def __call__(self):\n                return 'dummy'\n\n        class DummyDocumentTemplate:\n            __allow_access_to_unprotected_subobjects__ = 1\n            isDocTemp = True\n\n            def __call__(self, client=None, REQUEST={}, RESPONSE=None, **kw):\n                return 'dummy'\n\n            def absolute_url(self, relative=0):\n                url = 'dummy'\n                if not relative:\n                    url = \"http://server/\" + url\n                return url\n\n        _DEFAULT_BINDINGS = dict(\n            one=1,\n            d={'one': 1, 'b': 'b', '': 'blank', '_': 'under'},\n            blank='',\n            dummy=Dummy(),\n            dummy2=DummyDocumentTemplate(),\n            eightbit=b'\\xe4\\xfc\\xf6',\n            # ZopeContext needs 'context' and 'template' keys for unicode\n            # conflict resolution\n            context=Dummy(),\n            template=DummyDocumentTemplate(),\n        )\n\n        if bindings is None:\n            bindings = _DEFAULT_BINDINGS\n        return self._makeEngine().getContext(bindings)\n\n    def test_compile(self):\n        # Test expression compilation\n        e = self._makeEngine()\n        for p in ('x', 'x/y', 'x/y/z'):\n            e.compile(p)\n        e.compile('path:a|b|c/d/e')\n        e.compile('string:Fred')\n        e.compile('string:A$B')\n        e.compile('string:a ${x/y} b ${y/z} c')\n        e.compile('python: 2 + 2')\n        e.compile('python: 2 \\n+\\n 2\\n')\n\n    def test_evaluate_simple_path_binding(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('one'), 1)\n\n    def test_evaluate_simple_path_dict_key_int_value(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('d/one'), 1)\n\n    def test_evaluate_simple_path_dict_key_string_value(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('d/b'), 'b')\n\n    def test_evaluate_with_render_simple_callable(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('dummy'), 'dummy')\n\n    def test_evaluate_with_unimplemented_call(self):\n        class Dummy:\n            def __call__(self):\n                raise NotImplementedError()\n\n        dummy = Dummy()\n        ec = self._makeContext(bindings={'dummy': dummy})\n        self.assertIs(ec.evaluate('dummy'), dummy)\n\n    def test_evaluate_with_render_DTML_template(self):\n        # http://www.zope.org/Collectors/Zope/2232\n        # DTML templates could not be called from a Page Template\n        # due to an ImportError\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('dummy2'), 'dummy')\n\n    def test_evaluate_alternative_first_missing(self):\n        ec = self._makeContext()\n        self.assertTrue(ec.evaluate('x | nothing') is None)\n\n    def test_evaluate_dict_key_as_underscore(self):\n        # Traversing to the name `_` will raise a DeprecationWarning\n        # because it will go away in Zope 6.\n        ec = self._makeContext()\n        with warnings.catch_warnings():\n            warnings.simplefilter('ignore')\n            self.assertEqual(ec.evaluate('d/_'), 'under')\n\n    def test_evaluate_dict_with_key_from_expansion(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('d/?blank'), 'blank')\n\n    def test_hybrid_with_python_expression_int_value(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | python:1+1'), 2)\n\n    def test_hybrid_with_python_expression_type_value_not_called(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | python:int'), int)\n\n    def test_hybrid_with_string_expression(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | string:x'), 'x')\n\n    def test_hybrid_with_string_expression_and_expansion(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('x | string:$one'), '1')\n\n    def test_hybrid_with_compound_expression_int_value(self):\n        ec = self._makeContext()\n        self.assertTrue(ec.evaluate('x | not:exists:x'))\n\n    def test_access_iterator_from_python_expression(self):\n        ec = self._makeContext()\n        ec.beginScope()\n        ec.setRepeat('loop', \"python:[1,2,3]\")\n        self.assertTrue(ec.evaluate(\"python:repeat['loop'].odd()\"))\n        ec.endScope()\n\n    def test_defer_expression_returns_wrapper(self):\n        from zope.tales.expressions import DeferWrapper\n        ec = self._makeContext()\n        defer = ec.evaluate('defer: b')\n        self.assertIsInstance(defer, DeferWrapper)\n\n    def test_lazy_expression_returns_wrapper(self):\n        from zope.tales.expressions import LazyWrapper\n        ec = self._makeContext()\n        lazy = ec.evaluate('lazy: b')\n        self.assertIsInstance(lazy, LazyWrapper)\n\n    def test_empty_path_expression_explicit(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('path:'), None)\n\n    def test_empty_path_expression_explicit_with_trailing_whitespace(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('path:  '), None)\n\n    def test_empty_path_expression_implicit(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate(''), None)\n\n    def test_empty_path_expression_implicit_with_trailing_whitespace(self):\n        ec = self._makeContext()\n        self.assertEqual(ec.evaluate('  \\n'), None)\n\n    def test_unicode(self):\n        # All our string expressions are unicode now\n        eng = self._makeEngine()\n        ec = self._makeContext()\n        # XXX: can't do ec.evaluate(u'string:x') directly because ZopeContext\n        # only bothers compiling true strings, not unicode strings\n        result = ec.evaluate(eng.compile('string:x'))\n        self.assertEqual(result, 'x')\n        self.assertIsInstance(result, str)\n\n    def test_mixed(self):\n        # 8-bit strings in unicode string expressions cause UnicodeDecodeErrors\n        eng = self._makeEngine()\n        ec = self._makeContext()\n        expr = eng.compile('string:$eightbit')\n        self.assertRaises(UnicodeDecodeError,\n                          ec.evaluate, expr)\n        # But registering an appropriate IUnicodeEncodingConflictResolver\n        # should fix it\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            StrictUnicodeEncodingConflictResolver\n        from zope.component import provideUtility\n        provideUtility(StrictUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        self.assertEqual(ec.evaluate(expr), '\u00e4\u00fc\u00f6')\n\n    def test_builtin_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate('True'), True)\n        self.assertIs(ec.evaluate('False'), False)\n        self.assertIs(ec.evaluate('nocall: test'), safe_builtins[\"test\"])\n\n\nclass UntrustedEngineTests(EngineTestsBase, unittest.TestCase):\n\n    def _makeEngine(self):\n        from Products.PageTemplates.Expressions import createZopeEngine\n        return createZopeEngine()\n\n    # XXX:  add tests that show security checks being enforced\n\n    def test_open_in_path_expr(self):\n        ec = self._makeContext()\n        with self.assertRaises(KeyError):\n            ec.evaluate(\"nocall:open\")\n\n    def test_list_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate('nocall: list'), safe_builtins[\"list\"])\n\n    def test_underscore_traversal(self):\n        # Prevent traversal to names starting with an underscore (_)\n        ec = self._makeContext()\n\n        with self.assertRaises(NotFound):\n            ec.evaluate(\"context/__class__\")\n\n        with self.assertRaises(NotFound):\n            ec.evaluate(\"nocall: random/_itertools/repeat\")\n\n        with self.assertRaises(NotFound):\n            ec.evaluate(\"random/_itertools/repeat/foobar\")\n\n\nclass TrustedEngineTests(EngineTestsBase, unittest.TestCase):\n\n    def _makeEngine(self):\n        from Products.PageTemplates.Expressions import createTrustedZopeEngine\n        return createTrustedZopeEngine()\n\n    # XXX:  add tests that show security checks *not* being enforced\n\n    def test_open_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate(\"nocall:open\"), open)\n\n    def test_list_in_path_expr(self):\n        ec = self._makeContext()\n        self.assertIs(ec.evaluate('nocall: list'), list)\n\n\nclass UnicodeEncodingConflictResolverTests(PlacelessSetup, unittest.TestCase):\n\n    def testDefaultResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            DefaultUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(DefaultUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        self.assertRaises(UnicodeDecodeError,\n                          resolver.resolve, None, b'\\xe4\\xfc\\xf6', None)\n\n    def testStrictResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            StrictUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(StrictUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        text = '\\xe4\\xfc\\xe4'\n        self.assertEqual(resolver.resolve(None, text, None), text)\n\n    def testIgnoringResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            IgnoringUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(IgnoringUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        self.assertEqual(resolver.resolve(None, b'\\xe4\\xfc\\xf6', None), '')\n\n    def testReplacingResolver(self):\n        from Products.PageTemplates.interfaces import \\\n            IUnicodeEncodingConflictResolver\n        from Products.PageTemplates.unicodeconflictresolver import \\\n            ReplacingUnicodeEncodingConflictResolver\n        from zope.component import getUtility\n        from zope.component import provideUtility\n        provideUtility(ReplacingUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n        resolver = getUtility(IUnicodeEncodingConflictResolver)\n        self.assertEqual(resolver.resolve(None, b'\\xe4\\xfc\\xf6', None),\n                         '\\ufffd\\ufffd\\ufffd')\n\n\nclass ZopeContextTests(unittest.TestCase):\n\n    def _getTargetClass(self):\n        from Products.PageTemplates.Expressions import ZopeContext\n        return ZopeContext\n\n    def _makeOne(self, engine=None, contexts=None):\n        if engine is None:\n            engine = self._makeEngine()\n        if contexts is None:\n            contexts = {}\n        return self._getTargetClass()(engine, contexts)\n\n    def _makeEngine(self):\n        class DummyEngine:\n            pass\n        return DummyEngine()\n\n    def test_class_conforms_to_ITALExpressionEngine(self):\n        from zope.interface.verify import verifyClass\n        from zope.tal.interfaces import ITALExpressionEngine\n        verifyClass(ITALExpressionEngine, self._getTargetClass())\n\n    def test_instance_conforms_to_ITALExpressionEngine(self):\n        from zope.interface.verify import verifyObject\n        from zope.tal.interfaces import ITALExpressionEngine\n        verifyObject(ITALExpressionEngine, self._makeOne())\n\n    def test_createErrorInfo_returns_unrestricted_object(self):\n        # See: https://bugs.launchpad.net/zope2/+bug/174705\n        context = self._makeOne()\n        info = context.createErrorInfo(AttributeError('nonesuch'), (12, 3))\n        self.assertTrue(info.type is AttributeError)\n        self.assertEqual(info.__allow_access_to_unprotected_subobjects__, 1)\n", "patch": "@@ -4,6 +4,7 @@\n from AccessControl import safe_builtins\n from zExceptions import NotFound\n from zope.component.testing import PlacelessSetup\n+from zope.location.interfaces import LocationError\n \n \n class EngineTestsBase(PlacelessSetup):\n@@ -233,10 +234,10 @@ def test_underscore_traversal(self):\n         with self.assertRaises(NotFound):\n             ec.evaluate(\"context/__class__\")\n \n-        with self.assertRaises(NotFound):\n+        with self.assertRaises((NotFound, LocationError)):\n             ec.evaluate(\"nocall: random/_itertools/repeat\")\n \n-        with self.assertRaises(NotFound):\n+        with self.assertRaises((NotFound, LocationError)):\n             ec.evaluate(\"random/_itertools/repeat/foobar\")\n \n ", "file_path": "files/2021_6/288", "file_language": "py", "file_name": "src/Products/PageTemplates/tests/testExpressions.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/zopefoundation/Zope/raw/1d897910139e2c0b11984fc9b78c1da1365bec21/src%2FProducts%2FPageTemplates%2Ftests%2FtestHTMLTests.py", "code": "##############################################################################\n#\n# Copyright (c) 2002 Zope Foundation and Contributors.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE\n#\n##############################################################################\n\nimport unittest\n\nfrom chameleon.exc import ExpressionError\n\nimport zope.component.testing\nfrom AccessControl import SecurityManager\nfrom AccessControl.SecurityManagement import noSecurityManager\nfrom Acquisition import Implicit\nfrom Products.PageTemplates.interfaces import IUnicodeEncodingConflictResolver\nfrom Products.PageTemplates.PageTemplate import PageTemplate\nfrom Products.PageTemplates.tests import util\nfrom Products.PageTemplates.unicodeconflictresolver import \\\n    DefaultUnicodeEncodingConflictResolver\nfrom Products.PageTemplates.unicodeconflictresolver import \\\n    PreferredCharsetResolver\nfrom Products.PageTemplates.ZopePageTemplate import ZopePageTemplate\nfrom zExceptions import NotFound\nfrom zope.component import provideUtility\nfrom zope.location.interfaces import LocationError\nfrom zope.traversing.adapters import DefaultTraversable\n\nfrom .util import useChameleonEngine\n\n\nclass AqPageTemplate(Implicit, PageTemplate):\n    pass\n\n\nclass AqZopePageTemplate(Implicit, ZopePageTemplate):\n    pass\n\n\nclass Folder(util.Base):\n    pass\n\n\nclass UnitTestSecurityPolicy:\n    \"\"\"\n        Stub out the existing security policy for unit testing purposes.\n    \"\"\"\n    # Standard SecurityPolicy interface\n    def validate(self,\n                 accessed=None,\n                 container=None,\n                 name=None,\n                 value=None,\n                 context=None,\n                 roles=None,\n                 *args, **kw):\n        return 1\n\n    def checkPermission(self, permission, object, context):\n        return 1\n\n\nclass HTMLTests(zope.component.testing.PlacelessSetup, unittest.TestCase):\n    PREFIX = None\n\n    def setUp(self):\n        super().setUp()\n        useChameleonEngine()\n        zope.component.provideAdapter(DefaultTraversable, (None,))\n\n        provideUtility(DefaultUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n\n        self.folder = f = Folder()\n        f.laf = AqPageTemplate()\n        f.t = AqPageTemplate()\n        f.z = AqZopePageTemplate('testing')\n        self.policy = UnitTestSecurityPolicy()\n        self.oldPolicy = SecurityManager.setSecurityPolicy(self.policy)\n        noSecurityManager()  # Use the new policy.\n\n    def tearDown(self):\n        super().tearDown()\n        SecurityManager.setSecurityPolicy(self.oldPolicy)\n        noSecurityManager()  # Reset to old policy.\n\n    def assert_expected(self, t, fname, *args, **kwargs):\n        t.write(util.read_input(fname))\n        assert not t._v_errors, 'Template errors: %s' % t._v_errors\n        if self.PREFIX is not None \\\n                and util.exists_output(self.PREFIX + fname):\n            fname = self.PREFIX + fname\n        expect = util.read_output(fname)\n        out = t(*args, **kwargs)\n        util.check_html(expect, out)\n\n    def assert_expected_unicode(self, t, fname, *args, **kwargs):\n        t.write(util.read_input(fname))\n        assert not t._v_errors, 'Template errors: %s' % t._v_errors\n        expect = util.read_output(fname)\n        if not isinstance(expect, str):\n            expect = str(expect, 'utf-8')\n        out = t(*args, **kwargs)\n        util.check_html(expect, out)\n\n    def getProducts(self):\n        return [\n            {'description': 'This is the tee for those who LOVE Zope. '\n             'Show your heart on your tee.',\n             'price': 12.99, 'image': 'smlatee.jpg'\n             },\n            {'description': 'This is the tee for Jim Fulton. '\n             'He\\'s the Zope Pope!',\n             'price': 11.99, 'image': 'smpztee.jpg'\n             },\n        ]\n\n    def test_1(self):\n        self.assert_expected(self.folder.laf, 'TeeShopLAF.html')\n\n    def test_2(self):\n        self.folder.laf.write(util.read_input('TeeShopLAF.html'))\n\n        self.assert_expected(self.folder.t, 'TeeShop2.html',\n                             getProducts=self.getProducts)\n\n    def test_3(self):\n        self.folder.laf.write(util.read_input('TeeShopLAF.html'))\n\n        self.assert_expected(self.folder.t, 'TeeShop1.html',\n                             getProducts=self.getProducts)\n\n    def testSimpleLoop(self):\n        self.assert_expected(self.folder.t, 'Loop1.html')\n\n    def testFancyLoop(self):\n        self.assert_expected(self.folder.t, 'Loop2.html')\n\n    def testGlobalsShadowLocals(self):\n        self.assert_expected(self.folder.t, 'GlobalsShadowLocals.html')\n\n    def testStringExpressions(self):\n        self.assert_expected(self.folder.t, 'StringExpression.html')\n\n    def testReplaceWithNothing(self):\n        self.assert_expected(self.folder.t, 'CheckNothing.html')\n\n    def testWithXMLHeader(self):\n        self.assert_expected(self.folder.t, 'CheckWithXMLHeader.html')\n\n    def testNotExpression(self):\n        self.assert_expected(self.folder.t, 'CheckNotExpression.html')\n\n    def testPathNothing(self):\n        self.assert_expected(self.folder.t, 'CheckPathNothing.html')\n\n    def testPathAlt(self):\n        self.assert_expected(self.folder.t, 'CheckPathAlt.html')\n\n    def testPathTraverse(self):\n        # need to perform this test with a \"real\" folder\n        from OFS.Folder import Folder\n        f = self.folder\n        self.folder = Folder()\n        self.folder.t, self.folder.laf = f.t, f.laf\n        self.folder.laf.write('ok')\n        self.assert_expected(self.folder.t, 'CheckPathTraverse.html')\n\n    def testBatchIteration(self):\n        self.assert_expected(self.folder.t, 'CheckBatchIteration.html')\n\n    def testUnicodeInserts(self):\n        self.assert_expected_unicode(self.folder.t, 'CheckUnicodeInserts.html')\n\n    def testI18nTranslate(self):\n        self.assert_expected(self.folder.t, 'CheckI18nTranslate.html')\n\n    def testImportOldStyleClass(self):\n        self.assert_expected(self.folder.t, 'CheckImportOldStyleClass.html')\n\n    def testRepeatVariable(self):\n        self.assert_expected(self.folder.t, 'RepeatVariable.html')\n\n    def testBooleanAttributes(self):\n        # Test rendering an attribute that should be empty or left out\n        # if the value is non-True\n        self.assert_expected(self.folder.t, 'BooleanAttributes.html')\n\n    def testBooleanAttributesAndDefault(self):\n        # Zope 2.9 and below support the semantics that an HTML\n        # \"boolean\" attribute (e.g. 'selected', 'disabled', etc.) can\n        # be used together with 'default'.\n        self.assert_expected(self.folder.t, 'BooleanAttributesAndDefault.html')\n\n    def testInterpolationInContent(self):\n        # the chameleon template engine supports ``${path}``\n        # interpolations not only as part of ``string`` expressions\n        # but globally\n        self.assert_expected(self.folder.t, 'InterpolationInContent.html')\n\n    def testBadExpression(self):\n        t = self.folder.t\n        t.write(\"<p tal:define='p a//b' />\")\n        with self.assertRaises(ExpressionError):\n            t()\n\n    def testPathAlternativesWithSpaces(self):\n        self.assert_expected(self.folder.t, 'PathAlternativesWithSpaces.html')\n\n    def testDefaultKeywordHandling(self):\n        self.assert_expected(self.folder.t, 'Default.html')\n\n    def testSwitch(self):\n        self.assert_expected(self.folder.t, 'switch.html')\n\n    def test_unicode_conflict_resolution(self):\n        # override with the more \"demanding\" resolver\n        provideUtility(PreferredCharsetResolver)\n        t = PageTemplate()\n        self.assert_expected(t, 'UnicodeResolution.html')\n\n    def test_underscore_traversal(self):\n        t = self.folder.t\n\n        t.write('<p tal:define=\"p context/__class__\" />')\n        with self.assertRaises(NotFound):\n            t()\n\n        t.write('<p tal:define=\"p nocall: random/_itertools/repeat\"/>')\n        with self.assertRaises((NotFound, LocationError)):\n            t()\n\n        t.write('<p tal:content=\"random/_itertools/repeat/foobar\"/>')\n        with self.assertRaises((NotFound, LocationError)):\n            t()\n\n    def test_module_traversal(self):\n        t = self.folder.z\n\n        # Need to reset to the standard security policy so AccessControl\n        # checks are actually performed. The test setup initializes\n        # a policy that circumvents those checks.\n        SecurityManager.setSecurityPolicy(self.oldPolicy)\n        noSecurityManager()\n\n        # The getSecurityManager function is explicitly allowed\n        content = ('<p tal:define=\"a nocall:%s\"'\n                   '   tal:content=\"python: a().getUser().getUserName()\"/>')\n        t.write(content % 'modules/AccessControl/getSecurityManager')\n        self.assertEqual(t(), '<p>Anonymous User</p>')\n\n        # Anything else should be unreachable and raise NotFound:\n        # Direct access through AccessControl\n        t.write('<p tal:define=\"a nocall:modules/AccessControl/users\"/>')\n        with self.assertRaises(NotFound):\n            t()\n\n        # Indirect access through an intermediary variable\n        content = ('<p tal:define=\"mod nocall:modules/AccessControl;'\n                   '               must_fail nocall:mod/users\"/>')\n        t.write(content)\n        with self.assertRaises(NotFound):\n            t()\n\n        # Indirect access through an intermediary variable and a dictionary\n        content = ('<p tal:define=\"mod nocall:modules/AccessControl;'\n                   '               a_dict python: {\\'unsafe\\': mod};'\n                   '               must_fail nocall: a_dict/unsafe/users\"/>')\n        t.write(content)\n        with self.assertRaises(NotFound):\n            t()\n", "code_before": "##############################################################################\n#\n# Copyright (c) 2002 Zope Foundation and Contributors.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE\n#\n##############################################################################\n\nimport unittest\n\nfrom chameleon.exc import ExpressionError\n\nimport zope.component.testing\nfrom AccessControl import SecurityManager\nfrom AccessControl.SecurityManagement import noSecurityManager\nfrom Acquisition import Implicit\nfrom Products.PageTemplates.interfaces import IUnicodeEncodingConflictResolver\nfrom Products.PageTemplates.PageTemplate import PageTemplate\nfrom Products.PageTemplates.tests import util\nfrom Products.PageTemplates.unicodeconflictresolver import \\\n    DefaultUnicodeEncodingConflictResolver\nfrom Products.PageTemplates.unicodeconflictresolver import \\\n    PreferredCharsetResolver\nfrom zExceptions import NotFound\nfrom zope.component import provideUtility\nfrom zope.traversing.adapters import DefaultTraversable\n\nfrom .util import useChameleonEngine\n\n\nclass AqPageTemplate(Implicit, PageTemplate):\n    pass\n\n\nclass Folder(util.Base):\n    pass\n\n\nclass UnitTestSecurityPolicy:\n    \"\"\"\n        Stub out the existing security policy for unit testing purposes.\n    \"\"\"\n    # Standard SecurityPolicy interface\n    def validate(self,\n                 accessed=None,\n                 container=None,\n                 name=None,\n                 value=None,\n                 context=None,\n                 roles=None,\n                 *args, **kw):\n        return 1\n\n    def checkPermission(self, permission, object, context):\n        return 1\n\n\nclass HTMLTests(zope.component.testing.PlacelessSetup, unittest.TestCase):\n    PREFIX = None\n\n    def setUp(self):\n        super().setUp()\n        useChameleonEngine()\n        zope.component.provideAdapter(DefaultTraversable, (None,))\n\n        provideUtility(DefaultUnicodeEncodingConflictResolver,\n                       IUnicodeEncodingConflictResolver)\n\n        self.folder = f = Folder()\n        f.laf = AqPageTemplate()\n        f.t = AqPageTemplate()\n        self.policy = UnitTestSecurityPolicy()\n        self.oldPolicy = SecurityManager.setSecurityPolicy(self.policy)\n        noSecurityManager()  # Use the new policy.\n\n    def tearDown(self):\n        super().tearDown()\n        SecurityManager.setSecurityPolicy(self.oldPolicy)\n        noSecurityManager()  # Reset to old policy.\n\n    def assert_expected(self, t, fname, *args, **kwargs):\n        t.write(util.read_input(fname))\n        assert not t._v_errors, 'Template errors: %s' % t._v_errors\n        if self.PREFIX is not None \\\n                and util.exists_output(self.PREFIX + fname):\n            fname = self.PREFIX + fname\n        expect = util.read_output(fname)\n        out = t(*args, **kwargs)\n        util.check_html(expect, out)\n\n    def assert_expected_unicode(self, t, fname, *args, **kwargs):\n        t.write(util.read_input(fname))\n        assert not t._v_errors, 'Template errors: %s' % t._v_errors\n        expect = util.read_output(fname)\n        if not isinstance(expect, str):\n            expect = str(expect, 'utf-8')\n        out = t(*args, **kwargs)\n        util.check_html(expect, out)\n\n    def getProducts(self):\n        return [\n            {'description': 'This is the tee for those who LOVE Zope. '\n             'Show your heart on your tee.',\n             'price': 12.99, 'image': 'smlatee.jpg'\n             },\n            {'description': 'This is the tee for Jim Fulton. '\n             'He\\'s the Zope Pope!',\n             'price': 11.99, 'image': 'smpztee.jpg'\n             },\n        ]\n\n    def test_1(self):\n        self.assert_expected(self.folder.laf, 'TeeShopLAF.html')\n\n    def test_2(self):\n        self.folder.laf.write(util.read_input('TeeShopLAF.html'))\n\n        self.assert_expected(self.folder.t, 'TeeShop2.html',\n                             getProducts=self.getProducts)\n\n    def test_3(self):\n        self.folder.laf.write(util.read_input('TeeShopLAF.html'))\n\n        self.assert_expected(self.folder.t, 'TeeShop1.html',\n                             getProducts=self.getProducts)\n\n    def testSimpleLoop(self):\n        self.assert_expected(self.folder.t, 'Loop1.html')\n\n    def testFancyLoop(self):\n        self.assert_expected(self.folder.t, 'Loop2.html')\n\n    def testGlobalsShadowLocals(self):\n        self.assert_expected(self.folder.t, 'GlobalsShadowLocals.html')\n\n    def testStringExpressions(self):\n        self.assert_expected(self.folder.t, 'StringExpression.html')\n\n    def testReplaceWithNothing(self):\n        self.assert_expected(self.folder.t, 'CheckNothing.html')\n\n    def testWithXMLHeader(self):\n        self.assert_expected(self.folder.t, 'CheckWithXMLHeader.html')\n\n    def testNotExpression(self):\n        self.assert_expected(self.folder.t, 'CheckNotExpression.html')\n\n    def testPathNothing(self):\n        self.assert_expected(self.folder.t, 'CheckPathNothing.html')\n\n    def testPathAlt(self):\n        self.assert_expected(self.folder.t, 'CheckPathAlt.html')\n\n    def testPathTraverse(self):\n        # need to perform this test with a \"real\" folder\n        from OFS.Folder import Folder\n        f = self.folder\n        self.folder = Folder()\n        self.folder.t, self.folder.laf = f.t, f.laf\n        self.folder.laf.write('ok')\n        self.assert_expected(self.folder.t, 'CheckPathTraverse.html')\n\n    def testBatchIteration(self):\n        self.assert_expected(self.folder.t, 'CheckBatchIteration.html')\n\n    def testUnicodeInserts(self):\n        self.assert_expected_unicode(self.folder.t, 'CheckUnicodeInserts.html')\n\n    def testI18nTranslate(self):\n        self.assert_expected(self.folder.t, 'CheckI18nTranslate.html')\n\n    def testImportOldStyleClass(self):\n        self.assert_expected(self.folder.t, 'CheckImportOldStyleClass.html')\n\n    def testRepeatVariable(self):\n        self.assert_expected(self.folder.t, 'RepeatVariable.html')\n\n    def testBooleanAttributes(self):\n        # Test rendering an attribute that should be empty or left out\n        # if the value is non-True\n        self.assert_expected(self.folder.t, 'BooleanAttributes.html')\n\n    def testBooleanAttributesAndDefault(self):\n        # Zope 2.9 and below support the semantics that an HTML\n        # \"boolean\" attribute (e.g. 'selected', 'disabled', etc.) can\n        # be used together with 'default'.\n        self.assert_expected(self.folder.t, 'BooleanAttributesAndDefault.html')\n\n    def testInterpolationInContent(self):\n        # the chameleon template engine supports ``${path}``\n        # interpolations not only as part of ``string`` expressions\n        # but globally\n        self.assert_expected(self.folder.t, 'InterpolationInContent.html')\n\n    def testBadExpression(self):\n        t = self.folder.t\n        t.write(\"<p tal:define='p a//b' />\")\n        with self.assertRaises(ExpressionError):\n            t()\n\n    def testPathAlternativesWithSpaces(self):\n        self.assert_expected(self.folder.t, 'PathAlternativesWithSpaces.html')\n\n    def testDefaultKeywordHandling(self):\n        self.assert_expected(self.folder.t, 'Default.html')\n\n    def testSwitch(self):\n        self.assert_expected(self.folder.t, 'switch.html')\n\n    def test_unicode_conflict_resolution(self):\n        # override with the more \"demanding\" resolver\n        provideUtility(PreferredCharsetResolver)\n        t = PageTemplate()\n        self.assert_expected(t, 'UnicodeResolution.html')\n\n    def test_underscore_traversal(self):\n        t = self.folder.t\n\n        t.write('<p tal:define=\"p context/__class__\" />')\n        with self.assertRaises(NotFound):\n            t()\n\n        t.write('<p tal:define=\"p nocall: random/_itertools/repeat\"/>')\n        with self.assertRaises(NotFound):\n            t()\n\n        t.write('<p tal:content=\"random/_itertools/repeat/foobar\"/>')\n        with self.assertRaises(NotFound):\n            t()\n", "patch": "@@ -26,8 +26,10 @@\n     DefaultUnicodeEncodingConflictResolver\n from Products.PageTemplates.unicodeconflictresolver import \\\n     PreferredCharsetResolver\n+from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate\n from zExceptions import NotFound\n from zope.component import provideUtility\n+from zope.location.interfaces import LocationError\n from zope.traversing.adapters import DefaultTraversable\n \n from .util import useChameleonEngine\n@@ -37,6 +39,10 @@ class AqPageTemplate(Implicit, PageTemplate):\n     pass\n \n \n+class AqZopePageTemplate(Implicit, ZopePageTemplate):\n+    pass\n+\n+\n class Folder(util.Base):\n     pass\n \n@@ -74,6 +80,7 @@ def setUp(self):\n         self.folder = f = Folder()\n         f.laf = AqPageTemplate()\n         f.t = AqPageTemplate()\n+        f.z = AqZopePageTemplate('testing')\n         self.policy = UnitTestSecurityPolicy()\n         self.oldPolicy = SecurityManager.setSecurityPolicy(self.policy)\n         noSecurityManager()  # Use the new policy.\n@@ -226,9 +233,45 @@ def test_underscore_traversal(self):\n             t()\n \n         t.write('<p tal:define=\"p nocall: random/_itertools/repeat\"/>')\n-        with self.assertRaises(NotFound):\n+        with self.assertRaises((NotFound, LocationError)):\n             t()\n \n         t.write('<p tal:content=\"random/_itertools/repeat/foobar\"/>')\n+        with self.assertRaises((NotFound, LocationError)):\n+            t()\n+\n+    def test_module_traversal(self):\n+        t = self.folder.z\n+\n+        # Need to reset to the standard security policy so AccessControl\n+        # checks are actually performed. The test setup initializes\n+        # a policy that circumvents those checks.\n+        SecurityManager.setSecurityPolicy(self.oldPolicy)\n+        noSecurityManager()\n+\n+        # The getSecurityManager function is explicitly allowed\n+        content = ('<p tal:define=\"a nocall:%s\"'\n+                   '   tal:content=\"python: a().getUser().getUserName()\"/>')\n+        t.write(content % 'modules/AccessControl/getSecurityManager')\n+        self.assertEqual(t(), '<p>Anonymous User</p>')\n+\n+        # Anything else should be unreachable and raise NotFound:\n+        # Direct access through AccessControl\n+        t.write('<p tal:define=\"a nocall:modules/AccessControl/users\"/>')\n+        with self.assertRaises(NotFound):\n+            t()\n+\n+        # Indirect access through an intermediary variable\n+        content = ('<p tal:define=\"mod nocall:modules/AccessControl;'\n+                   '               must_fail nocall:mod/users\"/>')\n+        t.write(content)\n+        with self.assertRaises(NotFound):\n+            t()\n+\n+        # Indirect access through an intermediary variable and a dictionary\n+        content = ('<p tal:define=\"mod nocall:modules/AccessControl;'\n+                   '               a_dict python: {\\'unsafe\\': mod};'\n+                   '               must_fail nocall: a_dict/unsafe/users\"/>')\n+        t.write(content)\n         with self.assertRaises(NotFound):\n             t()", "file_path": "files/2021_6/289", "file_language": "py", "file_name": "src/Products/PageTemplates/tests/testHTMLTests.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
