{"index": 6138, "cve_id": "CVE-2021-34363", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "The thefuck (aka The Fuck) package before 3.31 for Python allows Path Traversal that leads to arbitrary file deletion via the \"undo archive operation\" feature.", "cvss": "9.1", "publish_date": "June 10, 2021", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "NONE", "I": "HIGH", "A": "HIGH", "commit_id": "e343c577cd7da4d304b837d4a07ab4df1e023092", "commit_message": "NA: Fix possible changes in files outside of working directory (#1206)", "commit_date": "2021-06-08T20:04:51Z", "project": "nvbn/thefuck", "url": "https://api.github.com/repos/nvbn/thefuck/commits/e343c577cd7da4d304b837d4a07ab4df1e023092", "html_url": "https://github.com/nvbn/thefuck/commit/e343c577cd7da4d304b837d4a07ab4df1e023092", "windows_before": [{"commit_id": "70a42b54ab2153db4f6f5143122bc9ef9db4f818", "commit_date": "Tue Apr 6 14:50:43 2021 +0100", "commit_message": "#1184: Add new rule for main / master Git branches", "files_name": ["README.md", "tests/rules/test_git_main_master.py", "thefuck/rules/git_main_master.py"]}, {"commit_id": "55922e4dbeedaca384e83406f2fa87c5a8e152fb", "commit_date": "Tue Sep 8 11:47:05 2020 +0200", "commit_message": "#1131: Add rule for Git commit with no added files", "files_name": ["README.md", "tests/rules/test_git_commit_add.py", "thefuck/rules/git_commit_add.py"]}, {"commit_id": "6da0bc557f0fd94ea1397d3a7f508be896cc98d8", "commit_date": "Wed Apr 21 18:43:21 2021 +0100", "commit_message": "Add excluded_search_path_prefixes setting (#1165)", "files_name": ["README.md", "tests/test_conf.py", "tests/test_utils.py", "thefuck/conf.py", "thefuck/const.py", "thefuck/utils.py"]}, {"commit_id": "1a595f1ba23843823037479d0caede926b0bd752", "commit_date": "Sat Apr 17 14:51:18 2021 +0200", "commit_message": "#N/A: Force decorator<5 for Python <= 2.7", "files_name": ["setup.py"]}, {"commit_id": "875d3f11cbde13dfecdd9f7036d265be7fab6e81", "commit_date": "Fri Apr 16 15:24:30 2021 -0700", "commit_message": "#N/A: Update license year to 2020-2021 (#1088)", "files_name": ["LICENSE.md"]}, {"commit_id": "4c7479b3adcf8715a93d0c48e1ece83a35cda50d", "commit_date": "Tue Mar 23 06:55:45 2021 +1100", "commit_message": "#N/A: Add `cd_cs` rule (#1167)", "files_name": ["README.md", "tests/rules/test_cd_cs.py", "thefuck/rules/cd_cs.py"]}, {"commit_id": "5b612add745c52b25cbbf987bd58d7382a3eedfb", "commit_date": "Sat Mar 13 18:54:53 2021 +0530", "commit_message": "#1154: Fix badges in README (#1175)", "files_name": ["README.md"]}, {"commit_id": "b9dd54c76803d7038e77bb0e3027166706e5e5ea", "commit_date": "Sat Mar 13 12:47:55 2021 +0100", "commit_message": "#1174: Fix anchor references", "files_name": ["README.md"]}, {"commit_id": "7af9f41d93dfeda7a73d0116ffeddcf2dcda7e8a", "commit_date": "Sat Mar 13 05:28:10 2021 +0530", "commit_message": "#N/A: Add a Contents section to README (#1174)", "files_name": ["README.md"]}, {"commit_id": "c2cc95db886be879f9710095e4e70c64532573fd", "commit_date": "Mon Feb 22 22:54:45 2021 +0100", "commit_message": "#1117: Mock Popen in go_unknown_command test", "files_name": ["tests/rules/test_go_unknown_command.py"]}, {"commit_id": "0e34c2343ed8b84e07b0320188397b1485985e6a", "commit_date": "Thu Feb 11 13:48:20 2021 +0200", "commit_message": "#/N/A: Extend pyenv rule to include goenv, nodenv and rbenv (#1100)", "files_name": ["README.md", "tests/rules/test_omnienv_no_such_command.py", "thefuck/rules/omnienv_no_such_command.py"]}, {"commit_id": "fd90e69ceb63edb19e12eda7ba880288eb95d4eb", "commit_date": "Mon Feb 8 06:04:59 2021 -0600", "commit_message": "#N/A: Add conda rule (#1138)", "files_name": ["README.md", "tests/rules/test_conda_mistype.py", "thefuck/rules/conda_mistype.py"]}, {"commit_id": "0c5831793246a23e6b259a139773cff429ab5ba8", "commit_date": "Thu Jan 21 19:04:01 2021 +0530", "commit_message": "#N/A: Migrate CI pipeline to Github Actions (#1154)", "files_name": [".github/workflows/test.yml", ".travis.yml", "README.md", "appveyor.yml"]}, {"commit_id": "62dddd5821312aca4a6001c7b84be0bee137fc48", "commit_date": "Wed Jan 20 03:07:05 2021 +0530", "commit_message": "#1149: Add python_module_error rule (#1151)", "files_name": ["README.md", "tests/rules/test_python_module_error.py", "thefuck/rules/python_module_error.py"]}, {"commit_id": "40dd65963d7819a3c566416827dd1c8dae5baf0e", "commit_date": "Wed Nov 18 15:13:11 2020 +0530", "commit_message": "#1141: Fix crash on empty history (#1145)", "files_name": ["tests/test_types.py", "thefuck/entrypoints/fix_command.py"]}, {"commit_id": "836f6eeac50a25346df26a799b8f6b76b5ab2316", "commit_date": "Tue Nov 3 23:00:03 2020 +0530", "commit_message": "Skip test instead of failing if go executable is not found. (#1117)", "files_name": ["tests/rules/test_go_unknown_command.py"]}, {"commit_id": "b4c75eebe6078040d511437424b9a8616a3a027f", "commit_date": "Tue Nov 3 22:59:28 2020 +0530", "commit_message": "Fix pytest warnings (#1116)", "files_name": ["tests/conftest.py", "tests/test_conf.py"]}, {"commit_id": "22efa8f70e4665e6e92392636ff7dd5ff2d369f8", "commit_date": "Tue Nov 3 18:27:09 2020 +0100", "commit_message": "#1113: Do not load excluded rules (#1125)", "files_name": ["tests/test_types.py", "thefuck/types.py"]}, {"commit_id": "9d3bcad229a29f3890514e5b33d474654ecd8e84", "commit_date": "Tue Nov 3 18:26:13 2020 +0100", "commit_message": "#1113: Ignore a rule that fails to load (#1124)", "files_name": ["tests/test_corrector.py", "tests/test_types.py", "thefuck/corrector.py", "thefuck/types.py"]}, {"commit_id": "c196e2901c449d96bf5116e6988610c38ca8b725", "commit_date": "Fri Jul 17 03:26:58 2020 +0530", "commit_message": "#509: Fixed correction on windows machine running other shells (#1091)", "files_name": ["tests/test_types.py", "thefuck/types.py"]}, {"commit_id": "ca46956e20b4bfd7424042a0f06cf206c26177fe", "commit_date": "Fri Jul 17 03:04:41 2020 +0530", "commit_message": "#1066 - Fix rule for brew cask (#1111)", "files_name": ["thefuck/rules/brew_unknown_command.py"]}, {"commit_id": "639e9bda7a5a69e75c3de3e0b840c1940017968d", "commit_date": "Thu Jul 16 21:34:22 2020 +0000", "commit_message": "Add rule to remove a doubled-up \"git clone\" in a git clone command. (#1106)", "files_name": ["README.md", "tests/rules/test_git_clone_git_clone.py", "thefuck/rules/git_clone_git_clone.py"]}, {"commit_id": "39753a004e2b01543bef418e677156ef11872b8f", "commit_date": "Fri Jul 17 03:02:29 2020 +0530", "commit_message": "#1096: Rule: Bypass failed git hook (#1097)", "files_name": ["README.md", "tests/rules/test_git_hook_bypass.py", "thefuck/rules/git_hook_bypass.py"]}, {"commit_id": "365db1ee41d7bcd9f62d910f3b20361ea3499d92", "commit_date": "Sun Jun 14 19:50:40 2020 +0530", "commit_message": "#N/A: Refactor for better readability (#1094)", "files_name": ["tests/rules/test_fix_file.py"]}, {"commit_id": "81b39defe48239f8c0585ea6d5c22a9c41612f15", "commit_date": "Wed Jun 10 22:21:45 2020 +0000", "commit_message": "#N/A: Fix formatting (#1092)", "files_name": ["tests/rules/test_fix_file.py", "thefuck/corrector.py", "thefuck/types.py"]}, {"commit_id": "f82176802e34ba5d5aa3ea0a4b81fe2af2c578e4", "commit_date": "Wed Jun 10 17:20:37 2020 -0500", "commit_message": "add git-lfs support (#1056)", "files_name": ["README.md", "tests/rules/test_git_lfs_mistype.py", "thefuck/rules/git_lfs_mistype.py"]}, {"commit_id": "6975d30818792f1b37de702fc93c66023c4c50d5", "commit_date": "Mon Apr 6 21:46:40 2020 +0200", "commit_message": "#960: Improve pacman_invalid_option rule (#1072)", "files_name": ["tests/rules/test_pacman_invalid_option.py", "thefuck/rules/pacman_invalid_option.py"]}, {"commit_id": "3c542a5b8cde085126fd9197b1ca6967c7adab1e", "commit_date": "Sat Mar 28 18:15:20 2020 -0400", "commit_message": "Added pacman invalid option rule (#960)", "files_name": ["README.md", "tests/rules/test_pacman_invalid_option.py", "thefuck/rules/pacman_invalid_option.py"]}, {"commit_id": "d3a05426deb53b46b63ea3a996dce7b4e472fadb", "commit_date": "Thu Mar 19 18:21:12 2020 +0100", "commit_message": "Bump to 3.30", "files_name": ["setup.py"]}, {"commit_id": "88db57b4b131f87334e9de64be52ae2a814870fd", "commit_date": "Sun Mar 1 00:07:54 2020 -0600", "commit_message": "#N/A: Add a new rule to create directory on cp or mv", "files_name": ["README.md", "tests/rules/test_cp_create_destination.py", "thefuck/rules/cp_create_destination.py"]}, {"commit_id": "444908ce1c17767ef4aaf9e0b4950497914f7f63", "commit_date": "Sat Feb 29 19:19:38 2020 -0600", "commit_message": "#1047: Fix pip_unknown_command by using a less restrictive regex", "files_name": ["tests/rules/test_pip_unknown_command.py", "thefuck/rules/pip_unknown_command.py"]}, {"commit_id": "2ced7a7f33ae0bec3ffc7a43ce95330bdf6cfcb9", "commit_date": "Mon Jan 13 22:28:20 2020 +0000", "commit_message": "Allow multiple returns from git_checkout (#1022)", "files_name": ["tests/rules/test_git_checkout.py", "thefuck/rules/git_checkout.py"]}, {"commit_id": "b28ece0f34e54d1c980e31223451f3b2f0f20ff9", "commit_date": "Sun Jan 5 22:53:09 2020 +0000", "commit_message": "Apt-get help is now much more like apt (#1031)", "files_name": ["tests/rules/test_apt_invalid_operation.py", "thefuck/rules/apt_invalid_operation.py"]}, {"commit_id": "eb60900330d038383fe1460e0279d33d303739a7", "commit_date": "Sun Jan 5 23:51:19 2020 +0100", "commit_message": "#N/A: Unlink python 2 on travis-ci osx build (#1032)", "files_name": [".travis.yml"]}, {"commit_id": "ed8aaa7f26c61e20d0cecd1f6debff7f2a8fb43a", "commit_date": "Mon Dec 23 08:57:42 2019 -0800", "commit_message": "fixed grammar on how to configure message (#1029)", "files_name": ["thefuck/logs.py"]}, {"commit_id": "77992029b6832992a8b2137e1489edd9705aeaa1", "commit_date": "Tue Dec 17 08:10:45 2019 +1100", "commit_message": "Fix simple typo: controle -> control (#1017)", "files_name": ["thefuck/utils.py"]}, {"commit_id": "25c858c13ec3099986fa5c2d7eac4342bc3daa6f", "commit_date": "Mon Dec 16 15:56:12 2019 -0500", "commit_message": "removed useless redefined of path variable (#1023)", "files_name": ["thefuck/rules/touch.py"]}, {"commit_id": "60073bea7831397532f364b0b54451db25dd4f37", "commit_date": "Mon Dec 16 21:55:19 2019 +0100", "commit_message": "N/A: Remove deprecated python 3.4 support + fix tests in 2.7 (#1025)", "files_name": [".travis.yml", "appveyor.yml", "setup.py", "tests/test_utils.py", "tox.ini"]}, {"commit_id": "d10fc80fa5da5724ec945aec12720ef41be9551f", "commit_date": "Wed Nov 6 16:10:00 2019 -0800", "commit_message": "Add choco_install rule (#998)", "files_name": ["README.md", "tests/rules/test_choco_install.py", "thefuck/rules/choco_install.py"]}, {"commit_id": "fdea32b47d4b941fce7a9d538d00c1484e31feb5", "commit_date": "Sat Nov 2 18:07:32 2019 +0000", "commit_message": "Fix typos in README.md (#997)", "files_name": ["README.md"]}, {"commit_id": "9381cfefa5bf3d355fbd754197159e4052849f80", "commit_date": "Sun Nov 3 02:06:17 2019 +0800", "commit_message": "fix: incorrect powershell alias instruction (#1004)", "files_name": ["thefuck/shells/powershell.py"]}, {"commit_id": "793510ad485e7e7e1240516c37bc4da7ddb85efd", "commit_date": "Sat Nov 2 18:04:47 2019 +0000", "commit_message": "Add rule to remove leading shell prompt literal $ (#996)", "files_name": ["README.md", "tests/rules/test_remove_shell_prompt_literal.py", "thefuck/rules/remove_shell_prompt_literal.py"]}, {"commit_id": "d85099b8dadfaf58c053835109e0d92c748e38d7", "commit_date": "Sat Nov 2 19:03:58 2019 +0100", "commit_message": "#N/A: Inform the correct path to `DEFAULT_RULES` (#993)", "files_name": ["README.md"]}, {"commit_id": "ecee70f7745e2ccc83d438df2d28fdeabe008631", "commit_date": "Sat Nov 2 19:03:35 2019 +0100", "commit_message": "#N/A: Use Xenial on TravisCI (#989)", "files_name": [".travis.yml"]}, {"commit_id": "70b414aca2acbbac2cd3c75bc4c3e2dd489b3144", "commit_date": "Tue Oct 22 18:30:55 2019 -0400", "commit_message": "Issue#965 - added venv instructions to CONTRIBUTING.md (#976)", "files_name": ["CONTRIBUTING.md"]}, {"commit_id": "80cfd6991d088e0b62549157124c734b6917fd00", "commit_date": "Wed Oct 23 00:30:17 2019 +0200", "commit_message": "#N/A: Add new `git_branch_delete_checked_out` rule (#985)", "files_name": ["README.md", "tests/rules/test_git_branch_delete_checked_out.py", "thefuck/rules/git_branch_delete_checked_out.py"]}, {"commit_id": "0ccb34bde891ad70be092e0d671c67d0643f9338", "commit_date": "Sat Oct 19 22:05:22 2019 +0900", "commit_message": "Support for yum invalid commands. (#968)", "files_name": ["README.md", "tests/rules/test_yum_invalid_operation.py", "thefuck/rules/yum_invalid_operation.py", "thefuck/specific/yum.py"]}], "windows_after": [{"commit_id": "711feb4df56c44561f4e6c347c5efb0fe3ab1a37", "commit_date": "Fri Jul 9 16:13:25 2021 +0200", "commit_message": "#1184: Improve + fix `git_main_master` rule", "files_name": ["tests/rules/test_git_main_master.py", "thefuck/rules/git_main_master.py"]}, {"commit_id": "0668822abb6471c3f382ad19bb7f761ff79bea37", "commit_date": "Sat Jul 17 14:15:51 2021 +0200", "commit_message": "#1215: Remove redirection to stderr with the ^ character", "files_name": ["tests/shells/test_fish.py", "thefuck/shells/fish.py"]}, {"commit_id": "58f61d8090deff3727ac2a4f72927e85843ddb5c", "commit_date": "Mon Jul 19 21:47:19 2021 +0100", "commit_message": "#1184: Add devcontainer for easy Python development", "files_name": [".devcontainer/Dockerfile", ".devcontainer/devcontainer.json", "CONTRIBUTING.md"]}, {"commit_id": "58ddd4338adf12a3abc2ffed0e27794a398fa8d2", "commit_date": "Sun Jul 18 15:48:03 2021 +0200", "commit_message": "#1215: Initiate settings before printing the alias", "files_name": ["tests/entrypoints/test_alias.py", "thefuck/entrypoints/alias.py"]}, {"commit_id": "a2a6cbdc7098b099cee66b9625a061d8fc2f2299", "commit_date": "Mon Dec 28 04:04:08 2020 +0530", "commit_message": "#894: Combine commands with shell.and_ in docker_login rule", "files_name": ["thefuck/rules/docker_login.py"]}, {"commit_id": "eb05b28c5b9c1c43fb0de126faa6d3949af3bf9f", "commit_date": "Tue Jul 13 22:33:00 2021 +0200", "commit_message": "#N/A: Replace only exact words when expanding a Git alias", "files_name": ["tests/specific/test_git.py", "thefuck/specific/git.py"]}, {"commit_id": "c2df71caed917ea659a72a393b105881ec0709df", "commit_date": "Wed Jul 14 13:09:04 2021 +0200", "commit_message": "#994: Replace decoding errors with the replacement marker", "files_name": ["tests/output_readers/test_rerun.py", "thefuck/output_readers/rerun.py"]}, {"commit_id": "8e8c80c22757508cb54f5fb17c67a7fb925dd0e1", "commit_date": "Fri Jul 23 20:05:06 2021 +0200", "commit_message": "#1188: Remove only leading whitespace chars from script", "files_name": ["tests/test_types.py", "thefuck/utils.py"]}, {"commit_id": "30c90bccaa358d0817cfedd11f246ab21ef1f159", "commit_date": "Wed Jul 21 13:33:41 2021 +0200", "commit_message": "#1184: Configure devcontainer shell with recommended way", "files_name": [".devcontainer/devcontainer.json"]}, {"commit_id": "dbc435c0401c464b6bbb2059a77ec98a96d4fe06", "commit_date": "Wed Jul 28 22:46:34 2021 +0200", "commit_message": "#618: Fix git_push_without_commits rule", "files_name": ["tests/rules/test_git_push_without_commits.py", "thefuck/rules/git_push_without_commits.py"]}, {"commit_id": "8bebce331e75a1300cec31b3905be463a2ea0954", "commit_date": "Thu Jul 29 23:48:36 2021 +0200", "commit_message": "#933: Correctly redefine the function with a cache", "files_name": ["thefuck/rules/go_unknown_command.py"]}, {"commit_id": "7f3442747ee4318d893891db4527846bb656998c", "commit_date": "Thu Jul 29 23:54:51 2021 +0200", "commit_message": "#579: Ignore commands of len 1 in missing_space_before_subcommand", "files_name": ["tests/rules/test_missing_space_before_subcommand.py", "thefuck/rules/missing_space_before_subcommand.py"]}, {"commit_id": "8fa10b1049ddf21f188b9605bcd5afbe33bf33db", "commit_date": "Sat Aug 7 13:12:12 2021 +0200", "commit_message": "#868: Fix outdated link to homebrew for Linux (#1226)", "files_name": ["README.md"]}, {"commit_id": "2a166a7dec3c872ef6be3870b50889500ca6a212", "commit_date": "Sun Aug 8 00:26:36 2021 +0300", "commit_message": "#977: Add `wrong_hyphen_before_subcommand` rule", "files_name": ["README.md", "tests/rules/test_wrong_hyphen_before_subcommand.py", "thefuck/rules/wrong_hyphen_before_subcommand.py"]}, {"commit_id": "7b7c150bb7e86bf71523ec735f4e0cd7b68ddf5c", "commit_date": "Sun Aug 1 20:31:10 2021 +0200", "commit_message": "#697: Encode expanded script on Python 2", "files_name": ["tests/output_readers/test_rerun.py", "thefuck/output_readers/read_log.py", "thefuck/output_readers/rerun.py"]}, {"commit_id": "51e4e8728098903a87fb6d1cd2083460d439f357", "commit_date": "Mon Aug 16 22:44:13 2021 +0200", "commit_message": "#1227: Make `git_support` support output-independent rules", "files_name": ["tests/specific/test_git.py", "thefuck/specific/git.py"]}, {"commit_id": "c719712b6256f4add4e65e8d4369b36d73342b48", "commit_date": "Sun Sep 5 16:40:10 2021 +0300", "commit_message": "Use `--user` with pip, not `sudo pip`", "files_name": ["README.md"]}, {"commit_id": "0f4a523dc4cab990641131a7aac90b67bf7fb5fc", "commit_date": "Fri Oct 22 00:04:33 2021 +0200", "commit_message": "Encapsulate force_command in _get_raw_command", "files_name": ["tests/entrypoints/test_fix_command.py", "thefuck/entrypoints/fix_command.py"]}, {"commit_id": "841e3f9e13f52747c18319b55c77ece8095df306", "commit_date": "Sun Jan 2 22:45:09 2022 +0100", "commit_message": "Bump to 3.32", "files_name": ["setup.py"]}, {"commit_id": "925e562d968f45c588dd9fb4c26a2fa6fd931097", "commit_date": "Tue Jan 18 12:13:45 2022 +0530", "commit_message": "Updated license date to 2022", "files_name": ["LICENSE.md"]}, {"commit_id": "cf1beb6b89cfcefb594f40a0d698da2b1ee94955", "commit_date": "Sat Jan 29 01:36:34 2022 +0100", "commit_message": "fix: Add missing comma", "files_name": ["tests/rules/test_remove_shell_prompt_literal.py"]}, {"commit_id": "d8ddf5a2be9d52ec4bc8c11e79fcc7b3c390b669", "commit_date": "Sun Mar 27 22:06:40 2022 +0200", "commit_message": "#1279: Add pikaur AUR manager to Arch Linux's commands", "files_name": ["README.md", "tests/rules/test_pacman_not_found.py", "thefuck/rules/pacman_not_found.py", "thefuck/specific/archlinux.py"]}, {"commit_id": "16eb823066407a4115bb129ac3fce1872c16dc6b", "commit_date": "Sun May 29 22:40:31 2022 +0300", "commit_message": "#1261: Add two more patterns to sudo rule (#1307)", "files_name": ["tests/rules/test_sudo.py", "thefuck/rules/sudo.py"]}, {"commit_id": "06cb50b1e38263c365ed7abbccb22a04fb250c44", "commit_date": "Sun Jun 5 22:58:31 2022 +0200", "commit_message": "#1308: Add updatedb (mlocate) pattern to sudo rule", "files_name": ["tests/rules/test_sudo.py", "thefuck/rules/sudo.py"]}, {"commit_id": "1a1b5200a954975d88ea7165ad785f3f37540dc4", "commit_date": "Wed Jun 8 23:39:19 2022 +0200", "commit_message": "#N/A: Lock pyte<=0.8.0 for Python 2", "files_name": ["setup.py"]}, {"commit_id": "5198b34f24ca4bc414a5bf1b0288ee86ea2529a8", "commit_date": "Tue Jun 14 00:29:15 2022 +0300", "commit_message": "#1282: Keep quotes in the script on no_command rule", "files_name": ["tests/rules/test_no_command.py", "thefuck/rules/no_command.py"]}, {"commit_id": "f1b7d879bdfc712c14de1e40f00c52ed4a0437dd", "commit_date": "Tue Jun 28 18:28:38 2022 +0200", "commit_message": "#1290: Update output for brew_update_formula", "files_name": ["tests/rules/test_brew_update_formula.py", "thefuck/rules/brew_update_formula.py"]}, {"commit_id": "ed40463105a882c64cefa0b68f6267878f7cad9f", "commit_date": "Sat Jul 2 15:06:00 2022 +0200", "commit_message": "#1299: Update output for brew_install and cleanup (#1316)", "files_name": ["tests/rules/test_brew_install.py", "thefuck/rules/brew_install.py"]}, {"commit_id": "f9768cf929c5e96bd146a770b838680b4cdc04a9", "commit_date": "Sun Jul 3 21:22:36 2022 +1000", "commit_message": "#1302: Add new git_clone_missing rule", "files_name": ["README.md", "tests/rules/test_git_clone_missing.py", "thefuck/rules/git_clone_missing.py"]}, {"commit_id": "56c16b737f68cec08ab2160b9b7b0eb3b0084f33", "commit_date": "Wed Aug 31 15:42:41 2022 -0300", "commit_message": "Added Arch based installation (#1319)", "files_name": ["README.md"]}, {"commit_id": "03a032295d3c978d10d8f43644679c917e870fd7", "commit_date": "Wed Aug 31 22:36:44 2022 +0200", "commit_message": "#N/A: Change workflow triggers", "files_name": [".github/workflows/test.yml"]}, {"commit_id": "77627a314048dad8439941ca25c8f0beaedf74a9", "commit_date": "Wed Sep 7 21:33:40 2022 +0200", "commit_message": "#N/A: Define branches in workflow (#1328)", "files_name": [".github/workflows/test.yml"]}, {"commit_id": "ceeaeab94b5df5a4fe9d94d61e4f6b0bbea96378", "commit_date": "Sun Sep 25 21:37:47 2022 +0200", "commit_message": "Add terraform 'no command' rule (#1317)", "files_name": ["README.md", "tests/rules/test_terraform_no_command.py", "thefuck/rules/terraform_no_command.py"]}, {"commit_id": "1a242c7daa59ddfe787eca0eb54d00afa03c95f8", "commit_date": "Tue Nov 23 15:43:11 2021 +0200", "commit_message": "Test on Python 3.10 final", "files_name": [".github/workflows/test.yml", "tox.ini"]}, {"commit_id": "5f562a185ce3ca398f990b392c54d82104a105a7", "commit_date": "Tue Nov 23 15:45:46 2021 +0200", "commit_message": "Drop the dot https://twitter.com/pytestdotorg/status/753767547866972160", "files_name": ["CONTRIBUTING.md", "README.md", "tests/rules/test_fix_file.py", "tests/test_utils.py", "thefuck/rules/test.py.py", "tox.ini"]}, {"commit_id": "51b82c53771b3fffeb07817acfbce6a80edee747", "commit_date": "Tue Nov 23 15:56:18 2021 +0200", "commit_message": "Update min Python 3 version required in README", "files_name": ["README.md"]}, {"commit_id": "3f71959b1ba9e8359cc0e42226706a742e82ab8b", "commit_date": "Tue Nov 23 16:07:27 2021 +0200", "commit_message": "Add python_requires to help pip", "files_name": ["setup.py"]}, {"commit_id": "b79e104df88877588386e3e2b20d5aa859649795", "commit_date": "Thu Oct 27 11:24:53 2022 +0300", "commit_message": "Add support for Python 3.11", "files_name": [".github/workflows/test.yml", "tox.ini"]}, {"commit_id": "b03e0913d3e94e605dc36ef9c7c2e48cd2f6e5fc", "commit_date": "Mon Jul 10 14:20:40 2023 +0200", "commit_message": "#1248: Run workflows on push and pull_request", "files_name": [".github/workflows/test.yml"]}, {"commit_id": "d81929f29438b8e115efa4091dc8362431c4ce1e", "commit_date": "Mon Jul 10 14:22:23 2023 +0200", "commit_message": "#1248: Move deprecated Python versions to separate workflow job", "files_name": [".github/workflows/test.yml"]}, {"commit_id": "2cadcca9043e6ae3ddf0b4cb9ddd9caa0c668f1e", "commit_date": "Mon Jul 10 14:29:31 2023 +0200", "commit_message": "#1248: Reuse Docker images in functional tests", "files_name": [".github/workflows/test.yml", "tests/Dockerfile", "tests/functional/conftest.py", "tests/functional/test_bash.py", "tests/functional/test_fish.py", "tests/functional/test_tcsh.py", "tests/functional/test_zsh.py"]}, {"commit_id": "ef1ea4b4dd1016082c7d8199364cfe3e8a2916e6", "commit_date": "Mon Jul 10 14:36:42 2023 +0200", "commit_message": "#1248: Check container status before test functions", "files_name": ["tests/functional/conftest.py"]}, {"commit_id": "cf0921be4ad01fc644358a3e99680be5f238bfa7", "commit_date": "Mon Jul 10 14:39:58 2023 +0200", "commit_message": "#1248: Check for multiple patterns in functional tests", "files_name": ["tests/functional/plots.py", "tests/functional/test_bash.py", "tests/functional/test_zsh.py"]}, {"commit_id": "617aaa1fd07271d0b370e56efd307827c085eb7c", "commit_date": "Mon Jul 10 14:40:45 2023 +0200", "commit_message": "#1248: Skip a failing test when running on Windows", "files_name": ["tests/output_readers/test_rerun.py"]}, {"commit_id": "0420442e778dd7bc53bdbdb50278eea2c207dc74", "commit_date": "Mon Jul 10 14:43:45 2023 +0200", "commit_message": "#1248: Use imp only when importlib.util not available", "files_name": [".github/workflows/test.yml", "thefuck/conf.py", "thefuck/types.py"]}, {"commit_id": "3cd187a3bb47351890ac7308464e1a2780507220", "commit_date": "Mon Jul 10 10:09:27 2023 -0300", "commit_message": "#1329: Add support for Windows `CMD` and easier setup for Powershell", "files_name": ["scripts/fuck.bat", "scripts/fuck.ps1", "setup.py"]}, {"commit_id": "62e0767c5069aeee176b0fe3459068b7703aaa26", "commit_date": "Sun Jul 30 22:22:37 2023 +0200", "commit_message": "#N/A: Fix a couple of issues after new flake8 release", "files_name": ["tests/rules/test_ssh_known_host.py", "tests/test_readme.py"]}], "parents": [{"commit_id_before": "6da0bc557f0fd94ea1397d3a7f508be896cc98d8", "url_before": "https://api.github.com/repos/nvbn/thefuck/commits/6da0bc557f0fd94ea1397d3a7f508be896cc98d8", "html_url_before": "https://github.com/nvbn/thefuck/commit/6da0bc557f0fd94ea1397d3a7f508be896cc98d8"}], "details": [{"raw_url": "https://github.com/nvbn/thefuck/raw/e343c577cd7da4d304b837d4a07ab4df1e023092/thefuck%2Frules%2Fdirty_untar.py", "code": "import tarfile\nimport os\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ntar_extensions = ('.tar', '.tar.Z', '.tar.bz2', '.tar.gz', '.tar.lz',\n                  '.tar.lzma', '.tar.xz', '.taz', '.tb2', '.tbz', '.tbz2',\n                  '.tgz', '.tlz', '.txz', '.tz')\n\n\ndef _is_tar_extract(cmd):\n    if '--extract' in cmd:\n        return True\n\n    cmd = cmd.split()\n\n    return len(cmd) > 1 and 'x' in cmd[1]\n\n\ndef _tar_file(cmd):\n    for c in cmd:\n        for ext in tar_extensions:\n            if c.endswith(ext):\n                return (c, c[0:len(c) - len(ext)])\n\n\n@for_app('tar')\ndef match(command):\n    return ('-C' not in command.script\n            and _is_tar_extract(command.script)\n            and _tar_file(command.script_parts) is not None)\n\n\ndef get_new_command(command):\n    dir = shell.quote(_tar_file(command.script_parts)[1])\n    return shell.and_('mkdir -p {dir}', '{cmd} -C {dir}') \\\n        .format(dir=dir, cmd=command.script)\n\n\ndef side_effect(old_cmd, command):\n    with tarfile.TarFile(_tar_file(old_cmd.script_parts)[0]) as archive:\n        for file in archive.getnames():\n            if not os.path.abspath(file).startswith(os.getcwd()):\n                # it's unsafe to overwrite files outside of the current directory\n                continue\n\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n", "code_before": "import tarfile\nimport os\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ntar_extensions = ('.tar', '.tar.Z', '.tar.bz2', '.tar.gz', '.tar.lz',\n                  '.tar.lzma', '.tar.xz', '.taz', '.tb2', '.tbz', '.tbz2',\n                  '.tgz', '.tlz', '.txz', '.tz')\n\n\ndef _is_tar_extract(cmd):\n    if '--extract' in cmd:\n        return True\n\n    cmd = cmd.split()\n\n    return len(cmd) > 1 and 'x' in cmd[1]\n\n\ndef _tar_file(cmd):\n    for c in cmd:\n        for ext in tar_extensions:\n            if c.endswith(ext):\n                return (c, c[0:len(c) - len(ext)])\n\n\n@for_app('tar')\ndef match(command):\n    return ('-C' not in command.script\n            and _is_tar_extract(command.script)\n            and _tar_file(command.script_parts) is not None)\n\n\ndef get_new_command(command):\n    dir = shell.quote(_tar_file(command.script_parts)[1])\n    return shell.and_('mkdir -p {dir}', '{cmd} -C {dir}') \\\n        .format(dir=dir, cmd=command.script)\n\n\ndef side_effect(old_cmd, command):\n    with tarfile.TarFile(_tar_file(old_cmd.script_parts)[0]) as archive:\n        for file in archive.getnames():\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n", "patch": "@@ -41,6 +41,10 @@ def get_new_command(command):\n def side_effect(old_cmd, command):\n     with tarfile.TarFile(_tar_file(old_cmd.script_parts)[0]) as archive:\n         for file in archive.getnames():\n+            if not os.path.abspath(file).startswith(os.getcwd()):\n+                # it's unsafe to overwrite files outside of the current directory\n+                continue\n+\n             try:\n                 os.remove(file)\n             except OSError:", "file_path": "files/2021_6/268", "file_language": "py", "file_name": "thefuck/rules/dirty_untar.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/nvbn/thefuck/raw/e343c577cd7da4d304b837d4a07ab4df1e023092/thefuck%2Frules%2Fdirty_unzip.py", "code": "import os\nimport zipfile\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ndef _is_bad_zip(file):\n    try:\n        with zipfile.ZipFile(file, 'r') as archive:\n            return len(archive.namelist()) > 1\n    except Exception:\n        return False\n\n\ndef _zip_file(command):\n    # unzip works that way:\n    # unzip [-flags] file[.zip] [file(s) ...] [-x file(s) ...]\n    #                ^          ^ files to unzip from the archive\n    #                archive to unzip\n    for c in command.script_parts[1:]:\n        if not c.startswith('-'):\n            if c.endswith('.zip'):\n                return c\n            else:\n                return u'{}.zip'.format(c)\n\n\n@for_app('unzip')\ndef match(command):\n    if '-d' in command.script:\n        return False\n\n    zip_file = _zip_file(command)\n    if zip_file:\n        return _is_bad_zip(zip_file)\n    else:\n        return False\n\n\ndef get_new_command(command):\n    return u'{} -d {}'.format(\n        command.script, shell.quote(_zip_file(command)[:-4]))\n\n\ndef side_effect(old_cmd, command):\n    with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n        for file in archive.namelist():\n            if not os.path.abspath(file).startswith(os.getcwd()):\n                # it's unsafe to overwrite files outside of the current directory\n                continue\n\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n\n\nrequires_output = False\n", "code_before": "import os\nimport zipfile\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ndef _is_bad_zip(file):\n    try:\n        with zipfile.ZipFile(file, 'r') as archive:\n            return len(archive.namelist()) > 1\n    except Exception:\n        return False\n\n\ndef _zip_file(command):\n    # unzip works that way:\n    # unzip [-flags] file[.zip] [file(s) ...] [-x file(s) ...]\n    #                ^          ^ files to unzip from the archive\n    #                archive to unzip\n    for c in command.script_parts[1:]:\n        if not c.startswith('-'):\n            if c.endswith('.zip'):\n                return c\n            else:\n                return u'{}.zip'.format(c)\n\n\n@for_app('unzip')\ndef match(command):\n    if '-d' in command.script:\n        return False\n\n    zip_file = _zip_file(command)\n    if zip_file:\n        return _is_bad_zip(zip_file)\n    else:\n        return False\n\n\ndef get_new_command(command):\n    return u'{} -d {}'.format(\n        command.script, shell.quote(_zip_file(command)[:-4]))\n\n\ndef side_effect(old_cmd, command):\n    with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n        for file in archive.namelist():\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n\n\nrequires_output = False\n", "patch": "@@ -45,6 +45,10 @@ def get_new_command(command):\n def side_effect(old_cmd, command):\n     with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n         for file in archive.namelist():\n+            if not os.path.abspath(file).startswith(os.getcwd()):\n+                # it's unsafe to overwrite files outside of the current directory\n+                continue\n+\n             try:\n                 os.remove(file)\n             except OSError:", "file_path": "files/2021_6/269", "file_language": "py", "file_name": "thefuck/rules/dirty_unzip.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 0, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": 0, "function_before": [{"function": "def _is_bad_zip(file):\n    try:\n        with zipfile.ZipFile(file, 'r') as archive:\n            return len(archive.namelist()) > 1\n    except Exception:\n        return False", "target": 0}, {"function": "def _zip_file(command):\n    # unzip works that way:\n    # unzip [-flags] file[.zip] [file(s) ...] [-x file(s) ...]\n    #                ^          ^ files to unzip from the archive\n    #                archive to unzip\n    for c in command.script_parts[1:]:\n        if not c.startswith('-'):\n            if c.endswith('.zip'):\n                return c\n            else:\n                return u'{}.zip'.format(c)", "target": 0}, {"function": "def get_new_command(command):\n    return u'{} -d {}'.format(\n        command.script, shell.quote(_zip_file(command)[:-4]))", "target": 0}, {"function": "def side_effect(old_cmd, command):\n    with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n        for file in archive.namelist():\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass", "target": 0}], "function_after": [{"function": "def _is_bad_zip(file):\n    try:\n        with zipfile.ZipFile(file, 'r') as archive:\n            return len(archive.namelist()) > 1\n    except Exception:\n        return False", "target": 0}, {"function": "def _zip_file(command):\n    # unzip works that way:\n    # unzip [-flags] file[.zip] [file(s) ...] [-x file(s) ...]\n    #                ^          ^ files to unzip from the archive\n    #                archive to unzip\n    for c in command.script_parts[1:]:\n        if not c.startswith('-'):\n            if c.endswith('.zip'):\n                return c\n            else:\n                return u'{}.zip'.format(c)", "target": 0}, {"function": "def get_new_command(command):\n    return u'{} -d {}'.format(\n        command.script, shell.quote(_zip_file(command)[:-4]))", "target": 0}, {"function": "def side_effect(old_cmd, command):\n    with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n        for file in archive.namelist():\n            if not os.path.abspath(file).startswith(os.getcwd()):\n                # it's unsafe to overwrite files outside of the current directory\n                continue\n\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass", "target": 0}]}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
