{"index": 8590, "cve_id": "CVE-2022-31549", "cwe_id": ["CWE-22"], "cve_language": "Python", "cve_description": "The olmax99/helm-flask-celery repository before 2022-05-25 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely.", "cvss": "9.3", "publish_date": "July 10, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "CHANGED", "C": "HIGH", "I": "NONE", "A": "LOW", "commit_id": "28c985d712d7ac26893433e8035e2e3678fcae9f", "commit_message": "Merge pull request #2 from porcupineyhairs/FixPathInjection\n\nFix Path Traversal Vulnerability", "commit_date": "2022-05-25T20:04:09Z", "project": "olmax99/helm-flask-celery", "url": "https://api.github.com/repos/olmax99/helm-flask-celery/commits/28c985d712d7ac26893433e8035e2e3678fcae9f", "html_url": "https://github.com/olmax99/helm-flask-celery/commit/28c985d712d7ac26893433e8035e2e3678fcae9f", "windows_before": [{"commit_id": "0e8a6bdc4fa5b35fbdda18b27c8e768df8a9bb3c", "commit_date": "Tue May 26 17:16:27 2020 +0200", "commit_message": "fix: web service annotation ingress controller", "files_name": ["README.md", "flask-nginx-celery/templates/ingress.yaml"]}, {"commit_id": "cedbf3467afa005f9b4846a7c3a57a0f46bb2f81", "commit_date": "Sat May 23 19:03:37 2020 +0200", "commit_message": "update readme", "files_name": ["README.md"]}, {"commit_id": "e143636aba5bb97a371ab8acc9063b36429d61af", "commit_date": "Sat May 23 18:57:21 2020 +0200", "commit_message": "refactor: configmap for webapi and worker deployment, get Pythonpath from values", "files_name": ["flask-nginx-celery/templates/configmap-web.yaml", "flask-nginx-celery/templates/configmap-worker.yaml"]}, {"commit_id": "cd446545d036d5c104f2a8bfdf70f382fdd9d5aa", "commit_date": "Sat May 23 18:56:25 2020 +0200", "commit_message": "refactor: configmap for webapi and worker deployment, get Pythonpath from values", "files_name": ["flask-nginx-celery/Chart.yaml", "flask-nginx-celery/requirements.yaml", "flask-nginx-celery/templates/deployment-webapi.yaml", "flask-nginx-celery/templates/deployment-worker-background.yaml"]}, {"commit_id": "30feeb9eca0be08bc9ab7966852b1b6945edaed0", "commit_date": "Fri May 22 19:26:26 2020 +0200", "commit_message": "feat: add coverage to pytest", "files_name": ["README.md", "flask-nginx-celery/templates/deployment-webapi.yaml", "flask-nginx-celery/templates/deployment-worker-background.yaml", "webapiservice/.coveragerc", "webapiservice/Pipfile", "workerservice/Pipfile", "workerservice/app/.coveragerc"]}, {"commit_id": "f364cfb68608858a12d1b8f9c2747a9b0a436fed", "commit_date": "Wed May 20 18:38:42 2020 +0200", "commit_message": "refactor: add integration test for long_compute", "files_name": ["workerservice/tests/conftest.py", "workerservice/tests/integration/test_tasks.py", "workerservice/tests/unit/test_tasks.py"]}, {"commit_id": "f67e0e2f924b3dd120ddf6da32702b82e4c540b4", "commit_date": "Wed May 20 18:38:00 2020 +0200", "commit_message": "doc: minor readme updates", "files_name": ["README.md"]}, {"commit_id": "6944ad84d348d1eb80fd398b60fc05c009b73763", "commit_date": "Tue May 19 18:17:47 2020 +0200", "commit_message": "doc: minor readme updates", "files_name": ["Makefile", "README.md"]}, {"commit_id": "44ebc869512d17e11c49e75231e9954705951141", "commit_date": "Tue May 19 18:16:38 2020 +0200", "commit_message": "refactor: separate values-dev from values-test - webapi is running in dev", "files_name": ["webapiservice/supervisord-test.conf", "workerservice/app/temp_tasks.py", "workerservice/supervisord-test.conf", "workerservice/supervisord.conf"]}, {"commit_id": "94f0c0dd28a24bb99bdb4dec9f176660a15e580a", "commit_date": "Tue May 19 18:13:40 2020 +0200", "commit_message": "refactor: clean labels and pod name of webapi and webapi service", "files_name": ["flask-nginx-celery/Chart.yaml", "flask-nginx-celery/templates/deployment-webapi.yaml", "flask-nginx-celery/templates/deployment-worker-beat.yaml", "flask-nginx-celery/templates/service-webapi.yaml"]}, {"commit_id": "1839b5223d65d68489bd82f57b55124471bcd712", "commit_date": "Mon May 18 10:13:30 2020 +0200", "commit_message": "docs: update readme", "files_name": ["CHANGELOG.md", "LICENCE.md", "README.md"]}, {"commit_id": "81f20773524aa6a55e457f206810cb53320407bd", "commit_date": "Sun May 17 22:06:05 2020 +0200", "commit_message": "chore: initialize code base", "files_name": [".gitignore", "LICENCE", "Makefile", "README.md", "cloudformation/development/cloudformation.dev.helmchart.repo.yml", "flask-nginx-celery/Chart.yaml", "flask-nginx-celery/requirements.yaml", "flask-nginx-celery/templates/.helmignore", "flask-nginx-celery/templates/NOTES.txt", "flask-nginx-celery/templates/_helpers.tpl", "flask-nginx-celery/templates/configmap.yaml", "flask-nginx-celery/templates/deployment-flower.yaml", "flask-nginx-celery/templates/deployment-scheduler.yaml", "flask-nginx-celery/templates/deployment-webapi.yaml", "flask-nginx-celery/templates/deployment-worker-background.yaml", "flask-nginx-celery/templates/deployment-worker-beat.yaml", "flask-nginx-celery/templates/ingress.yaml", "flask-nginx-celery/templates/service-flower.yaml", "flask-nginx-celery/templates/service-webapi.yaml", "images/flask_base_api-1.png", "images/flask_base_api-2.png", "scripts/sync-repo.sh", "skaffold.yaml", "webapiservice/.dockerignore", "webapiservice/Dockerfile", "webapiservice/Pipfile", "webapiservice/entrypoint.sh", "webapiservice/flaskapi/__init__.py", "webapiservice/flaskapi/api.py", "webapiservice/flaskapi/apis/__init__.py", "webapiservice/flaskapi/apis/endpoints.py", "webapiservice/flaskapi/apis/resources/__init__.py", "webapiservice/flaskapi/apis/resources/sample_endpoint.py", "webapiservice/flaskapi/core/__init__.py", "webapiservice/flaskapi/core/app_config.py", "webapiservice/flaskapi/core/app_setup.py", "webapiservice/flaskapi/core/celery_conn.py", "webapiservice/flaskapi/core/postgres_conn.py", "webapiservice/flaskapi/core/redis_config.py", "webapiservice/flaskapi/core/redis_conn.py", "webapiservice/flaskapi/models/__init__.py", "webapiservice/flaskapi/static/index.html", "webapiservice/flaskapi/templates/home.html", "webapiservice/flaskapi/templates/task.html", "webapiservice/scripts/keep-alive.sh", "webapiservice/supervisord-dev.conf", "webapiservice/supervisord.conf", "webapiservice/tests/__init__.py", "webapiservice/tests/base_client.py", "webapiservice/tests/integration/__init__.py", "webapiservice/tests/integration/test_sample_endpoint.py", "webapiservice/tests/unit/__init__.py", "webapiservice/tests/unit/models/__init__.py", "webapiservice/tests/unit/test_sample_endpoint.py", "workerservice/.dockerignore", "workerservice/Dockerfile", "workerservice/Pipfile", "workerservice/app/__init__.py", "workerservice/app/celery_config.py", "workerservice/app/celery_conn.py", "workerservice/app/tasks.py", "workerservice/app/temp_tasks.py", "workerservice/scripts/keep-alive.sh", "workerservice/supervisord-dev.conf", "workerservice/supervisord.conf", "workerservice/tests/conftest.py", "workerservice/tests/integration/test_hooks.py", "workerservice/tests/unit/test_tasks.py", "workerservice/utilities/__init__.py", "workerservice/utilities/hooks.py"]}], "windows_after": [], "parents": [{"commit_id_before": "0e8a6bdc4fa5b35fbdda18b27c8e768df8a9bb3c", "url_before": "https://api.github.com/repos/olmax99/helm-flask-celery/commits/0e8a6bdc4fa5b35fbdda18b27c8e768df8a9bb3c", "html_url_before": "https://github.com/olmax99/helm-flask-celery/commit/0e8a6bdc4fa5b35fbdda18b27c8e768df8a9bb3c"}, {"commit_id_before": "d49c43a0f2dff4447281a1a1a3ec6357900c0199", "url_before": "https://api.github.com/repos/olmax99/helm-flask-celery/commits/d49c43a0f2dff4447281a1a1a3ec6357900c0199", "html_url_before": "https://github.com/olmax99/helm-flask-celery/commit/d49c43a0f2dff4447281a1a1a3ec6357900c0199"}], "details": [{"raw_url": "https://github.com/olmax99/helm-flask-celery/raw/28c985d712d7ac26893433e8035e2e3678fcae9f/.commiter.template.md", "code": "# Absolute Path Traversal due to incorrect use of `send_file` call\n\nA path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\n\n## Root Cause Analysis\n\n\nThe `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  Please see the example below.\n```\n>>> import os.path\n>>> static = \"path/to/mySafeStaticDir\"\n>>> malicious = \"/../../../../../etc/passwd\"\n>>> os.path.join(t,malicious)\n'/../../../../../etc/passwd'\n```\nSince the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks. \n\n\nIn this case, the problems occurs due to the following code :\nhttps://github.com/olmax99/helm-flask-celery/blob/0e8a6bdc4fa5b35fbdda18b27c8e768df8a9bb3c/webapiservice/flaskapi/core/app_setup.py#L83\n\nHere, the `path` parameter is attacker controlled. This parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. This leads to a path traversal attack. \n\n\n## Proof of Concept\n\nThe bug can be verified using a proof of concept similar to the one shown below.\n\n \n```\ncurl --path-as-is 'http://<domain>///../../../../etc/passwd\"'\n```\n## Remediation\n\nThis can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `flask.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\n\n\n## References\n* [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n* github/securitylab#669\n\n### This bug was found using *[CodeQL by Github](https://codeql.github.com/)*\n", "code_before": "# Absolute Path Traversal due to incorrect use of `send_file` call\n\nA path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\n\n## Root Cause Analysis\n\n\nThe `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  Please see the example below.\n```\n>>> import os.path\n>>> static = \"path/to/mySafeStaticDir\"\n>>> malicious = \"/../../../../../etc/passwd\"\n>>> os.path.join(t,malicious)\n'/../../../../../etc/passwd'\n```\nSince the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks. \n\n\nIn this case, the problems occurs due to the following code :\nhttps://github.com/olmax99/helm-flask-celery/blob/0e8a6bdc4fa5b35fbdda18b27c8e768df8a9bb3c/webapiservice/flaskapi/core/app_setup.py#L83\n\nHere, the `path` parameter is attacker controlled. This parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. This leads to a path traversal attack. \n\n\n## Proof of Concept\n\nThe bug can be verified using a proof of concept similar to the one shown below.\n\n \n```\ncurl --path-as-is 'http://<domain>///../../../../etc/passwd\"'\n```\n## Remediation\n\nThis can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `flask.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\n\n\n## References\n* [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n* github/securitylab#669\n\n### This bug was found using *[CodeQL by Github](https://codeql.github.com/)*\n", "patch": "@@ -0,0 +1,42 @@\n+# Absolute Path Traversal due to incorrect use of `send_file` call\n+\n+A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\n+\n+## Root Cause Analysis\n+\n+\n+The `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  Please see the example below.\n+```\n+>>> import os.path\n+>>> static = \"path/to/mySafeStaticDir\"\n+>>> malicious = \"/../../../../../etc/passwd\"\n+>>> os.path.join(t,malicious)\n+'/../../../../../etc/passwd'\n+```\n+Since the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks. \n+\n+\n+In this case, the problems occurs due to the following code :\n+https://github.com/olmax99/helm-flask-celery/blob/0e8a6bdc4fa5b35fbdda18b27c8e768df8a9bb3c/webapiservice/flaskapi/core/app_setup.py#L83\n+\n+Here, the `path` parameter is attacker controlled. This parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. This leads to a path traversal attack. \n+\n+\n+## Proof of Concept\n+\n+The bug can be verified using a proof of concept similar to the one shown below.\n+\n+ \n+```\n+curl --path-as-is 'http://<domain>///../../../../etc/passwd\"'\n+```\n+## Remediation\n+\n+This can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `flask.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\n+\n+\n+## References\n+* [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n+* github/securitylab#669\n+\n+### This bug was found using *[CodeQL by Github](https://codeql.github.com/)*", "file_path": "files/2022_7/292", "file_language": "md", "file_name": ".commiter.template.md", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0}, {"raw_url": "https://github.com/olmax99/helm-flask-celery/raw/28c985d712d7ac26893433e8035e2e3678fcae9f/webapiservice%2Fflaskapi%2Fcore%2Fapp_setup.py", "code": "import os\nimport socket\n\nfrom flask import current_app, make_response, request\nfrom flask import send_file, render_template, safe_join\n\nfrom .redis_config import DecodedRedis\nfrom .redis_conn import FlaskRedis\n\n# from flaskapi.core.worker import celery\n# import celery.states as states\n\nfrom flask import Blueprint\nroute_blueprint = Blueprint('route_blueprint', __name__)\n\n\n# Create a URL route in our current_application for \"/home\"\n@route_blueprint.route('/main')\ndef main():\n    \"\"\"\n    This function just responds to the browser ULR\n    localhost:5000/home\n\n    :return:        the rendered template 'home.html'\n    \"\"\"\n    return render_template('home.html')\n\n\n@route_blueprint.route('/log_test')\ndef log_test():\n    current_app.logger.debug('this is a DEBUG message')\n    current_app.logger.info('this is an INFO message')\n    current_app.logger.warning('this is a WARNING message')\n    current_app.logger.error('this is an ERROR message')\n    current_app.logger.critical('this is a CRITICAL message')\n\n    msg =None\n    try:\n        r = FlaskRedis.from_custom_provider(DecodedRedis, app=current_app, config_prefix='REDIS')\n\n        # step 4: Set the hello message in Redis\n        r.set(\"msg:hello\", \"Hello from Redis!!!\")\n\n        # step 5: Retrieve the hello message from Redis\n        msg = r.get(\"msg:hello\")\n        print(msg)\n\n    except Exception as e:\n        print(e)\n\n    # index_path = os.path.join(current_app.static_folder, 'index.html')\n    html = \"<h3>Hello {name}!</h3>\" \\\n           \"<b>Hostname:</b> {hostname}<br/>\" \\\n           \"<b>Message:</b> {msg}\"\n    return html.format(name=os.getenv(\"REDIS_HOST\", \"world\"), hostname=socket.gethostname(), msg=msg)\n    #return send_file(index_path)\n\n\n# @route_blueprint.route('/add/<int:param1>/<int:param2>')\n# def add(param1: int, param2: int) -> str:\n#     task = celery.send_task('tasks.add', args=[param1, param2], kwargs={})\n#     response = make_response(render_template('task.html', task_id=task))\n#     response.headers.set('Content-Security-Policy', \"default-src 'self'\")\n#     return response\n\n\n# @route_blueprint.route('/check/<string:task_id>')\n# def check_task(task_id: str) -> str:\n#     res = celery.AsyncResult(task_id)\n#     if res.state == states.PENDING:\n#         return res.state\n#     else:\n#         return str(res.result)\n\n\n# Everything not declared before (not a Flask route / API endpoint)...\n@route_blueprint.route('/<path:path>')\ndef route_frontend(path):\n    # ...could be a static file needed by the front end that\n    # doesn't use the `static` path (like in `<script src=\"bundle.js\">`)\n    file_path = safe_join(current_app.template_folder, path)\n    if os.path.isfile(file_path):\n        return send_file(file_path)\n    # ...or should be handled by the SPA's \"router\" in front end\n    else:\n        index_path = os.path.join(current_app.static_folder, 'index.html')\n        return send_file(index_path)\n", "code_before": "import os\nimport socket\n\nfrom flask import current_app, make_response, request\nfrom flask import send_file, render_template, safe_join\n\nfrom .redis_config import DecodedRedis\nfrom .redis_conn import FlaskRedis\n\n# from flaskapi.core.worker import celery\n# import celery.states as states\n\nfrom flask import Blueprint\nroute_blueprint = Blueprint('route_blueprint', __name__)\n\n\n# Create a URL route in our current_application for \"/home\"\n@route_blueprint.route('/main')\ndef main():\n    \"\"\"\n    This function just responds to the browser ULR\n    localhost:5000/home\n\n    :return:        the rendered template 'home.html'\n    \"\"\"\n    return render_template('home.html')\n\n\n@route_blueprint.route('/log_test')\ndef log_test():\n    current_app.logger.debug('this is a DEBUG message')\n    current_app.logger.info('this is an INFO message')\n    current_app.logger.warning('this is a WARNING message')\n    current_app.logger.error('this is an ERROR message')\n    current_app.logger.critical('this is a CRITICAL message')\n\n    msg =None\n    try:\n        r = FlaskRedis.from_custom_provider(DecodedRedis, app=current_app, config_prefix='REDIS')\n\n        # step 4: Set the hello message in Redis\n        r.set(\"msg:hello\", \"Hello from Redis!!!\")\n\n        # step 5: Retrieve the hello message from Redis\n        msg = r.get(\"msg:hello\")\n        print(msg)\n\n    except Exception as e:\n        print(e)\n\n    # index_path = os.path.join(current_app.static_folder, 'index.html')\n    html = \"<h3>Hello {name}!</h3>\" \\\n           \"<b>Hostname:</b> {hostname}<br/>\" \\\n           \"<b>Message:</b> {msg}\"\n    return html.format(name=os.getenv(\"REDIS_HOST\", \"world\"), hostname=socket.gethostname(), msg=msg)\n    #return send_file(index_path)\n\n\n# @route_blueprint.route('/add/<int:param1>/<int:param2>')\n# def add(param1: int, param2: int) -> str:\n#     task = celery.send_task('tasks.add', args=[param1, param2], kwargs={})\n#     response = make_response(render_template('task.html', task_id=task))\n#     response.headers.set('Content-Security-Policy', \"default-src 'self'\")\n#     return response\n\n\n# @route_blueprint.route('/check/<string:task_id>')\n# def check_task(task_id: str) -> str:\n#     res = celery.AsyncResult(task_id)\n#     if res.state == states.PENDING:\n#         return res.state\n#     else:\n#         return str(res.result)\n\n\n# Everything not declared before (not a Flask route / API endpoint)...\n@route_blueprint.route('/<path:path>')\ndef route_frontend(path):\n    # ...could be a static file needed by the front end that\n    # doesn't use the `static` path (like in `<script src=\"bundle.js\">`)\n    file_path = safe_join(current_app.template_folder, path)\n    if os.path.isfile(file_path):\n        return send_file(file_path)\n    # ...or should be handled by the SPA's \"router\" in front end\n    else:\n        index_path = os.path.join(current_app.static_folder, 'index.html')\n        return send_file(index_path)\n", "patch": "@@ -2,7 +2,7 @@\n import socket\n \n from flask import current_app, make_response, request\n-from flask import send_file, render_template\n+from flask import send_file, render_template, safe_join\n \n from .redis_config import DecodedRedis\n from .redis_conn import FlaskRedis\n@@ -78,7 +78,7 @@ def log_test():\n def route_frontend(path):\n     # ...could be a static file needed by the front end that\n     # doesn't use the `static` path (like in `<script src=\"bundle.js\">`)\n-    file_path = os.path.join(current_app.template_folder, path)\n+    file_path = safe_join(current_app.template_folder, path)\n     if os.path.isfile(file_path):\n         return send_file(file_path)\n     # ...or should be handled by the SPA's \"router\" in front end", "file_path": "files/2022_7/293", "file_language": "py", "file_name": "webapiservice/flaskapi/core/app_setup.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
