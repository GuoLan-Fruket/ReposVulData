{"index": 11762, "cve_id": "CVE-2023-34237", "cwe_id": ["CWE-94", "NVD-CWE-noinfo"], "cve_language": "Python", "cve_description": "SABnzbd is an open source automated Usenet download tool. A design flaw was discovered in SABnzbd that could allow remote code execution. Manipulating the Parameters setting in the Notification Script functionality allows code execution with the privileges of the SABnzbd process. Exploiting the vulnerabilities requires access to the web interface. Remote exploitation is possible if users[exposed their setup to the internet or other untrusted networks without setting a username/password. By default SABnzbd is only accessible from `localhost`, with no authentication required for the web interface. This issue has been patched in commits `e3a722` and `422b4f` which have been included in the 4.0.2 release. Users are advised to upgrade. Users unable to upgrade should ensure that a username and password have been set if their instance is web accessible.", "cvss": "9.8", "publish_date": "June 7, 2023", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "e3a722664819d1c7c8fab97144cc299b1c18b429", "commit_message": "Move Notification Script Parameters to environment variable\n\nFixes #2549", "commit_date": "2023-05-31T09:35:23Z", "project": "sabnzbd/sabnzbd", "url": "https://api.github.com/repos/sabnzbd/sabnzbd/commits/e3a722664819d1c7c8fab97144cc299b1c18b429", "html_url": "https://github.com/sabnzbd/sabnzbd/commit/e3a722664819d1c7c8fab97144cc299b1c18b429", "windows_before": [{"commit_id": "5b9fc86319a013fffaf01661e94f8b0414b50be7", "commit_date": "Mon May 29 13:20:01 2023 +0100", "commit_message": "Fix uu decode workaround (#2573)", "files_name": ["sabnzbd/decoder.py", "tests/test_decoder.py"]}, {"commit_id": "5afea2d3c7b9e595fd5387161afeae863fdd5171", "commit_date": "Mon May 29 01:57:07 2023 +0000", "commit_message": "Update dependency orjson to v3.8.14", "files_name": ["builder/requirements.txt"]}, {"commit_id": "5f942a6943b715a22de20ede9d3acb77077ae043", "commit_date": "Wed May 24 15:45:03 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/SABnzbd.pot", "po/main/cs.po", "po/main/da.po", "po/main/de.po", "po/main/es.po", "po/main/fi.po", "po/main/fr.po", "po/main/he.po", "po/main/nb.po", "po/main/nl.po", "po/main/pl.po", "po/main/pt_BR.po", "po/main/ro.po", "po/main/ru.po", "po/main/sr.po", "po/main/sv.po", "po/main/zh_CN.po"]}, {"commit_id": "18075c5c519dda4e49dcb47426b4679101a0536d", "commit_date": "Wed May 24 17:41:23 2023 +0200", "commit_message": "Print last line in case of error", "files_name": ["sabnzbd/postproc.py"]}, {"commit_id": "a728225782c554d5b815364c10a54dd7192991e6", "commit_date": "Wed May 24 09:38:15 2023 +0200", "commit_message": "Automatically merge website update during release", "files_name": ["builder/release.py"]}, {"commit_id": "3e6ae26710258c6f5162b69c3680d2fd8227f910", "commit_date": "Tue May 23 21:18:49 2023 +0200", "commit_message": "Tray icon could not be disabled on macOS", "files_name": ["sabnzbd/osxmenu.py"]}, {"commit_id": "a8a4e442a8d773fd27634df76b3247ad1ceacaae", "commit_date": "Tue May 23 20:34:33 2023 +0200", "commit_message": "Add `PYTHONUNBUFFERED` env variable for Python post-processing scripts", "files_name": ["sabnzbd/newsunpack.py"]}, {"commit_id": "c16e91734dc4e405cb879d46daa730be3af5b6f5", "commit_date": "Mon May 22 10:23:28 2023 +0200", "commit_message": "Catch all errors during rarfile header parsing", "files_name": ["sabnzbd/utils/rarfile.py"]}, {"commit_id": "bb9ad4b546e67c703a2a8d3f273d7a9cd759b9c5", "commit_date": "Mon May 22 10:10:46 2023 +0200", "commit_message": "Disable buffering in POpen calls", "files_name": ["sabnzbd/directunpacker.py", "sabnzbd/misc.py"]}, {"commit_id": "43045e5d4e75e823a19e8d3fe9938b21ed68bdf8", "commit_date": "Mon May 22 03:06:06 2023 +0000", "commit_message": "Update all dependencies", "files_name": ["builder/requirements.txt", "requirements.txt"]}, {"commit_id": "63c7dbdb4d70318548cdbe4b7a2450ed529bbcf7", "commit_date": "Wed May 17 17:08:09 2023 +0200", "commit_message": "Rely on POpen's `text` mode to handle encoding", "files_name": ["sabnzbd/directunpacker.py", "sabnzbd/misc.py", "sabnzbd/newsunpack.py", "sabnzbd/notifier.py"]}, {"commit_id": "ef217bba909d5f816cb98ceb984f686ea259fe02", "commit_date": "Wed May 17 16:52:59 2023 +0200", "commit_message": "Only open pipe for `stdin` when we actually need it", "files_name": ["sabnzbd/directunpacker.py", "sabnzbd/misc.py", "sabnzbd/newsunpack.py"]}, {"commit_id": "ca9924c38f64314c5b195e8cc35ac79d7b7e3aac", "commit_date": "Wed May 17 16:39:06 2023 +0200", "commit_message": "Only warn about sabctools linking if OpenSSL >= 1.1.1", "files_name": ["SABnzbd.py"]}, {"commit_id": "c3c47507e72b28071da8f86e177f52aa73aa290a", "commit_date": "Tue May 16 11:18:41 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/nl.po"]}, {"commit_id": "dc237c752a90dea332cc5ef516e41922cb870246", "commit_date": "Tue May 16 13:17:56 2023 +0200", "commit_message": "Do not push local translations to allow modifications", "files_name": [".github/workflows/translations.yml"]}, {"commit_id": "08892c71b2a262bfbbc4ea40f12ecadc12ac816f", "commit_date": "Tue May 16 11:06:46 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/nl.po"]}, {"commit_id": "026717b7c2b9aeb33a064379b562f10b03911c92", "commit_date": "Tue May 16 12:41:32 2023 +0200", "commit_message": "Build binaries without dependencies", "files_name": [".github/workflows/build_release.yml", "builder/package.py", "builder/requirements.txt"]}, {"commit_id": "be06290f6c4b7208f947024af3370a776411bbf0", "commit_date": "Mon May 15 13:28:49 2023 +0100", "commit_message": "Addnzbfile enums and keep empty (#2554)", "files_name": ["sabnzbd/api.py", "sabnzbd/constants.py", "sabnzbd/dirscanner.py", "sabnzbd/nzbparser.py", "sabnzbd/urlgrabber.py", "tests/test_dirscanner.py"]}, {"commit_id": "9ec55478c9f19f3fc15bfac969aa95a249c5a447", "commit_date": "Mon May 15 00:42:16 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/fr.po", "po/nsis/de.po"]}, {"commit_id": "4172b4a2a60746964ba5540407db19a4db7b2c24", "commit_date": "Mon May 15 00:28:24 2023 +0000", "commit_message": "Update all dependencies", "files_name": ["builder/release-requirements.txt", "builder/requirements.txt"]}, {"commit_id": "59620c22173ec6bb2dc86e5fdfe7a4243c5d3e14", "commit_date": "Wed May 10 21:26:29 2023 +0200", "commit_message": "Remove debugging code for Downloader sleep time", "files_name": ["sabnzbd/downloader.py"]}, {"commit_id": "c410c646b29e926b69ae6658754e700abe017487", "commit_date": "Wed May 10 19:26:14 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/SABnzbd.pot", "po/main/cs.po", "po/main/da.po", "po/main/de.po", "po/main/es.po", "po/main/fi.po", "po/main/fr.po", "po/main/he.po", "po/main/nb.po", "po/main/nl.po", "po/main/pl.po", "po/main/pt_BR.po", "po/main/ro.po", "po/main/ru.po", "po/main/sr.po", "po/main/sv.po", "po/main/zh_CN.po"]}, {"commit_id": "0b515996d7c50c2a670d2640e57b44ce43d348a9", "commit_date": "Wed May 10 21:24:28 2023 +0200", "commit_message": "Wrap Downloader in try/except", "files_name": ["sabnzbd/downloader.py"]}, {"commit_id": "8b9b8319a1273ce20c23ff74018042db96a6d3c8", "commit_date": "Wed May 10 21:16:23 2023 +0200", "commit_message": "Warn users against using application directory as their Scripts Folder", "files_name": ["interfaces/Config/templates/config.tmpl", "sabnzbd/cfg.py"]}, {"commit_id": "161cf14519fd64ee1b5270f7d50e4c950fa722fe", "commit_date": "Wed May 10 10:28:18 2023 +0200", "commit_message": "Disabling a server during download doesn't stop it from downloading", "files_name": ["sabnzbd/downloader.py"]}, {"commit_id": "c6ac09e938d4fb2b529fcdea0429c454468df657", "commit_date": "Tue May 9 23:40:53 2023 -0500", "commit_message": "Disable sorting on pattern key so you can select text on it / prevent it from moving. (#2556)", "files_name": ["interfaces/Config/templates/config_sorting.tmpl"]}, {"commit_id": "fde8f9d13370ba19b6b3c7dcc679af2ebdf8fb29", "commit_date": "Mon May 8 17:04:45 2023 +0200", "commit_message": "Allow longer binary startup during release quick-test", "files_name": ["builder/package.py"]}, {"commit_id": "2bd222ca1c566a42314fb0eb48389153517d919f", "commit_date": "Mon May 8 14:57:52 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/cs.po", "po/main/da.po", "po/main/de.po", "po/main/es.po", "po/main/fi.po", "po/main/fr.po", "po/main/he.po", "po/main/nb.po", "po/main/nl.po", "po/main/pl.po", "po/main/pt_BR.po", "po/main/ro.po", "po/main/ru.po", "po/main/sr.po", "po/main/sv.po", "po/main/zh_CN.po"]}, {"commit_id": "12228fe1fb0804f34b7cc2934edea0cc797670c7", "commit_date": "Mon May 8 16:56:23 2023 +0200", "commit_message": "Update Watched Folder text to include supported extensions", "files_name": ["interfaces/Config/templates/config_folders.tmpl", "po/main/SABnzbd.pot", "po/main/cs.po", "po/main/da.po", "po/main/de.po", "po/main/es.po", "po/main/fi.po", "po/main/fr.po", "po/main/he.po", "po/main/nb.po", "po/main/nl.po", "po/main/pl.po", "po/main/pt_BR.po", "po/main/ro.po", "po/main/ru.po", "po/main/sr.po", "po/main/sv.po", "po/main/zh_CN.po", "sabnzbd/interface.py", "sabnzbd/skintext.py"]}, {"commit_id": "c63b2592f1d021ea82ee4b6d77f9fd8cc715c0c8", "commit_date": "Mon May 8 09:52:03 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/SABnzbd.pot", "po/main/cs.po", "po/main/da.po", "po/main/de.po", "po/main/es.po", "po/main/fi.po", "po/main/fr.po", "po/main/he.po", "po/main/nb.po", "po/main/nl.po", "po/main/pl.po", "po/main/pt_BR.po", "po/main/ro.po", "po/main/ru.po", "po/main/sr.po", "po/main/sv.po", "po/main/zh_CN.po"]}, {"commit_id": "e65980258c6926a9bf7c8f5e9a20ef336a74e436", "commit_date": "Mon May 8 11:50:49 2023 +0200", "commit_message": "test writing long and unicode filenames (#2542)", "files_name": ["sabnzbd/filesystem.py", "sabnzbd/postproc.py", "tests/test_filesystem.py"]}, {"commit_id": "bd0a90d2dddc3db78896dfbdf557488e6a0c6519", "commit_date": "Mon May 8 06:15:40 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/email/cs.po"]}], "windows_after": [{"commit_id": "422b4fce7bfd56e95a315be0400cdfdc585df7cc", "commit_date": "Wed May 31 21:16:15 2023 +0200", "commit_message": "Notification Script did not get environment variables", "files_name": ["sabnzbd/newsunpack.py", "sabnzbd/notifier.py"]}, {"commit_id": "e0d4d4abbd03db3020d7a6a29478906a8106a3e1", "commit_date": "Fri Jun 2 15:36:38 2023 +0200", "commit_message": "Use more reliable marker if job is still active", "files_name": ["sabnzbd/directunpacker.py"]}, {"commit_id": "135b9336a4332d00587225fcab8a04ad7fd77a35", "commit_date": "Fri Jun 2 21:29:10 2023 +0200", "commit_message": "Show active jobs post processing in tabbed layout", "files_name": ["interfaces/Glitter/templates/main.tmpl", "interfaces/Glitter/templates/static/javascripts/glitter.history.js", "interfaces/Glitter/templates/static/stylesheets/glitter.css", "sabnzbd/api.py"]}, {"commit_id": "e11e9e72012a7248075b2bdbe4dc1876e985bda2", "commit_date": "Fri Jun 2 21:34:40 2023 +0200", "commit_message": "Force full refresh after changing items-per-page", "files_name": ["interfaces/Glitter/templates/static/javascripts/glitter.history.js", "interfaces/Glitter/templates/static/javascripts/glitter.queue.js"]}, {"commit_id": "517d6e3e1a1e6cad93d565acb78386c1cd9925e7", "commit_date": "Fri Jun 2 21:48:44 2023 +0200", "commit_message": "Update tests for ppslots", "files_name": ["tests/data/tavern/api_history_empty.yaml", "tests/data/tavern/api_history_format.yaml"]}, {"commit_id": "71778656da163271b3daac9bdc9a79cf3e67c4a3", "commit_date": "Fri Jun 2 22:05:30 2023 +0200", "commit_message": "Correct reference to removed_from_queue in Direct Unpacker", "files_name": ["sabnzbd/directunpacker.py"]}, {"commit_id": "decfb2c1685ef073e5609b435b70a64f738aaaaf", "commit_date": "Fri Jun 2 22:49:13 2023 +0200", "commit_message": "Update dependency cryptography to v41 [SECURITY] (#2583)", "files_name": ["builder/osx/requirements.txt", "requirements.txt"]}, {"commit_id": "07283ba9ab245ceedeadacc56f93edf277a6e0ab", "commit_date": "Sat Jun 3 14:45:41 2023 +0000", "commit_message": "Fix sorting lowercasing (#2584)", "files_name": ["sabnzbd/sorting.py", "tests/test_sorting.py"]}, {"commit_id": "71e203f19c8ce3e1e523ac36704d805251313119", "commit_date": "Mon Jun 5 01:50:55 2023 +0000", "commit_message": "Update all dependencies", "files_name": ["builder/osx/requirements.txt", "builder/requirements.txt", "requirements.txt"]}, {"commit_id": "b4c3a4b19f9ba7951995083c076cd18b5aca29e5", "commit_date": "Mon Jun 5 15:43:01 2023 +0200", "commit_message": "Only initialize DirScanner Lock after starting event loop", "files_name": ["sabnzbd/dirscanner.py", "tests/test_dirscanner.py"]}, {"commit_id": "a179f2a895259e49f3679405ad59cac06e0bf2d9", "commit_date": "Tue Jun 6 14:49:12 2023 +0100", "commit_message": "Write articles to correct offsets and use sparse files (#2574)", "files_name": ["requirements.txt", "sabnzbd/assembler.py", "sabnzbd/constants.py", "sabnzbd/decoder.py", "sabnzbd/nzbstuff.py"]}, {"commit_id": "ee4fdb95636bd2043cd4e3d282762b04d9979873", "commit_date": "Fri Jun 2 22:33:18 2023 +0200", "commit_message": "Remove useless AMBI_LOCALHOST", "files_name": ["SABnzbd.py", "sabnzbd/__init__.py", "sabnzbd/interface.py"]}, {"commit_id": "bf1080ac5adc888cbe331330930c33bbb9ff8373", "commit_date": "Tue Jun 6 13:52:44 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/SABnzbd.pot", "po/main/cs.po", "po/main/da.po", "po/main/de.po", "po/main/es.po", "po/main/fi.po", "po/main/fr.po", "po/main/he.po", "po/main/nb.po", "po/main/nl.po", "po/main/pl.po", "po/main/pt_BR.po", "po/main/ro.po", "po/main/ru.po", "po/main/sr.po", "po/main/sv.po", "po/main/zh_CN.po"]}, {"commit_id": "1ee1ef836a73eb269493f3507cffa91b68e5d900", "commit_date": "Tue Jun 6 16:10:23 2023 +0200", "commit_message": "Simplify get_server_addrinfo to just allow enabling or disabling IPv6", "files_name": ["sabnzbd/__init__.py", "sabnzbd/cfg.py", "sabnzbd/downloader.py", "sabnzbd/misc.py"]}, {"commit_id": "0390dc14c5fd7a84dd6d23424f6754182ce8c5bd", "commit_date": "Tue Jun 6 16:32:49 2023 +0200", "commit_message": "Remove test_ipv6", "files_name": ["sabnzbd/downloader.py", "sabnzbd/misc.py"]}, {"commit_id": "9aacf4c780d15fbfac6407cb0ac4cb1e8b2cdc87", "commit_date": "Tue Jun 6 16:50:00 2023 +0200", "commit_message": "Remove load_balancing option", "files_name": ["interfaces/Config/templates/config_switches.tmpl", "sabnzbd/cfg.py", "sabnzbd/downloader.py", "sabnzbd/interface.py", "sabnzbd/skintext.py"]}, {"commit_id": "05a68a7506f1408524eb12e3c2d69c1ab4c8e9dd", "commit_date": "Tue Jun 6 14:50:57 2023 +0000", "commit_message": "Update translatable texts [skip ci]", "files_name": ["po/main/SABnzbd.pot", "po/main/cs.po", "po/main/da.po", "po/main/de.po", "po/main/es.po", "po/main/fi.po", "po/main/fr.po", "po/main/he.po", "po/main/nb.po", "po/main/nl.po", "po/main/pl.po", "po/main/pt_BR.po", "po/main/ro.po", "po/main/ru.po", "po/main/sr.po", "po/main/sv.po", "po/main/zh_CN.po"]}, {"commit_id": "d19d3c382c09b76cf7d9c98c3ed15605eaa4f637", "commit_date": "Tue Jun 6 16:53:41 2023 +0200", "commit_message": "Move ipv6_servers to be a Special bool", "files_name": ["sabnzbd/interface.py"]}, {"commit_id": "3ff1d4b68c472bd7d744a821eb3af739de089dde", "commit_date": "Tue Jun 6 17:10:01 2023 +0200", "commit_message": "Move DirScanner Lock creation", "files_name": ["sabnzbd/dirscanner.py", "tests/test_dirscanner.py"]}, {"commit_id": "5570b804ba7ff54310158086bd552e740c969417", "commit_date": "Wed May 31 22:06:26 2023 +0200", "commit_message": "Correct parameter in release script to merge PR of update", "files_name": ["builder/release.py"]}, {"commit_id": "a2bbccd3eaf94276b3ec0908d1f62df466faad87", "commit_date": "Fri Jun 9 05:51:24 2023 -0500", "commit_message": "Unable to modify Sorters (#2587)", "files_name": ["interfaces/Config/templates/config_sorting.tmpl"]}, {"commit_id": "560766dfa047d0cbd7b4e9aaa4021852ab1b51e8", "commit_date": "Mon Jun 12 00:37:19 2023 +0000", "commit_message": "Update all dependencies", "files_name": ["builder/requirements.txt", "requirements.txt"]}, {"commit_id": "96f0743ce5b5cf2faa8ec4b40c7c6cab512199a4", "commit_date": "Tue Jun 13 14:00:25 2023 +0200", "commit_message": "Update release script to post directly to r/usenet and include link", "files_name": ["builder/release.py"]}, {"commit_id": "b9e014b8bd1377f3430b29c7de1ed7b408c7c1ba", "commit_date": "Wed Jun 14 12:13:03 2023 +0200", "commit_message": "No longer * import AppKit and Foundation", "files_name": ["sabnzbd/osxmenu.py"]}, {"commit_id": "cb4215910cd98ea46f4278a7d06faf4a001dd24c", "commit_date": "Fri Jun 16 11:48:52 2023 +0200", "commit_message": "Link to Downloads page was not included in Reddit post", "files_name": ["builder/release.py"]}, {"commit_id": "e768ceea96f6594b95e615465f3256e5a54b0125", "commit_date": "Fri Jun 16 15:48:54 2023 +0200", "commit_message": "Lock add/remove_socket in Downloader", "files_name": ["sabnzbd/downloader.py"]}, {"commit_id": "3331738f2bf1dc29338e52d79ea75bf21ab1ec6c", "commit_date": "Fri Jun 16 19:25:09 2023 +0200", "commit_message": "Add versions to appdata (#2595)", "files_name": ["linux/org.sabnzbd.sabnzbd.appdata.xml"]}, {"commit_id": "9ff0bab8732b6b0cb81060dbea29762239774d59", "commit_date": "Sun Jun 18 22:17:36 2023 +0200", "commit_message": "Additional logging to debug Direct Unpack", "files_name": ["sabnzbd/directunpacker.py"]}, {"commit_id": "8cb4011a448f4c238bef166ecdadd391695a3a90", "commit_date": "Mon Jun 19 10:50:18 2023 +0200", "commit_message": "Check if version is present appdata before releasing", "files_name": ["builder/constants.py", "builder/release.py", "sabnzbd/version.py"]}, {"commit_id": "488719de1e627567514beb0e0db11f66b087dad4", "commit_date": "Sun Jun 18 22:32:13 2023 +0200", "commit_message": "Convert various `re` statements to walrus operator", "files_name": ["sabnzbd/bpsmeter.py", "sabnzbd/directunpacker.py", "sabnzbd/emailer.py", "sabnzbd/misc.py", "sabnzbd/newsunpack.py", "sabnzbd/par2file.py", "sabnzbd/rss.py", "tools/extract_pot.py", "tools/make_mo.py"]}, {"commit_id": "8d6cc8c86a41138b0403dbfa26484c16db7e7ed5", "commit_date": "Fri Jun 23 07:06:57 2023 +0000", "commit_message": "Fix sorting for #2551 (#2598)", "files_name": ["sabnzbd/sorting.py", "tests/data/sorting/Its_all_about_parts_2023_576i_mono-SABnzbd/mymovie part 6.disc", "tests/data/sorting/Its_all_about_parts_2023_576i_mono-SABnzbd/mymovie part 7.disc", "tests/data/sorting/Its_all_about_parts_2023_576i_mono-SABnzbd/mymovie part 8.disc", "tests/data/sorting/Long_live_CDs_2023_576i_mono-SABnzbd/cd1.disc", "tests/data/sorting/Long_live_CDs_2023_576i_mono-SABnzbd/cd2.disc", "tests/data/sorting/Long_live_CDs_2023_576i_mono-SABnzbd/cd3.disc", "tests/data/sorting/SINGLE_sort_s23e06_480i-SABnzbd/abc.mov", "tests/data/sorting/sea_sort_s01_4k_uhd-SABnzbd/S01E01.data", "tests/data/sorting/sea_sort_s01_4k_uhd-SABnzbd/S01E02.data", "tests/data/sorting/sea_sort_s01_4k_uhd-SABnzbd/S01E03.data", "tests/data/sorting/sea_sort_s01_4k_uhd-SABnzbd/S01E05.data", "tests/data/sorting/sea_sort_s02_4k_uhd-SABnzbd/E04.data", "tests/data/sorting/sea_sort_s02_4k_uhd-SABnzbd/E06.data", "tests/data/sorting/sea_sort_s02_4k_uhd-SABnzbd/E07.data", "tests/data/sorting/sea_sort_s02_4k_uhd-SABnzbd/E09.data", "tests/data/sorting/single-ep_sort_s06e66_4k_uhd-SABnzbd/yay.avi", "tests/data/sorting/single-ep_sort_s06e66_4k_uhd-SABnzbd/yay.srt", "tests/test_functional_sorting.py", "tests/test_postproc.py", "tests/testhelper.py"]}, {"commit_id": "2ce56c85813982c8eec9cddc9bdf6e2765c94346", "commit_date": "Fri Jun 23 21:45:36 2023 +0200", "commit_message": "Add newline after link to Downloads page in Reddit post", "files_name": ["builder/release.py"]}, {"commit_id": "e13968eec1680377740634538933b43236b18624", "commit_date": "Mon Jun 26 00:27:26 2023 +0000", "commit_message": "Update all dependencies", "files_name": ["builder/release-requirements.txt", "builder/requirements.txt", "requirements.txt"]}, {"commit_id": "552ca12bc1caf68ffe72955e800fb7f4abde3956", "commit_date": "Mon Jun 26 04:56:10 2023 +0000", "commit_message": "Update dependency jaraco.functools to v3.8.0", "files_name": ["requirements.txt"]}, {"commit_id": "dbf4073da4b1d2cd9d7ac44d13bc27bc1a6c6eb2", "commit_date": "Tue Jun 27 14:14:11 2023 +0100", "commit_message": "Fix uu decoding when collapsing of lines starting with a doubled period is required (#2605)", "files_name": ["sabnzbd/decoder.py", "tests/test_decoder.py"]}], "parents": [{"commit_id_before": "5b9fc86319a013fffaf01661e94f8b0414b50be7", "url_before": "https://api.github.com/repos/sabnzbd/sabnzbd/commits/5b9fc86319a013fffaf01661e94f8b0414b50be7", "html_url_before": "https://github.com/sabnzbd/sabnzbd/commit/5b9fc86319a013fffaf01661e94f8b0414b50be7"}], "details": [{"raw_url": "https://github.com/sabnzbd/sabnzbd/raw/e3a722664819d1c7c8fab97144cc299b1c18b429/sabnzbd%2Fnotifier.py", "code": "#!/usr/bin/python3 -OO\n# Copyright 2007-2023 The SABnzbd-Team <team@sabnzbd.org>\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n\n\"\"\"\nsabnzbd.notifier - Send notifications to any notification services\n\"\"\"\n\n\nimport os.path\nimport logging\nimport urllib.request\nimport urllib.parse\nimport http.client\nimport json\nfrom threading import Thread\n\nimport sabnzbd\nimport sabnzbd.cfg\nfrom sabnzbd.encoding import utob\nfrom sabnzbd.filesystem import make_script_path\nfrom sabnzbd.misc import build_and_run_command\nfrom sabnzbd.newsunpack import create_env\n\nif sabnzbd.FOUNDATION:\n    import Foundation\n    import objc\n\ntry:\n    import notify2\n\n    _HAVE_NTFOSD = True\n\n    # Check for working version, not all pynotify are the same\n    # Without DISPLAY, notify2 cannot autolaunch a dbus-daemon\n    if not hasattr(notify2, \"init\") or \"DISPLAY\" not in os.environ:\n        _HAVE_NTFOSD = False\nexcept:\n    _HAVE_NTFOSD = False\n\n\n##############################################################################\n# Define translatable message table\n##############################################################################\nTT = lambda x: x\nNOTIFICATION = {\n    \"startup\": TT(\"Startup/Shutdown\"),  #: Notification\n    \"pause_resume\": TT(\"Pause\") + \"/\" + TT(\"Resume\"),  #: Notification\n    \"download\": TT(\"Added NZB\"),  #: Notification\n    \"pp\": TT(\"Post-processing started\"),  # : Notification\n    \"complete\": TT(\"Job finished\"),  #: Notification\n    \"failed\": TT(\"Job failed\"),  #: Notification\n    \"warning\": TT(\"Warning\"),  #: Notification\n    \"error\": TT(\"Error\"),  #: Notification\n    \"disk_full\": TT(\"Disk full\"),  #: Notification\n    \"queue_done\": TT(\"Queue finished\"),  #: Notification\n    \"new_login\": TT(\"User logged in\"),  #: Notification\n    \"other\": TT(\"Other Messages\"),  #: Notification\n}\n\n\ndef get_icon():\n    icon = os.path.join(sabnzbd.DIR_PROG, \"icons\", \"sabnzbd.ico\")\n    with open(icon, \"rb\") as fp:\n        return fp.read()\n\n\ndef have_ntfosd():\n    \"\"\"Return if any PyNotify (notify2) support is present\"\"\"\n    return bool(_HAVE_NTFOSD)\n\n\ndef check_classes(gtype, section):\n    \"\"\"Check if `gtype` is enabled in `section`\"\"\"\n    try:\n        return sabnzbd.config.get_config(section, \"%s_prio_%s\" % (section, gtype))() > 0\n    except TypeError:\n        logging.debug(\"Incorrect Notify option %s:%s_prio_%s\", section, section, gtype)\n        return False\n\n\ndef get_prio(gtype, section):\n    \"\"\"Check prio of `gtype` in `section`\"\"\"\n    try:\n        return sabnzbd.config.get_config(section, \"%s_prio_%s\" % (section, gtype))()\n    except TypeError:\n        logging.debug(\"Incorrect Notify option %s:%s_prio_%s\", section, section, gtype)\n        return -1000\n\n\ndef check_cat(section, job_cat, keyword=None):\n    \"\"\"Check if `job_cat` is enabled in `section`.\n    * = All, if no other categories selected.\n    \"\"\"\n    if not job_cat:\n        return True\n    try:\n        if not keyword:\n            keyword = section\n        section_cats = sabnzbd.config.get_config(section, \"%s_cats\" % keyword)()\n        return [\"*\"] == section_cats or job_cat in section_cats\n    except TypeError:\n        logging.debug(\"Incorrect Notify option %s:%s_cats\", section, section)\n        return True\n\n\ndef send_notification(title, msg, gtype, job_cat=None):\n    \"\"\"Send Notification message\"\"\"\n    logging.info(\"Sending notification: %s - %s (type=%s, job_cat=%s)\", title, msg, gtype, job_cat)\n    # Notification Center\n    if sabnzbd.MACOS and sabnzbd.cfg.ncenter_enable():\n        if check_classes(gtype, \"ncenter\") and check_cat(\"ncenter\", job_cat):\n            send_notification_center(title, msg, gtype)\n\n    # Windows\n    if sabnzbd.WIN32 and sabnzbd.cfg.acenter_enable():\n        if check_classes(gtype, \"acenter\") and check_cat(\"acenter\", job_cat):\n            send_windows(title, msg, gtype)\n\n    # Prowl\n    if sabnzbd.cfg.prowl_enable() and check_cat(\"prowl\", job_cat):\n        if sabnzbd.cfg.prowl_apikey():\n            Thread(target=send_prowl, args=(title, msg, gtype)).start()\n\n    # Pushover\n    if sabnzbd.cfg.pushover_enable() and check_cat(\"pushover\", job_cat):\n        if sabnzbd.cfg.pushover_token():\n            Thread(target=send_pushover, args=(title, msg, gtype)).start()\n\n    # Pushbullet\n    if sabnzbd.cfg.pushbullet_enable() and check_cat(\"pushbullet\", job_cat):\n        if sabnzbd.cfg.pushbullet_apikey() and check_classes(gtype, \"pushbullet\"):\n            Thread(target=send_pushbullet, args=(title, msg, gtype)).start()\n\n    # Notification script.\n    if sabnzbd.cfg.nscript_enable() and check_cat(\"nscript\", job_cat):\n        if sabnzbd.cfg.nscript_script():\n            Thread(target=send_nscript, args=(title, msg, gtype)).start()\n\n    # NTFOSD\n    if have_ntfosd() and sabnzbd.cfg.ntfosd_enable():\n        if check_classes(gtype, \"ntfosd\") and check_cat(\"ntfosd\", job_cat):\n            send_notify_osd(title, msg)\n\n\n##############################################################################\n# Ubuntu NotifyOSD Support\n##############################################################################\n_NTFOSD = False\n\n\ndef send_notify_osd(title, message):\n    \"\"\"Send a message to NotifyOSD\"\"\"\n    global _NTFOSD\n    if not _HAVE_NTFOSD:\n        return T(\"Not available\")  # : Function is not available on this OS\n\n    error = \"NotifyOSD not working\"\n    icon = os.path.join(sabnzbd.DIR_PROG, \"interfaces/Config/templates/staticcfg/images/logo-arrow.svg\")\n\n    # Wrap notify2.init to prevent blocking in dbus\n    # when there's no active notification daemon\n    try:\n        _NTFOSD = _NTFOSD or notify2.init(\"SABnzbd\")\n    except:\n        _NTFOSD = False\n\n    if _NTFOSD:\n        logging.info(\"Send to NotifyOSD: %s / %s\", title, message)\n        try:\n            note = notify2.Notification(title, message, icon)\n            note.show()\n        except:\n            # Apparently not implemented on this system\n            logging.info(error)\n            return error\n        return None\n    else:\n        return error\n\n\ndef send_notification_center(title, msg, gtype):\n    \"\"\"Send message to macOS Notification Center\"\"\"\n    try:\n        NSUserNotification = objc.lookUpClass(\"NSUserNotification\")\n        NSUserNotificationCenter = objc.lookUpClass(\"NSUserNotificationCenter\")\n        notification = NSUserNotification.alloc().init()\n        notification.setTitle_(title)\n        notification.setSubtitle_(T(NOTIFICATION.get(gtype, \"other\")))\n        notification.setInformativeText_(msg)\n        notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\n        notification.setDeliveryDate_(Foundation.NSDate.dateWithTimeInterval_sinceDate_(0, Foundation.NSDate.date()))\n        NSUserNotificationCenter.defaultUserNotificationCenter().scheduleNotification_(notification)\n    except:\n        logging.info(T(\"Failed to send macOS notification\"))\n        logging.debug(\"Traceback: \", exc_info=True)\n        return T(\"Failed to send macOS notification\")\n\n\ndef send_prowl(title, msg, gtype, force=False, test=None):\n    \"\"\"Send message to Prowl\"\"\"\n\n    if test:\n        apikey = test.get(\"prowl_apikey\")\n    else:\n        apikey = sabnzbd.cfg.prowl_apikey()\n    if not apikey:\n        return T(\"Cannot send, missing required data\")\n\n    title = T(NOTIFICATION.get(gtype, \"other\"))\n    title = urllib.parse.quote(utob(title))\n    msg = urllib.parse.quote(utob(msg))\n    prio = get_prio(gtype, \"prowl\")\n\n    if force:\n        prio = 0\n\n    if prio > -3:\n        url = (\n            \"https://api.prowlapp.com/publicapi/add?apikey=%s&application=SABnzbd\"\n            \"&event=%s&description=%s&priority=%d\" % (apikey, title, msg, prio)\n        )\n        try:\n            urllib.request.urlopen(url)\n            return \"\"\n        except:\n            logging.warning(T(\"Failed to send Prowl message\"))\n            logging.info(\"Traceback: \", exc_info=True)\n            return T(\"Failed to send Prowl message\")\n    return \"\"\n\n\ndef send_pushover(title, msg, gtype, force=False, test=None):\n    \"\"\"Send message to pushover\"\"\"\n\n    if test:\n        apikey = test.get(\"pushover_token\")\n        userkey = test.get(\"pushover_userkey\")\n        device = test.get(\"pushover_device\")\n    else:\n        apikey = sabnzbd.cfg.pushover_token()\n        userkey = sabnzbd.cfg.pushover_userkey()\n        device = sabnzbd.cfg.pushover_device()\n        emergency_retry = sabnzbd.cfg.pushover_emergency_retry()\n        emergency_expire = sabnzbd.cfg.pushover_emergency_expire()\n    if not apikey or not userkey:\n        return T(\"Cannot send, missing required data\")\n\n    title = T(NOTIFICATION.get(gtype, \"other\"))\n    prio = get_prio(gtype, \"pushover\")\n\n    if force:\n        prio = 1\n\n    if prio == 2:\n        body = {\n            \"token\": apikey,\n            \"user\": userkey,\n            \"device\": device,\n            \"title\": title,\n            \"message\": msg,\n            \"priority\": prio,\n            \"retry\": emergency_retry,\n            \"expire\": emergency_expire,\n        }\n        return do_send_pushover(body)\n    if -3 < prio < 2:\n        body = {\n            \"token\": apikey,\n            \"user\": userkey,\n            \"device\": device,\n            \"title\": title,\n            \"message\": msg,\n            \"priority\": prio,\n        }\n        return do_send_pushover(body)\n\n\ndef do_send_pushover(body):\n    try:\n        conn = http.client.HTTPSConnection(\"api.pushover.net:443\")\n        conn.request(\n            \"POST\",\n            \"/1/messages.json\",\n            urllib.parse.urlencode(body),\n            {\"Content-type\": \"application/x-www-form-urlencoded\"},\n        )\n        res = conn.getresponse()\n        if res.status != 200:\n            logging.error(T(\"Bad response from Pushover (%s): %s\"), res.status, res.read())\n            return T(\"Failed to send pushover message\")\n        else:\n            return \"\"\n    except:\n        logging.warning(T(\"Failed to send pushover message\"))\n        logging.info(\"Traceback: \", exc_info=True)\n        return T(\"Failed to send pushover message\")\n\n\ndef send_pushbullet(title, msg, gtype, force=False, test=None):\n    \"\"\"Send message to Pushbullet\"\"\"\n\n    if test:\n        apikey = test.get(\"pushbullet_apikey\")\n        device = test.get(\"pushbullet_device\")\n    else:\n        apikey = sabnzbd.cfg.pushbullet_apikey()\n        device = sabnzbd.cfg.pushbullet_device()\n    if not apikey:\n        return T(\"Cannot send, missing required data\")\n\n    title = \"SABnzbd: \" + T(NOTIFICATION.get(gtype, \"other\"))\n\n    try:\n        conn = http.client.HTTPSConnection(\"api.pushbullet.com:443\")\n        conn.request(\n            \"POST\",\n            \"/v2/pushes\",\n            json.dumps({\"type\": \"note\", \"device\": device, \"title\": title, \"body\": msg}),\n            headers={\"Authorization\": \"Bearer \" + apikey, \"Content-type\": \"application/json\"},\n        )\n        res = conn.getresponse()\n        if res.status != 200:\n            logging.error(T(\"Bad response from Pushbullet (%s): %s\"), res.status, res.read())\n        else:\n            logging.info(\"Successfully sent to Pushbullet\")\n\n    except:\n        logging.warning(T(\"Failed to send pushbullet message\"))\n        logging.info(\"Traceback: \", exc_info=True)\n        return T(\"Failed to send pushbullet message\")\n    return \"\"\n\n\ndef send_nscript(title, msg, gtype, force=False, test=None):\n    \"\"\"Run user's notification script\"\"\"\n    if test:\n        script = test.get(\"nscript_script\")\n        env = {\"notification_parameters\": test.get(\"nscript_parameters\")}\n    else:\n        script = sabnzbd.cfg.nscript_script()\n        env = {\"notification_parameters\": sabnzbd.cfg.nscript_parameters()}\n\n    if not script:\n        return T(\"Cannot send, missing required data\")\n    title = \"SABnzbd: \" + T(NOTIFICATION.get(gtype, \"other\"))\n\n    if force or check_classes(gtype, \"nscript\"):\n        script_path = make_script_path(script)\n        if script_path:\n            ret = -1\n            output = None\n            try:\n                p = build_and_run_command([script_path, gtype, title, msg], env=create_env(extra_env_fields=env))\n                output = p.stdout.read()\n                ret = p.wait()\n            except:\n                logging.info(\"Failed script %s, Traceback: \", script, exc_info=True)\n\n            if ret:\n                logging.error(T('Script returned exit code %s and output \"%s\"'), ret, output)\n                return T('Script returned exit code %s and output \"%s\"') % (ret, output)\n            else:\n                logging.info(\"Successfully executed notification script %s\", script_path)\n        else:\n            return T('Notification script \"%s\" does not exist') % script_path\n    return \"\"\n\n\ndef send_windows(title, msg, gtype):\n    if sabnzbd.WINTRAY and not sabnzbd.WINTRAY.terminate:\n        try:\n            sabnzbd.WINTRAY.sendnotification(title, msg)\n        except:\n            logging.info(T(\"Failed to send Windows notification\"))\n            logging.debug(\"Traceback: \", exc_info=True)\n            return T(\"Failed to send Windows notification\")\n    return None\n", "code_before": "#!/usr/bin/python3 -OO\n# Copyright 2007-2023 The SABnzbd-Team <team@sabnzbd.org>\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n\n\"\"\"\nsabnzbd.notifier - Send notifications to any notification services\n\"\"\"\n\n\nimport os.path\nimport logging\nimport urllib.request\nimport urllib.parse\nimport http.client\nimport json\nfrom threading import Thread\n\nimport sabnzbd\nimport sabnzbd.cfg\nfrom sabnzbd.encoding import utob\nfrom sabnzbd.filesystem import make_script_path\nfrom sabnzbd.misc import build_and_run_command\nfrom sabnzbd.newsunpack import create_env\n\nif sabnzbd.FOUNDATION:\n    import Foundation\n    import objc\n\ntry:\n    import notify2\n\n    _HAVE_NTFOSD = True\n\n    # Check for working version, not all pynotify are the same\n    # Without DISPLAY, notify2 cannot autolaunch a dbus-daemon\n    if not hasattr(notify2, \"init\") or \"DISPLAY\" not in os.environ:\n        _HAVE_NTFOSD = False\nexcept:\n    _HAVE_NTFOSD = False\n\n\n##############################################################################\n# Define translatable message table\n##############################################################################\nTT = lambda x: x\nNOTIFICATION = {\n    \"startup\": TT(\"Startup/Shutdown\"),  #: Notification\n    \"pause_resume\": TT(\"Pause\") + \"/\" + TT(\"Resume\"),  #: Notification\n    \"download\": TT(\"Added NZB\"),  #: Notification\n    \"pp\": TT(\"Post-processing started\"),  # : Notification\n    \"complete\": TT(\"Job finished\"),  #: Notification\n    \"failed\": TT(\"Job failed\"),  #: Notification\n    \"warning\": TT(\"Warning\"),  #: Notification\n    \"error\": TT(\"Error\"),  #: Notification\n    \"disk_full\": TT(\"Disk full\"),  #: Notification\n    \"queue_done\": TT(\"Queue finished\"),  #: Notification\n    \"new_login\": TT(\"User logged in\"),  #: Notification\n    \"other\": TT(\"Other Messages\"),  #: Notification\n}\n\n\ndef get_icon():\n    icon = os.path.join(sabnzbd.DIR_PROG, \"icons\", \"sabnzbd.ico\")\n    with open(icon, \"rb\") as fp:\n        return fp.read()\n\n\ndef have_ntfosd():\n    \"\"\"Return if any PyNotify (notify2) support is present\"\"\"\n    return bool(_HAVE_NTFOSD)\n\n\ndef check_classes(gtype, section):\n    \"\"\"Check if `gtype` is enabled in `section`\"\"\"\n    try:\n        return sabnzbd.config.get_config(section, \"%s_prio_%s\" % (section, gtype))() > 0\n    except TypeError:\n        logging.debug(\"Incorrect Notify option %s:%s_prio_%s\", section, section, gtype)\n        return False\n\n\ndef get_prio(gtype, section):\n    \"\"\"Check prio of `gtype` in `section`\"\"\"\n    try:\n        return sabnzbd.config.get_config(section, \"%s_prio_%s\" % (section, gtype))()\n    except TypeError:\n        logging.debug(\"Incorrect Notify option %s:%s_prio_%s\", section, section, gtype)\n        return -1000\n\n\ndef check_cat(section, job_cat, keyword=None):\n    \"\"\"Check if `job_cat` is enabled in `section`.\n    * = All, if no other categories selected.\n    \"\"\"\n    if not job_cat:\n        return True\n    try:\n        if not keyword:\n            keyword = section\n        section_cats = sabnzbd.config.get_config(section, \"%s_cats\" % keyword)()\n        return [\"*\"] == section_cats or job_cat in section_cats\n    except TypeError:\n        logging.debug(\"Incorrect Notify option %s:%s_cats\", section, section)\n        return True\n\n\ndef send_notification(title, msg, gtype, job_cat=None):\n    \"\"\"Send Notification message\"\"\"\n    logging.info(\"Sending notification: %s - %s (type=%s, job_cat=%s)\", title, msg, gtype, job_cat)\n    # Notification Center\n    if sabnzbd.MACOS and sabnzbd.cfg.ncenter_enable():\n        if check_classes(gtype, \"ncenter\") and check_cat(\"ncenter\", job_cat):\n            send_notification_center(title, msg, gtype)\n\n    # Windows\n    if sabnzbd.WIN32 and sabnzbd.cfg.acenter_enable():\n        if check_classes(gtype, \"acenter\") and check_cat(\"acenter\", job_cat):\n            send_windows(title, msg, gtype)\n\n    # Prowl\n    if sabnzbd.cfg.prowl_enable() and check_cat(\"prowl\", job_cat):\n        if sabnzbd.cfg.prowl_apikey():\n            Thread(target=send_prowl, args=(title, msg, gtype)).start()\n\n    # Pushover\n    if sabnzbd.cfg.pushover_enable() and check_cat(\"pushover\", job_cat):\n        if sabnzbd.cfg.pushover_token():\n            Thread(target=send_pushover, args=(title, msg, gtype)).start()\n\n    # Pushbullet\n    if sabnzbd.cfg.pushbullet_enable() and check_cat(\"pushbullet\", job_cat):\n        if sabnzbd.cfg.pushbullet_apikey() and check_classes(gtype, \"pushbullet\"):\n            Thread(target=send_pushbullet, args=(title, msg, gtype)).start()\n\n    # Notification script.\n    if sabnzbd.cfg.nscript_enable() and check_cat(\"nscript\", job_cat):\n        if sabnzbd.cfg.nscript_script():\n            Thread(target=send_nscript, args=(title, msg, gtype)).start()\n\n    # NTFOSD\n    if have_ntfosd() and sabnzbd.cfg.ntfosd_enable():\n        if check_classes(gtype, \"ntfosd\") and check_cat(\"ntfosd\", job_cat):\n            send_notify_osd(title, msg)\n\n\n##############################################################################\n# Ubuntu NotifyOSD Support\n##############################################################################\n_NTFOSD = False\n\n\ndef send_notify_osd(title, message):\n    \"\"\"Send a message to NotifyOSD\"\"\"\n    global _NTFOSD\n    if not _HAVE_NTFOSD:\n        return T(\"Not available\")  # : Function is not available on this OS\n\n    error = \"NotifyOSD not working\"\n    icon = os.path.join(sabnzbd.DIR_PROG, \"interfaces/Config/templates/staticcfg/images/logo-arrow.svg\")\n\n    # Wrap notify2.init to prevent blocking in dbus\n    # when there's no active notification daemon\n    try:\n        _NTFOSD = _NTFOSD or notify2.init(\"SABnzbd\")\n    except:\n        _NTFOSD = False\n\n    if _NTFOSD:\n        logging.info(\"Send to NotifyOSD: %s / %s\", title, message)\n        try:\n            note = notify2.Notification(title, message, icon)\n            note.show()\n        except:\n            # Apparently not implemented on this system\n            logging.info(error)\n            return error\n        return None\n    else:\n        return error\n\n\ndef send_notification_center(title, msg, gtype):\n    \"\"\"Send message to macOS Notification Center\"\"\"\n    try:\n        NSUserNotification = objc.lookUpClass(\"NSUserNotification\")\n        NSUserNotificationCenter = objc.lookUpClass(\"NSUserNotificationCenter\")\n        notification = NSUserNotification.alloc().init()\n        notification.setTitle_(title)\n        notification.setSubtitle_(T(NOTIFICATION.get(gtype, \"other\")))\n        notification.setInformativeText_(msg)\n        notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\n        notification.setDeliveryDate_(Foundation.NSDate.dateWithTimeInterval_sinceDate_(0, Foundation.NSDate.date()))\n        NSUserNotificationCenter.defaultUserNotificationCenter().scheduleNotification_(notification)\n    except:\n        logging.info(T(\"Failed to send macOS notification\"))\n        logging.debug(\"Traceback: \", exc_info=True)\n        return T(\"Failed to send macOS notification\")\n\n\ndef send_prowl(title, msg, gtype, force=False, test=None):\n    \"\"\"Send message to Prowl\"\"\"\n\n    if test:\n        apikey = test.get(\"prowl_apikey\")\n    else:\n        apikey = sabnzbd.cfg.prowl_apikey()\n    if not apikey:\n        return T(\"Cannot send, missing required data\")\n\n    title = T(NOTIFICATION.get(gtype, \"other\"))\n    title = urllib.parse.quote(utob(title))\n    msg = urllib.parse.quote(utob(msg))\n    prio = get_prio(gtype, \"prowl\")\n\n    if force:\n        prio = 0\n\n    if prio > -3:\n        url = (\n            \"https://api.prowlapp.com/publicapi/add?apikey=%s&application=SABnzbd\"\n            \"&event=%s&description=%s&priority=%d\" % (apikey, title, msg, prio)\n        )\n        try:\n            urllib.request.urlopen(url)\n            return \"\"\n        except:\n            logging.warning(T(\"Failed to send Prowl message\"))\n            logging.info(\"Traceback: \", exc_info=True)\n            return T(\"Failed to send Prowl message\")\n    return \"\"\n\n\ndef send_pushover(title, msg, gtype, force=False, test=None):\n    \"\"\"Send message to pushover\"\"\"\n\n    if test:\n        apikey = test.get(\"pushover_token\")\n        userkey = test.get(\"pushover_userkey\")\n        device = test.get(\"pushover_device\")\n    else:\n        apikey = sabnzbd.cfg.pushover_token()\n        userkey = sabnzbd.cfg.pushover_userkey()\n        device = sabnzbd.cfg.pushover_device()\n        emergency_retry = sabnzbd.cfg.pushover_emergency_retry()\n        emergency_expire = sabnzbd.cfg.pushover_emergency_expire()\n    if not apikey or not userkey:\n        return T(\"Cannot send, missing required data\")\n\n    title = T(NOTIFICATION.get(gtype, \"other\"))\n    prio = get_prio(gtype, \"pushover\")\n\n    if force:\n        prio = 1\n\n    if prio == 2:\n        body = {\n            \"token\": apikey,\n            \"user\": userkey,\n            \"device\": device,\n            \"title\": title,\n            \"message\": msg,\n            \"priority\": prio,\n            \"retry\": emergency_retry,\n            \"expire\": emergency_expire,\n        }\n        return do_send_pushover(body)\n    if -3 < prio < 2:\n        body = {\n            \"token\": apikey,\n            \"user\": userkey,\n            \"device\": device,\n            \"title\": title,\n            \"message\": msg,\n            \"priority\": prio,\n        }\n        return do_send_pushover(body)\n\n\ndef do_send_pushover(body):\n    try:\n        conn = http.client.HTTPSConnection(\"api.pushover.net:443\")\n        conn.request(\n            \"POST\",\n            \"/1/messages.json\",\n            urllib.parse.urlencode(body),\n            {\"Content-type\": \"application/x-www-form-urlencoded\"},\n        )\n        res = conn.getresponse()\n        if res.status != 200:\n            logging.error(T(\"Bad response from Pushover (%s): %s\"), res.status, res.read())\n            return T(\"Failed to send pushover message\")\n        else:\n            return \"\"\n    except:\n        logging.warning(T(\"Failed to send pushover message\"))\n        logging.info(\"Traceback: \", exc_info=True)\n        return T(\"Failed to send pushover message\")\n\n\ndef send_pushbullet(title, msg, gtype, force=False, test=None):\n    \"\"\"Send message to Pushbullet\"\"\"\n\n    if test:\n        apikey = test.get(\"pushbullet_apikey\")\n        device = test.get(\"pushbullet_device\")\n    else:\n        apikey = sabnzbd.cfg.pushbullet_apikey()\n        device = sabnzbd.cfg.pushbullet_device()\n    if not apikey:\n        return T(\"Cannot send, missing required data\")\n\n    title = \"SABnzbd: \" + T(NOTIFICATION.get(gtype, \"other\"))\n\n    try:\n        conn = http.client.HTTPSConnection(\"api.pushbullet.com:443\")\n        conn.request(\n            \"POST\",\n            \"/v2/pushes\",\n            json.dumps({\"type\": \"note\", \"device\": device, \"title\": title, \"body\": msg}),\n            headers={\"Authorization\": \"Bearer \" + apikey, \"Content-type\": \"application/json\"},\n        )\n        res = conn.getresponse()\n        if res.status != 200:\n            logging.error(T(\"Bad response from Pushbullet (%s): %s\"), res.status, res.read())\n        else:\n            logging.info(\"Successfully sent to Pushbullet\")\n\n    except:\n        logging.warning(T(\"Failed to send pushbullet message\"))\n        logging.info(\"Traceback: \", exc_info=True)\n        return T(\"Failed to send pushbullet message\")\n    return \"\"\n\n\ndef send_nscript(title, msg, gtype, force=False, test=None):\n    \"\"\"Run user's notification script\"\"\"\n    if test:\n        script = test.get(\"nscript_script\")\n        nscript_parameters = test.get(\"nscript_parameters\")\n    else:\n        script = sabnzbd.cfg.nscript_script()\n        nscript_parameters = sabnzbd.cfg.nscript_parameters()\n    nscript_parameters = nscript_parameters.split()\n    if not script:\n        return T(\"Cannot send, missing required data\")\n    title = \"SABnzbd: \" + T(NOTIFICATION.get(gtype, \"other\"))\n\n    if force or check_classes(gtype, \"nscript\"):\n        script_path = make_script_path(script)\n        if script_path:\n            ret = -1\n            output = None\n            try:\n                p = build_and_run_command([script_path, gtype, title, msg] + nscript_parameters, env=create_env())\n                output = p.stdout.read()\n                ret = p.wait()\n            except:\n                logging.info(\"Failed script %s, Traceback: \", script, exc_info=True)\n\n            if ret:\n                logging.error(T('Script returned exit code %s and output \"%s\"'), ret, output)\n                return T('Script returned exit code %s and output \"%s\"') % (ret, output)\n            else:\n                logging.info(\"Successfully executed notification script %s\", script_path)\n        else:\n            return T('Notification script \"%s\" does not exist') % script_path\n    return \"\"\n\n\ndef send_windows(title, msg, gtype):\n    if sabnzbd.WINTRAY and not sabnzbd.WINTRAY.terminate:\n        try:\n            sabnzbd.WINTRAY.sendnotification(title, msg)\n        except:\n            logging.info(T(\"Failed to send Windows notification\"))\n            logging.debug(\"Traceback: \", exc_info=True)\n            return T(\"Failed to send Windows notification\")\n    return None\n", "patch": "@@ -350,11 +350,11 @@ def send_nscript(title, msg, gtype, force=False, test=None):\n     \"\"\"Run user's notification script\"\"\"\n     if test:\n         script = test.get(\"nscript_script\")\n-        nscript_parameters = test.get(\"nscript_parameters\")\n+        env = {\"notification_parameters\": test.get(\"nscript_parameters\")}\n     else:\n         script = sabnzbd.cfg.nscript_script()\n-        nscript_parameters = sabnzbd.cfg.nscript_parameters()\n-    nscript_parameters = nscript_parameters.split()\n+        env = {\"notification_parameters\": sabnzbd.cfg.nscript_parameters()}\n+\n     if not script:\n         return T(\"Cannot send, missing required data\")\n     title = \"SABnzbd: \" + T(NOTIFICATION.get(gtype, \"other\"))\n@@ -365,7 +365,7 @@ def send_nscript(title, msg, gtype, force=False, test=None):\n             ret = -1\n             output = None\n             try:\n-                p = build_and_run_command([script_path, gtype, title, msg] + nscript_parameters, env=create_env())\n+                p = build_and_run_command([script_path, gtype, title, msg], env=create_env(extra_env_fields=env))\n                 output = p.stdout.read()\n                 ret = p.wait()\n             except:", "file_path": "files/2023_6/729", "file_language": "py", "file_name": "sabnzbd/notifier.py", "outdated_file_modify": 1, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 1, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
