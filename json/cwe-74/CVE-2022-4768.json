{"index": 9821, "cve_id": "CVE-2022-4768", "cwe_id": ["CWE-74"], "cve_language": "Python", "cve_description": "A vulnerability was found in Dropbox merou. It has been classified as critical. Affected is the function add_public_key of the file grouper/public_key.py of the component SSH Public Key Handler. The manipulation of the argument public_key_str leads to injection. It is possible to launch the attack remotely. The name of the patch is d93087973afa26bc0a2d0a5eb5c0fde748bdd107. It is recommended to apply a patch to fix this issue. VDB-216906 is the identifier assigned to this vulnerability.", "cvss": "9.8", "publish_date": "December 27, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "d93087973afa26bc0a2d0a5eb5c0fde748bdd107", "commit_message": "Block injection attack in ssh public key handling (#673)\n\nAlso needed to fix the setup a bit to address a version incompatibility", "commit_date": "2022-03-28T23:25:44Z", "project": "dropbox/merou", "url": "https://api.github.com/repos/dropbox/merou/commits/d93087973afa26bc0a2d0a5eb5c0fde748bdd107", "html_url": "https://github.com/dropbox/merou/commit/d93087973afa26bc0a2d0a5eb5c0fde748bdd107", "windows_before": [{"commit_id": "30755ea28858f9d3bcd3e7eda2a122f76435ee6f", "commit_date": "Mon Mar 28 16:09:04 2022 -0700", "commit_message": "update dependencies for security alert and build error (#674)", "files_name": [".travis.yml", "grouper/fe/handlers/group_view.py", "grouper/fe/handlers/role_user_view.py", "grouper/fe/handlers/service_account_view.py", "grouper/fe/handlers/user_view.py", "grouper/graph.py", "grouper/models/base/model_base.py", "grouper/models/group.py", "itests/api/grants_test.py", "itests/api/groups_test.py", "itests/api/permissions_test.py", "itests/api/user_metadata_test.py", "itests/conftest.py", "itests/fe/audits_test.py", "itests/fe/group_create_test.py", "itests/fe/group_disable_test.py", "itests/fe/group_edit_member.py", "itests/fe/group_join_test.py", "itests/fe/group_leave_test.py", "itests/fe/group_view_test.py", "itests/fe/groups_test.py", "itests/fe/headers_test.py", "itests/fe/invalid_user_test.py", "itests/fe/permission_create_test.py", "itests/fe/permission_request_test.py", "itests/fe/permission_requests_test.py", "itests/fe/permission_view_test.py", "itests/fe/permissions_test.py", "itests/fe/role_users_test.py", "itests/fe/search_test.py", "itests/fe/service_accounts_test.py", "itests/fe/users_test.py", "requirements-dev.txt", "requirements.txt", "tests/audit_test.py", "tests/conftest.py", "tests/ctl_util.py", "tests/email_test.py", "tests/groups_test.py", "tests/path_util.py", "tests/permissions_test.py", "tests/settings_test.py", "tests/users_test.py"]}, {"commit_id": "869e5d87193ef21f5e7b819e65b4d868a44f2d6a", "commit_date": "Tue Oct 19 15:53:52 2021 -0700", "commit_message": "Update error message when failing to grant a perm with empty argument (#672)", "files_name": ["grouper/fe/handlers/permissions_grant.py", "grouper/usecases/grant_permission_to_group.py", "grouper/usecases/grant_permission_to_service_account.py"]}, {"commit_id": "551a0eb701d14cdbe4042161e60161e7cf0e4efa", "commit_date": "Tue Oct 19 15:53:24 2021 -0700", "commit_message": "added description to PermissionGrantForm (#671)", "files_name": ["grouper/fe/forms.py", "grouper/fe/templates/forms/permission-grant.html"]}, {"commit_id": "0ddb2f577db6a6eb72a164f3bccd9acdd6126cfa", "commit_date": "Tue Sep 28 12:46:39 2021 -0700", "commit_message": "Pass full Tornado request to request logging plugin (#670)", "files_name": ["grouper/api/handlers.py", "grouper/fe/handlers/permission_grants_group_view.py", "grouper/fe/handlers/permission_grants_service_account_view.py", "grouper/fe/handlers/permission_view.py", "grouper/fe/handlers/user_metadata.py", "grouper/fe/util.py", "grouper/graph.py", "grouper/plugin/base.py", "grouper/plugin/proxy.py", "grouper/usecases/grant_permission_to_group.py", "itests/fe/group_join_test.py", "itests/fe/permission_request_test.py", "tests/api/handlers_test.py", "tests/fe/handlers_test.py", "tests/passwords_test.py", "tests/usecases/grant_permission_to_group_test.py", "tests/usecases/view_permission_test.py"]}, {"commit_id": "ec21af72286b4acd17459efbf6516bf8aa24dc2e", "commit_date": "Thu Jun 3 16:49:42 2021 -0500", "commit_message": "Merge pull request #668 from dropbox/addpermtogroup", "files_name": ["e3e102dddb7155bc99d1a7aa36294331874d4351 - Thu Jun 3 16:36:49 2021 -0500 : Rebuild (one last attempt)ch", "befc322106e4c383e728ef7384e6a374ba3165bc - Thu Jun 3 16:15:14 2021 -0500 : Rebuild (one last attempt)", "23f87b41b096eadc202d863036ef2d988abe1743 - Thu Jun 3 15:57:24 2021 -0500 : Rebuild", "843e33b227a74dd761bd906129a0f83ba8b01404 - Thu Jun 3 13:04:00 2021 -0500 : rebuild", "grouper/usecases/grant_permission_to_group.py"]}, {"commit_id": "6e2ec45256adacd4ec3e6ab671cd929f7c770ed1", "commit_date": "Thu Jun 3 00:48:54 2021 -0500", "commit_message": "reformat", "files_name": ["grouper/usecases/grant_permission_to_group.py"]}, {"commit_id": "273fa3497a95acda04e3dc55e6759276ae5563d4", "commit_date": "Wed Jun 2 22:36:40 2021 -0500", "commit_message": "Make lint happy", "files_name": ["grouper/usecases/grant_permission_to_group.py"]}, {"commit_id": "1e39e845be452e94c429377c3338e5534fea400e", "commit_date": "Wed Jun 2 17:45:16 2021 -0500", "commit_message": "PR comments", "files_name": ["grouper/usecases/grant_permission_to_group.py", "tests/usecases/grant_permission_to_group_test.py"]}, {"commit_id": "94ef5b52ad7aca1daef007eab215b881d3149716", "commit_date": "Tue Jun 1 19:50:26 2021 -0500", "commit_message": "reformat", "files_name": ["grouper/usecases/factory.py", "grouper/usecases/grant_permission_to_group.py", "tests/usecases/grant_permission_to_group_test.py"]}, {"commit_id": "dfce48aae0c558d437c4826f94f6019cff49f7d9", "commit_date": "Tue Jun 1 17:37:12 2021 -0500", "commit_message": "Fix mypy again", "files_name": ["grouper/usecases/factory.py"]}, {"commit_id": "62c231395bb568e69a419eae6115807668bc60ee", "commit_date": "Tue Jun 1 17:11:07 2021 -0500", "commit_message": "Merge branch 'addpermtogroup' of github.com:dropbox/merou into addpermtogroup", "files_name": ["55e762415c425647b9ae512b838e155bd5d2e541 - Tue Jun 1 16:29:19 2021 -0500 : Add use case for programmatically adding permissions to groups", "grouper/usecases/factory.py", "grouper/usecases/grant_permission_to_group.py", "tests/usecases/grant_permission_to_group_test.py"]}, {"commit_id": "c54ffc98892d54ed2f7baa918473d4a54dc93331", "commit_date": "Tue Jun 1 16:29:19 2021 -0500", "commit_message": "Add use case for programmatically adding permissions to groups", "files_name": ["grouper/usecases/factory.py", "grouper/usecases/grant_permission_to_group.py", "tests/usecases/grant_permission_to_group_test.py"]}, {"commit_id": "7a87b43aaf64244932fa460842132a2d9329e704", "commit_date": "Tue Apr 20 15:03:30 2021 -0700", "commit_message": "Update various dependency versions (#666)", "files_name": ["requirements-dev.txt", "requirements.txt"]}, {"commit_id": "2ddc9189d39f1617e47d78b12891ad72f11a9540", "commit_date": "Thu Mar 11 10:24:18 2021 -0800", "commit_message": "Merge pull request #662 from m-ynk/catch_db_engine_creation_failures", "files_name": ["6efe0e7e7bb76e6c03da5e74ebdf6641f5a49172 - Thu Mar 11 09:29:21 2021 -0800 : Added unit test", "tests/settings_test.py"]}, {"commit_id": "c7cbe1443a7e39d8a7ead06b44e31811ef07bbf0", "commit_date": "Thu Mar 11 09:19:05 2021 -0800", "commit_message": "Catch exception", "files_name": ["grouper/models/base/session.py"]}, {"commit_id": "72f96eeff1d29ede556d5985389abe9bf4661836", "commit_date": "Wed Mar 3 15:36:06 2021 -0800", "commit_message": "Fix invocation of permission alias plugin (#660)", "files_name": ["grouper/permissions.py"]}, {"commit_id": "889078d04786bf6b6645a819437c3153e01e44c0", "commit_date": "Fri Feb 26 15:27:38 2021 -0800", "commit_message": "Update text of audit emails and audit reminder emails (#659)", "files_name": ["grouper/fe/handlers/audits_create.py", "grouper/fe/templates/email/audit_notice.html", "grouper/fe/templates/email/audit_notice.txt", "grouper/fe/templates/email/audit_notice_reminder.html", "grouper/fe/templates/email/audit_notice_reminder.txt", "itests/fe/audits_test.py"]}, {"commit_id": "e335a25d08eb1cb990456726f4a41160249878b3", "commit_date": "Wed Jan 20 13:08:25 2021 -0500", "commit_message": "fix template (#658)", "files_name": ["grouper/fe/templates/macros/ui.html"]}, {"commit_id": "5d0b74e1f141a86392db1700b3660175d9517ef5", "commit_date": "Tue Jan 19 12:23:32 2021 -0500", "commit_message": "Paginate the permissions page (#657)", "files_name": ["Dockerfile", "grouper/entities/pagination.py", "grouper/fe/handlers/permission_grants_group_view.py", "grouper/fe/handlers/permission_grants_service_account_view.py", "grouper/fe/handlers/permission_view.py", "grouper/fe/routes.py", "grouper/fe/templates.py", "grouper/fe/templates/permission-group.html", "grouper/fe/templates/permission-service-account.html", "grouper/fe/templates/permission.html", "grouper/fe/util.py", "grouper/repositories/interfaces.py", "grouper/repositories/permission_grant.py", "grouper/services/permission.py", "grouper/usecases/factory.py", "grouper/usecases/interfaces.py", "grouper/usecases/view_permission.py", "grouper/usecases/view_permission_group_grants.py", "grouper/usecases/view_permission_service_account_grants.py", "itests/fe/permission_view_test.py", "tests/fe/templates_test.py", "tests/usecases/view_permission_test.py"]}, {"commit_id": "542282f29fa9efb47cfb3ad9bd2ca68f08f1c411", "commit_date": "Tue Dec 29 15:12:11 2020 -0500", "commit_message": "Add ability to search for permission by it's argument (#656)", "files_name": ["grouper/fe/handlers/permission_view.py", "grouper/fe/handlers/search.py", "grouper/fe/util.py", "grouper/graph.py", "grouper/group_member.py", "grouper/repositories/interfaces.py", "grouper/repositories/permission_grant.py", "grouper/services/permission.py", "grouper/usecases/interfaces.py", "grouper/usecases/view_permission.py", "tests/audit_test.py", "tests/groups_test.py", "tests/permissions_test.py", "tests/usecases/view_permission_test.py"]}, {"commit_id": "89bfbd41f64b66d44170fbd2627c4cb79b98cea0", "commit_date": "Fri Nov 20 14:24:17 2020 -0800", "commit_message": "Merge pull request #654 from m-ynk/address_comments_from_pr653", "files_name": ["38db99a6a508d605e1e406944cafaecdc4879d62 - Thu Nov 19 23:01:51 2020 -0800 : unnest permission audited dict from permission_details", "grouper/graph.py", "tests/graph_test.py"]}, {"commit_id": "c9e06a83d90f6ba55aa97e96528e1810acdce59a", "commit_date": "Thu Nov 19 14:39:06 2020 -0800", "commit_message": "Merge pull request #653 from m-ynk/expose_perms_audit_values", "files_name": ["c52c751f614fa4f4b15dd3d90075473901fdd08d - Wed Nov 18 15:48:00 2020 -0800 : Expose Audit information about permissions", "grouper/graph.py", "tests/graph_test.py"]}, {"commit_id": "0d6a5b11b2e7aeac50470540a71517e07f4e381e", "commit_date": "Wed Nov 18 23:46:59 2020 +0000", "commit_message": "Plugin support for validating permission arguments (#652)", "files_name": ["grouper/fe/handlers/permission_request.py", "grouper/fe/handlers/permissions_grant.py", "grouper/plugin/base.py", "grouper/plugin/exceptions.py", "grouper/plugin/proxy.py", "tests/permissions_test.py"]}, {"commit_id": "bc043fd8ae9575f91156054fed6f3ef8c532b0fc", "commit_date": "Tue Nov 17 08:37:12 2020 -0800", "commit_message": "Show service account Add Permission button for all users (#650)", "files_name": ["grouper/fe/templates/service-account.html", "itests/fe/service_accounts_test.py"]}], "windows_after": [{"commit_id": "c757a67ab8c7df7f37402c3d0c285243a9115acc", "commit_date": "Mon Mar 28 17:12:52 2022 -0700", "commit_message": "Fix Travis CI badge (#675)", "files_name": ["README.rst"]}, {"commit_id": "7b0d3bbe98c24997c1f2354839385b694705e8b2", "commit_date": "Thu Apr 28 17:40:40 2022 -0700", "commit_message": "Extend permission argument length to 128 characters (#676)", "files_name": ["grouper/constants.py", "grouper/fe/forms.py", "grouper/models/permission_map.py", "grouper/models/permission_request.py", "grouper/models/service_account_permission_map.py", "tests/permissions_test.py"]}, {"commit_id": "c79255e7c1b2931d85c0823601117217f6d44ab6", "commit_date": "Thu Jun 2 14:41:31 2022 -0700", "commit_message": "Fix overly permissive ssh public key validation (#677)", "files_name": ["grouper/public_key.py", "tests/constants.py", "tests/public_key_test.py"]}, {"commit_id": "d6bcbfc42f134bfefa0c3b3ce803d11f80b3786c", "commit_date": "Thu Jun 2 17:04:25 2022 -0700", "commit_message": "Bump min RSA key size to be consistent with modern recommendations and match internal policies (#678)", "files_name": ["plugins/ssh_key_policy.py", "tests/api/handlers_test.py", "tests/constants.py"]}, {"commit_id": "97ea4ec03dde315ed3d6a30d83a98effcfccd776", "commit_date": "Fri Jul 15 16:34:52 2022 -0700", "commit_message": "Implement context manager in UseCaseFactory and create SqlAlchemy engine manager (#679)", "files_name": ["grouper/models/base/session.py", "grouper/repositories/factory.py", "grouper/usecases/factory.py", "tests/factories/__init__.py", "tests/factories/usecase_factory_test.py"]}, {"commit_id": "ec25286528323cf1a3434faa954f55ea3636809c", "commit_date": "Tue Jul 19 14:19:08 2022 -0700", "commit_message": "Obfuscate db url when logging (#680)", "files_name": ["grouper/models/base/session.py", "tests/factories/usecase_factory_test.py"]}, {"commit_id": "ce1676b006327f0369177b64bfef41700c4e0588", "commit_date": "Tue Nov 22 15:21:46 2022 -0800", "commit_message": "introduce basic regex log redaction (#683)", "files_name": ["grouper/ctl/main.py", "grouper/log_redact.py", "grouper/setup.py", "tests/log_redact_test.py"]}, {"commit_id": "2fa45872973c6559fe1b216cceb0bb94732a37cf", "commit_date": "Tue Dec 6 11:48:26 2022 -0800", "commit_message": "fix previous db log mask (#684)", "files_name": ["grouper/settings.py", "tests/settings_test.py"]}, {"commit_id": "a603deeae2ef417d8554a7ddc1b728df8c931c2e", "commit_date": "Tue Mar 14 10:55:09 2023 -0700", "commit_message": "add github actions config, remove travis ci config (#688)", "files_name": [".github/workflows/github-actions.yaml", ".travis.yml", "ci/setup.sh", "ci/test.sh"]}, {"commit_id": "546883b86a4cff5ece062a1f481fc2e0eb12bddd", "commit_date": "Tue Mar 14 11:08:38 2023 -0700", "commit_message": "Add additional logging to debug k8s migration issues, include permission name with audit log in permission grant (#686)", "files_name": ["grouper/api/main.py", "grouper/fe/handlers/permissions_grant.py", "grouper/fe/main.py"]}, {"commit_id": "94b2d187dd8f101f066b0521fedc9c252b5184e6", "commit_date": "Fri Mar 17 10:23:11 2023 -0700", "commit_message": "add permission to service account grant duplicate validation (#689)", "files_name": ["grouper/fe/handlers/permission_grants_service_account_view.py", "grouper/fe/handlers/service_account_permission_grant.py", "grouper/usecases/grant_permission_to_service_account.py"]}, {"commit_id": "a4dae2a016ced01399e491964e0d7516113670a8", "commit_date": "Tue Apr 18 13:07:49 2023 -0700", "commit_message": "deprecate project (#690)", "files_name": ["README.rst"]}], "parents": [{"commit_id_before": "30755ea28858f9d3bcd3e7eda2a122f76435ee6f", "url_before": "https://api.github.com/repos/dropbox/merou/commits/30755ea28858f9d3bcd3e7eda2a122f76435ee6f", "html_url_before": "https://github.com/dropbox/merou/commit/30755ea28858f9d3bcd3e7eda2a122f76435ee6f"}], "details": [{"raw_url": "https://github.com/dropbox/merou/raw/d93087973afa26bc0a2d0a5eb5c0fde748bdd107/grouper%2Fpublic_key.py", "code": "import sshpubkeys\nfrom sqlalchemy.exc import IntegrityError\n\nfrom grouper.models.counter import Counter\nfrom grouper.models.public_key import PublicKey\nfrom grouper.plugin import get_plugin_proxy\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\n\n\nclass DuplicateKey(Exception):\n    pass\n\n\nclass PublicKeyParseError(Exception):\n    pass\n\n\nclass BadPublicKey(Exception):\n    pass\n\n\nclass KeyNotFound(Exception):\n    \"\"\"Particular user's specific key was not found.\"\"\"\n\n    def __init__(self, key_id, user_id):\n        # type: (int, int) -> None\n        self.key_id = key_id\n        self.user_id = user_id\n\n\ndef get_public_key(session, user_id, key_id):\n    \"\"\"Retrieve specific public key for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(id=key_id, user_id=user_id).scalar()\n    if not pkey:\n        raise KeyNotFound(key_id=key_id, user_id=user_id)\n\n    return pkey\n\n\ndef add_public_key(session, user, public_key_str):\n    \"\"\"Add a public key for a particular user.\n\n    Args:\n        session: db session\n        user: User model of user in question\n        public_key_str: public key to add\n\n    Throws:\n        DuplicateKey if key is already in use\n        PublicKeyParseError if key can't be parsed\n        BadPublicKey if a plugin rejects the key\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pubkey = sshpubkeys.SSHKey(public_key_str, strict=True)\n\n    try:\n        pubkey.parse()\n    except sshpubkeys.InvalidKeyException as e:\n        raise PublicKeyParseError(str(e))\n\n    # Allowing newlines can lead to injection attacks depending on how the key is\n    # consumed, such as if it's dumped in an authorized_keys file with a `command`\n    # restriction.\n    # Note parsing the key is insufficient to block this.\n    if \"\\r\" in public_key_str or \"\\n\" in public_key_str:\n        raise PublicKeyParseError(\"Public key cannot have newlines\")\n\n    try:\n        get_plugin_proxy().will_add_public_key(pubkey)\n    except PluginRejectedPublicKey as e:\n        raise BadPublicKey(str(e))\n\n    db_pubkey = PublicKey(\n        user=user,\n        public_key=pubkey.keydata.strip(),\n        fingerprint=pubkey.hash_md5().replace(\"MD5:\", \"\"),\n        fingerprint_sha256=pubkey.hash_sha256().replace(\"SHA256:\", \"\"),\n        key_size=pubkey.bits,\n        key_type=pubkey.key_type,\n        comment=pubkey.comment,\n    )\n\n    try:\n        db_pubkey.add(session)\n        Counter.incr(session, \"updates\")\n    except IntegrityError:\n        session.rollback()\n        raise DuplicateKey()\n\n    session.commit()\n\n    return db_pubkey\n\n\ndef delete_public_key(session, user_id, key_id):\n    \"\"\"Delete a particular user's public key.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n    \"\"\"\n    pkey = get_public_key(session, user_id, key_id)\n    pkey.delete(session)\n    Counter.incr(session, \"updates\")\n    session.commit()\n\n\ndef get_public_keys_of_user(session, user_id):\n    \"\"\"Retrieve all public keys for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n\n    Returns:\n        List of PublicKey model object representing the keys\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(user_id=user_id).all()\n    return pkey\n", "code_before": "import sshpubkeys\nfrom sqlalchemy.exc import IntegrityError\n\nfrom grouper.models.counter import Counter\nfrom grouper.models.public_key import PublicKey\nfrom grouper.plugin import get_plugin_proxy\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\n\n\nclass DuplicateKey(Exception):\n    pass\n\n\nclass PublicKeyParseError(Exception):\n    pass\n\n\nclass BadPublicKey(Exception):\n    pass\n\n\nclass KeyNotFound(Exception):\n    \"\"\"Particular user's specific key was not found.\"\"\"\n\n    def __init__(self, key_id, user_id):\n        # type: (int, int) -> None\n        self.key_id = key_id\n        self.user_id = user_id\n\n\ndef get_public_key(session, user_id, key_id):\n    \"\"\"Retrieve specific public key for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(id=key_id, user_id=user_id).scalar()\n    if not pkey:\n        raise KeyNotFound(key_id=key_id, user_id=user_id)\n\n    return pkey\n\n\ndef add_public_key(session, user, public_key_str):\n    \"\"\"Add a public key for a particular user.\n\n    Args:\n        session: db session\n        user: User model of user in question\n        public_key_str: public key to add\n\n    Throws:\n        DuplicateKey if key is already in use\n        PublicKeyParseError if key can't be parsed\n        BadPublicKey if a plugin rejects the key\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pubkey = sshpubkeys.SSHKey(public_key_str, strict=True)\n\n    try:\n        pubkey.parse()\n    except sshpubkeys.InvalidKeyException as e:\n        raise PublicKeyParseError(str(e))\n\n    try:\n        get_plugin_proxy().will_add_public_key(pubkey)\n    except PluginRejectedPublicKey as e:\n        raise BadPublicKey(str(e))\n\n    db_pubkey = PublicKey(\n        user=user,\n        public_key=pubkey.keydata.strip(),\n        fingerprint=pubkey.hash_md5().replace(\"MD5:\", \"\"),\n        fingerprint_sha256=pubkey.hash_sha256().replace(\"SHA256:\", \"\"),\n        key_size=pubkey.bits,\n        key_type=pubkey.key_type,\n        comment=pubkey.comment,\n    )\n\n    try:\n        db_pubkey.add(session)\n        Counter.incr(session, \"updates\")\n    except IntegrityError:\n        session.rollback()\n        raise DuplicateKey()\n\n    session.commit()\n\n    return db_pubkey\n\n\ndef delete_public_key(session, user_id, key_id):\n    \"\"\"Delete a particular user's public key.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n    \"\"\"\n    pkey = get_public_key(session, user_id, key_id)\n    pkey.delete(session)\n    Counter.incr(session, \"updates\")\n    session.commit()\n\n\ndef get_public_keys_of_user(session, user_id):\n    \"\"\"Retrieve all public keys for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n\n    Returns:\n        List of PublicKey model object representing the keys\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(user_id=user_id).all()\n    return pkey\n", "patch": "@@ -72,6 +72,13 @@ def add_public_key(session, user, public_key_str):\n     except sshpubkeys.InvalidKeyException as e:\n         raise PublicKeyParseError(str(e))\n \n+    # Allowing newlines can lead to injection attacks depending on how the key is\n+    # consumed, such as if it's dumped in an authorized_keys file with a `command`\n+    # restriction.\n+    # Note parsing the key is insufficient to block this.\n+    if \"\\r\" in public_key_str or \"\\n\" in public_key_str:\n+        raise PublicKeyParseError(\"Public key cannot have newlines\")\n+\n     try:\n         get_plugin_proxy().will_add_public_key(pubkey)\n     except PluginRejectedPublicKey as e:", "file_path": "files/2022_12/491", "file_language": "py", "file_name": "grouper/public_key.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/dropbox/merou/raw/d93087973afa26bc0a2d0a5eb5c0fde748bdd107/tests%2Fconstants.py", "code": "SSH_KEY_1 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCUQeasspT/etEJR2WUoR+h2sMOQYbJgr0QE+J8p97gEhmz107KWZ+3\"\n    \"mbOwyIFzfWBcJZCEg9wy5Paj+YxbGONqbpXAhPdVQ2TLgxr41bNXvbcRAxZC+Q12UZywR4Klb2kungKz4qkcmSZzouaKK\"\n    \"12UxzGB3xQ0N+3osKFj3xA1+B6HqrVreU19XdVoAJh0xLZwhw17/NDM+dAcEdMZ9V89KyjwjraXtOVfFhQF0EDF0ame8d\"\n    \"6UkayGrAiXC2He0P2Cja+J371P27AlNLHFJij8WGxvcGGSeAxMLoVSDOOllLCYH5UieV8mNpX1kNe2LeA58ciZb0AXHai\"\n    \"pSmCHgh/ some-comment\"\n)\n\nSSH_KEY_2 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF1DyXlqc40AVUgt/IO0GFcTniaoFt5qCUAeNVlvalMnsrRULIXkb0g\"\n    \"1ds9P9/UI2jWr70ZYG7XieQX1F7NpzaDeUyPGCrLV1/ev1ZtUImCrDFfMznEjkcqB33mRe1rCFGKNVOYUviPE1yBdbfZB\"\n    \"GUuJBX2GOXQQj9fU4Hiq3rAgOhz89717mt+qZxZllZ4mdyVEaMBWCwqAvl7Z5ecDjB+llFpBORTmsT8OZoGbZnJTIB1d9\"\n    \"j0tSbegP17emE+g9fTrk4/ePmSIAKcSV3xj6h98AGesNibyu9eKVrroEptxX4crl0o95Me6B1/DCL632xrTO0a5mSmlF4\"\n    \"cxCgjLj9 to/ key2\"\n)\n\nSSH_KEY_BAD = \"ssh-rsa AAAblahblahkey some-comment\"\n\nSSH_KEY_BAD_MULTILINE = SSH_KEY_1 + \"\\r\" + SSH_KEY_2\n\nSSH2_KEY_BAD = \"\"\"\\\n---- BEGIN SSH2 PUBLIC KEY ----\nfoobar: this is a chance to hide bad things\nAAAAC3NzaC1lZDI1NTE5AAAAIJ5O/AXibtVhySDYn60ATXftAU1oCe4BQubFYoV2juEb\n---- END SSH2 PUBLIC KEY ----\n\"\"\"\n\nSSH_KEY_RSA_1024 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDhKgSsCJR9UyQa/Gsheb5F56hg23CVnCLpmpyC2JMqVEptG9CL83Oft\"\n    \"pOPvEb/785Act4En1VFvwMwTj25VurbG3XI984csiNdWPlM1ke4lHK2PQepSYyZVYn+hhXhzSILNDixhBYeDVv4GOfJM1\"\n    \"HBO2AEtupOMHOqtnQLjV1UnQ== rsa-1024\"\n)\n\nSSH_KEY_DSA = (\n    \"ssh-dss AAAAB3NzaC1kc3MAAACBAKdCbYh9GgDPFppJmyRcpWhFn3Xc5vcljGE20df84KYQeBVCQg3zTLkwynHyrpEwT\"\n    \"HmIc0bgH14muGwPOdt8CEtj9EvcPHHCEaZ/4IdT02awY+Opszq7LI/YXzfu3cbgOoB22zj+chhryCiMIisEBHQv00F54z\"\n    \"01yOi3mOX7BIZBAAAAFQDgX/4IaAAtnbQ3DeDbWSJVxdKtIQAAAIEAoUsqfKyrzmDLgLhLpJpVs5BPdziHxlJM1+cQuIa\"\n    \"VsTHe7tyu61hpColor2ybyhafKhJ3ZH9bsl8DASwkGQXyjOTL/T6IzVhlcCfeDtirwAwQNINz8xwplLIbCOLAAOdVrKE9\"\n    \"xHMO5RPXO8i58CFF7c5fm3vg87nLH+uh1AwFyysAAACABCca7QX1ZJIoIt37HxCwV3+ktcoVhoZhuzHNRe9l4CSKSeSdn\"\n    \"WrdaC8G7tvKPTrImYIPqSZz3ohLDioflMUN3yIHnO1VsDn0hwTa7x9c/RiGAkiwKagF1icGfzgEiMt7PTfJT/nMeFoahu\"\n    \"JEk8kasRtdm0VcM4JyOLiqej/8VRo= dsa-1024\"\n)\n\nSSH_KEY_ECDSA_P256 = (\n    \"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBD7FwYV01qXgP2TManNEq\"\n    \"nOD/JXCp7WChDk7c3GiwHSlZVn3xvmtphQjzE6Ag4GDh/bFOaKIcGc66691GsOE6Vo= ecdsa-p256\"\n)\n\nSSH_KEY_ED25519 = (\n    \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJXKRoCgQqJ0iyC51HOIJzPqjwZcvf3DF9IAwFQWwqop comment\"\n)\n", "code_before": "SSH_KEY_1 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCUQeasspT/etEJR2WUoR+h2sMOQYbJgr0QE+J8p97gEhmz107KWZ+3\"\n    \"mbOwyIFzfWBcJZCEg9wy5Paj+YxbGONqbpXAhPdVQ2TLgxr41bNXvbcRAxZC+Q12UZywR4Klb2kungKz4qkcmSZzouaKK\"\n    \"12UxzGB3xQ0N+3osKFj3xA1+B6HqrVreU19XdVoAJh0xLZwhw17/NDM+dAcEdMZ9V89KyjwjraXtOVfFhQF0EDF0ame8d\"\n    \"6UkayGrAiXC2He0P2Cja+J371P27AlNLHFJij8WGxvcGGSeAxMLoVSDOOllLCYH5UieV8mNpX1kNe2LeA58ciZb0AXHai\"\n    \"pSmCHgh/ some-comment\"\n)\n\nSSH_KEY_2 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF1DyXlqc40AVUgt/IO0GFcTniaoFt5qCUAeNVlvalMnsrRULIXkb0g\"\n    \"1ds9P9/UI2jWr70ZYG7XieQX1F7NpzaDeUyPGCrLV1/ev1ZtUImCrDFfMznEjkcqB33mRe1rCFGKNVOYUviPE1yBdbfZB\"\n    \"GUuJBX2GOXQQj9fU4Hiq3rAgOhz89717mt+qZxZllZ4mdyVEaMBWCwqAvl7Z5ecDjB+llFpBORTmsT8OZoGbZnJTIB1d9\"\n    \"j0tSbegP17emE+g9fTrk4/ePmSIAKcSV3xj6h98AGesNibyu9eKVrroEptxX4crl0o95Me6B1/DCL632xrTO0a5mSmlF4\"\n    \"cxCgjLj9 to/ key2\"\n)\n\nSSH_KEY_BAD = \"ssh-rsa AAAblahblahkey some-comment\"\n\nSSH_KEY_RSA_1024 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDhKgSsCJR9UyQa/Gsheb5F56hg23CVnCLpmpyC2JMqVEptG9CL83Oft\"\n    \"pOPvEb/785Act4En1VFvwMwTj25VurbG3XI984csiNdWPlM1ke4lHK2PQepSYyZVYn+hhXhzSILNDixhBYeDVv4GOfJM1\"\n    \"HBO2AEtupOMHOqtnQLjV1UnQ== rsa-1024\"\n)\n\nSSH_KEY_DSA = (\n    \"ssh-dss AAAAB3NzaC1kc3MAAACBAKdCbYh9GgDPFppJmyRcpWhFn3Xc5vcljGE20df84KYQeBVCQg3zTLkwynHyrpEwT\"\n    \"HmIc0bgH14muGwPOdt8CEtj9EvcPHHCEaZ/4IdT02awY+Opszq7LI/YXzfu3cbgOoB22zj+chhryCiMIisEBHQv00F54z\"\n    \"01yOi3mOX7BIZBAAAAFQDgX/4IaAAtnbQ3DeDbWSJVxdKtIQAAAIEAoUsqfKyrzmDLgLhLpJpVs5BPdziHxlJM1+cQuIa\"\n    \"VsTHe7tyu61hpColor2ybyhafKhJ3ZH9bsl8DASwkGQXyjOTL/T6IzVhlcCfeDtirwAwQNINz8xwplLIbCOLAAOdVrKE9\"\n    \"xHMO5RPXO8i58CFF7c5fm3vg87nLH+uh1AwFyysAAACABCca7QX1ZJIoIt37HxCwV3+ktcoVhoZhuzHNRe9l4CSKSeSdn\"\n    \"WrdaC8G7tvKPTrImYIPqSZz3ohLDioflMUN3yIHnO1VsDn0hwTa7x9c/RiGAkiwKagF1icGfzgEiMt7PTfJT/nMeFoahu\"\n    \"JEk8kasRtdm0VcM4JyOLiqej/8VRo= dsa-1024\"\n)\n\nSSH_KEY_ECDSA_P256 = (\n    \"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBD7FwYV01qXgP2TManNEq\"\n    \"nOD/JXCp7WChDk7c3GiwHSlZVn3xvmtphQjzE6Ag4GDh/bFOaKIcGc66691GsOE6Vo= ecdsa-p256\"\n)\n\nSSH_KEY_ED25519 = (\n    \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJXKRoCgQqJ0iyC51HOIJzPqjwZcvf3DF9IAwFQWwqop comment\"\n)\n", "patch": "@@ -16,6 +16,15 @@\n \n SSH_KEY_BAD = \"ssh-rsa AAAblahblahkey some-comment\"\n \n+SSH_KEY_BAD_MULTILINE = SSH_KEY_1 + \"\\r\" + SSH_KEY_2\n+\n+SSH2_KEY_BAD = \"\"\"\\\n+---- BEGIN SSH2 PUBLIC KEY ----\n+foobar: this is a chance to hide bad things\n+AAAAC3NzaC1lZDI1NTE5AAAAIJ5O/AXibtVhySDYn60ATXftAU1oCe4BQubFYoV2juEb\n+---- END SSH2 PUBLIC KEY ----\n+\"\"\"\n+\n SSH_KEY_RSA_1024 = (\n     \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDhKgSsCJR9UyQa/Gsheb5F56hg23CVnCLpmpyC2JMqVEptG9CL83Oft\"\n     \"pOPvEb/785Act4En1VFvwMwTj25VurbG3XI984csiNdWPlM1ke4lHK2PQepSYyZVYn+hhXhzSILNDixhBYeDVv4GOfJM1\"", "file_path": "files/2022_12/492", "file_language": "py", "file_name": "tests/constants.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}, {"raw_url": "https://github.com/dropbox/merou/raw/d93087973afa26bc0a2d0a5eb5c0fde748bdd107/tests%2Fpublic_key_test.py", "code": "import pytest\nfrom mock import patch\n\nfrom grouper.plugin.base import BasePlugin\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\nfrom grouper.plugin.proxy import PluginProxy\nfrom grouper.public_key import (\n    add_public_key,\n    BadPublicKey,\n    DuplicateKey,\n    get_public_keys_of_user,\n    PublicKeyParseError,\n)\nfrom tests.constants import SSH2_KEY_BAD, SSH_KEY_1, SSH_KEY_BAD, SSH_KEY_BAD_MULTILINE\nfrom tests.fixtures import session, users  # noqa: F401\n\n\nclass PublicKeyPlugin(BasePlugin):\n    def will_add_public_key(self, key):\n        raise PluginRejectedPublicKey()\n\n\ndef test_duplicate_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    add_public_key(session, user, SSH_KEY_1)\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n    with pytest.raises(DuplicateKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n\ndef test_bad_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(PublicKeyParseError):\n        add_public_key(session, user, SSH_KEY_BAD)\n\n    assert get_public_keys_of_user(session, user.id) == []\n\n\n@pytest.mark.parametrize(\"key\", [SSH_KEY_BAD_MULTILINE, SSH2_KEY_BAD])\ndef test_multiline_key(key, session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(PublicKeyParseError, match=\"Public key cannot have newlines\"):\n        add_public_key(session, user, key)\n\n    assert get_public_keys_of_user(session, user.id) == []\n\n\n@patch(\"grouper.public_key.get_plugin_proxy\")\ndef test_rejected_key(get_plugin_proxy, session, users):  # noqa: F811\n    get_plugin_proxy.return_value = PluginProxy([PublicKeyPlugin()])\n\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(BadPublicKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert get_public_keys_of_user(session, user.id) == []\n", "code_before": "import pytest\nfrom mock import patch\n\nfrom grouper.plugin.base import BasePlugin\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\nfrom grouper.plugin.proxy import PluginProxy\nfrom grouper.public_key import (\n    add_public_key,\n    BadPublicKey,\n    DuplicateKey,\n    get_public_keys_of_user,\n    PublicKeyParseError,\n)\nfrom tests.constants import SSH_KEY_1, SSH_KEY_BAD\nfrom tests.fixtures import session, users  # noqa: F401\n\n\nclass PublicKeyPlugin(BasePlugin):\n    def will_add_public_key(self, key):\n        raise PluginRejectedPublicKey()\n\n\ndef test_duplicate_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    add_public_key(session, user, SSH_KEY_1)\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n    with pytest.raises(DuplicateKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n\ndef test_bad_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(PublicKeyParseError):\n        add_public_key(session, user, SSH_KEY_BAD)\n\n    assert get_public_keys_of_user(session, user.id) == []\n\n\n@patch(\"grouper.public_key.get_plugin_proxy\")\ndef test_rejected_key(get_plugin_proxy, session, users):  # noqa: F811\n    get_plugin_proxy.return_value = PluginProxy([PublicKeyPlugin()])\n\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(BadPublicKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert get_public_keys_of_user(session, user.id) == []\n", "patch": "@@ -11,7 +11,7 @@\n     get_public_keys_of_user,\n     PublicKeyParseError,\n )\n-from tests.constants import SSH_KEY_1, SSH_KEY_BAD\n+from tests.constants import SSH2_KEY_BAD, SSH_KEY_1, SSH_KEY_BAD, SSH_KEY_BAD_MULTILINE\n from tests.fixtures import session, users  # noqa: F401\n \n \n@@ -41,6 +41,16 @@ def test_bad_key(session, users):  # noqa: F811\n     assert get_public_keys_of_user(session, user.id) == []\n \n \n+@pytest.mark.parametrize(\"key\", [SSH_KEY_BAD_MULTILINE, SSH2_KEY_BAD])\n+def test_multiline_key(key, session, users):  # noqa: F811\n+    user = users[\"cbguder@a.co\"]\n+\n+    with pytest.raises(PublicKeyParseError, match=\"Public key cannot have newlines\"):\n+        add_public_key(session, user, key)\n+\n+    assert get_public_keys_of_user(session, user.id) == []\n+\n+\n @patch(\"grouper.public_key.get_plugin_proxy\")\n def test_rejected_key(get_plugin_proxy, session, users):  # noqa: F811\n     get_plugin_proxy.return_value = PluginProxy([PublicKeyPlugin()])", "file_path": "files/2022_12/493", "file_language": "py", "file_name": "tests/public_key_test.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 0, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
