{"index": 9968, "cve_id": "CVE-2022-4638", "cwe_id": ["CWE-79", "CWE-707", "CWE-74"], "cve_language": "Python", "cve_description": "A vulnerability classified as problematic was found in collective.contact.widget up to 1.12. This vulnerability affects the function title of the file src/collective/contact/widget/widgets.py. The manipulation leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 5da36305ca7ed433782be8901c47387406fcda12. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216496.", "cvss": "6.1", "publish_date": "December 21, 2022", "AV": "NETWORK", "AC": "NETWORK", "PR": "NONE", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "5da36305ca7ed433782be8901c47387406fcda12", "commit_message": "Escaped term-contact viewlet title special chars to avoid xss", "commit_date": "2022-05-31T21:16:59Z", "project": "collective/collective.contact.widget", "url": "https://api.github.com/repos/collective/collective.contact.widget/commits/5da36305ca7ed433782be8901c47387406fcda12", "html_url": "https://github.com/collective/collective.contact.widget/commit/5da36305ca7ed433782be8901c47387406fcda12", "windows_before": [{"commit_id": "25f81b89bd0c7834d22ebbb3c758e43d7cd05b09", "commit_date": "Wed Oct 7 09:18:52 2020 +0200", "commit_message": "Back to development: 1.13", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "c7f482aca0c8e1e3cad28e56b630222eeb2d031c", "commit_date": "Wed Oct 7 09:17:56 2020 +0200", "commit_message": "Preparing release 1.12", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "7d4d0d8ea5d3fe1c7d796e1259bfc35076ddc334", "commit_date": "Wed Oct 7 09:17:43 2020 +0200", "commit_message": "Updated CHANGES", "files_name": ["CHANGES.rst"]}, {"commit_id": "a77536ae4b2318c8f3f643c83dc41f9cc1ca090c", "commit_date": "Wed Oct 7 09:15:08 2020 +0200", "commit_message": "Updated MANIFEST", "files_name": ["MANIFEST.in"]}, {"commit_id": "efe95398e19b2dd752980b09c116ef270e9ac97c", "commit_date": "Tue Oct 6 09:24:01 2020 +0200", "commit_message": "Merge pull request #16 from collective/contactlist-filtering", "files_name": ["58aa684f55ce80202c0a4e185320514ebef1d343 - Mon Oct 5 13:27:09 2020 +0200 : Avoid conflict when multiple prefilters are visible on the same page", "src/collective/contact/widget/templates/contact_input.pt", "src/collective/contact/widget/widgets.py"]}, {"commit_id": "52031ddfbae038adc68969e5c9413b03ff7ea65e", "commit_date": "Fri Sep 11 12:09:21 2020 +0200", "commit_message": "Simplified template. Updated i18n. Corrected readme.", "files_name": ["README.rst", "src/collective/contact/widget/locales/collective.contact.widget.pot", "src/collective/contact/widget/locales/es/LC_MESSAGES/collective.contact.widget.po", "src/collective/contact/widget/locales/fr/LC_MESSAGES/collective.contact.widget.po", "src/collective/contact/widget/templates/contact_input.pt"]}, {"commit_id": "ad794159911625b73aa77cca3acf00a5ff3fa33e", "commit_date": "Fri Sep 11 11:03:18 2020 +0200", "commit_message": "Added prefilter field attributes on ContactChoice because the same widget is used.", "files_name": ["README.rst", "src/collective/contact/widget/schema.py"]}, {"commit_id": "3f665ee78406f6d6b14c410f26441027b53949a3", "commit_date": "Thu Sep 10 15:29:16 2020 +0200", "commit_message": "Get prefilter default value thru a context-aware method", "files_name": ["src/collective/contact/widget/schema.py", "src/collective/contact/widget/templates/contact_input.pt", "src/collective/contact/widget/widgets.py"]}, {"commit_id": "4dccd34b05564956aa9552ff0f2a917b68cc81cc", "commit_date": "Thu Sep 10 13:09:36 2020 +0200", "commit_message": "Handle different types of prefilter vocabulary sources", "files_name": ["src/collective/contact/widget/templates/contact_input.pt", "src/collective/contact/widget/widgets.py"]}, {"commit_id": "d46f1894379e0be72e974837ffe4e6b3b5277aa6", "commit_date": "Wed Sep 2 11:08:35 2020 +0200", "commit_message": "Fix typo", "files_name": ["src/collective/contact/widget/schema.py", "src/collective/contact/widget/templates/contact_input.pt"]}, {"commit_id": "cef21ffd9e5acf80408ebd5f896d1726981a5c92", "commit_date": "Thu Jul 30 16:14:47 2020 +0200", "commit_message": "Add prefiltering to contact list widget", "files_name": ["src/collective/contact/widget/locales/collective.contact.widget.pot", "src/collective/contact/widget/locales/fr/LC_MESSAGES/collective.contact.widget.po", "src/collective/contact/widget/schema.py", "src/collective/contact/widget/source.py", "src/collective/contact/widget/templates/contact_input.pt", "src/collective/contact/widget/widgets.py"]}, {"commit_id": "21065cd27b4e9f5f481c5a396e4b3bb8857de169", "commit_date": "Tue Apr 28 10:12:01 2020 -0400", "commit_message": "Updated README file", "files_name": ["README.rst"]}, {"commit_id": "749f139a40aa9968479a3aae88cb51e559bd0da2", "commit_date": "Tue Apr 28 10:10:02 2020 -0400", "commit_message": "Updated CONTRIBUTORS file", "files_name": ["CONTRIBUTORS.rst"]}, {"commit_id": "479a99e2eb6abc8ebc037b6f66b048bd152ef15d", "commit_date": "Tue Apr 28 10:00:52 2020 -0400", "commit_message": "Add Transifex.net service integration to manage the translation process.", "files_name": [".tx/config", "CHANGES.rst"]}, {"commit_id": "2cb73332940cf124703ff366f842072770700c61", "commit_date": "Tue Apr 28 10:00:12 2020 -0400", "commit_message": "Add Spanish translation", "files_name": ["CHANGES.rst", "README.rst", "src/collective/contact/widget/locales/es/LC_MESSAGES/collective.contact.widget.po"]}, {"commit_id": "55f17577ee4f756aa7d44d24557f69808fa98baf", "commit_date": "Mon Nov 25 11:35:52 2019 +0100", "commit_message": "Updated setup.py", "files_name": ["setup.py"]}, {"commit_id": "52689cbfbc64cf68275ba09775937f82054d06f3", "commit_date": "Fri Sep 20 13:09:35 2019 +0200", "commit_message": "Back to development: 1.12", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "387cba8601df16e8172446804e83ee83a3d4e5c0", "commit_date": "Fri Sep 20 13:09:14 2019 +0200", "commit_message": "Preparing release 1.11", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "aa09ff1cabb1ac0dbdb11e0d839678965b5c4bb5", "commit_date": "Fri Sep 20 13:08:27 2019 +0200", "commit_message": "Use contact_source metadata in widget result", "files_name": ["CHANGES.rst", "setup.py", "src/collective/contact/widget/source.py"]}, {"commit_id": "632ddea2de2064da9e04d2dc45d9b2df9081e1cf", "commit_date": "Sun Jul 7 12:15:23 2019 +0200", "commit_message": "Solr correction: catalog results limit", "files_name": ["CHANGES.rst", "src/collective/contact/widget/source.py"]}, {"commit_id": "bd7e28d5ba53bc4a7b56c551ef80722cf5eba7b2", "commit_date": "Thu Oct 5 11:46:39 2017 +0200", "commit_message": "Back to development: 1.11", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "3e751f94676f952b965f054d3679d8d5a1dfa480", "commit_date": "Thu Oct 5 11:46:25 2017 +0200", "commit_message": "Preparing release 1.10", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "b0c961a87e834fa25e4702a57efd5fd759880061", "commit_date": "Thu Oct 5 03:13:40 2017 +0200", "commit_message": "Merge pull request #10 from collective/bsuttor-set-header-on-autocomplete-request", "files_name": ["845d79fb55feaa90213074ed3ee387383122208b - Wed Oct 4 10:48:35 2017 +0200 : Set Content-type 'text/plain' headers to autocomplete request.", "CHANGES.rst", "src/collective/contact/widget/widgets.py"]}, {"commit_id": "7cc13733bbd6b19c5dc0b214fdb31a8e2bfdf69f", "commit_date": "Mon Jun 26 12:24:53 2017 +0200", "commit_message": "optimize search when no relations found", "files_name": ["src/collective/contact/widget/source.py"]}, {"commit_id": "ee8af01ee05ee85f1e2baed8578d1f4b257ec0fb", "commit_date": "Mon Jun 26 12:23:37 2017 +0200", "commit_message": "fix related_uids when no relations found", "files_name": ["src/collective/contact/widget/source.py"]}, {"commit_id": "42741b80200257ca987af8c0443540903b2e2c1c", "commit_date": "Wed May 31 17:19:57 2017 +0200", "commit_message": "Merge pull request #8 from collective/optimize_relation_restriction", "files_name": ["901baab4ac965b0507a3aca53c535e36cedef5db - Tue May 30 14:05:20 2017 +0200 : Back to development: 1.10", "CHANGES.rst", "setup.py"]}, {"commit_id": "23b9dcf65cec70dd7364d11778f8487487d498af", "commit_date": "Tue May 30 14:05:05 2017 +0200", "commit_message": "Preparing release 1.9", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "d7622cedc6eb6c5b34c29bccd227bc00dcf5c083", "commit_date": "Wed May 24 14:19:17 2017 +0200", "commit_message": "Fix and optimize when vocabulary is restricted by a relation.", "files_name": ["CHANGES.rst", "src/collective/contact/widget/source.py"]}, {"commit_id": "163a561ddfdd829efed3f4c09e80540dc5e1c3f7", "commit_date": "Fri Mar 31 07:25:47 2017 +0200", "commit_message": "Merge pull request #7 from collective/missing_held_positions", "files_name": ["87e25a9f63d100e1252147698b0644eeabd672e4 - Thu Jan 19 01:30:39 2017 +0100 : Prevent fatal error when relation catalog is out of sync", "CHANGES.rst", "src/collective/contact/widget/__init__.py", "src/collective/contact/widget/source.py"]}, {"commit_id": "feaff9f51cb513411e2d664f1fc477ec7810eda4", "commit_date": "Fri Oct 21 12:00:58 2016 +0200", "commit_message": "Back to development: 1.9", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "3f76e990c257c1454e273b729154fe58bfbee875", "commit_date": "Fri Oct 21 12:00:14 2016 +0200", "commit_message": "Preparing release 1.8", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "fc4e7022add264db3541dd1245c61bc9c0162382", "commit_date": "Tue Oct 11 13:44:33 2016 +0200", "commit_message": "you need plone.formwidget.masterselect >= 1.6 for the ContactChoice to work as master field", "files_name": ["CHANGES.rst"]}, {"commit_id": "20ac752e82be14e4280908bc49705db542d5b150", "commit_date": "Tue Oct 11 13:24:23 2016 +0200", "commit_message": "ContactChoice can now be used as master field when plone.formwidget.masterselect is installed.", "files_name": ["CHANGES.rst", "src/collective/contact/widget/schema.py", "src/collective/contact/widget/templates/contact_input.pt", "src/collective/contact/widget/widgets.py"]}, {"commit_id": "153314b3c1e1280f7dd200c6090c88efed0e8b6d", "commit_date": "Thu Jul 7 13:55:59 2016 +0200", "commit_message": "Back to development: 1.8", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "d5184dea84aaa713e2892950877de33db377cff0", "commit_date": "Thu Jul 7 13:55:29 2016 +0200", "commit_message": "Preparing release 1.7", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "1f39ff99ec05554b8d0635547fe6effa2b5aeb27", "commit_date": "Thu Jul 7 12:45:33 2016 +0200", "commit_message": "Set matchSubset: false to fix autocomplete behavior with accents and not doing a new ajax request.", "files_name": ["CHANGES.rst", "src/collective/contact/widget/widgets.py"]}, {"commit_id": "ea3f0661709eeac2d385e44a99eb6c68f8763373", "commit_date": "Wed Jun 22 16:59:03 2016 +0200", "commit_message": "Ensure that the required property for ContactList field works correctly", "files_name": ["CHANGES.rst", "src/collective/contact/widget/schema.py"]}, {"commit_id": "7dd47026da44f1d89c6de5dd635fbf744312d4aa", "commit_date": "Thu Mar 31 11:06:51 2016 +0200", "commit_message": "Back to development: 1.7", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "c1b9c2e42f64563a71a9ba6a7b85111a10e7f549", "commit_date": "Thu Mar 31 11:05:03 2016 +0200", "commit_message": "Preparing release 1.6", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "005d8b34c1e3edfaa8494f3806a3baedbe06d383", "commit_date": "Thu Mar 31 10:59:16 2016 +0200", "commit_message": "change changelog entry and add explicit dependency to plone.formwidget.contenttree >= 1.0.11 (refs collective/collective.contact.widget#6)", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "0f8917c065f258d9367636c44ea2cf1ef30e5a22", "commit_date": "Thu Mar 31 10:56:59 2016 +0200", "commit_message": "Merge pull request #6 from collective/fix_new_contenttree", "files_name": ["ec7d39e37872e8bb6540b00823e9b25aee39a365 - Tue Mar 15 16:06:10 2016 +0100 : Fix an exception with plone.formwidget.contenttree >= 1.0.9.", "CHANGES.rst", "src/collective/contact/widget/source.py"]}, {"commit_id": "47f5ac2ef8c753aa2c1eeca338511d4088f9344b", "commit_date": "Fri Mar 4 09:54:41 2016 +0100", "commit_message": "Back to development: 1.6", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "f4872f504630d062a53af8dd442653f2d17c699e", "commit_date": "Fri Mar 4 09:53:51 2016 +0100", "commit_message": "Preparing release 1.5", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "57300d3ac3da08f46a4df3550126c18c167967de", "commit_date": "Fri Mar 4 09:53:38 2016 +0100", "commit_message": "add buildout.d files in release", "files_name": ["MANIFEST.in"]}, {"commit_id": "4d3af0f78fea0a226343a2f37e77bdf5cf4beb52", "commit_date": "Fri Mar 4 09:51:45 2016 +0100", "commit_message": "fix long description rst issues", "files_name": ["CHANGES.rst", "CONTRIBUTORS.rst"]}, {"commit_id": "692316010353478f9a3ff971b2366cbb3bca9441", "commit_date": "Fri Jan 29 19:05:33 2016 +0100", "commit_message": "Use single template with mono selection", "files_name": ["src/collective/contact/widget/widgets.py"]}, {"commit_id": "210b152913564473de314567a9eb860971c396d2", "commit_date": "Fri Jan 29 16:29:37 2016 +0100", "commit_message": "Add display template for single selection field", "files_name": ["CHANGES.rst", "src/collective/contact/widget/templates/contact_display_single.pt", "src/collective/contact/widget/widgets.py"]}], "windows_after": [{"commit_id": "c7ea1feef8dda50d8732a00af1d9c1f1567bde85", "commit_date": "Wed Jun 1 11:07:49 2022 +0200", "commit_message": "Used future html and not cgi", "files_name": ["src/collective/contact/widget/widgets.py"]}, {"commit_id": "edbc259f90255bc5cdc59f84174fc852167585fb", "commit_date": "Wed Jun 1 16:19:35 2022 +0200", "commit_message": "Removed useless param", "files_name": ["src/collective/contact/widget/widgets.py"]}, {"commit_id": "2bda67c39e402fa88837f2124120a7e67b8d48c0", "commit_date": "Tue Jun 7 12:41:38 2022 +0200", "commit_message": "Require `future` in `setup.py`.", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "34b02acc20aa5c0e6961c65d8159ca977465fc5d", "commit_date": "Tue Jun 21 08:23:46 2022 +0200", "commit_message": "Preparing release 1.13", "files_name": ["CHANGES.rst", "setup.py"]}, {"commit_id": "72204e65b50ce18a9de31267c82765218f204953", "commit_date": "Tue Jun 21 08:23:59 2022 +0200", "commit_message": "Back to development: 1.14", "files_name": ["CHANGES.rst", "setup.py"]}], "parents": [{"commit_id_before": "25f81b89bd0c7834d22ebbb3c758e43d7cd05b09", "url_before": "https://api.github.com/repos/collective/collective.contact.widget/commits/25f81b89bd0c7834d22ebbb3c758e43d7cd05b09", "html_url_before": "https://github.com/collective/collective.contact.widget/commit/25f81b89bd0c7834d22ebbb3c758e43d7cd05b09"}], "details": [{"raw_url": "https://github.com/collective/collective.contact.widget/raw/5da36305ca7ed433782be8901c47387406fcda12/CHANGES.rst", "code": "Changelog\n=========\n\n1.13 (unreleased)\n-----------------\n\n- Escaped contact title special characters in `term-contact` viewlet to avoid\n  script insertion (xss). This viewlet stores an hidden field used in a\n  dynamically js generation.\n  [sgeulette]\n\n1.12 (2020-10-07)\n-----------------\n\n- Added prefiltering on widgets\n  [daggelpop, sgeulette]\n- Add Transifex.net service integration to manage the translation process.\n  [macagua]\n- Add Spanish translation\n  [macagua]\n\n\n1.11 (2019-09-20)\n-----------------\n\n- Limit catalog results (with sort_limit) because solr sends None for higher limit results.\n  [sgeulette]\n- Use contact_source metadata in widget result\n  [sgeulette]\n\n1.10 (2017-10-05)\n-----------------\n\n- Set Content-type 'text/plain' headers to autocomplete request. This prevent \"<!DOCTYPE html\" tag.\n  [bsuttor]\n\n\n1.9 (2017-05-30)\n----------------\n\n- Fix optimization issue when vocabulary is restricted by a relation.\n  [thomasdesvenain]\n\n- Prevent fatal error on autocomplete if by chance a held position related to a position or an organisation has been removed\n  but the relation always exist. An error is logged.\n  [thomasdesvenain]\n\n1.8 (2016-10-21)\n----------------\n\n- ContactChoice can now be used as master field when\n  plone.formwidget.masterselect >= 1.6 is installed.\n  [vincentfretin]\n\n\n1.7 (2016-07-07)\n----------------\n\n- Set matchSubset: false to fix autocomplete behavior with accents and not\n  doing a new ajax request.\n  [vincentfretin]\n\n- Ensure that the required property for ContactList field works correctly\n  [mpeeters]\n\n\n1.6 (2016-03-31)\n----------------\n\n- Fix an exception with plone.formwidget.contenttree >= 1.0.11 that introduced\n  support for providing defaults to contenttrees.\n  [pcdummy]\n\n\n1.5 (2016-03-04)\n----------------\n\n- Add a querySelectSearchInput class to the input field.\n  [vincentfretin]\n\n- Add display template for single selection field\n  [sgeulette]\n\n- Fix buildout\n  [sgeulette]\n\n1.4 (2015-06-02)\n----------------\n\n- Remove prefill_person when clicking on Create Contact link (this behavior is\n  too difficult to understand for end users).\n  [cedricmessiant]\n\n- Use a more generic selector for title so that it also works with behaviors.\n  [cedricmessiant]\n\n- Use prelabel variable in template (so that you can override it in custom\n  settings, see collective.contact.core).\n  [cedricmessiant]\n\n- Increase results to 50 items.\n  [vincentfretin]\n\n- jQuery 1.9 compatibility.\n  [vincentfretin]\n\n- Fix ContactSource search if no review_state parameter\n  [ebrehault]\n\n\n1.2.2 (2014-09-25)\n------------------\n\n- Add review_state parameter on ContactList and ContactChoice widgets.\n  [cedricmessiant]\n\n1.2.1 (2014-09-10)\n------------------\n\n- UI : improve prefill of add new contact overlay form.\n  [thomasdesvenain]\n\n\n1.2 (2014-06-02)\n----------------\n\n- We can give as source param a 'relations' value to filter on contents\n  related to an other content.\n  [thomasdesvenain]\n\n\n1.1 (2014-03-11)\n----------------\n\n- Don't include closeOnClick: true in javascript, so it defaults to\n  global configuration.\n  [vincentfretin]\n\n- UI improvements :\n  - Add contact link is displayed after user has filled a search.\n  - We have and explicit help message next to contact link.\n  - Contact creation form title is pre-filled with user search.\n  - The search input has a placeholder.\n  [thomasdesvenain]\n\n- Execute prepOverlay only if it hasn't been done yet, this avoid to have a\n  pbo undefined error when you have recursive overlays.\n  [vincentfretin]\n\n- The jqueryui autocomplete plugin conflicts with the jquery autocomplete\n  plugin used by plone.formwidget.autocomplete, disable the jqueryui one.\n  [cedricmessiant]\n\n- Do not break dexterity content type when we don't have a REQUEST\n  (in async context).\n  [thomasdesvenain]\n\n- We can add contact and contact list fields TTW on dexterity content types.\n  [thomasdesvenain]\n\n\n1.0 (2013-09-18)\n----------------\n\n- Check do_post_sort attribute on source to be able to disable the sorting.\n\n- Declare dependencies on z3c.relationfield and plone.formwidget.contenttree.\n\n- Remove ploneform-render-widget view for content provider, this is now\n  in plone.app.z3cform since 0.7.3.\n\n\n1.0rc1 (2013-03-27)\n-------------------\n\n- Added hidden and rtf mode templates.\n  [vincentfretin]\n\n- Don't open tooltip in tooltip.\n  [vincentfretin]\n\n\n0.12 (2013-03-12)\n-----------------\n\n- Decode title, returning unicode, to standardize term attributes\n  [sgeulette]\n\n\n0.11 (2013-03-11)\n-----------------\n\n- Fixed UnicodeDecodeError in @@autocomplete-search\n  [vincentfretin]\n\n- Internationalized two messages.\n  [vincentfretin]\n\n- Don't show tooltip if the mouse left the link.\n  [vincentfretin]\n\n- Don't call tokenToUrl if value is --NOVALUE--.\n  [vincentfretin]\n\n\n0.10 (2013-03-07)\n-----------------\n\n- Nothing changed yet.\n\n\n0.9 (2013-03-07)\n----------------\n\n- Initial release.\n  [vincentfretin]\n", "code_before": "Changelog\n=========\n\n1.13 (unreleased)\n-----------------\n\n- Nothing changed yet.\n\n\n1.12 (2020-10-07)\n-----------------\n\n- Added prefiltering on widgets\n  [daggelpop, sgeulette]\n- Add Transifex.net service integration to manage the translation process.\n  [macagua]\n- Add Spanish translation\n  [macagua]\n\n\n1.11 (2019-09-20)\n-----------------\n\n- Limit catalog results (with sort_limit) because solr sends None for higher limit results.\n  [sgeulette]\n- Use contact_source metadata in widget result\n  [sgeulette]\n\n1.10 (2017-10-05)\n-----------------\n\n- Set Content-type 'text/plain' headers to autocomplete request. This prevent \"<!DOCTYPE html\" tag.\n  [bsuttor]\n\n\n1.9 (2017-05-30)\n----------------\n\n- Fix optimization issue when vocabulary is restricted by a relation.\n  [thomasdesvenain]\n\n- Prevent fatal error on autocomplete if by chance a held position related to a position or an organisation has been removed\n  but the relation always exist. An error is logged.\n  [thomasdesvenain]\n\n1.8 (2016-10-21)\n----------------\n\n- ContactChoice can now be used as master field when\n  plone.formwidget.masterselect >= 1.6 is installed.\n  [vincentfretin]\n\n\n1.7 (2016-07-07)\n----------------\n\n- Set matchSubset: false to fix autocomplete behavior with accents and not\n  doing a new ajax request.\n  [vincentfretin]\n\n- Ensure that the required property for ContactList field works correctly\n  [mpeeters]\n\n\n1.6 (2016-03-31)\n----------------\n\n- Fix an exception with plone.formwidget.contenttree >= 1.0.11 that introduced\n  support for providing defaults to contenttrees.\n  [pcdummy]\n\n\n1.5 (2016-03-04)\n----------------\n\n- Add a querySelectSearchInput class to the input field.\n  [vincentfretin]\n\n- Add display template for single selection field\n  [sgeulette]\n\n- Fix buildout\n  [sgeulette]\n\n1.4 (2015-06-02)\n----------------\n\n- Remove prefill_person when clicking on Create Contact link (this behavior is\n  too difficult to understand for end users).\n  [cedricmessiant]\n\n- Use a more generic selector for title so that it also works with behaviors.\n  [cedricmessiant]\n\n- Use prelabel variable in template (so that you can override it in custom\n  settings, see collective.contact.core).\n  [cedricmessiant]\n\n- Increase results to 50 items.\n  [vincentfretin]\n\n- jQuery 1.9 compatibility.\n  [vincentfretin]\n\n- Fix ContactSource search if no review_state parameter\n  [ebrehault]\n\n\n1.2.2 (2014-09-25)\n------------------\n\n- Add review_state parameter on ContactList and ContactChoice widgets.\n  [cedricmessiant]\n\n1.2.1 (2014-09-10)\n------------------\n\n- UI : improve prefill of add new contact overlay form.\n  [thomasdesvenain]\n\n\n1.2 (2014-06-02)\n----------------\n\n- We can give as source param a 'relations' value to filter on contents\n  related to an other content.\n  [thomasdesvenain]\n\n\n1.1 (2014-03-11)\n----------------\n\n- Don't include closeOnClick: true in javascript, so it defaults to\n  global configuration.\n  [vincentfretin]\n\n- UI improvements :\n  - Add contact link is displayed after user has filled a search.\n  - We have and explicit help message next to contact link.\n  - Contact creation form title is pre-filled with user search.\n  - The search input has a placeholder.\n  [thomasdesvenain]\n\n- Execute prepOverlay only if it hasn't been done yet, this avoid to have a\n  pbo undefined error when you have recursive overlays.\n  [vincentfretin]\n\n- The jqueryui autocomplete plugin conflicts with the jquery autocomplete\n  plugin used by plone.formwidget.autocomplete, disable the jqueryui one.\n  [cedricmessiant]\n\n- Do not break dexterity content type when we don't have a REQUEST\n  (in async context).\n  [thomasdesvenain]\n\n- We can add contact and contact list fields TTW on dexterity content types.\n  [thomasdesvenain]\n\n\n1.0 (2013-09-18)\n----------------\n\n- Check do_post_sort attribute on source to be able to disable the sorting.\n\n- Declare dependencies on z3c.relationfield and plone.formwidget.contenttree.\n\n- Remove ploneform-render-widget view for content provider, this is now\n  in plone.app.z3cform since 0.7.3.\n\n\n1.0rc1 (2013-03-27)\n-------------------\n\n- Added hidden and rtf mode templates.\n  [vincentfretin]\n\n- Don't open tooltip in tooltip.\n  [vincentfretin]\n\n\n0.12 (2013-03-12)\n-----------------\n\n- Decode title, returning unicode, to standardize term attributes\n  [sgeulette]\n\n\n0.11 (2013-03-11)\n-----------------\n\n- Fixed UnicodeDecodeError in @@autocomplete-search\n  [vincentfretin]\n\n- Internationalized two messages.\n  [vincentfretin]\n\n- Don't show tooltip if the mouse left the link.\n  [vincentfretin]\n\n- Don't call tokenToUrl if value is --NOVALUE--.\n  [vincentfretin]\n\n\n0.10 (2013-03-07)\n-----------------\n\n- Nothing changed yet.\n\n\n0.9 (2013-03-07)\n----------------\n\n- Initial release.\n  [vincentfretin]\n", "patch": "@@ -4,8 +4,10 @@ Changelog\n 1.13 (unreleased)\n -----------------\n \n-- Nothing changed yet.\n-\n+- Escaped contact title special characters in `term-contact` viewlet to avoid\n+  script insertion (xss). This viewlet stores an hidden field used in a\n+  dynamically js generation.\n+  [sgeulette]\n \n 1.12 (2020-10-07)\n -----------------", "file_path": "files/2022_12/1049", "file_language": "rst", "file_name": "CHANGES.rst", "outdated_file_modify": 1, "outdated_file_before": 1, "outdated_file_after": 0}, {"raw_url": "https://github.com/collective/collective.contact.widget/raw/5da36305ca7ed433782be8901c47387406fcda12/src%2Fcollective%2Fcontact%2Fwidget%2Fwidgets.py", "code": "from cgi import escape\nfrom collective.contact.widget import _\nfrom collective.contact.widget.interfaces import IContactAutocompleteMultiSelectionWidget\nfrom collective.contact.widget.interfaces import IContactAutocompleteSelectionWidget\nfrom collective.contact.widget.interfaces import IContactAutocompleteWidget\nfrom collective.contact.widget.interfaces import IContactContent\nfrom collective.contact.widget.interfaces import IContactWidgetSettings\nfrom five import grok\nfrom plone.app.layout.viewlets.interfaces import IBelowContent\nfrom plone.app.layout.viewlets.interfaces import IHtmlHeadLinks\nfrom plone.formwidget.autocomplete.widget import AutocompleteMultiSelectionWidget\nfrom plone.formwidget.autocomplete.widget import AutocompleteSearch as BaseAutocompleteSearch\nfrom plone.formwidget.autocomplete.widget import AutocompleteSelectionWidget\nfrom Products.CMFPlone.utils import base_hasattr\nfrom Products.CMFPlone.utils import safe_unicode\nfrom z3c.form.interfaces import IFieldWidget\nfrom z3c.form.widget import FieldWidget\nfrom zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\nfrom zope.component import getUtility\nfrom zope.component.interfaces import ComponentLookupError\nfrom zope.i18n import translate\nfrom zope.interface import implementer\nfrom zope.interface import implements\nfrom zope.interface import Interface\nfrom zope.schema.interfaces import IContextSourceBinder\nfrom zope.schema.interfaces import IVocabulary\nfrom zope.schema.interfaces import IVocabularyFactory\n\nimport json\nimport z3c.form.interfaces\n\n\ntry:\n    from plone.formwidget.masterselect.interfaces import IMasterSelectWidget\n    from plone.formwidget.masterselect.widget import MasterSelect as BaseMasterSelect\n    class MasterSelect(BaseMasterSelect):\n        grok.implements(IMasterSelectWidget)\n        def getSlaves(self):\n            for slave in self.field.slave_fields:\n                yield slave.copy()\nexcept ImportError:\n    class MasterSelect(object):\n        pass\n\n\nclass PatchLoadInsideOverlay(grok.Viewlet):\n    grok.context(Interface)\n    grok.viewletmanager(IHtmlHeadLinks)\n    wait_msg = _(u\"please wait\")\n    tooltip_template = ViewPageTemplateFile('js/widget.js.pt')\n\n    def render(self):\n        return self.tooltip_template() % {\n            'wait_msg': translate(self.wait_msg, context=self.request)}\n\n\nclass TermViewlet(grok.Viewlet):\n    grok.name('term-contact')\n    grok.context(IContactContent)\n    grok.viewletmanager(IBelowContent)\n\n    @property\n    def token(self):\n        return '/'.join(self.context.getPhysicalPath())\n\n    @property\n    def title(self):\n        if base_hasattr(self.context, 'get_full_title'):\n            title = self.context.get_full_title()\n        else:\n            title = self.context.Title()\n        title = title and safe_unicode(title) or u\"\"\n        return escape(title, quote=True)\n\n    @property\n    def portal_type(self):\n        return self.context.portal_type\n\n    @property\n    def url(self):\n        return self.context.absolute_url()\n\n    def render(self):\n        return u\"\"\"<input type=\"hidden\" name=\"objpath\" value=\"%s\" />\"\"\" % (\n            '|'.join([self.token, self.title, self.portal_type, self.url]))\n\n\nclass ContactBaseWidget(object):\n    implements(IContactAutocompleteWidget)\n    noValueLabel = _(u'(nothing)')\n    autoFill = False\n    maxResults = 50\n    close_on_click = True\n    display_template = ViewPageTemplateFile('templates/contact_display.pt')\n    input_template = ViewPageTemplateFile('templates/contact_input.pt')\n    hidden_template = ViewPageTemplateFile('templates/contact_hidden.pt')\n    rtf_template = ViewPageTemplateFile('templates/contact_rtf.pt')\n\n    # JavaScript template\n    js_template = \"\"\"\\\n    (function($) {\n        $().ready(function() {\n            $('#%(id)s-input-fields').data('klass','%(klass)s').data('title','%(title)s').data('input_type','%(input_type)s').data('multiple', %(multiple)s);\n            $('#%(id)s-buttons-search').remove();\n            $('#%(id)s-widgets-query').autocomplete('%(url)s', {\n                autoFill: %(autoFill)s,\n                minChars: %(minChars)d,\n                max: %(maxResults)d,\n                mustMatch: %(mustMatch)s,\n                matchContains: %(matchContains)s,\n                matchSubset: false,\n                formatItem: %(formatItem)s,\n                formatResult: %(formatResult)s,\n                parse: %(parseFunction)s,\n                extraParams: {'prefilter': function() {return $('#formfield-%(id)s .prefilter-select').val() || '';}}\n            }).result(%(js_callback)s);\n            %(js_extra)s\n        });\n    })(jQuery);\n    \"\"\"\n\n    js_callback_template = \"\"\"\nfunction (event, data, formatted) {\n    (function($) {\n        var input_box = $(event.target);\n        formwidget_autocomplete_new_value(input_box,data[0],data[1]);\n        // trigger change event on newly added input element\n        var input = input_box.parents('.querySelectSearch').parent('div').siblings('.autocompleteInputWidget').find('input').last();\n        var url = data[3];\n        ccw.add_contact_preview(input, url);\n        input.trigger('change');\n    }(jQuery));\n}\n\"\"\"\n    overlay_template = ViewPageTemplateFile('js/overlay.js.pt')\n    placeholder = _(u\"Fill your search here...\")\n\n    @property\n    def bound_source(self):\n        try:\n            return super(ContactBaseWidget, self).bound_source\n        except ComponentLookupError:\n            return []\n\n    def tokenToUrl(self, token):\n        if token == \"--NOVALUE--\":\n            return \"\"\n        return self.bound_source.tokenToUrl(token)\n\n    def render(self):\n        settings = getUtility(IContactWidgetSettings)\n        attributes = settings.add_contact_infos(self)\n        for key, value in attributes.items():\n            setattr(self, key, value)\n        if self.mode == z3c.form.interfaces.DISPLAY_MODE:\n            return self.display_template(self)\n        elif self.mode == z3c.form.interfaces.HIDDEN_MODE:\n            return self.hidden_template(self)\n        elif self.mode == \"rtf\":\n            return self.rtf_template(self)\n        else:\n            return self.input_template(self)\n\n    def js_extra(self):\n        content = \"\"\n        include_default = False\n        for action in self.actions:\n            formselector = action.get('formselector', None)\n            if formselector is None:\n                include_default = True\n            else:\n                closeselector = action.get(\n                    'closeselector', '[name=\"form.buttons.cancel\"]')\n                content += self.overlay_template(**dict(\n                    klass=action['klass'],\n                    formselector=formselector,\n                    closeselector=closeselector,\n                    closeOnClick=self.close_on_click and 'true' or 'false'))\n\n        if include_default:\n            content += self.overlay_template(**dict(\n                klass='addnew',\n                formselector='#form',\n                closeselector='[name=\"form.buttons.cancel\"]',\n                closeOnClick=self.close_on_click and 'true' or 'false'))\n\n        return content\n\n    def prefilter_terms(self):\n        if isinstance(self.field.prefilter_vocabulary, basestring):\n            vocabulary = getUtility(IVocabularyFactory, name=self.field.prefilter_vocabulary)\n            return vocabulary(self.context)\n        elif IVocabulary.providedBy(self.field.prefilter_vocabulary):\n            return self.field.prefilter_vocabulary\n        elif IContextSourceBinder.providedBy(self.field.prefilter_vocabulary):\n            source = self.field.prefilter_vocabulary\n            return source(self.context)\n        else:\n            return []\n\n    def prefilter_default_value(self):\n        if callable(self.field.prefilter_default_value):\n            return self.field.prefilter_default_value(self.context)\n        else:\n            return None\n\n\nclass ContactAutocompleteSelectionWidget(ContactBaseWidget, AutocompleteSelectionWidget, MasterSelect):\n    implements(IContactAutocompleteSelectionWidget)\n    display_template = ViewPageTemplateFile('templates/contact_display_single.pt')\n\n\nclass ContactAutocompleteMultiSelectionWidget(ContactBaseWidget, AutocompleteMultiSelectionWidget):\n    implements(IContactAutocompleteMultiSelectionWidget)\n\n\n@implementer(IFieldWidget)\ndef ContactAutocompleteFieldWidget(field, request):\n    widget = ContactAutocompleteSelectionWidget(request)\n    return FieldWidget(field, widget)\n\n\n@implementer(IFieldWidget)\ndef ContactAutocompleteMultiFieldWidget(field, request):\n    widget = ContactAutocompleteMultiSelectionWidget(request)\n    return FieldWidget(field, widget)\n\n\nclass AutocompleteSearch(BaseAutocompleteSearch):\n    def __call__(self):\n        # We want to check that the user was indeed allowed to access the\n        # form for this widget. We can only this now, since security isn't\n        # applied yet during traversal.\n        self.validate_access()\n\n        query = self.request.get('q', None)\n        path = self.request.get('path', None)\n        if not query:\n            if path is None:\n                return ''\n            else:\n                query = ''\n\n        relations = self.request.get('relations', None)\n        # Update the widget before accessing the source.\n        # The source was only bound without security applied\n        # during traversal before.\n        self.context.update()\n        source = self.context.bound_source\n        if path is not None:\n            query = \"path:%s %s\" % (source.tokenToPath(path), query)\n\n        if query or relations:\n            prefilter = {}\n            try:\n                prefilter_param = json.loads(self.request.get('prefilter'))\n                if type(prefilter_param) == dict and len(prefilter_param) > 0:\n                    prefilter = prefilter_param\n            except ValueError:\n                pass\n\n            terms = source.search(query, relations=relations, prefilter=prefilter)\n\n        else:\n            terms = ()\n\n        if getattr(source, 'do_post_sort', True):\n            terms = sorted(set(terms), key=lambda t: t.title)\n\n        response = self.request.response\n        response.setHeader('Content-type', 'text/plain')\n\n        return u'\\n'.join([u\"|\".join((t.token, t.title or t.token, t.portal_type, t.url, t.extra))\n                          for t in terms])\n", "code_before": "import json\n\nfrom z3c.form.interfaces import IFieldWidget\nimport z3c.form.interfaces\nfrom z3c.form.widget import FieldWidget\nfrom zope.component import getUtility\nfrom zope.component.interfaces import ComponentLookupError\nfrom zope.i18n import translate\nfrom zope.interface import implementer, implements, Interface\nfrom zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\nfrom zope.schema.interfaces import IContextSourceBinder\nfrom zope.schema.interfaces import IVocabulary\nfrom zope.schema.interfaces import IVocabularyFactory\nfrom five import grok\n\nfrom Products.CMFPlone.utils import base_hasattr, safe_unicode\nfrom plone.app.layout.viewlets.interfaces import IBelowContent\nfrom plone.app.layout.viewlets.interfaces import IHtmlHeadLinks\nfrom plone.formwidget.autocomplete.widget import (\n    AutocompleteMultiSelectionWidget,\n    AutocompleteSelectionWidget)\nfrom plone.formwidget.autocomplete.widget import AutocompleteSearch as BaseAutocompleteSearch\n\ntry:\n    from plone.formwidget.masterselect.widget import MasterSelect as BaseMasterSelect\n    from plone.formwidget.masterselect.interfaces import IMasterSelectWidget\n    class MasterSelect(BaseMasterSelect):\n        grok.implements(IMasterSelectWidget)\n        def getSlaves(self):\n            for slave in self.field.slave_fields:\n                yield slave.copy()\nexcept ImportError:\n    class MasterSelect(object):\n        pass\n\nfrom collective.contact.widget import _\nfrom collective.contact.widget.interfaces import (\n    IContactAutocompleteWidget,\n    IContactAutocompleteSelectionWidget,\n    IContactAutocompleteMultiSelectionWidget,\n    IContactContent,\n    IContactWidgetSettings,\n)\n\n\nclass PatchLoadInsideOverlay(grok.Viewlet):\n    grok.context(Interface)\n    grok.viewletmanager(IHtmlHeadLinks)\n    wait_msg = _(u\"please wait\")\n    tooltip_template = ViewPageTemplateFile('js/widget.js.pt')\n\n    def render(self):\n        return self.tooltip_template() % {\n            'wait_msg': translate(self.wait_msg, context=self.request)}\n\n\nclass TermViewlet(grok.Viewlet):\n    grok.name('term-contact')\n    grok.context(IContactContent)\n    grok.viewletmanager(IBelowContent)\n\n    @property\n    def token(self):\n        return '/'.join(self.context.getPhysicalPath())\n\n    @property\n    def title(self):\n        if base_hasattr(self.context, 'get_full_title'):\n            title = self.context.get_full_title()\n        else:\n            title = self.context.Title()\n        title = title and safe_unicode(title) or u\"\"\n        return title\n\n    @property\n    def portal_type(self):\n        return self.context.portal_type\n\n    @property\n    def url(self):\n        return self.context.absolute_url()\n\n    def render(self):\n        return u\"\"\"<input type=\"hidden\" name=\"objpath\" value=\"%s\" />\"\"\" % (\n            '|'.join([self.token, self.title, self.portal_type, self.url]))\n\n\nclass ContactBaseWidget(object):\n    implements(IContactAutocompleteWidget)\n    noValueLabel = _(u'(nothing)')\n    autoFill = False\n    maxResults = 50\n    close_on_click = True\n    display_template = ViewPageTemplateFile('templates/contact_display.pt')\n    input_template = ViewPageTemplateFile('templates/contact_input.pt')\n    hidden_template = ViewPageTemplateFile('templates/contact_hidden.pt')\n    rtf_template = ViewPageTemplateFile('templates/contact_rtf.pt')\n\n    # JavaScript template\n    js_template = \"\"\"\\\n    (function($) {\n        $().ready(function() {\n            $('#%(id)s-input-fields').data('klass','%(klass)s').data('title','%(title)s').data('input_type','%(input_type)s').data('multiple', %(multiple)s);\n            $('#%(id)s-buttons-search').remove();\n            $('#%(id)s-widgets-query').autocomplete('%(url)s', {\n                autoFill: %(autoFill)s,\n                minChars: %(minChars)d,\n                max: %(maxResults)d,\n                mustMatch: %(mustMatch)s,\n                matchContains: %(matchContains)s,\n                matchSubset: false,\n                formatItem: %(formatItem)s,\n                formatResult: %(formatResult)s,\n                parse: %(parseFunction)s,\n                extraParams: {'prefilter': function() {return $('#formfield-%(id)s .prefilter-select').val() || '';}}\n            }).result(%(js_callback)s);\n            %(js_extra)s\n        });\n    })(jQuery);\n    \"\"\"\n\n    js_callback_template = \"\"\"\nfunction (event, data, formatted) {\n    (function($) {\n        var input_box = $(event.target);\n        formwidget_autocomplete_new_value(input_box,data[0],data[1]);\n        // trigger change event on newly added input element\n        var input = input_box.parents('.querySelectSearch').parent('div').siblings('.autocompleteInputWidget').find('input').last();\n        var url = data[3];\n        ccw.add_contact_preview(input, url);\n        input.trigger('change');\n    }(jQuery));\n}\n\"\"\"\n    overlay_template = ViewPageTemplateFile('js/overlay.js.pt')\n    placeholder = _(u\"Fill your search here...\")\n\n    @property\n    def bound_source(self):\n        try:\n            return super(ContactBaseWidget, self).bound_source\n        except ComponentLookupError:\n            return []\n\n    def tokenToUrl(self, token):\n        if token == \"--NOVALUE--\":\n            return \"\"\n        return self.bound_source.tokenToUrl(token)\n\n    def render(self):\n        settings = getUtility(IContactWidgetSettings)\n        attributes = settings.add_contact_infos(self)\n        for key, value in attributes.items():\n            setattr(self, key, value)\n        if self.mode == z3c.form.interfaces.DISPLAY_MODE:\n            return self.display_template(self)\n        elif self.mode == z3c.form.interfaces.HIDDEN_MODE:\n            return self.hidden_template(self)\n        elif self.mode == \"rtf\":\n            return self.rtf_template(self)\n        else:\n            return self.input_template(self)\n\n    def js_extra(self):\n        content = \"\"\n        include_default = False\n        for action in self.actions:\n            formselector = action.get('formselector', None)\n            if formselector is None:\n                include_default = True\n            else:\n                closeselector = action.get(\n                    'closeselector', '[name=\"form.buttons.cancel\"]')\n                content += self.overlay_template(**dict(\n                    klass=action['klass'],\n                    formselector=formselector,\n                    closeselector=closeselector,\n                    closeOnClick=self.close_on_click and 'true' or 'false'))\n\n        if include_default:\n            content += self.overlay_template(**dict(\n                klass='addnew',\n                formselector='#form',\n                closeselector='[name=\"form.buttons.cancel\"]',\n                closeOnClick=self.close_on_click and 'true' or 'false'))\n\n        return content\n\n    def prefilter_terms(self):\n        if isinstance(self.field.prefilter_vocabulary, basestring):\n            vocabulary = getUtility(IVocabularyFactory, name=self.field.prefilter_vocabulary)\n            return vocabulary(self.context)\n        elif IVocabulary.providedBy(self.field.prefilter_vocabulary):\n            return self.field.prefilter_vocabulary\n        elif IContextSourceBinder.providedBy(self.field.prefilter_vocabulary):\n            source = self.field.prefilter_vocabulary\n            return source(self.context)\n        else:\n            return []\n\n    def prefilter_default_value(self):\n        if callable(self.field.prefilter_default_value):\n            return self.field.prefilter_default_value(self.context)\n        else:\n            return None\n\n\nclass ContactAutocompleteSelectionWidget(ContactBaseWidget, AutocompleteSelectionWidget, MasterSelect):\n    implements(IContactAutocompleteSelectionWidget)\n    display_template = ViewPageTemplateFile('templates/contact_display_single.pt')\n\n\nclass ContactAutocompleteMultiSelectionWidget(ContactBaseWidget, AutocompleteMultiSelectionWidget):\n    implements(IContactAutocompleteMultiSelectionWidget)\n\n\n@implementer(IFieldWidget)\ndef ContactAutocompleteFieldWidget(field, request):\n    widget = ContactAutocompleteSelectionWidget(request)\n    return FieldWidget(field, widget)\n\n\n@implementer(IFieldWidget)\ndef ContactAutocompleteMultiFieldWidget(field, request):\n    widget = ContactAutocompleteMultiSelectionWidget(request)\n    return FieldWidget(field, widget)\n\n\nclass AutocompleteSearch(BaseAutocompleteSearch):\n    def __call__(self):\n        # We want to check that the user was indeed allowed to access the\n        # form for this widget. We can only this now, since security isn't\n        # applied yet during traversal.\n        self.validate_access()\n\n        query = self.request.get('q', None)\n        path = self.request.get('path', None)\n        if not query:\n            if path is None:\n                return ''\n            else:\n                query = ''\n\n        relations = self.request.get('relations', None)\n        # Update the widget before accessing the source.\n        # The source was only bound without security applied\n        # during traversal before.\n        self.context.update()\n        source = self.context.bound_source\n        if path is not None:\n            query = \"path:%s %s\" % (source.tokenToPath(path), query)\n\n        if query or relations:\n            prefilter = {}\n            try:\n                prefilter_param = json.loads(self.request.get('prefilter'))\n                if type(prefilter_param) == dict and len(prefilter_param) > 0:\n                    prefilter = prefilter_param\n            except ValueError:\n                pass\n\n            terms = source.search(query, relations=relations, prefilter=prefilter)\n\n        else:\n            terms = ()\n\n        if getattr(source, 'do_post_sort', True):\n            terms = sorted(set(terms), key=lambda t: t.title)\n\n        response = self.request.response\n        response.setHeader('Content-type', 'text/plain')\n\n        return u'\\n'.join([u\"|\".join((t.token, t.title or t.token, t.portal_type, t.url, t.extra))\n                          for t in terms])\n", "patch": "@@ -1,29 +1,38 @@\n-import json\n-\n+from cgi import escape\n+from collective.contact.widget import _\n+from collective.contact.widget.interfaces import IContactAutocompleteMultiSelectionWidget\n+from collective.contact.widget.interfaces import IContactAutocompleteSelectionWidget\n+from collective.contact.widget.interfaces import IContactAutocompleteWidget\n+from collective.contact.widget.interfaces import IContactContent\n+from collective.contact.widget.interfaces import IContactWidgetSettings\n+from five import grok\n+from plone.app.layout.viewlets.interfaces import IBelowContent\n+from plone.app.layout.viewlets.interfaces import IHtmlHeadLinks\n+from plone.formwidget.autocomplete.widget import AutocompleteMultiSelectionWidget\n+from plone.formwidget.autocomplete.widget import AutocompleteSearch as BaseAutocompleteSearch\n+from plone.formwidget.autocomplete.widget import AutocompleteSelectionWidget\n+from Products.CMFPlone.utils import base_hasattr\n+from Products.CMFPlone.utils import safe_unicode\n from z3c.form.interfaces import IFieldWidget\n-import z3c.form.interfaces\n from z3c.form.widget import FieldWidget\n+from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\n from zope.component import getUtility\n from zope.component.interfaces import ComponentLookupError\n from zope.i18n import translate\n-from zope.interface import implementer, implements, Interface\n-from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\n+from zope.interface import implementer\n+from zope.interface import implements\n+from zope.interface import Interface\n from zope.schema.interfaces import IContextSourceBinder\n from zope.schema.interfaces import IVocabulary\n from zope.schema.interfaces import IVocabularyFactory\n-from five import grok\n \n-from Products.CMFPlone.utils import base_hasattr, safe_unicode\n-from plone.app.layout.viewlets.interfaces import IBelowContent\n-from plone.app.layout.viewlets.interfaces import IHtmlHeadLinks\n-from plone.formwidget.autocomplete.widget import (\n-    AutocompleteMultiSelectionWidget,\n-    AutocompleteSelectionWidget)\n-from plone.formwidget.autocomplete.widget import AutocompleteSearch as BaseAutocompleteSearch\n+import json\n+import z3c.form.interfaces\n+\n \n try:\n-    from plone.formwidget.masterselect.widget import MasterSelect as BaseMasterSelect\n     from plone.formwidget.masterselect.interfaces import IMasterSelectWidget\n+    from plone.formwidget.masterselect.widget import MasterSelect as BaseMasterSelect\n     class MasterSelect(BaseMasterSelect):\n         grok.implements(IMasterSelectWidget)\n         def getSlaves(self):\n@@ -33,15 +42,6 @@ def getSlaves(self):\n     class MasterSelect(object):\n         pass\n \n-from collective.contact.widget import _\n-from collective.contact.widget.interfaces import (\n-    IContactAutocompleteWidget,\n-    IContactAutocompleteSelectionWidget,\n-    IContactAutocompleteMultiSelectionWidget,\n-    IContactContent,\n-    IContactWidgetSettings,\n-)\n-\n \n class PatchLoadInsideOverlay(grok.Viewlet):\n     grok.context(Interface)\n@@ -70,7 +70,7 @@ def title(self):\n         else:\n             title = self.context.Title()\n         title = title and safe_unicode(title) or u\"\"\n-        return title\n+        return escape(title, quote=True)\n \n     @property\n     def portal_type(self):", "file_path": "files/2022_12/1050", "file_language": "py", "file_name": "src/collective/contact/widget/widgets.py", "outdated_file_modify": 0, "outdated_file_before": 0, "outdated_file_after": 1, "llm_check": 1, "static_check": 0, "static": {"rats": [false, []], "semgrep": [false, []]}, "target": -1, "function_before": [], "function_after": []}], "outdated": 0, "cwe_descripiton": "", "cwe_consequence": "", "cwe_method": "", "cwe_solution": ""}
